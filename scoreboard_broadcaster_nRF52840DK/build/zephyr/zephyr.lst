
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	c0 5e 00 20 79 d0 00 00 71 6e 01 00 4d d0 00 00     .^. y...qn..M...
	while (ad->len > 1) {
  10:	4d d0 00 00 4d d0 00 00 4d d0 00 00 00 00 00 00     M...M...M.......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	49 c9 00 00 4d d0 00 00 00 00 00 00 f5 c8 00 00     I...M...........
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	4d d0 00 00                                         M...

00000040 <_irq_vector_table>:
  40:	f9 c9 00 00 41 7b 01 00 f9 c9 00 00 f9 c9 00 00     ....A{..........
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
		data.data_len = len - 1;
		data.data = ad->data;
  60:	ef 7a 01 00 f9 c9 00 00 f9 c9 00 00 27 7b 01 00     .z..........'{..

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  80:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  90:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  a0:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  b0:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  c0:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  d0:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  e0:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................
  f0:	f9 c9 00 00 f9 c9 00 00 f9 c9 00 00 f9 c9 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f007 fb84 	bl	782c <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop
     134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     136:	4c14      	ldr	r4, [pc, #80]	; (188 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1b>)
     138:	7a20      	ldrb	r0, [r4, #8]
     13a:	f88d 0001 	strb.w	r0, [sp, #1]
     13e:	79e0      	ldrb	r0, [r4, #7]
     140:	f88d 0000 	strb.w	r0, [sp]
     144:	79a0      	ldrb	r0, [r4, #6]
     146:	f8ad 0004 	strh.w	r0, [sp, #4]
     14a:	7960      	ldrb	r0, [r4, #5]
     14c:	f8ad 0002 	strh.w	r0, [sp, #2]
     150:	4668      	mov	r0, sp
     152:	f002 fbe1 	bl	2918 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     156:	b108      	cbz	r0, 15c <CONFIG_IDLE_STACK_SIZE+0x1c>
     158:	21ad      	movs	r1, #173	; 0xad
     15a:	e010      	b.n	17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>
     15c:	68e0      	ldr	r0, [r4, #12]
     15e:	9002      	str	r0, [sp, #8]
     160:	a802      	add	r0, sp, #8
     162:	f002 fbef 	bl	2944 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     166:	b108      	cbz	r0, 16c <CONFIG_IDLE_STACK_SIZE+0x2c>
     168:	21b1      	movs	r1, #177	; 0xb1
     16a:	e008      	b.n	17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>
     16c:	4807      	ldr	r0, [pc, #28]	; (18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>)
     16e:	6800      	ldr	r0, [r0, #0]
     170:	9003      	str	r0, [sp, #12]
     172:	a803      	add	r0, sp, #12
     174:	f009 fac7 	bl	9706 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     178:	2800      	cmp	r0, #0
     17a:	d003      	beq.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     17c:	21b5      	movs	r1, #181	; 0xb5
     17e:	2003      	movs	r0, #3
     180:	f000 f8e4 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     184:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     186:	0000      	.short	0x0000
     188:	20000be8 	.word	0x20000be8
     18c:	000003d4 	.word	0x000003d4

00000190 <sdc_build_revision_get>:
     190:	b510      	push	{r4, lr}
     192:	b128      	cbz	r0, 1a0 <sdc_build_revision_get+0x10>
     194:	2214      	movs	r2, #20
     196:	4904      	ldr	r1, [pc, #16]	; (1a8 <sdc_build_revision_get+0x18>)
     198:	f009 ff3c 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     19c:	2000      	movs	r0, #0
     19e:	bd10      	pop	{r4, pc}
     1a0:	f06f 0015 	mvn.w	r0, #21
     1a4:	bd10      	pop	{r4, pc}
     1a6:	0000      	.short	0x0000
     1a8:	000003fc 	.word	0x000003fc

000001ac <sdc_cfg_set>:
     1ac:	b570      	push	{r4, r5, r6, lr}
     1ae:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     1b2:	bb78      	cbnz	r0, 214 <sdc_cfg_set+0x68>
     1b4:	4c22      	ldr	r4, [pc, #136]	; (240 <sdc_cfg_set+0x94>)
     1b6:	7860      	ldrb	r0, [r4, #1]
     1b8:	b108      	cbz	r0, 1be <sdc_cfg_set+0x12>
     1ba:	11a8      	asrs	r0, r5, #6
     1bc:	bd70      	pop	{r4, r5, r6, pc}
     1be:	b1f9      	cbz	r1, 200 <sdc_cfg_set+0x54>
     1c0:	f06f 0015 	mvn.w	r0, #21
     1c4:	2a00      	cmp	r2, #0
     1c6:	d0f9      	beq.n	1bc <sdc_cfg_set+0x10>
     1c8:	4b1e      	ldr	r3, [pc, #120]	; (244 <sdc_cfg_set+0x98>)
     1ca:	1e89      	subs	r1, r1, #2
     1cc:	2907      	cmp	r1, #7
     1ce:	d231      	bcs.n	234 <sdc_cfg_set+0x88>
     1d0:	e8df f001 	tbb	[pc, r1]
     1d4:	1a170704 	.word	0x1a170704
     1d8:	00211d30 	.word	0x00211d30
     1dc:	7810      	ldrb	r0, [r2, #0]
     1de:	7058      	strb	r0, [r3, #1]
     1e0:	e01d      	b.n	21e <sdc_cfg_set+0x72>
     1e2:	7891      	ldrb	r1, [r2, #2]
     1e4:	2900      	cmp	r1, #0
     1e6:	d0e9      	beq.n	1bc <sdc_cfg_set+0x10>
     1e8:	78d1      	ldrb	r1, [r2, #3]
     1ea:	2900      	cmp	r1, #0
     1ec:	d0e6      	beq.n	1bc <sdc_cfg_set+0x10>
     1ee:	7811      	ldrb	r1, [r2, #0]
     1f0:	291b      	cmp	r1, #27
     1f2:	d3e3      	bcc.n	1bc <sdc_cfg_set+0x10>
     1f4:	7851      	ldrb	r1, [r2, #1]
     1f6:	291b      	cmp	r1, #27
     1f8:	d3e0      	bcc.n	1bc <sdc_cfg_set+0x10>
     1fa:	6810      	ldr	r0, [r2, #0]
     1fc:	f8c3 0005 	str.w	r0, [r3, #5]
     200:	e00d      	b.n	21e <sdc_cfg_set+0x72>
     202:	6810      	ldr	r0, [r2, #0]
     204:	60d8      	str	r0, [r3, #12]
     206:	e00a      	b.n	21e <sdc_cfg_set+0x72>
     208:	7810      	ldrb	r0, [r2, #0]
     20a:	7098      	strb	r0, [r3, #2]
     20c:	e007      	b.n	21e <sdc_cfg_set+0x72>
     20e:	8810      	ldrh	r0, [r2, #0]
     210:	8258      	strh	r0, [r3, #18]
     212:	e004      	b.n	21e <sdc_cfg_set+0x72>
     214:	e00e      	b.n	234 <sdc_cfg_set+0x88>
     216:	8811      	ldrh	r1, [r2, #0]
     218:	29ff      	cmp	r1, #255	; 0xff
     21a:	d8cf      	bhi.n	1bc <sdc_cfg_set+0x10>
     21c:	7519      	strb	r1, [r3, #20]
     21e:	2201      	movs	r2, #1
     220:	4908      	ldr	r1, [pc, #32]	; (244 <sdc_cfg_set+0x98>)
     222:	2000      	movs	r0, #0
     224:	f007 fc52 	bl	7acc <__udivmoddi4+0x2a0>
     228:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     22c:	db04      	blt.n	238 <sdc_cfg_set+0x8c>
     22e:	f06f 000b 	mvn.w	r0, #11
     232:	bd70      	pop	{r4, r5, r6, pc}
     234:	4628      	mov	r0, r5
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	2101      	movs	r1, #1
     23a:	70a1      	strb	r1, [r4, #2]
     23c:	bd70      	pop	{r4, r5, r6, pc}
     23e:	0000      	.short	0x0000
     240:	20000040 	.word	0x20000040
     244:	20000be8 	.word	0x20000be8

00000248 <sdc_disable>:
     248:	b510      	push	{r4, lr}
     24a:	4c07      	ldr	r4, [pc, #28]	; (268 <sdc_disable+0x20>)
     24c:	7860      	ldrb	r0, [r4, #1]
     24e:	b120      	cbz	r0, 25a <sdc_disable+0x12>
     250:	f002 fd10 	bl	2c74 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     254:	7820      	ldrb	r0, [r4, #0]
     256:	f007 fa09 	bl	766c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     25a:	f000 fddb 	bl	e14 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     25e:	f000 feb3 	bl	fc8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     262:	2000      	movs	r0, #0
     264:	7060      	strb	r0, [r4, #1]
     266:	bd10      	pop	{r4, pc}
     268:	20000040 	.word	0x20000040

0000026c <sdc_enable>:
     26c:	b570      	push	{r4, r5, r6, lr}
     26e:	460c      	mov	r4, r1
     270:	0005      	movs	r5, r0
     272:	d002      	beq.n	27a <sdc_enable+0xe>
     274:	b10c      	cbz	r4, 27a <sdc_enable+0xe>
     276:	0760      	lsls	r0, r4, #29
     278:	d002      	beq.n	280 <sdc_enable+0x14>
     27a:	f06f 0015 	mvn.w	r0, #21
     27e:	bd70      	pop	{r4, r5, r6, pc}
     280:	f000 f8e2 	bl	448 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     284:	b1a8      	cbz	r0, 2b2 <sdc_enable+0x46>
     286:	4628      	mov	r0, r5
     288:	f007 f9b6 	bl	75f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     28c:	4d0a      	ldr	r5, [pc, #40]	; (2b8 <sdc_enable+0x4c>)
     28e:	2200      	movs	r2, #0
     290:	490a      	ldr	r1, [pc, #40]	; (2bc <sdc_enable+0x50>)
     292:	7028      	strb	r0, [r5, #0]
     294:	4620      	mov	r0, r4
     296:	f007 fc19 	bl	7acc <__udivmoddi4+0x2a0>
     29a:	f009 fc88 	bl	9bae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     29e:	2100      	movs	r1, #0
     2a0:	7828      	ldrb	r0, [r5, #0]
     2a2:	f002 fcd1 	bl	2c48 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     2a6:	f7ff ff45 	bl	134 <__aeabi_idiv0+0x4>
     2aa:	2001      	movs	r0, #1
     2ac:	7068      	strb	r0, [r5, #1]
     2ae:	2000      	movs	r0, #0
     2b0:	bd70      	pop	{r4, r5, r6, pc}
     2b2:	f04f 30ff 	mov.w	r0, #4294967295
     2b6:	bd70      	pop	{r4, r5, r6, pc}
     2b8:	20000040 	.word	0x20000040
     2bc:	20000be8 	.word	0x20000be8

000002c0 <sdc_init>:
     2c0:	b530      	push	{r4, r5, lr}
     2c2:	b089      	sub	sp, #36	; 0x24
     2c4:	0004      	movs	r4, r0
     2c6:	d00c      	beq.n	2e2 <sdc_init+0x22>
     2c8:	f007 f93e 	bl	7548 <mpsl_is_initialized>
     2cc:	f04f 35ff 	mov.w	r5, #4294967295
     2d0:	b120      	cbz	r0, 2dc <sdc_init+0x1c>
     2d2:	f006 ffef 	bl	72b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     2d6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     2da:	d905      	bls.n	2e8 <sdc_init+0x28>
     2dc:	4628      	mov	r0, r5
     2de:	b009      	add	sp, #36	; 0x24
     2e0:	bd30      	pop	{r4, r5, pc}
     2e2:	f06f 0015 	mvn.w	r0, #21
     2e6:	e7fa      	b.n	2de <sdc_init+0x1e>
     2e8:	4d13      	ldr	r5, [pc, #76]	; (338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>)
     2ea:	4814      	ldr	r0, [pc, #80]	; (33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>)
     2ec:	606c      	str	r4, [r5, #4]
     2ee:	f000 f9bf 	bl	670 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     2f2:	2000      	movs	r0, #0
     2f4:	7068      	strb	r0, [r5, #1]
     2f6:	70a8      	strb	r0, [r5, #2]
     2f8:	4601      	mov	r1, r0
     2fa:	2224      	movs	r2, #36	; 0x24
     2fc:	4668      	mov	r0, sp
     2fe:	f009 ff03 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     302:	2224      	movs	r2, #36	; 0x24
     304:	490e      	ldr	r1, [pc, #56]	; (340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>)
     306:	4668      	mov	r0, sp
     308:	f009 fe84 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     30c:	2224      	movs	r2, #36	; 0x24
     30e:	4669      	mov	r1, sp
     310:	480c      	ldr	r0, [pc, #48]	; (344 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x44>)
     312:	f009 fe7f 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     316:	f3ef 8410 	mrs	r4, PRIMASK
     31a:	b672      	cpsid	i
     31c:	f000 fd88 	bl	e30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     320:	4809      	ldr	r0, [pc, #36]	; (348 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x48>)
     322:	f000 fe5d 	bl	fe0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     326:	b118      	cbz	r0, 330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     328:	21cb      	movs	r1, #203	; 0xcb
     32a:	2003      	movs	r0, #3
     32c:	f000 f80e 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     330:	b904      	cbnz	r4, 334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     332:	b662      	cpsie	i
     334:	2000      	movs	r0, #0
     336:	e7d2      	b.n	2de <sdc_init+0x1e>
     338:	20000040 	.word	0x20000040
     33c:	00000135 	.word	0x00000135
     340:	000003d8 	.word	0x000003d8
     344:	20000be8 	.word	0x20000be8
     348:	00000475 	.word	0x00000475

0000034c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     34c:	b50e      	push	{r1, r2, r3, lr}
     34e:	b672      	cpsid	i
     350:	4a15      	ldr	r2, [pc, #84]	; (3a8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     352:	6855      	ldr	r5, [r2, #4]
     354:	b1dd      	cbz	r5, 38e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     356:	2200      	movs	r2, #0
     358:	4603      	mov	r3, r0
     35a:	466e      	mov	r6, sp
     35c:	240a      	movs	r4, #10
     35e:	e003      	b.n	368 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     360:	fbb0 f0f4 	udiv	r0, r0, r4
     364:	1c52      	adds	r2, r2, #1
     366:	b2d2      	uxtb	r2, r2
     368:	2800      	cmp	r0, #0
     36a:	d1f9      	bne.n	360 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     36c:	54b0      	strb	r0, [r6, r2]
     36e:	e00a      	b.n	386 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     370:	b2d8      	uxtb	r0, r3
     372:	fbb0 f7f4 	udiv	r7, r0, r4
     376:	fbb3 f3f4 	udiv	r3, r3, r4
     37a:	fb04 0017 	mls	r0, r4, r7, r0
     37e:	1e52      	subs	r2, r2, #1
     380:	b2d2      	uxtb	r2, r2
     382:	3030      	adds	r0, #48	; 0x30
     384:	54b0      	strb	r0, [r6, r2]
     386:	2a00      	cmp	r2, #0
     388:	d1f2      	bne.n	370 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     38a:	4630      	mov	r0, r6
     38c:	47a8      	blx	r5
     38e:	f3bf 8f4f 	dsb	sy
     392:	4806      	ldr	r0, [pc, #24]	; (3ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     394:	6801      	ldr	r1, [r0, #0]
     396:	4a06      	ldr	r2, [pc, #24]	; (3b0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     398:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     39c:	4311      	orrs	r1, r2
     39e:	6001      	str	r1, [r0, #0]
     3a0:	f3bf 8f4f 	dsb	sy
     3a4:	bf00      	nop
     3a6:	e7fd      	b.n	3a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     3a8:	20000040 	.word	0x20000040
     3ac:	e000ed0c 	.word	0xe000ed0c
     3b0:	05fa0004 	.word	0x05fa0004

000003b4 <sdc_support_adv>:
     3b4:	4806      	ldr	r0, [pc, #24]	; (3d0 <sdc_support_adv+0x1c>)
     3b6:	b510      	push	{r4, lr}
     3b8:	7881      	ldrb	r1, [r0, #2]
     3ba:	7840      	ldrb	r0, [r0, #1]
     3bc:	4301      	orrs	r1, r0
     3be:	d002      	beq.n	3c6 <sdc_support_adv+0x12>
     3c0:	f04f 30ff 	mov.w	r0, #4294967295
     3c4:	bd10      	pop	{r4, pc}
     3c6:	f002 fc65 	bl	2c94 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     3ca:	2000      	movs	r0, #0
     3cc:	bd10      	pop	{r4, pc}
     3ce:	0000      	.short	0x0000
     3d0:	20000040 	.word	0x20000040
     3d4:	00000001 	.word	0x00000001
     3d8:	00010100 	.word	0x00010100
     3dc:	031b1b00 	.word	0x031b1b00
     3e0:	00000002 	.word	0x00000002
     3e4:	00001d4c 	.word	0x00001d4c
     3e8:	001f0000 	.word	0x001f0000
     3ec:	00000008 	.word	0x00000008
	...
     3fc:	c12e7ee0 	.word	0xc12e7ee0
     400:	2385055e 	.word	0x2385055e
     404:	fadc1546 	.word	0xfadc1546
     408:	707d298e 	.word	0x707d298e
     40c:	fca59310 	.word	0xfca59310

00000410 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     410:	4a05      	ldr	r2, [pc, #20]	; (428 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     412:	b510      	push	{r4, lr}
     414:	6852      	ldr	r2, [r2, #4]
     416:	b112      	cbz	r2, 41e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     41c:	4710      	bx	r2
     41e:	2192      	movs	r1, #146	; 0x92
     420:	2004      	movs	r0, #4
     422:	f7ff ff93 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     426:	0000      	.short	0x0000
     428:	20000c0c 	.word	0x20000c0c

0000042c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     42c:	4a05      	ldr	r2, [pc, #20]	; (444 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     42e:	b510      	push	{r4, lr}
     430:	6892      	ldr	r2, [r2, #8]
     432:	b112      	cbz	r2, 43a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     438:	4710      	bx	r2
     43a:	2198      	movs	r1, #152	; 0x98
     43c:	2004      	movs	r0, #4
     43e:	f7ff ff85 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     442:	0000      	.short	0x0000
     444:	20000c0c 	.word	0x20000c0c

00000448 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     448:	4805      	ldr	r0, [pc, #20]	; (460 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     44a:	6801      	ldr	r1, [r0, #0]
     44c:	b129      	cbz	r1, 45a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     44e:	6841      	ldr	r1, [r0, #4]
     450:	b119      	cbz	r1, 45a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     452:	6880      	ldr	r0, [r0, #8]
     454:	b108      	cbz	r0, 45a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     456:	2001      	movs	r0, #1
     458:	4770      	bx	lr
     45a:	2000      	movs	r0, #0
     45c:	4770      	bx	lr
     45e:	0000      	.short	0x0000
     460:	20000c0c 	.word	0x20000c0c

00000464 <sdc_rand_source_register>:
     464:	4902      	ldr	r1, [pc, #8]	; (470 <sdc_rand_source_register+0xc>)
     466:	c80d      	ldmia	r0, {r0, r2, r3}
     468:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     46c:	2000      	movs	r0, #0
     46e:	4770      	bx	lr
     470:	20000c0c 	.word	0x20000c0c

00000474 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     476:	4c12      	ldr	r4, [pc, #72]	; (4c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     478:	2600      	movs	r6, #0
     47a:	6825      	ldr	r5, [r4, #0]
     47c:	e011      	b.n	4a2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     47e:	9800      	ldr	r0, [sp, #0]
     480:	2802      	cmp	r0, #2
     482:	d002      	beq.n	48a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     484:	2803      	cmp	r0, #3
     486:	d10c      	bne.n	4a2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     488:	e006      	b.n	498 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     48a:	6820      	ldr	r0, [r4, #0]
     48c:	b110      	cbz	r0, 494 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     48e:	2000      	movs	r0, #0
     490:	6026      	str	r6, [r4, #0]
     492:	e005      	b.n	4a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     494:	2128      	movs	r1, #40	; 0x28
     496:	e00c      	b.n	4b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     498:	6820      	ldr	r0, [r4, #0]
     49a:	b168      	cbz	r0, 4b8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     49c:	2001      	movs	r0, #1
     49e:	6026      	str	r6, [r4, #0]
     4a0:	47a8      	blx	r5
     4a2:	4668      	mov	r0, sp
     4a4:	f000 fd62 	bl	f6c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     4a8:	2800      	cmp	r0, #0
     4aa:	d0e8      	beq.n	47e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     4ac:	2805      	cmp	r0, #5
     4ae:	d005      	beq.n	4bc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     4b0:	2135      	movs	r1, #53	; 0x35
     4b2:	2004      	movs	r0, #4
     4b4:	f7ff ff4a 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     4b8:	212d      	movs	r1, #45	; 0x2d
     4ba:	e7fa      	b.n	4b2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4be:	0000      	.short	0x0000
     4c0:	20000048 	.word	0x20000048

000004c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     4c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     4c8:	4e28      	ldr	r6, [pc, #160]	; (56c <__data_size+0x3e>)
     4ca:	4605      	mov	r5, r0
     4cc:	1d00      	adds	r0, r0, #4
     4ce:	f106 0744 	add.w	r7, r6, #68	; 0x44
     4d2:	6030      	str	r0, [r6, #0]
     4d4:	7838      	ldrb	r0, [r7, #0]
     4d6:	b158      	cbz	r0, 4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
     4d8:	78ba      	ldrb	r2, [r7, #2]
     4da:	463c      	mov	r4, r7
     4dc:	1c79      	adds	r1, r7, #1
     4de:	4628      	mov	r0, r5
     4e0:	1c92      	adds	r2, r2, #2
     4e2:	f009 fd97 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     4e6:	2000      	movs	r0, #0
     4e8:	7020      	strb	r0, [r4, #0]
     4ea:	2004      	movs	r0, #4
     4ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     4f0:	481e      	ldr	r0, [pc, #120]	; (56c <__data_size+0x3e>)
     4f2:	f000 ff7d 	bl	13f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     4f6:	4604      	mov	r4, r0
     4f8:	2802      	cmp	r0, #2
     4fa:	d004      	beq.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
     4fc:	2c04      	cmp	r4, #4
     4fe:	d007      	beq.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     500:	2c08      	cmp	r4, #8
     502:	d02c      	beq.n	55e <__data_size+0x30>
     504:	e02f      	b.n	566 <__data_size+0x38>
     506:	4919      	ldr	r1, [pc, #100]	; (56c <__data_size+0x3e>)
     508:	4628      	mov	r0, r5
     50a:	f007 fb64 	bl	7bd6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     50e:	e02a      	b.n	566 <__data_size+0x38>
     510:	7830      	ldrb	r0, [r6, #0]
     512:	2808      	cmp	r0, #8
     514:	d104      	bne.n	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     516:	2105      	movs	r1, #5
     518:	203e      	movs	r0, #62	; 0x3e
     51a:	f007 fb48 	bl	7bae <__udivmoddi4+0x382>
     51e:	b150      	cbz	r0, 536 <__data_size+0x8>
     520:	4912      	ldr	r1, [pc, #72]	; (56c <__data_size+0x3e>)
     522:	4628      	mov	r0, r5
     524:	f007 fbbc 	bl	7ca0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     528:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     52c:	d30e      	bcc.n	54c <__data_size+0x1e>
     52e:	21c7      	movs	r1, #199	; 0xc7
     530:	2008      	movs	r0, #8
     532:	f7ff ff0b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     536:	88b0      	ldrh	r0, [r6, #4]
     538:	f8ad 0000 	strh.w	r0, [sp]
     53c:	a901      	add	r1, sp, #4
     53e:	4668      	mov	r0, sp
     540:	f007 fe00 	bl	8144 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     544:	2800      	cmp	r0, #0
     546:	d0c5      	beq.n	4d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     548:	21a8      	movs	r1, #168	; 0xa8
     54a:	e7f1      	b.n	530 <__data_size+0x2>
     54c:	2800      	cmp	r0, #0
     54e:	d0c1      	beq.n	4d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     550:	78a9      	ldrb	r1, [r5, #2]
     552:	7828      	ldrb	r0, [r5, #0]
     554:	f007 fb2b 	bl	7bae <__udivmoddi4+0x382>
     558:	2800      	cmp	r0, #0
     55a:	d0bb      	beq.n	4d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     55c:	e003      	b.n	566 <__data_size+0x38>
     55e:	4903      	ldr	r1, [pc, #12]	; (56c <__data_size+0x3e>)
     560:	4628      	mov	r0, r5
     562:	f007 fb66 	bl	7c32 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     566:	4620      	mov	r0, r4
     568:	e7c0      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     56a:	0000      	.short	0x0000
     56c:	20000c18 	.word	0x20000c18
     570:	b570      	push	{r4, r5, r6, lr}
     572:	780a      	ldrb	r2, [r1, #0]
     574:	7082      	strb	r2, [r0, #2]
     576:	b33a      	cbz	r2, 5c8 <__data_size+0x9a>
     578:	2a01      	cmp	r2, #1
     57a:	d825      	bhi.n	5c8 <__data_size+0x9a>
     57c:	2313      	movs	r3, #19
     57e:	7003      	strb	r3, [r0, #0]
     580:	2300      	movs	r3, #0
     582:	e00a      	b.n	59a <__data_size+0x6c>
     584:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     588:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     58c:	78a6      	ldrb	r6, [r4, #2]
     58e:	70ee      	strb	r6, [r5, #3]
     590:	8864      	ldrh	r4, [r4, #2]
     592:	0a24      	lsrs	r4, r4, #8
     594:	1c5b      	adds	r3, r3, #1
     596:	712c      	strb	r4, [r5, #4]
     598:	b2db      	uxtb	r3, r3
     59a:	4293      	cmp	r3, r2
     59c:	d3f2      	bcc.n	584 <__data_size+0x56>
     59e:	2300      	movs	r3, #0
     5a0:	e00b      	b.n	5ba <__data_size+0x8c>
     5a2:	bf00      	nop
     5a4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     5a8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     5ac:	792e      	ldrb	r6, [r5, #4]
     5ae:	7166      	strb	r6, [r4, #5]
     5b0:	88ad      	ldrh	r5, [r5, #4]
     5b2:	0a2d      	lsrs	r5, r5, #8
     5b4:	1c5b      	adds	r3, r3, #1
     5b6:	71a5      	strb	r5, [r4, #6]
     5b8:	b2db      	uxtb	r3, r3
     5ba:	4293      	cmp	r3, r2
     5bc:	d3f2      	bcc.n	5a4 <__data_size+0x76>
     5be:	2101      	movs	r1, #1
     5c0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     5c4:	b2c0      	uxtb	r0, r0
     5c6:	bd70      	pop	{r4, r5, r6, pc}
     5c8:	2000      	movs	r0, #0
     5ca:	bd70      	pop	{r4, r5, r6, pc}

000005cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     5cc:	2840      	cmp	r0, #64	; 0x40
     5ce:	d203      	bcs.n	5d8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     5d0:	1e40      	subs	r0, r0, #1
     5d2:	b2c1      	uxtb	r1, r0
     5d4:	4805      	ldr	r0, [pc, #20]	; (5ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     5d6:	e005      	b.n	5e4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     5d8:	28ff      	cmp	r0, #255	; 0xff
     5da:	d005      	beq.n	5e8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     5dc:	3840      	subs	r0, #64	; 0x40
     5de:	b2c1      	uxtb	r1, r0
     5e0:	4802      	ldr	r0, [pc, #8]	; (5ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     5e2:	3008      	adds	r0, #8
     5e4:	f007 bd5b 	b.w	809e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
     5e8:	2001      	movs	r0, #1
     5ea:	4770      	bx	lr
     5ec:	2000004c 	.word	0x2000004c

000005f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     5f0:	1e40      	subs	r0, r0, #1
     5f2:	b2c1      	uxtb	r1, r0
     5f4:	4801      	ldr	r0, [pc, #4]	; (5fc <CONFIG_BT_COMPANY_ID+0xb>)
     5f6:	f007 bd52 	b.w	809e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9e>
     5fa:	0000      	.short	0x0000
     5fc:	2000005c 	.word	0x2000005c

00000600 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     600:	4902      	ldr	r1, [pc, #8]	; (60c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     602:	6802      	ldr	r2, [r0, #0]
     604:	610a      	str	r2, [r1, #16]
     606:	6840      	ldr	r0, [r0, #4]
     608:	6148      	str	r0, [r1, #20]
     60a:	4770      	bx	lr
     60c:	2000004c 	.word	0x2000004c

00000610 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     610:	4905      	ldr	r1, [pc, #20]	; (628 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     612:	6802      	ldr	r2, [r0, #0]
     614:	600a      	str	r2, [r1, #0]
     616:	6840      	ldr	r0, [r0, #4]
     618:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     61c:	600a      	str	r2, [r1, #0]
     61e:	4a03      	ldr	r2, [pc, #12]	; (62c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     620:	4310      	orrs	r0, r2
     622:	6048      	str	r0, [r1, #4]
     624:	4770      	bx	lr
     626:	0000      	.short	0x0000
     628:	2000004c 	.word	0x2000004c
     62c:	024007f8 	.word	0x024007f8

00000630 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     630:	4807      	ldr	r0, [pc, #28]	; (650 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     632:	f04f 31ff 	mov.w	r1, #4294967295
     636:	2200      	movs	r2, #0
     638:	6001      	str	r1, [r0, #0]
     63a:	0cc9      	lsrs	r1, r1, #19
     63c:	6041      	str	r1, [r0, #4]
     63e:	f100 0108 	add.w	r1, r0, #8
     642:	201f      	movs	r0, #31
     644:	600a      	str	r2, [r1, #0]
     646:	604a      	str	r2, [r1, #4]
     648:	3108      	adds	r1, #8
     64a:	e9c1 0200 	strd	r0, r2, [r1]
     64e:	4770      	bx	lr
     650:	2000004c 	.word	0x2000004c

00000654 <sdc_hci_cmd_cb_reset>:
     654:	b510      	push	{r4, lr}
     656:	f7ff ffeb 	bl	630 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     65a:	f009 f923 	bl	98a4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     65e:	4604      	mov	r4, r0
     660:	4802      	ldr	r0, [pc, #8]	; (66c <sdc_hci_cmd_cb_reset+0x18>)
     662:	6800      	ldr	r0, [r0, #0]
     664:	b100      	cbz	r0, 668 <sdc_hci_cmd_cb_reset+0x14>
     666:	4780      	blx	r0
     668:	4620      	mov	r0, r4
     66a:	bd10      	pop	{r4, pc}
     66c:	20000064 	.word	0x20000064

00000670 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     670:	4901      	ldr	r1, [pc, #4]	; (678 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     672:	6008      	str	r0, [r1, #0]
     674:	4770      	bx	lr
     676:	0000      	.short	0x0000
     678:	20000064 	.word	0x20000064

0000067c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     680:	4604      	mov	r4, r0
     682:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     686:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     68a:	4d1f      	ldr	r5, [pc, #124]	; (708 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     68c:	4e1e      	ldr	r6, [pc, #120]	; (708 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     68e:	3d10      	subs	r5, #16
     690:	2210      	movs	r2, #16
     692:	2100      	movs	r1, #0
     694:	4620      	mov	r0, r4
     696:	f009 fd37 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     69a:	2210      	movs	r2, #16
     69c:	2100      	movs	r1, #0
     69e:	f104 0010 	add.w	r0, r4, #16
     6a2:	f009 fd31 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     6a6:	6828      	ldr	r0, [r5, #0]
     6a8:	1c40      	adds	r0, r0, #1
     6aa:	d108      	bne.n	6be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6ac:	6868      	ldr	r0, [r5, #4]
     6ae:	1c40      	adds	r0, r0, #1
     6b0:	d105      	bne.n	6be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6b2:	68a8      	ldr	r0, [r5, #8]
     6b4:	1c40      	adds	r0, r0, #1
     6b6:	d102      	bne.n	6be <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     6b8:	68e8      	ldr	r0, [r5, #12]
     6ba:	1c40      	adds	r0, r0, #1
     6bc:	d007      	beq.n	6ce <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     6be:	6828      	ldr	r0, [r5, #0]
     6c0:	686a      	ldr	r2, [r5, #4]
     6c2:	68a9      	ldr	r1, [r5, #8]
     6c4:	68eb      	ldr	r3, [r5, #12]
     6c6:	6120      	str	r0, [r4, #16]
     6c8:	6162      	str	r2, [r4, #20]
     6ca:	61a1      	str	r1, [r4, #24]
     6cc:	61e3      	str	r3, [r4, #28]
     6ce:	2000      	movs	r0, #0
     6d0:	f000 fcda 	bl	1088 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     6d4:	4387      	bics	r7, r0
     6d6:	07f8      	lsls	r0, r7, #31
     6d8:	d113      	bne.n	702 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     6da:	6830      	ldr	r0, [r6, #0]
     6dc:	1c40      	adds	r0, r0, #1
     6de:	d108      	bne.n	6f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     6e0:	6870      	ldr	r0, [r6, #4]
     6e2:	1c40      	adds	r0, r0, #1
     6e4:	d105      	bne.n	6f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     6e6:	68b0      	ldr	r0, [r6, #8]
     6e8:	1c40      	adds	r0, r0, #1
     6ea:	d102      	bne.n	6f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     6ec:	68f0      	ldr	r0, [r6, #12]
     6ee:	1c40      	adds	r0, r0, #1
     6f0:	d007      	beq.n	702 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     6f2:	6832      	ldr	r2, [r6, #0]
     6f4:	6870      	ldr	r0, [r6, #4]
     6f6:	68b1      	ldr	r1, [r6, #8]
     6f8:	68f3      	ldr	r3, [r6, #12]
     6fa:	6022      	str	r2, [r4, #0]
     6fc:	6060      	str	r0, [r4, #4]
     6fe:	60a1      	str	r1, [r4, #8]
     700:	60e3      	str	r3, [r4, #12]
     702:	2000      	movs	r0, #0
     704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     708:	10000090 	.word	0x10000090

0000070c <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     70c:	b538      	push	{r3, r4, r5, lr}
     70e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     712:	4604      	mov	r4, r0
     714:	4822      	ldr	r0, [pc, #136]	; (7a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     716:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     71a:	4d21      	ldr	r5, [pc, #132]	; (7a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     71c:	6802      	ldr	r2, [r0, #0]
     71e:	3d14      	subs	r5, #20
     720:	1c52      	adds	r2, r2, #1
     722:	d104      	bne.n	72e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     724:	6842      	ldr	r2, [r0, #4]
     726:	43d2      	mvns	r2, r2
     728:	0412      	lsls	r2, r2, #16
     72a:	0c12      	lsrs	r2, r2, #16
     72c:	d035      	beq.n	79a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     72e:	07c9      	lsls	r1, r1, #31
     730:	d033      	beq.n	79a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     732:	6801      	ldr	r1, [r0, #0]
     734:	6840      	ldr	r0, [r0, #4]
     736:	f8ad 0000 	strh.w	r0, [sp]
     73a:	f8c4 1001 	str.w	r1, [r4, #1]
     73e:	f8bd 0000 	ldrh.w	r0, [sp]
     742:	f8a4 0005 	strh.w	r0, [r4, #5]
     746:	79a0      	ldrb	r0, [r4, #6]
     748:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     74c:	71a0      	strb	r0, [r4, #6]
     74e:	6828      	ldr	r0, [r5, #0]
     750:	1c40      	adds	r0, r0, #1
     752:	d00c      	beq.n	76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     754:	6868      	ldr	r0, [r5, #4]
     756:	1c40      	adds	r0, r0, #1
     758:	d009      	beq.n	76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     75a:	68a8      	ldr	r0, [r5, #8]
     75c:	1c40      	adds	r0, r0, #1
     75e:	d006      	beq.n	76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     760:	68e8      	ldr	r0, [r5, #12]
     762:	1c40      	adds	r0, r0, #1
     764:	d003      	beq.n	76e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     766:	2000      	movs	r0, #0
     768:	f000 fc8e 	bl	1088 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     76c:	b140      	cbz	r0, 780 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     76e:	2210      	movs	r2, #16
     770:	2100      	movs	r1, #0
     772:	1de0      	adds	r0, r4, #7
     774:	f009 fcc8 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     778:	2001      	movs	r0, #1
     77a:	7020      	strb	r0, [r4, #0]
     77c:	2000      	movs	r0, #0
     77e:	bd38      	pop	{r3, r4, r5, pc}
     780:	682a      	ldr	r2, [r5, #0]
     782:	6869      	ldr	r1, [r5, #4]
     784:	68a8      	ldr	r0, [r5, #8]
     786:	68eb      	ldr	r3, [r5, #12]
     788:	f8c4 2007 	str.w	r2, [r4, #7]
     78c:	f8c4 100b 	str.w	r1, [r4, #11]
     790:	f8c4 000f 	str.w	r0, [r4, #15]
     794:	f8c4 3013 	str.w	r3, [r4, #19]
     798:	e7ee      	b.n	778 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     79a:	2000      	movs	r0, #0
     79c:	e7ed      	b.n	77a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     79e:	0000      	.short	0x0000
     7a0:	100000a4 	.word	0x100000a4

000007a4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     7a4:	2102      	movs	r1, #2
     7a6:	8001      	strh	r1, [r0, #0]
     7a8:	8041      	strh	r1, [r0, #2]
     7aa:	2100      	movs	r1, #0
     7ac:	7101      	strb	r1, [r0, #4]
     7ae:	21e0      	movs	r1, #224	; 0xe0
     7b0:	7141      	strb	r1, [r0, #5]
     7b2:	f642 617e 	movw	r1, #11902	; 0x2e7e
     7b6:	80c1      	strh	r1, [r0, #6]
     7b8:	4901      	ldr	r1, [pc, #4]	; (7c0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     7ba:	6081      	str	r1, [r0, #8]
     7bc:	2000      	movs	r0, #0
     7be:	4770      	bx	lr
     7c0:	85055ec1 	.word	0x85055ec1
     7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7c8:	798c      	ldrb	r4, [r1, #6]
     7ca:	f8dd e018 	ldr.w	lr, [sp, #24]
     7ce:	2c08      	cmp	r4, #8
     7d0:	d901      	bls.n	7d6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     7d2:	21db      	movs	r1, #219	; 0xdb
     7d4:	e02c      	b.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     7d6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 87c <__z_interrupt_stack_SIZEOF+0x3c>
     7da:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     7de:	b10d      	cbz	r5, 7e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     7e0:	21dc      	movs	r1, #220	; 0xdc
     7e2:	e025      	b.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     7e4:	79cd      	ldrb	r5, [r1, #7]
     7e6:	2d00      	cmp	r5, #0
     7e8:	d045      	beq.n	876 <__z_interrupt_stack_SIZEOF+0x36>
     7ea:	006f      	lsls	r7, r5, #1
     7ec:	370a      	adds	r7, #10
     7ee:	681d      	ldr	r5, [r3, #0]
     7f0:	2c02      	cmp	r4, #2
     7f2:	443d      	add	r5, r7
     7f4:	d901      	bls.n	7fa <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     7f6:	4626      	mov	r6, r4
     7f8:	e001      	b.n	7fe <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     7fa:	f04f 0602 	mov.w	r6, #2
     7fe:	442e      	add	r6, r5
     800:	f1a6 0601 	sub.w	r6, r6, #1
     804:	d901      	bls.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     806:	4625      	mov	r5, r4
     808:	e001      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     80a:	f04f 0502 	mov.w	r5, #2
     80e:	f1a5 0501 	sub.w	r5, r5, #1
     812:	ea26 0605 	bic.w	r6, r6, r5
     816:	888d      	ldrh	r5, [r1, #4]
     818:	4425      	add	r5, r4
     81a:	f1a4 0401 	sub.w	r4, r4, #1
     81e:	f1a5 0501 	sub.w	r5, r5, #1
     822:	ea25 0504 	bic.w	r5, r5, r4
     826:	f64f 74ff 	movw	r4, #65535	; 0xffff
     82a:	42a5      	cmp	r5, r4
     82c:	d303      	bcc.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     82e:	21e7      	movs	r1, #231	; 0xe7
     830:	2017      	movs	r0, #23
     832:	f7ff fd8b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     836:	f1be 0f00 	cmp.w	lr, #0
     83a:	d118      	bne.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
     83c:	1bf4      	subs	r4, r6, r7
     83e:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     842:	8025      	strh	r5, [r4, #0]
     844:	79c8      	ldrb	r0, [r1, #7]
     846:	70a0      	strb	r0, [r4, #2]
     848:	2001      	movs	r0, #1
     84a:	70e0      	strb	r0, [r4, #3]
     84c:	7122      	strb	r2, [r4, #4]
     84e:	6808      	ldr	r0, [r1, #0]
     850:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     854:	0c00      	lsrs	r0, r0, #16
     856:	80e0      	strh	r0, [r4, #6]
     858:	8808      	ldrh	r0, [r1, #0]
     85a:	8120      	strh	r0, [r4, #8]
     85c:	2000      	movs	r0, #0
     85e:	e003      	b.n	868 <__z_interrupt_stack_SIZEOF+0x28>
     860:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     864:	1c40      	adds	r0, r0, #1
     866:	817a      	strh	r2, [r7, #10]
     868:	79cf      	ldrb	r7, [r1, #7]
     86a:	4287      	cmp	r7, r0
     86c:	d8f8      	bhi.n	860 <__z_interrupt_stack_SIZEOF+0x20>
     86e:	79c8      	ldrb	r0, [r1, #7]
     870:	fb00 6005 	mla	r0, r0, r5, r6
     874:	6018      	str	r0, [r3, #0]
     876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     87a:	0000      	.short	0x0000
     87c:	20000068 	.word	0x20000068
     880:	b530      	push	{r4, r5, lr}
     882:	4603      	mov	r3, r0
     884:	ea4f 0002 	mov.w	r0, r2
     888:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     88c:	8964      	ldrh	r4, [r4, #10]
     88e:	428c      	cmp	r4, r1
     890:	d009      	beq.n	8a6 <__z_interrupt_stack_SIZEOF+0x66>
     892:	789c      	ldrb	r4, [r3, #2]
     894:	1c40      	adds	r0, r0, #1
     896:	fbb0 f5f4 	udiv	r5, r0, r4
     89a:	fb04 0015 	mls	r0, r4, r5, r0
     89e:	b2c0      	uxtb	r0, r0
     8a0:	4290      	cmp	r0, r2
     8a2:	d1f1      	bne.n	888 <__z_interrupt_stack_SIZEOF+0x48>
     8a4:	20ff      	movs	r0, #255	; 0xff
     8a6:	bd30      	pop	{r4, r5, pc}

000008a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     8a8:	b570      	push	{r4, r5, r6, lr}
     8aa:	4605      	mov	r5, r0
     8ac:	4819      	ldr	r0, [pc, #100]	; (914 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
     8ae:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     8b2:	b364      	cbz	r4, 90e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     8b4:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     8b8:	d304      	bcc.n	8c4 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     8ba:	f240 2125 	movw	r1, #549	; 0x225
     8be:	2017      	movs	r0, #23
     8c0:	f7ff fd44 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     8c4:	4629      	mov	r1, r5
     8c6:	4620      	mov	r0, r4
     8c8:	f007 fd3c 	bl	8344 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     8cc:	4601      	mov	r1, r0
     8ce:	28ff      	cmp	r0, #255	; 0xff
     8d0:	d004      	beq.n	8dc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     8d2:	4620      	mov	r0, r4
     8d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     8d8:	f007 bd48 	b.w	836c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     8dc:	78a0      	ldrb	r0, [r4, #2]
     8de:	fbb5 f1f0 	udiv	r1, r5, r0
     8e2:	fb00 5011 	mls	r0, r0, r1, r5
     8e6:	b2c6      	uxtb	r6, r0
     8e8:	4632      	mov	r2, r6
     8ea:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     8ee:	4620      	mov	r0, r4
     8f0:	f7ff ffc6 	bl	880 <__z_interrupt_stack_SIZEOF+0x40>
     8f4:	4602      	mov	r2, r0
     8f6:	28ff      	cmp	r0, #255	; 0xff
     8f8:	d009      	beq.n	90e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     8fa:	42b2      	cmp	r2, r6
     8fc:	d001      	beq.n	902 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     8fe:	2000      	movs	r0, #0
     900:	70e0      	strb	r0, [r4, #3]
     902:	4629      	mov	r1, r5
     904:	4620      	mov	r0, r4
     906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     90a:	f007 bd15 	b.w	8338 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     90e:	2000      	movs	r0, #0
     910:	bd70      	pop	{r4, r5, r6, pc}
     912:	0000      	.short	0x0000
     914:	20000068 	.word	0x20000068

00000918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     918:	4a08      	ldr	r2, [pc, #32]	; (93c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
     91a:	b510      	push	{r4, lr}
     91c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     920:	4601      	mov	r1, r0
     922:	4620      	mov	r0, r4
     924:	f007 fd0e 	bl	8344 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     928:	4601      	mov	r1, r0
     92a:	28ff      	cmp	r0, #255	; 0xff
     92c:	d004      	beq.n	938 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
     92e:	4620      	mov	r0, r4
     930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     934:	f007 bd1a 	b.w	836c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     938:	2000      	movs	r0, #0
     93a:	bd10      	pop	{r4, pc}
     93c:	20000068 	.word	0x20000068

00000940 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     940:	b5f0      	push	{r4, r5, r6, r7, lr}
     942:	b089      	sub	sp, #36	; 0x24
     944:	0004      	movs	r4, r0
     946:	460e      	mov	r6, r1
     948:	9406      	str	r4, [sp, #24]
     94a:	d007      	beq.n	95c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
     94c:	2500      	movs	r5, #0
     94e:	0760      	lsls	r0, r4, #29
     950:	d006      	beq.n	960 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
     952:	f240 1119 	movw	r1, #281	; 0x119
     956:	2017      	movs	r0, #23
     958:	f7ff fcf8 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     95c:	2501      	movs	r5, #1
     95e:	e7f6      	b.n	94e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
     960:	4814      	ldr	r0, [pc, #80]	; (9b4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
     962:	2200      	movs	r2, #0
     964:	4f14      	ldr	r7, [pc, #80]	; (9b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     966:	6002      	str	r2, [r0, #0]
     968:	6042      	str	r2, [r0, #4]
     96a:	e9d7 1000 	ldrd	r1, r0, [r7]
     96e:	f896 c000 	ldrb.w	ip, [r6]
     972:	68bb      	ldr	r3, [r7, #8]
     974:	f36c 601f 	bfi	r0, ip, #24, #8
     978:	e9cd 0302 	strd	r0, r3, [sp, #8]
     97c:	e9cd 5100 	strd	r5, r1, [sp]
     980:	ab06      	add	r3, sp, #24
     982:	a901      	add	r1, sp, #4
     984:	4610      	mov	r0, r2
     986:	f7ff ff1d 	bl	7c4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
     98a:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
     98e:	7873      	ldrb	r3, [r6, #1]
     990:	697a      	ldr	r2, [r7, #20]
     992:	f363 601f 	bfi	r0, r3, #24, #8
     996:	e9cd 0202 	strd	r0, r2, [sp, #8]
     99a:	e9cd 5100 	strd	r5, r1, [sp]
     99e:	ab06      	add	r3, sp, #24
     9a0:	2200      	movs	r2, #0
     9a2:	a901      	add	r1, sp, #4
     9a4:	2001      	movs	r0, #1
     9a6:	f7ff ff0d 	bl	7c4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
     9aa:	9806      	ldr	r0, [sp, #24]
     9ac:	b009      	add	sp, #36	; 0x24
     9ae:	1b00      	subs	r0, r0, r4
     9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9b2:	0000      	.short	0x0000
     9b4:	20000068 	.word	0x20000068
     9b8:	00000aa8 	.word	0x00000aa8

000009bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     9bc:	b510      	push	{r4, lr}
     9be:	4604      	mov	r4, r0
     9c0:	7980      	ldrb	r0, [r0, #6]
     9c2:	490e      	ldr	r1, [pc, #56]	; (9fc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
     9c4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     9c8:	b1a8      	cbz	r0, 9f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     9ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
     9ce:	79e1      	ldrb	r1, [r4, #7]
     9d0:	7882      	ldrb	r2, [r0, #2]
     9d2:	4291      	cmp	r1, r2
     9d4:	d20f      	bcs.n	9f6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     9d6:	1c4a      	adds	r2, r1, #1
     9d8:	71e2      	strb	r2, [r4, #7]
     9da:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9de:	8952      	ldrh	r2, [r2, #10]
     9e0:	429a      	cmp	r2, r3
     9e2:	d0f4      	beq.n	9ce <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
     9e4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9e8:	8952      	ldrh	r2, [r2, #10]
     9ea:	80a2      	strh	r2, [r4, #4]
     9ec:	f007 fcbe 	bl	836c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     9f0:	6020      	str	r0, [r4, #0]
     9f2:	2000      	movs	r0, #0
     9f4:	bd10      	pop	{r4, pc}
     9f6:	2005      	movs	r0, #5
     9f8:	bd10      	pop	{r4, pc}
     9fa:	0000      	.short	0x0000
     9fc:	20000068 	.word	0x20000068

00000a00 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a04:	4607      	mov	r7, r0
     a06:	f64f 70ff 	movw	r0, #65535	; 0xffff
     a0a:	8038      	strh	r0, [r7, #0]
     a0c:	4812      	ldr	r0, [pc, #72]	; (a58 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
     a0e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     a12:	b1ec      	cbz	r4, a50 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
     a14:	78a5      	ldrb	r5, [r4, #2]
     a16:	7920      	ldrb	r0, [r4, #4]
     a18:	fbb0 f1f5 	udiv	r1, r0, r5
     a1c:	fb05 0611 	mls	r6, r5, r1, r0
     a20:	4632      	mov	r2, r6
     a22:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     a26:	4620      	mov	r0, r4
     a28:	f7ff ff2a 	bl	880 <__z_interrupt_stack_SIZEOF+0x40>
     a2c:	4602      	mov	r2, r0
     a2e:	28ff      	cmp	r0, #255	; 0xff
     a30:	d00e      	beq.n	a50 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
     a32:	1ba8      	subs	r0, r5, r6
     a34:	4410      	add	r0, r2
     a36:	fbb0 f1f5 	udiv	r1, r0, r5
     a3a:	fb05 0011 	mls	r0, r5, r1, r0
     a3e:	7921      	ldrb	r1, [r4, #4]
     a40:	4408      	add	r0, r1
     a42:	b281      	uxth	r1, r0
     a44:	8039      	strh	r1, [r7, #0]
     a46:	4620      	mov	r0, r4
     a48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     a4c:	f007 bc74 	b.w	8338 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     a50:	2000      	movs	r0, #0
     a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a56:	0000      	.short	0x0000
     a58:	20000068 	.word	0x20000068

00000a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a60:	4606      	mov	r6, r0
     a62:	4810      	ldr	r0, [pc, #64]	; (aa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
     a64:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
     a68:	4631      	mov	r1, r6
     a6a:	4628      	mov	r0, r5
     a6c:	f007 fc6a 	bl	8344 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     a70:	4604      	mov	r4, r0
     a72:	28ff      	cmp	r0, #255	; 0xff
     a74:	d012      	beq.n	a9c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
     a76:	f8d5 0006 	ldr.w	r0, [r5, #6]
     a7a:	4621      	mov	r1, r4
     a7c:	ea4f 4730 	mov.w	r7, r0, ror #16
     a80:	4628      	mov	r0, r5
     a82:	f007 fc73 	bl	836c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     a86:	4601      	mov	r1, r0
     a88:	4630      	mov	r0, r6
     a8a:	47b8      	blx	r7
     a8c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
     a90:	f64f 70f0 	movw	r0, #65520	; 0xfff0
     a94:	8148      	strh	r0, [r1, #10]
     a96:	2000      	movs	r0, #0
     a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a9c:	f243 0002 	movw	r0, #12290	; 0x3002
     aa0:	e7fa      	b.n	a98 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
     aa2:	0000      	.short	0x0000
     aa4:	20000068 	.word	0x20000068
     aa8:	000092cd 	.word	0x000092cd
     aac:	000802f8 	.word	0x000802f8
     ab0:	00000000 	.word	0x00000000
     ab4:	00008bc1 	.word	0x00008bc1
     ab8:	00080118 	.word	0x00080118
     abc:	00000000 	.word	0x00000000

00000ac0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
     ac0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ac4:	4c24      	ldr	r4, [pc, #144]	; (b58 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
     ac6:	4606      	mov	r6, r0
     ac8:	b081      	sub	sp, #4
     aca:	6820      	ldr	r0, [r4, #0]
     acc:	469a      	mov	sl, r3
     ace:	4693      	mov	fp, r2
     ad0:	b158      	cbz	r0, aea <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
     ad2:	7a01      	ldrb	r1, [r0, #8]
     ad4:	42b1      	cmp	r1, r6
     ad6:	d903      	bls.n	ae0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
     ad8:	6840      	ldr	r0, [r0, #4]
     ada:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
     ade:	b140      	cbz	r0, af2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
     ae0:	f243 0002 	movw	r0, #12290	; 0x3002
     ae4:	b005      	add	sp, #20
     ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     aea:	21a5      	movs	r1, #165	; 0xa5
     aec:	2018      	movs	r0, #24
     aee:	f7ff fc2d 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     af2:	4619      	mov	r1, r3
     af4:	9802      	ldr	r0, [sp, #8]
     af6:	f007 fc74 	bl	83e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
     afa:	4680      	mov	r8, r0
     afc:	4658      	mov	r0, fp
     afe:	990e      	ldr	r1, [sp, #56]	; 0x38
     b00:	f007 fc65 	bl	83ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
     b04:	4605      	mov	r5, r0
     b06:	eb08 0005 	add.w	r0, r8, r5
     b0a:	1d00      	adds	r0, r0, #4
     b0c:	b287      	uxth	r7, r0
     b0e:	6820      	ldr	r0, [r4, #0]
     b10:	46a1      	mov	r9, r4
     b12:	4639      	mov	r1, r7
     b14:	6800      	ldr	r0, [r0, #0]
     b16:	f007 fbaa 	bl	826e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     b1a:	0004      	movs	r4, r0
     b1c:	d01a      	beq.n	b54 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
     b1e:	8067      	strh	r7, [r4, #2]
     b20:	8025      	strh	r5, [r4, #0]
     b22:	4629      	mov	r1, r5
     b24:	1d20      	adds	r0, r4, #4
     b26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
     b28:	4607      	mov	r7, r0
     b2a:	465a      	mov	r2, fp
     b2c:	2309      	movs	r3, #9
     b2e:	9500      	str	r5, [sp, #0]
     b30:	f007 fb4a 	bl	81c8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b34:	8820      	ldrh	r0, [r4, #0]
     b36:	4641      	mov	r1, r8
     b38:	4438      	add	r0, r7
     b3a:	230a      	movs	r3, #10
     b3c:	9a02      	ldr	r2, [sp, #8]
     b3e:	f8cd a000 	str.w	sl, [sp]
     b42:	f007 fb41 	bl	81c8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b46:	f8d9 0000 	ldr.w	r0, [r9]
     b4a:	6840      	ldr	r0, [r0, #4]
     b4c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
     b50:	2000      	movs	r0, #0
     b52:	e7c7      	b.n	ae4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
     b54:	2004      	movs	r0, #4
     b56:	e7c5      	b.n	ae4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
     b58:	20000070 	.word	0x20000070

00000b5c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
     b5c:	b570      	push	{r4, r5, r6, lr}
     b5e:	4c14      	ldr	r4, [pc, #80]	; (bb0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
     b60:	6823      	ldr	r3, [r4, #0]
     b62:	b18b      	cbz	r3, b88 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
     b64:	7a19      	ldrb	r1, [r3, #8]
     b66:	4281      	cmp	r1, r0
     b68:	d912      	bls.n	b90 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     b6a:	685a      	ldr	r2, [r3, #4]
     b6c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
     b70:	b171      	cbz	r1, b90 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     b72:	2500      	movs	r5, #0
     b74:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
     b78:	884a      	ldrh	r2, [r1, #2]
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	f007 fbcf 	bl	831e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     b80:	6821      	ldr	r1, [r4, #0]
     b82:	2000      	movs	r0, #0
     b84:	7a0a      	ldrb	r2, [r1, #8]
     b86:	e00c      	b.n	ba2 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
     b88:	21c6      	movs	r1, #198	; 0xc6
     b8a:	2018      	movs	r0, #24
     b8c:	f7ff fbde 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b90:	f243 0002 	movw	r0, #12290	; 0x3002
     b94:	bd70      	pop	{r4, r5, r6, pc}
     b96:	684b      	ldr	r3, [r1, #4]
     b98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     b9c:	b933      	cbnz	r3, bac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
     b9e:	1c40      	adds	r0, r0, #1
     ba0:	b2c0      	uxtb	r0, r0
     ba2:	4282      	cmp	r2, r0
     ba4:	d8f7      	bhi.n	b96 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
     ba6:	6808      	ldr	r0, [r1, #0]
     ba8:	f007 fbae 	bl	8308 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
     bac:	2000      	movs	r0, #0
     bae:	bd70      	pop	{r4, r5, r6, pc}
     bb0:	20000070 	.word	0x20000070

00000bb4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
     bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bb8:	460d      	mov	r5, r1
     bba:	0004      	movs	r4, r0
     bbc:	4690      	mov	r8, r2
     bbe:	f04f 0600 	mov.w	r6, #0
     bc2:	d006      	beq.n	bd2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
     bc4:	2700      	movs	r7, #0
     bc6:	07a0      	lsls	r0, r4, #30
     bc8:	d005      	beq.n	bd6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
     bca:	2186      	movs	r1, #134	; 0x86
     bcc:	2018      	movs	r0, #24
     bce:	f7ff fbbd 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bd2:	2701      	movs	r7, #1
     bd4:	e7f7      	b.n	bc6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
     bd6:	b1cd      	cbz	r5, c0c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     bd8:	4611      	mov	r1, r2
     bda:	2000      	movs	r0, #0
     bdc:	f007 fb78 	bl	82d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     be0:	300c      	adds	r0, #12
     be2:	eb00 0685 	add.w	r6, r0, r5, lsl #2
     be6:	b98f      	cbnz	r7, c0c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     be8:	4f0a      	ldr	r7, [pc, #40]	; (c14 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
     bea:	f104 000c 	add.w	r0, r4, #12
     bee:	00aa      	lsls	r2, r5, #2
     bf0:	603c      	str	r4, [r7, #0]
     bf2:	7225      	strb	r5, [r4, #8]
     bf4:	6060      	str	r0, [r4, #4]
     bf6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     bfa:	6020      	str	r0, [r4, #0]
     bfc:	2100      	movs	r1, #0
     bfe:	6860      	ldr	r0, [r4, #4]
     c00:	f009 fa82 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     c04:	4641      	mov	r1, r8
     c06:	6838      	ldr	r0, [r7, #0]
     c08:	f007 fb62 	bl	82d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     c0c:	4630      	mov	r0, r6
     c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c12:	0000      	.short	0x0000
     c14:	20000070 	.word	0x20000070

00000c18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
     c18:	490a      	ldr	r1, [pc, #40]	; (c44 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
     c1a:	b510      	push	{r4, lr}
     c1c:	4602      	mov	r2, r0
     c1e:	6809      	ldr	r1, [r1, #0]
     c20:	2000      	movs	r0, #0
     c22:	b159      	cbz	r1, c3c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
     c24:	7a0b      	ldrb	r3, [r1, #8]
     c26:	4293      	cmp	r3, r2
     c28:	d907      	bls.n	c3a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     c2a:	6849      	ldr	r1, [r1, #4]
     c2c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
     c30:	2900      	cmp	r1, #0
     c32:	d002      	beq.n	c3a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     c34:	f831 0b04 	ldrh.w	r0, [r1], #4
     c38:	4408      	add	r0, r1
     c3a:	bd10      	pop	{r4, pc}
     c3c:	21fa      	movs	r1, #250	; 0xfa
     c3e:	2018      	movs	r0, #24
     c40:	f7ff fb84 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c44:	20000070 	.word	0x20000070
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	4b1e      	ldr	r3, [pc, #120]	; (cc4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
     c4c:	6845      	ldr	r5, [r0, #4]
     c4e:	4604      	mov	r4, r0
     c50:	2200      	movs	r2, #0
     c52:	b1a1      	cbz	r1, c7e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
     c54:	2001      	movs	r0, #1
     c56:	7060      	strb	r0, [r4, #1]
     c58:	8858      	ldrh	r0, [r3, #2]
     c5a:	0881      	lsrs	r1, r0, #2
     c5c:	f05f 0000 	movs.w	r0, #0
     c60:	eb04 0340 	add.w	r3, r4, r0, lsl #1
     c64:	eb04 0680 	add.w	r6, r4, r0, lsl #2
     c68:	831a      	strh	r2, [r3, #24]
     c6a:	8419      	strh	r1, [r3, #32]
     c6c:	fb00 5301 	mla	r3, r0, r1, r5
     c70:	6073      	str	r3, [r6, #4]
     c72:	1823      	adds	r3, r4, r0
     c74:	1c40      	adds	r0, r0, #1
     c76:	751a      	strb	r2, [r3, #20]
     c78:	2804      	cmp	r0, #4
     c7a:	d3f1      	bcc.n	c60 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
     c7c:	bd70      	pop	{r4, r5, r6, pc}
     c7e:	7062      	strb	r2, [r4, #1]
     c80:	f05f 0000 	movs.w	r0, #0
     c84:	eb04 0140 	add.w	r1, r4, r0, lsl #1
     c88:	830a      	strh	r2, [r1, #24]
     c8a:	840a      	strh	r2, [r1, #32]
     c8c:	eb04 0180 	add.w	r1, r4, r0, lsl #2
     c90:	604a      	str	r2, [r1, #4]
     c92:	1821      	adds	r1, r4, r0
     c94:	1c40      	adds	r0, r0, #1
     c96:	750a      	strb	r2, [r1, #20]
     c98:	2804      	cmp	r0, #4
     c9a:	d3f3      	bcc.n	c84 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
     c9c:	8858      	ldrh	r0, [r3, #2]
     c9e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
     ca2:	d201      	bcs.n	ca8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
     ca4:	0846      	lsrs	r6, r0, #1
     ca6:	e000      	b.n	caa <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
     ca8:	26ff      	movs	r6, #255	; 0xff
     caa:	f007 fc0e 	bl	84ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
     cae:	6065      	str	r5, [r4, #4]
     cb0:	8420      	strh	r0, [r4, #32]
     cb2:	1829      	adds	r1, r5, r0
     cb4:	60a1      	str	r1, [r4, #8]
     cb6:	8466      	strh	r6, [r4, #34]	; 0x22
     cb8:	60e5      	str	r5, [r4, #12]
     cba:	84a0      	strh	r0, [r4, #36]	; 0x24
     cbc:	6121      	str	r1, [r4, #16]
     cbe:	84e6      	strh	r6, [r4, #38]	; 0x26
     cc0:	bd70      	pop	{r4, r5, r6, pc}
     cc2:	0000      	.short	0x0000
     cc4:	20000074 	.word	0x20000074

00000cc8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
     cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ccc:	b158      	cbz	r0, ce6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
     cce:	2500      	movs	r5, #0
     cd0:	4411      	add	r1, r2
     cd2:	4e24      	ldr	r6, [pc, #144]	; (d64 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
     cd4:	b2cc      	uxtb	r4, r1
     cd6:	2700      	movs	r7, #0
     cd8:	7034      	strb	r4, [r6, #0]
     cda:	0781      	lsls	r1, r0, #30
     cdc:	d005      	beq.n	cea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
     cde:	214e      	movs	r1, #78	; 0x4e
     ce0:	2009      	movs	r0, #9
     ce2:	f7ff fb33 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     ce6:	2501      	movs	r5, #1
     ce8:	e7f2      	b.n	cd0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
     cea:	2b1f      	cmp	r3, #31
     cec:	d804      	bhi.n	cf8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
     cee:	f64f 71ff 	movw	r1, #65535	; 0xffff
     cf2:	ea01 0183 	and.w	r1, r1, r3, lsl #2
     cf6:	e009      	b.n	d0c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
     cf8:	0059      	lsls	r1, r3, #1
     cfa:	2bff      	cmp	r3, #255	; 0xff
     cfc:	d90c      	bls.n	d18 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
     cfe:	f103 02ff 	add.w	r2, r3, #255	; 0xff
     d02:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
     d06:	d200      	bcs.n	d0a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
     d08:	4611      	mov	r1, r2
     d0a:	b289      	uxth	r1, r1
     d0c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
     d10:	1cc9      	adds	r1, r1, #3
     d12:	4011      	ands	r1, r2
     d14:	b135      	cbz	r5, d24 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
     d16:	e007      	b.n	d28 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
     d18:	227c      	movs	r2, #124	; 0x7c
     d1a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
     d1e:	d3f4      	bcc.n	d0a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
     d20:	217c      	movs	r1, #124	; 0x7c
     d22:	e7f2      	b.n	d0a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
     d24:	6070      	str	r0, [r6, #4]
     d26:	8071      	strh	r1, [r6, #2]
     d28:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     d2c:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
     d30:	2200      	movs	r2, #0
     d32:	6876      	ldr	r6, [r6, #4]
     d34:	f04f 0c01 	mov.w	ip, #1
     d38:	e00d      	b.n	d56 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
     d3a:	b94d      	cbnz	r5, d50 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
     d3c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
     d40:	eb00 0e03 	add.w	lr, r0, r3
     d44:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
     d48:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
     d4c:	f8c7 e004 	str.w	lr, [r7, #4]
     d50:	1c52      	adds	r2, r2, #1
     d52:	440b      	add	r3, r1
     d54:	b2d2      	uxtb	r2, r2
     d56:	42a2      	cmp	r2, r4
     d58:	d3ef      	bcc.n	d3a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
     d5a:	1ddb      	adds	r3, r3, #7
     d5c:	f023 0007 	bic.w	r0, r3, #7
     d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d64:	20000074 	.word	0x20000074

00000d68 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
     d68:	b570      	push	{r4, r5, r6, lr}
     d6a:	4a10      	ldr	r2, [pc, #64]	; (dac <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
     d6c:	2000      	movs	r0, #0
     d6e:	6851      	ldr	r1, [r2, #4]
     d70:	7812      	ldrb	r2, [r2, #0]
     d72:	e014      	b.n	d9e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
     d74:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     d78:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
     d7c:	b16b      	cbz	r3, d9a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
     d7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     d82:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
     d86:	d00c      	beq.n	da2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
     d88:	2500      	movs	r5, #0
     d8a:	70a5      	strb	r5, [r4, #2]
     d8c:	2101      	movs	r1, #1
     d8e:	4620      	mov	r0, r4
     d90:	f7ff ff5a 	bl	c48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
     d94:	7025      	strb	r5, [r4, #0]
     d96:	4620      	mov	r0, r4
     d98:	bd70      	pop	{r4, r5, r6, pc}
     d9a:	1c40      	adds	r0, r0, #1
     d9c:	b2c0      	uxtb	r0, r0
     d9e:	4290      	cmp	r0, r2
     da0:	d3e8      	bcc.n	d74 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
     da2:	21a9      	movs	r1, #169	; 0xa9
     da4:	2009      	movs	r0, #9
     da6:	f7ff fad1 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     daa:	0000      	.short	0x0000
     dac:	20000074 	.word	0x20000074

00000db0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
     db0:	4804      	ldr	r0, [pc, #16]	; (dc4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
     db2:	b510      	push	{r4, lr}
     db4:	8840      	ldrh	r0, [r0, #2]
     db6:	0884      	lsrs	r4, r0, #2
     db8:	f007 fb87 	bl	84ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
     dbc:	4284      	cmp	r4, r0
     dbe:	d300      	bcc.n	dc2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
     dc0:	4620      	mov	r0, r4
     dc2:	bd10      	pop	{r4, pc}
     dc4:	20000074 	.word	0x20000074
     dc8:	b530      	push	{r4, r5, lr}
     dca:	490d      	ldr	r1, [pc, #52]	; (e00 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
     dcc:	2001      	movs	r0, #1
     dce:	6048      	str	r0, [r1, #4]
     dd0:	1e82      	subs	r2, r0, #2
     dd2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     dd6:	490b      	ldr	r1, [pc, #44]	; (e04 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
     dd8:	6088      	str	r0, [r1, #8]
     dda:	2300      	movs	r3, #0
     ddc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
     de0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     de4:	4c08      	ldr	r4, [pc, #32]	; (e08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
     de6:	6023      	str	r3, [r4, #0]
     de8:	1d25      	adds	r5, r4, #4
     dea:	6028      	str	r0, [r5, #0]
     dec:	6088      	str	r0, [r1, #8]
     dee:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     df2:	6023      	str	r3, [r4, #0]
     df4:	6028      	str	r0, [r5, #0]
     df6:	4906      	ldr	r1, [pc, #24]	; (e10 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
     df8:	4804      	ldr	r0, [pc, #16]	; (e0c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	bd30      	pop	{r4, r5, pc}
     dfe:	0000      	.short	0x0000
     e00:	4000e000 	.word	0x4000e000
     e04:	4000f000 	.word	0x4000f000
     e08:	4000f500 	.word	0x4000f500
     e0c:	3ff60000 	.word	0x3ff60000
     e10:	4001f508 	.word	0x4001f508

00000e14 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
     e14:	b510      	push	{r4, lr}
     e16:	f7ff ffd7 	bl	dc8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
     e1a:	f007 fc2d 	bl	8678 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
     e1e:	4903      	ldr	r1, [pc, #12]	; (e2c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
     e20:	4801      	ldr	r0, [pc, #4]	; (e28 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
     e22:	6008      	str	r0, [r1, #0]
     e24:	bd10      	pop	{r4, pc}
     e26:	0000      	.short	0x0000
     e28:	3ff60000 	.word	0x3ff60000
     e2c:	4001f508 	.word	0x4001f508

00000e30 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
     e30:	b510      	push	{r4, lr}
     e32:	f7ff ffc9 	bl	dc8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
     e36:	f007 fc1f 	bl	8678 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
     e3a:	f000 f887 	bl	f4c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
     e3e:	4905      	ldr	r1, [pc, #20]	; (e54 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
     e40:	4803      	ldr	r0, [pc, #12]	; (e50 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
     e42:	6008      	str	r0, [r1, #0]
     e44:	f000 f8b8 	bl	fb8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
     e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     e4c:	f000 b8dc 	b.w	1008 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
     e50:	3ff60000 	.word	0x3ff60000
     e54:	4001f508 	.word	0x4001f508
     e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e5c:	4682      	mov	sl, r0
     e5e:	4838      	ldr	r0, [pc, #224]	; (f40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     e60:	f008 ffe7 	bl	9e32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
     e64:	f8df b0d8 	ldr.w	fp, [pc, #216]	; f40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
     e68:	b128      	cbz	r0, e76 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
     e6a:	2601      	movs	r6, #1
     e6c:	f10b 0001 	add.w	r0, fp, #1
     e70:	21ff      	movs	r1, #255	; 0xff
     e72:	7001      	strb	r1, [r0, #0]
     e74:	e000      	b.n	e78 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
     e76:	2600      	movs	r6, #0
     e78:	f44f 7580 	mov.w	r5, #256	; 0x100
     e7c:	4c31      	ldr	r4, [pc, #196]	; (f44 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
     e7e:	f04f 0800 	mov.w	r8, #0
     e82:	1d2f      	adds	r7, r5, #4
     e84:	2101      	movs	r1, #1
     e86:	6061      	str	r1, [r4, #4]
     e88:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     e8c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     e90:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
     e94:	6021      	str	r1, [r4, #0]
     e96:	f8df 90b0 	ldr.w	r9, [pc, #176]	; f48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
     e9a:	e01c      	b.n	ed6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     e9c:	f8d9 0000 	ldr.w	r0, [r9]
     ea0:	06c0      	lsls	r0, r0, #27
     ea2:	d518      	bpl.n	ed6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     ea4:	200e      	movs	r0, #14
     ea6:	f007 fbf6 	bl	8696 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
     eaa:	f3ef 8010 	mrs	r0, PRIMASK
     eae:	9000      	str	r0, [sp, #0]
     eb0:	b672      	cpsid	i
     eb2:	2103      	movs	r1, #3
     eb4:	4620      	mov	r0, r4
     eb6:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
     eba:	4629      	mov	r1, r5
     ebc:	f007 fbf8 	bl	86b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ec0:	b930      	cbnz	r0, ed0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     ec2:	4639      	mov	r1, r7
     ec4:	4620      	mov	r0, r4
     ec6:	f007 fbf3 	bl	86b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     eca:	b908      	cbnz	r0, ed0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     ecc:	f009 f848 	bl	9f60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
     ed0:	9800      	ldr	r0, [sp, #0]
     ed2:	b900      	cbnz	r0, ed6 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     ed4:	b662      	cpsie	i
     ed6:	4629      	mov	r1, r5
     ed8:	4620      	mov	r0, r4
     eda:	f007 fbe9 	bl	86b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ede:	b928      	cbnz	r0, eec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
     ee0:	4639      	mov	r1, r7
     ee2:	4620      	mov	r0, r4
     ee4:	f007 fbe4 	bl	86b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ee8:	2800      	cmp	r0, #0
     eea:	d0d7      	beq.n	e9c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
     eec:	4639      	mov	r1, r7
     eee:	4620      	mov	r0, r4
     ef0:	f007 fbde 	bl	86b0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
     ef4:	2800      	cmp	r0, #0
     ef6:	d1c5      	bne.n	e84 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
     ef8:	bb06      	cbnz	r6, f3c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     efa:	f89b 1001 	ldrb.w	r1, [fp, #1]
     efe:	f88d 1000 	strb.w	r1, [sp]
     f02:	9900      	ldr	r1, [sp, #0]
     f04:	9100      	str	r1, [sp, #0]
     f06:	f89d 1000 	ldrb.w	r1, [sp]
     f0a:	b109      	cbz	r1, f10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
     f0c:	2501      	movs	r5, #1
     f0e:	e000      	b.n	f12 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
     f10:	2500      	movs	r5, #0
     f12:	f10b 0001 	add.w	r0, fp, #1
     f16:	f880 8000 	strb.w	r8, [r0]
     f1a:	2003      	movs	r0, #3
     f1c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
     f20:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     f24:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     f28:	200e      	movs	r0, #14
     f2a:	f007 fbb4 	bl	8696 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
     f2e:	4804      	ldr	r0, [pc, #16]	; (f40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     f30:	f008 ff96 	bl	9e60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
     f34:	b115      	cbz	r5, f3c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     f36:	2011      	movs	r0, #17
     f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f3c:	2000      	movs	r0, #0
     f3e:	e7fb      	b.n	f38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
     f40:	20000174 	.word	0x20000174
     f44:	4000e000 	.word	0x4000e000
     f48:	e000ed10 	.word	0xe000ed10

00000f4c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
     f4c:	b510      	push	{r4, lr}
     f4e:	4806      	ldr	r0, [pc, #24]	; (f68 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     f50:	f008 ff82 	bl	9e58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
     f54:	b118      	cbz	r0, f5e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
     f56:	2130      	movs	r1, #48	; 0x30
     f58:	201d      	movs	r0, #29
     f5a:	f7ff f9f7 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f5e:	4802      	ldr	r0, [pc, #8]	; (f68 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     f60:	2100      	movs	r1, #0
     f62:	7041      	strb	r1, [r0, #1]
     f64:	bd10      	pop	{r4, pc}
     f66:	0000      	.short	0x0000
     f68:	20000174 	.word	0x20000174

00000f6c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
     f6c:	b570      	push	{r4, r5, r6, lr}
     f6e:	4911      	ldr	r1, [pc, #68]	; (fb4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
     f70:	680a      	ldr	r2, [r1, #0]
     f72:	b1ea      	cbz	r2, fb0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
     f74:	2300      	movs	r3, #0
     f76:	461d      	mov	r5, r3
     f78:	2401      	movs	r4, #1
     f7a:	684a      	ldr	r2, [r1, #4]
     f7c:	1c52      	adds	r2, r2, #1
     f7e:	604a      	str	r2, [r1, #4]
     f80:	2a09      	cmp	r2, #9
     f82:	d300      	bcc.n	f86 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
     f84:	604d      	str	r5, [r1, #4]
     f86:	790e      	ldrb	r6, [r1, #4]
     f88:	fa04 f206 	lsl.w	r2, r4, r6
     f8c:	680e      	ldr	r6, [r1, #0]
     f8e:	4216      	tst	r6, r2
     f90:	d00b      	beq.n	faa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
     f92:	f3ef 8310 	mrs	r3, PRIMASK
     f96:	b672      	cpsid	i
     f98:	680c      	ldr	r4, [r1, #0]
     f9a:	4394      	bics	r4, r2
     f9c:	600c      	str	r4, [r1, #0]
     f9e:	b903      	cbnz	r3, fa2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
     fa0:	b662      	cpsie	i
     fa2:	6849      	ldr	r1, [r1, #4]
     fa4:	6001      	str	r1, [r0, #0]
     fa6:	2000      	movs	r0, #0
     fa8:	bd70      	pop	{r4, r5, r6, pc}
     faa:	1c5b      	adds	r3, r3, #1
     fac:	2b09      	cmp	r3, #9
     fae:	d3e4      	bcc.n	f7a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
     fb0:	2005      	movs	r0, #5
     fb2:	bd70      	pop	{r4, r5, r6, pc}
     fb4:	2000007c 	.word	0x2000007c

00000fb8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
     fb8:	4802      	ldr	r0, [pc, #8]	; (fc4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
     fba:	2100      	movs	r1, #0
     fbc:	6001      	str	r1, [r0, #0]
     fbe:	6041      	str	r1, [r0, #4]
     fc0:	4770      	bx	lr
     fc2:	0000      	.short	0x0000
     fc4:	2000007c 	.word	0x2000007c

00000fc8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
     fc8:	b510      	push	{r4, lr}
     fca:	4c04      	ldr	r4, [pc, #16]	; (fdc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
     fcc:	7820      	ldrb	r0, [r4, #0]
     fce:	28ff      	cmp	r0, #255	; 0xff
     fd0:	d003      	beq.n	fda <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
     fd2:	f006 fb4b 	bl	766c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     fd6:	20ff      	movs	r0, #255	; 0xff
     fd8:	7020      	strb	r0, [r4, #0]
     fda:	bd10      	pop	{r4, pc}
     fdc:	20000000 	.word	0x20000000

00000fe0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
     fe0:	b510      	push	{r4, lr}
     fe2:	4c08      	ldr	r4, [pc, #32]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fe4:	7861      	ldrb	r1, [r4, #1]
     fe6:	b109      	cbz	r1, fec <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
     fe8:	200f      	movs	r0, #15
     fea:	bd10      	pop	{r4, pc}
     fec:	f006 fb04 	bl	75f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     ff0:	7020      	strb	r0, [r4, #0]
     ff2:	28ff      	cmp	r0, #255	; 0xff
     ff4:	d001      	beq.n	ffa <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
     ff6:	2000      	movs	r0, #0
     ff8:	bd10      	pop	{r4, pc}
     ffa:	2173      	movs	r1, #115	; 0x73
     ffc:	201f      	movs	r0, #31
     ffe:	f7ff f9a5 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1002:	0000      	.short	0x0000
    1004:	20000000 	.word	0x20000000

00001008 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1008:	4901      	ldr	r1, [pc, #4]	; (1010 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    100a:	2000      	movs	r0, #0
    100c:	7048      	strb	r0, [r1, #1]
    100e:	4770      	bx	lr
    1010:	20000000 	.word	0x20000000
    1014:	4905      	ldr	r1, [pc, #20]	; (102c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
    1016:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1018:	4282      	cmp	r2, r0
    101a:	d105      	bne.n	1028 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
    101c:	2000      	movs	r0, #0
    101e:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1022:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1026:	8488      	strh	r0, [r1, #36]	; 0x24
    1028:	4770      	bx	lr
    102a:	0000      	.short	0x0000
    102c:	20000e38 	.word	0x20000e38

00001030 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1030:	4a0a      	ldr	r2, [pc, #40]	; (105c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1032:	b110      	cbz	r0, 103a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1034:	2801      	cmp	r0, #1
    1036:	d007      	beq.n	1048 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1038:	e00e      	b.n	1058 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    103a:	7850      	ldrb	r0, [r2, #1]
    103c:	b160      	cbz	r0, 1058 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    103e:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1042:	6008      	str	r0, [r1, #0]
    1044:	88d0      	ldrh	r0, [r2, #6]
    1046:	e004      	b.n	1052 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1048:	7810      	ldrb	r0, [r2, #0]
    104a:	b128      	cbz	r0, 1058 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    104c:	6890      	ldr	r0, [r2, #8]
    104e:	6008      	str	r0, [r1, #0]
    1050:	8990      	ldrh	r0, [r2, #12]
    1052:	8088      	strh	r0, [r1, #4]
    1054:	2001      	movs	r0, #1
    1056:	4770      	bx	lr
    1058:	2000      	movs	r0, #0
    105a:	4770      	bx	lr
    105c:	20000176 	.word	0x20000176

00001060 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1060:	4a08      	ldr	r2, [pc, #32]	; (1084 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1062:	2301      	movs	r3, #1
    1064:	b138      	cbz	r0, 1076 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1066:	2801      	cmp	r0, #1
    1068:	d104      	bne.n	1074 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    106a:	7013      	strb	r3, [r2, #0]
    106c:	6808      	ldr	r0, [r1, #0]
    106e:	6090      	str	r0, [r2, #8]
    1070:	8888      	ldrh	r0, [r1, #4]
    1072:	8190      	strh	r0, [r2, #12]
    1074:	4770      	bx	lr
    1076:	7053      	strb	r3, [r2, #1]
    1078:	6808      	ldr	r0, [r1, #0]
    107a:	f8c2 0002 	str.w	r0, [r2, #2]
    107e:	8888      	ldrh	r0, [r1, #4]
    1080:	80d0      	strh	r0, [r2, #6]
    1082:	4770      	bx	lr
    1084:	20000176 	.word	0x20000176

00001088 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1088:	4906      	ldr	r1, [pc, #24]	; (10a4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    108a:	b110      	cbz	r0, 1092 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    108c:	2801      	cmp	r0, #1
    108e:	d002      	beq.n	1096 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1090:	e005      	b.n	109e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1092:	7848      	ldrb	r0, [r1, #1]
    1094:	e000      	b.n	1098 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    1096:	7808      	ldrb	r0, [r1, #0]
    1098:	b108      	cbz	r0, 109e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    109a:	2001      	movs	r0, #1
    109c:	4770      	bx	lr
    109e:	2000      	movs	r0, #0
    10a0:	4770      	bx	lr
    10a2:	0000      	.short	0x0000
    10a4:	20000176 	.word	0x20000176

000010a8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    10a8:	4901      	ldr	r1, [pc, #4]	; (10b0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    10aa:	7708      	strb	r0, [r1, #28]
    10ac:	4770      	bx	lr
    10ae:	0000      	.short	0x0000
    10b0:	200006fa 	.word	0x200006fa

000010b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    10b4:	4800      	ldr	r0, [pc, #0]	; (10b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    10b6:	4770      	bx	lr
    10b8:	20000fe8 	.word	0x20000fe8

000010bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    10bc:	4904      	ldr	r1, [pc, #16]	; (10d0 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    10be:	784a      	ldrb	r2, [r1, #1]
    10c0:	4282      	cmp	r2, r0
    10c2:	d903      	bls.n	10cc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    10c4:	4408      	add	r0, r1
    10c6:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    10ca:	4770      	bx	lr
    10cc:	2000      	movs	r0, #0
    10ce:	4770      	bx	lr
    10d0:	20000e5e 	.word	0x20000e5e

000010d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    10d4:	4904      	ldr	r1, [pc, #16]	; (10e8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    10d6:	784a      	ldrb	r2, [r1, #1]
    10d8:	4282      	cmp	r2, r0
    10da:	d903      	bls.n	10e4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    10dc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    10e0:	3082      	adds	r0, #130	; 0x82
    10e2:	4770      	bx	lr
    10e4:	2000      	movs	r0, #0
    10e6:	4770      	bx	lr
    10e8:	20000e5e 	.word	0x20000e5e

000010ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    10ec:	4a05      	ldr	r2, [pc, #20]	; (1104 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    10ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    10f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    10f6:	6802      	ldr	r2, [r0, #0]
    10f8:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    10fc:	8880      	ldrh	r0, [r0, #4]
    10fe:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    1102:	4770      	bx	lr
    1104:	20000e5e 	.word	0x20000e5e

00001108 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    1108:	4904      	ldr	r1, [pc, #16]	; (111c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    110a:	784a      	ldrb	r2, [r1, #1]
    110c:	4282      	cmp	r2, r0
    110e:	d903      	bls.n	1118 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    1110:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    1114:	1c80      	adds	r0, r0, #2
    1116:	4770      	bx	lr
    1118:	2000      	movs	r0, #0
    111a:	4770      	bx	lr
    111c:	20000e5e 	.word	0x20000e5e

00001120 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    1120:	b510      	push	{r4, lr}
    1122:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    1126:	2100      	movs	r1, #0
    1128:	4805      	ldr	r0, [pc, #20]	; (1140 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    112a:	f008 ffed 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    112e:	4805      	ldr	r0, [pc, #20]	; (1144 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    1130:	2100      	movs	r1, #0
    1132:	7001      	strb	r1, [r0, #0]
    1134:	7041      	strb	r1, [r0, #1]
    1136:	f44f 7161 	mov.w	r1, #900	; 0x384
    113a:	8041      	strh	r1, [r0, #2]
    113c:	bd10      	pop	{r4, pc}
    113e:	0000      	.short	0x0000
    1140:	20000e5e 	.word	0x20000e5e
    1144:	2000016c 	.word	0x2000016c

00001148 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    1148:	4b0b      	ldr	r3, [pc, #44]	; (1178 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    114a:	b510      	push	{r4, lr}
    114c:	785c      	ldrb	r4, [r3, #1]
    114e:	4284      	cmp	r4, r0
    1150:	d910      	bls.n	1174 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    1152:	4418      	add	r0, r3
    1154:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    1158:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    115c:	4418      	add	r0, r3
    115e:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    1162:	700b      	strb	r3, [r1, #0]
    1164:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    1168:	6011      	str	r1, [r2, #0]
    116a:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    116e:	8090      	strh	r0, [r2, #4]
    1170:	2001      	movs	r0, #1
    1172:	bd10      	pop	{r4, pc}
    1174:	2000      	movs	r0, #0
    1176:	bd10      	pop	{r4, pc}
    1178:	20000e5e 	.word	0x20000e5e

0000117c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    117c:	4801      	ldr	r0, [pc, #4]	; (1184 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    117e:	8840      	ldrh	r0, [r0, #2]
    1180:	4770      	bx	lr
    1182:	0000      	.short	0x0000
    1184:	2000016c 	.word	0x2000016c

00001188 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    1188:	4905      	ldr	r1, [pc, #20]	; (11a0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    118a:	784a      	ldrb	r2, [r1, #1]
    118c:	4282      	cmp	r2, r0
    118e:	d903      	bls.n	1198 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    1190:	4408      	add	r0, r1
    1192:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    1196:	b108      	cbz	r0, 119c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    1198:	2000      	movs	r0, #0
    119a:	4770      	bx	lr
    119c:	2001      	movs	r0, #1
    119e:	4770      	bx	lr
    11a0:	20000e5e 	.word	0x20000e5e

000011a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    11a4:	4901      	ldr	r1, [pc, #4]	; (11ac <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    11a6:	7048      	strb	r0, [r1, #1]
    11a8:	4770      	bx	lr
    11aa:	0000      	.short	0x0000
    11ac:	2000016c 	.word	0x2000016c
    11b0:	4602      	mov	r2, r0
    11b2:	4809      	ldr	r0, [pc, #36]	; (11d8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    11b4:	b510      	push	{r4, lr}
    11b6:	7800      	ldrb	r0, [r0, #0]
    11b8:	460b      	mov	r3, r1
    11ba:	b158      	cbz	r0, 11d4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    11bc:	4807      	ldr	r0, [pc, #28]	; (11dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    11be:	7841      	ldrb	r1, [r0, #1]
    11c0:	b141      	cbz	r1, 11d4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    11c2:	b10b      	cbz	r3, 11c8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    11c4:	1c80      	adds	r0, r0, #2
    11c6:	e001      	b.n	11cc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    11c8:	4804      	ldr	r0, [pc, #16]	; (11dc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    11ca:	3082      	adds	r0, #130	; 0x82
    11cc:	f001 fdb6 	bl	2d3c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    11d0:	2001      	movs	r0, #1
    11d2:	bd10      	pop	{r4, pc}
    11d4:	2000      	movs	r0, #0
    11d6:	bd10      	pop	{r4, pc}
    11d8:	2000016c 	.word	0x2000016c
    11dc:	20000e5e 	.word	0x20000e5e
    11e0:	4908      	ldr	r1, [pc, #32]	; (1204 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    11e2:	b510      	push	{r4, lr}
    11e4:	4603      	mov	r3, r0
    11e6:	2000      	movs	r0, #0
    11e8:	784a      	ldrb	r2, [r1, #1]
    11ea:	e006      	b.n	11fa <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    11ec:	180c      	adds	r4, r1, r0
    11ee:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    11f2:	429c      	cmp	r4, r3
    11f4:	d004      	beq.n	1200 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    11f6:	1c40      	adds	r0, r0, #1
    11f8:	b2c0      	uxtb	r0, r0
    11fa:	4282      	cmp	r2, r0
    11fc:	d8f6      	bhi.n	11ec <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    11fe:	2008      	movs	r0, #8
    1200:	bd10      	pop	{r4, pc}
    1202:	0000      	.short	0x0000
    1204:	20000e5e 	.word	0x20000e5e
    1208:	b5f0      	push	{r4, r5, r6, r7, lr}
    120a:	4c1a      	ldr	r4, [pc, #104]	; (1274 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    120c:	4603      	mov	r3, r0
    120e:	2000      	movs	r0, #0
    1210:	7825      	ldrb	r5, [r4, #0]
    1212:	e02b      	b.n	126c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    1214:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    1218:	4422      	add	r2, r4
    121a:	780f      	ldrb	r7, [r1, #0]
    121c:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    1220:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    1224:	ea87 070c 	eor.w	r7, r7, ip
    1228:	405e      	eors	r6, r3
    122a:	443e      	add	r6, r7
    122c:	784f      	ldrb	r7, [r1, #1]
    122e:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    1232:	ea87 070c 	eor.w	r7, r7, ip
    1236:	443e      	add	r6, r7
    1238:	788f      	ldrb	r7, [r1, #2]
    123a:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    123e:	ea87 070c 	eor.w	r7, r7, ip
    1242:	443e      	add	r6, r7
    1244:	78cf      	ldrb	r7, [r1, #3]
    1246:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    124a:	ea87 070c 	eor.w	r7, r7, ip
    124e:	443e      	add	r6, r7
    1250:	790f      	ldrb	r7, [r1, #4]
    1252:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    1256:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    125a:	ea87 070c 	eor.w	r7, r7, ip
    125e:	443e      	add	r6, r7
    1260:	794f      	ldrb	r7, [r1, #5]
    1262:	4057      	eors	r7, r2
    1264:	42f7      	cmn	r7, r6
    1266:	d004      	beq.n	1272 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    1268:	1c40      	adds	r0, r0, #1
    126a:	b2c0      	uxtb	r0, r0
    126c:	4285      	cmp	r5, r0
    126e:	d8d1      	bhi.n	1214 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    1270:	2008      	movs	r0, #8
    1272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1274:	20000e5e 	.word	0x20000e5e

00001278 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    1278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    127c:	4604      	mov	r4, r0
    127e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    1282:	f04f 0901 	mov.w	r9, #1
    1286:	b171      	cbz	r1, 12a6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    1288:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    128c:	1e7e      	subs	r6, r7, #1
    128e:	2901      	cmp	r1, #1
    1290:	d029      	beq.n	12e6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    1292:	2902      	cmp	r1, #2
    1294:	d04e      	beq.n	1334 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    1296:	2903      	cmp	r1, #3
    1298:	d123      	bne.n	12e2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    129a:	4639      	mov	r1, r7
    129c:	4630      	mov	r0, r6
    129e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12a2:	f007 bb1d 	b.w	88e0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    12a6:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    12aa:	2100      	movs	r1, #0
    12ac:	f008 ff2c 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12b0:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    12b4:	4924      	ldr	r1, [pc, #144]	; (1348 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    12b6:	66e9      	str	r1, [r5, #108]	; 0x6c
    12b8:	4620      	mov	r0, r4
    12ba:	2107      	movs	r1, #7
    12bc:	6729      	str	r1, [r5, #112]	; 0x70
    12be:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    12c2:	f021 0104 	bic.w	r1, r1, #4
    12c6:	7001      	strb	r1, [r0, #0]
    12c8:	20fe      	movs	r0, #254	; 0xfe
    12ca:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    12ce:	207f      	movs	r0, #127	; 0x7f
    12d0:	7668      	strb	r0, [r5, #25]
    12d2:	481e      	ldr	r0, [pc, #120]	; (134c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    12d4:	60a8      	str	r0, [r5, #8]
    12d6:	2000      	movs	r0, #0
    12d8:	e9c5 0000 	strd	r0, r0, [r5]
    12dc:	2020      	movs	r0, #32
    12de:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    12e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12e6:	f04f 0800 	mov.w	r8, #0
    12ea:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    12ee:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    12f2:	6921      	ldr	r1, [r4, #16]
    12f4:	4816      	ldr	r0, [pc, #88]	; (1350 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    12f6:	460a      	mov	r2, r1
    12f8:	4408      	add	r0, r1
    12fa:	fbb0 f0f1 	udiv	r0, r0, r1
    12fe:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    1302:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1306:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    130a:	8b63      	ldrh	r3, [r4, #26]
    130c:	4628      	mov	r0, r5
    130e:	f000 f821 	bl	1354 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    1312:	4639      	mov	r1, r7
    1314:	4630      	mov	r0, r6
    1316:	f007 fae3 	bl	88e0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    131a:	f008 fdfd 	bl	9f18 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    131e:	b118      	cbz	r0, 1328 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    1320:	6960      	ldr	r0, [r4, #20]
    1322:	f000 f9a9 	bl	1678 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    1326:	b110      	cbz	r0, 132e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    1328:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    132c:	e7d9      	b.n	12e2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    132e:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    1332:	e7d6      	b.n	12e2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    1334:	6901      	ldr	r1, [r0, #16]
    1336:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    133a:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    133e:	4628      	mov	r0, r5
    1340:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1344:	f000 b806 	b.w	1354 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    1348:	c404492f 	.word	0xc404492f
    134c:	fffce000 	.word	0xfffce000
    1350:	01c9c37f 	.word	0x01c9c37f
    1354:	b510      	push	{r4, lr}
    1356:	2400      	movs	r4, #0
    1358:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    135c:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    1360:	434c      	muls	r4, r1
    1362:	fbb4 f4f2 	udiv	r4, r4, r2
    1366:	f820 4910 	strh.w	r4, [r0], #-16
    136a:	f240 2471 	movw	r4, #625	; 0x271
    136e:	4363      	muls	r3, r4
    1370:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    1374:	1e5b      	subs	r3, r3, #1
    1376:	fbb3 f3f2 	udiv	r3, r3, r2
    137a:	81c3      	strh	r3, [r0, #14]
    137c:	4b09      	ldr	r3, [pc, #36]	; (13a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    137e:	fbb3 f3f2 	udiv	r3, r3, r2
    1382:	1c5b      	adds	r3, r3, #1
    1384:	8283      	strh	r3, [r0, #20]
    1386:	8903      	ldrh	r3, [r0, #8]
    1388:	4363      	muls	r3, r4
    138a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    138e:	1e5b      	subs	r3, r3, #1
    1390:	fbb3 f3f2 	udiv	r3, r3, r2
    1394:	6043      	str	r3, [r0, #4]
    1396:	6803      	ldr	r3, [r0, #0]
    1398:	434b      	muls	r3, r1
    139a:	fbb3 f1f2 	udiv	r1, r3, r2
    139e:	6001      	str	r1, [r0, #0]
    13a0:	bd10      	pop	{r4, pc}
    13a2:	0000      	.short	0x0000
    13a4:	02625a00 	.word	0x02625a00

000013a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    13a8:	4902      	ldr	r1, [pc, #8]	; (13b4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    13aa:	f991 1000 	ldrsb.w	r1, [r1]
    13ae:	f007 ba8c 	b.w	88ca <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    13b2:	0000      	.short	0x0000
    13b4:	20000184 	.word	0x20000184

000013b8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    13b8:	b508      	push	{r3, lr}
    13ba:	207f      	movs	r0, #127	; 0x7f
    13bc:	f88d 0000 	strb.w	r0, [sp]
    13c0:	4668      	mov	r0, sp
    13c2:	f002 f89f 	bl	3504 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    13c6:	b140      	cbz	r0, 13da <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    13c8:	4805      	ldr	r0, [pc, #20]	; (13e0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    13ca:	7840      	ldrb	r0, [r0, #1]
    13cc:	4240      	negs	r0, r0
    13ce:	b241      	sxtb	r1, r0
    13d0:	f99d 0000 	ldrsb.w	r0, [sp]
    13d4:	f007 fa79 	bl	88ca <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    13d8:	bd08      	pop	{r3, pc}
    13da:	f99d 0000 	ldrsb.w	r0, [sp]
    13de:	bd08      	pop	{r3, pc}
    13e0:	20000184 	.word	0x20000184

000013e4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    13e4:	4a01      	ldr	r2, [pc, #4]	; (13ec <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    13e6:	7010      	strb	r0, [r2, #0]
    13e8:	7051      	strb	r1, [r2, #1]
    13ea:	4770      	bx	lr
    13ec:	20000184 	.word	0x20000184

000013f0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    13f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1570 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    13f8:	4f5e      	ldr	r7, [pc, #376]	; (1574 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    13fa:	4683      	mov	fp, r0
    13fc:	f04f 0a01 	mov.w	sl, #1
    1400:	2600      	movs	r6, #0
    1402:	6878      	ldr	r0, [r7, #4]
    1404:	4635      	mov	r5, r6
    1406:	7a00      	ldrb	r0, [r0, #8]
    1408:	f88d 0000 	strb.w	r0, [sp]
    140c:	9800      	ldr	r0, [sp, #0]
    140e:	9000      	str	r0, [sp, #0]
    1410:	f89d 1000 	ldrb.w	r1, [sp]
    1414:	2910      	cmp	r1, #16
    1416:	d106      	bne.n	1426 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1418:	f899 1013 	ldrb.w	r1, [r9, #19]
    141c:	b119      	cbz	r1, 1426 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    141e:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    1422:	2800      	cmp	r0, #0
    1424:	d073      	beq.n	150e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1426:	f88d 6000 	strb.w	r6, [sp]
    142a:	4668      	mov	r0, sp
    142c:	f000 f8ac 	bl	1588 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    1430:	f89d 1000 	ldrb.w	r1, [sp]
    1434:	2900      	cmp	r1, #0
    1436:	d1f8      	bne.n	142a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1438:	2800      	cmp	r0, #0
    143a:	d068      	beq.n	150e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    143c:	4604      	mov	r4, r0
    143e:	7a00      	ldrb	r0, [r0, #8]
    1440:	f88d 0000 	strb.w	r0, [sp]
    1444:	9800      	ldr	r0, [sp, #0]
    1446:	9000      	str	r0, [sp, #0]
    1448:	f89d 8000 	ldrb.w	r8, [sp]
    144c:	f104 0008 	add.w	r0, r4, #8
    1450:	2105      	movs	r1, #5
    1452:	9000      	str	r0, [sp, #0]
    1454:	7001      	strb	r1, [r0, #0]
    1456:	4640      	mov	r0, r8
    1458:	f1b8 0f08 	cmp.w	r8, #8
    145c:	d042      	beq.n	14e4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    145e:	dc07      	bgt.n	1470 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    1460:	2802      	cmp	r0, #2
    1462:	d00d      	beq.n	1480 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    1464:	2803      	cmp	r0, #3
    1466:	d017      	beq.n	1498 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    1468:	f1b8 0f04 	cmp.w	r8, #4
    146c:	d105      	bne.n	147a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    146e:	e01d      	b.n	14ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    1470:	280f      	cmp	r0, #15
    1472:	d052      	beq.n	151a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1474:	f1b8 0f10 	cmp.w	r8, #16
    1478:	d059      	beq.n	152e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    147a:	f240 214a 	movw	r1, #586	; 0x24a
    147e:	e065      	b.n	154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1480:	6862      	ldr	r2, [r4, #4]
    1482:	b132      	cbz	r2, 1492 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    1484:	4659      	mov	r1, fp
    1486:	4620      	mov	r0, r4
    1488:	4790      	blx	r2
    148a:	2004      	movs	r0, #4
    148c:	f360 0507 	bfi	r5, r0, #0, #8
    1490:	e010      	b.n	14b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    1492:	f240 11c3 	movw	r1, #451	; 0x1c3
    1496:	e059      	b.n	154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1498:	6862      	ldr	r2, [r4, #4]
    149a:	b122      	cbz	r2, 14a6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    149c:	4659      	mov	r1, fp
    149e:	4620      	mov	r0, r4
    14a0:	4790      	blx	r2
    14a2:	4605      	mov	r5, r0
    14a4:	e006      	b.n	14b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    14a6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    14aa:	e04f      	b.n	154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    14ac:	6861      	ldr	r1, [r4, #4]
    14ae:	b1b1      	cbz	r1, 14de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    14b0:	4620      	mov	r0, r4
    14b2:	4788      	blx	r1
    14b4:	f3c5 2007 	ubfx	r0, r5, #8, #8
    14b8:	2801      	cmp	r0, #1
    14ba:	d04a      	beq.n	1552 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    14bc:	f3ef 8110 	mrs	r1, PRIMASK
    14c0:	b672      	cpsid	i
    14c2:	7a20      	ldrb	r0, [r4, #8]
    14c4:	f88d 0000 	strb.w	r0, [sp]
    14c8:	9800      	ldr	r0, [sp, #0]
    14ca:	9000      	str	r0, [sp, #0]
    14cc:	f89d 0000 	ldrb.w	r0, [sp]
    14d0:	2805      	cmp	r0, #5
    14d2:	d042      	beq.n	155a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    14d4:	b3b0      	cbz	r0, 1544 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    14d6:	f366 0507 	bfi	r5, r6, #0, #8
    14da:	b3a1      	cbz	r1, 1546 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    14dc:	e041      	b.n	1562 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    14de:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    14e2:	e033      	b.n	154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    14e4:	6860      	ldr	r0, [r4, #4]
    14e6:	465d      	mov	r5, fp
    14e8:	b198      	cbz	r0, 1512 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    14ea:	8804      	ldrh	r4, [r0, #0]
    14ec:	4620      	mov	r0, r4
    14ee:	f7ff fb93 	bl	c18 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    14f2:	b180      	cbz	r0, 1516 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    14f4:	706e      	strb	r6, [r5, #1]
    14f6:	210d      	movs	r1, #13
    14f8:	7029      	strb	r1, [r5, #0]
    14fa:	80ec      	strh	r4, [r5, #6]
    14fc:	f8a5 a008 	strh.w	sl, [r5, #8]
    1500:	f885 a004 	strb.w	sl, [r5, #4]
    1504:	4631      	mov	r1, r6
    1506:	f006 fe88 	bl	821a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    150a:	2004      	movs	r0, #4
    150c:	613e      	str	r6, [r7, #16]
    150e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1512:	21e5      	movs	r1, #229	; 0xe5
    1514:	e01a      	b.n	154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    1516:	21c5      	movs	r1, #197	; 0xc5
    1518:	e018      	b.n	154c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    151a:	f88b 6001 	strb.w	r6, [fp, #1]
    151e:	2116      	movs	r1, #22
    1520:	f88b 1000 	strb.w	r1, [fp]
    1524:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1528:	f8cb 1004 	str.w	r1, [fp, #4]
    152c:	e7ad      	b.n	148a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    152e:	4812      	ldr	r0, [pc, #72]	; (1578 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    1530:	6802      	ldr	r2, [r0, #0]
    1532:	b122      	cbz	r2, 153e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    1534:	6860      	ldr	r0, [r4, #4]
    1536:	b138      	cbz	r0, 1548 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    1538:	8800      	ldrh	r0, [r0, #0]
    153a:	4659      	mov	r1, fp
    153c:	4790      	blx	r2
    153e:	2002      	movs	r0, #2
    1540:	613e      	str	r6, [r7, #16]
    1542:	e7e4      	b.n	150e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    1544:	e009      	b.n	155a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    1546:	e00b      	b.n	1560 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    1548:	f44f 7110 	mov.w	r1, #576	; 0x240
    154c:	2010      	movs	r0, #16
    154e:	f7fe fefd 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1552:	9800      	ldr	r0, [sp, #0]
    1554:	4641      	mov	r1, r8
    1556:	7001      	strb	r1, [r0, #0]
    1558:	e003      	b.n	1562 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    155a:	7226      	strb	r6, [r4, #8]
    155c:	613e      	str	r6, [r7, #16]
    155e:	e7bc      	b.n	14da <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    1560:	b662      	cpsie	i
    1562:	f015 0fff 	tst.w	r5, #255	; 0xff
    1566:	f43f af4c 	beq.w	1402 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    156a:	b2e8      	uxtb	r0, r5
    156c:	e7cf      	b.n	150e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    156e:	0000      	.short	0x0000
    1570:	20000d60 	.word	0x20000d60
    1574:	20000d8c 	.word	0x20000d8c
    1578:	20000084 	.word	0x20000084

0000157c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    157c:	4901      	ldr	r1, [pc, #4]	; (1584 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    157e:	7008      	strb	r0, [r1, #0]
    1580:	f000 b864 	b.w	164c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    1584:	20000186 	.word	0x20000186
    1588:	b538      	push	{r3, r4, r5, lr}
    158a:	4603      	mov	r3, r0
    158c:	4917      	ldr	r1, [pc, #92]	; (15ec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    158e:	2000      	movs	r0, #0
    1590:	7018      	strb	r0, [r3, #0]
    1592:	6908      	ldr	r0, [r1, #16]
    1594:	2401      	movs	r4, #1
    1596:	b140      	cbz	r0, 15aa <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    1598:	7a02      	ldrb	r2, [r0, #8]
    159a:	f88d 2000 	strb.w	r2, [sp]
    159e:	9a00      	ldr	r2, [sp, #0]
    15a0:	9200      	str	r2, [sp, #0]
    15a2:	f89d 5000 	ldrb.w	r5, [sp]
    15a6:	2d00      	cmp	r5, #0
    15a8:	d111      	bne.n	15ce <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    15aa:	6848      	ldr	r0, [r1, #4]
    15ac:	7a02      	ldrb	r2, [r0, #8]
    15ae:	f88d 2000 	strb.w	r2, [sp]
    15b2:	9a00      	ldr	r2, [sp, #0]
    15b4:	9200      	str	r2, [sp, #0]
    15b6:	f89d 5000 	ldrb.w	r5, [sp]
    15ba:	2d01      	cmp	r5, #1
    15bc:	d006      	beq.n	15cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    15be:	f3ef 8210 	mrs	r2, PRIMASK
    15c2:	b672      	cpsid	i
    15c4:	6805      	ldr	r5, [r0, #0]
    15c6:	604d      	str	r5, [r1, #4]
    15c8:	b112      	cbz	r2, 15d0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    15ca:	e002      	b.n	15d2 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    15cc:	2000      	movs	r0, #0
    15ce:	bd38      	pop	{r3, r4, r5, pc}
    15d0:	b662      	cpsie	i
    15d2:	7a02      	ldrb	r2, [r0, #8]
    15d4:	f88d 2000 	strb.w	r2, [sp]
    15d8:	9a00      	ldr	r2, [sp, #0]
    15da:	9200      	str	r2, [sp, #0]
    15dc:	f89d 5000 	ldrb.w	r5, [sp]
    15e0:	b10d      	cbz	r5, 15e6 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    15e2:	6108      	str	r0, [r1, #16]
    15e4:	bd38      	pop	{r3, r4, r5, pc}
    15e6:	701c      	strb	r4, [r3, #0]
    15e8:	bd38      	pop	{r3, r4, r5, pc}
    15ea:	0000      	.short	0x0000
    15ec:	20000d8c 	.word	0x20000d8c
    15f0:	b538      	push	{r3, r4, r5, lr}
    15f2:	b1d0      	cbz	r0, 162a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    15f4:	6041      	str	r1, [r0, #4]
    15f6:	f100 0108 	add.w	r1, r0, #8
    15fa:	700a      	strb	r2, [r1, #0]
    15fc:	f3ef 8310 	mrs	r3, PRIMASK
    1600:	b672      	cpsid	i
    1602:	4c10      	ldr	r4, [pc, #64]	; (1644 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    1604:	6004      	str	r4, [r0, #0]
    1606:	1f21      	subs	r1, r4, #4
    1608:	684a      	ldr	r2, [r1, #4]
    160a:	b14a      	cbz	r2, 1620 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    160c:	7a12      	ldrb	r2, [r2, #8]
    160e:	f88d 2000 	strb.w	r2, [sp]
    1612:	9a00      	ldr	r2, [sp, #0]
    1614:	9200      	str	r2, [sp, #0]
    1616:	f89d 5000 	ldrb.w	r5, [sp]
    161a:	2d01      	cmp	r5, #1
    161c:	d100      	bne.n	1620 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    161e:	600c      	str	r4, [r1, #0]
    1620:	680a      	ldr	r2, [r1, #0]
    1622:	6010      	str	r0, [r2, #0]
    1624:	6008      	str	r0, [r1, #0]
    1626:	b12b      	cbz	r3, 1634 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    1628:	e005      	b.n	1636 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    162a:	f240 2175 	movw	r1, #629	; 0x275
    162e:	2010      	movs	r0, #16
    1630:	f7fe fe8c 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1634:	b662      	cpsie	i
    1636:	4804      	ldr	r0, [pc, #16]	; (1648 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    1638:	7800      	ldrb	r0, [r0, #0]
    163a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    163e:	f005 bff9 	b.w	7634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1642:	0000      	.short	0x0000
    1644:	20000d90 	.word	0x20000d90
    1648:	20000186 	.word	0x20000186
    164c:	b510      	push	{r4, lr}
    164e:	2214      	movs	r2, #20
    1650:	2100      	movs	r1, #0
    1652:	4808      	ldr	r0, [pc, #32]	; (1674 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1654:	f008 fd58 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1658:	4806      	ldr	r0, [pc, #24]	; (1674 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    165a:	2212      	movs	r2, #18
    165c:	2100      	movs	r1, #0
    165e:	3814      	subs	r0, #20
    1660:	f008 fd52 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1664:	4803      	ldr	r0, [pc, #12]	; (1674 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    1666:	2101      	movs	r1, #1
    1668:	7301      	strb	r1, [r0, #12]
    166a:	1d01      	adds	r1, r0, #4
    166c:	6041      	str	r1, [r0, #4]
    166e:	6001      	str	r1, [r0, #0]
    1670:	bd10      	pop	{r4, pc}
    1672:	0000      	.short	0x0000
    1674:	20000d8c 	.word	0x20000d8c

00001678 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    1678:	b5f0      	push	{r4, r5, r6, r7, lr}
    167a:	f06f 021f 	mvn.w	r2, #31
    167e:	0c01      	lsrs	r1, r0, #16
    1680:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    1684:	251f      	movs	r5, #31
    1686:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    168a:	3854      	subs	r0, #84	; 0x54
    168c:	d00d      	beq.n	16aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    168e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    1692:	3855      	subs	r0, #85	; 0x55
    1694:	d009      	beq.n	16aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    1696:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    169a:	38aa      	subs	r0, #170	; 0xaa
    169c:	d005      	beq.n	16aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    169e:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    16a2:	38aa      	subs	r0, #170	; 0xaa
    16a4:	d001      	beq.n	16aa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    16a6:	2001      	movs	r0, #1
    16a8:	e000      	b.n	16ac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    16aa:	2000      	movs	r0, #0
    16ac:	2200      	movs	r2, #0
    16ae:	4613      	mov	r3, r2
    16b0:	ea4f 0402 	mov.w	r4, r2
    16b4:	ea82 0701 	eor.w	r7, r2, r1
    16b8:	43ff      	mvns	r7, r7
    16ba:	431f      	orrs	r7, r3
    16bc:	1c7f      	adds	r7, r7, #1
    16be:	d00f      	beq.n	16e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    16c0:	f006 0701 	and.w	r7, r6, #1
    16c4:	0852      	lsrs	r2, r2, #1
    16c6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    16ca:	f005 0701 	and.w	r7, r5, #1
    16ce:	085b      	lsrs	r3, r3, #1
    16d0:	0876      	lsrs	r6, r6, #1
    16d2:	086d      	lsrs	r5, r5, #1
    16d4:	1c64      	adds	r4, r4, #1
    16d6:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    16da:	2c16      	cmp	r4, #22
    16dc:	d3ea      	bcc.n	16b4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    16de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16e0:	2000      	movs	r0, #0
    16e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000016e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    16e4:	b510      	push	{r4, lr}
    16e6:	4804      	ldr	r0, [pc, #16]	; (16f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    16e8:	f007 f9d3 	bl	8a92 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    16ec:	4802      	ldr	r0, [pc, #8]	; (16f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    16ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    16f2:	3008      	adds	r0, #8
    16f4:	f007 b9cd 	b.w	8a92 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    16f8:	20000088 	.word	0x20000088

000016fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    16fc:	4801      	ldr	r0, [pc, #4]	; (1704 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    16fe:	f000 b809 	b.w	1714 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    1702:	0000      	.short	0x0000
    1704:	20000088 	.word	0x20000088

00001708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    1708:	4801      	ldr	r0, [pc, #4]	; (1710 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    170a:	f000 b803 	b.w	1714 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    170e:	0000      	.short	0x0000
    1710:	20000090 	.word	0x20000090
    1714:	b510      	push	{r4, lr}
    1716:	e9d0 2100 	ldrd	r2, r1, [r0]
    171a:	4b09      	ldr	r3, [pc, #36]	; (1740 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    171c:	4c09      	ldr	r4, [pc, #36]	; (1744 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    171e:	4353      	muls	r3, r2
    1720:	4354      	muls	r4, r2
    1722:	4051      	eors	r1, r2
    1724:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    1728:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    172c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    1730:	e9c0 2100 	strd	r2, r1, [r0]
    1734:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    1738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    173c:	4618      	mov	r0, r3
    173e:	bd10      	pop	{r4, pc}
    1740:	c6ef3760 	.word	0xc6ef3760
    1744:	9e3779bb 	.word	0x9e3779bb

00001748 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    1748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    174a:	f007 f9c7 	bl	8adc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    174e:	4604      	mov	r4, r0
    1750:	460d      	mov	r5, r1
    1752:	466a      	mov	r2, sp
    1754:	f000 f862 	bl	181c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1758:	b108      	cbz	r0, 175e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    175a:	2001      	movs	r0, #1
    175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    175e:	480f      	ldr	r0, [pc, #60]	; (179c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    1760:	7803      	ldrb	r3, [r0, #0]
    1762:	7841      	ldrb	r1, [r0, #1]
    1764:	428b      	cmp	r3, r1
    1766:	d101      	bne.n	176c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    1768:	2000      	movs	r0, #0
    176a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    176c:	461a      	mov	r2, r3
    176e:	6841      	ldr	r1, [r0, #4]
    1770:	e008      	b.n	1784 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    1772:	bf00      	nop
    1774:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1778:	1e52      	subs	r2, r2, #1
    177a:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    177e:	e9c6 7c00 	strd	r7, ip, [r6]
    1782:	b2d2      	uxtb	r2, r2
    1784:	f89d 6000 	ldrb.w	r6, [sp]
    1788:	42b2      	cmp	r2, r6
    178a:	d8f3      	bhi.n	1774 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    178c:	b2f2      	uxtb	r2, r6
    178e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    1792:	1c5b      	adds	r3, r3, #1
    1794:	e9c1 4500 	strd	r4, r5, [r1]
    1798:	7003      	strb	r3, [r0, #0]
    179a:	e7de      	b.n	175a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    179c:	20000098 	.word	0x20000098

000017a0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    17a0:	b510      	push	{r4, lr}
    17a2:	0742      	lsls	r2, r0, #29
    17a4:	d003      	beq.n	17ae <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    17a6:	2163      	movs	r1, #99	; 0x63
    17a8:	2048      	movs	r0, #72	; 0x48
    17aa:	f7fe fdcf 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17ae:	b120      	cbz	r0, 17ba <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    17b0:	4a03      	ldr	r2, [pc, #12]	; (17c0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    17b2:	7051      	strb	r1, [r2, #1]
    17b4:	6050      	str	r0, [r2, #4]
    17b6:	2000      	movs	r0, #0
    17b8:	7010      	strb	r0, [r2, #0]
    17ba:	00c8      	lsls	r0, r1, #3
    17bc:	bd10      	pop	{r4, pc}
    17be:	0000      	.short	0x0000
    17c0:	20000098 	.word	0x20000098

000017c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    17c4:	b538      	push	{r3, r4, r5, lr}
    17c6:	f007 f989 	bl	8adc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    17ca:	466a      	mov	r2, sp
    17cc:	f000 f826 	bl	181c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    17d0:	2800      	cmp	r0, #0
    17d2:	d014      	beq.n	17fe <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    17d4:	4a0a      	ldr	r2, [pc, #40]	; (1800 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    17d6:	7810      	ldrb	r0, [r2, #0]
    17d8:	1e40      	subs	r0, r0, #1
    17da:	b2c1      	uxtb	r1, r0
    17dc:	7011      	strb	r1, [r2, #0]
    17de:	f89d 0000 	ldrb.w	r0, [sp]
    17e2:	6852      	ldr	r2, [r2, #4]
    17e4:	e008      	b.n	17f8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    17e6:	bf00      	nop
    17e8:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    17ec:	1c40      	adds	r0, r0, #1
    17ee:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    17f2:	e9c3 4500 	strd	r4, r5, [r3]
    17f6:	b2c0      	uxtb	r0, r0
    17f8:	4288      	cmp	r0, r1
    17fa:	d3f5      	bcc.n	17e8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    17fc:	2001      	movs	r0, #1
    17fe:	bd38      	pop	{r3, r4, r5, pc}
    1800:	20000098 	.word	0x20000098

00001804 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    1804:	4901      	ldr	r1, [pc, #4]	; (180c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    1806:	2000      	movs	r0, #0
    1808:	7008      	strb	r0, [r1, #0]
    180a:	4770      	bx	lr
    180c:	20000098 	.word	0x20000098

00001810 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    1810:	4801      	ldr	r0, [pc, #4]	; (1818 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    1812:	7840      	ldrb	r0, [r0, #1]
    1814:	4770      	bx	lr
    1816:	0000      	.short	0x0000
    1818:	20000098 	.word	0x20000098
    181c:	b5f0      	push	{r4, r5, r6, r7, lr}
    181e:	4d20      	ldr	r5, [pc, #128]	; (18a0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    1820:	2300      	movs	r3, #0
    1822:	7013      	strb	r3, [r2, #0]
    1824:	782b      	ldrb	r3, [r5, #0]
    1826:	b323      	cbz	r3, 1872 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    1828:	2400      	movs	r4, #0
    182a:	1e5b      	subs	r3, r3, #1
    182c:	b2db      	uxtb	r3, r3
    182e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    1832:	e00b      	b.n	184c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    1834:	18e5      	adds	r5, r4, r3
    1836:	086d      	lsrs	r5, r5, #1
    1838:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    183c:	e9d6 7600 	ldrd	r7, r6, [r6]
    1840:	1a3f      	subs	r7, r7, r0
    1842:	418e      	sbcs	r6, r1
    1844:	d201      	bcs.n	184a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    1846:	462c      	mov	r4, r5
    1848:	e000      	b.n	184c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    184a:	462b      	mov	r3, r5
    184c:	1b1d      	subs	r5, r3, r4
    184e:	2d01      	cmp	r5, #1
    1850:	dcf0      	bgt.n	1834 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    1852:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    1856:	e9d6 5600 	ldrd	r5, r6, [r6]
    185a:	ea80 0705 	eor.w	r7, r0, r5
    185e:	ea81 0e06 	eor.w	lr, r1, r6
    1862:	ea57 070e 	orrs.w	r7, r7, lr
    1866:	d005      	beq.n	1874 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    1868:	1b45      	subs	r5, r0, r5
    186a:	eb71 0506 	sbcs.w	r5, r1, r6
    186e:	d203      	bcs.n	1878 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    1870:	7014      	strb	r4, [r2, #0]
    1872:	e010      	b.n	1896 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    1874:	7014      	strb	r4, [r2, #0]
    1876:	e011      	b.n	189c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    1878:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    187c:	e9d5 4500 	ldrd	r4, r5, [r5]
    1880:	ea80 0604 	eor.w	r6, r0, r4
    1884:	ea81 0705 	eor.w	r7, r1, r5
    1888:	433e      	orrs	r6, r7
    188a:	d006      	beq.n	189a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    188c:	1b00      	subs	r0, r0, r4
    188e:	41a9      	sbcs	r1, r5
    1890:	d300      	bcc.n	1894 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    1892:	1c5b      	adds	r3, r3, #1
    1894:	7013      	strb	r3, [r2, #0]
    1896:	2000      	movs	r0, #0
    1898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    189a:	7013      	strb	r3, [r2, #0]
    189c:	2001      	movs	r0, #1
    189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18a0:	20000098 	.word	0x20000098

000018a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	4604      	mov	r4, r0
    18a8:	7c00      	ldrb	r0, [r0, #16]
    18aa:	b300      	cbz	r0, 18ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    18ac:	2802      	cmp	r0, #2
    18ae:	d01e      	beq.n	18ee <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    18b0:	f05f 0001 	movs.w	r0, #1
    18b4:	f104 0151 	add.w	r1, r4, #81	; 0x51
    18b8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    18bc:	460d      	mov	r5, r1
    18be:	b1c0      	cbz	r0, 18f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    18c0:	7de0      	ldrb	r0, [r4, #23]
    18c2:	b1f0      	cbz	r0, 1902 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    18c4:	f8d4 0011 	ldr.w	r0, [r4, #17]
    18c8:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    18cc:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    18d0:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    18d4:	7c20      	ldrb	r0, [r4, #16]
    18d6:	f007 f931 	bl	8b3c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    18da:	7620      	strb	r0, [r4, #24]
    18dc:	2008      	movs	r0, #8
    18de:	7660      	strb	r0, [r4, #25]
    18e0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    18e4:	4629      	mov	r1, r5
    18e6:	f007 f915 	bl	8b14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    18ea:	b9a8      	cbnz	r0, 1918 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    18ec:	e00e      	b.n	190c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    18ee:	2000      	movs	r0, #0
    18f0:	e7e0      	b.n	18b4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    18f2:	2000      	movs	r0, #0
    18f4:	f7ff fb9c 	bl	1030 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    18f8:	2800      	cmp	r0, #0
    18fa:	d1eb      	bne.n	18d4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    18fc:	f240 41ba 	movw	r1, #1210	; 0x4ba
    1900:	e001      	b.n	1906 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    1902:	f240 41be 	movw	r1, #1214	; 0x4be
    1906:	202d      	movs	r0, #45	; 0x2d
    1908:	f7fe fd20 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    190c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    1910:	4629      	mov	r1, r5
    1912:	f007 f908 	bl	8b26 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1916:	b100      	cbz	r0, 191a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    1918:	2001      	movs	r0, #1
    191a:	76a0      	strb	r0, [r4, #26]
    191c:	7e20      	ldrb	r0, [r4, #24]
    191e:	b130      	cbz	r0, 192e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    1920:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    1924:	f104 0158 	add.w	r1, r4, #88	; 0x58
    1928:	f006 ff4d 	bl	87c6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    192c:	7660      	strb	r0, [r4, #25]
    192e:	f7ff fc25 	bl	117c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    1932:	490c      	ldr	r1, [pc, #48]	; (1964 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    1934:	fba0 2301 	umull	r2, r3, r0, r1
    1938:	f104 0048 	add.w	r0, r4, #72	; 0x48
    193c:	f007 fa68 	bl	8e10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    1940:	2100      	movs	r1, #0
    1942:	4620      	mov	r0, r4
    1944:	f007 fa1d 	bl	8d82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    1948:	2000      	movs	r0, #0
    194a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    194e:	78a0      	ldrb	r0, [r4, #2]
    1950:	0740      	lsls	r0, r0, #29
    1952:	d505      	bpl.n	1960 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    1954:	4620      	mov	r0, r4
    1956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    195a:	2100      	movs	r1, #0
    195c:	f000 bd84 	b.w	2468 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    1960:	bd70      	pop	{r4, r5, r6, pc}
    1962:	0000      	.short	0x0000
    1964:	000f4240 	.word	0x000f4240

00001968 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    1968:	b530      	push	{r4, r5, lr}
    196a:	460c      	mov	r4, r1
    196c:	b08d      	sub	sp, #52	; 0x34
    196e:	4605      	mov	r5, r0
    1970:	4601      	mov	r1, r0
    1972:	2224      	movs	r2, #36	; 0x24
    1974:	a802      	add	r0, sp, #8
    1976:	f008 fb4d 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    197a:	a80b      	add	r0, sp, #44	; 0x2c
    197c:	f007 faa5 	bl	8eca <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    1980:	7aa0      	ldrb	r0, [r4, #10]
    1982:	f88d 0018 	strb.w	r0, [sp, #24]
    1986:	7820      	ldrb	r0, [r4, #0]
    1988:	f88d 0008 	strb.w	r0, [sp, #8]
    198c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    1990:	f8ad 0000 	strh.w	r0, [sp]
    1994:	f89d 0000 	ldrb.w	r0, [sp]
    1998:	f000 0101 	and.w	r1, r0, #1
    199c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    19a0:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    19a4:	f3c0 0280 	ubfx	r2, r0, #2, #1
    19a8:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    19ac:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    19b0:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    19b4:	f3c0 1200 	ubfx	r2, r0, #4, #1
    19b8:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    19bc:	f3c0 1240 	ubfx	r2, r0, #5, #1
    19c0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    19c4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    19c8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    19cc:	f8ad 000a 	strh.w	r0, [sp, #10]
    19d0:	7d20      	ldrb	r0, [r4, #20]
    19d2:	2801      	cmp	r0, #1
    19d4:	d006      	beq.n	19e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    19d6:	2802      	cmp	r0, #2
    19d8:	d004      	beq.n	19e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    19da:	f240 21e9 	movw	r1, #745	; 0x2e9
    19de:	2006      	movs	r0, #6
    19e0:	f7fe fcb4 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19e4:	f88d 000c 	strb.w	r0, [sp, #12]
    19e8:	7a61      	ldrb	r1, [r4, #9]
    19ea:	a80b      	add	r0, sp, #44	; 0x2c
    19ec:	f007 fa54 	bl	8e98 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    19f0:	7d20      	ldrb	r0, [r4, #20]
    19f2:	2101      	movs	r1, #1
    19f4:	2802      	cmp	r0, #2
    19f6:	d102      	bne.n	19fe <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    19f8:	7d60      	ldrb	r0, [r4, #21]
    19fa:	1c40      	adds	r0, r0, #1
    19fc:	b2c1      	uxtb	r1, r0
    19fe:	7ea0      	ldrb	r0, [r4, #26]
    1a00:	1c40      	adds	r0, r0, #1
    1a02:	b2c2      	uxtb	r2, r0
    1a04:	a80b      	add	r0, sp, #44	; 0x2c
    1a06:	f007 fa0e 	bl	8e26 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    1a0a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1a0e:	0700      	lsls	r0, r0, #28
    1a10:	d501      	bpl.n	1a16 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    1a12:	2000      	movs	r0, #0
    1a14:	e020      	b.n	1a58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    1a16:	a80b      	add	r0, sp, #44	; 0x2c
    1a18:	f007 fa17 	bl	8e4a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    1a1c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1a20:	2228      	movs	r2, #40	; 0x28
    1a22:	f000 fd7d 	bl	2520 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    1a26:	f240 2171 	movw	r1, #625	; 0x271
    1a2a:	f200 20db 	addw	r0, r0, #731	; 0x2db
    1a2e:	fbb0 f0f1 	udiv	r0, r0, r1
    1a32:	4348      	muls	r0, r1
    1a34:	f8d4 1002 	ldr.w	r1, [r4, #2]
    1a38:	f240 2371 	movw	r3, #625	; 0x271
    1a3c:	0a0a      	lsrs	r2, r1, #8
    1a3e:	f240 2171 	movw	r1, #625	; 0x271
    1a42:	434a      	muls	r2, r1
    1a44:	f8d4 1005 	ldr.w	r1, [r4, #5]
    1a48:	0a09      	lsrs	r1, r1, #8
    1a4a:	4359      	muls	r1, r3
    1a4c:	4290      	cmp	r0, r2
    1a4e:	d801      	bhi.n	1a54 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    1a50:	9204      	str	r2, [sp, #16]
    1a52:	e004      	b.n	1a5e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    1a54:	4288      	cmp	r0, r1
    1a56:	d801      	bhi.n	1a5c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    1a58:	9004      	str	r0, [sp, #16]
    1a5a:	e000      	b.n	1a5e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    1a5c:	9104      	str	r1, [sp, #16]
    1a5e:	7ca0      	ldrb	r0, [r4, #18]
    1a60:	f88d 0017 	strb.w	r0, [sp, #23]
    1a64:	7e20      	ldrb	r0, [r4, #24]
    1a66:	2801      	cmp	r0, #1
    1a68:	d000      	beq.n	1a6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    1a6a:	2000      	movs	r0, #0
    1a6c:	f88d 0014 	strb.w	r0, [sp, #20]
    1a70:	6b68      	ldr	r0, [r5, #52]	; 0x34
    1a72:	f006 fd38 	bl	84e6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    1a76:	6b68      	ldr	r0, [r5, #52]	; 0x34
    1a78:	f006 fddd 	bl	8636 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    1a7c:	2224      	movs	r2, #36	; 0x24
    1a7e:	a902      	add	r1, sp, #8
    1a80:	4628      	mov	r0, r5
    1a82:	f008 fac7 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a86:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1a88:	62a8      	str	r0, [r5, #40]	; 0x28
    1a8a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    1a8e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    1a90:	7ae0      	ldrb	r0, [r4, #11]
    1a92:	b168      	cbz	r0, 1ab0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    1a94:	2802      	cmp	r0, #2
    1a96:	d00b      	beq.n	1ab0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    1a98:	f05f 0001 	movs.w	r0, #1
    1a9c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    1aa0:	68e0      	ldr	r0, [r4, #12]
    1aa2:	65a8      	str	r0, [r5, #88]	; 0x58
    1aa4:	8a20      	ldrh	r0, [r4, #16]
    1aa6:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    1aaa:	b00d      	add	sp, #52	; 0x34
    1aac:	2000      	movs	r0, #0
    1aae:	bd30      	pop	{r4, r5, pc}
    1ab0:	2000      	movs	r0, #0
    1ab2:	e7f3      	b.n	1a9c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00001ab4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    1ab4:	4a0a      	ldr	r2, [pc, #40]	; (1ae0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    1ab6:	b510      	push	{r4, lr}
    1ab8:	2100      	movs	r1, #0
    1aba:	7011      	strb	r1, [r2, #0]
    1abc:	4c09      	ldr	r4, [pc, #36]	; (1ae4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    1abe:	6060      	str	r0, [r4, #4]
    1ac0:	f000 f822 	bl	1b08 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    1ac4:	b110      	cbz	r0, 1acc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    1ac6:	f240 312e 	movw	r1, #814	; 0x32e
    1aca:	e004      	b.n	1ad6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    1acc:	68a0      	ldr	r0, [r4, #8]
    1ace:	2800      	cmp	r0, #0
    1ad0:	d104      	bne.n	1adc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    1ad2:	f240 3131 	movw	r1, #817	; 0x331
    1ad6:	202d      	movs	r0, #45	; 0x2d
    1ad8:	f7fe fc38 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1adc:	bd10      	pop	{r4, pc}
    1ade:	0000      	.short	0x0000
    1ae0:	20000da0 	.word	0x20000da0
    1ae4:	200000a0 	.word	0x200000a0

00001ae8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    1ae8:	4902      	ldr	r1, [pc, #8]	; (1af4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    1aea:	4801      	ldr	r0, [pc, #4]	; (1af0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    1aec:	6088      	str	r0, [r1, #8]
    1aee:	4770      	bx	lr
    1af0:	00002508 	.word	0x00002508
    1af4:	200000a0 	.word	0x200000a0

00001af8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    1af8:	4902      	ldr	r1, [pc, #8]	; (1b04 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    1afa:	6008      	str	r0, [r1, #0]
    1afc:	6889      	ldr	r1, [r1, #8]
    1afe:	6809      	ldr	r1, [r1, #0]
    1b00:	4708      	bx	r1
    1b02:	0000      	.short	0x0000
    1b04:	200000a0 	.word	0x200000a0

00001b08 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    1b08:	4808      	ldr	r0, [pc, #32]	; (1b2c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    1b0a:	b510      	push	{r4, lr}
    1b0c:	7800      	ldrb	r0, [r0, #0]
    1b0e:	b110      	cbz	r0, 1b16 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    1b10:	240c      	movs	r4, #12
    1b12:	4620      	mov	r0, r4
    1b14:	bd10      	pop	{r4, pc}
    1b16:	2400      	movs	r4, #0
    1b18:	2218      	movs	r2, #24
    1b1a:	4621      	mov	r1, r4
    1b1c:	4803      	ldr	r0, [pc, #12]	; (1b2c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    1b1e:	f008 faf3 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1b22:	f001 fa03 	bl	2f2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1b26:	f001 f921 	bl	2d6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1b2a:	e7f2      	b.n	1b12 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    1b2c:	20000da0 	.word	0x20000da0

00001b30 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    1b30:	4904      	ldr	r1, [pc, #16]	; (1b44 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    1b32:	b510      	push	{r4, lr}
    1b34:	7809      	ldrb	r1, [r1, #0]
    1b36:	2901      	cmp	r1, #1
    1b38:	d101      	bne.n	1b3e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    1b3a:	f000 fbcd 	bl	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1b3e:	2000      	movs	r0, #0
    1b40:	bd10      	pop	{r4, pc}
    1b42:	0000      	.short	0x0000
    1b44:	20000da0 	.word	0x20000da0

00001b48 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    1b48:	b510      	push	{r4, lr}
    1b4a:	4604      	mov	r4, r0
    1b4c:	7880      	ldrb	r0, [r0, #2]
    1b4e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b52:	b158      	cbz	r0, 1b6c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    1b54:	233c      	movs	r3, #60	; 0x3c
    1b56:	22ff      	movs	r2, #255	; 0xff
    1b58:	4620      	mov	r0, r4
    1b5a:	69e1      	ldr	r1, [r4, #28]
    1b5c:	f000 fbe2 	bl	2324 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    1b60:	2202      	movs	r2, #2
    1b62:	4904      	ldr	r1, [pc, #16]	; (1b74 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    1b64:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    1b68:	f006 ff7f 	bl	8a6a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1b6c:	2001      	movs	r0, #1
    1b6e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    1b72:	bd10      	pop	{r4, pc}
    1b74:	00008d1b 	.word	0x00008d1b
    1b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b7c:	000f      	movs	r7, r1
    1b7e:	4604      	mov	r4, r0
    1b80:	d023      	beq.n	1bca <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    1b82:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1b86:	4605      	mov	r5, r0
    1b88:	f007 f988 	bl	8e9c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    1b8c:	b9b0      	cbnz	r0, 1bbc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    1b8e:	78a0      	ldrb	r0, [r4, #2]
    1b90:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b94:	b350      	cbz	r0, 1bec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    1b96:	4628      	mov	r0, r5
    1b98:	f007 f957 	bl	8e4a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    1b9c:	4606      	mov	r6, r0
    1b9e:	4628      	mov	r0, r5
    1ba0:	f007 f97c 	bl	8e9c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    1ba4:	1a30      	subs	r0, r6, r0
    1ba6:	b2c0      	uxtb	r0, r0
    1ba8:	f007 f9cd 	bl	8f46 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    1bac:	4601      	mov	r1, r0
    1bae:	4835      	ldr	r0, [pc, #212]	; (1c84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    1bb0:	6842      	ldr	r2, [r0, #4]
    1bb2:	4411      	add	r1, r2
    1bb4:	6041      	str	r1, [r0, #4]
    1bb6:	4628      	mov	r0, r5
    1bb8:	f007 f98e 	bl	8ed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    1bbc:	4628      	mov	r0, r5
    1bbe:	f007 f950 	bl	8e62 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    1bc2:	4601      	mov	r1, r0
    1bc4:	4620      	mov	r0, r4
    1bc6:	f007 f918 	bl	8dfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    1bca:	4d2f      	ldr	r5, [pc, #188]	; (1c88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    1bcc:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    1bd0:	2100      	movs	r1, #0
    1bd2:	6868      	ldr	r0, [r5, #4]
    1bd4:	8001      	strh	r1, [r0, #0]
    1bd6:	f007 f891 	bl	8cfc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    1bda:	8860      	ldrh	r0, [r4, #2]
    1bdc:	2813      	cmp	r0, #19
    1bde:	d013      	beq.n	1c08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    1be0:	dc09      	bgt.n	1bf6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    1be2:	2810      	cmp	r0, #16
    1be4:	d036      	beq.n	1c54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    1be6:	2812      	cmp	r0, #18
    1be8:	d109      	bne.n	1bfe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    1bea:	e031      	b.n	1c50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    1bec:	4620      	mov	r0, r4
    1bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1bf2:	f000 bb71 	b.w	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1bf6:	2815      	cmp	r0, #21
    1bf8:	d00f      	beq.n	1c1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    1bfa:	281d      	cmp	r0, #29
    1bfc:	d00d      	beq.n	1c1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    1bfe:	f240 6173 	movw	r1, #1651	; 0x673
    1c02:	202d      	movs	r0, #45	; 0x2d
    1c04:	f7fe fba2 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c08:	2100      	movs	r1, #0
    1c0a:	6868      	ldr	r0, [r5, #4]
    1c0c:	f006 fea6 	bl	895c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1c10:	2101      	movs	r1, #1
    1c12:	6868      	ldr	r0, [r5, #4]
    1c14:	f007 f872 	bl	8cfc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    1c18:	e020      	b.n	1c5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    1c1a:	2101      	movs	r1, #1
    1c1c:	6868      	ldr	r0, [r5, #4]
    1c1e:	f006 fe9d 	bl	895c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1c22:	2101      	movs	r1, #1
    1c24:	6868      	ldr	r0, [r5, #4]
    1c26:	f007 f869 	bl	8cfc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    1c2a:	b136      	cbz	r6, 1c3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    1c2c:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    1c30:	6868      	ldr	r0, [r5, #4]
    1c32:	f006 feae 	bl	8992 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1c36:	2101      	movs	r1, #1
    1c38:	e006      	b.n	1c48 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    1c3a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    1c3e:	6868      	ldr	r0, [r5, #4]
    1c40:	f006 fea7 	bl	8992 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1c44:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    1c48:	6868      	ldr	r0, [r5, #4]
    1c4a:	f006 fea8 	bl	899e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    1c4e:	e005      	b.n	1c5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    1c50:	2106      	movs	r1, #6
    1c52:	e000      	b.n	1c56 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    1c54:	2102      	movs	r1, #2
    1c56:	6868      	ldr	r0, [r5, #4]
    1c58:	f006 fe80 	bl	895c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1c5c:	4620      	mov	r0, r4
    1c5e:	f000 fc31 	bl	24c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>
    1c62:	8860      	ldrh	r0, [r4, #2]
    1c64:	281d      	cmp	r0, #29
    1c66:	d007      	beq.n	1c78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    1c68:	2815      	cmp	r0, #21
    1c6a:	d005      	beq.n	1c78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    1c6c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    1c70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1c72:	6868      	ldr	r0, [r5, #4]
    1c74:	f006 fe62 	bl	893c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    1c78:	4639      	mov	r1, r7
    1c7a:	4620      	mov	r0, r4
    1c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1c80:	f000 b9f4 	b.w	206c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    1c84:	20000da0 	.word	0x20000da0
    1c88:	200000a0 	.word	0x200000a0
    1c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c90:	4d2f      	ldr	r5, [pc, #188]	; (1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>)
    1c92:	4680      	mov	r8, r0
    1c94:	7828      	ldrb	r0, [r5, #0]
    1c96:	2802      	cmp	r0, #2
    1c98:	d005      	beq.n	1ca6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    1c9a:	7828      	ldrb	r0, [r5, #0]
    1c9c:	2803      	cmp	r0, #3
    1c9e:	d002      	beq.n	1ca6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    1ca0:	f640 512d 	movw	r1, #3373	; 0xd2d
    1ca4:	e02b      	b.n	1cfe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    1ca6:	4c2b      	ldr	r4, [pc, #172]	; (1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>)
    1ca8:	6826      	ldr	r6, [r4, #0]
    1caa:	7b30      	ldrb	r0, [r6, #12]
    1cac:	b118      	cbz	r0, 1cb6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    1cae:	f7ff fb83 	bl	13b8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1cb2:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    1cb6:	f8d4 c004 	ldr.w	ip, [r4, #4]
    1cba:	2700      	movs	r7, #0
    1cbc:	f1b8 0f00 	cmp.w	r8, #0
    1cc0:	f89c 0000 	ldrb.w	r0, [ip]
    1cc4:	f000 060f 	and.w	r6, r0, #15
    1cc8:	d027      	beq.n	1d1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    1cca:	6821      	ldr	r1, [r4, #0]
    1ccc:	09c0      	lsrs	r0, r0, #7
    1cce:	f101 0351 	add.w	r3, r1, #81	; 0x51
    1cd2:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    1cd6:	f10c 0109 	add.w	r1, ip, #9
    1cda:	f006 fd02 	bl	86e2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    1cde:	b1e0      	cbz	r0, 1d1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    1ce0:	4639      	mov	r1, r7
    1ce2:	6860      	ldr	r0, [r4, #4]
    1ce4:	f006 fe1a 	bl	891c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    1ce8:	b1b8      	cbz	r0, 1d1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    1cea:	782a      	ldrb	r2, [r5, #0]
    1cec:	6820      	ldr	r0, [r4, #0]
    1cee:	4631      	mov	r1, r6
    1cf0:	2a02      	cmp	r2, #2
    1cf2:	d007      	beq.n	1d04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    1cf4:	782a      	ldrb	r2, [r5, #0]
    1cf6:	2a03      	cmp	r2, #3
    1cf8:	d004      	beq.n	1d04 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    1cfa:	f640 5106 	movw	r1, #3334	; 0xd06
    1cfe:	202d      	movs	r0, #45	; 0x2d
    1d00:	f7fe fb24 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d04:	68a2      	ldr	r2, [r4, #8]
    1d06:	782b      	ldrb	r3, [r5, #0]
    1d08:	6952      	ldr	r2, [r2, #20]
    1d0a:	f06f 0607 	mvn.w	r6, #7
    1d0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1d12:	58d2      	ldr	r2, [r2, r3]
    1d14:	4790      	blx	r2
    1d16:	4606      	mov	r6, r0
    1d18:	e000      	b.n	1d1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    1d1a:	2601      	movs	r6, #1
    1d1c:	7ba8      	ldrb	r0, [r5, #14]
    1d1e:	b118      	cbz	r0, 1d28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    1d20:	f001 f904 	bl	2f2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1d24:	f001 f822 	bl	2d6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1d28:	2e00      	cmp	r6, #0
    1d2a:	d00f      	beq.n	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1d2c:	6820      	ldr	r0, [r4, #0]
    1d2e:	f007 f920 	bl	8f72 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    1d32:	b130      	cbz	r0, 1d42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    1d34:	f001 f91c 	bl	2f70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1d38:	68a0      	ldr	r0, [r4, #8]
    1d3a:	6880      	ldr	r0, [r0, #8]
    1d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1d40:	4700      	bx	r0
    1d42:	6820      	ldr	r0, [r4, #0]
    1d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1d48:	f000 bac6 	b.w	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d50:	20000da0 	.word	0x20000da0
    1d54:	200000a0 	.word	0x200000a0
    1d58:	b510      	push	{r4, lr}
    1d5a:	2903      	cmp	r1, #3
    1d5c:	d002      	beq.n	1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d5e:	2905      	cmp	r1, #5
    1d60:	d10a      	bne.n	1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d62:	e002      	b.n	1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d64:	f000 fb4e 	bl	2404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    1d68:	e003      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d6a:	4904      	ldr	r1, [pc, #16]	; (1d7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1d6c:	6809      	ldr	r1, [r1, #0]
    1d6e:	b109      	cbz	r1, 1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d70:	4788      	blx	r1
    1d72:	b108      	cbz	r0, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d74:	2000      	movs	r0, #0
    1d76:	bd10      	pop	{r4, pc}
    1d78:	2001      	movs	r0, #1
    1d7a:	bd10      	pop	{r4, pc}
    1d7c:	200000ac 	.word	0x200000ac
    1d80:	4a09      	ldr	r2, [pc, #36]	; (1da8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c>)
    1d82:	0003      	movs	r3, r0
    1d84:	6810      	ldr	r0, [r2, #0]
    1d86:	d001      	beq.n	1d8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d88:	f000 baa6 	b.w	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1d8c:	2900      	cmp	r1, #0
    1d8e:	d009      	beq.n	1da4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58>
    1d90:	6891      	ldr	r1, [r2, #8]
    1d92:	4a06      	ldr	r2, [pc, #24]	; (1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>)
    1d94:	6909      	ldr	r1, [r1, #16]
    1d96:	7812      	ldrb	r2, [r2, #0]
    1d98:	f06f 030f 	mvn.w	r3, #15
    1d9c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1da0:	5889      	ldr	r1, [r1, r2]
    1da2:	4708      	bx	r1
    1da4:	4770      	bx	lr
    1da6:	0000      	.short	0x0000
    1da8:	200000a0 	.word	0x200000a0
    1dac:	20000da0 	.word	0x20000da0
    1db0:	b570      	push	{r4, r5, r6, lr}
    1db2:	4604      	mov	r4, r0
    1db4:	8840      	ldrh	r0, [r0, #2]
    1db6:	2810      	cmp	r0, #16
    1db8:	d019      	beq.n	1dee <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa2>
    1dba:	4d10      	ldr	r5, [pc, #64]	; (1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>)
    1dbc:	7ba8      	ldrb	r0, [r5, #14]
    1dbe:	b120      	cbz	r0, 1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1dc0:	f000 fff4 	bl	2dac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    1dc4:	2040      	movs	r0, #64	; 0x40
    1dc6:	f001 f8bf 	bl	2f48 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    1dca:	480d      	ldr	r0, [pc, #52]	; (1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>)
    1dcc:	6840      	ldr	r0, [r0, #4]
    1dce:	f001 faf3 	bl	33b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1dd2:	78a0      	ldrb	r0, [r4, #2]
    1dd4:	0740      	lsls	r0, r0, #29
    1dd6:	d404      	bmi.n	1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	2100      	movs	r1, #0
    1dda:	7922      	ldrb	r2, [r4, #4]
    1ddc:	4608      	mov	r0, r1
    1dde:	f001 fb73 	bl	34c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1de2:	2000      	movs	r0, #0
    1de4:	f001 f9ba 	bl	315c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1de8:	2002      	movs	r0, #2
    1dea:	7028      	strb	r0, [r5, #0]
    1dec:	bd70      	pop	{r4, r5, r6, pc}
    1dee:	4620      	mov	r0, r4
    1df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1df4:	2101      	movs	r1, #1
    1df6:	f7ff bebf 	b.w	1b78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    1dfa:	0000      	.short	0x0000
    1dfc:	20000da0 	.word	0x20000da0
    1e00:	200000a0 	.word	0x200000a0
    1e04:	b510      	push	{r4, lr}
    1e06:	4c12      	ldr	r4, [pc, #72]	; (1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1e08:	6820      	ldr	r0, [r4, #0]
    1e0a:	f000 f825 	bl	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    1e0e:	6820      	ldr	r0, [r4, #0]
    1e10:	f007 f8af 	bl	8f72 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    1e14:	2800      	cmp	r0, #0
    1e16:	6820      	ldr	r0, [r4, #0]
    1e18:	d00b      	beq.n	1e32 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe6>
    1e1a:	490e      	ldr	r1, [pc, #56]	; (1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>)
    1e1c:	780a      	ldrb	r2, [r1, #0]
    1e1e:	2a02      	cmp	r2, #2
    1e20:	d00b      	beq.n	1e3a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xee>
    1e22:	780a      	ldrb	r2, [r1, #0]
    1e24:	2a03      	cmp	r2, #3
    1e26:	d008      	beq.n	1e3a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xee>
    1e28:	f640 4137 	movw	r1, #3127	; 0xc37
    1e2c:	202d      	movs	r0, #45	; 0x2d
    1e2e:	f7fe fa8d 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e36:	f000 ba4f 	b.w	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    1e3a:	68a2      	ldr	r2, [r4, #8]
    1e3c:	7809      	ldrb	r1, [r1, #0]
    1e3e:	68d2      	ldr	r2, [r2, #12]
    1e40:	f06f 0307 	mvn.w	r3, #7
    1e44:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1e48:	5851      	ldr	r1, [r2, r1]
    1e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e4e:	4708      	bx	r1
    1e50:	200000a0 	.word	0x200000a0
    1e54:	20000da0 	.word	0x20000da0
    1e58:	b510      	push	{r4, lr}
    1e5a:	7b01      	ldrb	r1, [r0, #12]
    1e5c:	b121      	cbz	r1, 1e68 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11c>
    1e5e:	4604      	mov	r4, r0
    1e60:	f7ff faaa 	bl	13b8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1e64:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    1e68:	4805      	ldr	r0, [pc, #20]	; (1e80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x134>)
    1e6a:	7b80      	ldrb	r0, [r0, #14]
    1e6c:	2800      	cmp	r0, #0
    1e6e:	d005      	beq.n	1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e70:	f001 f85c 	bl	2f2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e78:	f000 bf78 	b.w	2d6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1e7c:	bd10      	pop	{r4, pc}
    1e7e:	0000      	.short	0x0000
    1e80:	20000da0 	.word	0x20000da0

00001e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    1e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e88:	4d5c      	ldr	r5, [pc, #368]	; (1ffc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    1e8a:	4604      	mov	r4, r0
    1e8c:	b086      	sub	sp, #24
    1e8e:	7828      	ldrb	r0, [r5, #0]
    1e90:	bbe8      	cbnz	r0, 1f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    1e92:	7820      	ldrb	r0, [r4, #0]
    1e94:	28ff      	cmp	r0, #255	; 0xff
    1e96:	d04b      	beq.n	1f30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    1e98:	f04f 0800 	mov.w	r8, #0
    1e9c:	f8a5 800c 	strh.w	r8, [r5, #12]
    1ea0:	f8c5 8004 	str.w	r8, [r5, #4]
    1ea4:	f885 8001 	strb.w	r8, [r5, #1]
    1ea8:	f885 8002 	strb.w	r8, [r5, #2]
    1eac:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    1eb0:	4b53      	ldr	r3, [pc, #332]	; (2000 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    1eb2:	4e54      	ldr	r6, [pc, #336]	; (2004 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    1eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1eb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    1eba:	68b0      	ldr	r0, [r6, #8]
    1ebc:	6840      	ldr	r0, [r0, #4]
    1ebe:	9003      	str	r0, [sp, #12]
    1ec0:	4668      	mov	r0, sp
    1ec2:	f001 f943 	bl	314c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1ec6:	f001 f9d1 	bl	326c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1eca:	f001 f82f 	bl	2f2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1ece:	f000 ff4d 	bl	2d6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1ed2:	484d      	ldr	r0, [pc, #308]	; (2008 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    1ed4:	f001 fb22 	bl	351c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1ed8:	484c      	ldr	r0, [pc, #304]	; (200c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    1eda:	f001 fb29 	bl	3530 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1ede:	f104 0028 	add.w	r0, r4, #40	; 0x28
    1ee2:	4607      	mov	r7, r0
    1ee4:	f006 fff8 	bl	8ed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    1ee8:	4638      	mov	r0, r7
    1eea:	f006 ffba 	bl	8e62 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    1eee:	4601      	mov	r1, r0
    1ef0:	4620      	mov	r0, r4
    1ef2:	f006 ff82 	bl	8dfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    1ef6:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1efa:	f001 fa3b 	bl	3374 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    1efe:	7921      	ldrb	r1, [r4, #4]
    1f00:	2000      	movs	r0, #0
    1f02:	f001 f8bf 	bl	3084 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    1f06:	2101      	movs	r1, #1
    1f08:	60a8      	str	r0, [r5, #8]
    1f0a:	b1a8      	cbz	r0, 1f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    1f0c:	e000      	b.n	1f10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    1f0e:	e00f      	b.n	1f30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    1f10:	f104 0138 	add.w	r1, r4, #56	; 0x38
    1f14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f16:	f006 fb55 	bl	85c4 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    1f1a:	4607      	mov	r7, r0
    1f1c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    1f20:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f22:	f006 fb52 	bl	85ca <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    1f26:	b14f      	cbz	r7, 1f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    1f28:	f894 1020 	ldrb.w	r1, [r4, #32]
    1f2c:	b951      	cbnz	r1, 1f44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    1f2e:	e005      	b.n	1f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    1f30:	200c      	movs	r0, #12
    1f32:	b006      	add	sp, #24
    1f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f38:	7029      	strb	r1, [r5, #0]
    1f3a:	e05c      	b.n	1ff6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    1f3c:	b120      	cbz	r0, 1f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    1f3e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    1f42:	b108      	cbz	r0, 1f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    1f44:	2701      	movs	r7, #1
    1f46:	e000      	b.n	1f4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    1f48:	2700      	movs	r7, #0
    1f4a:	7ea0      	ldrb	r0, [r4, #26]
    1f4c:	b920      	cbnz	r0, 1f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    1f4e:	7e20      	ldrb	r0, [r4, #24]
    1f50:	b910      	cbnz	r0, 1f58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    1f52:	78a0      	ldrb	r0, [r4, #2]
    1f54:	0740      	lsls	r0, r0, #29
    1f56:	d523      	bpl.n	1fa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    1f58:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    1f5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    1f60:	4050      	eors	r0, r2
    1f62:	ea70 0101 	orns	r1, r0, r1
    1f66:	d006      	beq.n	1f76 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    1f68:	f007 fec2 	bl	9cf0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    1f6c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    1f70:	1a80      	subs	r0, r0, r2
    1f72:	4199      	sbcs	r1, r3
    1f74:	d200      	bcs.n	1f78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    1f76:	b19f      	cbz	r7, 1fa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    1f78:	f7ff f900 	bl	117c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    1f7c:	4924      	ldr	r1, [pc, #144]	; (2010 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    1f7e:	fba0 2301 	umull	r2, r3, r0, r1
    1f82:	f104 0048 	add.w	r0, r4, #72	; 0x48
    1f86:	f006 ff43 	bl	8e10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11e>
    1f8a:	2101      	movs	r1, #1
    1f8c:	4620      	mov	r0, r4
    1f8e:	f006 fef8 	bl	8d82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x90>
    1f92:	78a0      	ldrb	r0, [r4, #2]
    1f94:	0740      	lsls	r0, r0, #29
    1f96:	d503      	bpl.n	1fa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    1f98:	2101      	movs	r1, #1
    1f9a:	4620      	mov	r0, r4
    1f9c:	f000 fa64 	bl	2468 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>
    1fa0:	6870      	ldr	r0, [r6, #4]
    1fa2:	1cc0      	adds	r0, r0, #3
    1fa4:	f006 fc02 	bl	87ac <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    1fa8:	73a8      	strb	r0, [r5, #14]
    1faa:	78a0      	ldrb	r0, [r4, #2]
    1fac:	07c0      	lsls	r0, r0, #31
    1fae:	d022      	beq.n	1ff6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    1fb0:	f8cd 8010 	str.w	r8, [sp, #16]
    1fb4:	20ff      	movs	r0, #255	; 0xff
    1fb6:	f8cd 8014 	str.w	r8, [sp, #20]
    1fba:	73e8      	strb	r0, [r5, #15]
    1fbc:	69e6      	ldr	r6, [r4, #28]
    1fbe:	f106 070a 	add.w	r7, r6, #10
    1fc2:	e013      	b.n	1fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    1fc4:	9c04      	ldr	r4, [sp, #16]
    1fc6:	42b4      	cmp	r4, r6
    1fc8:	d010      	beq.n	1fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    1fca:	7a72      	ldrb	r2, [r6, #9]
    1fcc:	7a60      	ldrb	r0, [r4, #9]
    1fce:	463b      	mov	r3, r7
    1fd0:	f104 010a 	add.w	r1, r4, #10
    1fd4:	f006 fb85 	bl	86e2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    1fd8:	b140      	cbz	r0, 1fec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    1fda:	78a0      	ldrb	r0, [r4, #2]
    1fdc:	73e8      	strb	r0, [r5, #15]
    1fde:	f8d4 0003 	ldr.w	r0, [r4, #3]
    1fe2:	6128      	str	r0, [r5, #16]
    1fe4:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    1fe8:	82a8      	strh	r0, [r5, #20]
    1fea:	e004      	b.n	1ff6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    1fec:	a804      	add	r0, sp, #16
    1fee:	f7fe fce5 	bl	9bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    1ff2:	2800      	cmp	r0, #0
    1ff4:	d0e6      	beq.n	1fc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    1ff6:	2000      	movs	r0, #0
    1ff8:	e79b      	b.n	1f32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    1ffa:	0000      	.short	0x0000
    1ffc:	20000da0 	.word	0x20000da0
    2000:	000024e8 	.word	0x000024e8
    2004:	200000a0 	.word	0x200000a0
    2008:	8e89bed6 	.word	0x8e89bed6
    200c:	00555555 	.word	0x00555555
    2010:	000f4240 	.word	0x000f4240
    2014:	b510      	push	{r4, lr}
    2016:	4604      	mov	r4, r0
    2018:	f7ff ff34 	bl	1e84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    201c:	2800      	cmp	r0, #0
    201e:	d108      	bne.n	2032 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    2020:	4804      	ldr	r0, [pc, #16]	; (2034 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    2022:	7800      	ldrb	r0, [r0, #0]
    2024:	2801      	cmp	r0, #1
    2026:	d003      	beq.n	2030 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    2028:	2100      	movs	r1, #0
    202a:	4620      	mov	r0, r4
    202c:	f7ff fda4 	bl	1b78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    2030:	2000      	movs	r0, #0
    2032:	bd10      	pop	{r4, pc}
    2034:	20000da0 	.word	0x20000da0
    2038:	480a      	ldr	r0, [pc, #40]	; (2064 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    203a:	b510      	push	{r4, lr}
    203c:	490a      	ldr	r1, [pc, #40]	; (2068 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    203e:	6804      	ldr	r4, [r0, #0]
    2040:	7808      	ldrb	r0, [r1, #0]
    2042:	2800      	cmp	r0, #0
    2044:	d00d      	beq.n	2062 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    2046:	7808      	ldrb	r0, [r1, #0]
    2048:	2802      	cmp	r0, #2
    204a:	d002      	beq.n	2052 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    204c:	7808      	ldrb	r0, [r1, #0]
    204e:	2803      	cmp	r0, #3
    2050:	d102      	bne.n	2058 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    2052:	4620      	mov	r0, r4
    2054:	f7ff ff00 	bl	1e58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10c>
    2058:	4620      	mov	r0, r4
    205a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    205e:	f000 b93b 	b.w	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    2062:	bd10      	pop	{r4, pc}
    2064:	200000a0 	.word	0x200000a0
    2068:	20000da0 	.word	0x20000da0
    206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2070:	4604      	mov	r4, r0
    2072:	4829      	ldr	r0, [pc, #164]	; (2118 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    2074:	460d      	mov	r5, r1
    2076:	6840      	ldr	r0, [r0, #4]
    2078:	f001 f99e 	bl	33b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	4e27      	ldr	r6, [pc, #156]	; (211c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    207e:	2004      	movs	r0, #4
    2080:	7030      	strb	r0, [r6, #0]
    2082:	b355      	cbz	r5, 20da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    2084:	8860      	ldrh	r0, [r4, #2]
    2086:	2810      	cmp	r0, #16
    2088:	d023      	beq.n	20d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    208a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    208e:	4680      	mov	r8, r0
    2090:	68b5      	ldr	r5, [r6, #8]
    2092:	f006 feda 	bl	8e4a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    2096:	4607      	mov	r7, r0
    2098:	4640      	mov	r0, r8
    209a:	f006 feff 	bl	8e9c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    209e:	1a38      	subs	r0, r7, r0
    20a0:	1e40      	subs	r0, r0, #1
    20a2:	b2c0      	uxtb	r0, r0
    20a4:	8861      	ldrh	r1, [r4, #2]
    20a6:	2228      	movs	r2, #40	; 0x28
    20a8:	f000 fa5a 	bl	2560 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    20ac:	4405      	add	r5, r0
    20ae:	78a0      	ldrb	r0, [r4, #2]
    20b0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    20b4:	b130      	cbz	r0, 20c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    20b6:	6870      	ldr	r0, [r6, #4]
    20b8:	4405      	add	r5, r0
    20ba:	f006 ff48 	bl	8f4e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    20be:	4428      	add	r0, r5
    20c0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    20c4:	7922      	ldrb	r2, [r4, #4]
    20c6:	4629      	mov	r1, r5
    20c8:	2000      	movs	r0, #0
    20ca:	f001 f98b 	bl	33e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    20ce:	b920      	cbnz	r0, 20da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    20d0:	e00c      	b.n	20ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    20d2:	7921      	ldrb	r1, [r4, #4]
    20d4:	2000      	movs	r0, #0
    20d6:	f000 ff9b 	bl	3010 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    20da:	8860      	ldrh	r0, [r4, #2]
    20dc:	2813      	cmp	r0, #19
    20de:	d011      	beq.n	2104 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20e0:	dc07      	bgt.n	20f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    20e2:	2810      	cmp	r0, #16
    20e4:	d015      	beq.n	2112 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    20e6:	2812      	cmp	r0, #18
    20e8:	d107      	bne.n	20fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    20ea:	e00b      	b.n	2104 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20ec:	f640 51a8 	movw	r1, #3496	; 0xda8
    20f0:	e005      	b.n	20fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    20f2:	2815      	cmp	r0, #21
    20f4:	d006      	beq.n	2104 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20f6:	281d      	cmp	r0, #29
    20f8:	d004      	beq.n	2104 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    20fa:	f640 51bc 	movw	r1, #3516	; 0xdbc
    20fe:	202d      	movs	r0, #45	; 0x2d
    2100:	f7fe f924 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2104:	7922      	ldrb	r2, [r4, #4]
    2106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    210a:	2101      	movs	r1, #1
    210c:	2000      	movs	r0, #0
    210e:	f001 b9db 	b.w	34c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2116:	0000      	.short	0x0000
    2118:	200000a0 	.word	0x200000a0
    211c:	20000da0 	.word	0x20000da0
    2120:	b538      	push	{r3, r4, r5, lr}
    2122:	4604      	mov	r4, r0
    2124:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    2128:	460b      	mov	r3, r1
    212a:	f88d 0000 	strb.w	r0, [sp]
    212e:	9800      	ldr	r0, [sp, #0]
    2130:	9000      	str	r0, [sp, #0]
    2132:	f89d 0000 	ldrb.w	r0, [sp]
    2136:	2800      	cmp	r0, #0
    2138:	d13a      	bne.n	21b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    213a:	7820      	ldrb	r0, [r4, #0]
    213c:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    2140:	2bff      	cmp	r3, #255	; 0xff
    2142:	d010      	beq.n	2166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    2144:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    2148:	1e51      	subs	r1, r2, #1
    214a:	4618      	mov	r0, r3
    214c:	f7fe fffc 	bl	1148 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    2150:	b130      	cbz	r0, 2160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    2152:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    2156:	f040 0002 	orr.w	r0, r0, #2
    215a:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    215e:	e011      	b.n	2184 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    2160:	f241 0118 	movw	r1, #4120	; 0x1018
    2164:	e021      	b.n	21aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    2166:	4813      	ldr	r0, [pc, #76]	; (21b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    2168:	6840      	ldr	r0, [r0, #4]
    216a:	7801      	ldrb	r1, [r0, #0]
    216c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    2170:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    2174:	f8d0 1003 	ldr.w	r1, [r0, #3]
    2178:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    217c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    2180:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    2184:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    2188:	287f      	cmp	r0, #127	; 0x7f
    218a:	d00c      	beq.n	21a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    218c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    2190:	207f      	movs	r0, #127	; 0x7f
    2192:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2196:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    219a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    219e:	2202      	movs	r2, #2
    21a0:	4905      	ldr	r1, [pc, #20]	; (21b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    21a2:	f006 bc62 	b.w	8a6a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    21a6:	f640 616c 	movw	r1, #3692	; 0xe6c
    21aa:	202d      	movs	r0, #45	; 0x2d
    21ac:	f7fe f8ce 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    21b0:	bd38      	pop	{r3, r4, r5, pc}
    21b2:	0000      	.short	0x0000
    21b4:	200000a0 	.word	0x200000a0
    21b8:	00008d6b 	.word	0x00008d6b
    21bc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    21c0:	4616      	mov	r6, r2
    21c2:	4604      	mov	r4, r0
    21c4:	2903      	cmp	r1, #3
    21c6:	d004      	beq.n	21d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    21c8:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    21cc:	b108      	cbz	r0, 21d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    21ce:	2001      	movs	r0, #1
    21d0:	e000      	b.n	21d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    21d2:	2000      	movs	r0, #0
    21d4:	2500      	movs	r5, #0
    21d6:	2903      	cmp	r1, #3
    21d8:	d003      	beq.n	21e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    21da:	2701      	movs	r7, #1
    21dc:	2905      	cmp	r1, #5
    21de:	d005      	beq.n	21ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    21e0:	e008      	b.n	21f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    21e2:	78a1      	ldrb	r1, [r4, #2]
    21e4:	2702      	movs	r7, #2
    21e6:	f3c1 0140 	ubfx	r1, r1, #1, #1
    21ea:	e001      	b.n	21f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    21ec:	78a1      	ldrb	r1, [r4, #2]
    21ee:	07c9      	lsls	r1, r1, #31
    21f0:	2900      	cmp	r1, #0
    21f2:	d06b      	beq.n	22cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    21f4:	2800      	cmp	r0, #0
    21f6:	d169      	bne.n	22cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    21f8:	4835      	ldr	r0, [pc, #212]	; (22d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    21fa:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 22d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    21fe:	7b80      	ldrb	r0, [r0, #14]
    2200:	b180      	cbz	r0, 2224 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    2202:	f006 fad6 	bl	87b2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    2206:	7030      	strb	r0, [r6, #0]
    2208:	28ff      	cmp	r0, #255	; 0xff
    220a:	d014      	beq.n	2236 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    220c:	b2c0      	uxtb	r0, r0
    220e:	466a      	mov	r2, sp
    2210:	a902      	add	r1, sp, #8
    2212:	f7fe ff99 	bl	1148 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    2216:	b148      	cbz	r0, 222c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    2218:	4669      	mov	r1, sp
    221a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    221e:	f006 fc56 	bl	8ace <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    2222:	4605      	mov	r5, r0
    2224:	7830      	ldrb	r0, [r6, #0]
    2226:	28ff      	cmp	r0, #255	; 0xff
    2228:	d005      	beq.n	2236 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    222a:	e00d      	b.n	2248 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    222c:	f640 719b 	movw	r1, #3995	; 0xf9b
    2230:	202d      	movs	r0, #45	; 0x2d
    2232:	f7fe f88b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2236:	f8d9 1004 	ldr.w	r1, [r9, #4]
    223a:	f811 0b03 	ldrb.w	r0, [r1], #3
    223e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    2242:	f006 fc44 	bl	8ace <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    2246:	4605      	mov	r5, r0
    2248:	f8d9 1004 	ldr.w	r1, [r9, #4]
    224c:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    2250:	f104 0358 	add.w	r3, r4, #88	; 0x58
    2254:	f811 0b03 	ldrb.w	r0, [r1], #3
    2258:	f3c0 1080 	ubfx	r0, r0, #6, #1
    225c:	f006 fa41 	bl	86e2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    2260:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2264:	4680      	mov	r8, r0
    2266:	f811 0b03 	ldrb.w	r0, [r1], #3
    226a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    226e:	f006 faaa 	bl	87c6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    2272:	4681      	mov	r9, r0
    2274:	f7fe ff88 	bl	1188 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    2278:	b138      	cbz	r0, 228a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    227a:	4648      	mov	r0, r9
    227c:	f7fe ff44 	bl	1108 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2280:	b118      	cbz	r0, 228a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    2282:	2110      	movs	r1, #16
    2284:	f006 fb0e 	bl	88a4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    2288:	b138      	cbz	r0, 229a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    228a:	2100      	movs	r1, #0
    228c:	7830      	ldrb	r0, [r6, #0]
    228e:	28ff      	cmp	r0, #255	; 0xff
    2290:	d00c      	beq.n	22ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    2292:	f1b8 0f00 	cmp.w	r8, #0
    2296:	d105      	bne.n	22a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    2298:	e001      	b.n	229e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    229a:	2101      	movs	r1, #1
    229c:	e7f6      	b.n	228c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    229e:	7e62      	ldrb	r2, [r4, #25]
    22a0:	4282      	cmp	r2, r0
    22a2:	d101      	bne.n	22a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    22a4:	2001      	movs	r0, #1
    22a6:	e003      	b.n	22b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    22a8:	2000      	movs	r0, #0
    22aa:	e001      	b.n	22b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    22ac:	ea28 0001 	bic.w	r0, r8, r1
    22b0:	78a2      	ldrb	r2, [r4, #2]
    22b2:	0752      	lsls	r2, r2, #29
    22b4:	d501      	bpl.n	22ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    22b6:	b930      	cbnz	r0, 22c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    22b8:	e008      	b.n	22cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    22ba:	b939      	cbnz	r1, 22cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    22bc:	b91d      	cbnz	r5, 22c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    22be:	7be0      	ldrb	r0, [r4, #15]
    22c0:	b108      	cbz	r0, 22c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    22c2:	42b8      	cmp	r0, r7
    22c4:	d102      	bne.n	22cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    22c6:	2001      	movs	r0, #1
    22c8:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    22cc:	2000      	movs	r0, #0
    22ce:	e7fb      	b.n	22c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    22d0:	20000da0 	.word	0x20000da0
    22d4:	200000a0 	.word	0x200000a0
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	4604      	mov	r4, r0
    22dc:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    22de:	4d10      	ldr	r5, [pc, #64]	; (2320 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    22e0:	1c40      	adds	r0, r0, #1
    22e2:	8620      	strh	r0, [r4, #48]	; 0x30
    22e4:	7ba8      	ldrb	r0, [r5, #14]
    22e6:	2600      	movs	r6, #0
    22e8:	b120      	cbz	r0, 22f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    22ea:	f000 fe1f 	bl	2f2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    22ee:	f000 fd3d 	bl	2d6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    22f2:	73ae      	strb	r6, [r5, #14]
    22f4:	702e      	strb	r6, [r5, #0]
    22f6:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    22fa:	b108      	cbz	r0, 2300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    22fc:	2101      	movs	r1, #1
    22fe:	e00a      	b.n	2316 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    2300:	7b60      	ldrb	r0, [r4, #13]
    2302:	b138      	cbz	r0, 2314 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    2304:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    2306:	4288      	cmp	r0, r1
    2308:	d804      	bhi.n	2314 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    230a:	2101      	movs	r1, #1
    230c:	4620      	mov	r0, r4
    230e:	f006 fe42 	bl	8f96 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	2100      	movs	r1, #0
    2316:	4620      	mov	r0, r4
    2318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    231c:	f006 be3b 	b.w	8f96 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    2320:	20000da0 	.word	0x20000da0
    2324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2328:	4604      	mov	r4, r0
    232a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    232e:	8808      	ldrh	r0, [r1, #0]
    2330:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    2334:	20ff      	movs	r0, #255	; 0xff
    2336:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    233a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    233e:	4616      	mov	r6, r2
    2340:	460d      	mov	r5, r1
    2342:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    2346:	2b00      	cmp	r3, #0
    2348:	d14b      	bne.n	23e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    234a:	6928      	ldr	r0, [r5, #16]
    234c:	f006 fa63 	bl	8816 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    2350:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    2354:	8b28      	ldrh	r0, [r5, #24]
    2356:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    235a:	8b68      	ldrh	r0, [r5, #26]
    235c:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    2360:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    2364:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    2368:	7e20      	ldrb	r0, [r4, #24]
    236a:	f104 0151 	add.w	r1, r4, #81	; 0x51
    236e:	460f      	mov	r7, r1
    2370:	2500      	movs	r5, #0
    2372:	b120      	cbz	r0, 237e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    2374:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    2378:	f006 fbd5 	bl	8b26 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    237c:	b940      	cbnz	r0, 2390 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    237e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2382:	b170      	cbz	r0, 23a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    2384:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    2388:	4639      	mov	r1, r7
    238a:	f006 fbc3 	bl	8b14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    238e:	b140      	cbz	r0, 23a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    2390:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    2394:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    2398:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    239c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    23a0:	e003      	b.n	23aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    23a2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    23a6:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    23aa:	4815      	ldr	r0, [pc, #84]	; (2400 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
    23ac:	2eff      	cmp	r6, #255	; 0xff
    23ae:	6840      	ldr	r0, [r0, #4]
    23b0:	7801      	ldrb	r1, [r0, #0]
    23b2:	f3c1 1180 	ubfx	r1, r1, #6, #1
    23b6:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    23ba:	f850 1f03 	ldr.w	r1, [r0, #3]!
    23be:	d017      	beq.n	23f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
    23c0:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    23c4:	8880      	ldrh	r0, [r0, #4]
    23c6:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    23ca:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    23ce:	1e51      	subs	r1, r2, #1
    23d0:	4630      	mov	r0, r6
    23d2:	f7fe feb9 	bl	1148 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    23d6:	b130      	cbz	r0, 23e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
    23d8:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    23dc:	f040 0002 	orr.w	r0, r0, #2
    23e0:	7020      	strb	r0, [r4, #0]
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23e6:	f640 418b 	movw	r1, #3211	; 0xc8b
    23ea:	202d      	movs	r0, #45	; 0x2d
    23ec:	f7fd ffae 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23f0:	f844 1f7a 	str.w	r1, [r4, #122]!
    23f4:	8880      	ldrh	r0, [r0, #4]
    23f6:	80a0      	strh	r0, [r4, #4]
    23f8:	60e5      	str	r5, [r4, #12]
    23fa:	8225      	strh	r5, [r4, #16]
    23fc:	e7f1      	b.n	23e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    23fe:	0000      	.short	0x0000
    2400:	200000a0 	.word	0x200000a0
    2404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2406:	4604      	mov	r4, r0
    2408:	20ff      	movs	r0, #255	; 0xff
    240a:	f88d 0000 	strb.w	r0, [sp]
    240e:	2501      	movs	r5, #1
    2410:	466a      	mov	r2, sp
    2412:	2103      	movs	r1, #3
    2414:	4620      	mov	r0, r4
    2416:	f7ff fed1 	bl	21bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    241a:	b1e8      	cbz	r0, 2458 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d4>
    241c:	7b20      	ldrb	r0, [r4, #12]
    241e:	b120      	cbz	r0, 242a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a6>
    2420:	f89d 1000 	ldrb.w	r1, [sp]
    2424:	4620      	mov	r0, r4
    2426:	f7ff fe7b 	bl	2120 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    242a:	4e0d      	ldr	r6, [pc, #52]	; (2460 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5dc>)
    242c:	2100      	movs	r1, #0
    242e:	6870      	ldr	r0, [r6, #4]
    2430:	8001      	strh	r1, [r0, #0]
    2432:	2104      	movs	r1, #4
    2434:	f006 fa92 	bl	895c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    2438:	4620      	mov	r0, r4
    243a:	f000 f843 	bl	24c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>
    243e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    2442:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2444:	6870      	ldr	r0, [r6, #4]
    2446:	f006 fac0 	bl	89ca <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    244a:	4906      	ldr	r1, [pc, #24]	; (2464 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    244c:	2005      	movs	r0, #5
    244e:	7008      	strb	r0, [r1, #0]
    2450:	6870      	ldr	r0, [r6, #4]
    2452:	f000 ffb1 	bl	33b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2456:	e000      	b.n	245a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    2458:	2500      	movs	r5, #0
    245a:	4628      	mov	r0, r5
    245c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    245e:	0000      	.short	0x0000
    2460:	200000a0 	.word	0x200000a0
    2464:	20000da0 	.word	0x20000da0
    2468:	b570      	push	{r4, r5, r6, lr}
    246a:	4604      	mov	r4, r0
    246c:	460e      	mov	r6, r1
    246e:	7e40      	ldrb	r0, [r0, #25]
    2470:	f7fe fe4a 	bl	1108 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2474:	0005      	movs	r5, r0
    2476:	d019      	beq.n	24ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
    2478:	2110      	movs	r1, #16
    247a:	f006 fa13 	bl	88a4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    247e:	2800      	cmp	r0, #0
    2480:	d114      	bne.n	24ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>
    2482:	2001      	movs	r0, #1
    2484:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    2488:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    248c:	4632      	mov	r2, r6
    248e:	460c      	mov	r4, r1
    2490:	4628      	mov	r0, r5
    2492:	f006 f956 	bl	8742 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    2496:	4621      	mov	r1, r4
    2498:	4c05      	ldr	r4, [pc, #20]	; (24b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62c>)
    249a:	6860      	ldr	r0, [r4, #4]
    249c:	f006 fa79 	bl	8992 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    24a0:	6860      	ldr	r0, [r4, #4]
    24a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    24a6:	2101      	movs	r1, #1
    24a8:	f006 ba79 	b.w	899e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    24ac:	bd70      	pop	{r4, r5, r6, pc}
    24ae:	0000      	.short	0x0000
    24b0:	200000a0 	.word	0x200000a0
    24b4:	4802      	ldr	r0, [pc, #8]	; (24c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
    24b6:	2101      	movs	r1, #1
    24b8:	6800      	ldr	r0, [r0, #0]
    24ba:	f7ff bb5d 	b.w	1b78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    24be:	0000      	.short	0x0000
    24c0:	200000a0 	.word	0x200000a0
    24c4:	b570      	push	{r4, r5, r6, lr}
    24c6:	4d07      	ldr	r5, [pc, #28]	; (24e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x660>)
    24c8:	4604      	mov	r4, r0
    24ca:	f100 0151 	add.w	r1, r0, #81	; 0x51
    24ce:	6868      	ldr	r0, [r5, #4]
    24d0:	f006 fa6c 	bl	89ac <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    24d4:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    24d8:	6868      	ldr	r0, [r5, #4]
    24da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    24de:	f006 ba6b 	b.w	89b8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    24e2:	0000      	.short	0x0000
    24e4:	200000a0 	.word	0x200000a0
    24e8:	00001e05 	.word	0x00001e05
    24ec:	00001c8d 	.word	0x00001c8d
    24f0:	00001d81 	.word	0x00001d81
    24f4:	00000000 	.word	0x00000000
    24f8:	00001d59 	.word	0x00001d59
    24fc:	00001db1 	.word	0x00001db1
    2500:	00008d0f 	.word	0x00008d0f
    2504:	00008d15 	.word	0x00008d15
    2508:	00002015 	.word	0x00002015
    250c:	00002039 	.word	0x00002039
    2510:	000024b5 	.word	0x000024b5
    2514:	00002504 	.word	0x00002504
    2518:	000024fc 	.word	0x000024fc
    251c:	000024f8 	.word	0x000024f8

00002520 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    2520:	b510      	push	{r4, lr}
    2522:	1e42      	subs	r2, r0, #1
    2524:	2a02      	cmp	r2, #2
    2526:	d901      	bls.n	252c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    2528:	21ca      	movs	r1, #202	; 0xca
    252a:	e009      	b.n	2540 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    252c:	1e40      	subs	r0, r0, #1
    252e:	2910      	cmp	r1, #16
    2530:	d009      	beq.n	2546 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    2532:	2912      	cmp	r1, #18
    2534:	d00c      	beq.n	2550 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    2536:	2913      	cmp	r1, #19
    2538:	d00a      	beq.n	2550 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    253a:	2915      	cmp	r1, #21
    253c:	d005      	beq.n	254a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    253e:	21d8      	movs	r1, #216	; 0xd8
    2540:	202f      	movs	r0, #47	; 0x2f
    2542:	f7fd ff03 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2546:	4905      	ldr	r1, [pc, #20]	; (255c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2548:	e004      	b.n	2554 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    254a:	4904      	ldr	r1, [pc, #16]	; (255c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    254c:	1d89      	adds	r1, r1, #6
    254e:	e001      	b.n	2554 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    2550:	4902      	ldr	r1, [pc, #8]	; (255c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    2552:	1f89      	subs	r1, r1, #6
    2554:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    2558:	bd10      	pop	{r4, pc}
    255a:	0000      	.short	0x0000
    255c:	00008f66 	.word	0x00008f66

00002560 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    2560:	1e42      	subs	r2, r0, #1
    2562:	b510      	push	{r4, lr}
    2564:	b2d2      	uxtb	r2, r2
    2566:	2a01      	cmp	r2, #1
    2568:	d903      	bls.n	2572 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    256a:	291d      	cmp	r1, #29
    256c:	d001      	beq.n	2572 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    256e:	21ee      	movs	r1, #238	; 0xee
    2570:	e00d      	b.n	258e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    2572:	2913      	cmp	r1, #19
    2574:	d013      	beq.n	259e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    2576:	dc04      	bgt.n	2582 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    2578:	2910      	cmp	r1, #16
    257a:	d00b      	beq.n	2594 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    257c:	2912      	cmp	r1, #18
    257e:	d104      	bne.n	258a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    2580:	e00d      	b.n	259e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    2582:	2915      	cmp	r1, #21
    2584:	d008      	beq.n	2598 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    2586:	291d      	cmp	r1, #29
    2588:	d00e      	beq.n	25a8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    258a:	f44f 7181 	mov.w	r1, #258	; 0x102
    258e:	202f      	movs	r0, #47	; 0x2f
    2590:	f7fd fedc 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2594:	4807      	ldr	r0, [pc, #28]	; (25b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    2596:	e004      	b.n	25a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    2598:	4806      	ldr	r0, [pc, #24]	; (25b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    259a:	3008      	adds	r0, #8
    259c:	e001      	b.n	25a2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    259e:	4805      	ldr	r0, [pc, #20]	; (25b4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    25a0:	1d00      	adds	r0, r0, #4
    25a2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    25a6:	bd10      	pop	{r4, pc}
    25a8:	f240 315a 	movw	r1, #858	; 0x35a
    25ac:	fb10 f001 	smulbb	r0, r0, r1
    25b0:	bd10      	pop	{r4, pc}
    25b2:	0000      	.short	0x0000
    25b4:	00008f54 	.word	0x00008f54

000025b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    25b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25bc:	4604      	mov	r4, r0
    25be:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    25c2:	4616      	mov	r6, r2
    25c4:	460f      	mov	r7, r1
    25c6:	2800      	cmp	r0, #0
    25c8:	d15e      	bne.n	2688 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    25ca:	4621      	mov	r1, r4
    25cc:	484d      	ldr	r0, [pc, #308]	; (2704 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    25ce:	f003 fc99 	bl	5f04 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    25d2:	4605      	mov	r5, r0
    25d4:	2820      	cmp	r0, #32
    25d6:	d057      	beq.n	2688 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    25d8:	2250      	movs	r2, #80	; 0x50
    25da:	2100      	movs	r1, #0
    25dc:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    25e0:	f007 fd92 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    25e4:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    25e8:	2501      	movs	r5, #1
    25ea:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    25ee:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    25f2:	b137      	cbz	r7, 2602 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    25f4:	f7ff f888 	bl	1708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    25f8:	f000 0007 	and.w	r0, r0, #7
    25fc:	1c40      	adds	r0, r0, #1
    25fe:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    2602:	4620      	mov	r0, r4
    2604:	f006 fd92 	bl	912c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    2608:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    260c:	2002      	movs	r0, #2
    260e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    2612:	46a8      	mov	r8, r5
    2614:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    2618:	2500      	movs	r5, #0
    261a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    261e:	f004 fd97 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    2622:	4607      	mov	r7, r0
    2624:	f007 fb5b 	bl	9cde <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    2628:	8921      	ldrh	r1, [r4, #8]
    262a:	3ce8      	subs	r4, #232	; 0xe8
    262c:	4288      	cmp	r0, r1
    262e:	d800      	bhi.n	2632 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    2630:	4608      	mov	r0, r1
    2632:	4438      	add	r0, r7
    2634:	30ce      	adds	r0, #206	; 0xce
    2636:	b287      	uxth	r7, r0
    2638:	4620      	mov	r0, r4
    263a:	f006 fb27 	bl	8c8c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    263e:	b330      	cbz	r0, 268e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    2640:	f007 fa9b 	bl	9b7a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    2644:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    2648:	b281      	uxth	r1, r0
    264a:	4630      	mov	r0, r6
    264c:	f004 fe82 	bl	7354 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2650:	4430      	add	r0, r6
    2652:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    2656:	3490      	adds	r4, #144	; 0x90
    2658:	f007 fb4a 	bl	9cf0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    265c:	19c0      	adds	r0, r0, r7
    265e:	4169      	adcs	r1, r5
    2660:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    2664:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    2668:	f824 5c6e 	strh.w	r5, [r4, #-110]
    266c:	2001      	movs	r0, #1
    266e:	f006 fc6a 	bl	8f46 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    2672:	f200 1015 	addw	r0, r0, #277	; 0x115
    2676:	1a30      	subs	r0, r6, r0
    2678:	6460      	str	r0, [r4, #68]	; 0x44
    267a:	f04f 30ff 	mov.w	r0, #4294967295
    267e:	0841      	lsrs	r1, r0, #1
    2680:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2684:	3c90      	subs	r4, #144	; 0x90
    2686:	e025      	b.n	26d4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    2688:	200c      	movs	r0, #12
    268a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    268e:	2100      	movs	r1, #0
    2690:	4620      	mov	r0, r4
    2692:	f006 fd18 	bl	90c6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    2696:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2708 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    269a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    269e:	2000      	movs	r0, #0
    26a0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    26a4:	b149      	cbz	r1, 26ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    26a6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    26a8:	b139      	cbz	r1, 26ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    26aa:	f7ff f82d 	bl	1708 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    26ae:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    26b2:	fbb0 f2f1 	udiv	r2, r0, r1
    26b6:	fb01 0012 	mls	r0, r1, r2, r0
    26ba:	4407      	add	r7, r0
    26bc:	f007 fb18 	bl	9cf0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    26c0:	19c0      	adds	r0, r0, r7
    26c2:	4169      	adcs	r1, r5
    26c4:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    26c8:	b19e      	cbz	r6, 26f2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    26ca:	1980      	adds	r0, r0, r6
    26cc:	eb51 0105 	adcs.w	r1, r1, r5
    26d0:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    26d4:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    26d8:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    26dc:	f006 fd24 	bl	9128 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    26e0:	b158      	cbz	r0, 26fa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    26e2:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    26e6:	2100      	movs	r1, #0
    26e8:	4620      	mov	r0, r4
    26ea:	f006 faff 	bl	8cec <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    26ee:	2000      	movs	r0, #0
    26f0:	e7cb      	b.n	268a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    26f2:	f04f 30ff 	mov.w	r0, #4294967295
    26f6:	0841      	lsrs	r1, r0, #1
    26f8:	e7ea      	b.n	26d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    26fa:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    26fe:	2030      	movs	r0, #48	; 0x30
    2700:	f7fd fe24 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2704:	0000920d 	.word	0x0000920d
    2708:	200000b0 	.word	0x200000b0

0000270c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    270c:	4901      	ldr	r1, [pc, #4]	; (2714 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    270e:	8088      	strh	r0, [r1, #4]
    2710:	4770      	bx	lr
    2712:	0000      	.short	0x0000
    2714:	200000b0 	.word	0x200000b0

00002718 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    2718:	4805      	ldr	r0, [pc, #20]	; (2730 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    271a:	2100      	movs	r1, #0
    271c:	7001      	strb	r1, [r0, #0]
    271e:	2201      	movs	r2, #1
    2720:	7082      	strb	r2, [r0, #2]
    2722:	7041      	strb	r1, [r0, #1]
    2724:	f242 7110 	movw	r1, #10000	; 0x2710
    2728:	8081      	strh	r1, [r0, #4]
    272a:	f000 b803 	b.w	2734 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    272e:	0000      	.short	0x0000
    2730:	200000b0 	.word	0x200000b0

00002734 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    2734:	b51c      	push	{r2, r3, r4, lr}
    2736:	4909      	ldr	r1, [pc, #36]	; (275c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    2738:	e9d1 0100 	ldrd	r0, r1, [r1]
    273c:	e9cd 0100 	strd	r0, r1, [sp]
    2740:	e002      	b.n	2748 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    2742:	9800      	ldr	r0, [sp, #0]
    2744:	f006 fc3b 	bl	8fbe <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    2748:	4668      	mov	r0, sp
    274a:	f7fe f937 	bl	9bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    274e:	2800      	cmp	r0, #0
    2750:	d0f7      	beq.n	2742 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    2752:	f000 f80b 	bl	276c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0xc>
    2756:	2000      	movs	r0, #0
    2758:	bd1c      	pop	{r2, r3, r4, pc}
    275a:	0000      	.short	0x0000
    275c:	000027d0 	.word	0x000027d0

00002760 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    2760:	4901      	ldr	r1, [pc, #4]	; (2768 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    2762:	7008      	strb	r0, [r1, #0]
    2764:	4770      	bx	lr
    2766:	0000      	.short	0x0000
    2768:	200000b0 	.word	0x200000b0
    276c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2770:	4d16      	ldr	r5, [pc, #88]	; (27cc <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x6c>)
    2772:	2001      	movs	r0, #1
    2774:	7068      	strb	r0, [r5, #1]
    2776:	2400      	movs	r4, #0
    2778:	f64f 76ff 	movw	r6, #65535	; 0xffff
    277c:	e00b      	b.n	2796 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x36>
    277e:	2100      	movs	r1, #0
    2780:	f7fe f8ca 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2784:	0007      	movs	r7, r0
    2786:	d009      	beq.n	279c <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x3c>
    2788:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    278c:	f003 faa2 	bl	5cd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    2790:	4638      	mov	r0, r7
    2792:	f006 fd2e 	bl	91f2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1e2>
    2796:	9400      	str	r4, [sp, #0]
    2798:	9401      	str	r4, [sp, #4]
    279a:	e00e      	b.n	27ba <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    279c:	f44f 7191 	mov.w	r1, #290	; 0x122
    27a0:	2030      	movs	r0, #48	; 0x30
    27a2:	f7fd fdd3 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27a6:	9800      	ldr	r0, [sp, #0]
    27a8:	b138      	cbz	r0, 27ba <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    27aa:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    27ae:	2920      	cmp	r1, #32
    27b0:	d003      	beq.n	27ba <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x5a>
    27b2:	8800      	ldrh	r0, [r0, #0]
    27b4:	42b0      	cmp	r0, r6
    27b6:	d1e2      	bne.n	277e <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x1e>
    27b8:	e004      	b.n	27c4 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x64>
    27ba:	4668      	mov	r0, sp
    27bc:	f7fe f8fe 	bl	9bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    27c0:	2800      	cmp	r0, #0
    27c2:	d0f0      	beq.n	27a6 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x46>
    27c4:	706c      	strb	r4, [r5, #1]
    27c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    27ca:	0000      	.short	0x0000
    27cc:	200000b0 	.word	0x200000b0
    27d0:	00000000 	.word	0x00000000
    27d4:	00010000 	.word	0x00010000
    27d8:	00000000 	.word	0x00000000
    27dc:	00010000 	.word	0x00010000
    27e0:	00000000 	.word	0x00000000
    27e4:	00001e14 	.word	0x00001e14
    27e8:	00001130 	.word	0x00001130
    27ec:	00fa01f4 	.word	0x00fa01f4
    27f0:	00640096 	.word	0x00640096
    27f4:	0032004b 	.word	0x0032004b
    27f8:	0014001e 	.word	0x0014001e
    27fc:	0005000a 	.word	0x0005000a
    2800:	00010002 	.word	0x00010002

00002804 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    2804:	b570      	push	{r4, r5, r6, lr}
    2806:	6844      	ldr	r4, [r0, #4]
    2808:	220d      	movs	r2, #13
    280a:	f504 7598 	add.w	r5, r4, #304	; 0x130
    280e:	2100      	movs	r1, #0
    2810:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    2814:	f007 fc78 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2818:	f44f 70a3 	mov.w	r0, #326	; 0x146
    281c:	2100      	movs	r1, #0
    281e:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    2822:	5501      	strb	r1, [r0, r4]
    2824:	f8a5 1017 	strh.w	r1, [r5, #23]
    2828:	7669      	strb	r1, [r5, #25]
    282a:	4608      	mov	r0, r1
    282c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    2830:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    2834:	1c40      	adds	r0, r0, #1
    2836:	b2c0      	uxtb	r0, r0
    2838:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    283c:	2802      	cmp	r0, #2
    283e:	d3f7      	bcc.n	2830 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    2840:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    2844:	4620      	mov	r0, r4
    2846:	f006 fd5e 	bl	9306 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    284a:	2000      	movs	r0, #0
    284c:	21ff      	movs	r1, #255	; 0xff
    284e:	1822      	adds	r2, r4, r0
    2850:	1c40      	adds	r0, r0, #1
    2852:	b2c0      	uxtb	r0, r0
    2854:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    2858:	2802      	cmp	r0, #2
    285a:	d3f8      	bcc.n	284e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    285c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002860 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    2860:	4903      	ldr	r1, [pc, #12]	; (2870 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    2862:	884a      	ldrh	r2, [r1, #2]
    2864:	8002      	strh	r2, [r0, #0]
    2866:	7809      	ldrb	r1, [r1, #0]
    2868:	7081      	strb	r1, [r0, #2]
    286a:	2000      	movs	r0, #0
    286c:	4770      	bx	lr
    286e:	0000      	.short	0x0000
    2870:	20000d60 	.word	0x20000d60

00002874 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    2874:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2878:	460f      	mov	r7, r1
    287a:	4605      	mov	r5, r0
    287c:	7806      	ldrb	r6, [r0, #0]
    287e:	f007 f88f 	bl	99a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xee>
    2882:	2800      	cmp	r0, #0
    2884:	d10e      	bne.n	28a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    2886:	4628      	mov	r0, r5
    2888:	f007 f864 	bl	9954 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa2>
    288c:	2800      	cmp	r0, #0
    288e:	d109      	bne.n	28a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    2890:	2101      	movs	r1, #1
    2892:	4630      	mov	r0, r6
    2894:	f7fe f840 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2898:	0004      	movs	r4, r0
    289a:	d005      	beq.n	28a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    289c:	f006 fbb8 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    28a0:	b170      	cbz	r0, 28c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    28a2:	200c      	movs	r0, #12
    28a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    28a8:	2101      	movs	r1, #1
    28aa:	4630      	mov	r0, r6
    28ac:	f7fd fffc 	bl	8a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    28b0:	0004      	movs	r4, r0
    28b2:	d013      	beq.n	28dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    28b4:	4817      	ldr	r0, [pc, #92]	; (2914 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    28b6:	f990 1000 	ldrsb.w	r1, [r0]
    28ba:	4620      	mov	r0, r4
    28bc:	f006 f985 	bl	8bca <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    28c0:	4620      	mov	r0, r4
    28c2:	f006 f9ed 	bl	8ca0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    28c6:	7038      	strb	r0, [r7, #0]
    28c8:	74e8      	strb	r0, [r5, #19]
    28ca:	4629      	mov	r1, r5
    28cc:	4620      	mov	r0, r4
    28ce:	f7ff f84b 	bl	1968 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    28d2:	4606      	mov	r6, r0
    28d4:	7e68      	ldrb	r0, [r5, #25]
    28d6:	b1d0      	cbz	r0, 290e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    28d8:	b12e      	cbz	r6, 28e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    28da:	e018      	b.n	290e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    28dc:	f241 512e 	movw	r1, #5422	; 0x152e
    28e0:	2039      	movs	r0, #57	; 0x39
    28e2:	f7fd fd33 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28e6:	2200      	movs	r2, #0
    28e8:	4668      	mov	r0, sp
    28ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    28ec:	f005 fdfe 	bl	84ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    28f0:	2200      	movs	r2, #0
    28f2:	2101      	movs	r1, #1
    28f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    28f6:	f005 fe73 	bl	85e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    28fa:	2204      	movs	r2, #4
    28fc:	4668      	mov	r0, sp
    28fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2900:	f005 fdf4 	bl	84ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    2904:	2200      	movs	r2, #0
    2906:	4611      	mov	r1, r2
    2908:	6b60      	ldr	r0, [r4, #52]	; 0x34
    290a:	f005 fe69 	bl	85e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    290e:	4630      	mov	r0, r6
    2910:	e7c8      	b.n	28a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    2912:	0000      	.short	0x0000
    2914:	200000c4 	.word	0x200000c4

00002918 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    2918:	7801      	ldrb	r1, [r0, #0]
    291a:	b171      	cbz	r1, 293a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    291c:	7841      	ldrb	r1, [r0, #1]
    291e:	b161      	cbz	r1, 293a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    2920:	8841      	ldrh	r1, [r0, #2]
    2922:	291b      	cmp	r1, #27
    2924:	d309      	bcc.n	293a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    2926:	8881      	ldrh	r1, [r0, #4]
    2928:	291b      	cmp	r1, #27
    292a:	d306      	bcc.n	293a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    292c:	4904      	ldr	r1, [pc, #16]	; (2940 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    292e:	6802      	ldr	r2, [r0, #0]
    2930:	600a      	str	r2, [r1, #0]
    2932:	8880      	ldrh	r0, [r0, #4]
    2934:	8088      	strh	r0, [r1, #4]
    2936:	2000      	movs	r0, #0
    2938:	4770      	bx	lr
    293a:	2012      	movs	r0, #18
    293c:	4770      	bx	lr
    293e:	0000      	.short	0x0000
    2940:	20000d60 	.word	0x20000d60

00002944 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    2944:	6800      	ldr	r0, [r0, #0]
    2946:	f240 41e2 	movw	r1, #1250	; 0x4e2
    294a:	4288      	cmp	r0, r1
    294c:	d303      	bcc.n	2956 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    294e:	4903      	ldr	r1, [pc, #12]	; (295c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    2950:	6088      	str	r0, [r1, #8]
    2952:	2000      	movs	r0, #0
    2954:	4770      	bx	lr
    2956:	2012      	movs	r0, #18
    2958:	4770      	bx	lr
    295a:	0000      	.short	0x0000
    295c:	20000d60 	.word	0x20000d60

00002960 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    2960:	4a03      	ldr	r2, [pc, #12]	; (2970 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    2962:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    2966:	6001      	str	r1, [r0, #0]
    2968:	6042      	str	r2, [r0, #4]
    296a:	2000      	movs	r0, #0
    296c:	4770      	bx	lr
    296e:	0000      	.short	0x0000
    2970:	00002c20 	.word	0x00002c20

00002974 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    2974:	b570      	push	{r4, r5, r6, lr}
    2976:	b086      	sub	sp, #24
    2978:	4604      	mov	r4, r0
    297a:	f000 f9af 	bl	2cdc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    297e:	0940      	lsrs	r0, r0, #5
    2980:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    2984:	4e2d      	ldr	r6, [pc, #180]	; (2a3c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    2986:	07c0      	lsls	r0, r0, #31
    2988:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    298c:	d002      	beq.n	2994 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    298e:	8871      	ldrh	r1, [r6, #2]
    2990:	88b0      	ldrh	r0, [r6, #4]
    2992:	e001      	b.n	2998 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    2994:	211b      	movs	r1, #27
    2996:	4608      	mov	r0, r1
    2998:	84e9      	strh	r1, [r5, #38]	; 0x26
    299a:	8528      	strh	r0, [r5, #40]	; 0x28
    299c:	f000 f99e 	bl	2cdc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    29a0:	0788      	lsls	r0, r1, #30
    29a2:	f04f 0501 	mov.w	r5, #1
    29a6:	d505      	bpl.n	29b4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    29a8:	f88d 5000 	strb.w	r5, [sp]
    29ac:	4668      	mov	r0, sp
    29ae:	9401      	str	r4, [sp, #4]
    29b0:	f7ff ff28 	bl	2804 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    29b4:	68b0      	ldr	r0, [r6, #8]
    29b6:	62e0      	str	r0, [r4, #44]	; 0x2c
    29b8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    29bc:	6121      	str	r1, [r4, #16]
    29be:	8821      	ldrh	r1, [r4, #0]
    29c0:	f8ad 1004 	strh.w	r1, [sp, #4]
    29c4:	7bb1      	ldrb	r1, [r6, #14]
    29c6:	f88d 1006 	strb.w	r1, [sp, #6]
    29ca:	7bf1      	ldrb	r1, [r6, #15]
    29cc:	f88d 1007 	strb.w	r1, [sp, #7]
    29d0:	8a31      	ldrh	r1, [r6, #16]
    29d2:	f8ad 1008 	strh.w	r1, [sp, #8]
    29d6:	a904      	add	r1, sp, #16
    29d8:	9100      	str	r1, [sp, #0]
    29da:	4628      	mov	r0, r5
    29dc:	ab03      	add	r3, sp, #12
    29de:	aa01      	add	r2, sp, #4
    29e0:	4621      	mov	r1, r4
    29e2:	f007 f82a 	bl	9a3a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    29e6:	b138      	cbz	r0, 29f8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    29e8:	8820      	ldrh	r0, [r4, #0]
    29ea:	2100      	movs	r1, #0
    29ec:	f7fe f836 	bl	a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    29f0:	b308      	cbz	r0, 2a36 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    29f2:	f240 517d 	movw	r1, #1405	; 0x57d
    29f6:	e01b      	b.n	2a30 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    29f8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    29fc:	f88d 0014 	strb.w	r0, [sp, #20]
    2a00:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2a04:	f88d 0015 	strb.w	r0, [sp, #21]
    2a08:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    2a0c:	f8ad 0016 	strh.w	r0, [sp, #22]
    2a10:	a905      	add	r1, sp, #20
    2a12:	4620      	mov	r0, r4
    2a14:	f005 ff05 	bl	8822 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    2a18:	7870      	ldrb	r0, [r6, #1]
    2a1a:	9000      	str	r0, [sp, #0]
    2a1c:	7833      	ldrb	r3, [r6, #0]
    2a1e:	88b2      	ldrh	r2, [r6, #4]
    2a20:	8871      	ldrh	r1, [r6, #2]
    2a22:	8820      	ldrh	r0, [r4, #0]
    2a24:	f7fe f84c 	bl	ac0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    2a28:	2800      	cmp	r0, #0
    2a2a:	d005      	beq.n	2a38 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    2a2c:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    2a30:	2039      	movs	r0, #57	; 0x39
    2a32:	f7fd fc8b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a36:	2009      	movs	r0, #9
    2a38:	b006      	add	sp, #24
    2a3a:	bd70      	pop	{r4, r5, r6, pc}
    2a3c:	20000d60 	.word	0x20000d60
    2a40:	b51c      	push	{r2, r3, r4, lr}
    2a42:	4909      	ldr	r1, [pc, #36]	; (2a68 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf4>)
    2a44:	e9d1 0100 	ldrd	r0, r1, [r1]
    2a48:	e9cd 0100 	strd	r0, r1, [sp]
    2a4c:	e005      	b.n	2a5a <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    2a4e:	9800      	ldr	r0, [sp, #0]
    2a50:	f006 fade 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    2a54:	b108      	cbz	r0, 2a5a <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xe6>
    2a56:	2001      	movs	r0, #1
    2a58:	bd1c      	pop	{r2, r3, r4, pc}
    2a5a:	4668      	mov	r0, sp
    2a5c:	f7fd ffae 	bl	9bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    2a60:	2800      	cmp	r0, #0
    2a62:	d0f4      	beq.n	2a4e <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xda>
    2a64:	2000      	movs	r0, #0
    2a66:	bd1c      	pop	{r2, r3, r4, pc}
    2a68:	00002c20 	.word	0x00002c20
    2a6c:	b510      	push	{r4, lr}
    2a6e:	480d      	ldr	r0, [pc, #52]	; (2aa4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x130>)
    2a70:	2100      	movs	r1, #0
    2a72:	4b0d      	ldr	r3, [pc, #52]	; (2aa8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x134>)
    2a74:	74c1      	strb	r1, [r0, #19]
    2a76:	8281      	strh	r1, [r0, #20]
    2a78:	221b      	movs	r2, #27
    2a7a:	801a      	strh	r2, [r3, #0]
    2a7c:	f44f 74a4 	mov.w	r4, #328	; 0x148
    2a80:	805c      	strh	r4, [r3, #2]
    2a82:	809a      	strh	r2, [r3, #4]
    2a84:	80dc      	strh	r4, [r3, #6]
    2a86:	7381      	strb	r1, [r0, #14]
    2a88:	73c1      	strb	r1, [r0, #15]
    2a8a:	2303      	movs	r3, #3
    2a8c:	7003      	strb	r3, [r0, #0]
    2a8e:	2302      	movs	r3, #2
    2a90:	7043      	strb	r3, [r0, #1]
    2a92:	8042      	strh	r2, [r0, #2]
    2a94:	8082      	strh	r2, [r0, #4]
    2a96:	f640 62a6 	movw	r2, #3750	; 0xea6
    2a9a:	6082      	str	r2, [r0, #8]
    2a9c:	7481      	strb	r1, [r0, #18]
    2a9e:	7301      	strb	r1, [r0, #12]
    2aa0:	bd10      	pop	{r4, pc}
    2aa2:	0000      	.short	0x0000
    2aa4:	20000d60 	.word	0x20000d60
    2aa8:	200000cc 	.word	0x200000cc
    2aac:	b510      	push	{r4, lr}
    2aae:	2101      	movs	r1, #1
    2ab0:	2000      	movs	r0, #0
    2ab2:	f7fd ff31 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    2ab6:	0004      	movs	r4, r0
    2ab8:	d10a      	bne.n	2ad0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x15c>
    2aba:	2101      	movs	r1, #1
    2abc:	f7fd fef4 	bl	8a8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    2ac0:	0004      	movs	r4, r0
    2ac2:	d007      	beq.n	2ad4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x160>
    2ac4:	4806      	ldr	r0, [pc, #24]	; (2ae0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x16c>)
    2ac6:	f990 1000 	ldrsb.w	r1, [r0]
    2aca:	4620      	mov	r0, r4
    2acc:	f006 f87d 	bl	8bca <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    2ad0:	4620      	mov	r0, r4
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	f240 3113 	movw	r1, #787	; 0x313
    2ad8:	2039      	movs	r0, #57	; 0x39
    2ada:	f7fd fc37 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ade:	0000      	.short	0x0000
    2ae0:	200000c4 	.word	0x200000c4

00002ae4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    2ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ae6:	460c      	mov	r4, r1
    2ae8:	4605      	mov	r5, r0
    2aea:	f006 f8dc 	bl	8ca6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    2aee:	b158      	cbz	r0, 2b08 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    2af0:	4628      	mov	r0, r5
    2af2:	f006 f8cb 	bl	8c8c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    2af6:	b148      	cbz	r0, 2b0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    2af8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    2afc:	2112      	movs	r1, #18
    2afe:	b108      	cbz	r0, 2b04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    2b00:	2880      	cmp	r0, #128	; 0x80
    2b02:	d903      	bls.n	2b0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    2b04:	4608      	mov	r0, r1
    2b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b08:	2142      	movs	r1, #66	; 0x42
    2b0a:	e7fb      	b.n	2b04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    2b0c:	4628      	mov	r0, r5
    2b0e:	f006 f8ae 	bl	8c6e <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    2b12:	b120      	cbz	r0, 2b1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    2b14:	4628      	mov	r0, r5
    2b16:	f006 f819 	bl	8b4c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    2b1a:	b110      	cbz	r0, 2b22 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    2b1c:	e005      	b.n	2b2a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    2b1e:	210c      	movs	r1, #12
    2b20:	e7f0      	b.n	2b04 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    2b22:	4628      	mov	r0, r5
    2b24:	f006 f8ac 	bl	8c80 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    2b28:	b120      	cbz	r0, 2b34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    2b2a:	4628      	mov	r0, r5
    2b2c:	f006 fa70 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    2b30:	b930      	cbnz	r0, 2b40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    2b32:	e001      	b.n	2b38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    2b34:	2012      	movs	r0, #18
    2b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b38:	4628      	mov	r0, r5
    2b3a:	f006 f822 	bl	8b82 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    2b3e:	b108      	cbz	r0, 2b44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    2b40:	200c      	movs	r0, #12
    2b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b44:	4628      	mov	r0, r5
    2b46:	f7fe fead 	bl	18a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    2b4a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    2b4e:	f242 7010 	movw	r0, #10000	; 0x2710
    2b52:	4346      	muls	r6, r0
    2b54:	78e1      	ldrb	r1, [r4, #3]
    2b56:	4628      	mov	r0, r5
    2b58:	f006 f880 	bl	8c5c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    2b5c:	4628      	mov	r0, r5
    2b5e:	f006 f891 	bl	8c84 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    2b62:	b1a8      	cbz	r0, 2b90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    2b64:	2100      	movs	r1, #0
    2b66:	4668      	mov	r0, sp
    2b68:	f7fd ff4a 	bl	a00 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    2b6c:	0004      	movs	r4, r0
    2b6e:	d019      	beq.n	2ba4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    2b70:	2100      	movs	r1, #0
    2b72:	f7fe fb81 	bl	1278 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    2b76:	f8bd 0000 	ldrh.w	r0, [sp]
    2b7a:	8020      	strh	r0, [r4, #0]
    2b7c:	4621      	mov	r1, r4
    2b7e:	4628      	mov	r0, r5
    2b80:	f006 f8a8 	bl	8cd4 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    2b84:	4628      	mov	r0, r5
    2b86:	f006 f885 	bl	8c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    2b8a:	b168      	cbz	r0, 2ba8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    2b8c:	2001      	movs	r0, #1
    2b8e:	e00e      	b.n	2bae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    2b90:	4632      	mov	r2, r6
    2b92:	2100      	movs	r1, #0
    2b94:	4628      	mov	r0, r5
    2b96:	f7ff fd0f 	bl	25b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d0d1      	beq.n	2b42 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    2b9e:	f241 7168 	movw	r1, #5992	; 0x1768
    2ba2:	e012      	b.n	2bca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    2ba4:	200d      	movs	r0, #13
    2ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ba8:	4628      	mov	r0, r5
    2baa:	f006 f891 	bl	8cd0 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    2bae:	4601      	mov	r1, r0
    2bb0:	4620      	mov	r0, r4
    2bb2:	f7ff fedf 	bl	2974 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    2bb6:	2800      	cmp	r0, #0
    2bb8:	d1f5      	bne.n	2ba6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    2bba:	4632      	mov	r2, r6
    2bbc:	4621      	mov	r1, r4
    2bbe:	4628      	mov	r0, r5
    2bc0:	f7ff fcfa 	bl	25b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    2bc4:	b120      	cbz	r0, 2bd0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    2bc6:	f241 718b 	movw	r1, #6027	; 0x178b
    2bca:	2039      	movs	r0, #57	; 0x39
    2bcc:	f7fd fbbe 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bd0:	4804      	ldr	r0, [pc, #16]	; (2be4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    2bd2:	6843      	ldr	r3, [r0, #4]
    2bd4:	b123      	cbz	r3, 2be0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    2bd6:	2200      	movs	r2, #0
    2bd8:	f504 7199 	add.w	r1, r4, #306	; 0x132
    2bdc:	4620      	mov	r0, r4
    2bde:	4798      	blx	r3
    2be0:	2000      	movs	r0, #0
    2be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2be4:	200000c4 	.word	0x200000c4
    2be8:	b51c      	push	{r2, r3, r4, lr}
    2bea:	490c      	ldr	r1, [pc, #48]	; (2c1c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x138>)
    2bec:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    2bf0:	e9cd 0100 	strd	r0, r1, [sp]
    2bf4:	e00a      	b.n	2c0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    2bf6:	9c00      	ldr	r4, [sp, #0]
    2bf8:	4620      	mov	r0, r4
    2bfa:	f006 fa09 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    2bfe:	b128      	cbz	r0, 2c0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    2c00:	4620      	mov	r0, r4
    2c02:	f006 f876 	bl	8cf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    2c06:	b108      	cbz	r0, 2c0c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x128>
    2c08:	2001      	movs	r0, #1
    2c0a:	bd1c      	pop	{r2, r3, r4, pc}
    2c0c:	4668      	mov	r0, sp
    2c0e:	f7fd fed5 	bl	9bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    2c12:	2800      	cmp	r0, #0
    2c14:	d0ef      	beq.n	2bf6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x112>
    2c16:	2000      	movs	r0, #0
    2c18:	bd1c      	pop	{r2, r3, r4, pc}
    2c1a:	0000      	.short	0x0000
    2c1c:	00002c20 	.word	0x00002c20
    2c20:	00000000 	.word	0x00000000
    2c24:	00010000 	.word	0x00010000
    2c28:	00000000 	.word	0x00000000
    2c2c:	00010000 	.word	0x00010000
    2c30:	0d10770d 	.word	0x0d10770d
    2c34:	10770059 	.word	0x10770059
    2c38:	00000000 	.word	0x00000000
    2c3c:	00010000 	.word	0x00010000
    2c40:	00000000 	.word	0x00000000
    2c44:	00010000 	.word	0x00010000

00002c48 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    2c48:	b510      	push	{r4, lr}
    2c4a:	f7fe fc97 	bl	157c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    2c4e:	4c05      	ldr	r4, [pc, #20]	; (2c64 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    2c50:	6860      	ldr	r0, [r4, #4]
    2c52:	f006 ff89 	bl	9b68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    2c56:	f006 fe2a 	bl	98ae <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    2c5a:	f7fe fd43 	bl	16e4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    2c5e:	2001      	movs	r0, #1
    2c60:	7020      	strb	r0, [r4, #0]
    2c62:	bd10      	pop	{r4, pc}
    2c64:	200000d4 	.word	0x200000d4

00002c68 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    2c68:	4801      	ldr	r0, [pc, #4]	; (2c70 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    2c6a:	7800      	ldrb	r0, [r0, #0]
    2c6c:	4770      	bx	lr
    2c6e:	0000      	.short	0x0000
    2c70:	200000d4 	.word	0x200000d4

00002c74 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    2c74:	b510      	push	{r4, lr}
    2c76:	4c06      	ldr	r4, [pc, #24]	; (2c90 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    2c78:	68a0      	ldr	r0, [r4, #8]
    2c7a:	f006 ff75 	bl	9b68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    2c7e:	68e0      	ldr	r0, [r4, #12]
    2c80:	f006 ff72 	bl	9b68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    2c84:	f006 fe15 	bl	98b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    2c88:	2000      	movs	r0, #0
    2c8a:	7020      	strb	r0, [r4, #0]
    2c8c:	bd10      	pop	{r4, pc}
    2c8e:	0000      	.short	0x0000
    2c90:	200000d4 	.word	0x200000d4

00002c94 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    2c94:	b510      	push	{r4, lr}
    2c96:	4905      	ldr	r1, [pc, #20]	; (2cac <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    2c98:	4805      	ldr	r0, [pc, #20]	; (2cb0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    2c9a:	f006 ff58 	bl	9b4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    2c9e:	4804      	ldr	r0, [pc, #16]	; (2cb0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    2ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ca4:	4903      	ldr	r1, [pc, #12]	; (2cb4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    2ca6:	1d00      	adds	r0, r0, #4
    2ca8:	f006 bf51 	b.w	9b4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x29c>
    2cac:	200000e4 	.word	0x200000e4
    2cb0:	200000d8 	.word	0x200000d8
    2cb4:	200000ec 	.word	0x200000ec

00002cb8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    2cb8:	4801      	ldr	r0, [pc, #4]	; (2cc0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    2cba:	7840      	ldrb	r0, [r0, #1]
    2cbc:	4770      	bx	lr
    2cbe:	0000      	.short	0x0000
    2cc0:	200000d4 	.word	0x200000d4
    2cc4:	b510      	push	{r4, lr}
    2cc6:	f7fe ff0f 	bl	1ae8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    2cca:	f7ff fd25 	bl	2718 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    2cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2cd2:	4801      	ldr	r0, [pc, #4]	; (2cd8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    2cd4:	f7fe beee 	b.w	1ab4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    2cd8:	20000ff8 	.word	0x20000ff8

00002cdc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    2cdc:	4901      	ldr	r1, [pc, #4]	; (2ce4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    2cde:	e9d1 0100 	ldrd	r0, r1, [r1]
    2ce2:	4770      	bx	lr
    2ce4:	20000020 	.word	0x20000020

00002ce8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    2ce8:	4806      	ldr	r0, [pc, #24]	; (2d04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    2cea:	8801      	ldrh	r1, [r0, #0]
    2cec:	7900      	ldrb	r0, [r0, #4]
    2cee:	0602      	lsls	r2, r0, #24
    2cf0:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    2cf4:	f000 0001 	and.w	r0, r0, #1
    2cf8:	1800      	adds	r0, r0, r0
    2cfa:	b2c0      	uxtb	r0, r0
    2cfc:	f040 0001 	orr.w	r0, r0, #1
    2d00:	4770      	bx	lr
    2d02:	0000      	.short	0x0000
    2d04:	20000020 	.word	0x20000020

00002d08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    2d08:	b510      	push	{r4, lr}
    2d0a:	f004 fad3 	bl	72b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    2d0e:	2200      	movs	r2, #0
    2d10:	4b08      	ldr	r3, [pc, #32]	; (2d34 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    2d12:	4611      	mov	r1, r2
    2d14:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    2d18:	4284      	cmp	r4, r0
    2d1a:	d303      	bcc.n	2d24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    2d1c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2d20:	7882      	ldrb	r2, [r0, #2]
    2d22:	e003      	b.n	2d2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    2d24:	1c49      	adds	r1, r1, #1
    2d26:	b2c9      	uxtb	r1, r1
    2d28:	290c      	cmp	r1, #12
    2d2a:	d3f3      	bcc.n	2d14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    2d2c:	4802      	ldr	r0, [pc, #8]	; (2d38 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    2d2e:	7002      	strb	r2, [r0, #0]
    2d30:	bd10      	pop	{r4, pc}
    2d32:	0000      	.short	0x0000
    2d34:	00009b7e 	.word	0x00009b7e
    2d38:	20000187 	.word	0x20000187

00002d3c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    2d3c:	b570      	push	{r4, r5, r6, lr}
    2d3e:	4605      	mov	r5, r0
    2d40:	4616      	mov	r6, r2
    2d42:	460c      	mov	r4, r1
    2d44:	2002      	movs	r0, #2
    2d46:	f000 f8bd 	bl	2ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    2d4a:	4906      	ldr	r1, [pc, #24]	; (2d64 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    2d4c:	2001      	movs	r0, #1
    2d4e:	1ef6      	subs	r6, r6, #3
    2d50:	7008      	strb	r0, [r1, #0]
    2d52:	4805      	ldr	r0, [pc, #20]	; (2d68 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    2d54:	6006      	str	r6, [r0, #0]
    2d56:	4804      	ldr	r0, [pc, #16]	; (2d68 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    2d58:	3808      	subs	r0, #8
    2d5a:	6005      	str	r5, [r0, #0]
    2d5c:	1f00      	subs	r0, r0, #4
    2d5e:	6004      	str	r4, [r0, #0]
    2d60:	bd70      	pop	{r4, r5, r6, pc}
    2d62:	0000      	.short	0x0000
    2d64:	20000188 	.word	0x20000188
    2d68:	4000f510 	.word	0x4000f510

00002d6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    2d6c:	b510      	push	{r4, lr}
    2d6e:	4c0c      	ldr	r4, [pc, #48]	; (2da0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    2d70:	7820      	ldrb	r0, [r4, #0]
    2d72:	b180      	cbz	r0, 2d96 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    2d74:	490b      	ldr	r1, [pc, #44]	; (2da4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    2d76:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2d7a:	6008      	str	r0, [r1, #0]
    2d7c:	f000 f86a 	bl	2e54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    2d80:	2100      	movs	r1, #0
    2d82:	b120      	cbz	r0, 2d8e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    2d84:	2001      	movs	r0, #1
    2d86:	7060      	strb	r0, [r4, #1]
    2d88:	4807      	ldr	r0, [pc, #28]	; (2da8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    2d8a:	6800      	ldr	r0, [r0, #0]
    2d8c:	e001      	b.n	2d92 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    2d8e:	7061      	strb	r1, [r4, #1]
    2d90:	2010      	movs	r0, #16
    2d92:	70a0      	strb	r0, [r4, #2]
    2d94:	7021      	strb	r1, [r4, #0]
    2d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d9a:	2000      	movs	r0, #0
    2d9c:	f000 b892 	b.w	2ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    2da0:	20000188 	.word	0x20000188
    2da4:	4001f508 	.word	0x4001f508
    2da8:	4000f400 	.word	0x4000f400

00002dac <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    2dac:	b510      	push	{r4, lr}
    2dae:	2002      	movs	r0, #2
    2db0:	f000 f888 	bl	2ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    2db4:	4904      	ldr	r1, [pc, #16]	; (2dc8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    2db6:	2001      	movs	r0, #1
    2db8:	7008      	strb	r0, [r1, #0]
    2dba:	f000 f859 	bl	2e70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    2dbe:	4903      	ldr	r1, [pc, #12]	; (2dcc <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    2dc0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2dc4:	6008      	str	r0, [r1, #0]
    2dc6:	bd10      	pop	{r4, pc}
    2dc8:	20000188 	.word	0x20000188
    2dcc:	4001f504 	.word	0x4001f504

00002dd0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    2dd0:	4803      	ldr	r0, [pc, #12]	; (2de0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    2dd2:	2100      	movs	r1, #0
    2dd4:	7001      	strb	r1, [r0, #0]
    2dd6:	7041      	strb	r1, [r0, #1]
    2dd8:	2110      	movs	r1, #16
    2dda:	7081      	strb	r1, [r0, #2]
    2ddc:	4770      	bx	lr
    2dde:	0000      	.short	0x0000
    2de0:	20000188 	.word	0x20000188

00002de4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    2de4:	4807      	ldr	r0, [pc, #28]	; (2e04 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    2de6:	b510      	push	{r4, lr}
    2de8:	7801      	ldrb	r1, [r0, #0]
    2dea:	b141      	cbz	r1, 2dfe <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    2dec:	f000 f832 	bl	2e54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    2df0:	b118      	cbz	r0, 2dfa <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    2df2:	4805      	ldr	r0, [pc, #20]	; (2e08 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    2df4:	6800      	ldr	r0, [r0, #0]
    2df6:	b2c0      	uxtb	r0, r0
    2df8:	bd10      	pop	{r4, pc}
    2dfa:	2010      	movs	r0, #16
    2dfc:	bd10      	pop	{r4, pc}
    2dfe:	7880      	ldrb	r0, [r0, #2]
    2e00:	bd10      	pop	{r4, pc}
    2e02:	0000      	.short	0x0000
    2e04:	20000188 	.word	0x20000188
    2e08:	4000f400 	.word	0x4000f400

00002e0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    2e0c:	4808      	ldr	r0, [pc, #32]	; (2e30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    2e0e:	b510      	push	{r4, lr}
    2e10:	7801      	ldrb	r1, [r0, #0]
    2e12:	b159      	cbz	r1, 2e2c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    2e14:	4807      	ldr	r0, [pc, #28]	; (2e34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    2e16:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    2e1a:	b128      	cbz	r0, 2e28 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    2e1c:	f000 f80c 	bl	2e38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    2e20:	2800      	cmp	r0, #0
    2e22:	d000      	beq.n	2e26 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    2e24:	2001      	movs	r0, #1
    2e26:	bd10      	pop	{r4, pc}
    2e28:	2002      	movs	r0, #2
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	7840      	ldrb	r0, [r0, #1]
    2e2e:	bd10      	pop	{r4, pc}
    2e30:	20000188 	.word	0x20000188
    2e34:	4000f000 	.word	0x4000f000
    2e38:	4805      	ldr	r0, [pc, #20]	; (2e50 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    2e3a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    2e3e:	b111      	cbz	r1, 2e46 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    2e40:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    2e44:	b108      	cbz	r0, 2e4a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    2e46:	2000      	movs	r0, #0
    2e48:	4770      	bx	lr
    2e4a:	2001      	movs	r0, #1
    2e4c:	4770      	bx	lr
    2e4e:	0000      	.short	0x0000
    2e50:	4000f000 	.word	0x4000f000
    2e54:	4805      	ldr	r0, [pc, #20]	; (2e6c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    2e56:	b510      	push	{r4, lr}
    2e58:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    2e5c:	b120      	cbz	r0, 2e68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    2e5e:	f7ff ffeb 	bl	2e38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    2e62:	b108      	cbz	r0, 2e68 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    2e64:	2001      	movs	r0, #1
    2e66:	bd10      	pop	{r4, pc}
    2e68:	2000      	movs	r0, #0
    2e6a:	bd10      	pop	{r4, pc}
    2e6c:	4000f000 	.word	0x4000f000
    2e70:	4804      	ldr	r0, [pc, #16]	; (2e84 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    2e72:	2100      	movs	r1, #0
    2e74:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    2e78:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    2e7c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    2e80:	4770      	bx	lr
    2e82:	0000      	.short	0x0000
    2e84:	4000f000 	.word	0x4000f000

00002e88 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    2e88:	b570      	push	{r4, r5, r6, lr}
    2e8a:	4d05      	ldr	r5, [pc, #20]	; (2ea0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    2e8c:	2400      	movs	r4, #0
    2e8e:	7828      	ldrb	r0, [r5, #0]
    2e90:	b110      	cbz	r0, 2e98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    2e92:	f000 f80f 	bl	2eb4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    2e96:	702c      	strb	r4, [r5, #0]
    2e98:	706c      	strb	r4, [r5, #1]
    2e9a:	70ac      	strb	r4, [r5, #2]
    2e9c:	bd70      	pop	{r4, r5, r6, pc}
    2e9e:	0000      	.short	0x0000
    2ea0:	2000018b 	.word	0x2000018b

00002ea4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    2ea4:	4802      	ldr	r0, [pc, #8]	; (2eb0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    2ea6:	2100      	movs	r1, #0
    2ea8:	7001      	strb	r1, [r0, #0]
    2eaa:	7041      	strb	r1, [r0, #1]
    2eac:	7081      	strb	r1, [r0, #2]
    2eae:	4770      	bx	lr
    2eb0:	2000018b 	.word	0x2000018b
    2eb4:	4902      	ldr	r1, [pc, #8]	; (2ec0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    2eb6:	4801      	ldr	r0, [pc, #4]	; (2ebc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    2eb8:	6008      	str	r0, [r1, #0]
    2eba:	4770      	bx	lr
    2ebc:	02020000 	.word	0x02020000
    2ec0:	4001f508 	.word	0x4001f508

00002ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    2ec4:	b510      	push	{r4, lr}
    2ec6:	4604      	mov	r4, r0
    2ec8:	f000 f820 	bl	2f0c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    2ecc:	2c00      	cmp	r4, #0
    2ece:	d00e      	beq.n	2eee <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    2ed0:	4a0b      	ldr	r2, [pc, #44]	; (2f00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    2ed2:	480b      	ldr	r0, [pc, #44]	; (2f00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    2ed4:	490b      	ldr	r1, [pc, #44]	; (2f04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    2ed6:	3214      	adds	r2, #20
    2ed8:	2c01      	cmp	r4, #1
    2eda:	d005      	beq.n	2ee8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    2edc:	2c02      	cmp	r4, #2
    2ede:	d007      	beq.n	2ef0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    2ee0:	2182      	movs	r1, #130	; 0x82
    2ee2:	203d      	movs	r0, #61	; 0x3d
    2ee4:	f7fd fa32 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ee8:	2302      	movs	r3, #2
    2eea:	6003      	str	r3, [r0, #0]
    2eec:	6011      	str	r1, [r2, #0]
    2eee:	bd10      	pop	{r4, pc}
    2ef0:	2303      	movs	r3, #3
    2ef2:	6003      	str	r3, [r0, #0]
    2ef4:	6011      	str	r1, [r2, #0]
    2ef6:	4904      	ldr	r1, [pc, #16]	; (2f08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    2ef8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2efc:	6008      	str	r0, [r1, #0]
    2efe:	bd10      	pop	{r4, pc}
    2f00:	4000f500 	.word	0x4000f500
    2f04:	200011fc 	.word	0x200011fc
    2f08:	4001f504 	.word	0x4001f504
    2f0c:	4805      	ldr	r0, [pc, #20]	; (2f24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    2f0e:	b510      	push	{r4, lr}
    2f10:	2100      	movs	r1, #0
    2f12:	6001      	str	r1, [r0, #0]
    2f14:	6001      	str	r1, [r0, #0]
    2f16:	f7ff ffb7 	bl	2e88 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2f1a:	4903      	ldr	r1, [pc, #12]	; (2f28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    2f1c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    2f20:	6008      	str	r0, [r1, #0]
    2f22:	bd10      	pop	{r4, pc}
    2f24:	4000f500 	.word	0x4000f500
    2f28:	4001f508 	.word	0x4001f508

00002f2c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    2f2c:	4805      	ldr	r0, [pc, #20]	; (2f44 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    2f2e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    2f32:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    2f36:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2f3a:	2100      	movs	r1, #0
    2f3c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    2f40:	4770      	bx	lr
    2f42:	0000      	.short	0x0000
    2f44:	40001000 	.word	0x40001000

00002f48 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    2f48:	4904      	ldr	r1, [pc, #16]	; (2f5c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    2f4a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    2f4e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    2f52:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2f56:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    2f5a:	4770      	bx	lr
    2f5c:	40001000 	.word	0x40001000

00002f60 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    2f60:	4902      	ldr	r1, [pc, #8]	; (2f6c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    2f62:	5c08      	ldrb	r0, [r1, r0]
    2f64:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    2f68:	4770      	bx	lr
    2f6a:	0000      	.short	0x0000
    2f6c:	00003b56 	.word	0x00003b56

00002f70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    2f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f72:	4c24      	ldr	r4, [pc, #144]	; (3004 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    2f74:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2f78:	f010 0f10 	tst.w	r0, #16
    2f7c:	d001      	beq.n	2f82 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    2f7e:	2701      	movs	r7, #1
    2f80:	e000      	b.n	2f84 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    2f82:	2700      	movs	r7, #0
    2f84:	2010      	movs	r0, #16
    2f86:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2f8a:	2002      	movs	r0, #2
    2f8c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    2f90:	481d      	ldr	r0, [pc, #116]	; (3008 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    2f92:	2500      	movs	r5, #0
    2f94:	491d      	ldr	r1, [pc, #116]	; (300c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    2f96:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    2f9a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    2f9e:	6008      	str	r0, [r1, #0]
    2fa0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    2fa4:	f44f 7688 	mov.w	r6, #272	; 0x110
    2fa8:	f010 0fff 	tst.w	r0, #255	; 0xff
    2fac:	d019      	beq.n	2fe2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    2fae:	20ff      	movs	r0, #255	; 0xff
    2fb0:	f88d 0000 	strb.w	r0, [sp]
    2fb4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    2fb8:	2001      	movs	r0, #1
    2fba:	6120      	str	r0, [r4, #16]
    2fbc:	e005      	b.n	2fca <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    2fbe:	bf00      	nop
    2fc0:	f89d 0000 	ldrb.w	r0, [sp]
    2fc4:	1e40      	subs	r0, r0, #1
    2fc6:	f88d 0000 	strb.w	r0, [sp]
    2fca:	f89d 0000 	ldrb.w	r0, [sp]
    2fce:	b128      	cbz	r0, 2fdc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    2fd0:	4631      	mov	r1, r6
    2fd2:	4620      	mov	r0, r4
    2fd4:	f006 fe32 	bl	9c3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    2fd8:	2800      	cmp	r0, #0
    2fda:	d0f1      	beq.n	2fc0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    2fdc:	f89d 0000 	ldrb.w	r0, [sp]
    2fe0:	b158      	cbz	r0, 2ffa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    2fe2:	f000 fbcd 	bl	3780 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    2fe6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    2fea:	f000 fd35 	bl	3a58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    2fee:	2f00      	cmp	r7, #0
    2ff0:	d002      	beq.n	2ff8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    2ff2:	2010      	movs	r0, #16
    2ff4:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    2ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ffa:	f640 0194 	movw	r1, #2196	; 0x894
    2ffe:	203e      	movs	r0, #62	; 0x3e
    3000:	f7fd f9a4 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3004:	40001000 	.word	0x40001000
    3008:	20000dc8 	.word	0x20000dc8
    300c:	4001f508 	.word	0x4001f508

00003010 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    3010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3014:	4d18      	ldr	r5, [pc, #96]	; (3078 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    3016:	4607      	mov	r7, r0
    3018:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    301c:	07c2      	lsls	r2, r0, #31
    301e:	d00f      	beq.n	3040 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    3020:	4c16      	ldr	r4, [pc, #88]	; (307c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    3022:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    3026:	f042 0201 	orr.w	r2, r2, #1
    302a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    302e:	f040 0002 	orr.w	r0, r0, #2
    3032:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    3036:	2601      	movs	r6, #1
    3038:	b13f      	cbz	r7, 304a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    303a:	2f01      	cmp	r7, #1
    303c:	d00b      	beq.n	3056 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    303e:	e010      	b.n	3062 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3040:	f240 716f 	movw	r1, #1903	; 0x76f
    3044:	203e      	movs	r0, #62	; 0x3e
    3046:	f7fd f981 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    304a:	4608      	mov	r0, r1
    304c:	f000 fd5e 	bl	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    3050:	726e      	strb	r6, [r5, #9]
    3052:	6026      	str	r6, [r4, #0]
    3054:	e005      	b.n	3062 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    3056:	4608      	mov	r0, r1
    3058:	f000 fd3e 	bl	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    305c:	2002      	movs	r0, #2
    305e:	7268      	strb	r0, [r5, #9]
    3060:	6066      	str	r6, [r4, #4]
    3062:	4807      	ldr	r0, [pc, #28]	; (3080 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3064:	64c6      	str	r6, [r0, #76]	; 0x4c
    3066:	4806      	ldr	r0, [pc, #24]	; (3080 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    3068:	300c      	adds	r0, #12
    306a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    306e:	4638      	mov	r0, r7
    3070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3074:	f000 bcc2 	b.w	39fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    3078:	20000dc8 	.word	0x20000dc8
    307c:	40001000 	.word	0x40001000
    3080:	40008000 	.word	0x40008000

00003084 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    3084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3088:	4c2c      	ldr	r4, [pc, #176]	; (313c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    308a:	0006      	movs	r6, r0
    308c:	4d2c      	ldr	r5, [pc, #176]	; (3140 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    308e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    3092:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 3144 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    3096:	f040 0002 	orr.w	r0, r0, #2
    309a:	4689      	mov	r9, r1
    309c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    30a0:	f04f 0700 	mov.w	r7, #0
    30a4:	d002      	beq.n	30ac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    30a6:	2e01      	cmp	r6, #1
    30a8:	d020      	beq.n	30ec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    30aa:	e036      	b.n	311a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    30ac:	4608      	mov	r0, r1
    30ae:	f000 fd2d 	bl	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    30b2:	2001      	movs	r0, #1
    30b4:	7260      	strb	r0, [r4, #9]
    30b6:	79e0      	ldrb	r0, [r4, #7]
    30b8:	2801      	cmp	r0, #1
    30ba:	d105      	bne.n	30c8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    30bc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    30c0:	f040 0008 	orr.w	r0, r0, #8
    30c4:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    30c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    30ca:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    30ce:	6260      	str	r0, [r4, #36]	; 0x24
    30d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    30d4:	f8c8 0000 	str.w	r0, [r8]
    30d8:	491b      	ldr	r1, [pc, #108]	; (3148 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    30da:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    30de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    30e2:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    30e6:	fbb0 f7f1 	udiv	r7, r0, r1
    30ea:	e016      	b.n	311a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    30ec:	4608      	mov	r0, r1
    30ee:	f000 fcf3 	bl	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    30f2:	2002      	movs	r0, #2
    30f4:	7260      	strb	r0, [r4, #9]
    30f6:	79e0      	ldrb	r0, [r4, #7]
    30f8:	2801      	cmp	r0, #1
    30fa:	d105      	bne.n	3108 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    30fc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    3100:	f040 0004 	orr.w	r0, r0, #4
    3104:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3108:	6a60      	ldr	r0, [r4, #36]	; 0x24
    310a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    310e:	6260      	str	r0, [r4, #36]	; 0x24
    3110:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3114:	f8c8 0000 	str.w	r0, [r8]
    3118:	2729      	movs	r7, #41	; 0x29
    311a:	f000 fb9d 	bl	3858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    311e:	f006 fdd5 	bl	9ccc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    3122:	b120      	cbz	r0, 312e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    3124:	f7ff ff24 	bl	2f70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3128:	2000      	movs	r0, #0
    312a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    312e:	2100      	movs	r1, #0
    3130:	4630      	mov	r0, r6
    3132:	f000 fc63 	bl	39fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    3136:	4638      	mov	r0, r7
    3138:	e7f7      	b.n	312a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    313a:	0000      	.short	0x0000
    313c:	20000dc8 	.word	0x20000dc8
    3140:	40001000 	.word	0x40001000
    3144:	4001f504 	.word	0x4001f504
    3148:	00003b50 	.word	0x00003b50

0000314c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    314c:	b510      	push	{r4, lr}
    314e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    3150:	4901      	ldr	r1, [pc, #4]	; (3158 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    3152:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    3156:	bd10      	pop	{r4, pc}
    3158:	20000db8 	.word	0x20000db8

0000315c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	4c0f      	ldr	r4, [pc, #60]	; (319c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    3160:	4603      	mov	r3, r0
    3162:	2002      	movs	r0, #2
    3164:	7320      	strb	r0, [r4, #12]
    3166:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    316a:	2096      	movs	r0, #150	; 0x96
    316c:	f894 1020 	ldrb.w	r1, [r4, #32]
    3170:	7d22      	ldrb	r2, [r4, #20]
    3172:	2d01      	cmp	r5, #1
    3174:	d00e      	beq.n	3194 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    3176:	f000 fd27 	bl	3bc8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    317a:	6120      	str	r0, [r4, #16]
    317c:	4808      	ldr	r0, [pc, #32]	; (31a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    317e:	2100      	movs	r1, #0
    3180:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3184:	6921      	ldr	r1, [r4, #16]
    3186:	69e0      	ldr	r0, [r4, #28]
    3188:	4408      	add	r0, r1
    318a:	4905      	ldr	r1, [pc, #20]	; (31a0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    318c:	1d09      	adds	r1, r1, #4
    318e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3192:	bd70      	pop	{r4, r5, r6, pc}
    3194:	f000 fd36 	bl	3c04 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    3198:	e7ef      	b.n	317a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    319a:	0000      	.short	0x0000
    319c:	20000dc8 	.word	0x20000dc8
    31a0:	40008000 	.word	0x40008000

000031a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    31a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31a8:	2234      	movs	r2, #52	; 0x34
    31aa:	2100      	movs	r1, #0
    31ac:	4813      	ldr	r0, [pc, #76]	; (31fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    31ae:	f006 ffab 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    31b2:	f000 fc51 	bl	3a58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    31b6:	f006 fe68 	bl	9e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    31ba:	4d11      	ldr	r5, [pc, #68]	; (3200 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    31bc:	4e10      	ldr	r6, [pc, #64]	; (3200 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    31be:	2400      	movs	r4, #0
    31c0:	4f0f      	ldr	r7, [pc, #60]	; (3200 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    31c2:	3508      	adds	r5, #8
    31c4:	3610      	adds	r6, #16
    31c6:	b928      	cbnz	r0, 31d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    31c8:	f006 fe76 	bl	9eb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    31cc:	b910      	cbnz	r0, 31d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    31ce:	f006 fe7d 	bl	9ecc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    31d2:	b108      	cbz	r0, 31d8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    31d4:	2224      	movs	r2, #36	; 0x24
    31d6:	e006      	b.n	31e6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    31d8:	f006 feb8 	bl	9f4c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31dc:	b910      	cbnz	r0, 31e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    31de:	f006 feab 	bl	9f38 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    31e2:	b140      	cbz	r0, 31f6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    31e4:	2240      	movs	r2, #64	; 0x40
    31e6:	21ff      	movs	r1, #255	; 0xff
    31e8:	4638      	mov	r0, r7
    31ea:	f006 ff8d 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    31ee:	602c      	str	r4, [r5, #0]
    31f0:	6034      	str	r4, [r6, #0]
    31f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31f6:	2238      	movs	r2, #56	; 0x38
    31f8:	e7f5      	b.n	31e6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    31fa:	0000      	.short	0x0000
    31fc:	20000dc8 	.word	0x20000dc8
    3200:	40000e00 	.word	0x40000e00

00003204 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    3204:	b510      	push	{r4, lr}
    3206:	f000 fbdb 	bl	39c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    320a:	f7ff feb1 	bl	2f70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    320e:	f004 facd 	bl	77ac <mpsl_fem_disable>
    3212:	b130      	cbz	r0, 3222 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    3214:	1c40      	adds	r0, r0, #1
    3216:	d004      	beq.n	3222 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    3218:	f240 5165 	movw	r1, #1381	; 0x565
    321c:	203e      	movs	r0, #62	; 0x3e
    321e:	f7fd f895 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3222:	480f      	ldr	r0, [pc, #60]	; (3260 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    3224:	4a0f      	ldr	r2, [pc, #60]	; (3264 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    3226:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3228:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    322c:	6011      	str	r1, [r2, #0]
    322e:	2400      	movs	r4, #0
    3230:	6244      	str	r4, [r0, #36]	; 0x24
    3232:	7304      	strb	r4, [r0, #12]
    3234:	61c4      	str	r4, [r0, #28]
    3236:	6184      	str	r4, [r0, #24]
    3238:	f000 fbc2 	bl	39c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    323c:	480a      	ldr	r0, [pc, #40]	; (3268 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    323e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3242:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3246:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    324a:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    324e:	2001      	movs	r0, #1
    3250:	f006 fce3 	bl	9c1a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    3254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3258:	2001      	movs	r0, #1
    325a:	f006 bcd1 	b.w	9c00 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    325e:	0000      	.short	0x0000
    3260:	20000dc8 	.word	0x20000dc8
    3264:	4001f508 	.word	0x4001f508
    3268:	40008000 	.word	0x40008000

0000326c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	2001      	movs	r0, #1
    3270:	f006 fcd3 	bl	9c1a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    3274:	4c37      	ldr	r4, [pc, #220]	; (3354 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    3276:	2000      	movs	r0, #0
    3278:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    327c:	2001      	movs	r0, #1
    327e:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    3282:	f006 fe39 	bl	9ef8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3286:	4d34      	ldr	r5, [pc, #208]	; (3358 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    3288:	b118      	cbz	r0, 3292 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    328a:	6828      	ldr	r0, [r5, #0]
    328c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    3290:	6028      	str	r0, [r5, #0]
    3292:	f006 fe25 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3296:	b128      	cbz	r0, 32a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    3298:	6828      	ldr	r0, [r5, #0]
    329a:	4930      	ldr	r1, [pc, #192]	; (335c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    329c:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    32a0:	4308      	orrs	r0, r1
    32a2:	6028      	str	r0, [r5, #0]
    32a4:	f006 fe38 	bl	9f18 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    32a8:	b138      	cbz	r0, 32ba <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    32aa:	482b      	ldr	r0, [pc, #172]	; (3358 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    32ac:	1d00      	adds	r0, r0, #4
    32ae:	6801      	ldr	r1, [r0, #0]
    32b0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    32b4:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    32b8:	6001      	str	r1, [r0, #0]
    32ba:	4927      	ldr	r1, [pc, #156]	; (3358 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    32bc:	4828      	ldr	r0, [pc, #160]	; (3360 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    32be:	313c      	adds	r1, #60	; 0x3c
    32c0:	6008      	str	r0, [r1, #0]
    32c2:	f004 faad 	bl	7820 <mpsl_fem_device_config_254_apply_get>
    32c6:	b140      	cbz	r0, 32da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    32c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    32cc:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    32d0:	1c41      	adds	r1, r0, #1
    32d2:	d002      	beq.n	32da <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    32d4:	4920      	ldr	r1, [pc, #128]	; (3358 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    32d6:	3110      	adds	r1, #16
    32d8:	6008      	str	r0, [r1, #0]
    32da:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    32de:	6e00      	ldr	r0, [r0, #96]	; 0x60
    32e0:	1c41      	adds	r1, r0, #1
    32e2:	d004      	beq.n	32ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    32e4:	491f      	ldr	r1, [pc, #124]	; (3364 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    32e6:	680a      	ldr	r2, [r1, #0]
    32e8:	f360 4217 	bfi	r2, r0, #16, #8
    32ec:	600a      	str	r2, [r1, #0]
    32ee:	f240 1103 	movw	r1, #259	; 0x103
    32f2:	f240 605b 	movw	r0, #1627	; 0x65b
    32f6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    32fa:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    32fe:	2001      	movs	r0, #1
    3300:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    3304:	f000 f842 	bl	338c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3308:	f240 2001 	movw	r0, #513	; 0x201
    330c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    3310:	2002      	movs	r0, #2
    3312:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3316:	4914      	ldr	r1, [pc, #80]	; (3368 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    3318:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    331c:	6008      	str	r0, [r1, #0]
    331e:	4913      	ldr	r1, [pc, #76]	; (336c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    3320:	2000      	movs	r0, #0
    3322:	8608      	strh	r0, [r1, #48]	; 0x30
    3324:	3110      	adds	r1, #16
    3326:	61c8      	str	r0, [r1, #28]
    3328:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    332c:	2001      	movs	r0, #1
    332e:	f006 fc67 	bl	9c00 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3332:	2010      	movs	r0, #16
    3334:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3338:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    333c:	2002      	movs	r0, #2
    333e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    3342:	480b      	ldr	r0, [pc, #44]	; (3370 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    3344:	6800      	ldr	r0, [r0, #0]
    3346:	2800      	cmp	r0, #0
    3348:	d002      	beq.n	3350 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    334a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    334e:	4700      	bx	r0
    3350:	bd70      	pop	{r4, r5, r6, pc}
    3352:	0000      	.short	0x0000
    3354:	40001000 	.word	0x40001000
    3358:	4000173c 	.word	0x4000173c
    335c:	80000096 	.word	0x80000096
    3360:	8900002c 	.word	0x8900002c
    3364:	4000158c 	.word	0x4000158c
    3368:	4001f504 	.word	0x4001f504
    336c:	20000db8 	.word	0x20000db8
    3370:	200000f4 	.word	0x200000f4

00003374 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    3374:	4901      	ldr	r1, [pc, #4]	; (337c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    3376:	7548      	strb	r0, [r1, #21]
    3378:	4770      	bx	lr
    337a:	0000      	.short	0x0000
    337c:	20000dc8 	.word	0x20000dc8

00003380 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    3380:	4901      	ldr	r1, [pc, #4]	; (3388 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    3382:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3386:	4770      	bx	lr
    3388:	00003ba4 	.word	0x00003ba4

0000338c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    338c:	4908      	ldr	r1, [pc, #32]	; (33b0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    338e:	b510      	push	{r4, lr}
    3390:	7508      	strb	r0, [r1, #20]
    3392:	4908      	ldr	r1, [pc, #32]	; (33b4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    3394:	2801      	cmp	r0, #1
    3396:	d006      	beq.n	33a6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    3398:	2802      	cmp	r0, #2
    339a:	d006      	beq.n	33aa <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    339c:	f640 516c 	movw	r1, #3436	; 0xd6c
    33a0:	203e      	movs	r0, #62	; 0x3e
    33a2:	f7fc ffd3 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    33a6:	2003      	movs	r0, #3
    33a8:	e000      	b.n	33ac <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    33aa:	2004      	movs	r0, #4
    33ac:	6008      	str	r0, [r1, #0]
    33ae:	bd10      	pop	{r4, pc}
    33b0:	20000dc8 	.word	0x20000dc8
    33b4:	40001510 	.word	0x40001510

000033b8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    33b8:	4905      	ldr	r1, [pc, #20]	; (33d0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    33ba:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    33be:	4805      	ldr	r0, [pc, #20]	; (33d4 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    33c0:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    33c4:	f041 0101 	orr.w	r1, r1, #1
    33c8:	7001      	strb	r1, [r0, #0]
    33ca:	f000 ba0b 	b.w	37e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    33ce:	0000      	.short	0x0000
    33d0:	40001000 	.word	0x40001000
    33d4:	20000dc8 	.word	0x20000dc8

000033d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    33d8:	4901      	ldr	r1, [pc, #4]	; (33e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    33da:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    33de:	4770      	bx	lr
    33e0:	00003bb0 	.word	0x00003bb0

000033e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    33e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33e8:	4e30      	ldr	r6, [pc, #192]	; (34ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    33ea:	4c31      	ldr	r4, [pc, #196]	; (34b0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    33ec:	4688      	mov	r8, r1
    33ee:	0007      	movs	r7, r0
    33f0:	4615      	mov	r5, r2
    33f2:	f04f 0901 	mov.w	r9, #1
    33f6:	d006      	beq.n	3406 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    33f8:	2f01      	cmp	r7, #1
    33fa:	d012      	beq.n	3422 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    33fc:	f640 0117 	movw	r1, #2071	; 0x817
    3400:	203e      	movs	r0, #62	; 0x3e
    3402:	f7fc ffa3 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3406:	4610      	mov	r0, r2
    3408:	f000 fb80 	bl	3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>
    340c:	4829      	ldr	r0, [pc, #164]	; (34b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    340e:	f884 9009 	strb.w	r9, [r4, #9]
    3412:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    3416:	4640      	mov	r0, r8
    3418:	f000 fb26 	bl	3a68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    341c:	4605      	mov	r5, r0
    341e:	4630      	mov	r0, r6
    3420:	e00c      	b.n	343c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    3422:	4610      	mov	r0, r2
    3424:	f000 fb58 	bl	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3428:	2002      	movs	r0, #2
    342a:	7260      	strb	r0, [r4, #9]
    342c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    3430:	4640      	mov	r0, r8
    3432:	f000 fb19 	bl	3a68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    3436:	4605      	mov	r5, r0
    3438:	481c      	ldr	r0, [pc, #112]	; (34ac <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    343a:	1d00      	adds	r0, r0, #4
    343c:	f000 fad2 	bl	39e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    3440:	f8df 8074 	ldr.w	r8, [pc, #116]	; 34b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    3444:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    3448:	f8df a074 	ldr.w	sl, [pc, #116]	; 34c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    344c:	481b      	ldr	r0, [pc, #108]	; (34bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    344e:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    3452:	2010      	movs	r0, #16
    3454:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    3458:	6a60      	ldr	r0, [r4, #36]	; 0x24
    345a:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    345e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    3462:	6260      	str	r0, [r4, #36]	; 0x24
    3464:	4817      	ldr	r0, [pc, #92]	; (34c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3466:	6006      	str	r6, [r0, #0]
    3468:	f000 f9f6 	bl	3858 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    346c:	4641      	mov	r1, r8
    346e:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    3472:	4811      	ldr	r0, [pc, #68]	; (34b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    3474:	300c      	adds	r0, #12
    3476:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    347a:	42a8      	cmp	r0, r5
    347c:	d310      	bcc.n	34a0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    347e:	2000      	movs	r0, #0
    3480:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3484:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    3488:	6a60      	ldr	r0, [r4, #36]	; 0x24
    348a:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    348e:	6260      	str	r0, [r4, #36]	; 0x24
    3490:	480c      	ldr	r0, [pc, #48]	; (34c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3492:	1d00      	adds	r0, r0, #4
    3494:	6006      	str	r6, [r0, #0]
    3496:	f7ff fd6b 	bl	2f70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    349a:	2000      	movs	r0, #0
    349c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    34a0:	4629      	mov	r1, r5
    34a2:	4638      	mov	r0, r7
    34a4:	f000 faaa 	bl	39fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    34a8:	2001      	movs	r0, #1
    34aa:	e7f7      	b.n	349c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    34ac:	40001000 	.word	0x40001000
    34b0:	20000dc8 	.word	0x20000dc8
    34b4:	00003b50 	.word	0x00003b50
    34b8:	40008000 	.word	0x40008000
    34bc:	40008140 	.word	0x40008140
    34c0:	4001f098 	.word	0x4001f098
    34c4:	4001f504 	.word	0x4001f504

000034c8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    34c8:	4b0d      	ldr	r3, [pc, #52]	; (3500 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    34ca:	b510      	push	{r4, lr}
    34cc:	71d8      	strb	r0, [r3, #7]
    34ce:	729a      	strb	r2, [r3, #10]
    34d0:	b151      	cbz	r1, 34e8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    34d2:	2002      	movs	r0, #2
    34d4:	7218      	strb	r0, [r3, #8]
    34d6:	2801      	cmp	r0, #1
    34d8:	d008      	beq.n	34ec <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    34da:	2802      	cmp	r0, #2
    34dc:	d00f      	beq.n	34fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    34de:	f640 2144 	movw	r1, #2628	; 0xa44
    34e2:	203e      	movs	r0, #62	; 0x3e
    34e4:	f7fc ff32 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34e8:	2001      	movs	r0, #1
    34ea:	e7f3      	b.n	34d4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    34ec:	7a58      	ldrb	r0, [r3, #9]
    34ee:	2802      	cmp	r0, #2
    34f0:	d105      	bne.n	34fe <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    34f2:	f000 f93b 	bl	376c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    34f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34fa:	f000 ba49 	b.w	3990 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    34fe:	bd10      	pop	{r4, pc}
    3500:	20000dc8 	.word	0x20000dc8

00003504 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    3504:	4904      	ldr	r1, [pc, #16]	; (3518 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    3506:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    350a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    350e:	4249      	negs	r1, r1
    3510:	7001      	strb	r1, [r0, #0]
    3512:	2001      	movs	r0, #1
    3514:	4770      	bx	lr
    3516:	0000      	.short	0x0000
    3518:	40001000 	.word	0x40001000

0000351c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    351c:	4903      	ldr	r1, [pc, #12]	; (352c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    351e:	0e02      	lsrs	r2, r0, #24
    3520:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    3524:	0200      	lsls	r0, r0, #8
    3526:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    352a:	4770      	bx	lr
    352c:	40001000 	.word	0x40001000

00003530 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    3530:	4901      	ldr	r1, [pc, #4]	; (3538 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    3532:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3536:	4770      	bx	lr
    3538:	40001000 	.word	0x40001000

0000353c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    353c:	b510      	push	{r4, lr}
    353e:	2200      	movs	r2, #0
    3540:	2901      	cmp	r1, #1
    3542:	d006      	beq.n	3552 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    3544:	2902      	cmp	r1, #2
    3546:	d002      	beq.n	354e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    3548:	f240 21d2 	movw	r1, #722	; 0x2d2
    354c:	e014      	b.n	3578 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    354e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3552:	490b      	ldr	r1, [pc, #44]	; (3580 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    3554:	430a      	orrs	r2, r1
    3556:	490b      	ldr	r1, [pc, #44]	; (3584 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3558:	600a      	str	r2, [r1, #0]
    355a:	490b      	ldr	r1, [pc, #44]	; (3588 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    355c:	4308      	orrs	r0, r1
    355e:	4909      	ldr	r1, [pc, #36]	; (3584 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3560:	1d09      	adds	r1, r1, #4
    3562:	6008      	str	r0, [r1, #0]
    3564:	4809      	ldr	r0, [pc, #36]	; (358c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    3566:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    356a:	b2c0      	uxtb	r0, r0
    356c:	2803      	cmp	r0, #3
    356e:	d001      	beq.n	3574 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    3570:	280b      	cmp	r0, #11
    3572:	d104      	bne.n	357e <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    3574:	f240 21ea 	movw	r1, #746	; 0x2ea
    3578:	203e      	movs	r0, #62	; 0x3e
    357a:	f7fc fee7 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    357e:	bd10      	pop	{r4, pc}
    3580:	00100108 	.word	0x00100108
    3584:	40001514 	.word	0x40001514
    3588:	02030000 	.word	0x02030000
    358c:	40001000 	.word	0x40001000

00003590 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    3590:	4901      	ldr	r1, [pc, #4]	; (3598 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    3592:	7588      	strb	r0, [r1, #22]
    3594:	4770      	bx	lr
    3596:	0000      	.short	0x0000
    3598:	20000dc8 	.word	0x20000dc8

0000359c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    359c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    35a0:	4851      	ldr	r0, [pc, #324]	; (36e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    35a2:	f04f 0a01 	mov.w	sl, #1
    35a6:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    35aa:	484f      	ldr	r0, [pc, #316]	; (36e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    35ac:	300c      	adds	r0, #12
    35ae:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    35b2:	f006 fb89 	bl	9cc8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    35b6:	4c4d      	ldr	r4, [pc, #308]	; (36ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    35b8:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    35bc:	f000 f8e0 	bl	3780 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    35c0:	494b      	ldr	r1, [pc, #300]	; (36f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    35c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    35c4:	6008      	str	r0, [r1, #0]
    35c6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 36f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    35ca:	2000      	movs	r0, #0
    35cc:	6260      	str	r0, [r4, #36]	; 0x24
    35ce:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    35d2:	f240 131d 	movw	r3, #285	; 0x11d
    35d6:	439a      	bics	r2, r3
    35d8:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    35dc:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    35e0:	f000 f94e 	bl	3880 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    35e4:	4605      	mov	r5, r0
    35e6:	4840      	ldr	r0, [pc, #256]	; (36e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    35e8:	3008      	adds	r0, #8
    35ea:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    35ee:	4e3e      	ldr	r6, [pc, #248]	; (36e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    35f0:	61e0      	str	r0, [r4, #28]
    35f2:	1d36      	adds	r6, r6, #4
    35f4:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    35f8:	61a0      	str	r0, [r4, #24]
    35fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    35fe:	7d21      	ldrb	r1, [r4, #20]
    3600:	f884 1020 	strb.w	r1, [r4, #32]
    3604:	7a61      	ldrb	r1, [r4, #9]
    3606:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    360a:	46a1      	mov	r9, r4
    360c:	2400      	movs	r4, #0
    360e:	4639      	mov	r1, r7
    3610:	4628      	mov	r0, r5
    3612:	f000 f983 	bl	391c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    3616:	b910      	cbnz	r0, 361e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    3618:	f8c8 a010 	str.w	sl, [r8, #16]
    361c:	2401      	movs	r4, #1
    361e:	4f33      	ldr	r7, [pc, #204]	; (36ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3620:	07e8      	lsls	r0, r5, #31
    3622:	f1a7 0710 	sub.w	r7, r7, #16
    3626:	d120      	bne.n	366a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    3628:	07a8      	lsls	r0, r5, #30
    362a:	d527      	bpl.n	367c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    362c:	f006 fc74 	bl	9f18 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3630:	b9f0      	cbnz	r0, 3670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3632:	f006 fc61 	bl	9ef8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3636:	b9d8      	cbnz	r0, 3670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3638:	482f      	ldr	r0, [pc, #188]	; (36f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    363a:	6800      	ldr	r0, [r0, #0]
    363c:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    3640:	f3c0 6300 	ubfx	r3, r0, #24, #1
    3644:	f000 020f 	and.w	r2, r0, #15
    3648:	f3c0 1103 	ubfx	r1, r0, #4, #4
    364c:	f3c0 2803 	ubfx	r8, r0, #8, #4
    3650:	b173      	cbz	r3, 3670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3652:	b11a      	cbz	r2, 365c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3654:	b111      	cbz	r1, 365c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3656:	f1b8 0f00 	cmp.w	r8, #0
    365a:	d109      	bne.n	3670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    365c:	f3c0 4004 	ubfx	r0, r0, #16, #5
    3660:	2801      	cmp	r0, #1
    3662:	d105      	bne.n	3670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3664:	f1bc 0f03 	cmp.w	ip, #3
    3668:	d202      	bcs.n	3670 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    366a:	6838      	ldr	r0, [r7, #0]
    366c:	4780      	blx	r0
    366e:	e00e      	b.n	368e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3670:	f345 0080 	sbfx	r0, r5, #2, #1
    3674:	4621      	mov	r1, r4
    3676:	1c40      	adds	r0, r0, #1
    3678:	687a      	ldr	r2, [r7, #4]
    367a:	e007      	b.n	368c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    367c:	f015 0f28 	tst.w	r5, #40	; 0x28
    3680:	d005      	beq.n	368e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3682:	f345 1140 	sbfx	r1, r5, #5, #1
    3686:	68ba      	ldr	r2, [r7, #8]
    3688:	4620      	mov	r0, r4
    368a:	1c49      	adds	r1, r1, #1
    368c:	4790      	blx	r2
    368e:	06e8      	lsls	r0, r5, #27
    3690:	d501      	bpl.n	3696 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    3692:	68f8      	ldr	r0, [r7, #12]
    3694:	4780      	blx	r0
    3696:	f899 1009 	ldrb.w	r1, [r9, #9]
    369a:	4648      	mov	r0, r9
    369c:	2902      	cmp	r1, #2
    369e:	d120      	bne.n	36e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    36a0:	7b01      	ldrb	r1, [r0, #12]
    36a2:	2900      	cmp	r1, #0
    36a4:	d01d      	beq.n	36e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    36a6:	2902      	cmp	r1, #2
    36a8:	d004      	beq.n	36b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    36aa:	2901      	cmp	r1, #1
    36ac:	d009      	beq.n	36c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    36ae:	f640 4156 	movw	r1, #3158	; 0xc56
    36b2:	e00d      	b.n	36d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    36b4:	69c1      	ldr	r1, [r0, #28]
    36b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    36ba:	4408      	add	r0, r1
    36bc:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    36c0:	e00b      	b.n	36da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    36c2:	6901      	ldr	r1, [r0, #16]
    36c4:	f8d9 001c 	ldr.w	r0, [r9, #28]
    36c8:	4281      	cmp	r1, r0
    36ca:	d804      	bhi.n	36d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    36cc:	f640 4157 	movw	r1, #3159	; 0xc57
    36d0:	203e      	movs	r0, #62	; 0x3e
    36d2:	f7fc fe3b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36d6:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    36da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36de:	f000 b961 	b.w	39a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    36e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36e6:	0000      	.short	0x0000
    36e8:	40008000 	.word	0x40008000
    36ec:	20000dc8 	.word	0x20000dc8
    36f0:	4001f508 	.word	0x4001f508
    36f4:	40001000 	.word	0x40001000
    36f8:	40001450 	.word	0x40001450
    36fc:	480b      	ldr	r0, [pc, #44]	; (372c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    36fe:	7d81      	ldrb	r1, [r0, #22]
    3700:	480b      	ldr	r0, [pc, #44]	; (3730 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    3702:	5c40      	ldrb	r0, [r0, r1]
    3704:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3708:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    370c:	d204      	bcs.n	3718 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    370e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    3712:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3716:	e001      	b.n	371c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    3718:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    371c:	4a05      	ldr	r2, [pc, #20]	; (3734 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    371e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    3722:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    3726:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    372a:	4770      	bx	lr
    372c:	20000dc8 	.word	0x20000dc8
    3730:	00003b56 	.word	0x00003b56
    3734:	40001000 	.word	0x40001000
    3738:	b508      	push	{r3, lr}
    373a:	490b      	ldr	r1, [pc, #44]	; (3768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    373c:	466b      	mov	r3, sp
    373e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    3742:	7d89      	ldrb	r1, [r1, #22]
    3744:	f000 faaa 	bl	3c9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    3748:	f99d 0000 	ldrsb.w	r0, [sp]
    374c:	f000 fa7a 	bl	3c44 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    3750:	f10d 0001 	add.w	r0, sp, #1
    3754:	f004 f84e 	bl	77f4 <mpsl_fem_pa_gain_set>
    3758:	2800      	cmp	r0, #0
    375a:	d004      	beq.n	3766 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    375c:	f240 51e6 	movw	r1, #1510	; 0x5e6
    3760:	203e      	movs	r0, #62	; 0x3e
    3762:	f7fc fdf3 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3766:	bd08      	pop	{r3, pc}
    3768:	20000dc8 	.word	0x20000dc8
    376c:	4803      	ldr	r0, [pc, #12]	; (377c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    376e:	7a01      	ldrb	r1, [r0, #8]
    3770:	2901      	cmp	r1, #1
    3772:	d102      	bne.n	377a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    3774:	7a80      	ldrb	r0, [r0, #10]
    3776:	f7ff bfdf 	b.w	3738 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    377a:	4770      	bx	lr
    377c:	20000dc8 	.word	0x20000dc8
    3780:	480d      	ldr	r0, [pc, #52]	; (37b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    3782:	b510      	push	{r4, lr}
    3784:	7a40      	ldrb	r0, [r0, #9]
    3786:	2801      	cmp	r0, #1
    3788:	d00c      	beq.n	37a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    378a:	2802      	cmp	r0, #2
    378c:	d113      	bne.n	37b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    378e:	f004 f813 	bl	77b8 <mpsl_fem_lna_configuration_clear>
    3792:	2800      	cmp	r0, #0
    3794:	d00f      	beq.n	37b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3796:	1c40      	adds	r0, r0, #1
    3798:	d00d      	beq.n	37b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    379a:	f640 01ab 	movw	r1, #2219	; 0x8ab
    379e:	203e      	movs	r0, #62	; 0x3e
    37a0:	f7fc fdd4 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    37a4:	f004 f81a 	bl	77dc <mpsl_fem_pa_configuration_clear>
    37a8:	2800      	cmp	r0, #0
    37aa:	d004      	beq.n	37b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    37ac:	1c40      	adds	r0, r0, #1
    37ae:	d002      	beq.n	37b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    37b0:	f640 01a5 	movw	r1, #2213	; 0x8a5
    37b4:	e7f3      	b.n	379e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    37b6:	bd10      	pop	{r4, pc}
    37b8:	20000dc8 	.word	0x20000dc8
    37bc:	4808      	ldr	r0, [pc, #32]	; (37e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    37be:	2100      	movs	r1, #0
    37c0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    37c4:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    37c8:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    37cc:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    37d0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    37d4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    37d8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    37dc:	4770      	bx	lr
    37de:	0000      	.short	0x0000
    37e0:	40001000 	.word	0x40001000
    37e4:	4818      	ldr	r0, [pc, #96]	; (3848 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    37e6:	b510      	push	{r4, lr}
    37e8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    37ec:	07c1      	lsls	r1, r0, #31
    37ee:	d029      	beq.n	3844 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    37f0:	0781      	lsls	r1, r0, #30
    37f2:	d514      	bpl.n	381e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    37f4:	4815      	ldr	r0, [pc, #84]	; (384c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    37f6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    37fa:	f041 0101 	orr.w	r1, r1, #1
    37fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3802:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3806:	b2c0      	uxtb	r0, r0
    3808:	280b      	cmp	r0, #11
    380a:	d005      	beq.n	3818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    380c:	280a      	cmp	r0, #10
    380e:	d003      	beq.n	3818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3810:	2803      	cmp	r0, #3
    3812:	d001      	beq.n	3818 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3814:	2802      	cmp	r0, #2
    3816:	d115      	bne.n	3844 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3818:	f240 610f 	movw	r1, #1551	; 0x60f
    381c:	e00f      	b.n	383e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    381e:	0740      	lsls	r0, r0, #29
    3820:	d510      	bpl.n	3844 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3822:	480a      	ldr	r0, [pc, #40]	; (384c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3824:	490a      	ldr	r1, [pc, #40]	; (3850 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    3826:	3008      	adds	r0, #8
    3828:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    382c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3830:	4808      	ldr	r0, [pc, #32]	; (3854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    3832:	f006 fa08 	bl	9c46 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3836:	2800      	cmp	r0, #0
    3838:	d004      	beq.n	3844 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    383a:	f240 6117 	movw	r1, #1559	; 0x617
    383e:	203e      	movs	r0, #62	; 0x3e
    3840:	f7fc fd84 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3844:	bd10      	pop	{r4, pc}
    3846:	0000      	.short	0x0000
    3848:	20000dc8 	.word	0x20000dc8
    384c:	40001000 	.word	0x40001000
    3850:	4001f098 	.word	0x4001f098
    3854:	40008000 	.word	0x40008000
    3858:	4808      	ldr	r0, [pc, #32]	; (387c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    385a:	4601      	mov	r1, r0
    385c:	79c2      	ldrb	r2, [r0, #7]
    385e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    3862:	b112      	cbz	r2, 386a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    3864:	2a01      	cmp	r2, #1
    3866:	d003      	beq.n	3870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    3868:	e006      	b.n	3878 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    386a:	f041 0102 	orr.w	r1, r1, #2
    386e:	e001      	b.n	3874 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    3870:	f041 0104 	orr.w	r1, r1, #4
    3874:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    3878:	f7ff bfb4 	b.w	37e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    387c:	20000dc8 	.word	0x20000dc8
    3880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3884:	4d22      	ldr	r5, [pc, #136]	; (3910 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    3886:	2400      	movs	r4, #0
    3888:	7b28      	ldrb	r0, [r5, #12]
    388a:	b138      	cbz	r0, 389c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    388c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3890:	4820      	ldr	r0, [pc, #128]	; (3914 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    3892:	f006 f9d8 	bl	9c46 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3896:	b108      	cbz	r0, 389c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3898:	2701      	movs	r7, #1
    389a:	e000      	b.n	389e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    389c:	2700      	movs	r7, #0
    389e:	7a68      	ldrb	r0, [r5, #9]
    38a0:	4e1d      	ldr	r6, [pc, #116]	; (3918 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    38a2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    38a6:	2801      	cmp	r0, #1
    38a8:	d002      	beq.n	38b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    38aa:	2802      	cmp	r0, #2
    38ac:	d006      	beq.n	38bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    38ae:	e016      	b.n	38de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    38b0:	4630      	mov	r0, r6
    38b2:	f006 f9c3 	bl	9c3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    38b6:	b190      	cbz	r0, 38de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    38b8:	2408      	movs	r4, #8
    38ba:	e010      	b.n	38de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    38bc:	4630      	mov	r0, r6
    38be:	f006 f9bd 	bl	9c3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    38c2:	b100      	cbz	r0, 38c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    38c4:	2402      	movs	r4, #2
    38c6:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    38ca:	43c0      	mvns	r0, r0
    38cc:	f340 0000 	sbfx	r0, r0, #0, #1
    38d0:	1c40      	adds	r0, r0, #1
    38d2:	d101      	bne.n	38d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    38d4:	f044 0404 	orr.w	r4, r4, #4
    38d8:	b10f      	cbz	r7, 38de <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    38da:	f044 0401 	orr.w	r4, r4, #1
    38de:	f014 0f0b 	tst.w	r4, #11
    38e2:	d107      	bne.n	38f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    38e4:	f44f 7188 	mov.w	r1, #272	; 0x110
    38e8:	4630      	mov	r0, r6
    38ea:	f006 f9a7 	bl	9c3c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    38ee:	b108      	cbz	r0, 38f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    38f0:	f044 0410 	orr.w	r4, r4, #16
    38f4:	f7ff ff62 	bl	37bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    38f8:	06e0      	lsls	r0, r4, #27
    38fa:	d506      	bpl.n	390a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    38fc:	0720      	lsls	r0, r4, #28
    38fe:	d404      	bmi.n	390a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    3900:	7a68      	ldrb	r0, [r5, #9]
    3902:	2801      	cmp	r0, #1
    3904:	d101      	bne.n	390a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    3906:	f044 0420 	orr.w	r4, r4, #32
    390a:	4620      	mov	r0, r4
    390c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3910:	20000dc8 	.word	0x20000dc8
    3914:	40008000 	.word	0x40008000
    3918:	40001000 	.word	0x40001000
    391c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3920:	4c1a      	ldr	r4, [pc, #104]	; (398c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    3922:	460d      	mov	r5, r1
    3924:	7a21      	ldrb	r1, [r4, #8]
    3926:	b129      	cbz	r1, 3934 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    3928:	f010 0f11 	tst.w	r0, #17
    392c:	d007      	beq.n	393e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    392e:	f7ff fb1f 	bl	2f70 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3932:	e024      	b.n	397e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    3934:	f000 f890 	bl	3a58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    3938:	2000      	movs	r0, #0
    393a:	7320      	strb	r0, [r4, #12]
    393c:	e01f      	b.n	397e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    393e:	2901      	cmp	r1, #1
    3940:	d001      	beq.n	3946 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    3942:	2601      	movs	r6, #1
    3944:	e000      	b.n	3948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    3946:	2600      	movs	r6, #0
    3948:	79e0      	ldrb	r0, [r4, #7]
    394a:	2801      	cmp	r0, #1
    394c:	d00e      	beq.n	396c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    394e:	2700      	movs	r7, #0
    3950:	f000 f882 	bl	3a58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    3954:	2196      	movs	r1, #150	; 0x96
    3956:	4630      	mov	r0, r6
    3958:	f000 f894 	bl	3a84 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    395c:	4601      	mov	r1, r0
    395e:	b14f      	cbz	r7, 3974 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    3960:	353b      	adds	r5, #59	; 0x3b
    3962:	428d      	cmp	r5, r1
    3964:	d904      	bls.n	3970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    3966:	2000      	movs	r0, #0
    3968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    396c:	2701      	movs	r7, #1
    396e:	e7ef      	b.n	3950 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    3970:	2001      	movs	r0, #1
    3972:	71e0      	strb	r0, [r4, #7]
    3974:	7aa2      	ldrb	r2, [r4, #10]
    3976:	4630      	mov	r0, r6
    3978:	f7ff fd34 	bl	33e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    397c:	b108      	cbz	r0, 3982 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    397e:	2001      	movs	r0, #1
    3980:	e7f2      	b.n	3968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    3982:	f640 21a5 	movw	r1, #2725	; 0xaa5
    3986:	203e      	movs	r0, #62	; 0x3e
    3988:	f7fc fce0 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    398c:	20000dc8 	.word	0x20000dc8
    3990:	4803      	ldr	r0, [pc, #12]	; (39a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    3992:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3996:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    399a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    399e:	4770      	bx	lr
    39a0:	40001000 	.word	0x40001000
    39a4:	4804      	ldr	r0, [pc, #16]	; (39b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    39a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    39a8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    39ac:	6241      	str	r1, [r0, #36]	; 0x24
    39ae:	4903      	ldr	r1, [pc, #12]	; (39bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    39b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    39b4:	6008      	str	r0, [r1, #0]
    39b6:	4770      	bx	lr
    39b8:	20000dc8 	.word	0x20000dc8
    39bc:	4001f504 	.word	0x4001f504
    39c0:	4a07      	ldr	r2, [pc, #28]	; (39e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    39c2:	2000      	movs	r0, #0
    39c4:	3208      	adds	r2, #8
    39c6:	4906      	ldr	r1, [pc, #24]	; (39e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    39c8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39cc:	1d0a      	adds	r2, r1, #4
    39ce:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    39d2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    39d6:	4902      	ldr	r1, [pc, #8]	; (39e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    39d8:	310c      	adds	r1, #12
    39da:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    39de:	4770      	bx	lr
    39e0:	40008000 	.word	0x40008000
    39e4:	4903      	ldr	r1, [pc, #12]	; (39f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    39e6:	79c9      	ldrb	r1, [r1, #7]
    39e8:	2900      	cmp	r1, #0
    39ea:	d102      	bne.n	39f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    39ec:	4902      	ldr	r1, [pc, #8]	; (39f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    39ee:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    39f2:	4770      	bx	lr
    39f4:	20000dc8 	.word	0x20000dc8
    39f8:	4001f098 	.word	0x4001f098
    39fc:	b510      	push	{r4, lr}
    39fe:	4a14      	ldr	r2, [pc, #80]	; (3a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    3a00:	b120      	cbz	r0, 3a0c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    3a02:	2801      	cmp	r0, #1
    3a04:	d011      	beq.n	3a2a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    3a06:	f240 7153 	movw	r1, #1875	; 0x753
    3a0a:	e01c      	b.n	3a46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    3a0c:	f101 0028 	add.w	r0, r1, #40	; 0x28
    3a10:	e9c2 1002 	strd	r1, r0, [r2, #8]
    3a14:	490f      	ldr	r1, [pc, #60]	; (3a54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    3a16:	480e      	ldr	r0, [pc, #56]	; (3a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    3a18:	f003 fee6 	bl	77e8 <mpsl_fem_pa_configuration_set>
    3a1c:	2800      	cmp	r0, #0
    3a1e:	d015      	beq.n	3a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a20:	1c40      	adds	r0, r0, #1
    3a22:	d013      	beq.n	3a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a24:	f240 7142 	movw	r1, #1858	; 0x742
    3a28:	e00d      	b.n	3a46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    3a2a:	f101 0029 	add.w	r0, r1, #41	; 0x29
    3a2e:	e9c2 1002 	strd	r1, r0, [r2, #8]
    3a32:	4908      	ldr	r1, [pc, #32]	; (3a54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    3a34:	4806      	ldr	r0, [pc, #24]	; (3a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    3a36:	f003 fec5 	bl	77c4 <mpsl_fem_lna_configuration_set>
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d006      	beq.n	3a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a3e:	1c40      	adds	r0, r0, #1
    3a40:	d004      	beq.n	3a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    3a42:	f240 714f 	movw	r1, #1871	; 0x74f
    3a46:	203e      	movs	r0, #62	; 0x3e
    3a48:	f7fc fc80 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a4c:	bd10      	pop	{r4, pc}
    3a4e:	0000      	.short	0x0000
    3a50:	200000f8 	.word	0x200000f8
    3a54:	00003b80 	.word	0x00003b80
    3a58:	4802      	ldr	r0, [pc, #8]	; (3a64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    3a5a:	2100      	movs	r1, #0
    3a5c:	71c1      	strb	r1, [r0, #7]
    3a5e:	7201      	strb	r1, [r0, #8]
    3a60:	7241      	strb	r1, [r0, #9]
    3a62:	4770      	bx	lr
    3a64:	20000dc8 	.word	0x20000dc8
    3a68:	4a05      	ldr	r2, [pc, #20]	; (3a80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    3a6a:	79d2      	ldrb	r2, [r2, #7]
    3a6c:	2a01      	cmp	r2, #1
    3a6e:	d006      	beq.n	3a7e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    3a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3a74:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    3a78:	fbb1 f1f2 	udiv	r1, r1, r2
    3a7c:	1a40      	subs	r0, r0, r1
    3a7e:	4770      	bx	lr
    3a80:	20000dc8 	.word	0x20000dc8
    3a84:	b570      	push	{r4, r5, r6, lr}
    3a86:	4c13      	ldr	r4, [pc, #76]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a88:	4603      	mov	r3, r0
    3a8a:	460d      	mov	r5, r1
    3a8c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    3a90:	2000      	movs	r0, #0
    3a92:	b15a      	cbz	r2, 3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3a94:	4621      	mov	r1, r4
    3a96:	f891 1020 	ldrb.w	r1, [r1, #32]
    3a9a:	b163      	cbz	r3, 3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
    3a9c:	2b01      	cmp	r3, #1
    3a9e:	d111      	bne.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
    3aa0:	2a01      	cmp	r2, #1
    3aa2:	4628      	mov	r0, r5
    3aa4:	d012      	beq.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3aa6:	f006 f8d3 	bl	9c50 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    3aaa:	e009      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3aac:	f640 0158 	movw	r1, #2136	; 0x858
    3ab0:	203e      	movs	r0, #62	; 0x3e
    3ab2:	f7fc fc4b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ab6:	2a01      	cmp	r2, #1
    3ab8:	4628      	mov	r0, r5
    3aba:	d004      	beq.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3abc:	f006 f8d6 	bl	9c6c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    3ac0:	69e1      	ldr	r1, [r4, #28]
    3ac2:	4408      	add	r0, r1
    3ac4:	bd70      	pop	{r4, r5, r6, pc}
    3ac6:	f000 f8d1 	bl	3c6c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    3aca:	e7f9      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3acc:	f000 f8c0 	bl	3c50 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    3ad0:	e7f6      	b.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3ad2:	0000      	.short	0x0000
    3ad4:	20000dc8 	.word	0x20000dc8
    3ad8:	b510      	push	{r4, lr}
    3ada:	f7ff fc57 	bl	338c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3ade:	f7ff fe0d 	bl	36fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    3ae2:	f7ff fe43 	bl	376c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    3ae6:	f7ff ff53 	bl	3990 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    3aea:	f006 fa15 	bl	9f18 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3aee:	2800      	cmp	r0, #0
    3af0:	d108      	bne.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3af2:	f006 fa01 	bl	9ef8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3af6:	2800      	cmp	r0, #0
    3af8:	d104      	bne.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3afa:	4803      	ldr	r0, [pc, #12]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    3afc:	6801      	ldr	r1, [r0, #0]
    3afe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    3b02:	6001      	str	r1, [r0, #0]
    3b04:	bd10      	pop	{r4, pc}
    3b06:	0000      	.short	0x0000
    3b08:	40001568 	.word	0x40001568
    3b0c:	b510      	push	{r4, lr}
    3b0e:	4604      	mov	r4, r0
    3b10:	f7ff fc3c 	bl	338c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3b14:	f7ff fdf2 	bl	36fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    3b18:	4620      	mov	r0, r4
    3b1a:	f7ff fe0d 	bl	3738 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3b1e:	f006 f9fb 	bl	9f18 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3b22:	2800      	cmp	r0, #0
    3b24:	d00d      	beq.n	3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
    3b26:	4a09      	ldr	r2, [pc, #36]	; (3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>)
    3b28:	6811      	ldr	r1, [r2, #0]
    3b2a:	0650      	lsls	r0, r2, #25
    3b2c:	2c02      	cmp	r4, #2
    3b2e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    3b32:	d007      	beq.n	3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b34:	f3c0 2006 	ubfx	r0, r0, #8, #7
    3b38:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    3b3c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    3b40:	6010      	str	r0, [r2, #0]
    3b42:	bd10      	pop	{r4, pc}
    3b44:	f3c0 6006 	ubfx	r0, r0, #24, #7
    3b48:	e7f6      	b.n	3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b4a:	0000      	.short	0x0000
    3b4c:	40001588 	.word	0x40001588
    3b50:	a62c0000 	.word	0xa62c0000
    3b54:	0604a1e0 	.word	0x0604a1e0
    3b58:	0e0c0a08 	.word	0x0e0c0a08
    3b5c:	16141210 	.word	0x16141210
    3b60:	201e1c18 	.word	0x201e1c18
    3b64:	28262422 	.word	0x28262422
    3b68:	302e2c2a 	.word	0x302e2c2a
    3b6c:	38363432 	.word	0x38363432
    3b70:	403e3c3a 	.word	0x403e3c3a
    3b74:	48464442 	.word	0x48464442
    3b78:	024e4c4a 	.word	0x024e4c4a
    3b7c:	0000501a 	.word	0x0000501a
    3b80:	00000001 	.word	0x00000001
    3b84:	40001110 	.word	0x40001110
	...
    3b9c:	00001e14 	.word	0x00001e14
    3ba0:	00001130 	.word	0x00001130
    3ba4:	00000000 	.word	0x00000000
    3ba8:	00000028 	.word	0x00000028
    3bac:	00000018 	.word	0x00000018
    3bb0:	00000000 	.word	0x00000000
    3bb4:	00001e14 	.word	0x00001e14
    3bb8:	00001130 	.word	0x00001130
    3bbc:	00000000 	.word	0x00000000
    3bc0:	00001770 	.word	0x00001770
    3bc4:	00000fa0 	.word	0x00000fa0

00003bc8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	4605      	mov	r5, r0
    3bcc:	4614      	mov	r4, r2
    3bce:	4608      	mov	r0, r1
    3bd0:	f7ff fc02 	bl	33d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    3bd4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    3bd8:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    3bdc:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    3be0:	4807      	ldr	r0, [pc, #28]	; (3c00 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    3be2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3be6:	4408      	add	r0, r1
    3be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3bec:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    3bf0:	fbb0 f5f1 	udiv	r5, r0, r1
    3bf4:	4620      	mov	r0, r4
    3bf6:	f7ff fbc3 	bl	3380 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    3bfa:	4428      	add	r0, r5
    3bfc:	1d40      	adds	r0, r0, #5
    3bfe:	bd70      	pop	{r4, r5, r6, pc}
    3c00:	00003c90 	.word	0x00003c90

00003c04 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    3c04:	b570      	push	{r4, r5, r6, lr}
    3c06:	4d0e      	ldr	r5, [pc, #56]	; (3c40 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    3c08:	461c      	mov	r4, r3
    3c0a:	3d08      	subs	r5, #8
    3c0c:	4b0c      	ldr	r3, [pc, #48]	; (3c40 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    3c0e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    3c12:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    3c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3c1a:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    3c1e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3c22:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    3c26:	4418      	add	r0, r3
    3c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    3c2c:	fbb0 f5f1 	udiv	r5, r0, r1
    3c30:	4610      	mov	r0, r2
    3c32:	f7ff fba5 	bl	3380 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    3c36:	4428      	add	r0, r5
    3c38:	4420      	add	r0, r4
    3c3a:	1d40      	adds	r0, r0, #5
    3c3c:	bd70      	pop	{r4, r5, r6, pc}
    3c3e:	0000      	.short	0x0000
    3c40:	00003c90 	.word	0x00003c90

00003c44 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    3c44:	4901      	ldr	r1, [pc, #4]	; (3c4c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    3c46:	b2c0      	uxtb	r0, r0
    3c48:	6008      	str	r0, [r1, #0]
    3c4a:	4770      	bx	lr
    3c4c:	4000150c 	.word	0x4000150c

00003c50 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    3c50:	4a05      	ldr	r2, [pc, #20]	; (3c68 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    3c52:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    3c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c5a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    3c5e:	fbb1 f1f2 	udiv	r1, r1, r2
    3c62:	4408      	add	r0, r1
    3c64:	1e80      	subs	r0, r0, #2
    3c66:	4770      	bx	lr
    3c68:	00003c88 	.word	0x00003c88

00003c6c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    3c6c:	4a05      	ldr	r2, [pc, #20]	; (3c84 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    3c6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    3c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c76:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    3c7a:	fbb1 f1f2 	udiv	r1, r1, r2
    3c7e:	4408      	add	r0, r1
    3c80:	4770      	bx	lr
    3c82:	0000      	.short	0x0000
    3c84:	00003c88 	.word	0x00003c88
    3c88:	05dc0000 	.word	0x05dc0000
    3c8c:	000003e8 	.word	0x000003e8
    3c90:	00000000 	.word	0x00000000
    3c94:	00001e14 	.word	0x00001e14
    3c98:	00001130 	.word	0x00001130

00003c9c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    3c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ca0:	461e      	mov	r6, r3
    3ca2:	4617      	mov	r7, r2
    3ca4:	460c      	mov	r4, r1
    3ca6:	4605      	mov	r5, r0
    3ca8:	f000 f856 	bl	3d58 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    3cac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 3d54 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    3cb0:	4680      	mov	r8, r0
    3cb2:	f899 0000 	ldrb.w	r0, [r9]
    3cb6:	42a8      	cmp	r0, r5
    3cb8:	d110      	bne.n	3cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3cba:	f899 1001 	ldrb.w	r1, [r9, #1]
    3cbe:	4648      	mov	r0, r9
    3cc0:	42a1      	cmp	r1, r4
    3cc2:	d10b      	bne.n	3cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3cc4:	f990 1002 	ldrsb.w	r1, [r0, #2]
    3cc8:	42b9      	cmp	r1, r7
    3cca:	d107      	bne.n	3cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3ccc:	78c2      	ldrb	r2, [r0, #3]
    3cce:	4542      	cmp	r2, r8
    3cd0:	d104      	bne.n	3cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    3cd2:	8881      	ldrh	r1, [r0, #4]
    3cd4:	8031      	strh	r1, [r6, #0]
    3cd6:	7980      	ldrb	r0, [r0, #6]
    3cd8:	70b0      	strb	r0, [r6, #2]
    3cda:	e037      	b.n	3d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    3cdc:	463a      	mov	r2, r7
    3cde:	4621      	mov	r1, r4
    3ce0:	2d01      	cmp	r5, #1
    3ce2:	d009      	beq.n	3cf8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    3ce4:	2d02      	cmp	r5, #2
    3ce6:	d009      	beq.n	3cfc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    3ce8:	2d04      	cmp	r5, #4
    3cea:	d009      	beq.n	3d00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    3cec:	2d08      	cmp	r5, #8
    3cee:	d009      	beq.n	3d04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    3cf0:	f240 4161 	movw	r1, #1121	; 0x461
    3cf4:	2006      	movs	r0, #6
    3cf6:	e00c      	b.n	3d12 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    3cf8:	2000      	movs	r0, #0
    3cfa:	e004      	b.n	3d06 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    3cfc:	2001      	movs	r0, #1
    3cfe:	e002      	b.n	3d06 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    3d00:	2003      	movs	r0, #3
    3d02:	e000      	b.n	3d06 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    3d04:	2002      	movs	r0, #2
    3d06:	466b      	mov	r3, sp
    3d08:	f000 f89e 	bl	3e48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    3d0c:	b118      	cbz	r0, 3d16 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    3d0e:	213d      	movs	r1, #61	; 0x3d
    3d10:	2075      	movs	r0, #117	; 0x75
    3d12:	f7fc fb1b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d16:	4620      	mov	r0, r4
    3d18:	f7ff f922 	bl	2f60 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    3d1c:	4602      	mov	r2, r0
    3d1e:	2300      	movs	r3, #0
    3d20:	4631      	mov	r1, r6
    3d22:	f99d 0000 	ldrsb.w	r0, [sp]
    3d26:	f003 fd71 	bl	780c <mpsl_fem_tx_power_split>
    3d2a:	4601      	mov	r1, r0
    3d2c:	f889 1007 	strb.w	r1, [r9, #7]
    3d30:	8831      	ldrh	r1, [r6, #0]
    3d32:	f8a9 1004 	strh.w	r1, [r9, #4]
    3d36:	78b1      	ldrb	r1, [r6, #2]
    3d38:	f889 1006 	strb.w	r1, [r9, #6]
    3d3c:	f889 5000 	strb.w	r5, [r9]
    3d40:	f889 4001 	strb.w	r4, [r9, #1]
    3d44:	f889 7002 	strb.w	r7, [r9, #2]
    3d48:	f889 8003 	strb.w	r8, [r9, #3]
    3d4c:	f999 0007 	ldrsb.w	r0, [r9, #7]
    3d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3d54:	20000190 	.word	0x20000190

00003d58 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    3d58:	4801      	ldr	r0, [pc, #4]	; (3d60 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    3d5a:	7800      	ldrb	r0, [r0, #0]
    3d5c:	4770      	bx	lr
    3d5e:	0000      	.short	0x0000
    3d60:	20000110 	.word	0x20000110

00003d64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    3d64:	b570      	push	{r4, r5, r6, lr}
    3d66:	4c17      	ldr	r4, [pc, #92]	; (3dc4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    3d68:	7860      	ldrb	r0, [r4, #1]
    3d6a:	2800      	cmp	r0, #0
    3d6c:	d123      	bne.n	3db6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    3d6e:	2001      	movs	r0, #1
    3d70:	7060      	strb	r0, [r4, #1]
    3d72:	f006 f8ab 	bl	9ecc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    3d76:	f06f 0527 	mvn.w	r5, #39	; 0x27
    3d7a:	b928      	cbnz	r0, 3d88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    3d7c:	f006 f8dc 	bl	9f38 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    3d80:	b910      	cbnz	r0, 3d88 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    3d82:	f006 f8e3 	bl	9f4c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3d86:	b120      	cbz	r0, 3d92 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    3d88:	480f      	ldr	r0, [pc, #60]	; (3dc8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    3d8a:	6060      	str	r0, [r4, #4]
    3d8c:	70a5      	strb	r5, [r4, #2]
    3d8e:	2008      	movs	r0, #8
    3d90:	e010      	b.n	3db4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    3d92:	f006 f870 	bl	9e76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3d96:	b940      	cbnz	r0, 3daa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    3d98:	f006 f877 	bl	9e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3d9c:	b928      	cbnz	r0, 3daa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    3d9e:	f006 f88b 	bl	9eb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3da2:	b910      	cbnz	r0, 3daa <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    3da4:	f006 f89c 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3da8:	b130      	cbz	r0, 3db8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    3daa:	4807      	ldr	r0, [pc, #28]	; (3dc8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    3dac:	3031      	adds	r0, #49	; 0x31
    3dae:	6060      	str	r0, [r4, #4]
    3db0:	70a5      	strb	r5, [r4, #2]
    3db2:	2004      	movs	r0, #4
    3db4:	70e0      	strb	r0, [r4, #3]
    3db6:	bd70      	pop	{r4, r5, r6, pc}
    3db8:	f240 113f 	movw	r1, #319	; 0x13f
    3dbc:	2074      	movs	r0, #116	; 0x74
    3dbe:	f003 fb67 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dc2:	0000      	.short	0x0000
    3dc4:	20000110 	.word	0x20000110
    3dc8:	0000a260 	.word	0x0000a260

00003dcc <mpsl_tx_power_radio_supported_power_adjust>:
    3dcc:	4a06      	ldr	r2, [pc, #24]	; (3de8 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    3dce:	b500      	push	{lr}
    3dd0:	f992 2003 	ldrsb.w	r2, [r2, #3]
    3dd4:	4290      	cmp	r0, r2
    3dd6:	db01      	blt.n	3ddc <mpsl_tx_power_radio_supported_power_adjust+0x10>
    3dd8:	4610      	mov	r0, r2
    3dda:	bd00      	pop	{pc}
    3ddc:	f000 f808 	bl	3df0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    3de0:	4902      	ldr	r1, [pc, #8]	; (3dec <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    3de2:	5608      	ldrsb	r0, [r1, r0]
    3de4:	bd00      	pop	{pc}
    3de6:	0000      	.short	0x0000
    3de8:	20000110 	.word	0x20000110
    3dec:	0000a252 	.word	0x0000a252

00003df0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    3df0:	4602      	mov	r2, r0
    3df2:	4813      	ldr	r0, [pc, #76]	; (3e40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    3df4:	b510      	push	{r4, lr}
    3df6:	f990 3003 	ldrsb.w	r3, [r0, #3]
    3dfa:	429a      	cmp	r2, r3
    3dfc:	db01      	blt.n	3e02 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    3dfe:	200d      	movs	r0, #13
    3e00:	bd10      	pop	{r4, pc}
    3e02:	f990 3002 	ldrsb.w	r3, [r0, #2]
    3e06:	429a      	cmp	r2, r3
    3e08:	dc01      	bgt.n	3e0e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    3e0a:	2000      	movs	r0, #0
    3e0c:	bd10      	pop	{r4, pc}
    3e0e:	b101      	cbz	r1, 3e12 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    3e10:	2101      	movs	r1, #1
    3e12:	1ad4      	subs	r4, r2, r3
    3e14:	6843      	ldr	r3, [r0, #4]
    3e16:	5d18      	ldrb	r0, [r3, r4]
    3e18:	4c0a      	ldr	r4, [pc, #40]	; (3e44 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    3e1a:	5624      	ldrsb	r4, [r4, r0]
    3e1c:	4294      	cmp	r4, r2
    3e1e:	d0f5      	beq.n	3e0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e20:	4c08      	ldr	r4, [pc, #32]	; (3e44 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    3e22:	4408      	add	r0, r1
    3e24:	343f      	adds	r4, #63	; 0x3f
    3e26:	b2c0      	uxtb	r0, r0
    3e28:	b2d2      	uxtb	r2, r2
    3e2a:	42a3      	cmp	r3, r4
    3e2c:	d1ee      	bne.n	3e0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e2e:	2900      	cmp	r1, #0
    3e30:	d0ec      	beq.n	3e0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e32:	2a01      	cmp	r2, #1
    3e34:	d001      	beq.n	3e3a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    3e36:	2a02      	cmp	r2, #2
    3e38:	d1e8      	bne.n	3e0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    3e3a:	1c40      	adds	r0, r0, #1
    3e3c:	b2c0      	uxtb	r0, r0
    3e3e:	bd10      	pop	{r4, pc}
    3e40:	20000110 	.word	0x20000110
    3e44:	0000a252 	.word	0x0000a252

00003e48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    3e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e4c:	461c      	mov	r4, r3
    3e4e:	4690      	mov	r8, r2
    3e50:	460d      	mov	r5, r1
    3e52:	4606      	mov	r6, r0
    3e54:	f06f 0715 	mvn.w	r7, #21
    3e58:	2804      	cmp	r0, #4
    3e5a:	d804      	bhi.n	3e66 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    3e5c:	b11c      	cbz	r4, 3e66 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    3e5e:	f005 ff10 	bl	9c82 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    3e62:	42a8      	cmp	r0, r5
    3e64:	d802      	bhi.n	3e6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    3e66:	4638      	mov	r0, r7
    3e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e6c:	4805      	ldr	r0, [pc, #20]	; (3e84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    3e6e:	4642      	mov	r2, r8
    3e70:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3e74:	b118      	cbz	r0, 3e7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    3e76:	5740      	ldrsb	r0, [r0, r5]
    3e78:	4282      	cmp	r2, r0
    3e7a:	dd00      	ble.n	3e7e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    3e7c:	4602      	mov	r2, r0
    3e7e:	7022      	strb	r2, [r4, #0]
    3e80:	2000      	movs	r0, #0
    3e82:	e7f1      	b.n	3e68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    3e84:	20000dfc 	.word	0x20000dfc

00003e88 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    3e88:	4801      	ldr	r0, [pc, #4]	; (3e90 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    3e8a:	7800      	ldrb	r0, [r0, #0]
    3e8c:	4770      	bx	lr
    3e8e:	0000      	.short	0x0000
    3e90:	20000118 	.word	0x20000118

00003e94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    3e94:	4905      	ldr	r1, [pc, #20]	; (3eac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    3e96:	780a      	ldrb	r2, [r1, #0]
    3e98:	4290      	cmp	r0, r2
    3e9a:	d301      	bcc.n	3ea0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    3e9c:	2000      	movs	r0, #0
    3e9e:	4770      	bx	lr
    3ea0:	6849      	ldr	r1, [r1, #4]
    3ea2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3ea6:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    3eaa:	4770      	bx	lr
    3eac:	20000118 	.word	0x20000118

00003eb0 <MPSL_IRQ_RADIO_Handler>:
    3eb0:	490d      	ldr	r1, [pc, #52]	; (3ee8 <MPSL_IRQ_RADIO_Handler+0x38>)
    3eb2:	b510      	push	{r4, lr}
    3eb4:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    3eb8:	2820      	cmp	r0, #32
    3eba:	d00f      	beq.n	3edc <MPSL_IRQ_RADIO_Handler+0x2c>
    3ebc:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    3ec0:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    3ec4:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    3ec8:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    3ecc:	6840      	ldr	r0, [r0, #4]
    3ece:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    3ed2:	680a      	ldr	r2, [r1, #0]
    3ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ed8:	2104      	movs	r1, #4
    3eda:	4710      	bx	r2
    3edc:	f640 017f 	movw	r1, #2175	; 0x87f
    3ee0:	2070      	movs	r0, #112	; 0x70
    3ee2:	f003 fad5 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ee6:	0000      	.short	0x0000
    3ee8:	20000ba0 	.word	0x20000ba0
    3eec:	b570      	push	{r4, r5, r6, lr}
    3eee:	4605      	mov	r5, r0
    3ef0:	2a20      	cmp	r2, #32
    3ef2:	d028      	beq.n	3f46 <MPSL_IRQ_RADIO_Handler+0x96>
    3ef4:	4819      	ldr	r0, [pc, #100]	; (3f5c <MPSL_IRQ_RADIO_Handler+0xac>)
    3ef6:	4c1a      	ldr	r4, [pc, #104]	; (3f60 <MPSL_IRQ_RADIO_Handler+0xb0>)
    3ef8:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    3efc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f00:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    3f04:	4423      	add	r3, r4
    3f06:	2920      	cmp	r1, #32
    3f08:	d022      	beq.n	3f50 <MPSL_IRQ_RADIO_Handler+0xa0>
    3f0a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    3f0e:	7840      	ldrb	r0, [r0, #1]
    3f10:	784c      	ldrb	r4, [r1, #1]
    3f12:	7048      	strb	r0, [r1, #1]
    3f14:	4620      	mov	r0, r4
    3f16:	4601      	mov	r1, r0
    3f18:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    3f1c:	4291      	cmp	r1, r2
    3f1e:	7005      	strb	r5, [r0, #0]
    3f20:	7840      	ldrb	r0, [r0, #1]
    3f22:	d1f8      	bne.n	3f16 <MPSL_IRQ_RADIO_Handler+0x66>
    3f24:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    3f28:	2a20      	cmp	r2, #32
    3f2a:	bf1a      	itte	ne
    3f2c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    3f30:	7054      	strbne	r4, [r2, #1]
    3f32:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    3f36:	2220      	movs	r2, #32
    3f38:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    3f3c:	f88c 2001 	strb.w	r2, [ip, #1]
    3f40:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    3f44:	bd70      	pop	{r4, r5, r6, pc}
    3f46:	f240 2186 	movw	r1, #646	; 0x286
    3f4a:	2070      	movs	r0, #112	; 0x70
    3f4c:	f003 faa0 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f50:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    3f54:	7840      	ldrb	r0, [r0, #1]
    3f56:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    3f5a:	e7db      	b.n	3f14 <MPSL_IRQ_RADIO_Handler+0x64>
    3f5c:	20000b20 	.word	0x20000b20
    3f60:	20000ba0 	.word	0x20000ba0
    3f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f68:	b08f      	sub	sp, #60	; 0x3c
    3f6a:	4615      	mov	r5, r2
    3f6c:	461e      	mov	r6, r3
    3f6e:	460c      	mov	r4, r1
    3f70:	f002 f9fc 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    3f74:	1828      	adds	r0, r5, r0
    3f76:	f146 0100 	adc.w	r1, r6, #0
    3f7a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
    3f82:	1a80      	subs	r0, r0, r2
    3f84:	eb71 0003 	sbcs.w	r0, r1, r3
    3f88:	f0c0 80e5 	bcc.w	4156 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x156>
    3f8c:	a808      	add	r0, sp, #32
    3f8e:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    3f92:	900a      	str	r0, [sp, #40]	; 0x28
    3f94:	48bc      	ldr	r0, [pc, #752]	; (4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>)
    3f96:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    3f9a:	4408      	add	r0, r1
    3f9c:	9009      	str	r0, [sp, #36]	; 0x24
    3f9e:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    3fa2:	2020      	movs	r0, #32
    3fa4:	f10d 091c 	add.w	r9, sp, #28
    3fa8:	f88d 001c 	strb.w	r0, [sp, #28]
    3fac:	2d20      	cmp	r5, #32
    3fae:	d036      	beq.n	401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    3fb0:	48b6      	ldr	r0, [pc, #728]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    3fb2:	2600      	movs	r6, #0
    3fb4:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    3fb8:	48b5      	ldr	r0, [pc, #724]	; (4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>)
    3fba:	e9d4 7300 	ldrd	r7, r3, [r4]
    3fbe:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    3fc2:	f850 8f08 	ldr.w	r8, [r0, #8]!
    3fc6:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    3fca:	eb18 0101 	adds.w	r1, r8, r1
    3fce:	4172      	adcs	r2, r6
    3fd0:	1a79      	subs	r1, r7, r1
    3fd2:	eb73 0102 	sbcs.w	r1, r3, r2
    3fd6:	d322      	bcc.n	401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    3fd8:	89e1      	ldrh	r1, [r4, #14]
    3fda:	b1c9      	cbz	r1, 4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    3fdc:	89c0      	ldrh	r0, [r0, #14]
    3fde:	b9b8      	cbnz	r0, 4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    3fe0:	f003 f8b6 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    3fe4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    3fe8:	bf08      	it	eq
    3fea:	200d      	moveq	r0, #13
    3fec:	d00b      	beq.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
    3fee:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    3ff2:	3856      	subs	r0, #86	; 0x56
    3ff4:	bf08      	it	eq
    3ff6:	201c      	moveq	r0, #28
    3ff8:	d005      	beq.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
    3ffa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    3ffe:	389f      	subs	r0, #159	; 0x9f
    4000:	bf14      	ite	ne
    4002:	4630      	movne	r0, r6
    4004:	2032      	moveq	r0, #50	; 0x32
    4006:	1c40      	adds	r0, r0, #1
    4008:	ebb7 0108 	subs.w	r1, r7, r8
    400c:	4281      	cmp	r1, r0
    400e:	db06      	blt.n	401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    4010:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    4014:	f889 5000 	strb.w	r5, [r9]
    4018:	7845      	ldrb	r5, [r0, #1]
    401a:	2d20      	cmp	r5, #32
    401c:	d1cc      	bne.n	3fb8 <MPSL_IRQ_RADIO_Handler+0x108>
    401e:	980a      	ldr	r0, [sp, #40]	; 0x28
    4020:	f899 1000 	ldrb.w	r1, [r9]
    4024:	2d20      	cmp	r5, #32
    4026:	7001      	strb	r1, [r0, #0]
    4028:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    402c:	f000 8128 	beq.w	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    4030:	4896      	ldr	r0, [pc, #600]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4032:	4f97      	ldr	r7, [pc, #604]	; (4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>)
    4034:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4038:	2600      	movs	r6, #0
    403a:	9004      	str	r0, [sp, #16]
    403c:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    4040:	f10a 0008 	add.w	r0, sl, #8
    4044:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4048:	f8d4 b000 	ldr.w	fp, [r4]
    404c:	e9d0 8300 	ldrd	r8, r3, [r0]
    4050:	eb1b 0202 	adds.w	r2, fp, r2
    4054:	4171      	adcs	r1, r6
    4056:	ebb8 0202 	subs.w	r2, r8, r2
    405a:	eb73 0101 	sbcs.w	r1, r3, r1
    405e:	d320      	bcc.n	40a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa2>
    4060:	89c0      	ldrh	r0, [r0, #14]
    4062:	2800      	cmp	r0, #0
    4064:	f000 810c 	beq.w	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    4068:	89e0      	ldrh	r0, [r4, #14]
    406a:	2800      	cmp	r0, #0
    406c:	f040 8108 	bne.w	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    4070:	f003 f86e 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4074:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4078:	bf08      	it	eq
    407a:	200d      	moveq	r0, #13
    407c:	d00b      	beq.n	4096 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x96>
    407e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4082:	3856      	subs	r0, #86	; 0x56
    4084:	bf08      	it	eq
    4086:	201c      	moveq	r0, #28
    4088:	d005      	beq.n	4096 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x96>
    408a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    408e:	389f      	subs	r0, #159	; 0x9f
    4090:	bf14      	ite	ne
    4092:	4630      	movne	r0, r6
    4094:	2032      	moveq	r0, #50	; 0x32
    4096:	1c41      	adds	r1, r0, #1
    4098:	ebb8 000b 	subs.w	r0, r8, fp
    409c:	4288      	cmp	r0, r1
    409e:	f280 80ef 	bge.w	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    40a2:	f889 5000 	strb.w	r5, [r9]
    40a6:	f89a 0018 	ldrb.w	r0, [sl, #24]
    40aa:	7c21      	ldrb	r1, [r4, #16]
    40ac:	4281      	cmp	r1, r0
    40ae:	d207      	bcs.n	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    40b0:	9804      	ldr	r0, [sp, #16]
    40b2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    40b6:	7845      	ldrb	r5, [r0, #1]
    40b8:	2d20      	cmp	r5, #32
    40ba:	d1bf      	bne.n	403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>
    40bc:	f000 b8e0 	b.w	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    40c0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    40c4:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    40c8:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    40cc:	f8d0 9008 	ldr.w	r9, [r0, #8]
    40d0:	8ac0      	ldrh	r0, [r0, #22]
    40d2:	eb19 0502 	adds.w	r5, r9, r2
    40d6:	eb41 0806 	adc.w	r8, r1, r6
    40da:	bbb0      	cbnz	r0, 414a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14a>
    40dc:	89e0      	ldrh	r0, [r4, #14]
    40de:	b3a0      	cbz	r0, 414a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14a>
    40e0:	f003 f836 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    40e4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    40e8:	bf08      	it	eq
    40ea:	200d      	moveq	r0, #13
    40ec:	d00b      	beq.n	4106 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x106>
    40ee:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    40f2:	3856      	subs	r0, #86	; 0x56
    40f4:	bf08      	it	eq
    40f6:	201c      	moveq	r0, #28
    40f8:	d005      	beq.n	4106 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x106>
    40fa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    40fe:	389f      	subs	r0, #159	; 0x9f
    4100:	bf14      	ite	ne
    4102:	4630      	movne	r0, r6
    4104:	2032      	moveq	r0, #50	; 0x32
    4106:	1c41      	adds	r1, r0, #1
    4108:	ebb5 0009 	subs.w	r0, r5, r9
    410c:	4288      	cmp	r0, r1
    410e:	da1c      	bge.n	414a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14a>
    4110:	f003 f81e 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4114:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4118:	bf08      	it	eq
    411a:	200d      	moveq	r0, #13
    411c:	d00b      	beq.n	4136 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x136>
    411e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4122:	3856      	subs	r0, #86	; 0x56
    4124:	bf08      	it	eq
    4126:	201c      	moveq	r0, #28
    4128:	d005      	beq.n	4136 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x136>
    412a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    412e:	389f      	subs	r0, #159	; 0x9f
    4130:	bf14      	ite	ne
    4132:	4630      	movne	r0, r6
    4134:	2032      	moveq	r0, #50	; 0x32
    4136:	f89d 1020 	ldrb.w	r1, [sp, #32]
    413a:	1c40      	adds	r0, r0, #1
    413c:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    4140:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    4144:	1815      	adds	r5, r2, r0
    4146:	eb43 0806 	adc.w	r8, r3, r6
    414a:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    414e:	1b49      	subs	r1, r1, r5
    4150:	eb70 0008 	sbcs.w	r0, r0, r8
    4154:	d203      	bcs.n	415e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x15e>
    4156:	b00f      	add	sp, #60	; 0x3c
    4158:	2000      	movs	r0, #0
    415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    415e:	e9c4 5800 	strd	r5, r8, [r4]
    4162:	9818      	ldr	r0, [sp, #96]	; 0x60
    4164:	900b      	str	r0, [sp, #44]	; 0x2c
    4166:	a808      	add	r0, sp, #32
    4168:	900a      	str	r0, [sp, #40]	; 0x28
    416a:	9809      	ldr	r0, [sp, #36]	; 0x24
    416c:	f10d 0a1c 	add.w	sl, sp, #28
    4170:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    4174:	2020      	movs	r0, #32
    4176:	f88d 001c 	strb.w	r0, [sp, #28]
    417a:	2d20      	cmp	r5, #32
    417c:	d037      	beq.n	41ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ee>
    417e:	4843      	ldr	r0, [pc, #268]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4180:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4182:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4186:	bf00      	nop
    4188:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    418c:	e9d4 8300 	ldrd	r8, r3, [r4]
    4190:	f850 9f08 	ldr.w	r9, [r0, #8]!
    4194:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4198:	eb19 0202 	adds.w	r2, r9, r2
    419c:	4171      	adcs	r1, r6
    419e:	ebb8 0202 	subs.w	r2, r8, r2
    41a2:	eb73 0101 	sbcs.w	r1, r3, r1
    41a6:	d322      	bcc.n	41ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ee>
    41a8:	89e1      	ldrh	r1, [r4, #14]
    41aa:	b1c9      	cbz	r1, 41e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e0>
    41ac:	89c0      	ldrh	r0, [r0, #14]
    41ae:	b9b8      	cbnz	r0, 41e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e0>
    41b0:	f002 ffce 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    41b4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    41b8:	bf08      	it	eq
    41ba:	200d      	moveq	r0, #13
    41bc:	d00b      	beq.n	41d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d6>
    41be:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    41c2:	3856      	subs	r0, #86	; 0x56
    41c4:	bf08      	it	eq
    41c6:	201c      	moveq	r0, #28
    41c8:	d005      	beq.n	41d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d6>
    41ca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    41ce:	389f      	subs	r0, #159	; 0x9f
    41d0:	bf14      	ite	ne
    41d2:	4630      	movne	r0, r6
    41d4:	2032      	moveq	r0, #50	; 0x32
    41d6:	1c41      	adds	r1, r0, #1
    41d8:	ebb8 0009 	subs.w	r0, r8, r9
    41dc:	4288      	cmp	r0, r1
    41de:	db06      	blt.n	41ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ee>
    41e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    41e4:	f88a 5000 	strb.w	r5, [sl]
    41e8:	7845      	ldrb	r5, [r0, #1]
    41ea:	2d20      	cmp	r5, #32
    41ec:	d1cc      	bne.n	4188 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x188>
    41ee:	980a      	ldr	r0, [sp, #40]	; 0x28
    41f0:	f89a 1000 	ldrb.w	r1, [sl]
    41f4:	2d20      	cmp	r5, #32
    41f6:	7001      	strb	r1, [r0, #0]
    41f8:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    41fc:	d040      	beq.n	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    41fe:	4923      	ldr	r1, [pc, #140]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4200:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4204:	f8cd 000c 	str.w	r0, [sp, #12]
    4208:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    420c:	f109 0008 	add.w	r0, r9, #8
    4210:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4214:	f8d4 b000 	ldr.w	fp, [r4]
    4218:	e9d0 a300 	ldrd	sl, r3, [r0]
    421c:	eb1b 0202 	adds.w	r2, fp, r2
    4220:	4171      	adcs	r1, r6
    4222:	ebba 0202 	subs.w	r2, sl, r2
    4226:	eb73 0101 	sbcs.w	r1, r3, r1
    422a:	d31b      	bcc.n	4264 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x264>
    422c:	89c0      	ldrh	r0, [r0, #14]
    422e:	b338      	cbz	r0, 4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    4230:	89e0      	ldrh	r0, [r4, #14]
    4232:	bb28      	cbnz	r0, 4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    4234:	f002 ff8c 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4238:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    423c:	bf08      	it	eq
    423e:	200d      	moveq	r0, #13
    4240:	d00b      	beq.n	425a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25a>
    4242:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4246:	3856      	subs	r0, #86	; 0x56
    4248:	bf08      	it	eq
    424a:	201c      	moveq	r0, #28
    424c:	d005      	beq.n	425a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x25a>
    424e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4252:	389f      	subs	r0, #159	; 0x9f
    4254:	bf14      	ite	ne
    4256:	4630      	movne	r0, r6
    4258:	2032      	moveq	r0, #50	; 0x32
    425a:	1c41      	adds	r1, r0, #1
    425c:	ebba 000b 	subs.w	r0, sl, fp
    4260:	4288      	cmp	r0, r1
    4262:	da0d      	bge.n	4280 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x280>
    4264:	f888 5000 	strb.w	r5, [r8]
    4268:	f899 1018 	ldrb.w	r1, [r9, #24]
    426c:	7c20      	ldrb	r0, [r4, #16]
    426e:	4288      	cmp	r0, r1
    4270:	f4bf af26 	bcs.w	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    4274:	9803      	ldr	r0, [sp, #12]
    4276:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    427a:	7845      	ldrb	r5, [r0, #1]
    427c:	2d20      	cmp	r5, #32
    427e:	d1c3      	bne.n	4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>
    4280:	b00f      	add	sp, #60	; 0x3c
    4282:	2001      	movs	r0, #1
    4284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4288:	20000ba0 	.word	0x20000ba0
    428c:	20000b20 	.word	0x20000b20
    4290:	20000720 	.word	0x20000720
    4294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4298:	b083      	sub	sp, #12
    429a:	4691      	mov	r9, r2
    429c:	4604      	mov	r4, r0
    429e:	460d      	mov	r5, r1
    42a0:	4698      	mov	r8, r3
    42a2:	aa01      	add	r2, sp, #4
    42a4:	4669      	mov	r1, sp
    42a6:	4618      	mov	r0, r3
    42a8:	f002 f87c 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    42ac:	f002 fd78 	bl	6da0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    42b0:	f002 f85c 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    42b4:	4607      	mov	r7, r0
    42b6:	481e      	ldr	r0, [pc, #120]	; (4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>)
    42b8:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    42bc:	2600      	movs	r6, #0
    42be:	2920      	cmp	r1, #32
    42c0:	d009      	beq.n	42d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d6>
    42c2:	6882      	ldr	r2, [r0, #8]
    42c4:	68c1      	ldr	r1, [r0, #12]
    42c6:	6900      	ldr	r0, [r0, #16]
    42c8:	1d83      	adds	r3, r0, #6
    42ca:	f146 0000 	adc.w	r0, r6, #0
    42ce:	18d4      	adds	r4, r2, r3
    42d0:	eb41 0500 	adc.w	r5, r1, r0
    42d4:	e026      	b.n	4324 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x324>
    42d6:	340a      	adds	r4, #10
    42d8:	f145 0500 	adc.w	r5, r5, #0
    42dc:	f1b8 0f00 	cmp.w	r8, #0
    42e0:	d017      	beq.n	4312 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x312>
    42e2:	f003 f85d 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    42e6:	b9a0      	cbnz	r0, 4312 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x312>
    42e8:	f002 ff32 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    42ec:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    42f0:	bf08      	it	eq
    42f2:	200d      	moveq	r0, #13
    42f4:	d00b      	beq.n	430e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30e>
    42f6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    42fa:	3856      	subs	r0, #86	; 0x56
    42fc:	bf08      	it	eq
    42fe:	201c      	moveq	r0, #28
    4300:	d005      	beq.n	430e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30e>
    4302:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4306:	389f      	subs	r0, #159	; 0x9f
    4308:	bf14      	ite	ne
    430a:	4630      	movne	r0, r6
    430c:	2032      	moveq	r0, #50	; 0x32
    430e:	1904      	adds	r4, r0, r4
    4310:	4175      	adcs	r5, r6
    4312:	f1b9 0f00 	cmp.w	r9, #0
    4316:	d105      	bne.n	4324 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x324>
    4318:	9800      	ldr	r0, [sp, #0]
    431a:	4287      	cmp	r7, r0
    431c:	d902      	bls.n	4324 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x324>
    431e:	1a38      	subs	r0, r7, r0
    4320:	1904      	adds	r4, r0, r4
    4322:	4175      	adcs	r5, r6
    4324:	b003      	add	sp, #12
    4326:	4620      	mov	r0, r4
    4328:	4629      	mov	r1, r5
    432a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    432e:	0000      	.short	0x0000
    4330:	20000ba0 	.word	0x20000ba0
    4334:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4338:	b081      	sub	sp, #4
    433a:	4605      	mov	r5, r0
    433c:	9802      	ldr	r0, [sp, #8]
    433e:	494a      	ldr	r1, [pc, #296]	; (4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>)
    4340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4344:	4408      	add	r0, r1
    4346:	2600      	movs	r6, #0
    4348:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    434c:	2020      	movs	r0, #32
    434e:	4692      	mov	sl, r2
    4350:	7010      	strb	r0, [r2, #0]
    4352:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    4356:	2c20      	cmp	r4, #32
    4358:	d036      	beq.n	43c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c8>
    435a:	9902      	ldr	r1, [sp, #8]
    435c:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    4360:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4364:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    4368:	e9d5 7300 	ldrd	r7, r3, [r5]
    436c:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4370:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4374:	eb18 0202 	adds.w	r2, r8, r2
    4378:	4171      	adcs	r1, r6
    437a:	1aba      	subs	r2, r7, r2
    437c:	eb73 0101 	sbcs.w	r1, r3, r1
    4380:	d322      	bcc.n	43c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c8>
    4382:	89e9      	ldrh	r1, [r5, #14]
    4384:	b1c9      	cbz	r1, 43ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ba>
    4386:	89c0      	ldrh	r0, [r0, #14]
    4388:	b9b8      	cbnz	r0, 43ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ba>
    438a:	f002 fee1 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    438e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4392:	bf08      	it	eq
    4394:	200d      	moveq	r0, #13
    4396:	d00b      	beq.n	43b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b0>
    4398:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    439c:	3856      	subs	r0, #86	; 0x56
    439e:	bf08      	it	eq
    43a0:	201c      	moveq	r0, #28
    43a2:	d005      	beq.n	43b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b0>
    43a4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    43a8:	389f      	subs	r0, #159	; 0x9f
    43aa:	bf14      	ite	ne
    43ac:	4630      	movne	r0, r6
    43ae:	2032      	moveq	r0, #50	; 0x32
    43b0:	1c41      	adds	r1, r0, #1
    43b2:	ebb7 0008 	subs.w	r0, r7, r8
    43b6:	4288      	cmp	r0, r1
    43b8:	db06      	blt.n	43c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c8>
    43ba:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    43be:	f88a 4000 	strb.w	r4, [sl]
    43c2:	7844      	ldrb	r4, [r0, #1]
    43c4:	2c20      	cmp	r4, #32
    43c6:	d1cd      	bne.n	4364 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x364>
    43c8:	9804      	ldr	r0, [sp, #16]
    43ca:	f89a 1000 	ldrb.w	r1, [sl]
    43ce:	2c20      	cmp	r4, #32
    43d0:	7001      	strb	r1, [r0, #0]
    43d2:	9f04      	ldr	r7, [sp, #16]
    43d4:	9802      	ldr	r0, [sp, #8]
    43d6:	d042      	beq.n	445e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x45e>
    43d8:	4924      	ldr	r1, [pc, #144]	; (446c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x46c>)
    43da:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    43de:	9000      	str	r0, [sp, #0]
    43e0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    43e4:	f8d5 b000 	ldr.w	fp, [r5]
    43e8:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    43ec:	f108 0008 	add.w	r0, r8, #8
    43f0:	eb1b 0201 	adds.w	r2, fp, r1
    43f4:	eb43 0106 	adc.w	r1, r3, r6
    43f8:	e9d0 a300 	ldrd	sl, r3, [r0]
    43fc:	ebba 0202 	subs.w	r2, sl, r2
    4400:	eb73 0101 	sbcs.w	r1, r3, r1
    4404:	d31b      	bcc.n	443e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x43e>
    4406:	89c0      	ldrh	r0, [r0, #14]
    4408:	b348      	cbz	r0, 445e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x45e>
    440a:	89e8      	ldrh	r0, [r5, #14]
    440c:	bb38      	cbnz	r0, 445e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x45e>
    440e:	f002 fe9f 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4412:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4416:	bf08      	it	eq
    4418:	200d      	moveq	r0, #13
    441a:	d00b      	beq.n	4434 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x434>
    441c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4420:	3856      	subs	r0, #86	; 0x56
    4422:	bf08      	it	eq
    4424:	201c      	moveq	r0, #28
    4426:	d005      	beq.n	4434 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x434>
    4428:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    442c:	389f      	subs	r0, #159	; 0x9f
    442e:	bf14      	ite	ne
    4430:	4630      	movne	r0, r6
    4432:	2032      	moveq	r0, #50	; 0x32
    4434:	1c41      	adds	r1, r0, #1
    4436:	ebba 000b 	subs.w	r0, sl, fp
    443a:	4288      	cmp	r0, r1
    443c:	da0f      	bge.n	445e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x45e>
    443e:	703c      	strb	r4, [r7, #0]
    4440:	f898 1018 	ldrb.w	r1, [r8, #24]
    4444:	7c28      	ldrb	r0, [r5, #16]
    4446:	4288      	cmp	r0, r1
    4448:	d303      	bcc.n	4452 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x452>
    444a:	b005      	add	sp, #20
    444c:	2000      	movs	r0, #0
    444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4452:	9800      	ldr	r0, [sp, #0]
    4454:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4458:	7844      	ldrb	r4, [r0, #1]
    445a:	2c20      	cmp	r4, #32
    445c:	d1c0      	bne.n	43e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e0>
    445e:	b005      	add	sp, #20
    4460:	2001      	movs	r0, #1
    4462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4466:	0000      	.short	0x0000
    4468:	20000ba0 	.word	0x20000ba0
    446c:	20000b20 	.word	0x20000b20
    4470:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4474:	b09c      	sub	sp, #112	; 0x70
    4476:	461f      	mov	r7, r3
    4478:	f002 f9e4 	bl	6844 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    447c:	4604      	mov	r4, r0
    447e:	460d      	mov	r5, r1
    4480:	f002 fc8e 	bl	6da0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4484:	4606      	mov	r6, r0
    4486:	981e      	ldr	r0, [sp, #120]	; 0x78
    4488:	2801      	cmp	r0, #1
    448a:	bf18      	it	ne
    448c:	2802      	cmpne	r0, #2
    448e:	d005      	beq.n	449c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x49c>
    4490:	f640 1156 	movw	r1, #2390	; 0x956
    4494:	f04f 0070 	mov.w	r0, #112	; 0x70
    4498:	f002 fffa 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    449c:	49fe      	ldr	r1, [pc, #1016]	; (4898 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x898>)
    449e:	2001      	movs	r0, #1
    44a0:	6008      	str	r0, [r1, #0]
    44a2:	49fe      	ldr	r1, [pc, #1016]	; (489c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x89c>)
    44a4:	6889      	ldr	r1, [r1, #8]
    44a6:	6008      	str	r0, [r1, #0]
    44a8:	2000      	movs	r0, #0
    44aa:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    44ae:	900c      	str	r0, [sp, #48]	; 0x30
    44b0:	1e40      	subs	r0, r0, #1
    44b2:	900d      	str	r0, [sp, #52]	; 0x34
    44b4:	48fa      	ldr	r0, [pc, #1000]	; (48a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a0>)
    44b6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    44ba:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    44be:	f100 0108 	add.w	r1, r0, #8
    44c2:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    44c6:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    44ca:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    44ce:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    44d2:	980e      	ldr	r0, [sp, #56]	; 0x38
    44d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    44d8:	f005 fc0c 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    44dc:	4602      	mov	r2, r0
    44de:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    44e2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    44e6:	4bef      	ldr	r3, [pc, #956]	; (48a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a4>)
    44e8:	4440      	add	r0, r8
    44ea:	1c41      	adds	r1, r0, #1
    44ec:	1850      	adds	r0, r2, r1
    44ee:	429a      	cmp	r2, r3
    44f0:	d856      	bhi.n	45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>
    44f2:	4aed      	ldr	r2, [pc, #948]	; (48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>)
    44f4:	4291      	cmp	r1, r2
    44f6:	dc5b      	bgt.n	45b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b0>
    44f8:	4252      	negs	r2, r2
    44fa:	4291      	cmp	r1, r2
    44fc:	db60      	blt.n	45c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c0>
    44fe:	1c59      	adds	r1, r3, #1
    4500:	4281      	cmp	r1, r0
    4502:	bfdc      	itt	le
    4504:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4508:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    450c:	dd05      	ble.n	451a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x51a>
    450e:	2800      	cmp	r0, #0
    4510:	bfbc      	itt	lt
    4512:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4516:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    451a:	9017      	str	r0, [sp, #92]	; 0x5c
    451c:	48e3      	ldr	r0, [pc, #908]	; (48ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ac>)
    451e:	f1b8 0f00 	cmp.w	r8, #0
    4522:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    4526:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    452a:	bf14      	ite	ne
    452c:	f04f 0a01 	movne.w	sl, #1
    4530:	f04f 0a00 	moveq.w	sl, #0
    4534:	f002 ff34 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4538:	9019      	str	r0, [sp, #100]	; 0x64
    453a:	f1ba 0f00 	cmp.w	sl, #0
    453e:	d00b      	beq.n	4558 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x558>
    4540:	49db      	ldr	r1, [pc, #876]	; (48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>)
    4542:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    4546:	ea6f 0200 	mvn.w	r2, r0
    454a:	ea72 0001 	orns	r0, r2, r1
    454e:	bf02      	ittt	eq
    4550:	9819      	ldreq	r0, [sp, #100]	; 0x64
    4552:	2800      	cmpeq	r0, #0
    4554:	2701      	moveq	r7, #1
    4556:	d001      	beq.n	455c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x55c>
    4558:	f04f 0700 	mov.w	r7, #0
    455c:	f002 fdf8 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4560:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4564:	bf08      	it	eq
    4566:	200d      	moveq	r0, #13
    4568:	d00b      	beq.n	4582 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x582>
    456a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    456e:	3856      	subs	r0, #86	; 0x56
    4570:	bf08      	it	eq
    4572:	201c      	moveq	r0, #28
    4574:	d005      	beq.n	4582 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x582>
    4576:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    457a:	389f      	subs	r0, #159	; 0x9f
    457c:	bf14      	ite	ne
    457e:	2000      	movne	r0, #0
    4580:	2032      	moveq	r0, #50	; 0x32
    4582:	f04f 0900 	mov.w	r9, #0
    4586:	46cb      	mov	fp, r9
    4588:	9016      	str	r0, [sp, #88]	; 0x58
    458a:	4546      	cmp	r6, r8
    458c:	d936      	bls.n	45fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5fc>
    458e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4590:	43f3      	mvns	r3, r6
    4592:	f8df c310 	ldr.w	ip, [pc, #784]	; 48a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a4>
    4596:	18c8      	adds	r0, r1, r3
    4598:	46e9      	mov	r9, sp
    459a:	aa1a      	add	r2, sp, #104	; 0x68
    459c:	4561      	cmp	r1, ip
    459e:	d904      	bls.n	45aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5aa>
    45a0:	f240 517f 	movw	r1, #1407	; 0x57f
    45a4:	2070      	movs	r0, #112	; 0x70
    45a6:	f002 ff73 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45aa:	49bf      	ldr	r1, [pc, #764]	; (48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>)
    45ac:	428b      	cmp	r3, r1
    45ae:	dd04      	ble.n	45ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ba>
    45b0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    45b4:	2070      	movs	r0, #112	; 0x70
    45b6:	f002 ff6b 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45ba:	49be      	ldr	r1, [pc, #760]	; (48b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b4>)
    45bc:	428b      	cmp	r3, r1
    45be:	da04      	bge.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45c0:	f240 5181 	movw	r1, #1409	; 0x581
    45c4:	2070      	movs	r0, #112	; 0x70
    45c6:	f002 ff63 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45ca:	49bb      	ldr	r1, [pc, #748]	; (48b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b8>)
    45cc:	4281      	cmp	r1, r0
    45ce:	bfdc      	itt	le
    45d0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    45d4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    45d8:	dd05      	ble.n	45e6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5e6>
    45da:	2800      	cmp	r0, #0
    45dc:	bfbc      	itt	lt
    45de:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    45e2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    45e6:	4649      	mov	r1, r9
    45e8:	f001 fedc 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    45ec:	9800      	ldr	r0, [sp, #0]
    45ee:	990e      	ldr	r1, [sp, #56]	; 0x38
    45f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45f4:	9000      	str	r0, [sp, #0]
    45f6:	1a08      	subs	r0, r1, r0
    45f8:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    45fc:	2f00      	cmp	r7, #0
    45fe:	bf18      	it	ne
    4600:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    4604:	d105      	bne.n	4612 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x612>
    4606:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    460a:	2800      	cmp	r0, #0
    460c:	bf18      	it	ne
    460e:	f04f 0b02 	movne.w	fp, #2
    4612:	43e0      	mvns	r0, r4
    4614:	ea70 0005 	orns	r0, r0, r5
    4618:	d022      	beq.n	4660 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x660>
    461a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    461e:	1a22      	subs	r2, r4, r0
    4620:	eb75 0201 	sbcs.w	r2, r5, r1
    4624:	d20c      	bcs.n	4640 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x640>
    4626:	1b02      	subs	r2, r0, r4
    4628:	eb61 0105 	sbc.w	r1, r1, r5
    462c:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4630:	f171 0100 	sbcs.w	r1, r1, #0
    4634:	d311      	bcc.n	465a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x65a>
    4636:	f640 1195 	movw	r1, #2453	; 0x995
    463a:	2070      	movs	r0, #112	; 0x70
    463c:	f002 ff28 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4640:	1a22      	subs	r2, r4, r0
    4642:	eb65 0101 	sbc.w	r1, r5, r1
    4646:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    464a:	f171 0100 	sbcs.w	r1, r1, #0
    464e:	d304      	bcc.n	465a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x65a>
    4650:	f640 1199 	movw	r1, #2457	; 0x999
    4654:	2070      	movs	r0, #112	; 0x70
    4656:	f002 ff1b 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    465a:	1b00      	subs	r0, r0, r4
    465c:	2801      	cmp	r0, #1
    465e:	da03      	bge.n	4668 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x668>
    4660:	981c      	ldr	r0, [sp, #112]	; 0x70
    4662:	901a      	str	r0, [sp, #104]	; 0x68
    4664:	2003      	movs	r0, #3
    4666:	e00d      	b.n	4684 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x684>
    4668:	b157      	cbz	r7, 4680 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x680>
    466a:	4891      	ldr	r0, [pc, #580]	; (48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>)
    466c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    4670:	b130      	cbz	r0, 4680 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x680>
    4672:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4676:	f110 0b00 	adds.w	fp, r0, #0
    467a:	bf18      	it	ne
    467c:	f04f 0b02 	movne.w	fp, #2
    4680:	2000      	movs	r0, #0
    4682:	941a      	str	r4, [sp, #104]	; 0x68
    4684:	4483      	add	fp, r0
    4686:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    468a:	ebb0 0009 	subs.w	r0, r0, r9
    468e:	f162 0100 	sbc.w	r1, r2, #0
    4692:	1e42      	subs	r2, r0, #1
    4694:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4696:	f141 3eff 	adc.w	lr, r1, #4294967295
    469a:	1ad3      	subs	r3, r2, r3
    469c:	455b      	cmp	r3, fp
    469e:	db08      	blt.n	46b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6b2>
    46a0:	f1b9 0f00 	cmp.w	r9, #0
    46a4:	d032      	beq.n	470c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70c>
    46a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    46a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    46ac:	444b      	add	r3, r9
    46ae:	9310      	str	r3, [sp, #64]	; 0x40
    46b0:	e02c      	b.n	470c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70c>
    46b2:	f1b9 0f00 	cmp.w	r9, #0
    46b6:	d005      	beq.n	46c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c4>
    46b8:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    46bc:	b920      	cbnz	r0, 46c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c8>
    46be:	f002 fb65 	bl	6d8c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    46c2:	b108      	cbz	r0, 46c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c8>
    46c4:	b9af      	cbnz	r7, 46f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6f2>
    46c6:	e00c      	b.n	46e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e2>
    46c8:	b92f      	cbnz	r7, 46d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6d6>
    46ca:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    46ce:	2800      	cmp	r0, #0
    46d0:	bf18      	it	ne
    46d2:	f1ab 0b02 	subne.w	fp, fp, #2
    46d6:	f04f 0900 	mov.w	r9, #0
    46da:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    46de:	464e      	mov	r6, r9
    46e0:	e007      	b.n	46f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6f2>
    46e2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    46e6:	b120      	cbz	r0, 46f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6f2>
    46e8:	2000      	movs	r0, #0
    46ea:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    46ee:	f1ab 0b02 	sub.w	fp, fp, #2
    46f2:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    46f6:	ebb0 0009 	subs.w	r0, r0, r9
    46fa:	f162 0100 	sbc.w	r1, r2, #0
    46fe:	1e42      	subs	r2, r0, #1
    4700:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4702:	f141 3eff 	adc.w	lr, r1, #4294967295
    4706:	1ad3      	subs	r3, r2, r3
    4708:	455b      	cmp	r3, fp
    470a:	db7d      	blt.n	4808 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x808>
    470c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    470e:	b99b      	cbnz	r3, 4738 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x738>
    4710:	4b67      	ldr	r3, [pc, #412]	; (48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>)
    4712:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    4716:	ea6f 090c 	mvn.w	r9, ip
    471a:	ea79 0903 	orns	r9, r9, r3
    471e:	d00b      	beq.n	4738 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x738>
    4720:	ebb0 0c0c 	subs.w	ip, r0, ip
    4724:	9816      	ldr	r0, [sp, #88]	; 0x58
    4726:	eb61 0303 	sbc.w	r3, r1, r3
    472a:	ebbc 0000 	subs.w	r0, ip, r0
    472e:	f173 0000 	sbcs.w	r0, r3, #0
    4732:	bf38      	it	cc
    4734:	2000      	movcc	r0, #0
    4736:	d300      	bcc.n	473a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x73a>
    4738:	2001      	movs	r0, #1
    473a:	ea3a 0000 	bics.w	r0, sl, r0
    473e:	d163      	bne.n	4808 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x808>
    4740:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    4744:	e9cd 0107 	strd	r0, r1, [sp, #28]
    4748:	981e      	ldr	r0, [sp, #120]	; 0x78
    474a:	4691      	mov	r9, r2
    474c:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    4750:	46f3      	mov	fp, lr
    4752:	2700      	movs	r7, #0
    4754:	f002 fcfc 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4758:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    475c:	bf08      	it	eq
    475e:	200d      	moveq	r0, #13
    4760:	d00b      	beq.n	477a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x77a>
    4762:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4766:	3856      	subs	r0, #86	; 0x56
    4768:	bf08      	it	eq
    476a:	201c      	moveq	r0, #28
    476c:	d005      	beq.n	477a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x77a>
    476e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4772:	389f      	subs	r0, #159	; 0x9f
    4774:	bf14      	ite	ne
    4776:	4638      	movne	r0, r7
    4778:	2032      	moveq	r0, #50	; 0x32
    477a:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    477e:	300b      	adds	r0, #11
    4780:	ebb9 0202 	subs.w	r2, r9, r2
    4784:	eb6b 0303 	sbc.w	r3, fp, r3
    4788:	1a10      	subs	r0, r2, r0
    478a:	f173 0000 	sbcs.w	r0, r3, #0
    478e:	d22a      	bcs.n	47e6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7e6>
    4790:	9819      	ldr	r0, [sp, #100]	; 0x64
    4792:	2801      	cmp	r0, #1
    4794:	d002      	beq.n	479c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x79c>
    4796:	9818      	ldr	r0, [sp, #96]	; 0x60
    4798:	b148      	cbz	r0, 47ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ae>
    479a:	e017      	b.n	47cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7cc>
    479c:	43e0      	mvns	r0, r4
    479e:	ea70 0005 	orns	r0, r0, r5
    47a2:	d127      	bne.n	47f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7f4>
    47a4:	f640 01d7 	movw	r1, #2263	; 0x8d7
    47a8:	2070      	movs	r0, #112	; 0x70
    47aa:	f002 fe71 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    47ae:	43e0      	mvns	r0, r4
    47b0:	ea70 0005 	orns	r0, r0, r5
    47b4:	d00a      	beq.n	47cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7cc>
    47b6:	d01d      	beq.n	47f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7f4>
    47b8:	ebb4 0009 	subs.w	r0, r4, r9
    47bc:	eb65 010b 	sbc.w	r1, r5, fp
    47c0:	2300      	movs	r3, #0
    47c2:	f1d0 0204 	rsbs	r2, r0, #4
    47c6:	eb73 0201 	sbcs.w	r2, r3, r1
    47ca:	da06      	bge.n	47da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7da>
    47cc:	464c      	mov	r4, r9
    47ce:	465d      	mov	r5, fp
    47d0:	4620      	mov	r0, r4
    47d2:	4629      	mov	r1, r5
    47d4:	f001 ff16 	bl	6604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    47d8:	e00c      	b.n	47f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7f4>
    47da:	2200      	movs	r2, #0
    47dc:	1a10      	subs	r0, r2, r0
    47de:	eb72 0001 	sbcs.w	r0, r2, r1
    47e2:	db11      	blt.n	4808 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x808>
    47e4:	e006      	b.n	47f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7f4>
    47e6:	464c      	mov	r4, r9
    47e8:	465d      	mov	r5, fp
    47ea:	4620      	mov	r0, r4
    47ec:	4629      	mov	r1, r5
    47ee:	f001 ff09 	bl	6604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    47f2:	4657      	mov	r7, sl
    47f4:	43e1      	mvns	r1, r4
    47f6:	ea71 0005 	orns	r0, r1, r5
    47fa:	d071      	beq.n	48e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e0>
    47fc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4800:	f04f 0b00 	mov.w	fp, #0
    4804:	990e      	ldr	r1, [sp, #56]	; 0x38
    4806:	e000      	b.n	480a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80a>
    4808:	e06f      	b.n	48ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ea>
    480a:	1a0b      	subs	r3, r1, r0
    480c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    4810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4814:	eb11 010c 	adds.w	r1, r1, ip
    4818:	1a08      	subs	r0, r1, r0
    481a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    481e:	2b01      	cmp	r3, #1
    4820:	d363      	bcc.n	48ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ea>
    4822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4826:	bf98      	it	ls
    4828:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    482c:	d85d      	bhi.n	48ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8ea>
    482e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4832:	f005 fa5f 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4836:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4838:	4a1b      	ldr	r2, [pc, #108]	; (48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>)
    483a:	1a0d      	subs	r5, r1, r0
    483c:	1aaa      	subs	r2, r5, r2
    483e:	f17b 0200 	sbcs.w	r2, fp, #0
    4842:	d316      	bcc.n	4872 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x872>
    4844:	4b18      	ldr	r3, [pc, #96]	; (48a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a8>)
    4846:	1a42      	subs	r2, r0, r1
    4848:	1ad3      	subs	r3, r2, r3
    484a:	f17b 0300 	sbcs.w	r3, fp, #0
    484e:	d310      	bcc.n	4872 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x872>
    4850:	4b14      	ldr	r3, [pc, #80]	; (48a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8a4>)
    4852:	42ab      	cmp	r3, r5
    4854:	bf3e      	ittt	cc
    4856:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    485a:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    485e:	1845      	addcc	r5, r0, r1
    4860:	d307      	bcc.n	4872 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x872>
    4862:	4293      	cmp	r3, r2
    4864:	d245      	bcs.n	48f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8f2>
    4866:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    486a:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    486e:	4408      	add	r0, r1
    4870:	4245      	negs	r5, r0
    4872:	f8df 903c 	ldr.w	r9, [pc, #60]	; 48b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8b0>
    4876:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    487a:	b378      	cbz	r0, 48dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8dc>
    487c:	981e      	ldr	r0, [sp, #120]	; 0x78
    487e:	2801      	cmp	r0, #1
    4880:	d005      	beq.n	488e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x88e>
    4882:	2002      	movs	r0, #2
    4884:	f002 f94a 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4888:	2001      	movs	r0, #1
    488a:	f002 f947 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    488e:	45b0      	cmp	r8, r6
    4890:	d240      	bcs.n	4914 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x914>
    4892:	eba5 0106 	sub.w	r1, r5, r6
    4896:	e011      	b.n	48bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8bc>
    4898:	40000508 	.word	0x40000508
    489c:	20000120 	.word	0x20000120
    48a0:	20000720 	.word	0x20000720
    48a4:	1e847fff 	.word	0x1e847fff
    48a8:	0f424000 	.word	0x0f424000
    48ac:	20000b20 	.word	0x20000b20
    48b0:	20000ba0 	.word	0x20000ba0
    48b4:	f0bdc000 	.word	0xf0bdc000
    48b8:	1e848000 	.word	0x1e848000
    48bc:	f04f 0002 	mov.w	r0, #2
    48c0:	f002 f872 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    48c4:	b398      	cbz	r0, 492e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x92e>
    48c6:	f1b8 0f00 	cmp.w	r8, #0
    48ca:	bf1c      	itt	ne
    48cc:	eba5 0108 	subne.w	r1, r5, r8
    48d0:	2001      	movne	r0, #1
    48d2:	d035      	beq.n	4940 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x940>
    48d4:	f002 f868 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    48d8:	b348      	cbz	r0, 492e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x92e>
    48da:	e031      	b.n	4940 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x940>
    48dc:	e00e      	b.n	48fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8fc>
    48de:	e7ff      	b.n	48e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e0>
    48e0:	f640 2103 	movw	r1, #2563	; 0xa03
    48e4:	2070      	movs	r0, #112	; 0x70
    48e6:	f002 fdd3 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48ea:	b020      	add	sp, #128	; 0x80
    48ec:	2000      	movs	r0, #0
    48ee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    48f2:	f640 21d7 	movw	r1, #2775	; 0xad7
    48f6:	2070      	movs	r0, #112	; 0x70
    48f8:	f002 fdca 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48fc:	45b0      	cmp	r8, r6
    48fe:	bf34      	ite	cc
    4900:	4630      	movcc	r0, r6
    4902:	4640      	movcs	r0, r8
    4904:	301e      	adds	r0, #30
    4906:	42a8      	cmp	r0, r5
    4908:	dbb8      	blt.n	487c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x87c>
    490a:	f640 2117 	movw	r1, #2583	; 0xa17
    490e:	2070      	movs	r0, #112	; 0x70
    4910:	f002 fdbe 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4914:	d90c      	bls.n	4930 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x930>
    4916:	eba5 0108 	sub.w	r1, r5, r8
    491a:	2001      	movs	r0, #1
    491c:	f002 f844 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4920:	b128      	cbz	r0, 492e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x92e>
    4922:	2e00      	cmp	r6, #0
    4924:	bf1c      	itt	ne
    4926:	1ba9      	subne	r1, r5, r6
    4928:	2002      	movne	r0, #2
    492a:	d009      	beq.n	4940 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x940>
    492c:	e7d2      	b.n	48d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8d4>
    492e:	e034      	b.n	499a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x99a>
    4930:	ea56 0008 	orrs.w	r0, r6, r8
    4934:	d004      	beq.n	4940 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x940>
    4936:	f640 113a 	movw	r1, #2362	; 0x93a
    493a:	2070      	movs	r0, #112	; 0x70
    493c:	f002 fda8 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4940:	4629      	mov	r1, r5
    4942:	2000      	movs	r0, #0
    4944:	f002 f830 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4948:	b338      	cbz	r0, 499a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x99a>
    494a:	2601      	movs	r6, #1
    494c:	f1ba 0f00 	cmp.w	sl, #0
    4950:	bf04      	itt	eq
    4952:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    4956:	2800      	cmpeq	r0, #0
    4958:	d000      	beq.n	495c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x95c>
    495a:	b347      	cbz	r7, 49ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9ae>
    495c:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    4960:	ea6f 0101 	mvn.w	r1, r1
    4964:	ea71 0000 	orns	r0, r1, r0
    4968:	d006      	beq.n	4978 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x978>
    496a:	f002 fbf7 	bl	715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    496e:	f04f 30ff 	mov.w	r0, #4294967295
    4972:	4601      	mov	r1, r0
    4974:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    4978:	b1ff      	cbz	r7, 49ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9ba>
    497a:	9816      	ldr	r0, [sp, #88]	; 0x58
    497c:	1a20      	subs	r0, r4, r0
    497e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    4982:	f04f 0005 	mov.w	r0, #5
    4986:	f002 f80f 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    498a:	b370      	cbz	r0, 49ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9ea>
    498c:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    4990:	2800      	cmp	r0, #0
    4992:	bf08      	it	eq
    4994:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    4998:	e017      	b.n	49ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9ca>
    499a:	2002      	movs	r0, #2
    499c:	f002 f8be 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    49a0:	2001      	movs	r0, #1
    49a2:	f002 f8bb 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    49a6:	b020      	add	sp, #128	; 0x80
    49a8:	2000      	movs	r0, #0
    49aa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    49ae:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    49b2:	43c0      	mvns	r0, r0
    49b4:	ea70 0001 	orns	r0, r0, r1
    49b8:	d012      	beq.n	49e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9e0>
    49ba:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    49be:	b120      	cbz	r0, 49ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9ca>
    49c0:	2005      	movs	r0, #5
    49c2:	f002 f8ab 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    49c6:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    49ca:	eba5 0008 	sub.w	r0, r5, r8
    49ce:	f1a0 0119 	sub.w	r1, r0, #25
    49d2:	2900      	cmp	r1, #0
    49d4:	dc0f      	bgt.n	49f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9f6>
    49d6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    49da:	2070      	movs	r0, #112	; 0x70
    49dc:	f002 fd58 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49e0:	f002 fbd8 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    49e4:	f001 ffbe 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    49e8:	e7c4      	b.n	4974 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x974>
    49ea:	e7ff      	b.n	49ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9ec>
    49ec:	f240 21e6 	movw	r1, #742	; 0x2e6
    49f0:	2070      	movs	r0, #112	; 0x70
    49f2:	f002 fd4d 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    49f6:	2003      	movs	r0, #3
    49f8:	f001 ffd6 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    49fc:	b338      	cbz	r0, 4a4e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4e>
    49fe:	4816      	ldr	r0, [pc, #88]	; (4a58 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa58>)
    4a00:	6880      	ldr	r0, [r0, #8]
    4a02:	f8c0 b000 	str.w	fp, [r0]
    4a06:	4815      	ldr	r0, [pc, #84]	; (4a5c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa5c>)
    4a08:	f8c0 b000 	str.w	fp, [r0]
    4a0c:	ac0c      	add	r4, sp, #48	; 0x30
    4a0e:	4814      	ldr	r0, [pc, #80]	; (4a60 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa60>)
    4a10:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    4a14:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    4a18:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    4a1c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    4a20:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    4a24:	ac10      	add	r4, sp, #64	; 0x40
    4a26:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    4a2a:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    4a2e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    4a32:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    4a36:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    4a3a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    4a3e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    4a42:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    4a46:	b020      	add	sp, #128	; 0x80
    4a48:	2001      	movs	r0, #1
    4a4a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4a4e:	f640 2148 	movw	r1, #2632	; 0xa48
    4a52:	2070      	movs	r0, #112	; 0x70
    4a54:	f002 fd1c 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a58:	20000120 	.word	0x20000120
    4a5c:	40000508 	.word	0x40000508
    4a60:	20000b20 	.word	0x20000b20
    4a64:	b570      	push	{r4, r5, r6, lr}
    4a66:	4d1d      	ldr	r5, [pc, #116]	; (4adc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xadc>)
    4a68:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    4a6c:	2820      	cmp	r0, #32
    4a6e:	bf18      	it	ne
    4a70:	bd70      	popne	{r4, r5, r6, pc}
    4a72:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    4a76:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    4a7a:	4428      	add	r0, r5
    4a7c:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4a80:	2c20      	cmp	r4, #32
    4a82:	d026      	beq.n	4ad2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xad2>
    4a84:	4b16      	ldr	r3, [pc, #88]	; (4ae0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xae0>)
    4a86:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    4a8a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    4a8e:	7849      	ldrb	r1, [r1, #1]
    4a90:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    4a94:	20ff      	movs	r0, #255	; 0xff
    4a96:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    4a9a:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    4a9e:	4621      	mov	r1, r4
    4aa0:	2002      	movs	r0, #2
    4aa2:	f000 f88b 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    4aa6:	2000      	movs	r0, #0
    4aa8:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    4aac:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    4ab0:	480c      	ldr	r0, [pc, #48]	; (4ae4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xae4>)
    4ab2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    4ab6:	7e00      	ldrb	r0, [r0, #24]
    4ab8:	2800      	cmp	r0, #0
    4aba:	bf08      	it	eq
    4abc:	f002 fe50 	bleq	7760 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    4ac0:	2000      	movs	r0, #0
    4ac2:	4909      	ldr	r1, [pc, #36]	; (4ae8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xae8>)
    4ac4:	6849      	ldr	r1, [r1, #4]
    4ac6:	2900      	cmp	r1, #0
    4ac8:	bf08      	it	eq
    4aca:	bd70      	popeq	{r4, r5, r6, pc}
    4acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ad0:	4708      	bx	r1
    4ad2:	f240 311d 	movw	r1, #797	; 0x31d
    4ad6:	2070      	movs	r0, #112	; 0x70
    4ad8:	f002 fcda 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4adc:	20000ba0 	.word	0x20000ba0
    4ae0:	20000b20 	.word	0x20000b20
    4ae4:	20000720 	.word	0x20000720
    4ae8:	20000120 	.word	0x20000120
    4aec:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4af0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4bac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbac>
    4af4:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    4af8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    4afc:	4440      	add	r0, r8
    4afe:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    4b02:	2c20      	cmp	r4, #32
    4b04:	bf08      	it	eq
    4b06:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4b0a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 4bb0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbb0>
    4b0e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4bb4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbb4>
    4b12:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    4b16:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    4b1a:	2607      	movs	r6, #7
    4b1c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    4b20:	2801      	cmp	r0, #1
    4b22:	d00e      	beq.n	4b42 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb42>
    4b24:	2804      	cmp	r0, #4
    4b26:	bf08      	it	eq
    4b28:	2602      	moveq	r6, #2
    4b2a:	d00a      	beq.n	4b42 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb42>
    4b2c:	2805      	cmp	r0, #5
    4b2e:	bf0c      	ite	eq
    4b30:	2603      	moveq	r6, #3
    4b32:	2806      	cmpne	r0, #6
    4b34:	d005      	beq.n	4b42 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb42>
    4b36:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    4b3a:	f04f 0070 	mov.w	r0, #112	; 0x70
    4b3e:	f002 fca7 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4b42:	f1bb 0f00 	cmp.w	fp, #0
    4b46:	bf18      	it	ne
    4b48:	f3af 8000 	nopne.w
    4b4c:	f3ef 8010 	mrs	r0, PRIMASK
    4b50:	b672      	cpsid	i
    4b52:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    4b56:	784a      	ldrb	r2, [r1, #1]
    4b58:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4b5c:	4441      	add	r1, r8
    4b5e:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    4b62:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    4b66:	42a2      	cmp	r2, r4
    4b68:	bf04      	itt	eq
    4b6a:	2220      	moveq	r2, #32
    4b6c:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    4b70:	b1a8      	cbz	r0, 4b9e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb9e>
    4b72:	462a      	mov	r2, r5
    4b74:	4621      	mov	r1, r4
    4b76:	2001      	movs	r0, #1
    4b78:	f000 f820 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    4b7c:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    4b80:	e9d1 2000 	ldrd	r2, r0, [r1]
    4b84:	4631      	mov	r1, r6
    4b86:	4790      	blx	r2
    4b88:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    4b8c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    4b90:	4440      	add	r0, r8
    4b92:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    4b96:	2c20      	cmp	r4, #32
    4b98:	d1bd      	bne.n	4b16 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb16>
    4b9a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4b9e:	4806      	ldr	r0, [pc, #24]	; (4bb8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbb8>)
    4ba0:	2800      	cmp	r0, #0
    4ba2:	bf18      	it	ne
    4ba4:	f3af 8000 	nopne.w
    4ba8:	b662      	cpsie	i
    4baa:	e7e2      	b.n	4b72 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb72>
    4bac:	20000ba0 	.word	0x20000ba0
    4bb0:	00000000 	.word	0x00000000
    4bb4:	20000b20 	.word	0x20000b20
    4bb8:	00000000 	.word	0x00000000
    4bbc:	f8df c058 	ldr.w	ip, [pc, #88]	; 4c18 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc18>
    4bc0:	b510      	push	{r4, lr}
    4bc2:	2300      	movs	r3, #0
    4bc4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    4bc8:	2807      	cmp	r0, #7
    4bca:	d21f      	bcs.n	4c0c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0c>
    4bcc:	e8df f000 	tbb	[pc, r0]
    4bd0:	05050505 	.word	0x05050505
    4bd4:	00040404 	.word	0x00040404
    4bd8:	2301      	movs	r3, #1
    4bda:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    4bde:	2b00      	cmp	r3, #0
    4be0:	bf08      	it	eq
    4be2:	bd10      	popeq	{r4, pc}
    4be4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4be8:	480c      	ldr	r0, [pc, #48]	; (4c1c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc1c>)
    4bea:	4402      	add	r2, r0
    4bec:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    4bf0:	2820      	cmp	r0, #32
    4bf2:	bf0e      	itee	eq
    4bf4:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    4bf8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    4bfc:	7041      	strbne	r1, [r0, #1]
    4bfe:	2020      	movs	r0, #32
    4c00:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    4c04:	7058      	strb	r0, [r3, #1]
    4c06:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    4c0a:	bd10      	pop	{r4, pc}
    4c0c:	f44f 7117 	mov.w	r1, #604	; 0x25c
    4c10:	2070      	movs	r0, #112	; 0x70
    4c12:	f002 fc3d 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c16:	0000      	.short	0x0000
    4c18:	20000b20 	.word	0x20000b20
    4c1c:	20000ba0 	.word	0x20000ba0
    4c20:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4c24:	460f      	mov	r7, r1
    4c26:	4680      	mov	r8, r0
    4c28:	f8df b154 	ldr.w	fp, [pc, #340]	; 4d80 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd80>
    4c2c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    4c30:	4458      	add	r0, fp
    4c32:	f1b8 0f01 	cmp.w	r8, #1
    4c36:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4c3a:	4625      	mov	r5, r4
    4c3c:	bf18      	it	ne
    4c3e:	f1b8 0f02 	cmpne.w	r8, #2
    4c42:	d005      	beq.n	4c50 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc50>
    4c44:	f640 217e 	movw	r1, #2686	; 0xa7e
    4c48:	f04f 0070 	mov.w	r0, #112	; 0x70
    4c4c:	f002 fc20 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4c50:	2d20      	cmp	r5, #32
    4c52:	d041      	beq.n	4cd8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcd8>
    4c54:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    4c58:	2600      	movs	r6, #0
    4c5a:	2800      	cmp	r0, #0
    4c5c:	bf08      	it	eq
    4c5e:	2602      	moveq	r6, #2
    4c60:	f001 fcca 	bl	65f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    4c64:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4d84 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd84>
    4c68:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    4c6c:	6899      	ldr	r1, [r3, #8]
    4c6e:	691b      	ldr	r3, [r3, #16]
    4c70:	1a0a      	subs	r2, r1, r0
    4c72:	18c9      	adds	r1, r1, r3
    4c74:	1a09      	subs	r1, r1, r0
    4c76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4c7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4c7e:	4296      	cmp	r6, r2
    4c80:	bf99      	ittee	ls
    4c82:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    4c86:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    4c8a:	4a3f      	ldrhi	r2, [pc, #252]	; (4d88 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd88>)
    4c8c:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    4c90:	d920      	bls.n	4cd4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcd4>
    4c92:	4622      	mov	r2, r4
    4c94:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    4c98:	784c      	ldrb	r4, [r1, #1]
    4c9a:	2c20      	cmp	r4, #32
    4c9c:	d012      	beq.n	4cc4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc4>
    4c9e:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    4ca2:	6899      	ldr	r1, [r3, #8]
    4ca4:	691b      	ldr	r3, [r3, #16]
    4ca6:	ebb1 0c00 	subs.w	ip, r1, r0
    4caa:	18c9      	adds	r1, r1, r3
    4cac:	1a09      	subs	r1, r1, r0
    4cae:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    4cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4cb6:	4566      	cmp	r6, ip
    4cb8:	bf9c      	itt	ls
    4cba:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    4cbe:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    4cc2:	d8e6      	bhi.n	4c92 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc92>
    4cc4:	2a20      	cmp	r2, #32
    4cc6:	d005      	beq.n	4cd4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcd4>
    4cc8:	463b      	mov	r3, r7
    4cca:	2120      	movs	r1, #32
    4ccc:	2004      	movs	r0, #4
    4cce:	f7ff f90d 	bl	3eec <MPSL_IRQ_RADIO_Handler+0x3c>
    4cd2:	4604      	mov	r4, r0
    4cd4:	42ac      	cmp	r4, r5
    4cd6:	d113      	bne.n	4d00 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd00>
    4cd8:	482c      	ldr	r0, [pc, #176]	; (4d8c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8c>)
    4cda:	2800      	cmp	r0, #0
    4cdc:	bf18      	it	ne
    4cde:	f3af 8000 	nopne.w
    4ce2:	f001 fe3f 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    4ce6:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    4cea:	2a20      	cmp	r2, #32
    4cec:	d00b      	beq.n	4d06 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd06>
    4cee:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    4cf2:	1c84      	adds	r4, r0, #2
    4cf4:	f141 0c00 	adc.w	ip, r1, #0
    4cf8:	1b1b      	subs	r3, r3, r4
    4cfa:	eb72 020c 	sbcs.w	r2, r2, ip
    4cfe:	d202      	bcs.n	4d06 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd06>
    4d00:	2000      	movs	r0, #0
    4d02:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4d06:	2d20      	cmp	r5, #32
    4d08:	d013      	beq.n	4d32 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd32>
    4d0a:	462b      	mov	r3, r5
    4d0c:	4642      	mov	r2, r8
    4d0e:	f7ff fbaf 	bl	4470 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x470>
    4d12:	2800      	cmp	r0, #0
    4d14:	bf1e      	ittt	ne
    4d16:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    4d1a:	2002      	movne	r0, #2
    4d1c:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4d20:	463b      	mov	r3, r7
    4d22:	462a      	mov	r2, r5
    4d24:	2120      	movs	r1, #32
    4d26:	2004      	movs	r0, #4
    4d28:	f7ff f8e0 	bl	3eec <MPSL_IRQ_RADIO_Handler+0x3c>
    4d2c:	2000      	movs	r0, #0
    4d2e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4d32:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    4d36:	43c0      	mvns	r0, r0
    4d38:	ea70 0001 	orns	r0, r0, r1
    4d3c:	d005      	beq.n	4d4a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd4a>
    4d3e:	f002 fa0d 	bl	715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4d42:	f04f 30ff 	mov.w	r0, #4294967295
    4d46:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    4d4a:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    4d4e:	b128      	cbz	r0, 4d5c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd5c>
    4d50:	2005      	movs	r0, #5
    4d52:	f001 fee3 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4d56:	2000      	movs	r0, #0
    4d58:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    4d5c:	2004      	movs	r0, #4
    4d5e:	f001 fedd 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4d62:	f001 ff43 	bl	6bec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    4d66:	490a      	ldr	r1, [pc, #40]	; (4d90 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd90>)
    4d68:	2020      	movs	r0, #32
    4d6a:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    4d6e:	6889      	ldr	r1, [r1, #8]
    4d70:	2000      	movs	r0, #0
    4d72:	6008      	str	r0, [r1, #0]
    4d74:	4907      	ldr	r1, [pc, #28]	; (4d94 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd94>)
    4d76:	6008      	str	r0, [r1, #0]
    4d78:	2001      	movs	r0, #1
    4d7a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4d7e:	0000      	.short	0x0000
    4d80:	20000ba0 	.word	0x20000ba0
    4d84:	20000720 	.word	0x20000720
    4d88:	20000b20 	.word	0x20000b20
    4d8c:	00000000 	.word	0x00000000
    4d90:	20000120 	.word	0x20000120
    4d94:	40000508 	.word	0x40000508

00004d98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    4d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d9c:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 4f64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    4da0:	4606      	mov	r6, r0
    4da2:	b08f      	sub	sp, #60	; 0x3c
    4da4:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    4da8:	468a      	mov	sl, r1
    4daa:	2820      	cmp	r0, #32
    4dac:	d061      	beq.n	4e72 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    4dae:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    4db2:	f10b 0408 	add.w	r4, fp, #8
    4db6:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    4dba:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    4dbe:	2120      	movs	r1, #32
    4dc0:	f88d 1018 	strb.w	r1, [sp, #24]
    4dc4:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    4dc8:	f8db 2008 	ldr.w	r2, [fp, #8]
    4dcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4dd0:	4459      	add	r1, fp
    4dd2:	2700      	movs	r7, #0
    4dd4:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    4dd8:	f8db 1010 	ldr.w	r1, [fp, #16]
    4ddc:	1851      	adds	r1, r2, r1
    4dde:	910a      	str	r1, [sp, #40]	; 0x28
    4de0:	f8db 0000 	ldr.w	r0, [fp]
    4de4:	aa09      	add	r2, sp, #36	; 0x24
    4de6:	4430      	add	r0, r6
    4de8:	a907      	add	r1, sp, #28
    4dea:	f001 fadb 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4dee:	f8d9 0010 	ldr.w	r0, [r9, #16]
    4df2:	9907      	ldr	r1, [sp, #28]
    4df4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    4df8:	1840      	adds	r0, r0, r1
    4dfa:	1810      	adds	r0, r2, r0
    4dfc:	2e67      	cmp	r6, #103	; 0x67
    4dfe:	d33d      	bcc.n	4e7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    4e00:	4959      	ldr	r1, [pc, #356]	; (4f68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    4e02:	2200      	movs	r2, #0
    4e04:	1b89      	subs	r1, r1, r6
    4e06:	eb72 0107 	sbcs.w	r1, r2, r7
    4e0a:	d337      	bcc.n	4e7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    4e0c:	6821      	ldr	r1, [r4, #0]
    4e0e:	4694      	mov	ip, r2
    4e10:	1a40      	subs	r0, r0, r1
    4e12:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    4e16:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    4e1a:	eb7c 010c 	sbcs.w	r1, ip, ip
    4e1e:	d32d      	bcc.n	4e7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    4e20:	60a0      	str	r0, [r4, #8]
    4e22:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    4e26:	f884 a010 	strb.w	sl, [r4, #16]
    4e2a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    4e2e:	f10d 0b18 	add.w	fp, sp, #24
    4e32:	2d20      	cmp	r5, #32
    4e34:	d055      	beq.n	4ee2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4e36:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    4e3a:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4e3e:	9001      	str	r0, [sp, #4]
    4e40:	484a      	ldr	r0, [pc, #296]	; (4f6c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    4e42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    4e46:	f8d4 a000 	ldr.w	sl, [r4]
    4e4a:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    4e4e:	f108 0008 	add.w	r0, r8, #8
    4e52:	eb1a 0201 	adds.w	r2, sl, r1
    4e56:	eb43 0107 	adc.w	r1, r3, r7
    4e5a:	e9d0 9300 	ldrd	r9, r3, [r0]
    4e5e:	ebb9 0202 	subs.w	r2, r9, r2
    4e62:	eb73 0101 	sbcs.w	r1, r3, r1
    4e66:	d325      	bcc.n	4eb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    4e68:	89c0      	ldrh	r0, [r0, #14]
    4e6a:	b398      	cbz	r0, 4ed4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    4e6c:	89e0      	ldrh	r0, [r4, #14]
    4e6e:	b148      	cbz	r0, 4e84 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    4e70:	e037      	b.n	4ee2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4e72:	f640 3135 	movw	r1, #2869	; 0xb35
    4e76:	2070      	movs	r0, #112	; 0x70
    4e78:	f002 fb0a 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4e7c:	b00f      	add	sp, #60	; 0x3c
    4e7e:	2001      	movs	r0, #1
    4e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e84:	f002 f964 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4e88:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4e8c:	bf08      	it	eq
    4e8e:	200d      	moveq	r0, #13
    4e90:	d00b      	beq.n	4eaa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    4e92:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4e96:	3856      	subs	r0, #86	; 0x56
    4e98:	bf08      	it	eq
    4e9a:	201c      	moveq	r0, #28
    4e9c:	d005      	beq.n	4eaa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    4e9e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4ea2:	389f      	subs	r0, #159	; 0x9f
    4ea4:	bf14      	ite	ne
    4ea6:	4638      	movne	r0, r7
    4ea8:	2032      	moveq	r0, #50	; 0x32
    4eaa:	1c41      	adds	r1, r0, #1
    4eac:	ebb9 000a 	subs.w	r0, r9, sl
    4eb0:	4288      	cmp	r0, r1
    4eb2:	da16      	bge.n	4ee2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4eb4:	f88b 5000 	strb.w	r5, [fp]
    4eb8:	f898 0018 	ldrb.w	r0, [r8, #24]
    4ebc:	7c21      	ldrb	r1, [r4, #16]
    4ebe:	4281      	cmp	r1, r0
    4ec0:	d309      	bcc.n	4ed6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    4ec2:	6821      	ldr	r1, [r4, #0]
    4ec4:	980a      	ldr	r0, [sp, #40]	; 0x28
    4ec6:	1a40      	subs	r0, r0, r1
    4ec8:	60a0      	str	r0, [r4, #8]
    4eca:	b00f      	add	sp, #60	; 0x3c
    4ecc:	f04f 0002 	mov.w	r0, #2
    4ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ed4:	e005      	b.n	4ee2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    4ed6:	9801      	ldr	r0, [sp, #4]
    4ed8:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4edc:	7845      	ldrb	r5, [r0, #1]
    4ede:	2d20      	cmp	r5, #32
    4ee0:	d1ae      	bne.n	4e40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    4ee2:	2005      	movs	r0, #5
    4ee4:	f001 fe1a 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4ee8:	4d1e      	ldr	r5, [pc, #120]	; (4f64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    4eea:	f04f 30ff 	mov.w	r0, #4294967295
    4eee:	6068      	str	r0, [r5, #4]
    4ef0:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    4ef4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    4ef8:	2120      	movs	r1, #32
    4efa:	2a20      	cmp	r2, #32
    4efc:	d003      	beq.n	4f06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    4efe:	2005      	movs	r0, #5
    4f00:	f7fe fff4 	bl	3eec <MPSL_IRQ_RADIO_Handler+0x3c>
    4f04:	e004      	b.n	4f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    4f06:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    4f0a:	4428      	add	r0, r5
    4f0c:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    4f10:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    4f14:	4916      	ldr	r1, [pc, #88]	; (4f70 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    4f16:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    4f1a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    4f1e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    4f22:	7048      	strb	r0, [r1, #1]
    4f24:	6828      	ldr	r0, [r5, #0]
    4f26:	4430      	add	r0, r6
    4f28:	6028      	str	r0, [r5, #0]
    4f2a:	20ff      	movs	r0, #255	; 0xff
    4f2c:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    4f30:	7e68      	ldrb	r0, [r5, #25]
    4f32:	2801      	cmp	r0, #1
    4f34:	d10a      	bne.n	4f4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    4f36:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    4f3a:	6823      	ldr	r3, [r4, #0]
    4f3c:	1818      	adds	r0, r3, r0
    4f3e:	f142 0100 	adc.w	r1, r2, #0
    4f42:	1e40      	subs	r0, r0, #1
    4f44:	f141 31ff 	adc.w	r1, r1, #4294967295
    4f48:	f001 fc0a 	bl	6760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    4f4c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    4f50:	2820      	cmp	r0, #32
    4f52:	d003      	beq.n	4f5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    4f54:	4807      	ldr	r0, [pc, #28]	; (4f74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    4f56:	7840      	ldrb	r0, [r0, #1]
    4f58:	f002 fb6c 	bl	7634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    4f5c:	b00f      	add	sp, #60	; 0x3c
    4f5e:	2000      	movs	r0, #0
    4f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f64:	20000ba0 	.word	0x20000ba0
    4f68:	0f424000 	.word	0x0f424000
    4f6c:	20000720 	.word	0x20000720
    4f70:	20000b20 	.word	0x20000b20
    4f74:	20000120 	.word	0x20000120

00004f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    4f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f7a:	4d6f      	ldr	r5, [pc, #444]	; (5138 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    4f7c:	2600      	movs	r6, #0
    4f7e:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    4f82:	2701      	movs	r7, #1
    4f84:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    4f88:	4b6c      	ldr	r3, [pc, #432]	; (513c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    4f8a:	2808      	cmp	r0, #8
    4f8c:	d273      	bcs.n	5076 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    4f8e:	e8df f000 	tbb	[pc, r0]
    4f92:	7804      	.short	0x7804
    4f94:	47ceb3a0 	.word	0x47ceb3a0
    4f98:	bdb8      	.short	0xbdb8
    4f9a:	43c8      	mvns	r0, r1
    4f9c:	ea70 0002 	orns	r0, r0, r2
    4fa0:	d105      	bne.n	4fae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    4fa2:	f002 f8f7 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4fa6:	f001 fcdd 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    4faa:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    4fae:	8ae0      	ldrh	r0, [r4, #22]
    4fb0:	b110      	cbz	r0, 4fb8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    4fb2:	f002 f9f5 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4fb6:	b180      	cbz	r0, 4fda <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    4fb8:	f7ff fd54 	bl	4a64 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa64>
    4fbc:	20ff      	movs	r0, #255	; 0xff
    4fbe:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    4fc2:	6861      	ldr	r1, [r4, #4]
    4fc4:	f1b1 3fff 	cmp.w	r1, #4294967295
    4fc8:	d003      	beq.n	4fd2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    4fca:	2005      	movs	r0, #5
    4fcc:	f001 fcec 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    4fd0:	b140      	cbz	r0, 4fe4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    4fd2:	7e60      	ldrb	r0, [r4, #25]
    4fd4:	2801      	cmp	r0, #1
    4fd6:	d114      	bne.n	5002 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    4fd8:	e009      	b.n	4fee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    4fda:	f640 012c 	movw	r1, #2092	; 0x82c
    4fde:	2070      	movs	r0, #112	; 0x70
    4fe0:	f002 fa56 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4fe4:	f640 0131 	movw	r1, #2097	; 0x831
    4fe8:	2070      	movs	r0, #112	; 0x70
    4fea:	f002 fa51 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4fee:	68a2      	ldr	r2, [r4, #8]
    4ff0:	6920      	ldr	r0, [r4, #16]
    4ff2:	68e1      	ldr	r1, [r4, #12]
    4ff4:	1810      	adds	r0, r2, r0
    4ff6:	4171      	adcs	r1, r6
    4ff8:	1e40      	subs	r0, r0, #1
    4ffa:	f141 31ff 	adc.w	r1, r1, #4294967295
    4ffe:	f001 fbaf 	bl	6760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5002:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5006:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    500a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    500e:	6840      	ldr	r0, [r0, #4]
    5010:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5014:	680a      	ldr	r2, [r1, #0]
    5016:	b001      	add	sp, #4
    5018:	2101      	movs	r1, #1
    501a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    501e:	4710      	bx	r2
    5020:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    5024:	b160      	cbz	r0, 5040 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    5026:	43c8      	mvns	r0, r1
    5028:	ea70 0002 	orns	r0, r0, r2
    502c:	d105      	bne.n	503a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    502e:	f002 f8b1 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5032:	f001 fc97 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5036:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    503a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    503e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5040:	f7ff fd10 	bl	4a64 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa64>
    5044:	f04f 30ff 	mov.w	r0, #4294967295
    5048:	6060      	str	r0, [r4, #4]
    504a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    504e:	f88d 0000 	strb.w	r0, [sp]
    5052:	f89d 0000 	ldrb.w	r0, [sp]
    5056:	b178      	cbz	r0, 5078 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    5058:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    505c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5060:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5064:	6840      	ldr	r0, [r0, #4]
    5066:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    506a:	680a      	ldr	r2, [r1, #0]
    506c:	b001      	add	sp, #4
    506e:	2106      	movs	r1, #6
    5070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5074:	4710      	bx	r2
    5076:	e05a      	b.n	512e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    5078:	f640 0148 	movw	r1, #2120	; 0x848
    507c:	2070      	movs	r0, #112	; 0x70
    507e:	f002 fa07 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5082:	f7ff fcef 	bl	4a64 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa64>
    5086:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    508a:	f002 f989 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    508e:	b130      	cbz	r0, 509e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    5090:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    5094:	43c9      	mvns	r1, r1
    5096:	ea71 0000 	orns	r0, r1, r0
    509a:	d005      	beq.n	50a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    509c:	e00a      	b.n	50b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    509e:	f640 0156 	movw	r1, #2134	; 0x856
    50a2:	2070      	movs	r0, #112	; 0x70
    50a4:	f002 f9f4 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50a8:	f002 f874 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    50ac:	f001 fc5a 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    50b0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    50b4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    50b8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    50bc:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    50c0:	6840      	ldr	r0, [r0, #4]
    50c2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    50c6:	680a      	ldr	r2, [r1, #0]
    50c8:	b001      	add	sp, #4
    50ca:	2100      	movs	r1, #0
    50cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    50d0:	4710      	bx	r2
    50d2:	f001 fe47 	bl	6d64 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    50d6:	8ae0      	ldrh	r0, [r4, #22]
    50d8:	b110      	cbz	r0, 50e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    50da:	f002 f961 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    50de:	b130      	cbz	r0, 50ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    50e0:	f001 fe54 	bl	6d8c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    50e4:	2800      	cmp	r0, #0
    50e6:	bf18      	it	ne
    50e8:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    50ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50ee:	f44f 6106 	mov.w	r1, #2144	; 0x860
    50f2:	2070      	movs	r0, #112	; 0x70
    50f4:	f002 f9cc 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    50f8:	4811      	ldr	r0, [pc, #68]	; (5140 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    50fa:	6007      	str	r7, [r0, #0]
    50fc:	6898      	ldr	r0, [r3, #8]
    50fe:	6007      	str	r7, [r0, #0]
    5100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5102:	7818      	ldrb	r0, [r3, #0]
    5104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5108:	f002 ba94 	b.w	7634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    510c:	f7ff fcaa 	bl	4a64 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa64>
    5110:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5114:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5118:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    511c:	6840      	ldr	r0, [r0, #4]
    511e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5122:	680a      	ldr	r2, [r1, #0]
    5124:	b001      	add	sp, #4
    5126:	2105      	movs	r1, #5
    5128:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    512c:	4710      	bx	r2
    512e:	f640 0173 	movw	r1, #2163	; 0x873
    5132:	2070      	movs	r0, #112	; 0x70
    5134:	f002 f9ac 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5138:	20000720 	.word	0x20000720
    513c:	20000120 	.word	0x20000120
    5140:	40000508 	.word	0x40000508

00005144 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    5144:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5148:	48f7      	ldr	r0, [pc, #988]	; (5528 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    514a:	b097      	sub	sp, #92	; 0x5c
    514c:	460c      	mov	r4, r1
    514e:	6800      	ldr	r0, [r0, #0]
    5150:	4ff6      	ldr	r7, [pc, #984]	; (552c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    5152:	05c0      	lsls	r0, r0, #23
    5154:	0dc0      	lsrs	r0, r0, #23
    5156:	d00e      	beq.n	5176 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    5158:	3810      	subs	r0, #16
    515a:	b240      	sxtb	r0, r0
    515c:	2800      	cmp	r0, #0
    515e:	bfb8      	it	lt
    5160:	f000 000f 	andlt.w	r0, r0, #15
    5164:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5168:	bfac      	ite	ge
    516a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    516e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    5172:	0940      	lsrs	r0, r0, #5
    5174:	d00c      	beq.n	5190 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    5176:	7820      	ldrb	r0, [r4, #0]
    5178:	f04f 0a00 	mov.w	sl, #0
    517c:	2800      	cmp	r0, #0
    517e:	bf18      	it	ne
    5180:	2801      	cmpne	r0, #1
    5182:	d017      	beq.n	51b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    5184:	f240 61f9 	movw	r1, #1785	; 0x6f9
    5188:	f04f 0070 	mov.w	r0, #112	; 0x70
    518c:	f002 f980 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5190:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5194:	f04f 0a01 	mov.w	sl, #1
    5198:	2820      	cmp	r0, #32
    519a:	d006      	beq.n	51aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    519c:	7820      	ldrb	r0, [r4, #0]
    519e:	b148      	cbz	r0, 51b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    51a0:	f240 61f5 	movw	r1, #1781	; 0x6f5
    51a4:	2070      	movs	r0, #112	; 0x70
    51a6:	f002 f973 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51aa:	f240 61f2 	movw	r1, #1778	; 0x6f2
    51ae:	2070      	movs	r0, #112	; 0x70
    51b0:	f002 f96e 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51b4:	f8df b378 	ldr.w	fp, [pc, #888]	; 5530 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    51b8:	f1bb 0f00 	cmp.w	fp, #0
    51bc:	d004      	beq.n	51c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    51be:	2100      	movs	r1, #0
    51c0:	f240 60fc 	movw	r0, #1788	; 0x6fc
    51c4:	f3af 8000 	nop.w
    51c8:	2000      	movs	r0, #0
    51ca:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    51ce:	a905      	add	r1, sp, #20
    51d0:	9112      	str	r1, [sp, #72]	; 0x48
    51d2:	49d8      	ldr	r1, [pc, #864]	; (5534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    51d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    51d6:	f04f 0801 	mov.w	r8, #1
    51da:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    51de:	9001      	str	r0, [sp, #4]
    51e0:	f1bb 0f00 	cmp.w	fp, #0
    51e4:	d004      	beq.n	51f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    51e6:	2100      	movs	r1, #0
    51e8:	f240 7007 	movw	r0, #1799	; 0x707
    51ec:	f3af 8000 	nop.w
    51f0:	f1b8 0f00 	cmp.w	r8, #0
    51f4:	d009      	beq.n	520a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    51f6:	bf00      	nop
    51f8:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    51fc:	2500      	movs	r5, #0
    51fe:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    5202:	f1ba 0f00 	cmp.w	sl, #0
    5206:	d007      	beq.n	5218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    5208:	e03e      	b.n	5288 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    520a:	48cb      	ldr	r0, [pc, #812]	; (5538 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    520c:	2800      	cmp	r0, #0
    520e:	bf18      	it	ne
    5210:	f3af 8000 	nopne.w
    5214:	b662      	cpsie	i
    5216:	e7ef      	b.n	51f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    5218:	46b1      	mov	r9, r6
    521a:	2001      	movs	r0, #1
    521c:	ea20 0609 	bic.w	r6, r0, r9
    5220:	48c6      	ldr	r0, [pc, #792]	; (553c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5222:	2240      	movs	r2, #64	; 0x40
    5224:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    5228:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    522c:	f004 fef2 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5230:	f1bb 0f00 	cmp.w	fp, #0
    5234:	d004      	beq.n	5240 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    5236:	2100      	movs	r1, #0
    5238:	f240 503c 	movw	r0, #1340	; 0x53c
    523c:	f3af 8000 	nop.w
    5240:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    5244:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5248:	4439      	add	r1, r7
    524a:	4438      	add	r0, r7
    524c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    524e:	8502      	strh	r2, [r0, #40]	; 0x28
    5250:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5254:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5258:	f1bb 0f00 	cmp.w	fp, #0
    525c:	d004      	beq.n	5268 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    525e:	2100      	movs	r1, #0
    5260:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5264:	f3af 8000 	nop.w
    5268:	f1bb 0f00 	cmp.w	fp, #0
    526c:	d004      	beq.n	5278 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    526e:	2100      	movs	r1, #0
    5270:	f240 7011 	movw	r0, #1809	; 0x711
    5274:	f3af 8000 	nop.w
    5278:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    527c:	f88d 0020 	strb.w	r0, [sp, #32]
    5280:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5284:	2800      	cmp	r0, #0
    5286:	d1ab      	bne.n	51e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5288:	f1bb 0f00 	cmp.w	fp, #0
    528c:	d004      	beq.n	5298 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    528e:	2100      	movs	r1, #0
    5290:	f240 701b 	movw	r0, #1819	; 0x71b
    5294:	f3af 8000 	nop.w
    5298:	f001 fb64 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    529c:	4681      	mov	r9, r0
    529e:	a802      	add	r0, sp, #8
    52a0:	900a      	str	r0, [sp, #40]	; 0x28
    52a2:	4688      	mov	r8, r1
    52a4:	8921      	ldrh	r1, [r4, #8]
    52a6:	4628      	mov	r0, r5
    52a8:	f361 401f 	bfi	r0, r1, #16, #16
    52ac:	4601      	mov	r1, r0
    52ae:	7aa2      	ldrb	r2, [r4, #10]
    52b0:	4628      	mov	r0, r5
    52b2:	f362 0007 	bfi	r0, r2, #0, #8
    52b6:	7ae2      	ldrb	r2, [r4, #11]
    52b8:	f362 200f 	bfi	r0, r2, #8, #8
    52bc:	7822      	ldrb	r2, [r4, #0]
    52be:	9502      	str	r5, [sp, #8]
    52c0:	f362 4017 	bfi	r0, r2, #16, #8
    52c4:	e9cd 5104 	strd	r5, r1, [sp, #16]
    52c8:	e9cd 0506 	strd	r0, r5, [sp, #24]
    52cc:	9503      	str	r5, [sp, #12]
    52ce:	7820      	ldrb	r0, [r4, #0]
    52d0:	b380      	cbz	r0, 5334 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    52d2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    52d6:	499a      	ldr	r1, [pc, #616]	; (5540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    52d8:	1a08      	subs	r0, r1, r0
    52da:	990a      	ldr	r1, [sp, #40]	; 0x28
    52dc:	f101 020c 	add.w	r2, r1, #12
    52e0:	a914      	add	r1, sp, #80	; 0x50
    52e2:	f001 f85f 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    52e6:	2200      	movs	r2, #0
    52e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    52ec:	4648      	mov	r0, r9
    52ee:	4641      	mov	r1, r8
    52f0:	f7fe ffd0 	bl	4294 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x294>
    52f4:	468c      	mov	ip, r1
    52f6:	7ae1      	ldrb	r1, [r4, #11]
    52f8:	2900      	cmp	r1, #0
    52fa:	bf0c      	ite	eq
    52fc:	217a      	moveq	r1, #122	; 0x7a
    52fe:	214a      	movne	r1, #74	; 0x4a
    5300:	6862      	ldr	r2, [r4, #4]
    5302:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5306:	4411      	add	r1, r2
    5308:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    530c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    5310:	441a      	add	r2, r3
    5312:	4411      	add	r1, r2
    5314:	1c88      	adds	r0, r1, #2
    5316:	f001 f829 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    531a:	9600      	str	r6, [sp, #0]
    531c:	9004      	str	r0, [sp, #16]
    531e:	464a      	mov	r2, r9
    5320:	4643      	mov	r3, r8
    5322:	6920      	ldr	r0, [r4, #16]
    5324:	990a      	ldr	r1, [sp, #40]	; 0x28
    5326:	f7fe fe1d 	bl	3f64 <MPSL_IRQ_RADIO_Handler+0xb4>
    532a:	2800      	cmp	r0, #0
    532c:	bf08      	it	eq
    532e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    5332:	e046      	b.n	53c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    5334:	e7ff      	b.n	5336 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    5336:	4648      	mov	r0, r9
    5338:	4641      	mov	r1, r8
    533a:	f000 ffb5 	bl	62a8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    533e:	f8df c204 	ldr.w	ip, [pc, #516]	; 5544 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    5342:	4602      	mov	r2, r0
    5344:	eb10 0c0c 	adds.w	ip, r0, ip
    5348:	460b      	mov	r3, r1
    534a:	f141 0e00 	adc.w	lr, r1, #0
    534e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5352:	ebb0 0c0c 	subs.w	ip, r0, ip
    5356:	eb71 0c0e 	sbcs.w	ip, r1, lr
    535a:	d229      	bcs.n	53b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    535c:	3229      	adds	r2, #41	; 0x29
    535e:	f143 0300 	adc.w	r3, r3, #0
    5362:	1a82      	subs	r2, r0, r2
    5364:	eb71 0203 	sbcs.w	r2, r1, r3
    5368:	d322      	bcc.n	53b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    536a:	8922      	ldrh	r2, [r4, #8]
    536c:	ab0a      	add	r3, sp, #40	; 0x28
    536e:	1a80      	subs	r0, r0, r2
    5370:	eb61 0105 	sbc.w	r1, r1, r5
    5374:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5376:	1e40      	subs	r0, r0, #1
    5378:	9200      	str	r2, [sp, #0]
    537a:	f141 31ff 	adc.w	r1, r1, #4294967295
    537e:	aa0d      	add	r2, sp, #52	; 0x34
    5380:	f000 ffb6 	bl	62f0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5384:	7ae0      	ldrb	r0, [r4, #11]
    5386:	2800      	cmp	r0, #0
    5388:	bf0c      	ite	eq
    538a:	207a      	moveq	r0, #122	; 0x7a
    538c:	204a      	movne	r0, #74	; 0x4a
    538e:	990d      	ldr	r1, [sp, #52]	; 0x34
    5390:	8922      	ldrh	r2, [r4, #8]
    5392:	4408      	add	r0, r1
    5394:	6861      	ldr	r1, [r4, #4]
    5396:	4411      	add	r1, r2
    5398:	4408      	add	r0, r1
    539a:	1c80      	adds	r0, r0, #2
    539c:	f000 ffe6 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    53a0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    53a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
    53a8:	1a40      	subs	r0, r0, r1
    53aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    53ae:	e007      	b.n	53c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    53b0:	f1b9 0101 	subs.w	r1, r9, #1
    53b4:	f148 30ff 	adc.w	r0, r8, #4294967295
    53b8:	e9cd 1002 	strd	r1, r0, [sp, #8]
    53bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    53c0:	9004      	str	r0, [sp, #16]
    53c2:	f1bb 0f00 	cmp.w	fp, #0
    53c6:	d004      	beq.n	53d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    53c8:	2100      	movs	r1, #0
    53ca:	f240 7022 	movw	r0, #1826	; 0x722
    53ce:	f3af 8000 	nop.w
    53d2:	495a      	ldr	r1, [pc, #360]	; (553c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    53d4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    53d8:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    53dc:	9108      	str	r1, [sp, #32]
    53de:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    53e2:	a802      	add	r0, sp, #8
    53e4:	2901      	cmp	r1, #1
    53e6:	bf18      	it	ne
    53e8:	2902      	cmpne	r1, #2
    53ea:	d141      	bne.n	5470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    53ec:	9511      	str	r5, [sp, #68]	; 0x44
    53ee:	9a02      	ldr	r2, [sp, #8]
    53f0:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    53f4:	1a53      	subs	r3, r2, r1
    53f6:	f8dd c010 	ldr.w	ip, [sp, #16]
    53fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    53fe:	eb12 020c 	adds.w	r2, r2, ip
    5402:	1a51      	subs	r1, r2, r1
    5404:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5408:	2b02      	cmp	r3, #2
    540a:	d374      	bcc.n	54f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    540c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5410:	bf98      	it	ls
    5412:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5416:	d86e      	bhi.n	54f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5418:	2501      	movs	r5, #1
    541a:	ab14      	add	r3, sp, #80	; 0x50
    541c:	aa0e      	add	r2, sp, #56	; 0x38
    541e:	4631      	mov	r1, r6
    5420:	f7fe ff88 	bl	4334 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x334>
    5424:	2800      	cmp	r0, #0
    5426:	d06d      	beq.n	5504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    5428:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    542c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    5430:	4633      	mov	r3, r6
    5432:	428a      	cmp	r2, r1
    5434:	d06a      	beq.n	550c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    5436:	2005      	movs	r0, #5
    5438:	f7fe fd58 	bl	3eec <MPSL_IRQ_RADIO_Handler+0x3c>
    543c:	9908      	ldr	r1, [sp, #32]
    543e:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    5442:	7048      	strb	r0, [r1, #1]
    5444:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5448:	2820      	cmp	r0, #32
    544a:	bf01      	itttt	eq
    544c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5450:	4438      	addeq	r0, r7
    5452:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    5456:	9511      	streq	r5, [sp, #68]	; 0x44
    5458:	bf1e      	ittt	ne
    545a:	9908      	ldrne	r1, [sp, #32]
    545c:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    5460:	f880 8001 	strbne.w	r8, [r0, #1]
    5464:	4632      	mov	r2, r6
    5466:	4641      	mov	r1, r8
    5468:	f05f 0003 	movs.w	r0, #3
    546c:	f7ff fba6 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    5470:	f1bb 0f00 	cmp.w	fp, #0
    5474:	d004      	beq.n	5480 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    5476:	2100      	movs	r1, #0
    5478:	f240 7027 	movw	r0, #1831	; 0x727
    547c:	f3af 8000 	nop.w
    5480:	4831      	ldr	r0, [pc, #196]	; (5548 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    5482:	2800      	cmp	r0, #0
    5484:	bf18      	it	ne
    5486:	f3af 8000 	nopne.w
    548a:	f3ef 8810 	mrs	r8, PRIMASK
    548e:	b672      	cpsid	i
    5490:	f1bb 0f00 	cmp.w	fp, #0
    5494:	d004      	beq.n	54a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    5496:	2100      	movs	r1, #0
    5498:	f240 702d 	movw	r0, #1837	; 0x72d
    549c:	f3af 8000 	nop.w
    54a0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    54a4:	f88d 0020 	strb.w	r0, [sp, #32]
    54a8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    54ac:	2800      	cmp	r0, #0
    54ae:	f47f ae97 	bne.w	51e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    54b2:	f1bb 0f00 	cmp.w	fp, #0
    54b6:	d004      	beq.n	54c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    54b8:	2100      	movs	r1, #0
    54ba:	f240 7035 	movw	r0, #1845	; 0x735
    54be:	f3af 8000 	nop.w
    54c2:	f10d 0e04 	add.w	lr, sp, #4
    54c6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    54ca:	f100 0e08 	add.w	lr, r0, #8
    54ce:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    54d2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    54d6:	e9c0 1206 	strd	r1, r2, [r0, #24]
    54da:	b325      	cbz	r5, 5526 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    54dc:	f1bb 0f00 	cmp.w	fp, #0
    54e0:	d004      	beq.n	54ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    54e2:	2100      	movs	r1, #0
    54e4:	f240 7042 	movw	r0, #1858	; 0x742
    54e8:	f3af 8000 	nop.w
    54ec:	f1ba 0f00 	cmp.w	sl, #0
    54f0:	d146      	bne.n	5580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    54f2:	e02b      	b.n	554c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    54f4:	e7ff      	b.n	54f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    54f6:	4632      	mov	r2, r6
    54f8:	4641      	mov	r1, r8
    54fa:	2004      	movs	r0, #4
    54fc:	f7ff fb5e 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    5500:	2501      	movs	r5, #1
    5502:	e7b5      	b.n	5470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5504:	4632      	mov	r2, r6
    5506:	4641      	mov	r1, r8
    5508:	2004      	movs	r0, #4
    550a:	e7af      	b.n	546c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    550c:	2920      	cmp	r1, #32
    550e:	bf1d      	ittte	ne
    5510:	9808      	ldrne	r0, [sp, #32]
    5512:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    5516:	7840      	ldrbne	r0, [r0, #1]
    5518:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    551c:	bf04      	itt	eq
    551e:	4438      	addeq	r0, r7
    5520:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    5524:	e78a      	b.n	543c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    5526:	e03b      	b.n	55a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5528:	e000ed04 	.word	0xe000ed04
    552c:	20000ba0 	.word	0x20000ba0
    5530:	00000000 	.word	0x00000000
    5534:	20000720 	.word	0x20000720
    5538:	00000000 	.word	0x00000000
    553c:	20000b20 	.word	0x20000b20
    5540:	1e847fff 	.word	0x1e847fff
    5544:	0f424000 	.word	0x0f424000
    5548:	00000000 	.word	0x00000000
    554c:	9811      	ldr	r0, [sp, #68]	; 0x44
    554e:	f010 0fff 	tst.w	r0, #255	; 0xff
    5552:	d015      	beq.n	5580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5554:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5558:	2820      	cmp	r0, #32
    555a:	d111      	bne.n	5580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    555c:	f1bb 0f00 	cmp.w	fp, #0
    5560:	d004      	beq.n	556c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    5562:	2100      	movs	r1, #0
    5564:	f240 7047 	movw	r0, #1863	; 0x747
    5568:	f3af 8000 	nop.w
    556c:	4631      	mov	r1, r6
    556e:	2002      	movs	r0, #2
    5570:	f7ff fb56 	bl	4c20 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc20>
    5574:	9010      	str	r0, [sp, #64]	; 0x40
    5576:	b918      	cbnz	r0, 5580 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5578:	7820      	ldrb	r0, [r4, #0]
    557a:	b300      	cbz	r0, 55be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    557c:	2801      	cmp	r0, #1
    557e:	d02e      	beq.n	55de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    5580:	f1bb 0f00 	cmp.w	fp, #0
    5584:	d004      	beq.n	5590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    5586:	2100      	movs	r1, #0
    5588:	f240 7064 	movw	r0, #1892	; 0x764
    558c:	f3af 8000 	nop.w
    5590:	20ff      	movs	r0, #255	; 0xff
    5592:	f1ba 0f00 	cmp.w	sl, #0
    5596:	bf18      	it	ne
    5598:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    559c:	d029      	beq.n	55f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    559e:	2501      	movs	r5, #1
    55a0:	f1bb 0f00 	cmp.w	fp, #0
    55a4:	d004      	beq.n	55b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    55a6:	2100      	movs	r1, #0
    55a8:	f240 7075 	movw	r0, #1909	; 0x775
    55ac:	f3af 8000 	nop.w
    55b0:	9810      	ldr	r0, [sp, #64]	; 0x40
    55b2:	4c34      	ldr	r4, [pc, #208]	; (5684 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    55b4:	2802      	cmp	r0, #2
    55b6:	d025      	beq.n	5604 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    55b8:	2801      	cmp	r0, #1
    55ba:	d02b      	beq.n	5614 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    55bc:	e02f      	b.n	561e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    55be:	f1bb 0f00 	cmp.w	fp, #0
    55c2:	d004      	beq.n	55ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    55c4:	2100      	movs	r1, #0
    55c6:	f240 704f 	movw	r0, #1871	; 0x74f
    55ca:	f3af 8000 	nop.w
    55ce:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    55d2:	2004      	movs	r0, #4
    55d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    55d6:	f7ff faf1 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    55da:	2501      	movs	r5, #1
    55dc:	e7e0      	b.n	55a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    55de:	f1bb 0f00 	cmp.w	fp, #0
    55e2:	f43f adfd 	beq.w	51e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    55e6:	2100      	movs	r1, #0
    55e8:	f240 705a 	movw	r0, #1882	; 0x75a
    55ec:	f3af 8000 	nop.w
    55f0:	e5f6      	b.n	51e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    55f2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    55f6:	2101      	movs	r1, #1
    55f8:	4391      	bics	r1, r2
    55fa:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    55fe:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    5602:	e7cc      	b.n	559e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    5604:	68b8      	ldr	r0, [r7, #8]
    5606:	ebb0 0009 	subs.w	r0, r0, r9
    560a:	f004 fb73 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    560e:	6861      	ldr	r1, [r4, #4]
    5610:	b921      	cbnz	r1, 561c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    5612:	e004      	b.n	561e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5614:	6861      	ldr	r1, [r4, #4]
    5616:	f04f 30ff 	mov.w	r0, #4294967295
    561a:	b101      	cbz	r1, 561e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    561c:	4788      	blx	r1
    561e:	f1b8 0f00 	cmp.w	r8, #0
    5622:	d028      	beq.n	5676 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    5624:	f1bb 0f00 	cmp.w	fp, #0
    5628:	d004      	beq.n	5634 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    562a:	2100      	movs	r1, #0
    562c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    5630:	f3af 8000 	nop.w
    5634:	b19d      	cbz	r5, 565e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5636:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    563a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    563e:	4438      	add	r0, r7
    5640:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    5644:	2820      	cmp	r0, #32
    5646:	d00a      	beq.n	565e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5648:	f1bb 0f00 	cmp.w	fp, #0
    564c:	d004      	beq.n	5658 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    564e:	2100      	movs	r1, #0
    5650:	f240 708f 	movw	r0, #1935	; 0x78f
    5654:	f3af 8000 	nop.w
    5658:	7860      	ldrb	r0, [r4, #1]
    565a:	f001 ffeb 	bl	7634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    565e:	f1bb 0f00 	cmp.w	fp, #0
    5662:	d004      	beq.n	566e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    5664:	2100      	movs	r1, #0
    5666:	f240 7094 	movw	r0, #1940	; 0x794
    566a:	f3af 8000 	nop.w
    566e:	b019      	add	sp, #100	; 0x64
    5670:	4628      	mov	r0, r5
    5672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5676:	4804      	ldr	r0, [pc, #16]	; (5688 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    5678:	2800      	cmp	r0, #0
    567a:	bf18      	it	ne
    567c:	f3af 8000 	nopne.w
    5680:	b662      	cpsie	i
    5682:	e7cf      	b.n	5624 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    5684:	20000120 	.word	0x20000120
    5688:	00000000 	.word	0x00000000

0000568c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    568c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5690:	4604      	mov	r4, r0
    5692:	7800      	ldrb	r0, [r0, #0]
    5694:	b095      	sub	sp, #84	; 0x54
    5696:	b118      	cbz	r0, 56a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    5698:	b015      	add	sp, #84	; 0x54
    569a:	2000      	movs	r0, #0
    569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56a0:	48d1      	ldr	r0, [pc, #836]	; (59e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    56a2:	6800      	ldr	r0, [r0, #0]
    56a4:	05c0      	lsls	r0, r0, #23
    56a6:	0dc0      	lsrs	r0, r0, #23
    56a8:	d00e      	beq.n	56c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    56aa:	3810      	subs	r0, #16
    56ac:	b240      	sxtb	r0, r0
    56ae:	2800      	cmp	r0, #0
    56b0:	bfb8      	it	lt
    56b2:	f000 000f 	andlt.w	r0, r0, #15
    56b6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    56ba:	bfac      	ite	ge
    56bc:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    56c0:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    56c4:	0940      	lsrs	r0, r0, #5
    56c6:	d0e7      	beq.n	5698 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    56c8:	a80d      	add	r0, sp, #52	; 0x34
    56ca:	f8df 9320 	ldr.w	r9, [pc, #800]	; 59ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    56ce:	9009      	str	r0, [sp, #36]	; 0x24
    56d0:	f1b9 0f00 	cmp.w	r9, #0
    56d4:	d004      	beq.n	56e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    56d6:	2100      	movs	r1, #0
    56d8:	f240 50c5 	movw	r0, #1477	; 0x5c5
    56dc:	f3af 8000 	nop.w
    56e0:	f8df 830c 	ldr.w	r8, [pc, #780]	; 59f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    56e4:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    56e8:	2500      	movs	r5, #0
    56ea:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    56ee:	9503      	str	r5, [sp, #12]
    56f0:	f1b9 0f00 	cmp.w	r9, #0
    56f4:	d004      	beq.n	5700 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    56f6:	2100      	movs	r1, #0
    56f8:	f240 50ca 	movw	r0, #1482	; 0x5ca
    56fc:	f3af 8000 	nop.w
    5700:	2001      	movs	r0, #1
    5702:	ea20 0a06 	bic.w	sl, r0, r6
    5706:	48bb      	ldr	r0, [pc, #748]	; (59f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    5708:	2240      	movs	r2, #64	; 0x40
    570a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    570e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    5712:	f004 fc7f 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5716:	f1b9 0f00 	cmp.w	r9, #0
    571a:	d004      	beq.n	5726 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    571c:	2100      	movs	r1, #0
    571e:	f240 503c 	movw	r0, #1340	; 0x53c
    5722:	f3af 8000 	nop.w
    5726:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    572a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    572e:	eb01 0208 	add.w	r2, r1, r8
    5732:	4440      	add	r0, r8
    5734:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    5736:	8501      	strh	r1, [r0, #40]	; 0x28
    5738:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    573c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5740:	f1b9 0f00 	cmp.w	r9, #0
    5744:	d004      	beq.n	5750 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    5746:	2100      	movs	r1, #0
    5748:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    574c:	f3af 8000 	nop.w
    5750:	f1b9 0f00 	cmp.w	r9, #0
    5754:	d004      	beq.n	5760 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    5756:	2100      	movs	r1, #0
    5758:	f240 50cf 	movw	r0, #1487	; 0x5cf
    575c:	f3af 8000 	nop.w
    5760:	f001 f900 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5764:	460f      	mov	r7, r1
    5766:	4606      	mov	r6, r0
    5768:	8921      	ldrh	r1, [r4, #8]
    576a:	4628      	mov	r0, r5
    576c:	f361 401f 	bfi	r0, r1, #16, #16
    5770:	4601      	mov	r1, r0
    5772:	7aa2      	ldrb	r2, [r4, #10]
    5774:	4628      	mov	r0, r5
    5776:	f362 0007 	bfi	r0, r2, #0, #8
    577a:	7ae2      	ldrb	r2, [r4, #11]
    577c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    5780:	f362 200f 	bfi	r0, r2, #8, #8
    5784:	7822      	ldrb	r2, [r4, #0]
    5786:	950a      	str	r5, [sp, #40]	; 0x28
    5788:	f362 4017 	bfi	r0, r2, #16, #8
    578c:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    5790:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    5794:	950b      	str	r5, [sp, #44]	; 0x2c
    5796:	7820      	ldrb	r0, [r4, #0]
    5798:	b388      	cbz	r0, 57fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    579a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    579e:	4896      	ldr	r0, [pc, #600]	; (59f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    57a0:	f10b 020c 	add.w	r2, fp, #12
    57a4:	1a40      	subs	r0, r0, r1
    57a6:	a911      	add	r1, sp, #68	; 0x44
    57a8:	f000 fdfc 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    57ac:	2200      	movs	r2, #0
    57ae:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    57b2:	4630      	mov	r0, r6
    57b4:	4639      	mov	r1, r7
    57b6:	f7fe fd6d 	bl	4294 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x294>
    57ba:	4684      	mov	ip, r0
    57bc:	7ae0      	ldrb	r0, [r4, #11]
    57be:	460b      	mov	r3, r1
    57c0:	2800      	cmp	r0, #0
    57c2:	bf0c      	ite	eq
    57c4:	207a      	moveq	r0, #122	; 0x7a
    57c6:	204a      	movne	r0, #74	; 0x4a
    57c8:	6861      	ldr	r1, [r4, #4]
    57ca:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    57ce:	4408      	add	r0, r1
    57d0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    57d4:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    57d8:	4411      	add	r1, r2
    57da:	4408      	add	r0, r1
    57dc:	1c80      	adds	r0, r0, #2
    57de:	f000 fdc5 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    57e2:	f8cd a000 	str.w	sl, [sp]
    57e6:	900c      	str	r0, [sp, #48]	; 0x30
    57e8:	4632      	mov	r2, r6
    57ea:	463b      	mov	r3, r7
    57ec:	4659      	mov	r1, fp
    57ee:	6920      	ldr	r0, [r4, #16]
    57f0:	f7fe fbb8 	bl	3f64 <MPSL_IRQ_RADIO_Handler+0xb4>
    57f4:	2800      	cmp	r0, #0
    57f6:	bf08      	it	eq
    57f8:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    57fc:	e045      	b.n	588a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    57fe:	e7ff      	b.n	5800 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    5800:	4630      	mov	r0, r6
    5802:	4639      	mov	r1, r7
    5804:	f000 fd50 	bl	62a8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5808:	4b7c      	ldr	r3, [pc, #496]	; (59fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    580a:	4602      	mov	r2, r0
    580c:	eb10 0c03 	adds.w	ip, r0, r3
    5810:	468b      	mov	fp, r1
    5812:	f141 0300 	adc.w	r3, r1, #0
    5816:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    581a:	ebb0 0c0c 	subs.w	ip, r0, ip
    581e:	eb71 0303 	sbcs.w	r3, r1, r3
    5822:	d22a      	bcs.n	587a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    5824:	3229      	adds	r2, #41	; 0x29
    5826:	f14b 0300 	adc.w	r3, fp, #0
    582a:	1a82      	subs	r2, r0, r2
    582c:	eb71 0203 	sbcs.w	r2, r1, r3
    5830:	d323      	bcc.n	587a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    5832:	8922      	ldrh	r2, [r4, #8]
    5834:	ab12      	add	r3, sp, #72	; 0x48
    5836:	1a80      	subs	r0, r0, r2
    5838:	eb61 0105 	sbc.w	r1, r1, r5
    583c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    583e:	1e40      	subs	r0, r0, #1
    5840:	9200      	str	r2, [sp, #0]
    5842:	f141 31ff 	adc.w	r1, r1, #4294967295
    5846:	aa07      	add	r2, sp, #28
    5848:	f000 fd52 	bl	62f0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    584c:	7ae0      	ldrb	r0, [r4, #11]
    584e:	2800      	cmp	r0, #0
    5850:	bf0c      	ite	eq
    5852:	207a      	moveq	r0, #122	; 0x7a
    5854:	204a      	movne	r0, #74	; 0x4a
    5856:	9907      	ldr	r1, [sp, #28]
    5858:	8922      	ldrh	r2, [r4, #8]
    585a:	4408      	add	r0, r1
    585c:	6861      	ldr	r1, [r4, #4]
    585e:	4411      	add	r1, r2
    5860:	4408      	add	r0, r1
    5862:	1c80      	adds	r0, r0, #2
    5864:	f000 fd82 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5868:	4601      	mov	r1, r0
    586a:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    586e:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    5872:	1a08      	subs	r0, r1, r0
    5874:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5878:	e006      	b.n	5888 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    587a:	1e70      	subs	r0, r6, #1
    587c:	f147 31ff 	adc.w	r1, r7, #4294967295
    5880:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    5884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5888:	900c      	str	r0, [sp, #48]	; 0x30
    588a:	f1b9 0f00 	cmp.w	r9, #0
    588e:	d004      	beq.n	589a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    5890:	2100      	movs	r1, #0
    5892:	f240 50d5 	movw	r0, #1493	; 0x5d5
    5896:	f3af 8000 	nop.w
    589a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    589e:	f8d8 1008 	ldr.w	r1, [r8, #8]
    58a2:	1808      	adds	r0, r1, r0
    58a4:	eb42 0105 	adc.w	r1, r2, r5
    58a8:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    58ac:	2a20      	cmp	r2, #32
    58ae:	d009      	beq.n	58c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    58b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    58b4:	1a12      	subs	r2, r2, r0
    58b6:	eb73 0201 	sbcs.w	r2, r3, r1
    58ba:	d203      	bcs.n	58c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    58bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    58c0:	2001      	movs	r0, #1
    58c2:	9003      	str	r0, [sp, #12]
    58c4:	f1b9 0f00 	cmp.w	r9, #0
    58c8:	d004      	beq.n	58d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    58ca:	2100      	movs	r1, #0
    58cc:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    58d0:	f3af 8000 	nop.w
    58d4:	990a      	ldr	r1, [sp, #40]	; 0x28
    58d6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    58da:	1a0a      	subs	r2, r1, r0
    58dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    58de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    58e2:	18c9      	adds	r1, r1, r3
    58e4:	1a08      	subs	r0, r1, r0
    58e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    58ea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    58ee:	bf98      	it	ls
    58f0:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    58f4:	d80b      	bhi.n	590e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    58f6:	4632      	mov	r2, r6
    58f8:	463b      	mov	r3, r7
    58fa:	a90a      	add	r1, sp, #40	; 0x28
    58fc:	483f      	ldr	r0, [pc, #252]	; (59fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    58fe:	f8cd a000 	str.w	sl, [sp]
    5902:	f7fe fb2f 	bl	3f64 <MPSL_IRQ_RADIO_Handler+0xb4>
    5906:	9903      	ldr	r1, [sp, #12]
    5908:	4308      	orrs	r0, r1
    590a:	d145      	bne.n	5998 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    590c:	e05f      	b.n	59ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    590e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    5912:	aa05      	add	r2, sp, #20
    5914:	a903      	add	r1, sp, #12
    5916:	4658      	mov	r0, fp
    5918:	f000 fd44 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    591c:	f001 fa40 	bl	6da0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    5920:	f000 fd24 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5924:	4682      	mov	sl, r0
    5926:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    592a:	2820      	cmp	r0, #32
    592c:	d00a      	beq.n	5944 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    592e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    5932:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5936:	1d80      	adds	r0, r0, #6
    5938:	f145 0100 	adc.w	r1, r5, #0
    593c:	181e      	adds	r6, r3, r0
    593e:	eb42 0701 	adc.w	r7, r2, r1
    5942:	e024      	b.n	598e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    5944:	360a      	adds	r6, #10
    5946:	f147 0700 	adc.w	r7, r7, #0
    594a:	f1bb 0f00 	cmp.w	fp, #0
    594e:	d017      	beq.n	5980 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    5950:	f001 fd26 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    5954:	b9a0      	cbnz	r0, 5980 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    5956:	f001 fbfb 	bl	7150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    595a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    595e:	bf08      	it	eq
    5960:	200d      	moveq	r0, #13
    5962:	d00b      	beq.n	597c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    5964:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    5968:	3856      	subs	r0, #86	; 0x56
    596a:	bf08      	it	eq
    596c:	201c      	moveq	r0, #28
    596e:	d005      	beq.n	597c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    5970:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    5974:	389f      	subs	r0, #159	; 0x9f
    5976:	bf14      	ite	ne
    5978:	4628      	movne	r0, r5
    597a:	2032      	moveq	r0, #50	; 0x32
    597c:	1986      	adds	r6, r0, r6
    597e:	416f      	adcs	r7, r5
    5980:	9803      	ldr	r0, [sp, #12]
    5982:	4582      	cmp	sl, r0
    5984:	d903      	bls.n	598e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    5986:	ebaa 0000 	sub.w	r0, sl, r0
    598a:	1986      	adds	r6, r0, r6
    598c:	416f      	adcs	r7, r5
    598e:	201f      	movs	r0, #31
    5990:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    5994:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    5998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    599c:	f000 fc84 	bl	62a8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    59a0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    59a4:	1880      	adds	r0, r0, r2
    59a6:	eb41 0205 	adc.w	r2, r1, r5
    59aa:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    59ae:	1840      	adds	r0, r0, r1
    59b0:	eb42 0105 	adc.w	r1, r2, r5
    59b4:	1c40      	adds	r0, r0, #1
    59b6:	f141 0100 	adc.w	r1, r1, #0
    59ba:	f1b9 0f00 	cmp.w	r9, #0
    59be:	e9c4 0104 	strd	r0, r1, [r4, #16]
    59c2:	d004      	beq.n	59ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    59c4:	2100      	movs	r1, #0
    59c6:	f240 50fa 	movw	r0, #1530	; 0x5fa
    59ca:	f3af 8000 	nop.w
    59ce:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    59d2:	f88d 0000 	strb.w	r0, [sp]
    59d6:	f89d 0000 	ldrb.w	r0, [sp]
    59da:	2800      	cmp	r0, #0
    59dc:	f47f ae78 	bne.w	56d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    59e0:	b015      	add	sp, #84	; 0x54
    59e2:	2001      	movs	r0, #1
    59e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59e8:	e000ed04 	.word	0xe000ed04
    59ec:	00000000 	.word	0x00000000
    59f0:	20000ba0 	.word	0x20000ba0
    59f4:	20000b20 	.word	0x20000b20
    59f8:	1e847fff 	.word	0x1e847fff
    59fc:	0f424000 	.word	0x0f424000

00005a00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    5a00:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a04:	4d9d      	ldr	r5, [pc, #628]	; (5c7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    5a06:	b08c      	sub	sp, #48	; 0x30
    5a08:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    5a0c:	2000      	movs	r0, #0
    5a0e:	9007      	str	r0, [sp, #28]
    5a10:	9008      	str	r0, [sp, #32]
    5a12:	2001      	movs	r0, #1
    5a14:	4c9a      	ldr	r4, [pc, #616]	; (5c80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    5a16:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    5a1a:	f04f 0800 	mov.w	r8, #0
    5a1e:	4607      	mov	r7, r0
    5a20:	9006      	str	r0, [sp, #24]
    5a22:	b124      	cbz	r4, 5a2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    5a24:	2100      	movs	r1, #0
    5a26:	f240 70a5 	movw	r0, #1957	; 0x7a5
    5a2a:	f3af 8000 	nop.w
    5a2e:	9806      	ldr	r0, [sp, #24]
    5a30:	2800      	cmp	r0, #0
    5a32:	d03c      	beq.n	5aae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    5a34:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    5a38:	b124      	cbz	r4, 5a44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    5a3a:	2100      	movs	r1, #0
    5a3c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    5a40:	f3af 8000 	nop.w
    5a44:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    5a48:	2240      	movs	r2, #64	; 0x40
    5a4a:	ea27 060a 	bic.w	r6, r7, sl
    5a4e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    5a52:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    5a56:	4683      	mov	fp, r0
    5a58:	f004 fadc 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a5c:	b124      	cbz	r4, 5a68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    5a5e:	2100      	movs	r1, #0
    5a60:	f240 503c 	movw	r0, #1340	; 0x53c
    5a64:	f3af 8000 	nop.w
    5a68:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5a6c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    5a70:	4428      	add	r0, r5
    5a72:	4429      	add	r1, r5
    5a74:	9000      	str	r0, [sp, #0]
    5a76:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    5a78:	8502      	strh	r2, [r0, #40]	; 0x28
    5a7a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5a7e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5a82:	b124      	cbz	r4, 5a8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    5a84:	2100      	movs	r1, #0
    5a86:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5a8a:	f3af 8000 	nop.w
    5a8e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    5a92:	f88d 0008 	strb.w	r0, [sp, #8]
    5a96:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5a9a:	b178      	cbz	r0, 5abc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    5a9c:	2c00      	cmp	r4, #0
    5a9e:	bf1c      	itt	ne
    5aa0:	2100      	movne	r1, #0
    5aa2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    5aa6:	d0bc      	beq.n	5a22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    5aa8:	f3af 8000 	nop.w
    5aac:	e7b9      	b.n	5a22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    5aae:	4875      	ldr	r0, [pc, #468]	; (5c84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    5ab0:	2800      	cmp	r0, #0
    5ab2:	bf18      	it	ne
    5ab4:	f3af 8000 	nopne.w
    5ab8:	b662      	cpsie	i
    5aba:	e7bb      	b.n	5a34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    5abc:	b124      	cbz	r4, 5ac8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    5abe:	2100      	movs	r1, #0
    5ac0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    5ac4:	f3af 8000 	nop.w
    5ac8:	980c      	ldr	r0, [sp, #48]	; 0x30
    5aca:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    5ace:	2803      	cmp	r0, #3
    5ad0:	d17e      	bne.n	5bd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    5ad2:	9a00      	ldr	r2, [sp, #0]
    5ad4:	990c      	ldr	r1, [sp, #48]	; 0x30
    5ad6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    5ada:	4288      	cmp	r0, r1
    5adc:	bf14      	ite	ne
    5ade:	f04f 0a00 	movne.w	sl, #0
    5ae2:	f04f 0a01 	moveq.w	sl, #1
    5ae6:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    5aea:	4683      	mov	fp, r0
    5aec:	2220      	movs	r2, #32
    5aee:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    5af2:	e003      	b.n	5afc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    5af4:	4602      	mov	r2, r0
    5af6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    5afa:	7840      	ldrb	r0, [r0, #1]
    5afc:	4288      	cmp	r0, r1
    5afe:	d002      	beq.n	5b06 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    5b00:	2820      	cmp	r0, #32
    5b02:	d00a      	beq.n	5b1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    5b04:	e7f6      	b.n	5af4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    5b06:	2820      	cmp	r0, #32
    5b08:	d007      	beq.n	5b1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    5b0a:	4583      	cmp	fp, r0
    5b0c:	d107      	bne.n	5b1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    5b0e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    5b12:	7840      	ldrb	r0, [r0, #1]
    5b14:	f88c 0000 	strb.w	r0, [ip]
    5b18:	e007      	b.n	5b2a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    5b1a:	4640      	mov	r0, r8
    5b1c:	e00c      	b.n	5b38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    5b1e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5b22:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    5b26:	7840      	ldrb	r0, [r0, #1]
    5b28:	7048      	strb	r0, [r1, #1]
    5b2a:	b124      	cbz	r4, 5b36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    5b2c:	2100      	movs	r1, #0
    5b2e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    5b32:	f3af 8000 	nop.w
    5b36:	4638      	mov	r0, r7
    5b38:	46c3      	mov	fp, r8
    5b3a:	ea10 0f0a 	tst.w	r0, sl
    5b3e:	bf18      	it	ne
    5b40:	46bb      	movne	fp, r7
    5b42:	2800      	cmp	r0, #0
    5b44:	d04e      	beq.n	5be4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    5b46:	b124      	cbz	r4, 5b52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    5b48:	2100      	movs	r1, #0
    5b4a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    5b4e:	f3af 8000 	nop.w
    5b52:	4632      	mov	r2, r6
    5b54:	2001      	movs	r0, #1
    5b56:	990c      	ldr	r1, [sp, #48]	; 0x30
    5b58:	f7ff f830 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    5b5c:	b124      	cbz	r4, 5b68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    5b5e:	2100      	movs	r1, #0
    5b60:	f240 70c2 	movw	r0, #1986	; 0x7c2
    5b64:	f3af 8000 	nop.w
    5b68:	4847      	ldr	r0, [pc, #284]	; (5c88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    5b6a:	2800      	cmp	r0, #0
    5b6c:	bf18      	it	ne
    5b6e:	f3af 8000 	nopne.w
    5b72:	f3ef 8010 	mrs	r0, PRIMASK
    5b76:	b672      	cpsid	i
    5b78:	9006      	str	r0, [sp, #24]
    5b7a:	b124      	cbz	r4, 5b86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    5b7c:	2100      	movs	r1, #0
    5b7e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    5b82:	f3af 8000 	nop.w
    5b86:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    5b8a:	f88d 0008 	strb.w	r0, [sp, #8]
    5b8e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5b92:	b138      	cbz	r0, 5ba4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    5b94:	2c00      	cmp	r4, #0
    5b96:	bf1c      	itt	ne
    5b98:	2100      	movne	r1, #0
    5b9a:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    5b9e:	f43f af40 	beq.w	5a22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    5ba2:	e781      	b.n	5aa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    5ba4:	f1bb 0f00 	cmp.w	fp, #0
    5ba8:	d009      	beq.n	5bbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    5baa:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    5bae:	2820      	cmp	r0, #32
    5bb0:	d105      	bne.n	5bbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    5bb2:	4631      	mov	r1, r6
    5bb4:	2002      	movs	r0, #2
    5bb6:	f7ff f833 	bl	4c20 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc20>
    5bba:	9008      	str	r0, [sp, #32]
    5bbc:	b1f8      	cbz	r0, 5bfe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    5bbe:	b124      	cbz	r4, 5bca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    5bc0:	2100      	movs	r1, #0
    5bc2:	f240 70df 	movw	r0, #2015	; 0x7df
    5bc6:	f3af 8000 	nop.w
    5bca:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    5bce:	e000      	b.n	5bd2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    5bd0:	e008      	b.n	5be4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    5bd2:	ea27 0000 	bic.w	r0, r7, r0
    5bd6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    5bda:	20ff      	movs	r0, #255	; 0xff
    5bdc:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    5be0:	2001      	movs	r0, #1
    5be2:	9007      	str	r0, [sp, #28]
    5be4:	b124      	cbz	r4, 5bf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    5be6:	2100      	movs	r1, #0
    5be8:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    5bec:	f3af 8000 	nop.w
    5bf0:	9808      	ldr	r0, [sp, #32]
    5bf2:	4e26      	ldr	r6, [pc, #152]	; (5c8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    5bf4:	2802      	cmp	r0, #2
    5bf6:	d009      	beq.n	5c0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    5bf8:	2801      	cmp	r0, #1
    5bfa:	d027      	beq.n	5c4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    5bfc:	e02b      	b.n	5c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5bfe:	b354      	cbz	r4, 5c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5c00:	2100      	movs	r1, #0
    5c02:	f240 70da 	movw	r0, #2010	; 0x7da
    5c06:	f3af 8000 	nop.w
    5c0a:	e7ec      	b.n	5be6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    5c0c:	f000 feaa 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5c10:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    5c14:	ebb3 0c00 	subs.w	ip, r3, r0
    5c18:	eb72 0c01 	sbcs.w	ip, r2, r1
    5c1c:	d204      	bcs.n	5c28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    5c1e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    5c22:	2070      	movs	r0, #112	; 0x70
    5c24:	f001 fc34 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5c28:	1a18      	subs	r0, r3, r0
    5c2a:	eb62 0101 	sbc.w	r1, r2, r1
    5c2e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    5c32:	f171 0100 	sbcs.w	r1, r1, #0
    5c36:	d304      	bcc.n	5c42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    5c38:	f240 71ef 	movw	r1, #2031	; 0x7ef
    5c3c:	2070      	movs	r0, #112	; 0x70
    5c3e:	f001 fc27 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5c42:	f004 f857 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5c46:	6871      	ldr	r1, [r6, #4]
    5c48:	b129      	cbz	r1, 5c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5c4a:	e003      	b.n	5c54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    5c4c:	6871      	ldr	r1, [r6, #4]
    5c4e:	f04f 30ff 	mov.w	r0, #4294967295
    5c52:	b101      	cbz	r1, 5c56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    5c54:	4788      	blx	r1
    5c56:	9806      	ldr	r0, [sp, #24]
    5c58:	b148      	cbz	r0, 5c6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    5c5a:	b124      	cbz	r4, 5c66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    5c5c:	2100      	movs	r1, #0
    5c5e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5c62:	f3af 8000 	nop.w
    5c66:	9807      	ldr	r0, [sp, #28]
    5c68:	b00d      	add	sp, #52	; 0x34
    5c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c6e:	4805      	ldr	r0, [pc, #20]	; (5c84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    5c70:	2800      	cmp	r0, #0
    5c72:	bf18      	it	ne
    5c74:	f3af 8000 	nopne.w
    5c78:	b662      	cpsie	i
    5c7a:	e7ee      	b.n	5c5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    5c7c:	20000ba0 	.word	0x20000ba0
	...
    5c8c:	20000120 	.word	0x20000120

00005c90 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    5c90:	b510      	push	{r4, lr}
    5c92:	2820      	cmp	r0, #32
    5c94:	d211      	bcs.n	5cba <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    5c96:	490e      	ldr	r1, [pc, #56]	; (5cd0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    5c98:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    5c9c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    5ca0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    5ca4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    5ca8:	b13b      	cbz	r3, 5cba <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    5caa:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    5cae:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    5cb2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    5cb6:	2a01      	cmp	r2, #1
    5cb8:	d001      	beq.n	5cbe <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    5cba:	2000      	movs	r0, #0
    5cbc:	bd10      	pop	{r4, pc}
    5cbe:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    5cc2:	4601      	mov	r1, r0
    5cc4:	2000      	movs	r0, #0
    5cc6:	f7fe ff79 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    5cca:	2001      	movs	r0, #1
    5ccc:	bd10      	pop	{r4, pc}
    5cce:	0000      	.short	0x0000
    5cd0:	20000ba0 	.word	0x20000ba0

00005cd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    5cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cd8:	4e86      	ldr	r6, [pc, #536]	; (5ef4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    5cda:	4680      	mov	r8, r0
    5cdc:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    5ce0:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    5ce4:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    5ce8:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    5cec:	2800      	cmp	r0, #0
    5cee:	d071      	beq.n	5dd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    5cf0:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    5cf4:	4d80      	ldr	r5, [pc, #512]	; (5ef8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    5cf6:	b125      	cbz	r5, 5d02 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    5cf8:	2100      	movs	r1, #0
    5cfa:	f640 307b 	movw	r0, #2939	; 0xb7b
    5cfe:	f3af 8000 	nop.w
    5d02:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    5d06:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    5d0a:	2801      	cmp	r0, #1
    5d0c:	d018      	beq.n	5d40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    5d0e:	b2c0      	uxtb	r0, r0
    5d10:	2804      	cmp	r0, #4
    5d12:	bf1c      	itt	ne
    5d14:	2805      	cmpne	r0, #5
    5d16:	2806      	cmpne	r0, #6
    5d18:	d061      	beq.n	5dde <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    5d1a:	b12d      	cbz	r5, 5d28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    5d1c:	f04f 0100 	mov.w	r1, #0
    5d20:	f640 3087 	movw	r0, #2951	; 0xb87
    5d24:	f3af 8000 	nop.w
    5d28:	f004 f91a 	bl	9f60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5d2c:	b125      	cbz	r5, 5d38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    5d2e:	2100      	movs	r1, #0
    5d30:	f640 308b 	movw	r0, #2955	; 0xb8b
    5d34:	f3af 8000 	nop.w
    5d38:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    5d3c:	2801      	cmp	r0, #1
    5d3e:	d1e6      	bne.n	5d0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    5d40:	2401      	movs	r4, #1
    5d42:	b125      	cbz	r5, 5d4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    5d44:	2100      	movs	r1, #0
    5d46:	f640 3092 	movw	r0, #2962	; 0xb92
    5d4a:	f3af 8000 	nop.w
    5d4e:	2c00      	cmp	r4, #0
    5d50:	d04b      	beq.n	5dea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    5d52:	2000      	movs	r0, #0
    5d54:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    5d58:	b125      	cbz	r5, 5d64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    5d5a:	2100      	movs	r1, #0
    5d5c:	f640 3097 	movw	r0, #2967	; 0xb97
    5d60:	f3af 8000 	nop.w
    5d64:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    5d68:	2001      	movs	r0, #1
    5d6a:	ea20 090b 	bic.w	r9, r0, fp
    5d6e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    5d72:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    5d76:	2240      	movs	r2, #64	; 0x40
    5d78:	f004 f94c 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5d7c:	b125      	cbz	r5, 5d88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    5d7e:	2100      	movs	r1, #0
    5d80:	f240 503c 	movw	r0, #1340	; 0x53c
    5d84:	f3af 8000 	nop.w
    5d88:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    5d8c:	eb00 0a06 	add.w	sl, r0, r6
    5d90:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    5d94:	4430      	add	r0, r6
    5d96:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    5d98:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    5d9c:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    5da0:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    5da4:	b125      	cbz	r5, 5db0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    5da6:	2100      	movs	r1, #0
    5da8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5dac:	f3af 8000 	nop.w
    5db0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    5db4:	f88d 0000 	strb.w	r0, [sp]
    5db8:	f89d 0000 	ldrb.w	r0, [sp]
    5dbc:	b1e0      	cbz	r0, 5df8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    5dbe:	2d00      	cmp	r5, #0
    5dc0:	bf1c      	itt	ne
    5dc2:	2100      	movne	r1, #0
    5dc4:	f640 309d 	movwne	r0, #2973	; 0xb9d
    5dc8:	d0bb      	beq.n	5d42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    5dca:	bf00      	nop
    5dcc:	f3af 8000 	nop.w
    5dd0:	e7b7      	b.n	5d42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    5dd2:	e7ff      	b.n	5dd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    5dd4:	f640 3172 	movw	r1, #2930	; 0xb72
    5dd8:	2070      	movs	r0, #112	; 0x70
    5dda:	f001 fb59 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5dde:	464a      	mov	r2, r9
    5de0:	4641      	mov	r1, r8
    5de2:	2001      	movs	r0, #1
    5de4:	f7fe feea 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    5de8:	e7a0      	b.n	5d2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    5dea:	4844      	ldr	r0, [pc, #272]	; (5efc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    5dec:	2800      	cmp	r0, #0
    5dee:	bf18      	it	ne
    5df0:	f3af 8000 	nopne.w
    5df4:	b662      	cpsie	i
    5df6:	e7ac      	b.n	5d52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    5df8:	b125      	cbz	r5, 5e04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    5dfa:	2100      	movs	r1, #0
    5dfc:	f640 30a1 	movw	r0, #2977	; 0xba1
    5e00:	f3af 8000 	nop.w
    5e04:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    5e08:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    5e0c:	4640      	mov	r0, r8
    5e0e:	461c      	mov	r4, r3
    5e10:	f04f 0b20 	mov.w	fp, #32
    5e14:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    5e18:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    5e1c:	e004      	b.n	5e28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    5e1e:	46a3      	mov	fp, r4
    5e20:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    5e24:	f89c 4001 	ldrb.w	r4, [ip, #1]
    5e28:	4284      	cmp	r4, r0
    5e2a:	d002      	beq.n	5e32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    5e2c:	2c20      	cmp	r4, #32
    5e2e:	d02b      	beq.n	5e88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    5e30:	e7f5      	b.n	5e1e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    5e32:	2c20      	cmp	r4, #32
    5e34:	d028      	beq.n	5e88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    5e36:	42a3      	cmp	r3, r4
    5e38:	d104      	bne.n	5e44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    5e3a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    5e3e:	7840      	ldrb	r0, [r0, #1]
    5e40:	7008      	strb	r0, [r1, #0]
    5e42:	e005      	b.n	5e50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    5e44:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    5e48:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    5e4c:	7840      	ldrb	r0, [r0, #1]
    5e4e:	7048      	strb	r0, [r1, #1]
    5e50:	f1ba 0f00 	cmp.w	sl, #0
    5e54:	d011      	beq.n	5e7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    5e56:	b125      	cbz	r5, 5e62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    5e58:	2100      	movs	r1, #0
    5e5a:	f240 409c 	movw	r0, #1180	; 0x49c
    5e5e:	f3af 8000 	nop.w
    5e62:	f89a 0000 	ldrb.w	r0, [sl]
    5e66:	42a0      	cmp	r0, r4
    5e68:	d107      	bne.n	5e7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    5e6a:	b125      	cbz	r5, 5e76 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    5e6c:	2100      	movs	r1, #0
    5e6e:	f240 409f 	movw	r0, #1183	; 0x49f
    5e72:	f3af 8000 	nop.w
    5e76:	f88a b000 	strb.w	fp, [sl]
    5e7a:	b15d      	cbz	r5, 5e94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    5e7c:	2100      	movs	r1, #0
    5e7e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    5e82:	f3af 8000 	nop.w
    5e86:	e000      	b.n	5e8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    5e88:	b125      	cbz	r5, 5e94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    5e8a:	2100      	movs	r1, #0
    5e8c:	f640 30a5 	movw	r0, #2981	; 0xba5
    5e90:	f3af 8000 	nop.w
    5e94:	481a      	ldr	r0, [pc, #104]	; (5f00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    5e96:	2800      	cmp	r0, #0
    5e98:	bf18      	it	ne
    5e9a:	f3af 8000 	nopne.w
    5e9e:	f3ef 8410 	mrs	r4, PRIMASK
    5ea2:	b672      	cpsid	i
    5ea4:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    5ea8:	f88d 0000 	strb.w	r0, [sp]
    5eac:	f89d 0000 	ldrb.w	r0, [sp]
    5eb0:	b138      	cbz	r0, 5ec2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    5eb2:	2d00      	cmp	r5, #0
    5eb4:	bf1c      	itt	ne
    5eb6:	2100      	movne	r1, #0
    5eb8:	f640 30ab 	movwne	r0, #2987	; 0xbab
    5ebc:	f43f af41 	beq.w	5d42 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    5ec0:	e784      	b.n	5dcc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    5ec2:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    5ec6:	20ff      	movs	r0, #255	; 0xff
    5ec8:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    5ecc:	b154      	cbz	r4, 5ee4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    5ece:	2d00      	cmp	r5, #0
    5ed0:	bf08      	it	eq
    5ed2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ed6:	2100      	movs	r1, #0
    5ed8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5edc:	f3af 8000 	nop.w
    5ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ee4:	4805      	ldr	r0, [pc, #20]	; (5efc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    5ee6:	2800      	cmp	r0, #0
    5ee8:	bf18      	it	ne
    5eea:	f3af 8000 	nopne.w
    5eee:	b662      	cpsie	i
    5ef0:	e7ed      	b.n	5ece <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    5ef2:	0000      	.short	0x0000
    5ef4:	20000ba0 	.word	0x20000ba0
	...

00005f04 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    5f04:	b570      	push	{r4, r5, r6, lr}
    5f06:	460d      	mov	r5, r1
    5f08:	4606      	mov	r6, r0
    5f0a:	f001 fa37 	bl	737c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    5f0e:	480d      	ldr	r0, [pc, #52]	; (5f44 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    5f10:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    5f14:	2400      	movs	r4, #0
    5f16:	3880      	subs	r0, #128	; 0x80
    5f18:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    5f1c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    5f20:	b129      	cbz	r1, 5f2e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    5f22:	1c61      	adds	r1, r4, #1
    5f24:	b2cc      	uxtb	r4, r1
    5f26:	2c20      	cmp	r4, #32
    5f28:	d3f8      	bcc.n	5f1c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    5f2a:	2020      	movs	r0, #32
    5f2c:	bd70      	pop	{r4, r5, r6, pc}
    5f2e:	4806      	ldr	r0, [pc, #24]	; (5f48 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    5f30:	4621      	mov	r1, r4
    5f32:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5f36:	e9c0 6500 	strd	r6, r5, [r0]
    5f3a:	2001      	movs	r0, #1
    5f3c:	f7fe fe3e 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    5f40:	4620      	mov	r0, r4
    5f42:	bd70      	pop	{r4, r5, r6, pc}
    5f44:	20000ba0 	.word	0x20000ba0
    5f48:	20000720 	.word	0x20000720

00005f4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    5f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f50:	f000 fd08 	bl	6964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f54:	4606      	mov	r6, r0
    5f56:	460f      	mov	r7, r1
    5f58:	f000 fe48 	bl	6bec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    5f5c:	4c65      	ldr	r4, [pc, #404]	; (60f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    5f5e:	6860      	ldr	r0, [r4, #4]
    5f60:	f1b0 3fff 	cmp.w	r0, #4294967295
    5f64:	bf1c      	itt	ne
    5f66:	f04f 30ff 	movne.w	r0, #4294967295
    5f6a:	6060      	strne	r0, [r4, #4]
    5f6c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    5f70:	f8df b184 	ldr.w	fp, [pc, #388]	; 60f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    5f74:	2500      	movs	r5, #0
    5f76:	bb10      	cbnz	r0, 5fbe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    5f78:	f44f 710c 	mov.w	r1, #560	; 0x230
    5f7c:	6920      	ldr	r0, [r4, #16]
    5f7e:	f001 f9e9 	bl	7354 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    5f82:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    5f86:	68a1      	ldr	r1, [r4, #8]
    5f88:	1818      	adds	r0, r3, r0
    5f8a:	eb45 0305 	adc.w	r3, r5, r5
    5f8e:	1809      	adds	r1, r1, r0
    5f90:	eb42 0003 	adc.w	r0, r2, r3
    5f94:	1a71      	subs	r1, r6, r1
    5f96:	eb77 0000 	sbcs.w	r0, r7, r0
    5f9a:	d310      	bcc.n	5fbe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    5f9c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5fa0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5fa4:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    5fa8:	6840      	ldr	r0, [r0, #4]
    5faa:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    5fae:	680a      	ldr	r2, [r1, #0]
    5fb0:	2108      	movs	r1, #8
    5fb2:	4790      	blx	r2
    5fb4:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    5fb8:	2070      	movs	r0, #112	; 0x70
    5fba:	f001 fa69 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5fbe:	7e60      	ldrb	r0, [r4, #25]
    5fc0:	b180      	cbz	r0, 5fe4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    5fc2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    5fc6:	f88d 0000 	strb.w	r0, [sp]
    5fca:	f89d 0000 	ldrb.w	r0, [sp]
    5fce:	b148      	cbz	r0, 5fe4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    5fd0:	f000 fc3e 	bl	6850 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    5fd4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    5fd8:	b150      	cbz	r0, 5ff0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    5fda:	f240 31cd 	movw	r1, #973	; 0x3cd
    5fde:	2070      	movs	r0, #112	; 0x70
    5fe0:	f001 fa56 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5fe4:	1cf0      	adds	r0, r6, #3
    5fe6:	f147 0100 	adc.w	r1, r7, #0
    5fea:	f000 fb0b 	bl	6604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    5fee:	e7f1      	b.n	5fd4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    5ff0:	2001      	movs	r0, #1
    5ff2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    5ff6:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5ffa:	2820      	cmp	r0, #32
    5ffc:	d020      	beq.n	6040 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    5ffe:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    6002:	2020      	movs	r0, #32
    6004:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    6008:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    600c:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    6010:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    6014:	6025      	str	r5, [r4, #0]
    6016:	f000 fec9 	bl	6dac <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    601a:	f884 0020 	strb.w	r0, [r4, #32]
    601e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    6022:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    6026:	eb00 0a04 	add.w	sl, r0, r4
    602a:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    602e:	2820      	cmp	r0, #32
    6030:	d01c      	beq.n	606c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6032:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    6036:	f89b 001a 	ldrb.w	r0, [fp, #26]
    603a:	2801      	cmp	r0, #1
    603c:	d005      	beq.n	604a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    603e:	e015      	b.n	606c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6040:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6044:	2070      	movs	r0, #112	; 0x70
    6046:	f001 fa23 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    604a:	2201      	movs	r2, #1
    604c:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    6050:	4630      	mov	r0, r6
    6052:	4639      	mov	r1, r7
    6054:	f7fe f91e 	bl	4294 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x294>
    6058:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    605c:	1a12      	subs	r2, r2, r0
    605e:	eb73 0201 	sbcs.w	r2, r3, r1
    6062:	bf24      	itt	cs
    6064:	f10b 0208 	addcs.w	r2, fp, #8
    6068:	e9c2 0100 	strdcs	r0, r1, [r2]
    606c:	4641      	mov	r1, r8
    606e:	2001      	movs	r0, #1
    6070:	f7fe fdd6 	bl	4c20 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc20>
    6074:	0007      	movs	r7, r0
    6076:	d0f9      	beq.n	606c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6078:	4820      	ldr	r0, [pc, #128]	; (60fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    607a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    607e:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    6082:	2802      	cmp	r0, #2
    6084:	d104      	bne.n	6090 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    6086:	4642      	mov	r2, r8
    6088:	4649      	mov	r1, r9
    608a:	2006      	movs	r0, #6
    608c:	f7fe fd96 	bl	4bbc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbbc>
    6090:	20ff      	movs	r0, #255	; 0xff
    6092:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    6096:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    609a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6100 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    609e:	2820      	cmp	r0, #32
    60a0:	bf1c      	itt	ne
    60a2:	f898 0001 	ldrbne.w	r0, [r8, #1]
    60a6:	f001 fac5 	blne	7634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    60aa:	f894 0020 	ldrb.w	r0, [r4, #32]
    60ae:	b128      	cbz	r0, 60bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    60b0:	f000 fe58 	bl	6d64 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    60b4:	f884 5020 	strb.w	r5, [r4, #32]
    60b8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    60bc:	2f02      	cmp	r7, #2
    60be:	d00f      	beq.n	60e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    60c0:	2f01      	cmp	r7, #1
    60c2:	bf18      	it	ne
    60c4:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60c8:	f04f 30ff 	mov.w	r0, #4294967295
    60cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    60d0:	2900      	cmp	r1, #0
    60d2:	bf08      	it	eq
    60d4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60d8:	b001      	add	sp, #4
    60da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60de:	4708      	bx	r1
    60e0:	68a0      	ldr	r0, [r4, #8]
    60e2:	1b80      	subs	r0, r0, r6
    60e4:	f003 fe06 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    60e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    60ec:	2900      	cmp	r1, #0
    60ee:	d1f3      	bne.n	60d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    60f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    60f4:	20000ba0 	.word	0x20000ba0
    60f8:	20000720 	.word	0x20000720
    60fc:	20000b20 	.word	0x20000b20
    6100:	20000120 	.word	0x20000120

00006104 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    6104:	b570      	push	{r4, r5, r6, lr}
    6106:	4c42      	ldr	r4, [pc, #264]	; (6210 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    6108:	4605      	mov	r5, r0
    610a:	b082      	sub	sp, #8
    610c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6110:	2820      	cmp	r0, #32
    6112:	d008      	beq.n	6126 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    6114:	6860      	ldr	r0, [r4, #4]
    6116:	f1b0 3fff 	cmp.w	r0, #4294967295
    611a:	d009      	beq.n	6130 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    611c:	f640 21b6 	movw	r1, #2742	; 0xab6
    6120:	2070      	movs	r0, #112	; 0x70
    6122:	f001 f9b5 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6126:	f640 21b5 	movw	r1, #2741	; 0xab5
    612a:	2070      	movs	r0, #112	; 0x70
    612c:	f001 f9b0 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6130:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6134:	4937      	ldr	r1, [pc, #220]	; (6214 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    6136:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    613a:	68b0      	ldr	r0, [r6, #8]
    613c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6140:	f003 fdd8 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6144:	4602      	mov	r2, r0
    6146:	8af0      	ldrh	r0, [r6, #22]
    6148:	7d31      	ldrb	r1, [r6, #20]
    614a:	4b33      	ldr	r3, [pc, #204]	; (6218 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    614c:	4408      	add	r0, r1
    614e:	1c40      	adds	r0, r0, #1
    6150:	1811      	adds	r1, r2, r0
    6152:	429a      	cmp	r2, r3
    6154:	d817      	bhi.n	6186 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    6156:	4a31      	ldr	r2, [pc, #196]	; (621c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    6158:	4290      	cmp	r0, r2
    615a:	dc1b      	bgt.n	6194 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    615c:	f1c2 0c00 	rsb	ip, r2, #0
    6160:	4560      	cmp	r0, ip
    6162:	db1e      	blt.n	61a2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    6164:	0056      	lsls	r6, r2, #1
    6166:	428e      	cmp	r6, r1
    6168:	bfdc      	itt	le
    616a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    616e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    6172:	dd05      	ble.n	6180 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    6174:	2900      	cmp	r1, #0
    6176:	bfbc      	itt	lt
    6178:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    617c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    6180:	1948      	adds	r0, r1, r5
    6182:	4299      	cmp	r1, r3
    6184:	d904      	bls.n	6190 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    6186:	f240 517f 	movw	r1, #1407	; 0x57f
    618a:	2070      	movs	r0, #112	; 0x70
    618c:	f001 f980 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6190:	4295      	cmp	r5, r2
    6192:	dd04      	ble.n	619e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    6194:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    6198:	2070      	movs	r0, #112	; 0x70
    619a:	f001 f979 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    619e:	4565      	cmp	r5, ip
    61a0:	da04      	bge.n	61ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    61a2:	f240 5181 	movw	r1, #1409	; 0x581
    61a6:	2070      	movs	r0, #112	; 0x70
    61a8:	f001 f972 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    61ac:	4286      	cmp	r6, r0
    61ae:	bfdc      	itt	le
    61b0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    61b4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    61b8:	dd05      	ble.n	61c6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    61ba:	2800      	cmp	r0, #0
    61bc:	bfbc      	itt	lt
    61be:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    61c2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    61c6:	aa01      	add	r2, sp, #4
    61c8:	4669      	mov	r1, sp
    61ca:	f000 f8eb 	bl	63a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    61ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
    61d2:	280f      	cmp	r0, #15
    61d4:	bf8c      	ite	hi
    61d6:	2001      	movhi	r0, #1
    61d8:	2000      	movls	r0, #0
    61da:	9900      	ldr	r1, [sp, #0]
    61dc:	4408      	add	r0, r1
    61de:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    61e2:	6061      	str	r1, [r4, #4]
    61e4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    61e8:	f88d 0000 	strb.w	r0, [sp]
    61ec:	f89d 0000 	ldrb.w	r0, [sp]
    61f0:	2800      	cmp	r0, #0
    61f2:	bf04      	itt	eq
    61f4:	b002      	addeq	sp, #8
    61f6:	bd70      	popeq	{r4, r5, r6, pc}
    61f8:	2005      	movs	r0, #5
    61fa:	f000 fbd5 	bl	69a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    61fe:	2800      	cmp	r0, #0
    6200:	bf1c      	itt	ne
    6202:	b002      	addne	sp, #8
    6204:	bd70      	popne	{r4, r5, r6, pc}
    6206:	f640 21bd 	movw	r1, #2749	; 0xabd
    620a:	2070      	movs	r0, #112	; 0x70
    620c:	f001 f940 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6210:	20000ba0 	.word	0x20000ba0
    6214:	20000720 	.word	0x20000720
    6218:	1e847fff 	.word	0x1e847fff
    621c:	0f424000 	.word	0x0f424000

00006220 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    6220:	b570      	push	{r4, r5, r6, lr}
    6222:	4c1e      	ldr	r4, [pc, #120]	; (629c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    6224:	2120      	movs	r1, #32
    6226:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    622a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    622e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    6232:	2000      	movs	r0, #0
    6234:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    6238:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    623c:	1e42      	subs	r2, r0, #1
    623e:	e9c4 0200 	strd	r0, r2, [r4]
    6242:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6246:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    624a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    624e:	f884 0020 	strb.w	r0, [r4, #32]
    6252:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    6256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    625a:	1e41      	subs	r1, r0, #1
    625c:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    6260:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6264:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    6268:	2210      	movs	r2, #16
    626a:	7088      	strb	r0, [r1, #2]
    626c:	f801 0f04 	strb.w	r0, [r1, #4]!
    6270:	1e52      	subs	r2, r2, #1
    6272:	d1fa      	bne.n	626a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    6274:	f000 fda4 	bl	6dc0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    6278:	4d09      	ldr	r5, [pc, #36]	; (62a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    627a:	2601      	movs	r6, #1
    627c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    6280:	20ff      	movs	r0, #255	; 0xff
    6282:	7028      	strb	r0, [r5, #0]
    6284:	4807      	ldr	r0, [pc, #28]	; (62a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    6286:	f001 f9b7 	bl	75f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    628a:	7068      	strb	r0, [r5, #1]
    628c:	f001 fa22 	bl	76d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    6290:	60a8      	str	r0, [r5, #8]
    6292:	f000 fd27 	bl	6ce4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    6296:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    629a:	bd70      	pop	{r4, r5, r6, pc}
    629c:	20000ba0 	.word	0x20000ba0
    62a0:	20000120 	.word	0x20000120
    62a4:	00004aed 	.word	0x00004aed

000062a8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    62a8:	0e03      	lsrs	r3, r0, #24
    62aa:	b430      	push	{r4, r5}
    62ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    62b0:	f8df c038 	ldr.w	ip, [pc, #56]	; 62ec <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    62b4:	0e09      	lsrs	r1, r1, #24
    62b6:	fba3 250c 	umull	r2, r5, r3, ip
    62ba:	fb01 510c 	mla	r1, r1, ip, r5
    62be:	2400      	movs	r4, #0
    62c0:	fb03 1104 	mla	r1, r3, r4, r1
    62c4:	f647 73ff 	movw	r3, #32767	; 0x7fff
    62c8:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    62cc:	f643 5c09 	movw	ip, #15625	; 0x3d09
    62d0:	fb13 f30c 	smulbb	r3, r3, ip
    62d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    62d8:	fb10 f00c 	smulbb	r0, r0, ip
    62dc:	f500 7080 	add.w	r0, r0, #256	; 0x100
    62e0:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    62e4:	1880      	adds	r0, r0, r2
    62e6:	4161      	adcs	r1, r4
    62e8:	bc30      	pop	{r4, r5}
    62ea:	4770      	bx	lr
    62ec:	1e848000 	.word	0x1e848000

000062f0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    62f0:	b570      	push	{r4, r5, r6, lr}
    62f2:	b084      	sub	sp, #16
    62f4:	4615      	mov	r5, r2
    62f6:	aa01      	add	r2, sp, #4
    62f8:	461c      	mov	r4, r3
    62fa:	9200      	str	r2, [sp, #0]
    62fc:	9e08      	ldr	r6, [sp, #32]
    62fe:	ab02      	add	r3, sp, #8
    6300:	4a17      	ldr	r2, [pc, #92]	; (6360 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    6302:	f003 fe78 	bl	9ff6 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    6306:	9801      	ldr	r0, [sp, #4]
    6308:	f248 6237 	movw	r2, #34359	; 0x8637
    630c:	0b41      	lsrs	r1, r0, #13
    630e:	4351      	muls	r1, r2
    6310:	0c09      	lsrs	r1, r1, #16
    6312:	4a14      	ldr	r2, [pc, #80]	; (6364 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    6314:	024b      	lsls	r3, r1, #9
    6316:	fb01 0102 	mla	r1, r1, r2, r0
    631a:	4813      	ldr	r0, [pc, #76]	; (6368 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    631c:	4348      	muls	r0, r1
    631e:	0d42      	lsrs	r2, r0, #21
    6320:	1898      	adds	r0, r3, r2
    6322:	f643 5309 	movw	r3, #15625	; 0x3d09
    6326:	fb12 f303 	smulbb	r3, r2, r3
    632a:	f503 7280 	add.w	r2, r3, #256	; 0x100
    632e:	f643 5c08 	movw	ip, #15624	; 0x3d08
    6332:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    6336:	4463      	add	r3, ip
    6338:	b2d2      	uxtb	r2, r2
    633a:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    633e:	bf84      	itt	hi
    6340:	2200      	movhi	r2, #0
    6342:	1c40      	addhi	r0, r0, #1
    6344:	7032      	strb	r2, [r6, #0]
    6346:	9b02      	ldr	r3, [sp, #8]
    6348:	0a19      	lsrs	r1, r3, #8
    634a:	061b      	lsls	r3, r3, #24
    634c:	1818      	adds	r0, r3, r0
    634e:	f141 0100 	adc.w	r1, r1, #0
    6352:	e9c4 0100 	strd	r0, r1, [r4]
    6356:	9801      	ldr	r0, [sp, #4]
    6358:	6028      	str	r0, [r5, #0]
    635a:	b004      	add	sp, #16
    635c:	bd70      	pop	{r4, r5, r6, pc}
    635e:	0000      	.short	0x0000
    6360:	1e848000 	.word	0x1e848000
    6364:	ffffc2f7 	.word	0xffffc2f7
    6368:	00010c6f 	.word	0x00010c6f

0000636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    636c:	0b41      	lsrs	r1, r0, #13
    636e:	f248 6237 	movw	r2, #34359	; 0x8637
    6372:	4351      	muls	r1, r2
    6374:	0c0a      	lsrs	r2, r1, #16
    6376:	4b09      	ldr	r3, [pc, #36]	; (639c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    6378:	0251      	lsls	r1, r2, #9
    637a:	fb02 0203 	mla	r2, r2, r3, r0
    637e:	4808      	ldr	r0, [pc, #32]	; (63a0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    6380:	4350      	muls	r0, r2
    6382:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    6386:	306e      	adds	r0, #110	; 0x6e
    6388:	0d40      	lsrs	r0, r0, #21
    638a:	425b      	negs	r3, r3
    638c:	fb10 f303 	smulbb	r3, r0, r3
    6390:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    6394:	bf88      	it	hi
    6396:	1c49      	addhi	r1, r1, #1
    6398:	4408      	add	r0, r1
    639a:	4770      	bx	lr
    639c:	ffffc2f7 	.word	0xffffc2f7
    63a0:	00010c6f 	.word	0x00010c6f

000063a4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    63a4:	0b43      	lsrs	r3, r0, #13
    63a6:	f248 6c37 	movw	ip, #34359	; 0x8637
    63aa:	fb03 f30c 	mul.w	r3, r3, ip
    63ae:	b430      	push	{r4, r5}
    63b0:	0c1b      	lsrs	r3, r3, #16
    63b2:	f8df c044 	ldr.w	ip, [pc, #68]	; 63f8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    63b6:	025c      	lsls	r4, r3, #9
    63b8:	fb03 030c 	mla	r3, r3, ip, r0
    63bc:	480f      	ldr	r0, [pc, #60]	; (63fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    63be:	4358      	muls	r0, r3
    63c0:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    63c4:	eb04 000c 	add.w	r0, r4, ip
    63c8:	f643 5409 	movw	r4, #15625	; 0x3d09
    63cc:	fb1c f404 	smulbb	r4, ip, r4
    63d0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    63d4:	f643 5508 	movw	r5, #15624	; 0x3d08
    63d8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    63dc:	442c      	add	r4, r5
    63de:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    63e2:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    63e6:	bf84      	itt	hi
    63e8:	f04f 0c00 	movhi.w	ip, #0
    63ec:	1c40      	addhi	r0, r0, #1
    63ee:	6008      	str	r0, [r1, #0]
    63f0:	f882 c000 	strb.w	ip, [r2]
    63f4:	bc30      	pop	{r4, r5}
    63f6:	4770      	bx	lr
    63f8:	ffffc2f7 	.word	0xffffc2f7
    63fc:	00010c6f 	.word	0x00010c6f

00006400 <MPSL_IRQ_RTC0_Handler>:
    6400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6404:	2400      	movs	r4, #0
    6406:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6488 <MPSL_IRQ_RTC0_Handler+0x88>
    640a:	4d20      	ldr	r5, [pc, #128]	; (648c <MPSL_IRQ_RTC0_Handler+0x8c>)
    640c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    6410:	f44f 78a0 	mov.w	r8, #320	; 0x140
    6414:	ea4f 0604 	mov.w	r6, r4
    6418:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    641c:	fa07 f004 	lsl.w	r0, r7, r4
    6420:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    6424:	4202      	tst	r2, r0
    6426:	d01a      	beq.n	645e <MPSL_IRQ_RTC0_Handler+0x5e>
    6428:	4a18      	ldr	r2, [pc, #96]	; (648c <MPSL_IRQ_RTC0_Handler+0x8c>)
    642a:	5852      	ldr	r2, [r2, r1]
    642c:	b1ba      	cbz	r2, 645e <MPSL_IRQ_RTC0_Handler+0x5e>
    642e:	506e      	str	r6, [r5, r1]
    6430:	00a1      	lsls	r1, r4, #2
    6432:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6436:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    643a:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    643e:	f8d9 2000 	ldr.w	r2, [r9]
    6442:	1a89      	subs	r1, r1, r2
    6444:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6448:	2902      	cmp	r1, #2
    644a:	d302      	bcc.n	6452 <MPSL_IRQ_RTC0_Handler+0x52>
    644c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6450:	d905      	bls.n	645e <MPSL_IRQ_RTC0_Handler+0x5e>
    6452:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6456:	1d20      	adds	r0, r4, #4
    6458:	b2c0      	uxtb	r0, r0
    645a:	f7fe fd8d 	bl	4f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    645e:	1c60      	adds	r0, r4, #1
    6460:	b2c4      	uxtb	r4, r0
    6462:	2c03      	cmp	r4, #3
    6464:	d3d8      	bcc.n	6418 <MPSL_IRQ_RTC0_Handler+0x18>
    6466:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    646a:	b128      	cbz	r0, 6478 <MPSL_IRQ_RTC0_Handler+0x78>
    646c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6470:	4807      	ldr	r0, [pc, #28]	; (6490 <MPSL_IRQ_RTC0_Handler+0x90>)
    6472:	6881      	ldr	r1, [r0, #8]
    6474:	1c49      	adds	r1, r1, #1
    6476:	6081      	str	r1, [r0, #8]
    6478:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    647c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6480:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    6484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6488:	4000b504 	.word	0x4000b504
    648c:	4000b000 	.word	0x4000b000
    6490:	20000028 	.word	0x20000028

00006494 <MPSL_IRQ_TIMER0_Handler>:
    6494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6498:	4d38      	ldr	r5, [pc, #224]	; (657c <MPSL_IRQ_TIMER0_Handler+0xe8>)
    649a:	7828      	ldrb	r0, [r5, #0]
    649c:	2804      	cmp	r0, #4
    649e:	d068      	beq.n	6572 <MPSL_IRQ_TIMER0_Handler+0xde>
    64a0:	1ca8      	adds	r0, r5, #2
    64a2:	2201      	movs	r2, #1
    64a4:	7801      	ldrb	r1, [r0, #0]
    64a6:	b159      	cbz	r1, 64c0 <MPSL_IRQ_TIMER0_Handler+0x2c>
    64a8:	2901      	cmp	r1, #1
    64aa:	bf08      	it	eq
    64ac:	706a      	strbeq	r2, [r5, #1]
    64ae:	d002      	beq.n	64b6 <MPSL_IRQ_TIMER0_Handler+0x22>
    64b0:	7869      	ldrb	r1, [r5, #1]
    64b2:	2900      	cmp	r1, #0
    64b4:	d058      	beq.n	6568 <MPSL_IRQ_TIMER0_Handler+0xd4>
    64b6:	2102      	movs	r1, #2
    64b8:	7001      	strb	r1, [r0, #0]
    64ba:	7840      	ldrb	r0, [r0, #1]
    64bc:	f000 fb2e 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    64c0:	4c2f      	ldr	r4, [pc, #188]	; (6580 <MPSL_IRQ_TIMER0_Handler+0xec>)
    64c2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    64c6:	f04f 0800 	mov.w	r8, #0
    64ca:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    64ce:	f44f 7780 	mov.w	r7, #256	; 0x100
    64d2:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    64d6:	d00a      	beq.n	64ee <MPSL_IRQ_TIMER0_Handler+0x5a>
    64d8:	482a      	ldr	r0, [pc, #168]	; (6584 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    64da:	6800      	ldr	r0, [r0, #0]
    64dc:	b138      	cbz	r0, 64ee <MPSL_IRQ_TIMER0_Handler+0x5a>
    64de:	2003      	movs	r0, #3
    64e0:	f000 fb1c 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    64e4:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    64e8:	2003      	movs	r0, #3
    64ea:	f7fe fd45 	bl	4f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    64ee:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    64f2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    64f6:	d00a      	beq.n	650e <MPSL_IRQ_TIMER0_Handler+0x7a>
    64f8:	4823      	ldr	r0, [pc, #140]	; (6588 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    64fa:	6800      	ldr	r0, [r0, #0]
    64fc:	b138      	cbz	r0, 650e <MPSL_IRQ_TIMER0_Handler+0x7a>
    64fe:	2002      	movs	r0, #2
    6500:	f000 fb0c 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6504:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6508:	2002      	movs	r0, #2
    650a:	f7fe fd35 	bl	4f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    650e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6512:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    6516:	d00a      	beq.n	652e <MPSL_IRQ_TIMER0_Handler+0x9a>
    6518:	481c      	ldr	r0, [pc, #112]	; (658c <MPSL_IRQ_TIMER0_Handler+0xf8>)
    651a:	6800      	ldr	r0, [r0, #0]
    651c:	b138      	cbz	r0, 652e <MPSL_IRQ_TIMER0_Handler+0x9a>
    651e:	2001      	movs	r0, #1
    6520:	f000 fafc 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6524:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6528:	2001      	movs	r0, #1
    652a:	f7fe fd25 	bl	4f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    652e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6532:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6536:	bf08      	it	eq
    6538:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    653c:	4814      	ldr	r0, [pc, #80]	; (6590 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    653e:	6800      	ldr	r0, [r0, #0]
    6540:	2800      	cmp	r0, #0
    6542:	bf08      	it	eq
    6544:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6548:	2000      	movs	r0, #0
    654a:	f000 fae7 	bl	6b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    654e:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6552:	2004      	movs	r0, #4
    6554:	7028      	strb	r0, [r5, #0]
    6556:	f8c5 8004 	str.w	r8, [r5, #4]
    655a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6562:	2000      	movs	r0, #0
    6564:	f7fe bd08 	b.w	4f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6568:	f240 5169 	movw	r1, #1385	; 0x569
    656c:	206c      	movs	r0, #108	; 0x6c
    656e:	f000 ff8f 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6576:	2007      	movs	r0, #7
    6578:	f7fe bcfe 	b.w	4f78 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    657c:	20000028 	.word	0x20000028
    6580:	40008000 	.word	0x40008000
    6584:	4000814c 	.word	0x4000814c
    6588:	40008148 	.word	0x40008148
    658c:	40008144 	.word	0x40008144
    6590:	40008140 	.word	0x40008140
    6594:	2201      	movs	r2, #1
    6596:	0211      	lsls	r1, r2, #8
    6598:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    659c:	2000      	movs	r0, #0
    659e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    65a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    65a6:	f3bf 8f4f 	dsb	sy
    65aa:	f3bf 8f6f 	isb	sy
    65ae:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    65b2:	490e      	ldr	r1, [pc, #56]	; (65ec <MPSL_IRQ_TIMER0_Handler+0x158>)
    65b4:	f841 2f04 	str.w	r2, [r1, #4]!
    65b8:	1e43      	subs	r3, r0, #1
    65ba:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    65be:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    65c2:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    65c6:	4b0a      	ldr	r3, [pc, #40]	; (65f0 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    65c8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    65cc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    65d0:	1d1b      	adds	r3, r3, #4
    65d2:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    65d6:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    65da:	1d1b      	adds	r3, r3, #4
    65dc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    65e0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    65e4:	60ca      	str	r2, [r1, #12]
    65e6:	4903      	ldr	r1, [pc, #12]	; (65f4 <MPSL_IRQ_TIMER0_Handler+0x160>)
    65e8:	7048      	strb	r0, [r1, #1]
    65ea:	4770      	bx	lr
    65ec:	40008000 	.word	0x40008000
    65f0:	40008004 	.word	0x40008004
    65f4:	20000028 	.word	0x20000028

000065f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    65f8:	4801      	ldr	r0, [pc, #4]	; (6600 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    65fa:	6800      	ldr	r0, [r0, #0]
    65fc:	4770      	bx	lr
    65fe:	0000      	.short	0x0000
    6600:	4000b504 	.word	0x4000b504

00006604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    6604:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6608:	f8df 8130 	ldr.w	r8, [pc, #304]	; 673c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    660c:	4604      	mov	r4, r0
    660e:	f1a8 0702 	sub.w	r7, r8, #2
    6612:	460e      	mov	r6, r1
    6614:	f898 c000 	ldrb.w	ip, [r8]
    6618:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    661c:	f1bc 0f01 	cmp.w	ip, #1
    6620:	d106      	bne.n	6630 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    6622:	ea81 0204 	eor.w	r2, r1, r4
    6626:	4070      	eors	r0, r6
    6628:	4310      	orrs	r0, r2
    662a:	bf08      	it	eq
    662c:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6630:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6634:	4a42      	ldr	r2, [pc, #264]	; (6740 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    6636:	6010      	str	r0, [r2, #0]
    6638:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    663c:	f1bc 0f00 	cmp.w	ip, #0
    6640:	bf07      	ittee	eq
    6642:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    6646:	2200      	moveq	r2, #0
    6648:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    664c:	2201      	movne	r2, #1
    664e:	483d      	ldr	r0, [pc, #244]	; (6744 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    6650:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    6654:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    6658:	2500      	movs	r5, #0
    665a:	f44f 79a0 	mov.w	r9, #320	; 0x140
    665e:	2a02      	cmp	r2, #2
    6660:	d207      	bcs.n	6672 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    6662:	bf00      	nop
    6664:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    6668:	50c5      	str	r5, [r0, r3]
    666a:	1c52      	adds	r2, r2, #1
    666c:	b2d2      	uxtb	r2, r2
    666e:	2a02      	cmp	r2, #2
    6670:	d3f8      	bcc.n	6664 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    6672:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    6676:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    667a:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    667e:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    6682:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    6686:	4a30      	ldr	r2, [pc, #192]	; (6748 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    6688:	f8d2 9000 	ldr.w	r9, [r2]
    668c:	eba3 0909 	sub.w	r9, r3, r9
    6690:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    6694:	f04f 0901 	mov.w	r9, #1
    6698:	f1ba 0f02 	cmp.w	sl, #2
    669c:	d32e      	bcc.n	66fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    669e:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    66a2:	d82b      	bhi.n	66fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    66a4:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    66a8:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    66ac:	f1bc 0f00 	cmp.w	ip, #0
    66b0:	d005      	beq.n	66be <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    66b2:	6810      	ldr	r0, [r2, #0]
    66b4:	1a08      	subs	r0, r1, r0
    66b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    66ba:	2802      	cmp	r0, #2
    66bc:	d3f9      	bcc.n	66b2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    66be:	f8c7 9004 	str.w	r9, [r7, #4]
    66c2:	703d      	strb	r5, [r7, #0]
    66c4:	f7ff ff66 	bl	6594 <MPSL_IRQ_TIMER0_Handler+0x100>
    66c8:	4820      	ldr	r0, [pc, #128]	; (674c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    66ca:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    66ce:	f365 0101 	bfi	r1, r5, #0, #2
    66d2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    66d6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    66da:	2102      	movs	r1, #2
    66dc:	f361 0201 	bfi	r2, r1, #0, #2
    66e0:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    66e4:	2110      	movs	r1, #16
    66e6:	fa91 f1a1 	rbit	r1, r1
    66ea:	fab1 f181 	clz	r1, r1
    66ee:	2909      	cmp	r1, #9
    66f0:	d909      	bls.n	6706 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    66f2:	f240 3155 	movw	r1, #853	; 0x355
    66f6:	a016      	add	r0, pc, #88	; (adr r0, 6750 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    66f8:	f000 fe9e 	bl	7438 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    66fc:	f240 31b2 	movw	r1, #946	; 0x3b2
    6700:	206c      	movs	r0, #108	; 0x6c
    6702:	f000 fec5 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6706:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    670a:	f8c0 900c 	str.w	r9, [r0, #12]
    670e:	6879      	ldr	r1, [r7, #4]
    6710:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6714:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    6718:	f44f 7180 	mov.w	r1, #256	; 0x100
    671c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    6720:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6724:	490d      	ldr	r1, [pc, #52]	; (675c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    6726:	0480      	lsls	r0, r0, #18
    6728:	6008      	str	r0, [r1, #0]
    672a:	e9c7 4604 	strd	r4, r6, [r7, #16]
    672e:	2004      	movs	r0, #4
    6730:	f888 0001 	strb.w	r0, [r8, #1]
    6734:	f888 9000 	strb.w	r9, [r8]
    6738:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    673c:	2000002a 	.word	0x2000002a
    6740:	4001f508 	.word	0x4001f508
    6744:	4000b000 	.word	0x4000b000
    6748:	4000b504 	.word	0x4000b504
    674c:	40008000 	.word	0x40008000
    6750:	5f66726e 	.word	0x5f66726e
    6754:	656d6974 	.word	0x656d6974
    6758:	00682e72 	.word	0x00682e72
    675c:	4001f504 	.word	0x4001f504

00006760 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    6760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6764:	4c31      	ldr	r4, [pc, #196]	; (682c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    6766:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    676a:	ea82 0c00 	eor.w	ip, r2, r0
    676e:	404b      	eors	r3, r1
    6770:	ea5c 0303 	orrs.w	r3, ip, r3
    6774:	bf14      	ite	ne
    6776:	2301      	movne	r3, #1
    6778:	2300      	moveq	r3, #0
    677a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 6830 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    677e:	f89c 8000 	ldrb.w	r8, [ip]
    6782:	f1b8 0f02 	cmp.w	r8, #2
    6786:	d002      	beq.n	678e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    6788:	2b00      	cmp	r3, #0
    678a:	d03f      	beq.n	680c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    678c:	e003      	b.n	6796 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    678e:	2b00      	cmp	r3, #0
    6790:	bf08      	it	eq
    6792:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6796:	7863      	ldrb	r3, [r4, #1]
    6798:	b3bb      	cbz	r3, 680a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    679a:	4d26      	ldr	r5, [pc, #152]	; (6834 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    679c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    67a0:	602b      	str	r3, [r5, #0]
    67a2:	4e25      	ldr	r6, [pc, #148]	; (6838 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    67a4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    67a8:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    67ac:	462f      	mov	r7, r5
    67ae:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    67b2:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    67b6:	2500      	movs	r5, #0
    67b8:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    67bc:	4d1f      	ldr	r5, [pc, #124]	; (683c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    67be:	f8d5 9000 	ldr.w	r9, [r5]
    67c2:	eba3 0909 	sub.w	r9, r3, r9
    67c6:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    67ca:	f1b9 0f02 	cmp.w	r9, #2
    67ce:	d327      	bcc.n	6820 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    67d0:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    67d4:	d824      	bhi.n	6820 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    67d6:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    67da:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    67de:	f1b8 0f00 	cmp.w	r8, #0
    67e2:	d005      	beq.n	67f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    67e4:	682b      	ldr	r3, [r5, #0]
    67e6:	1ad3      	subs	r3, r2, r3
    67e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    67ec:	2b02      	cmp	r3, #2
    67ee:	d3f9      	bcc.n	67e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    67f0:	4d13      	ldr	r5, [pc, #76]	; (6840 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    67f2:	2202      	movs	r2, #2
    67f4:	0753      	lsls	r3, r2, #29
    67f6:	602b      	str	r3, [r5, #0]
    67f8:	e9c4 0104 	strd	r0, r1, [r4, #16]
    67fc:	2004      	movs	r0, #4
    67fe:	f88c 0001 	strb.w	r0, [ip, #1]
    6802:	f88c 2000 	strb.w	r2, [ip]
    6806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    680a:	e004      	b.n	6816 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    680c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    6810:	206c      	movs	r0, #108	; 0x6c
    6812:	f000 fe3d 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6816:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    681a:	206c      	movs	r0, #108	; 0x6c
    681c:	f000 fe38 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6820:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6824:	206c      	movs	r0, #108	; 0x6c
    6826:	f000 fe33 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    682a:	0000      	.short	0x0000
    682c:	20000028 	.word	0x20000028
    6830:	2000002a 	.word	0x2000002a
    6834:	4001f508 	.word	0x4001f508
    6838:	4000b000 	.word	0x4000b000
    683c:	4000b504 	.word	0x4000b504
    6840:	4001f504 	.word	0x4001f504

00006844 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    6844:	4901      	ldr	r1, [pc, #4]	; (684c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    6846:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    684a:	4770      	bx	lr
    684c:	20000028 	.word	0x20000028

00006850 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    6850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6854:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 694c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    6858:	f89c 4000 	ldrb.w	r4, [ip]
    685c:	2c00      	cmp	r4, #0
    685e:	bf07      	ittee	eq
    6860:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    6864:	2100      	moveq	r1, #0
    6866:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    686a:	2101      	movne	r1, #1
    686c:	4838      	ldr	r0, [pc, #224]	; (6950 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    686e:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    6872:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    6876:	2300      	movs	r3, #0
    6878:	2902      	cmp	r1, #2
    687a:	bf38      	it	cc
    687c:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    6880:	d207      	bcs.n	6892 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    6882:	bf00      	nop
    6884:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    6888:	5083      	str	r3, [r0, r2]
    688a:	1c49      	adds	r1, r1, #1
    688c:	b2c9      	uxtb	r1, r1
    688e:	2902      	cmp	r1, #2
    6890:	d3f8      	bcc.n	6884 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    6892:	2c02      	cmp	r4, #2
    6894:	d004      	beq.n	68a0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    6896:	f240 31db 	movw	r1, #987	; 0x3db
    689a:	206c      	movs	r0, #108	; 0x6c
    689c:	f000 fdf8 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    68a0:	f3ef 8210 	mrs	r2, PRIMASK
    68a4:	b672      	cpsid	i
    68a6:	4c2b      	ldr	r4, [pc, #172]	; (6954 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    68a8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    68ac:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    68b0:	b12d      	cbz	r5, 68be <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    68b2:	68a1      	ldr	r1, [r4, #8]
    68b4:	1c49      	adds	r1, r1, #1
    68b6:	60a1      	str	r1, [r4, #8]
    68b8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    68bc:	e7f4      	b.n	68a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    68be:	68a0      	ldr	r0, [r4, #8]
    68c0:	b902      	cbnz	r2, 68c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    68c2:	b662      	cpsie	i
    68c4:	0a02      	lsrs	r2, r0, #8
    68c6:	0600      	lsls	r0, r0, #24
    68c8:	1840      	adds	r0, r0, r1
    68ca:	eb42 0103 	adc.w	r1, r2, r3
    68ce:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    68d2:	1cc0      	adds	r0, r0, #3
    68d4:	f141 0100 	adc.w	r1, r1, #0
    68d8:	4f1f      	ldr	r7, [pc, #124]	; (6958 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    68da:	2601      	movs	r6, #1
    68dc:	4d1f      	ldr	r5, [pc, #124]	; (695c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    68de:	ea80 0902 	eor.w	r9, r0, r2
    68e2:	ea81 0808 	eor.w	r8, r1, r8
    68e6:	ea59 0808 	orrs.w	r8, r9, r8
    68ea:	d00e      	beq.n	690a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    68ec:	f8d7 8000 	ldr.w	r8, [r7]
    68f0:	eba2 0808 	sub.w	r8, r2, r8
    68f4:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    68f8:	f1b8 0f04 	cmp.w	r8, #4
    68fc:	d305      	bcc.n	690a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    68fe:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    6902:	d802      	bhi.n	690a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    6904:	f7ff fe7e 	bl	6604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    6908:	e01b      	b.n	6942 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    690a:	6838      	ldr	r0, [r7, #0]
    690c:	1a10      	subs	r0, r2, r0
    690e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6912:	2802      	cmp	r0, #2
    6914:	d313      	bcc.n	693e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    6916:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    691a:	d810      	bhi.n	693e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    691c:	4910      	ldr	r1, [pc, #64]	; (6960 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    691e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    6922:	6008      	str	r0, [r1, #0]
    6924:	6066      	str	r6, [r4, #4]
    6926:	7023      	strb	r3, [r4, #0]
    6928:	606e      	str	r6, [r5, #4]
    692a:	60ee      	str	r6, [r5, #12]
    692c:	0040      	lsls	r0, r0, #1
    692e:	1f09      	subs	r1, r1, #4
    6930:	6008      	str	r0, [r1, #0]
    6932:	2004      	movs	r0, #4
    6934:	f88c 0001 	strb.w	r0, [ip, #1]
    6938:	f88c 6000 	strb.w	r6, [ip]
    693c:	e001      	b.n	6942 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    693e:	6066      	str	r6, [r4, #4]
    6940:	7023      	strb	r3, [r4, #0]
    6942:	6860      	ldr	r0, [r4, #4]
    6944:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    6948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    694c:	2000002a 	.word	0x2000002a
    6950:	4000b000 	.word	0x4000b000
    6954:	20000028 	.word	0x20000028
    6958:	4000b504 	.word	0x4000b504
    695c:	40008000 	.word	0x40008000
    6960:	4001f508 	.word	0x4001f508

00006964 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    6964:	b410      	push	{r4}
    6966:	f3ef 8410 	mrs	r4, PRIMASK
    696a:	b672      	cpsid	i
    696c:	4a0c      	ldr	r2, [pc, #48]	; (69a0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    696e:	490d      	ldr	r1, [pc, #52]	; (69a4 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    6970:	f04f 0c00 	mov.w	ip, #0
    6974:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    6978:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    697c:	b12b      	cbz	r3, 698a <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    697e:	6888      	ldr	r0, [r1, #8]
    6980:	1c40      	adds	r0, r0, #1
    6982:	6088      	str	r0, [r1, #8]
    6984:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    6988:	e7f4      	b.n	6974 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    698a:	6889      	ldr	r1, [r1, #8]
    698c:	b904      	cbnz	r4, 6990 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    698e:	b662      	cpsie	i
    6990:	0a0a      	lsrs	r2, r1, #8
    6992:	0609      	lsls	r1, r1, #24
    6994:	1808      	adds	r0, r1, r0
    6996:	bc10      	pop	{r4}
    6998:	eb42 010c 	adc.w	r1, r2, ip
    699c:	4770      	bx	lr
    699e:	0000      	.short	0x0000
    69a0:	4000b000 	.word	0x4000b000
    69a4:	20000028 	.word	0x20000028

000069a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    69a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69ac:	4a56      	ldr	r2, [pc, #344]	; (6b08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    69ae:	2501      	movs	r5, #1
    69b0:	2400      	movs	r4, #0
    69b2:	f892 c000 	ldrb.w	ip, [r2]
    69b6:	7852      	ldrb	r2, [r2, #1]
    69b8:	f44f 76a0 	mov.w	r6, #320	; 0x140
    69bc:	2807      	cmp	r0, #7
    69be:	d27d      	bcs.n	6abc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    69c0:	e8df f000 	tbb	[pc, r0]
    69c4:	04040404 	.word	0x04040404
    69c8:	00606060 	.word	0x00606060
    69cc:	4b4f      	ldr	r3, [pc, #316]	; (6b0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    69ce:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    69d2:	43ff      	mvns	r7, r7
    69d4:	ea77 0708 	orns	r7, r7, r8
    69d8:	bf04      	itt	eq
    69da:	785b      	ldrbeq	r3, [r3, #1]
    69dc:	2b00      	cmpeq	r3, #0
    69de:	d003      	beq.n	69e8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    69e0:	f1bc 0f02 	cmp.w	ip, #2
    69e4:	d005      	beq.n	69f2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    69e6:	e026      	b.n	6a36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    69e8:	f44f 6186 	mov.w	r1, #1072	; 0x430
    69ec:	206c      	movs	r0, #108	; 0x6c
    69ee:	f000 fd4f 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69f2:	1f13      	subs	r3, r2, #4
    69f4:	b2db      	uxtb	r3, r3
    69f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    69fa:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    69fe:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    6a02:	2300      	movs	r3, #0
    6a04:	f1bc 0f01 	cmp.w	ip, #1
    6a08:	d003      	beq.n	6a12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    6a0a:	f1bc 0f02 	cmp.w	ip, #2
    6a0e:	d008      	beq.n	6a22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    6a10:	e00e      	b.n	6a30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    6a12:	2a04      	cmp	r2, #4
    6a14:	bf24      	itt	cs
    6a16:	6837      	ldrcs	r7, [r6, #0]
    6a18:	2f00      	cmpcs	r7, #0
    6a1a:	bf08      	it	eq
    6a1c:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    6a20:	e006      	b.n	6a30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    6a22:	2a04      	cmp	r2, #4
    6a24:	bf24      	itt	cs
    6a26:	6837      	ldrcs	r7, [r6, #0]
    6a28:	2f00      	cmpcs	r7, #0
    6a2a:	bf08      	it	eq
    6a2c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    6a30:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    6a34:	d1e5      	bne.n	6a02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    6a36:	4b36      	ldr	r3, [pc, #216]	; (6b10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    6a38:	f100 0210 	add.w	r2, r0, #16
    6a3c:	fa05 f202 	lsl.w	r2, r5, r2
    6a40:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    6a44:	f04f 0c40 	mov.w	ip, #64	; 0x40
    6a48:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    6a4c:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6a50:	449c      	add	ip, r3
    6a52:	f8cc 5000 	str.w	r5, [ip]
    6a56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a5a:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    6a5e:	eba1 0c0c 	sub.w	ip, r1, ip
    6a62:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    6a66:	f1bc 0f03 	cmp.w	ip, #3
    6a6a:	bf3e      	ittt	cc
    6a6c:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    6a70:	2000      	movcc	r0, #0
    6a72:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a76:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    6a7a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    6a7e:	2001      	movs	r0, #1
    6a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a84:	f1bc 0f00 	cmp.w	ip, #0
    6a88:	d006      	beq.n	6a98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    6a8a:	4282      	cmp	r2, r0
    6a8c:	d104      	bne.n	6a98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    6a8e:	f44f 618a 	mov.w	r1, #1104	; 0x450
    6a92:	206c      	movs	r0, #108	; 0x6c
    6a94:	f000 fcfc 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a98:	1f00      	subs	r0, r0, #4
    6a9a:	b2c2      	uxtb	r2, r0
    6a9c:	2a03      	cmp	r2, #3
    6a9e:	d304      	bcc.n	6aaa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    6aa0:	f44f 7127 	mov.w	r1, #668	; 0x29c
    6aa4:	206c      	movs	r0, #108	; 0x6c
    6aa6:	f000 fcf3 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6aaa:	4b1a      	ldr	r3, [pc, #104]	; (6b14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    6aac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    6ab0:	4090      	lsls	r0, r2
    6ab2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    6ab6:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    6aba:	e000      	b.n	6abe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    6abc:	e01f      	b.n	6afe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    6abe:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    6ac2:	f843 400c 	str.w	r4, [r3, ip]
    6ac6:	f8df c050 	ldr.w	ip, [pc, #80]	; 6b18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    6aca:	f8dc c000 	ldr.w	ip, [ip]
    6ace:	eba1 0c0c 	sub.w	ip, r1, ip
    6ad2:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    6ad6:	f1bc 0f02 	cmp.w	ip, #2
    6ada:	d30d      	bcc.n	6af8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    6adc:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    6ae0:	d80a      	bhi.n	6af8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    6ae2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6ae6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    6aea:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    6aee:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    6af2:	4628      	mov	r0, r5
    6af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6af8:	4620      	mov	r0, r4
    6afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6afe:	f240 4154 	movw	r1, #1108	; 0x454
    6b02:	206c      	movs	r0, #108	; 0x6c
    6b04:	f000 fcc4 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6b08:	2000002a 	.word	0x2000002a
    6b0c:	20000028 	.word	0x20000028
    6b10:	40008000 	.word	0x40008000
    6b14:	4000b000 	.word	0x4000b000
    6b18:	4000b504 	.word	0x4000b504

00006b1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    6b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b1e:	2101      	movs	r1, #1
    6b20:	2600      	movs	r6, #0
    6b22:	f44f 77a0 	mov.w	r7, #320	; 0x140
    6b26:	2807      	cmp	r0, #7
    6b28:	d24a      	bcs.n	6bc0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    6b2a:	e8df f000 	tbb	[pc, r0]
    6b2e:	0404      	.short	0x0404
    6b30:	18180404 	.word	0x18180404
    6b34:	0018      	.short	0x0018
    6b36:	f100 0210 	add.w	r2, r0, #16
    6b3a:	fa01 f202 	lsl.w	r2, r1, r2
    6b3e:	4923      	ldr	r1, [pc, #140]	; (6bcc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    6b40:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    6b44:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    6b48:	2200      	movs	r2, #0
    6b4a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    6b4e:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    6b52:	508e      	str	r6, [r1, r2]
    6b54:	491e      	ldr	r1, [pc, #120]	; (6bd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    6b56:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    6b5a:	9000      	str	r0, [sp, #0]
    6b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b5e:	4d1d      	ldr	r5, [pc, #116]	; (6bd4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    6b60:	1f01      	subs	r1, r0, #4
    6b62:	b2cc      	uxtb	r4, r1
    6b64:	7829      	ldrb	r1, [r5, #0]
    6b66:	b181      	cbz	r1, 6b8a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    6b68:	786a      	ldrb	r2, [r5, #1]
    6b6a:	4282      	cmp	r2, r0
    6b6c:	d10d      	bne.n	6b8a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    6b6e:	4a1a      	ldr	r2, [pc, #104]	; (6bd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    6b70:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6b74:	6010      	str	r0, [r2, #0]
    6b76:	2901      	cmp	r1, #1
    6b78:	bf08      	it	eq
    6b7a:	f7ff fd0b 	bleq	6594 <MPSL_IRQ_TIMER0_Handler+0x100>
    6b7e:	702e      	strb	r6, [r5, #0]
    6b80:	4a16      	ldr	r2, [pc, #88]	; (6bdc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    6b82:	f04f 30ff 	mov.w	r0, #4294967295
    6b86:	e9c2 0004 	strd	r0, r0, [r2, #16]
    6b8a:	4915      	ldr	r1, [pc, #84]	; (6be0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    6b8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    6b90:	40a0      	lsls	r0, r4
    6b92:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    6b96:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    6b9a:	00a0      	lsls	r0, r4, #2
    6b9c:	4408      	add	r0, r1
    6b9e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    6ba2:	4a10      	ldr	r2, [pc, #64]	; (6be4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    6ba4:	6812      	ldr	r2, [r2, #0]
    6ba6:	1a80      	subs	r0, r0, r2
    6ba8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6bac:	2802      	cmp	r0, #2
    6bae:	bf24      	itt	cs
    6bb0:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    6bb4:	500e      	strcs	r6, [r1, r0]
    6bb6:	480c      	ldr	r0, [pc, #48]	; (6be8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    6bb8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    6bbc:	9000      	str	r0, [sp, #0]
    6bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bc0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6bc4:	206c      	movs	r0, #108	; 0x6c
    6bc6:	f000 fc63 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6bca:	0000      	.short	0x0000
    6bcc:	40008000 	.word	0x40008000
    6bd0:	40008140 	.word	0x40008140
    6bd4:	2000002a 	.word	0x2000002a
    6bd8:	4001f508 	.word	0x4001f508
    6bdc:	20000028 	.word	0x20000028
    6be0:	4000b000 	.word	0x4000b000
    6be4:	4000b504 	.word	0x4000b504
    6be8:	4000b140 	.word	0x4000b140

00006bec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    6bec:	481a      	ldr	r0, [pc, #104]	; (6c58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    6bee:	7800      	ldrb	r0, [r0, #0]
    6bf0:	2800      	cmp	r0, #0
    6bf2:	bf07      	ittee	eq
    6bf4:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    6bf8:	2100      	moveq	r1, #0
    6bfa:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    6bfe:	2101      	movne	r1, #1
    6c00:	4a16      	ldr	r2, [pc, #88]	; (6c5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    6c02:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    6c06:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    6c0a:	2000      	movs	r0, #0
    6c0c:	2902      	cmp	r1, #2
    6c0e:	bf38      	it	cc
    6c10:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    6c14:	d207      	bcs.n	6c26 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    6c16:	bf00      	nop
    6c18:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    6c1c:	50d0      	str	r0, [r2, r3]
    6c1e:	1c49      	adds	r1, r1, #1
    6c20:	b2c9      	uxtb	r1, r1
    6c22:	2902      	cmp	r1, #2
    6c24:	d3f8      	bcc.n	6c18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    6c26:	490e      	ldr	r1, [pc, #56]	; (6c60 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    6c28:	f04f 32ff 	mov.w	r2, #4294967295
    6c2c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    6c30:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    6c34:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    6c38:	1d0a      	adds	r2, r1, #4
    6c3a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    6c3e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    6c42:	1d12      	adds	r2, r2, #4
    6c44:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    6c48:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    6c4c:	1d12      	adds	r2, r2, #4
    6c4e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    6c52:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    6c56:	4770      	bx	lr
    6c58:	2000002a 	.word	0x2000002a
    6c5c:	4000b000 	.word	0x4000b000
    6c60:	40008000 	.word	0x40008000

00006c64 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    6c64:	b570      	push	{r4, r5, r6, lr}
    6c66:	f3ef 8110 	mrs	r1, PRIMASK
    6c6a:	b672      	cpsid	i
    6c6c:	2400      	movs	r4, #0
    6c6e:	4b0d      	ldr	r3, [pc, #52]	; (6ca4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    6c70:	4a0d      	ldr	r2, [pc, #52]	; (6ca8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    6c72:	bf00      	nop
    6c74:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    6c78:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    6c7c:	f1bc 0f00 	cmp.w	ip, #0
    6c80:	d005      	beq.n	6c8e <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    6c82:	6890      	ldr	r0, [r2, #8]
    6c84:	1c40      	adds	r0, r0, #1
    6c86:	6090      	str	r0, [r2, #8]
    6c88:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    6c8c:	e7f2      	b.n	6c74 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    6c8e:	6895      	ldr	r5, [r2, #8]
    6c90:	b901      	cbnz	r1, 6c94 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    6c92:	b662      	cpsie	i
    6c94:	f003 f82e 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6c98:	4a04      	ldr	r2, [pc, #16]	; (6cac <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    6c9a:	4621      	mov	r1, r4
    6c9c:	fbe5 0102 	umlal	r0, r1, r5, r2
    6ca0:	bd70      	pop	{r4, r5, r6, pc}
    6ca2:	0000      	.short	0x0000
    6ca4:	4000b000 	.word	0x4000b000
    6ca8:	20000028 	.word	0x20000028
    6cac:	1e848000 	.word	0x1e848000

00006cb0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    6cb0:	b510      	push	{r4, lr}
    6cb2:	2807      	cmp	r0, #7
    6cb4:	d20d      	bcs.n	6cd2 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    6cb6:	e8df f000 	tbb	[pc, r0]
    6cba:	0404      	.short	0x0404
    6cbc:	06060404 	.word	0x06060404
    6cc0:	0006      	.short	0x0006
    6cc2:	4906      	ldr	r1, [pc, #24]	; (6cdc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    6cc4:	e002      	b.n	6ccc <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    6cc6:	1f00      	subs	r0, r0, #4
    6cc8:	4905      	ldr	r1, [pc, #20]	; (6ce0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    6cca:	b2c0      	uxtb	r0, r0
    6ccc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    6cd0:	bd10      	pop	{r4, pc}
    6cd2:	f240 417b 	movw	r1, #1147	; 0x47b
    6cd6:	206c      	movs	r0, #108	; 0x6c
    6cd8:	f000 fbda 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6cdc:	40008140 	.word	0x40008140
    6ce0:	4000b140 	.word	0x4000b140

00006ce4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    6ce4:	b570      	push	{r4, r5, r6, lr}
    6ce6:	481b      	ldr	r0, [pc, #108]	; (6d54 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    6ce8:	2400      	movs	r4, #0
    6cea:	2104      	movs	r1, #4
    6cec:	7004      	strb	r4, [r0, #0]
    6cee:	1e80      	subs	r0, r0, #2
    6cf0:	7001      	strb	r1, [r0, #0]
    6cf2:	1f49      	subs	r1, r1, #5
    6cf4:	e9c0 1104 	strd	r1, r1, [r0, #16]
    6cf8:	6084      	str	r4, [r0, #8]
    6cfa:	f7ff fc4b 	bl	6594 <MPSL_IRQ_TIMER0_Handler+0x100>
    6cfe:	2501      	movs	r5, #1
    6d00:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    6d04:	02eb      	lsls	r3, r5, #11
    6d06:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    6d0a:	f3bf 8f4f 	dsb	sy
    6d0e:	f3bf 8f6f 	isb	sy
    6d12:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    6d16:	4a10      	ldr	r2, [pc, #64]	; (6d58 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    6d18:	6055      	str	r5, [r2, #4]
    6d1a:	6095      	str	r5, [r2, #8]
    6d1c:	480f      	ldr	r0, [pc, #60]	; (6d5c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    6d1e:	6801      	ldr	r1, [r0, #0]
    6d20:	2900      	cmp	r1, #0
    6d22:	d1fc      	bne.n	6d1e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    6d24:	480e      	ldr	r0, [pc, #56]	; (6d60 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    6d26:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    6d2a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    6d2e:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    6d32:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    6d36:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    6d3a:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    6d3e:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    6d42:	6015      	str	r5, [r2, #0]
    6d44:	f44f 7082 	mov.w	r0, #260	; 0x104
    6d48:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    6d4c:	2002      	movs	r0, #2
    6d4e:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    6d52:	bd70      	pop	{r4, r5, r6, pc}
    6d54:	2000002a 	.word	0x2000002a
    6d58:	4000b000 	.word	0x4000b000
    6d5c:	4000b504 	.word	0x4000b504
    6d60:	00070002 	.word	0x00070002

00006d64 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    6d64:	4808      	ldr	r0, [pc, #32]	; (6d88 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    6d66:	f990 0000 	ldrsb.w	r0, [r0]
    6d6a:	2800      	cmp	r0, #0
    6d6c:	bfb8      	it	lt
    6d6e:	4770      	bxlt	lr
    6d70:	f000 011f 	and.w	r1, r0, #31
    6d74:	2201      	movs	r2, #1
    6d76:	fa02 f101 	lsl.w	r1, r2, r1
    6d7a:	0940      	lsrs	r0, r0, #5
    6d7c:	0080      	lsls	r0, r0, #2
    6d7e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    6d82:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6d86:	4770      	bx	lr
    6d88:	20000198 	.word	0x20000198

00006d8c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    6d8c:	4803      	ldr	r0, [pc, #12]	; (6d9c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    6d8e:	7800      	ldrb	r0, [r0, #0]
    6d90:	2803      	cmp	r0, #3
    6d92:	bf0c      	ite	eq
    6d94:	2001      	moveq	r0, #1
    6d96:	2000      	movne	r0, #0
    6d98:	4770      	bx	lr
    6d9a:	0000      	.short	0x0000
    6d9c:	20000170 	.word	0x20000170

00006da0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    6da0:	4801      	ldr	r0, [pc, #4]	; (6da8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    6da2:	8840      	ldrh	r0, [r0, #2]
    6da4:	4770      	bx	lr
    6da6:	0000      	.short	0x0000
    6da8:	20000170 	.word	0x20000170

00006dac <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    6dac:	4803      	ldr	r0, [pc, #12]	; (6dbc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    6dae:	7800      	ldrb	r0, [r0, #0]
    6db0:	2802      	cmp	r0, #2
    6db2:	bf16      	itet	ne
    6db4:	2803      	cmpne	r0, #3
    6db6:	2001      	moveq	r0, #1
    6db8:	2000      	movne	r0, #0
    6dba:	4770      	bx	lr
    6dbc:	20000170 	.word	0x20000170

00006dc0 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    6dc0:	4802      	ldr	r0, [pc, #8]	; (6dcc <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    6dc2:	2100      	movs	r1, #0
    6dc4:	7001      	strb	r1, [r0, #0]
    6dc6:	8041      	strh	r1, [r0, #2]
    6dc8:	4770      	bx	lr
    6dca:	0000      	.short	0x0000
    6dcc:	20000170 	.word	0x20000170

00006dd0 <MPSL_IRQ_CLOCK_Handler>:
    6dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dd4:	4c16      	ldr	r4, [pc, #88]	; (6e30 <MPSL_IRQ_CLOCK_Handler+0x60>)
    6dd6:	7a60      	ldrb	r0, [r4, #9]
    6dd8:	2800      	cmp	r0, #0
    6dda:	d027      	beq.n	6e2c <MPSL_IRQ_CLOCK_Handler+0x5c>
    6ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
    6de0:	058d      	lsls	r5, r1, #22
    6de2:	4628      	mov	r0, r5
    6de4:	f002 ffb1 	bl	9d4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6de8:	4680      	mov	r8, r0
    6dea:	f44f 7182 	mov.w	r1, #260	; 0x104
    6dee:	4628      	mov	r0, r5
    6df0:	f002 ffab 	bl	9d4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6df4:	2600      	movs	r6, #0
    6df6:	4607      	mov	r7, r0
    6df8:	f1b8 0f00 	cmp.w	r8, #0
    6dfc:	d009      	beq.n	6e12 <MPSL_IRQ_CLOCK_Handler+0x42>
    6dfe:	2001      	movs	r0, #1
    6e00:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6e04:	7920      	ldrb	r0, [r4, #4]
    6e06:	b120      	cbz	r0, 6e12 <MPSL_IRQ_CLOCK_Handler+0x42>
    6e08:	7126      	strb	r6, [r4, #4]
    6e0a:	69e0      	ldr	r0, [r4, #28]
    6e0c:	b108      	cbz	r0, 6e12 <MPSL_IRQ_CLOCK_Handler+0x42>
    6e0e:	4780      	blx	r0
    6e10:	61e6      	str	r6, [r4, #28]
    6e12:	b137      	cbz	r7, 6e22 <MPSL_IRQ_CLOCK_Handler+0x52>
    6e14:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6e18:	2002      	movs	r0, #2
    6e1a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6e1e:	f000 fa57 	bl	72d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    6e22:	4640      	mov	r0, r8
    6e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6e28:	f000 b858 	b.w	6edc <MPSL_IRQ_CLOCK_Handler+0x10c>
    6e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e30:	2000012c 	.word	0x2000012c
    6e34:	b510      	push	{r4, lr}
    6e36:	f003 f832 	bl	9e9e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    6e3a:	b930      	cbnz	r0, 6e4a <MPSL_IRQ_CLOCK_Handler+0x7a>
    6e3c:	f003 f850 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    6e40:	b918      	cbnz	r0, 6e4a <MPSL_IRQ_CLOCK_Handler+0x7a>
    6e42:	f003 f883 	bl	9f4c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    6e46:	2800      	cmp	r0, #0
    6e48:	d002      	beq.n	6e50 <MPSL_IRQ_CLOCK_Handler+0x80>
    6e4a:	4902      	ldr	r1, [pc, #8]	; (6e54 <MPSL_IRQ_CLOCK_Handler+0x84>)
    6e4c:	2002      	movs	r0, #2
    6e4e:	6008      	str	r0, [r1, #0]
    6e50:	bd10      	pop	{r4, pc}
    6e52:	0000      	.short	0x0000
    6e54:	40000c34 	.word	0x40000c34
    6e58:	b570      	push	{r4, r5, r6, lr}
    6e5a:	f000 f99b 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    6e5e:	f000 fa9f 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6e62:	4c09      	ldr	r4, [pc, #36]	; (6e88 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    6e64:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6e68:	b130      	cbz	r0, 6e78 <MPSL_IRQ_CLOCK_Handler+0xa8>
    6e6a:	f7ff ffe3 	bl	6e34 <MPSL_IRQ_CLOCK_Handler+0x64>
    6e6e:	2001      	movs	r0, #1
    6e70:	6128      	str	r0, [r5, #16]
    6e72:	2004      	movs	r0, #4
    6e74:	72a0      	strb	r0, [r4, #10]
    6e76:	e004      	b.n	6e82 <MPSL_IRQ_CLOCK_Handler+0xb2>
    6e78:	2003      	movs	r0, #3
    6e7a:	72a0      	strb	r0, [r4, #10]
    6e7c:	2001      	movs	r0, #1
    6e7e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    6e82:	2000      	movs	r0, #0
    6e84:	71e0      	strb	r0, [r4, #7]
    6e86:	bd70      	pop	{r4, r5, r6, pc}
    6e88:	2000012c 	.word	0x2000012c
    6e8c:	b570      	push	{r4, r5, r6, lr}
    6e8e:	4c12      	ldr	r4, [pc, #72]	; (6ed8 <MPSL_IRQ_CLOCK_Handler+0x108>)
    6e90:	79a0      	ldrb	r0, [r4, #6]
    6e92:	b1e0      	cbz	r0, 6ece <MPSL_IRQ_CLOCK_Handler+0xfe>
    6e94:	79e1      	ldrb	r1, [r4, #7]
    6e96:	1e40      	subs	r0, r0, #1
    6e98:	4281      	cmp	r1, r0
    6e9a:	da18      	bge.n	6ece <MPSL_IRQ_CLOCK_Handler+0xfe>
    6e9c:	f000 fa80 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6ea0:	4605      	mov	r5, r0
    6ea2:	f000 fb69 	bl	7578 <mpsl_temperature_get>
    6ea6:	79a1      	ldrb	r1, [r4, #6]
    6ea8:	2901      	cmp	r1, #1
    6eaa:	d902      	bls.n	6eb2 <MPSL_IRQ_CLOCK_Handler+0xe2>
    6eac:	79e1      	ldrb	r1, [r4, #7]
    6eae:	1c49      	adds	r1, r1, #1
    6eb0:	71e1      	strb	r1, [r4, #7]
    6eb2:	b10d      	cbz	r5, 6eb8 <MPSL_IRQ_CLOCK_Handler+0xe8>
    6eb4:	6961      	ldr	r1, [r4, #20]
    6eb6:	e000      	b.n	6eba <MPSL_IRQ_CLOCK_Handler+0xea>
    6eb8:	6921      	ldr	r1, [r4, #16]
    6eba:	1a41      	subs	r1, r0, r1
    6ebc:	2902      	cmp	r1, #2
    6ebe:	da02      	bge.n	6ec6 <MPSL_IRQ_CLOCK_Handler+0xf6>
    6ec0:	f111 0f02 	cmn.w	r1, #2
    6ec4:	dc07      	bgt.n	6ed6 <MPSL_IRQ_CLOCK_Handler+0x106>
    6ec6:	b10d      	cbz	r5, 6ecc <MPSL_IRQ_CLOCK_Handler+0xfc>
    6ec8:	6160      	str	r0, [r4, #20]
    6eca:	e000      	b.n	6ece <MPSL_IRQ_CLOCK_Handler+0xfe>
    6ecc:	6120      	str	r0, [r4, #16]
    6ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ed2:	f7ff bfc1 	b.w	6e58 <MPSL_IRQ_CLOCK_Handler+0x88>
    6ed6:	bd70      	pop	{r4, r5, r6, pc}
    6ed8:	2000012c 	.word	0x2000012c
    6edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ee0:	4606      	mov	r6, r0
    6ee2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6ee6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    6eea:	4628      	mov	r0, r5
    6eec:	f002 ff2d 	bl	9d4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6ef0:	4680      	mov	r8, r0
    6ef2:	f44f 7188 	mov.w	r1, #272	; 0x110
    6ef6:	4628      	mov	r0, r5
    6ef8:	f002 ff27 	bl	9d4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    6efc:	4c27      	ldr	r4, [pc, #156]	; (6f9c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    6efe:	4682      	mov	sl, r0
    6f00:	7827      	ldrb	r7, [r4, #0]
    6f02:	f104 0008 	add.w	r0, r4, #8
    6f06:	f002 ff94 	bl	9e32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    6f0a:	b110      	cbz	r0, 6f12 <MPSL_IRQ_CLOCK_Handler+0x142>
    6f0c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    6f10:	e016      	b.n	6f40 <MPSL_IRQ_CLOCK_Handler+0x170>
    6f12:	f04f 0901 	mov.w	r9, #1
    6f16:	b146      	cbz	r6, 6f2a <MPSL_IRQ_CLOCK_Handler+0x15a>
    6f18:	7aa0      	ldrb	r0, [r4, #10]
    6f1a:	2803      	cmp	r0, #3
    6f1c:	d105      	bne.n	6f2a <MPSL_IRQ_CLOCK_Handler+0x15a>
    6f1e:	2004      	movs	r0, #4
    6f20:	72a0      	strb	r0, [r4, #10]
    6f22:	f7ff ff87 	bl	6e34 <MPSL_IRQ_CLOCK_Handler+0x64>
    6f26:	f8c5 9010 	str.w	r9, [r5, #16]
    6f2a:	2600      	movs	r6, #0
    6f2c:	f1b8 0f00 	cmp.w	r8, #0
    6f30:	d018      	beq.n	6f64 <MPSL_IRQ_CLOCK_Handler+0x194>
    6f32:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    6f36:	7aa0      	ldrb	r0, [r4, #10]
    6f38:	2804      	cmp	r0, #4
    6f3a:	d004      	beq.n	6f46 <MPSL_IRQ_CLOCK_Handler+0x176>
    6f3c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    6f40:	206d      	movs	r0, #109	; 0x6d
    6f42:	f000 faa5 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6f46:	f002 ffaa 	bl	9e9e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    6f4a:	b928      	cbnz	r0, 6f58 <MPSL_IRQ_CLOCK_Handler+0x188>
    6f4c:	f002 ffc8 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    6f50:	b910      	cbnz	r0, 6f58 <MPSL_IRQ_CLOCK_Handler+0x188>
    6f52:	f002 fffb 	bl	9f4c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    6f56:	b108      	cbz	r0, 6f5c <MPSL_IRQ_CLOCK_Handler+0x18c>
    6f58:	4811      	ldr	r0, [pc, #68]	; (6fa0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    6f5a:	6006      	str	r6, [r0, #0]
    6f5c:	2002      	movs	r0, #2
    6f5e:	72a0      	strb	r0, [r4, #10]
    6f60:	f000 f8fc 	bl	715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    6f64:	f1ba 0f00 	cmp.w	sl, #0
    6f68:	d008      	beq.n	6f7c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    6f6a:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    6f6e:	7aa0      	ldrb	r0, [r4, #10]
    6f70:	2802      	cmp	r0, #2
    6f72:	d101      	bne.n	6f78 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    6f74:	f7ff ff8a 	bl	6e8c <MPSL_IRQ_CLOCK_Handler+0xbc>
    6f78:	f8c5 9014 	str.w	r9, [r5, #20]
    6f7c:	b13f      	cbz	r7, 6f8e <MPSL_IRQ_CLOCK_Handler+0x1be>
    6f7e:	7026      	strb	r6, [r4, #0]
    6f80:	7aa0      	ldrb	r0, [r4, #10]
    6f82:	2802      	cmp	r0, #2
    6f84:	d101      	bne.n	6f8a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    6f86:	f7ff ff67 	bl	6e58 <MPSL_IRQ_CLOCK_Handler+0x88>
    6f8a:	f000 f8e7 	bl	715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    6f8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f92:	4802      	ldr	r0, [pc, #8]	; (6f9c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    6f94:	3008      	adds	r0, #8
    6f96:	f002 bf63 	b.w	9e60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    6f9a:	0000      	.short	0x0000
    6f9c:	2000012c 	.word	0x2000012c
    6fa0:	40000c34 	.word	0x40000c34
    6fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fa8:	4c49      	ldr	r4, [pc, #292]	; (70d0 <MPSL_IRQ_CLOCK_Handler+0x300>)
    6faa:	2700      	movs	r7, #0
    6fac:	4606      	mov	r6, r0
    6fae:	61a7      	str	r7, [r4, #24]
    6fb0:	7842      	ldrb	r2, [r0, #1]
    6fb2:	7881      	ldrb	r1, [r0, #2]
    6fb4:	7800      	ldrb	r0, [r0, #0]
    6fb6:	72e0      	strb	r0, [r4, #11]
    6fb8:	7162      	strb	r2, [r4, #5]
    6fba:	71a1      	strb	r1, [r4, #6]
    6fbc:	71e7      	strb	r7, [r4, #7]
    6fbe:	f04f 0801 	mov.w	r8, #1
    6fc2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6fc6:	2805      	cmp	r0, #5
    6fc8:	d225      	bcs.n	7016 <MPSL_IRQ_CLOCK_Handler+0x246>
    6fca:	e8df f000 	tbb	[pc, r0]
    6fce:	0310      	.short	0x0310
    6fd0:	00222006 	.word	0x00222006
    6fd4:	f8c4 8018 	str.w	r8, [r4, #24]
    6fd8:	e009      	b.n	6fee <MPSL_IRQ_CLOCK_Handler+0x21e>
    6fda:	f000 f8db 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    6fde:	2101      	movs	r1, #1
    6fe0:	4628      	mov	r0, r5
    6fe2:	f002 feb7 	bl	9d54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    6fe6:	2800      	cmp	r0, #0
    6fe8:	d0f9      	beq.n	6fde <MPSL_IRQ_CLOCK_Handler+0x20e>
    6fea:	2002      	movs	r0, #2
    6fec:	61a0      	str	r0, [r4, #24]
    6fee:	f002 fedd 	bl	9dac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    6ff2:	b1c0      	cbz	r0, 7026 <MPSL_IRQ_CLOCK_Handler+0x256>
    6ff4:	f000 f9ee 	bl	73d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    6ff8:	7e21      	ldrb	r1, [r4, #24]
    6ffa:	f001 0103 	and.w	r1, r1, #3
    6ffe:	4288      	cmp	r0, r1
    7000:	d111      	bne.n	7026 <MPSL_IRQ_CLOCK_Handler+0x256>
    7002:	79b0      	ldrb	r0, [r6, #6]
    7004:	b160      	cbz	r0, 7020 <MPSL_IRQ_CLOCK_Handler+0x250>
    7006:	2002      	movs	r0, #2
    7008:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    700c:	e044      	b.n	7098 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    700e:	4831      	ldr	r0, [pc, #196]	; (70d4 <MPSL_IRQ_CLOCK_Handler+0x304>)
    7010:	e7ec      	b.n	6fec <MPSL_IRQ_CLOCK_Handler+0x21c>
    7012:	4831      	ldr	r0, [pc, #196]	; (70d8 <MPSL_IRQ_CLOCK_Handler+0x308>)
    7014:	e7ea      	b.n	6fec <MPSL_IRQ_CLOCK_Handler+0x21c>
    7016:	f240 313d 	movw	r1, #829	; 0x33d
    701a:	206d      	movs	r0, #109	; 0x6d
    701c:	f000 fa38 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7020:	f000 f9ac 	bl	737c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    7024:	e038      	b.n	7098 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    7026:	f8c5 800c 	str.w	r8, [r5, #12]
    702a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    702e:	69a0      	ldr	r0, [r4, #24]
    7030:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    7034:	f002 ff1f 	bl	9e76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7038:	b940      	cbnz	r0, 704c <MPSL_IRQ_CLOCK_Handler+0x27c>
    703a:	f002 ff26 	bl	9e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    703e:	b928      	cbnz	r0, 704c <MPSL_IRQ_CLOCK_Handler+0x27c>
    7040:	f002 ff3a 	bl	9eb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7044:	b910      	cbnz	r0, 704c <MPSL_IRQ_CLOCK_Handler+0x27c>
    7046:	f002 ff4b 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    704a:	b138      	cbz	r0, 705c <MPSL_IRQ_CLOCK_Handler+0x28c>
    704c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7050:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    7054:	4921      	ldr	r1, [pc, #132]	; (70dc <MPSL_IRQ_CLOCK_Handler+0x30c>)
    7056:	f3c0 3042 	ubfx	r0, r0, #13, #3
    705a:	6008      	str	r0, [r1, #0]
    705c:	f002 ff0b 	bl	9e76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7060:	b940      	cbnz	r0, 7074 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    7062:	f002 ff12 	bl	9e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7066:	b928      	cbnz	r0, 7074 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    7068:	f002 ff26 	bl	9eb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    706c:	b910      	cbnz	r0, 7074 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    706e:	f002 ff37 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7072:	b118      	cbz	r0, 707c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    7074:	4919      	ldr	r1, [pc, #100]	; (70dc <MPSL_IRQ_CLOCK_Handler+0x30c>)
    7076:	3110      	adds	r1, #16
    7078:	f8c1 8000 	str.w	r8, [r1]
    707c:	f8c5 8008 	str.w	r8, [r5, #8]
    7080:	2002      	movs	r0, #2
    7082:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7086:	79b0      	ldrb	r0, [r6, #6]
    7088:	b930      	cbnz	r0, 7098 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    708a:	f000 f829 	bl	70e0 <MPSL_IRQ_CLOCK_Handler+0x310>
    708e:	2002      	movs	r0, #2
    7090:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7094:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    7098:	79a0      	ldrb	r0, [r4, #6]
    709a:	b170      	cbz	r0, 70ba <MPSL_IRQ_CLOCK_Handler+0x2ea>
    709c:	7830      	ldrb	r0, [r6, #0]
    709e:	b960      	cbnz	r0, 70ba <MPSL_IRQ_CLOCK_Handler+0x2ea>
    70a0:	f000 f97e 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    70a4:	4606      	mov	r6, r0
    70a6:	f000 fa67 	bl	7578 <mpsl_temperature_get>
    70aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    70ae:	b116      	cbz	r6, 70b6 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    70b0:	e9c4 1004 	strd	r1, r0, [r4, #16]
    70b4:	e001      	b.n	70ba <MPSL_IRQ_CLOCK_Handler+0x2ea>
    70b6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    70ba:	2101      	movs	r1, #1
    70bc:	4628      	mov	r0, r5
    70be:	f002 fe49 	bl	9d54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    70c2:	b108      	cbz	r0, 70c8 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    70c4:	f000 f966 	bl	7394 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    70c8:	72a7      	strb	r7, [r4, #10]
    70ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70ce:	0000      	.short	0x0000
    70d0:	2000012c 	.word	0x2000012c
    70d4:	00020001 	.word	0x00020001
    70d8:	00030001 	.word	0x00030001
    70dc:	4000053c 	.word	0x4000053c
    70e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70e4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    70e8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    70ec:	f010 0f02 	tst.w	r0, #2
    70f0:	d011      	beq.n	7116 <MPSL_IRQ_CLOCK_Handler+0x346>
    70f2:	4c16      	ldr	r4, [pc, #88]	; (714c <MPSL_IRQ_CLOCK_Handler+0x37c>)
    70f4:	6820      	ldr	r0, [r4, #0]
    70f6:	43c0      	mvns	r0, r0
    70f8:	f340 1600 	sbfx	r6, r0, #4, #1
    70fc:	6820      	ldr	r0, [r4, #0]
    70fe:	f040 0010 	orr.w	r0, r0, #16
    7102:	6020      	str	r0, [r4, #0]
    7104:	f44f 7782 	mov.w	r7, #260	; 0x104
    7108:	4639      	mov	r1, r7
    710a:	4628      	mov	r0, r5
    710c:	1c76      	adds	r6, r6, #1
    710e:	f002 fe1c 	bl	9d4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7112:	b128      	cbz	r0, 7120 <MPSL_IRQ_CLOCK_Handler+0x350>
    7114:	e00a      	b.n	712c <MPSL_IRQ_CLOCK_Handler+0x35c>
    7116:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    711a:	206d      	movs	r0, #109	; 0x6d
    711c:	f000 f9b8 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7120:	f002 ff20 	bl	9f64 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    7124:	e002      	b.n	712c <MPSL_IRQ_CLOCK_Handler+0x35c>
    7126:	bf00      	nop
    7128:	f002 ff1a 	bl	9f60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    712c:	4639      	mov	r1, r7
    712e:	4628      	mov	r0, r5
    7130:	f002 fe0b 	bl	9d4a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7134:	2800      	cmp	r0, #0
    7136:	d0f7      	beq.n	7128 <MPSL_IRQ_CLOCK_Handler+0x358>
    7138:	f000 f920 	bl	737c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    713c:	2e00      	cmp	r6, #0
    713e:	d103      	bne.n	7148 <MPSL_IRQ_CLOCK_Handler+0x378>
    7140:	6820      	ldr	r0, [r4, #0]
    7142:	f020 0010 	bic.w	r0, r0, #16
    7146:	6020      	str	r0, [r4, #0]
    7148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    714c:	e000ed10 	.word	0xe000ed10

00007150 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    7150:	4801      	ldr	r0, [pc, #4]	; (7158 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    7152:	89c0      	ldrh	r0, [r0, #14]
    7154:	4770      	bx	lr
    7156:	0000      	.short	0x0000
    7158:	2000012c 	.word	0x2000012c

0000715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    715c:	b510      	push	{r4, lr}
    715e:	f3ef 8410 	mrs	r4, PRIMASK
    7162:	b672      	cpsid	i
    7164:	480a      	ldr	r0, [pc, #40]	; (7190 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    7166:	7841      	ldrb	r1, [r0, #1]
    7168:	b129      	cbz	r1, 7176 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    716a:	7841      	ldrb	r1, [r0, #1]
    716c:	1e49      	subs	r1, r1, #1
    716e:	7041      	strb	r1, [r0, #1]
    7170:	7841      	ldrb	r1, [r0, #1]
    7172:	b129      	cbz	r1, 7180 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    7174:	e008      	b.n	7188 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    7176:	f240 1119 	movw	r1, #281	; 0x119
    717a:	206d      	movs	r0, #109	; 0x6d
    717c:	f000 f988 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7180:	7880      	ldrb	r0, [r0, #2]
    7182:	b908      	cbnz	r0, 7188 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    7184:	f000 f91a 	bl	73bc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    7188:	2c00      	cmp	r4, #0
    718a:	d100      	bne.n	718e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    718c:	b662      	cpsie	i
    718e:	bd10      	pop	{r4, pc}
    7190:	2000012c 	.word	0x2000012c

00007194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    7194:	b510      	push	{r4, lr}
    7196:	f3ef 8410 	mrs	r4, PRIMASK
    719a:	b672      	cpsid	i
    719c:	4806      	ldr	r0, [pc, #24]	; (71b8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    719e:	7841      	ldrb	r1, [r0, #1]
    71a0:	1c49      	adds	r1, r1, #1
    71a2:	7041      	strb	r1, [r0, #1]
    71a4:	7840      	ldrb	r0, [r0, #1]
    71a6:	2801      	cmp	r0, #1
    71a8:	d101      	bne.n	71ae <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    71aa:	f002 fdea 	bl	9d82 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    71ae:	2c00      	cmp	r4, #0
    71b0:	d100      	bne.n	71b4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    71b2:	b662      	cpsie	i
    71b4:	bd10      	pop	{r4, pc}
    71b6:	0000      	.short	0x0000
    71b8:	2000012c 	.word	0x2000012c

000071bc <mpsl_clock_hfclk_release>:
    71bc:	4805      	ldr	r0, [pc, #20]	; (71d4 <mpsl_clock_hfclk_release+0x18>)
    71be:	b510      	push	{r4, lr}
    71c0:	78c1      	ldrb	r1, [r0, #3]
    71c2:	b121      	cbz	r1, 71ce <mpsl_clock_hfclk_release+0x12>
    71c4:	2100      	movs	r1, #0
    71c6:	7101      	strb	r1, [r0, #4]
    71c8:	70c1      	strb	r1, [r0, #3]
    71ca:	f7ff ffc7 	bl	715c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    71ce:	2000      	movs	r0, #0
    71d0:	bd10      	pop	{r4, pc}
    71d2:	0000      	.short	0x0000
    71d4:	2000012c 	.word	0x2000012c

000071d8 <mpsl_clock_hfclk_request>:
    71d8:	b570      	push	{r4, r5, r6, lr}
    71da:	4c0c      	ldr	r4, [pc, #48]	; (720c <mpsl_clock_hfclk_request+0x34>)
    71dc:	78e1      	ldrb	r1, [r4, #3]
    71de:	b961      	cbnz	r1, 71fa <mpsl_clock_hfclk_request+0x22>
    71e0:	2501      	movs	r5, #1
    71e2:	70e5      	strb	r5, [r4, #3]
    71e4:	61e0      	str	r0, [r4, #28]
    71e6:	f7ff ffd5 	bl	7194 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    71ea:	f000 f8d9 	bl	73a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    71ee:	b130      	cbz	r0, 71fe <mpsl_clock_hfclk_request+0x26>
    71f0:	69e0      	ldr	r0, [r4, #28]
    71f2:	b110      	cbz	r0, 71fa <mpsl_clock_hfclk_request+0x22>
    71f4:	4780      	blx	r0
    71f6:	2000      	movs	r0, #0
    71f8:	61e0      	str	r0, [r4, #28]
    71fa:	2000      	movs	r0, #0
    71fc:	bd70      	pop	{r4, r5, r6, pc}
    71fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7202:	7125      	strb	r5, [r4, #4]
    7204:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    7208:	e7f7      	b.n	71fa <mpsl_clock_hfclk_request+0x22>
    720a:	0000      	.short	0x0000
    720c:	2000012c 	.word	0x2000012c

00007210 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    7210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7214:	0005      	movs	r5, r0
    7216:	f06f 0015 	mvn.w	r0, #21
    721a:	d03f      	beq.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    721c:	7829      	ldrb	r1, [r5, #0]
    721e:	2904      	cmp	r1, #4
    7220:	d83c      	bhi.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7222:	2900      	cmp	r1, #0
    7224:	7869      	ldrb	r1, [r5, #1]
    7226:	d03b      	beq.n	72a0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    7228:	2900      	cmp	r1, #0
    722a:	d137      	bne.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    722c:	78a9      	ldrb	r1, [r5, #2]
    722e:	2900      	cmp	r1, #0
    7230:	d134      	bne.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7232:	2000      	movs	r0, #0
    7234:	f002 fd78 	bl	9d28 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    7238:	2000      	movs	r0, #0
    723a:	f002 fd68 	bl	9d0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    723e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7242:	f04f 31ff 	mov.w	r1, #4294967295
    7246:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    724a:	2600      	movs	r6, #0
    724c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    7250:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    7254:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    7258:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    725c:	4c14      	ldr	r4, [pc, #80]	; (72b0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    725e:	7066      	strb	r6, [r4, #1]
    7260:	88a8      	ldrh	r0, [r5, #4]
    7262:	81a0      	strh	r0, [r4, #12]
    7264:	f002 fd84 	bl	9d70 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    7268:	2701      	movs	r7, #1
    726a:	b108      	cbz	r0, 7270 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    726c:	70e7      	strb	r7, [r4, #3]
    726e:	7067      	strb	r7, [r4, #1]
    7270:	2101      	movs	r1, #1
    7272:	4640      	mov	r0, r8
    7274:	f002 fd6e 	bl	9d54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7278:	b108      	cbz	r0, 727e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    727a:	f000 f88b 	bl	7394 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    727e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    7282:	81e0      	strh	r0, [r4, #14]
    7284:	4628      	mov	r0, r5
    7286:	f7ff fe8d 	bl	6fa4 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    728a:	7267      	strb	r7, [r4, #9]
    728c:	2000      	movs	r0, #0
    728e:	f002 fd3e 	bl	9d0e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7292:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7296:	4630      	mov	r0, r6
    7298:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72a0:	2900      	cmp	r1, #0
    72a2:	d0fb      	beq.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    72a4:	2920      	cmp	r1, #32
    72a6:	d8f9      	bhi.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    72a8:	78a9      	ldrb	r1, [r5, #2]
    72aa:	2921      	cmp	r1, #33	; 0x21
    72ac:	d9c1      	bls.n	7232 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    72ae:	e7f5      	b.n	729c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    72b0:	2000012c 	.word	0x2000012c

000072b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    72b4:	4801      	ldr	r0, [pc, #4]	; (72bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    72b6:	8980      	ldrh	r0, [r0, #12]
    72b8:	4770      	bx	lr
    72ba:	0000      	.short	0x0000
    72bc:	2000012c 	.word	0x2000012c

000072c0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    72c0:	4802      	ldr	r0, [pc, #8]	; (72cc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    72c2:	7a80      	ldrb	r0, [r0, #10]
    72c4:	2800      	cmp	r0, #0
    72c6:	d000      	beq.n	72ca <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    72c8:	2001      	movs	r0, #1
    72ca:	4770      	bx	lr
    72cc:	2000012c 	.word	0x2000012c

000072d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    72d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72d2:	4d1f      	ldr	r5, [pc, #124]	; (7350 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    72d4:	7ae8      	ldrb	r0, [r5, #11]
    72d6:	2800      	cmp	r0, #0
    72d8:	d10f      	bne.n	72fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    72da:	7e28      	ldrb	r0, [r5, #24]
    72dc:	f000 0003 	and.w	r0, r0, #3
    72e0:	f002 fd54 	bl	9d8c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    72e4:	2800      	cmp	r0, #0
    72e6:	d008      	beq.n	72fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    72e8:	f3ef 8110 	mrs	r1, PRIMASK
    72ec:	b672      	cpsid	i
    72ee:	f7ff ffe7 	bl	72c0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    72f2:	b118      	cbz	r0, 72fc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    72f4:	2900      	cmp	r1, #0
    72f6:	d100      	bne.n	72fa <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    72f8:	b662      	cpsie	i
    72fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72fc:	2601      	movs	r6, #1
    72fe:	72ae      	strb	r6, [r5, #10]
    7300:	b901      	cbnz	r1, 7304 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    7302:	b662      	cpsie	i
    7304:	2018      	movs	r0, #24
    7306:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    730a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    730e:	61a6      	str	r6, [r4, #24]
    7310:	f44f 7020 	mov.w	r0, #640	; 0x280
    7314:	f8ad 0000 	strh.w	r0, [sp]
    7318:	f8bd 0000 	ldrh.w	r0, [sp]
    731c:	1e41      	subs	r1, r0, #1
    731e:	f8ad 1000 	strh.w	r1, [sp]
    7322:	d2f9      	bcs.n	7318 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    7324:	2700      	movs	r7, #0
    7326:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    732a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    732e:	4808      	ldr	r0, [pc, #32]	; (7350 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7330:	3008      	adds	r0, #8
    7332:	f002 fd91 	bl	9e58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    7336:	702f      	strb	r7, [r5, #0]
    7338:	f7ff fd8e 	bl	6e58 <MPSL_IRQ_CLOCK_Handler+0x88>
    733c:	6166      	str	r6, [r4, #20]
    733e:	7968      	ldrb	r0, [r5, #5]
    7340:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7344:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7348:	2018      	movs	r0, #24
    734a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7350:	2000012c 	.word	0x2000012c

00007354 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7354:	4602      	mov	r2, r0
    7356:	b510      	push	{r4, lr}
    7358:	2000      	movs	r0, #0
    735a:	2900      	cmp	r1, #0
    735c:	d00a      	beq.n	7374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    735e:	2a00      	cmp	r2, #0
    7360:	d008      	beq.n	7374 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7362:	fba2 0101 	umull	r0, r1, r2, r1
    7366:	1e40      	subs	r0, r0, #1
    7368:	4a03      	ldr	r2, [pc, #12]	; (7378 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    736a:	f141 31ff 	adc.w	r1, r1, #4294967295
    736e:	f002 fdfb 	bl	9f68 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    7372:	1c40      	adds	r0, r0, #1
    7374:	bd10      	pop	{r4, pc}
    7376:	0000      	.short	0x0000
    7378:	000f4240 	.word	0x000f4240

0000737c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    737c:	b510      	push	{r4, lr}
    737e:	4c04      	ldr	r4, [pc, #16]	; (7390 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    7380:	7e20      	ldrb	r0, [r4, #24]
    7382:	f000 0003 	and.w	r0, r0, #3
    7386:	f002 fd01 	bl	9d8c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    738a:	2800      	cmp	r0, #0
    738c:	d0f8      	beq.n	7380 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    738e:	bd10      	pop	{r4, pc}
    7390:	2000012c 	.word	0x2000012c

00007394 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    7394:	4901      	ldr	r1, [pc, #4]	; (739c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    7396:	2001      	movs	r0, #1
    7398:	7008      	strb	r0, [r1, #0]
    739a:	4770      	bx	lr
    739c:	20000199 	.word	0x20000199

000073a0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    73a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    73a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    73a8:	b918      	cbnz	r0, 73b2 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    73aa:	4803      	ldr	r0, [pc, #12]	; (73b8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    73ac:	7800      	ldrb	r0, [r0, #0]
    73ae:	2800      	cmp	r0, #0
    73b0:	d000      	beq.n	73b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    73b2:	2001      	movs	r0, #1
    73b4:	4770      	bx	lr
    73b6:	0000      	.short	0x0000
    73b8:	20000199 	.word	0x20000199

000073bc <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    73bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    73c0:	2101      	movs	r1, #1
    73c2:	6041      	str	r1, [r0, #4]
    73c4:	2100      	movs	r1, #0
    73c6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    73ca:	4801      	ldr	r0, [pc, #4]	; (73d0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    73cc:	7001      	strb	r1, [r0, #0]
    73ce:	4770      	bx	lr
    73d0:	20000199 	.word	0x20000199

000073d4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    73d4:	4802      	ldr	r0, [pc, #8]	; (73e0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    73d6:	6800      	ldr	r0, [r0, #0]
    73d8:	f000 0003 	and.w	r0, r0, #3
    73dc:	4770      	bx	lr
    73de:	0000      	.short	0x0000
    73e0:	4000041c 	.word	0x4000041c
    73e4:	b510      	push	{r4, lr}
    73e6:	b131      	cbz	r1, 73f6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    73e8:	2901      	cmp	r1, #1
    73ea:	d007      	beq.n	73fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    73ec:	f240 3102 	movw	r1, #770	; 0x302
    73f0:	a005      	add	r0, pc, #20	; (adr r0, 7408 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    73f2:	f000 f821 	bl	7438 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    73f6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    73fa:	e001      	b.n	7400 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    73fc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    7400:	f000 0001 	and.w	r0, r0, #1
    7404:	bd10      	pop	{r4, pc}
    7406:	0000      	.short	0x0000
    7408:	5f66726e 	.word	0x5f66726e
    740c:	636f6c63 	.word	0x636f6c63
    7410:	00682e6b 	.word	0x00682e6b
    7414:	f3bf 8f4f 	dsb	sy
    7418:	4805      	ldr	r0, [pc, #20]	; (7430 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    741a:	6801      	ldr	r1, [r0, #0]
    741c:	4a05      	ldr	r2, [pc, #20]	; (7434 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    741e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    7422:	4311      	orrs	r1, r2
    7424:	6001      	str	r1, [r0, #0]
    7426:	f3bf 8f4f 	dsb	sy
    742a:	bf00      	nop
    742c:	e7fd      	b.n	742a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    742e:	0000      	.short	0x0000
    7430:	e000ed0c 	.word	0xe000ed0c
    7434:	05fa0004 	.word	0x05fa0004

00007438 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    7438:	b672      	cpsid	i
    743a:	4a03      	ldr	r2, [pc, #12]	; (7448 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    743c:	6852      	ldr	r2, [r2, #4]
    743e:	b102      	cbz	r2, 7442 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    7440:	4790      	blx	r2
    7442:	f7ff ffe7 	bl	7414 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7446:	0000      	.short	0x0000
    7448:	2000014c 	.word	0x2000014c
    744c:	4806      	ldr	r0, [pc, #24]	; (7468 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    744e:	b510      	push	{r4, lr}
    7450:	2100      	movs	r1, #0
    7452:	6001      	str	r1, [r0, #0]
    7454:	2101      	movs	r1, #1
    7456:	6001      	str	r1, [r0, #0]
    7458:	4608      	mov	r0, r1
    745a:	f002 fcbe 	bl	9dda <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    745e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7462:	2001      	movs	r0, #1
    7464:	f002 bcac 	b.w	9dc0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7468:	40001ffc 	.word	0x40001ffc
    746c:	4807      	ldr	r0, [pc, #28]	; (748c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    746e:	b510      	push	{r4, lr}
    7470:	2101      	movs	r1, #1
    7472:	6041      	str	r1, [r0, #4]
    7474:	1e89      	subs	r1, r1, #2
    7476:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    747a:	200c      	movs	r0, #12
    747c:	f002 fcad 	bl	9dda <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7484:	200c      	movs	r0, #12
    7486:	f002 bc9b 	b.w	9dc0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    748a:	0000      	.short	0x0000
    748c:	4000c000 	.word	0x4000c000

00007490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    7490:	b50e      	push	{r1, r2, r3, lr}
    7492:	b672      	cpsid	i
    7494:	4a0f      	ldr	r2, [pc, #60]	; (74d4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    7496:	6855      	ldr	r5, [r2, #4]
    7498:	b1d5      	cbz	r5, 74d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    749a:	2200      	movs	r2, #0
    749c:	4603      	mov	r3, r0
    749e:	466e      	mov	r6, sp
    74a0:	240a      	movs	r4, #10
    74a2:	e003      	b.n	74ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    74a4:	fbb0 f0f4 	udiv	r0, r0, r4
    74a8:	1c52      	adds	r2, r2, #1
    74aa:	b2d2      	uxtb	r2, r2
    74ac:	2800      	cmp	r0, #0
    74ae:	d1f9      	bne.n	74a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    74b0:	54b0      	strb	r0, [r6, r2]
    74b2:	e009      	b.n	74c8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    74b4:	fbb3 f0f4 	udiv	r0, r3, r4
    74b8:	fb04 3010 	mls	r0, r4, r0, r3
    74bc:	fbb3 f3f4 	udiv	r3, r3, r4
    74c0:	1e52      	subs	r2, r2, #1
    74c2:	b2d2      	uxtb	r2, r2
    74c4:	3030      	adds	r0, #48	; 0x30
    74c6:	54b0      	strb	r0, [r6, r2]
    74c8:	2a00      	cmp	r2, #0
    74ca:	d1f3      	bne.n	74b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    74cc:	4630      	mov	r0, r6
    74ce:	47a8      	blx	r5
    74d0:	f7ff ffa0 	bl	7414 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    74d4:	2000014c 	.word	0x2000014c

000074d8 <mpsl_init>:
    74d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74dc:	4c18      	ldr	r4, [pc, #96]	; (7540 <mpsl_init+0x68>)
    74de:	4606      	mov	r6, r0
    74e0:	4617      	mov	r7, r2
    74e2:	7860      	ldrb	r0, [r4, #1]
    74e4:	460d      	mov	r5, r1
    74e6:	b118      	cbz	r0, 74f0 <mpsl_init+0x18>
    74e8:	f04f 30ff 	mov.w	r0, #4294967295
    74ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74f0:	f7fc fc38 	bl	3d64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    74f4:	b906      	cbnz	r6, 74f8 <mpsl_init+0x20>
    74f6:	4e13      	ldr	r6, [pc, #76]	; (7544 <mpsl_init+0x6c>)
    74f8:	6067      	str	r7, [r4, #4]
    74fa:	7025      	strb	r5, [r4, #0]
    74fc:	f7ff ffa6 	bl	744c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    7500:	f7ff ffb4 	bl	746c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    7504:	4630      	mov	r0, r6
    7506:	f7ff fe83 	bl	7210 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    750a:	0006      	movs	r6, r0
    750c:	d1ee      	bne.n	74ec <mpsl_init+0x14>
    750e:	f7fe fe87 	bl	6220 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    7512:	f7ff fedd 	bl	72d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    7516:	f002 fbc7 	bl	9ca8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    751a:	4628      	mov	r0, r5
    751c:	f002 fc50 	bl	9dc0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7520:	2001      	movs	r0, #1
    7522:	2d00      	cmp	r5, #0
    7524:	db09      	blt.n	753a <mpsl_init+0x62>
    7526:	f005 011f 	and.w	r1, r5, #31
    752a:	fa00 f101 	lsl.w	r1, r0, r1
    752e:	096a      	lsrs	r2, r5, #5
    7530:	0092      	lsls	r2, r2, #2
    7532:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    7536:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    753a:	7060      	strb	r0, [r4, #1]
    753c:	4630      	mov	r0, r6
    753e:	e7d5      	b.n	74ec <mpsl_init+0x14>
    7540:	2000014c 	.word	0x2000014c
    7544:	00009dfc 	.word	0x00009dfc

00007548 <mpsl_is_initialized>:
    7548:	4801      	ldr	r0, [pc, #4]	; (7550 <mpsl_is_initialized+0x8>)
    754a:	7840      	ldrb	r0, [r0, #1]
    754c:	4770      	bx	lr
    754e:	0000      	.short	0x0000
    7550:	2000014c 	.word	0x2000014c

00007554 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    7554:	4807      	ldr	r0, [pc, #28]	; (7574 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    7556:	f990 0000 	ldrsb.w	r0, [r0]
    755a:	2800      	cmp	r0, #0
    755c:	db09      	blt.n	7572 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    755e:	f000 021f 	and.w	r2, r0, #31
    7562:	2101      	movs	r1, #1
    7564:	4091      	lsls	r1, r2
    7566:	0940      	lsrs	r0, r0, #5
    7568:	0080      	lsls	r0, r0, #2
    756a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    756e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7572:	4770      	bx	lr
    7574:	2000014c 	.word	0x2000014c

00007578 <mpsl_temperature_get>:
    7578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    757c:	2501      	movs	r5, #1
    757e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7582:	0329      	lsls	r1, r5, #12
    7584:	f04f 0800 	mov.w	r8, #0
    7588:	4640      	mov	r0, r8
    758a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    758e:	f3bf 8f4f 	dsb	sy
    7592:	f3bf 8f6f 	isb	sy
    7596:	4c16      	ldr	r4, [pc, #88]	; (75f0 <mpsl_temperature_get+0x78>)
    7598:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    759c:	200c      	movs	r0, #12
    759e:	f002 fc3b 	bl	9e18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    75a2:	4e14      	ldr	r6, [pc, #80]	; (75f4 <mpsl_temperature_get+0x7c>)
    75a4:	6830      	ldr	r0, [r6, #0]
    75a6:	43c0      	mvns	r0, r0
    75a8:	f340 1700 	sbfx	r7, r0, #4, #1
    75ac:	6830      	ldr	r0, [r6, #0]
    75ae:	f040 0010 	orr.w	r0, r0, #16
    75b2:	6030      	str	r0, [r6, #0]
    75b4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    75b8:	6025      	str	r5, [r4, #0]
    75ba:	1c7f      	adds	r7, r7, #1
    75bc:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    75c0:	b108      	cbz	r0, 75c6 <mpsl_temperature_get+0x4e>
    75c2:	b11f      	cbz	r7, 75cc <mpsl_temperature_get+0x54>
    75c4:	e006      	b.n	75d4 <mpsl_temperature_get+0x5c>
    75c6:	f002 fccb 	bl	9f60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    75ca:	e7f7      	b.n	75bc <mpsl_temperature_get+0x44>
    75cc:	6830      	ldr	r0, [r6, #0]
    75ce:	f020 0010 	bic.w	r0, r0, #16
    75d2:	6030      	str	r0, [r6, #0]
    75d4:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    75d8:	6065      	str	r5, [r4, #4]
    75da:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    75de:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    75e2:	200c      	movs	r0, #12
    75e4:	f002 fc18 	bl	9e18 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    75e8:	4630      	mov	r0, r6
    75ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ee:	0000      	.short	0x0000
    75f0:	4000c000 	.word	0x4000c000
    75f4:	e000ed10 	.word	0xe000ed10

000075f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    75f8:	b510      	push	{r4, lr}
    75fa:	4602      	mov	r2, r0
    75fc:	2005      	movs	r0, #5
    75fe:	490c      	ldr	r1, [pc, #48]	; (7630 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    7600:	e004      	b.n	760c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    7602:	bf00      	nop
    7604:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    7608:	791b      	ldrb	r3, [r3, #4]
    760a:	b133      	cbz	r3, 761a <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    760c:	1e40      	subs	r0, r0, #1
    760e:	b2c0      	uxtb	r0, r0
    7610:	d2f8      	bcs.n	7604 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    7612:	2148      	movs	r1, #72	; 0x48
    7614:	2069      	movs	r0, #105	; 0x69
    7616:	f7ff ff3b 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    761a:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    761e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7622:	2200      	movs	r2, #0
    7624:	714a      	strb	r2, [r1, #5]
    7626:	718a      	strb	r2, [r1, #6]
    7628:	2201      	movs	r2, #1
    762a:	710a      	strb	r2, [r1, #4]
    762c:	bd10      	pop	{r4, pc}
    762e:	0000      	.short	0x0000
    7630:	20000e10 	.word	0x20000e10

00007634 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    7634:	b510      	push	{r4, lr}
    7636:	2805      	cmp	r0, #5
    7638:	d301      	bcc.n	763e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    763a:	2158      	movs	r1, #88	; 0x58
    763c:	e006      	b.n	764c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    763e:	490a      	ldr	r1, [pc, #40]	; (7668 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    7640:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7644:	7901      	ldrb	r1, [r0, #4]
    7646:	2901      	cmp	r1, #1
    7648:	d003      	beq.n	7652 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    764a:	2159      	movs	r1, #89	; 0x59
    764c:	2069      	movs	r0, #105	; 0x69
    764e:	f7ff ff1f 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7652:	7941      	ldrb	r1, [r0, #5]
    7654:	7982      	ldrb	r2, [r0, #6]
    7656:	1c49      	adds	r1, r1, #1
    7658:	b2c9      	uxtb	r1, r1
    765a:	428a      	cmp	r2, r1
    765c:	d000      	beq.n	7660 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    765e:	7141      	strb	r1, [r0, #5]
    7660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7664:	f7ff bf76 	b.w	7554 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    7668:	20000e10 	.word	0x20000e10

0000766c <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    766c:	b510      	push	{r4, lr}
    766e:	2805      	cmp	r0, #5
    7670:	d303      	bcc.n	767a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    7672:	214f      	movs	r1, #79	; 0x4f
    7674:	2069      	movs	r0, #105	; 0x69
    7676:	f7ff ff0b 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    767a:	4a03      	ldr	r2, [pc, #12]	; (7688 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    767c:	2100      	movs	r1, #0
    767e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    7682:	7101      	strb	r1, [r0, #4]
    7684:	bd10      	pop	{r4, pc}
    7686:	0000      	.short	0x0000
    7688:	20000e10 	.word	0x20000e10

0000768c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    768c:	b570      	push	{r4, r5, r6, lr}
    768e:	2505      	movs	r5, #5
    7690:	4e0e      	ldr	r6, [pc, #56]	; (76cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    7692:	4c0f      	ldr	r4, [pc, #60]	; (76d0 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    7694:	e016      	b.n	76c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7696:	7821      	ldrb	r1, [r4, #0]
    7698:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    769c:	7902      	ldrb	r2, [r0, #4]
    769e:	2a01      	cmp	r2, #1
    76a0:	d108      	bne.n	76b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    76a2:	7942      	ldrb	r2, [r0, #5]
    76a4:	7983      	ldrb	r3, [r0, #6]
    76a6:	429a      	cmp	r2, r3
    76a8:	d004      	beq.n	76b4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    76aa:	7942      	ldrb	r2, [r0, #5]
    76ac:	7182      	strb	r2, [r0, #6]
    76ae:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    76b2:	4780      	blx	r0
    76b4:	7820      	ldrb	r0, [r4, #0]
    76b6:	1c40      	adds	r0, r0, #1
    76b8:	b2c0      	uxtb	r0, r0
    76ba:	7020      	strb	r0, [r4, #0]
    76bc:	2805      	cmp	r0, #5
    76be:	d301      	bcc.n	76c4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    76c0:	2000      	movs	r0, #0
    76c2:	7020      	strb	r0, [r4, #0]
    76c4:	1e6d      	subs	r5, r5, #1
    76c6:	b2ed      	uxtb	r5, r5
    76c8:	d2e5      	bcs.n	7696 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    76ca:	bd70      	pop	{r4, r5, r6, pc}
    76cc:	20000e10 	.word	0x20000e10
    76d0:	2000019a 	.word	0x2000019a

000076d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    76d4:	b500      	push	{lr}
    76d6:	f002 fbce 	bl	9e76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    76da:	b940      	cbnz	r0, 76ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    76dc:	f002 fbd5 	bl	9e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    76e0:	b928      	cbnz	r0, 76ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    76e2:	f002 fbe9 	bl	9eb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    76e6:	b910      	cbnz	r0, 76ee <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    76e8:	f002 fbfa 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76ec:	b108      	cbz	r0, 76f2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    76ee:	4802      	ldr	r0, [pc, #8]	; (76f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    76f0:	bd00      	pop	{pc}
    76f2:	4802      	ldr	r0, [pc, #8]	; (76fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    76f4:	bd00      	pop	{pc}
    76f6:	0000      	.short	0x0000
    76f8:	4000050c 	.word	0x4000050c
    76fc:	4001e700 	.word	0x4001e700
    7700:	b510      	push	{r4, lr}
    7702:	f002 fbed 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7706:	b330      	cbz	r0, 7756 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    7708:	f3ef 8010 	mrs	r0, PRIMASK
    770c:	b1c8      	cbz	r0, 7742 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    770e:	2100      	movs	r1, #0
    7710:	b672      	cpsid	i
    7712:	4812      	ldr	r0, [pc, #72]	; (775c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    7714:	6802      	ldr	r2, [r0, #0]
    7716:	6803      	ldr	r3, [r0, #0]
    7718:	f3c2 1200 	ubfx	r2, r2, #4, #1
    771c:	f043 0310 	orr.w	r3, r3, #16
    7720:	6003      	str	r3, [r0, #0]
    7722:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7726:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    772a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    772e:	431c      	orrs	r4, r3
    7730:	d000      	beq.n	7734 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    7732:	bf40      	sev
    7734:	bf20      	wfe
    7736:	bf00      	nop
    7738:	bf00      	nop
    773a:	bf00      	nop
    773c:	bf00      	nop
    773e:	b112      	cbz	r2, 7746 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    7740:	e005      	b.n	774e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    7742:	2101      	movs	r1, #1
    7744:	e7e4      	b.n	7710 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    7746:	6802      	ldr	r2, [r0, #0]
    7748:	f022 0210 	bic.w	r2, r2, #16
    774c:	6002      	str	r2, [r0, #0]
    774e:	2900      	cmp	r1, #0
    7750:	d000      	beq.n	7754 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    7752:	b662      	cpsie	i
    7754:	bd10      	pop	{r4, pc}
    7756:	bf20      	wfe
    7758:	bd10      	pop	{r4, pc}
    775a:	0000      	.short	0x0000
    775c:	e000ed10 	.word	0xe000ed10

00007760 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    7760:	4901      	ldr	r1, [pc, #4]	; (7768 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    7762:	2001      	movs	r0, #1
    7764:	7088      	strb	r0, [r1, #2]
    7766:	4770      	bx	lr
    7768:	20000154 	.word	0x20000154

0000776c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    776c:	0000a1e1 0000a219 0000a203 0000a1f1     ................
    777c:	0000a1fd 0000a1eb 0000a1df 0000a1dd     ................
    778c:	0000a215 0000a209 0000a1f7 0000a1e5     ................
    779c:	0000a1d7 0000a1cf 0000a1d3 0000a1c9     ................

000077ac <mpsl_fem_disable>:
    77ac:	4801      	ldr	r0, [pc, #4]	; (77b4 <mpsl_fem_disable+0x8>)
    77ae:	6800      	ldr	r0, [r0, #0]
    77b0:	6800      	ldr	r0, [r0, #0]
    77b2:	4700      	bx	r0
    77b4:	20000168 	.word	0x20000168

000077b8 <mpsl_fem_lna_configuration_clear>:
    77b8:	4801      	ldr	r0, [pc, #4]	; (77c0 <mpsl_fem_lna_configuration_clear+0x8>)
    77ba:	6800      	ldr	r0, [r0, #0]
    77bc:	6940      	ldr	r0, [r0, #20]
    77be:	4700      	bx	r0
    77c0:	20000168 	.word	0x20000168

000077c4 <mpsl_fem_lna_configuration_set>:
    77c4:	4a01      	ldr	r2, [pc, #4]	; (77cc <mpsl_fem_lna_configuration_set+0x8>)
    77c6:	6812      	ldr	r2, [r2, #0]
    77c8:	68d2      	ldr	r2, [r2, #12]
    77ca:	4710      	bx	r2
    77cc:	20000168 	.word	0x20000168

000077d0 <mpsl_fem_lna_is_configured>:
    77d0:	4901      	ldr	r1, [pc, #4]	; (77d8 <mpsl_fem_lna_is_configured+0x8>)
    77d2:	6809      	ldr	r1, [r1, #0]
    77d4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    77d6:	4708      	bx	r1
    77d8:	20000168 	.word	0x20000168

000077dc <mpsl_fem_pa_configuration_clear>:
    77dc:	4801      	ldr	r0, [pc, #4]	; (77e4 <mpsl_fem_pa_configuration_clear+0x8>)
    77de:	6800      	ldr	r0, [r0, #0]
    77e0:	6900      	ldr	r0, [r0, #16]
    77e2:	4700      	bx	r0
    77e4:	20000168 	.word	0x20000168

000077e8 <mpsl_fem_pa_configuration_set>:
    77e8:	4a01      	ldr	r2, [pc, #4]	; (77f0 <mpsl_fem_pa_configuration_set+0x8>)
    77ea:	6812      	ldr	r2, [r2, #0]
    77ec:	6892      	ldr	r2, [r2, #8]
    77ee:	4710      	bx	r2
    77f0:	20000168 	.word	0x20000168

000077f4 <mpsl_fem_pa_gain_set>:
    77f4:	4901      	ldr	r1, [pc, #4]	; (77fc <mpsl_fem_pa_gain_set+0x8>)
    77f6:	6809      	ldr	r1, [r1, #0]
    77f8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    77fa:	4708      	bx	r1
    77fc:	20000168 	.word	0x20000168

00007800 <mpsl_fem_pa_is_configured>:
    7800:	4901      	ldr	r1, [pc, #4]	; (7808 <mpsl_fem_pa_is_configured+0x8>)
    7802:	6809      	ldr	r1, [r1, #0]
    7804:	6a89      	ldr	r1, [r1, #40]	; 0x28
    7806:	4708      	bx	r1
    7808:	20000168 	.word	0x20000168

0000780c <mpsl_fem_tx_power_split>:
    780c:	b430      	push	{r4, r5}
    780e:	4c03      	ldr	r4, [pc, #12]	; (781c <mpsl_fem_tx_power_split+0x10>)
    7810:	6824      	ldr	r4, [r4, #0]
    7812:	6864      	ldr	r4, [r4, #4]
    7814:	46a4      	mov	ip, r4
    7816:	bc30      	pop	{r4, r5}
    7818:	4760      	bx	ip
    781a:	0000      	.short	0x0000
    781c:	20000168 	.word	0x20000168

00007820 <mpsl_fem_device_config_254_apply_get>:
    7820:	4801      	ldr	r0, [pc, #4]	; (7828 <mpsl_fem_device_config_254_apply_get+0x8>)
    7822:	7800      	ldrb	r0, [r0, #0]
    7824:	4770      	bx	lr
    7826:	0000      	.short	0x0000
    7828:	2000019b 	.word	0x2000019b

0000782c <__udivmoddi4>:
    782c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7830:	4686      	mov	lr, r0
    7832:	468c      	mov	ip, r1
    7834:	4608      	mov	r0, r1
    7836:	9e08      	ldr	r6, [sp, #32]
    7838:	4615      	mov	r5, r2
    783a:	4674      	mov	r4, lr
    783c:	4619      	mov	r1, r3
    783e:	2b00      	cmp	r3, #0
    7840:	f040 80c2 	bne.w	79c8 <__udivmoddi4+0x19c>
    7844:	4285      	cmp	r5, r0
    7846:	fab2 f282 	clz	r2, r2
    784a:	d945      	bls.n	78d8 <__udivmoddi4+0xac>
    784c:	b14a      	cbz	r2, 7862 <__udivmoddi4+0x36>
    784e:	f1c2 0320 	rsb	r3, r2, #32
    7852:	fa00 fc02 	lsl.w	ip, r0, r2
    7856:	fa2e f303 	lsr.w	r3, lr, r3
    785a:	4095      	lsls	r5, r2
    785c:	ea43 0c0c 	orr.w	ip, r3, ip
    7860:	4094      	lsls	r4, r2
    7862:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7866:	b2a8      	uxth	r0, r5
    7868:	fbbc f8fe 	udiv	r8, ip, lr
    786c:	0c23      	lsrs	r3, r4, #16
    786e:	fb0e cc18 	mls	ip, lr, r8, ip
    7872:	fb08 f900 	mul.w	r9, r8, r0
    7876:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    787a:	4599      	cmp	r9, r3
    787c:	d928      	bls.n	78d0 <__udivmoddi4+0xa4>
    787e:	18eb      	adds	r3, r5, r3
    7880:	f108 37ff 	add.w	r7, r8, #4294967295
    7884:	d204      	bcs.n	7890 <__udivmoddi4+0x64>
    7886:	4599      	cmp	r9, r3
    7888:	d902      	bls.n	7890 <__udivmoddi4+0x64>
    788a:	f1a8 0702 	sub.w	r7, r8, #2
    788e:	442b      	add	r3, r5
    7890:	eba3 0309 	sub.w	r3, r3, r9
    7894:	b2a4      	uxth	r4, r4
    7896:	fbb3 fcfe 	udiv	ip, r3, lr
    789a:	fb0e 331c 	mls	r3, lr, ip, r3
    789e:	fb0c f000 	mul.w	r0, ip, r0
    78a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    78a6:	42a0      	cmp	r0, r4
    78a8:	d914      	bls.n	78d4 <__udivmoddi4+0xa8>
    78aa:	192c      	adds	r4, r5, r4
    78ac:	f10c 33ff 	add.w	r3, ip, #4294967295
    78b0:	d204      	bcs.n	78bc <__udivmoddi4+0x90>
    78b2:	42a0      	cmp	r0, r4
    78b4:	d902      	bls.n	78bc <__udivmoddi4+0x90>
    78b6:	f1ac 0302 	sub.w	r3, ip, #2
    78ba:	442c      	add	r4, r5
    78bc:	1a24      	subs	r4, r4, r0
    78be:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    78c2:	b11e      	cbz	r6, 78cc <__udivmoddi4+0xa0>
    78c4:	40d4      	lsrs	r4, r2
    78c6:	2300      	movs	r3, #0
    78c8:	6034      	str	r4, [r6, #0]
    78ca:	6073      	str	r3, [r6, #4]
    78cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78d0:	4647      	mov	r7, r8
    78d2:	e7dd      	b.n	7890 <__udivmoddi4+0x64>
    78d4:	4663      	mov	r3, ip
    78d6:	e7f1      	b.n	78bc <__udivmoddi4+0x90>
    78d8:	bb92      	cbnz	r2, 7940 <__udivmoddi4+0x114>
    78da:	1b43      	subs	r3, r0, r5
    78dc:	2101      	movs	r1, #1
    78de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    78e2:	b2af      	uxth	r7, r5
    78e4:	fbb3 fcfe 	udiv	ip, r3, lr
    78e8:	0c20      	lsrs	r0, r4, #16
    78ea:	fb0e 331c 	mls	r3, lr, ip, r3
    78ee:	fb0c f807 	mul.w	r8, ip, r7
    78f2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    78f6:	4598      	cmp	r8, r3
    78f8:	d962      	bls.n	79c0 <__udivmoddi4+0x194>
    78fa:	18eb      	adds	r3, r5, r3
    78fc:	f10c 30ff 	add.w	r0, ip, #4294967295
    7900:	d204      	bcs.n	790c <__udivmoddi4+0xe0>
    7902:	4598      	cmp	r8, r3
    7904:	d902      	bls.n	790c <__udivmoddi4+0xe0>
    7906:	f1ac 0002 	sub.w	r0, ip, #2
    790a:	442b      	add	r3, r5
    790c:	eba3 0308 	sub.w	r3, r3, r8
    7910:	b2a4      	uxth	r4, r4
    7912:	fbb3 fcfe 	udiv	ip, r3, lr
    7916:	fb0e 331c 	mls	r3, lr, ip, r3
    791a:	fb0c f707 	mul.w	r7, ip, r7
    791e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    7922:	42a7      	cmp	r7, r4
    7924:	d94e      	bls.n	79c4 <__udivmoddi4+0x198>
    7926:	192c      	adds	r4, r5, r4
    7928:	f10c 33ff 	add.w	r3, ip, #4294967295
    792c:	d204      	bcs.n	7938 <__udivmoddi4+0x10c>
    792e:	42a7      	cmp	r7, r4
    7930:	d902      	bls.n	7938 <__udivmoddi4+0x10c>
    7932:	f1ac 0302 	sub.w	r3, ip, #2
    7936:	442c      	add	r4, r5
    7938:	1be4      	subs	r4, r4, r7
    793a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    793e:	e7c0      	b.n	78c2 <__udivmoddi4+0x96>
    7940:	f1c2 0320 	rsb	r3, r2, #32
    7944:	fa20 f103 	lsr.w	r1, r0, r3
    7948:	4095      	lsls	r5, r2
    794a:	4090      	lsls	r0, r2
    794c:	fa2e f303 	lsr.w	r3, lr, r3
    7950:	4303      	orrs	r3, r0
    7952:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    7956:	b2af      	uxth	r7, r5
    7958:	fbb1 fcfe 	udiv	ip, r1, lr
    795c:	fb0e 101c 	mls	r0, lr, ip, r1
    7960:	0c19      	lsrs	r1, r3, #16
    7962:	fb0c f807 	mul.w	r8, ip, r7
    7966:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    796a:	4588      	cmp	r8, r1
    796c:	fa04 f402 	lsl.w	r4, r4, r2
    7970:	d922      	bls.n	79b8 <__udivmoddi4+0x18c>
    7972:	1869      	adds	r1, r5, r1
    7974:	f10c 30ff 	add.w	r0, ip, #4294967295
    7978:	d204      	bcs.n	7984 <__udivmoddi4+0x158>
    797a:	4588      	cmp	r8, r1
    797c:	d902      	bls.n	7984 <__udivmoddi4+0x158>
    797e:	f1ac 0002 	sub.w	r0, ip, #2
    7982:	4429      	add	r1, r5
    7984:	eba1 0108 	sub.w	r1, r1, r8
    7988:	b29b      	uxth	r3, r3
    798a:	fbb1 fcfe 	udiv	ip, r1, lr
    798e:	fb0e 111c 	mls	r1, lr, ip, r1
    7992:	fb0c f707 	mul.w	r7, ip, r7
    7996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    799a:	429f      	cmp	r7, r3
    799c:	d90e      	bls.n	79bc <__udivmoddi4+0x190>
    799e:	18eb      	adds	r3, r5, r3
    79a0:	f10c 31ff 	add.w	r1, ip, #4294967295
    79a4:	d204      	bcs.n	79b0 <__udivmoddi4+0x184>
    79a6:	429f      	cmp	r7, r3
    79a8:	d902      	bls.n	79b0 <__udivmoddi4+0x184>
    79aa:	f1ac 0102 	sub.w	r1, ip, #2
    79ae:	442b      	add	r3, r5
    79b0:	1bdb      	subs	r3, r3, r7
    79b2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    79b6:	e792      	b.n	78de <__udivmoddi4+0xb2>
    79b8:	4660      	mov	r0, ip
    79ba:	e7e3      	b.n	7984 <__udivmoddi4+0x158>
    79bc:	4661      	mov	r1, ip
    79be:	e7f7      	b.n	79b0 <__udivmoddi4+0x184>
    79c0:	4660      	mov	r0, ip
    79c2:	e7a3      	b.n	790c <__udivmoddi4+0xe0>
    79c4:	4663      	mov	r3, ip
    79c6:	e7b7      	b.n	7938 <__udivmoddi4+0x10c>
    79c8:	4283      	cmp	r3, r0
    79ca:	d906      	bls.n	79da <__udivmoddi4+0x1ae>
    79cc:	b916      	cbnz	r6, 79d4 <__udivmoddi4+0x1a8>
    79ce:	2100      	movs	r1, #0
    79d0:	4608      	mov	r0, r1
    79d2:	e77b      	b.n	78cc <__udivmoddi4+0xa0>
    79d4:	e9c6 e000 	strd	lr, r0, [r6]
    79d8:	e7f9      	b.n	79ce <__udivmoddi4+0x1a2>
    79da:	fab3 f783 	clz	r7, r3
    79de:	b98f      	cbnz	r7, 7a04 <__udivmoddi4+0x1d8>
    79e0:	4283      	cmp	r3, r0
    79e2:	d301      	bcc.n	79e8 <__udivmoddi4+0x1bc>
    79e4:	4572      	cmp	r2, lr
    79e6:	d808      	bhi.n	79fa <__udivmoddi4+0x1ce>
    79e8:	ebbe 0402 	subs.w	r4, lr, r2
    79ec:	eb60 0303 	sbc.w	r3, r0, r3
    79f0:	2001      	movs	r0, #1
    79f2:	469c      	mov	ip, r3
    79f4:	b91e      	cbnz	r6, 79fe <__udivmoddi4+0x1d2>
    79f6:	2100      	movs	r1, #0
    79f8:	e768      	b.n	78cc <__udivmoddi4+0xa0>
    79fa:	4638      	mov	r0, r7
    79fc:	e7fa      	b.n	79f4 <__udivmoddi4+0x1c8>
    79fe:	e9c6 4c00 	strd	r4, ip, [r6]
    7a02:	e7f8      	b.n	79f6 <__udivmoddi4+0x1ca>
    7a04:	f1c7 0c20 	rsb	ip, r7, #32
    7a08:	40bb      	lsls	r3, r7
    7a0a:	fa22 f40c 	lsr.w	r4, r2, ip
    7a0e:	431c      	orrs	r4, r3
    7a10:	fa2e f10c 	lsr.w	r1, lr, ip
    7a14:	fa20 f30c 	lsr.w	r3, r0, ip
    7a18:	40b8      	lsls	r0, r7
    7a1a:	4301      	orrs	r1, r0
    7a1c:	ea4f 4914 	mov.w	r9, r4, lsr #16
    7a20:	fa0e f507 	lsl.w	r5, lr, r7
    7a24:	fbb3 f8f9 	udiv	r8, r3, r9
    7a28:	fa1f fe84 	uxth.w	lr, r4
    7a2c:	fb09 3018 	mls	r0, r9, r8, r3
    7a30:	0c0b      	lsrs	r3, r1, #16
    7a32:	fb08 fa0e 	mul.w	sl, r8, lr
    7a36:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    7a3a:	459a      	cmp	sl, r3
    7a3c:	fa02 f207 	lsl.w	r2, r2, r7
    7a40:	d940      	bls.n	7ac4 <__udivmoddi4+0x298>
    7a42:	18e3      	adds	r3, r4, r3
    7a44:	f108 30ff 	add.w	r0, r8, #4294967295
    7a48:	d204      	bcs.n	7a54 <__udivmoddi4+0x228>
    7a4a:	459a      	cmp	sl, r3
    7a4c:	d902      	bls.n	7a54 <__udivmoddi4+0x228>
    7a4e:	f1a8 0002 	sub.w	r0, r8, #2
    7a52:	4423      	add	r3, r4
    7a54:	eba3 030a 	sub.w	r3, r3, sl
    7a58:	b289      	uxth	r1, r1
    7a5a:	fbb3 f8f9 	udiv	r8, r3, r9
    7a5e:	fb09 3318 	mls	r3, r9, r8, r3
    7a62:	fb08 fe0e 	mul.w	lr, r8, lr
    7a66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    7a6a:	458e      	cmp	lr, r1
    7a6c:	d92c      	bls.n	7ac8 <__udivmoddi4+0x29c>
    7a6e:	1861      	adds	r1, r4, r1
    7a70:	f108 33ff 	add.w	r3, r8, #4294967295
    7a74:	d204      	bcs.n	7a80 <__udivmoddi4+0x254>
    7a76:	458e      	cmp	lr, r1
    7a78:	d902      	bls.n	7a80 <__udivmoddi4+0x254>
    7a7a:	f1a8 0302 	sub.w	r3, r8, #2
    7a7e:	4421      	add	r1, r4
    7a80:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    7a84:	fba0 9802 	umull	r9, r8, r0, r2
    7a88:	eba1 010e 	sub.w	r1, r1, lr
    7a8c:	4541      	cmp	r1, r8
    7a8e:	46ce      	mov	lr, r9
    7a90:	4643      	mov	r3, r8
    7a92:	d302      	bcc.n	7a9a <__udivmoddi4+0x26e>
    7a94:	d106      	bne.n	7aa4 <__udivmoddi4+0x278>
    7a96:	454d      	cmp	r5, r9
    7a98:	d204      	bcs.n	7aa4 <__udivmoddi4+0x278>
    7a9a:	ebb9 0e02 	subs.w	lr, r9, r2
    7a9e:	eb68 0304 	sbc.w	r3, r8, r4
    7aa2:	3801      	subs	r0, #1
    7aa4:	2e00      	cmp	r6, #0
    7aa6:	d0a6      	beq.n	79f6 <__udivmoddi4+0x1ca>
    7aa8:	ebb5 020e 	subs.w	r2, r5, lr
    7aac:	eb61 0103 	sbc.w	r1, r1, r3
    7ab0:	fa01 fc0c 	lsl.w	ip, r1, ip
    7ab4:	fa22 f307 	lsr.w	r3, r2, r7
    7ab8:	ea4c 0303 	orr.w	r3, ip, r3
    7abc:	40f9      	lsrs	r1, r7
    7abe:	e9c6 3100 	strd	r3, r1, [r6]
    7ac2:	e798      	b.n	79f6 <__udivmoddi4+0x1ca>
    7ac4:	4640      	mov	r0, r8
    7ac6:	e7c5      	b.n	7a54 <__udivmoddi4+0x228>
    7ac8:	4643      	mov	r3, r8
    7aca:	e7d9      	b.n	7a80 <__udivmoddi4+0x254>
    7acc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7ad0:	4681      	mov	r9, r0
    7ad2:	f100 0007 	add.w	r0, r0, #7
    7ad6:	f020 0007 	bic.w	r0, r0, #7
    7ada:	ea5f 0802 	movs.w	r8, r2
    7ade:	9000      	str	r0, [sp, #0]
    7ae0:	784a      	ldrb	r2, [r1, #1]
    7ae2:	f88d 2004 	strb.w	r2, [sp, #4]
    7ae6:	788a      	ldrb	r2, [r1, #2]
    7ae8:	460c      	mov	r4, r1
    7aea:	f88d 2005 	strb.w	r2, [sp, #5]
    7aee:	d000      	beq.n	7af2 <__udivmoddi4+0x2c6>
    7af0:	2000      	movs	r0, #0
    7af2:	a901      	add	r1, sp, #4
    7af4:	f7f8 ff24 	bl	940 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    7af8:	9900      	ldr	r1, [sp, #0]
    7afa:	2600      	movs	r6, #0
    7afc:	4408      	add	r0, r1
    7afe:	9000      	str	r0, [sp, #0]
    7b00:	7820      	ldrb	r0, [r4, #0]
    7b02:	7861      	ldrb	r1, [r4, #1]
    7b04:	4635      	mov	r5, r6
    7b06:	4408      	add	r0, r1
    7b08:	b2c7      	uxtb	r7, r0
    7b0a:	e008      	b.n	7b1e <__udivmoddi4+0x2f2>
    7b0c:	7a23      	ldrb	r3, [r4, #8]
    7b0e:	79e2      	ldrb	r2, [r4, #7]
    7b10:	79a1      	ldrb	r1, [r4, #6]
    7b12:	7960      	ldrb	r0, [r4, #5]
    7b14:	f000 fc4c 	bl	83b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    7b18:	1c6d      	adds	r5, r5, #1
    7b1a:	4406      	add	r6, r0
    7b1c:	b2ed      	uxtb	r5, r5
    7b1e:	42bd      	cmp	r5, r7
    7b20:	d3f4      	bcc.n	7b0c <__udivmoddi4+0x2e0>
    7b22:	9800      	ldr	r0, [sp, #0]
    7b24:	1cc0      	adds	r0, r0, #3
    7b26:	f020 0003 	bic.w	r0, r0, #3
    7b2a:	9000      	str	r0, [sp, #0]
    7b2c:	f1b8 0f00 	cmp.w	r8, #0
    7b30:	d000      	beq.n	7b34 <__udivmoddi4+0x308>
    7b32:	2000      	movs	r0, #0
    7b34:	4632      	mov	r2, r6
    7b36:	4639      	mov	r1, r7
    7b38:	f7f9 f83c 	bl	bb4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    7b3c:	9900      	ldr	r1, [sp, #0]
    7b3e:	4642      	mov	r2, r8
    7b40:	4408      	add	r0, r1
    7b42:	9000      	str	r0, [sp, #0]
    7b44:	4621      	mov	r1, r4
    7b46:	4668      	mov	r0, sp
    7b48:	f000 f805 	bl	7b56 <__udivmoddi4+0x32a>
    7b4c:	9900      	ldr	r1, [sp, #0]
    7b4e:	eba1 0009 	sub.w	r0, r1, r9
    7b52:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    7b56:	b570      	push	{r4, r5, r6, lr}
    7b58:	4605      	mov	r5, r0
    7b5a:	7888      	ldrb	r0, [r1, #2]
    7b5c:	4616      	mov	r6, r2
    7b5e:	460c      	mov	r4, r1
    7b60:	b188      	cbz	r0, 7b86 <__udivmoddi4+0x35a>
    7b62:	6828      	ldr	r0, [r5, #0]
    7b64:	1cc0      	adds	r0, r0, #3
    7b66:	f020 0003 	bic.w	r0, r0, #3
    7b6a:	6028      	str	r0, [r5, #0]
    7b6c:	7de1      	ldrb	r1, [r4, #23]
    7b6e:	78e2      	ldrb	r2, [r4, #3]
    7b70:	8a63      	ldrh	r3, [r4, #18]
    7b72:	4411      	add	r1, r2
    7b74:	b2ca      	uxtb	r2, r1
    7b76:	78a1      	ldrb	r1, [r4, #2]
    7b78:	b106      	cbz	r6, 7b7c <__udivmoddi4+0x350>
    7b7a:	2000      	movs	r0, #0
    7b7c:	f7f9 f8a4 	bl	cc8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    7b80:	6829      	ldr	r1, [r5, #0]
    7b82:	4408      	add	r0, r1
    7b84:	6028      	str	r0, [r5, #0]
    7b86:	7d20      	ldrb	r0, [r4, #20]
    7b88:	2800      	cmp	r0, #0
    7b8a:	d00f      	beq.n	7bac <__udivmoddi4+0x380>
    7b8c:	78a0      	ldrb	r0, [r4, #2]
    7b8e:	2800      	cmp	r0, #0
    7b90:	d00c      	beq.n	7bac <__udivmoddi4+0x380>
    7b92:	6828      	ldr	r0, [r5, #0]
    7b94:	1dc0      	adds	r0, r0, #7
    7b96:	f020 0007 	bic.w	r0, r0, #7
    7b9a:	6028      	str	r0, [r5, #0]
    7b9c:	7d21      	ldrb	r1, [r4, #20]
    7b9e:	b106      	cbz	r6, 7ba2 <__udivmoddi4+0x376>
    7ba0:	2000      	movs	r0, #0
    7ba2:	f7f9 fdfd 	bl	17a0 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    7ba6:	6829      	ldr	r1, [r5, #0]
    7ba8:	4408      	add	r0, r1
    7baa:	6028      	str	r0, [r5, #0]
    7bac:	bd70      	pop	{r4, r5, r6, pc}
    7bae:	b570      	push	{r4, r5, r6, lr}
    7bb0:	460c      	mov	r4, r1
    7bb2:	4605      	mov	r5, r0
    7bb4:	f7f8 fd0a 	bl	5cc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    7bb8:	2800      	cmp	r0, #0
    7bba:	d002      	beq.n	7bc2 <__udivmoddi4+0x396>
    7bbc:	2d3e      	cmp	r5, #62	; 0x3e
    7bbe:	d001      	beq.n	7bc4 <__udivmoddi4+0x398>
    7bc0:	2001      	movs	r0, #1
    7bc2:	bd70      	pop	{r4, r5, r6, pc}
    7bc4:	2c12      	cmp	r4, #18
    7bc6:	d004      	beq.n	7bd2 <__udivmoddi4+0x3a6>
    7bc8:	4620      	mov	r0, r4
    7bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bce:	f7f8 bd0f 	b.w	5f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7bd2:	2000      	movs	r0, #0
    7bd4:	bd70      	pop	{r4, r5, r6, pc}

00007bd6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    7bd6:	b510      	push	{r4, lr}
    7bd8:	460c      	mov	r4, r1
    7bda:	7909      	ldrb	r1, [r1, #4]
    7bdc:	7001      	strb	r1, [r0, #0]
    7bde:	7841      	ldrb	r1, [r0, #1]
    7be0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    7be4:	7041      	strb	r1, [r0, #1]
    7be6:	88a2      	ldrh	r2, [r4, #4]
    7be8:	f3c2 2203 	ubfx	r2, r2, #8, #4
    7bec:	4311      	orrs	r1, r2
    7bee:	7041      	strb	r1, [r0, #1]
    7bf0:	79a2      	ldrb	r2, [r4, #6]
    7bf2:	7082      	strb	r2, [r0, #2]
    7bf4:	88e2      	ldrh	r2, [r4, #6]
    7bf6:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    7bfa:	0a12      	lsrs	r2, r2, #8
    7bfc:	70c2      	strb	r2, [r0, #3]
    7bfe:	7041      	strb	r1, [r0, #1]
    7c00:	7a22      	ldrb	r2, [r4, #8]
    7c02:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7c06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    7c0a:	7041      	strb	r1, [r0, #1]
    7c0c:	7a62      	ldrb	r2, [r4, #9]
    7c0e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    7c12:	7041      	strb	r1, [r0, #1]
    7c14:	6821      	ldr	r1, [r4, #0]
    7c16:	1d02      	adds	r2, r0, #4
    7c18:	4291      	cmp	r1, r2
    7c1a:	d006      	beq.n	7c2a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    7c1c:	88e2      	ldrh	r2, [r4, #6]
    7c1e:	2afb      	cmp	r2, #251	; 0xfb
    7c20:	d300      	bcc.n	7c24 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    7c22:	22fb      	movs	r2, #251	; 0xfb
    7c24:	1d00      	adds	r0, r0, #4
    7c26:	f002 f9f5 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7c2a:	79a0      	ldrb	r0, [r4, #6]
    7c2c:	1d00      	adds	r0, r0, #4
    7c2e:	b2c0      	uxtb	r0, r0
    7c30:	bd10      	pop	{r4, pc}

00007c32 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    7c32:	b430      	push	{r4, r5}
    7c34:	790a      	ldrb	r2, [r1, #4]
    7c36:	7002      	strb	r2, [r0, #0]
    7c38:	7842      	ldrb	r2, [r0, #1]
    7c3a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    7c3e:	7042      	strb	r2, [r0, #1]
    7c40:	888b      	ldrh	r3, [r1, #4]
    7c42:	f3c3 2303 	ubfx	r3, r3, #8, #4
    7c46:	431a      	orrs	r2, r3
    7c48:	7042      	strb	r2, [r0, #1]
    7c4a:	798b      	ldrb	r3, [r1, #6]
    7c4c:	7083      	strb	r3, [r0, #2]
    7c4e:	78c3      	ldrb	r3, [r0, #3]
    7c50:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    7c54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7c58:	70c3      	strb	r3, [r0, #3]
    7c5a:	88cc      	ldrh	r4, [r1, #6]
    7c5c:	f3c4 2405 	ubfx	r4, r4, #8, #6
    7c60:	4323      	orrs	r3, r4
    7c62:	70c3      	strb	r3, [r0, #3]
    7c64:	7042      	strb	r2, [r0, #1]
    7c66:	7a0c      	ldrb	r4, [r1, #8]
    7c68:	f004 0403 	and.w	r4, r4, #3
    7c6c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    7c70:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    7c74:	7042      	strb	r2, [r0, #1]
    7c76:	7a4c      	ldrb	r4, [r1, #9]
    7c78:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    7c7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7c80:	7042      	strb	r2, [r0, #1]
    7c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    7c86:	70c2      	strb	r2, [r0, #3]
    7c88:	680b      	ldr	r3, [r1, #0]
    7c8a:	1d02      	adds	r2, r0, #4
    7c8c:	4293      	cmp	r3, r2
    7c8e:	d005      	beq.n	7c9c <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    7c90:	88ca      	ldrh	r2, [r1, #6]
    7c92:	bc30      	pop	{r4, r5}
    7c94:	4619      	mov	r1, r3
    7c96:	1d00      	adds	r0, r0, #4
    7c98:	f002 b9bc 	b.w	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7c9c:	bc30      	pop	{r4, r5}
    7c9e:	4770      	bx	lr

00007ca0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    7ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ca4:	460d      	mov	r5, r1
    7ca6:	4604      	mov	r4, r0
    7ca8:	f891 c000 	ldrb.w	ip, [r1]
    7cac:	2000      	movs	r0, #0
    7cae:	230c      	movs	r3, #12
    7cb0:	2705      	movs	r7, #5
    7cb2:	2203      	movs	r2, #3
    7cb4:	263e      	movs	r6, #62	; 0x3e
    7cb6:	21ff      	movs	r1, #255	; 0xff
    7cb8:	f1bc 0f1e 	cmp.w	ip, #30
    7cbc:	d27e      	bcs.n	7dbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    7cbe:	e8df f00c 	tbb	[pc, ip]
    7cc2:	29e7      	.short	0x29e7
    7cc4:	63e74240 	.word	0x63e74240
    7cc8:	ac99806d 	.word	0xac99806d
    7ccc:	dfc4b9ae 	.word	0xdfc4b9ae
    7cd0:	e7e70ff3 	.word	0xe7e70ff3
    7cd4:	fcd2cf48 	.word	0xfcd2cf48
    7cd8:	edeeeff0 	.word	0xedeeeff0
    7cdc:	e9eaebec 	.word	0xe9eaebec
    7ce0:	200e      	movs	r0, #14
    7ce2:	7020      	strb	r0, [r4, #0]
    7ce4:	7968      	ldrb	r0, [r5, #5]
    7ce6:	70e0      	strb	r0, [r4, #3]
    7ce8:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7cec:	0a00      	lsrs	r0, r0, #8
    7cee:	7120      	strb	r0, [r4, #4]
    7cf0:	7928      	ldrb	r0, [r5, #4]
    7cf2:	70a0      	strb	r0, [r4, #2]
    7cf4:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7cf8:	3883      	subs	r0, #131	; 0x83
    7cfa:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    7cfe:	d003      	beq.n	7d08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    7d00:	2136      	movs	r1, #54	; 0x36
    7d02:	20c7      	movs	r0, #199	; 0xc7
    7d04:	f7f8 fb22 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d08:	1de9      	adds	r1, r5, #7
    7d0a:	1d60      	adds	r0, r4, #5
    7d0c:	f002 f982 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d10:	2007      	movs	r0, #7
    7d12:	e0bb      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d14:	7023      	strb	r3, [r4, #0]
    7d16:	7928      	ldrb	r0, [r5, #4]
    7d18:	70a0      	strb	r0, [r4, #2]
    7d1a:	7968      	ldrb	r0, [r5, #5]
    7d1c:	70e0      	strb	r0, [r4, #3]
    7d1e:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7d22:	0a00      	lsrs	r0, r0, #8
    7d24:	7120      	strb	r0, [r4, #4]
    7d26:	79e8      	ldrb	r0, [r5, #7]
    7d28:	7160      	strb	r0, [r4, #5]
    7d2a:	7a28      	ldrb	r0, [r5, #8]
    7d2c:	71a0      	strb	r0, [r4, #6]
    7d2e:	8928      	ldrh	r0, [r5, #8]
    7d30:	0a00      	lsrs	r0, r0, #8
    7d32:	71e0      	strb	r0, [r4, #7]
    7d34:	7aa8      	ldrb	r0, [r5, #10]
    7d36:	7220      	strb	r0, [r4, #8]
    7d38:	8968      	ldrh	r0, [r5, #10]
    7d3a:	0a00      	lsrs	r0, r0, #8
    7d3c:	7260      	strb	r0, [r4, #9]
    7d3e:	2008      	movs	r0, #8
    7d40:	e0a4      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d42:	2010      	movs	r0, #16
    7d44:	e000      	b.n	7d48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    7d46:	201a      	movs	r0, #26
    7d48:	7020      	strb	r0, [r4, #0]
    7d4a:	7928      	ldrb	r0, [r5, #4]
    7d4c:	70a0      	strb	r0, [r4, #2]
    7d4e:	2001      	movs	r0, #1
    7d50:	e09c      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d52:	2029      	movs	r0, #41	; 0x29
    7d54:	f7f8 fc4c 	bl	5f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7d58:	b148      	cbz	r0, 7d6e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    7d5a:	7026      	strb	r6, [r4, #0]
    7d5c:	2029      	movs	r0, #41	; 0x29
    7d5e:	70a0      	strb	r0, [r4, #2]
    7d60:	2221      	movs	r2, #33	; 0x21
    7d62:	1d29      	adds	r1, r5, #4
    7d64:	1ce0      	adds	r0, r4, #3
    7d66:	f002 f955 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7d6a:	2022      	movs	r0, #34	; 0x22
    7d6c:	e08e      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7d6e:	200a      	movs	r0, #10
    7d70:	f7f8 fc3e 	bl	5f0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    7d74:	2800      	cmp	r0, #0
    7d76:	4629      	mov	r1, r5
    7d78:	4620      	mov	r0, r4
    7d7a:	d002      	beq.n	7d82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    7d7c:	f000 f95b 	bl	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    7d80:	e082      	b.n	7e88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    7d82:	f000 f92f 	bl	7fe4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    7d86:	e07f      	b.n	7e88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    7d88:	7026      	strb	r6, [r4, #0]
    7d8a:	2014      	movs	r0, #20
    7d8c:	70a0      	strb	r0, [r4, #2]
    7d8e:	7928      	ldrb	r0, [r5, #4]
    7d90:	70e0      	strb	r0, [r4, #3]
    7d92:	88a8      	ldrh	r0, [r5, #4]
    7d94:	0a00      	lsrs	r0, r0, #8
    7d96:	7120      	strb	r0, [r4, #4]
    7d98:	79a8      	ldrb	r0, [r5, #6]
    7d9a:	e0c0      	b.n	7f1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    7d9c:	223e      	movs	r2, #62	; 0x3e
    7d9e:	7022      	strb	r2, [r4, #0]
    7da0:	2204      	movs	r2, #4
    7da2:	70a2      	strb	r2, [r4, #2]
    7da4:	6868      	ldr	r0, [r5, #4]
    7da6:	f8c4 0003 	str.w	r0, [r4, #3]
    7daa:	68a8      	ldr	r0, [r5, #8]
    7dac:	f8c4 0007 	str.w	r0, [r4, #7]
    7db0:	89a8      	ldrh	r0, [r5, #12]
    7db2:	f8a4 000b 	strh.w	r0, [r4, #11]
    7db6:	7ba8      	ldrb	r0, [r5, #14]
    7db8:	7360      	strb	r0, [r4, #13]
    7dba:	e000      	b.n	7dbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    7dbc:	e068      	b.n	7e90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    7dbe:	200c      	movs	r0, #12
    7dc0:	e064      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7dc2:	7026      	strb	r6, [r4, #0]
    7dc4:	70a2      	strb	r2, [r4, #2]
    7dc6:	7928      	ldrb	r0, [r5, #4]
    7dc8:	70e0      	strb	r0, [r4, #3]
    7dca:	79a8      	ldrb	r0, [r5, #6]
    7dcc:	7120      	strb	r0, [r4, #4]
    7dce:	88e8      	ldrh	r0, [r5, #6]
    7dd0:	0a00      	lsrs	r0, r0, #8
    7dd2:	7160      	strb	r0, [r4, #5]
    7dd4:	7a28      	ldrb	r0, [r5, #8]
    7dd6:	71a0      	strb	r0, [r4, #6]
    7dd8:	8928      	ldrh	r0, [r5, #8]
    7dda:	0a00      	lsrs	r0, r0, #8
    7ddc:	71e0      	strb	r0, [r4, #7]
    7dde:	7aa8      	ldrb	r0, [r5, #10]
    7de0:	7220      	strb	r0, [r4, #8]
    7de2:	8968      	ldrh	r0, [r5, #10]
    7de4:	0a00      	lsrs	r0, r0, #8
    7de6:	7260      	strb	r0, [r4, #9]
    7de8:	7b28      	ldrb	r0, [r5, #12]
    7dea:	72a0      	strb	r0, [r4, #10]
    7dec:	89a8      	ldrh	r0, [r5, #12]
    7dee:	0a00      	lsrs	r0, r0, #8
    7df0:	72e0      	strb	r0, [r4, #11]
    7df2:	e0d1      	b.n	7f98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    7df4:	7026      	strb	r6, [r4, #0]
    7df6:	70a7      	strb	r7, [r4, #2]
    7df8:	7928      	ldrb	r0, [r5, #4]
    7dfa:	70e0      	strb	r0, [r4, #3]
    7dfc:	88a8      	ldrh	r0, [r5, #4]
    7dfe:	0a00      	lsrs	r0, r0, #8
    7e00:	7120      	strb	r0, [r4, #4]
    7e02:	f8d5 0006 	ldr.w	r0, [r5, #6]
    7e06:	f8c4 0005 	str.w	r0, [r4, #5]
    7e0a:	f8d5 000a 	ldr.w	r0, [r5, #10]
    7e0e:	f8c4 0009 	str.w	r0, [r4, #9]
    7e12:	89e8      	ldrh	r0, [r5, #14]
    7e14:	f8a4 000d 	strh.w	r0, [r4, #13]
    7e18:	e0e2      	b.n	7fe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    7e1a:	2011      	movs	r0, #17
    7e1c:	e045      	b.n	7eaa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    7e1e:	7027      	strb	r7, [r4, #0]
    7e20:	7928      	ldrb	r0, [r5, #4]
    7e22:	70a0      	strb	r0, [r4, #2]
    7e24:	7968      	ldrb	r0, [r5, #5]
    7e26:	70e0      	strb	r0, [r4, #3]
    7e28:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7e2c:	0a00      	lsrs	r0, r0, #8
    7e2e:	7120      	strb	r0, [r4, #4]
    7e30:	79e8      	ldrb	r0, [r5, #7]
    7e32:	e074      	b.n	7f1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    7e34:	2008      	movs	r0, #8
    7e36:	7020      	strb	r0, [r4, #0]
    7e38:	7928      	ldrb	r0, [r5, #4]
    7e3a:	70a0      	strb	r0, [r4, #2]
    7e3c:	79a8      	ldrb	r0, [r5, #6]
    7e3e:	70e0      	strb	r0, [r4, #3]
    7e40:	88e8      	ldrh	r0, [r5, #6]
    7e42:	0a00      	lsrs	r0, r0, #8
    7e44:	7120      	strb	r0, [r4, #4]
    7e46:	7a28      	ldrb	r0, [r5, #8]
    7e48:	e069      	b.n	7f1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    7e4a:	2030      	movs	r0, #48	; 0x30
    7e4c:	7020      	strb	r0, [r4, #0]
    7e4e:	7928      	ldrb	r0, [r5, #4]
    7e50:	70a0      	strb	r0, [r4, #2]
    7e52:	79a8      	ldrb	r0, [r5, #6]
    7e54:	70e0      	strb	r0, [r4, #3]
    7e56:	88e8      	ldrh	r0, [r5, #6]
    7e58:	0a00      	lsrs	r0, r0, #8
    7e5a:	7120      	strb	r0, [r4, #4]
    7e5c:	2003      	movs	r0, #3
    7e5e:	e015      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7e60:	7026      	strb	r6, [r4, #0]
    7e62:	2007      	movs	r0, #7
    7e64:	e060      	b.n	7f28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    7e66:	7026      	strb	r6, [r4, #0]
    7e68:	70a3      	strb	r3, [r4, #2]
    7e6a:	7928      	ldrb	r0, [r5, #4]
    7e6c:	70e0      	strb	r0, [r4, #3]
    7e6e:	79a8      	ldrb	r0, [r5, #6]
    7e70:	7120      	strb	r0, [r4, #4]
    7e72:	88e8      	ldrh	r0, [r5, #6]
    7e74:	0a00      	lsrs	r0, r0, #8
    7e76:	7160      	strb	r0, [r4, #5]
    7e78:	7a28      	ldrb	r0, [r5, #8]
    7e7a:	71a0      	strb	r0, [r4, #6]
    7e7c:	7a68      	ldrb	r0, [r5, #9]
    7e7e:	e029      	b.n	7ed4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    7e80:	1d29      	adds	r1, r5, #4
    7e82:	4620      	mov	r0, r4
    7e84:	f7f8 fb74 	bl	570 <__data_size+0x42>
    7e88:	2800      	cmp	r0, #0
    7e8a:	d001      	beq.n	7e90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    7e8c:	7060      	strb	r0, [r4, #1]
    7e8e:	1c80      	adds	r0, r0, #2
    7e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e94:	e08f      	b.n	7fb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    7e96:	e063      	b.n	7f60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    7e98:	e044      	b.n	7f24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    7e9a:	e06f      	b.n	7f7c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    7e9c:	e07e      	b.n	7f9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    7e9e:	e036      	b.n	7f0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    7ea0:	e01e      	b.n	7ee0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    7ea2:	e01a      	b.n	7eda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    7ea4:	e009      	b.n	7eba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    7ea6:	e7ff      	b.n	7ea8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    7ea8:	2057      	movs	r0, #87	; 0x57
    7eaa:	7020      	strb	r0, [r4, #0]
    7eac:	7928      	ldrb	r0, [r5, #4]
    7eae:	70a0      	strb	r0, [r4, #2]
    7eb0:	88a8      	ldrh	r0, [r5, #4]
    7eb2:	0a00      	lsrs	r0, r0, #8
    7eb4:	70e0      	strb	r0, [r4, #3]
    7eb6:	2002      	movs	r0, #2
    7eb8:	e7e8      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7eba:	7026      	strb	r6, [r4, #0]
    7ebc:	2012      	movs	r0, #18
    7ebe:	70a0      	strb	r0, [r4, #2]
    7ec0:	7928      	ldrb	r0, [r5, #4]
    7ec2:	70e0      	strb	r0, [r4, #3]
    7ec4:	7968      	ldrb	r0, [r5, #5]
    7ec6:	7120      	strb	r0, [r4, #4]
    7ec8:	79a8      	ldrb	r0, [r5, #6]
    7eca:	7160      	strb	r0, [r4, #5]
    7ecc:	88e8      	ldrh	r0, [r5, #6]
    7ece:	0a00      	lsrs	r0, r0, #8
    7ed0:	71a0      	strb	r0, [r4, #6]
    7ed2:	7a28      	ldrb	r0, [r5, #8]
    7ed4:	71e0      	strb	r0, [r4, #7]
    7ed6:	2006      	movs	r0, #6
    7ed8:	e7d8      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7eda:	7026      	strb	r6, [r4, #0]
    7edc:	2020      	movs	r0, #32
    7ede:	e041      	b.n	7f64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    7ee0:	7026      	strb	r6, [r4, #0]
    7ee2:	2021      	movs	r0, #33	; 0x21
    7ee4:	70a0      	strb	r0, [r4, #2]
    7ee6:	7928      	ldrb	r0, [r5, #4]
    7ee8:	70e0      	strb	r0, [r4, #3]
    7eea:	7968      	ldrb	r0, [r5, #5]
    7eec:	7120      	strb	r0, [r4, #4]
    7eee:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    7ef2:	0a00      	lsrs	r0, r0, #8
    7ef4:	7160      	strb	r0, [r4, #5]
    7ef6:	79e8      	ldrb	r0, [r5, #7]
    7ef8:	71a0      	strb	r0, [r4, #6]
    7efa:	7a28      	ldrb	r0, [r5, #8]
    7efc:	71e0      	strb	r0, [r4, #7]
    7efe:	7a68      	ldrb	r0, [r5, #9]
    7f00:	7220      	strb	r0, [r4, #8]
    7f02:	7aa8      	ldrb	r0, [r5, #10]
    7f04:	7260      	strb	r0, [r4, #9]
    7f06:	7ae8      	ldrb	r0, [r5, #11]
    7f08:	72a0      	strb	r0, [r4, #10]
    7f0a:	2009      	movs	r0, #9
    7f0c:	e7be      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f0e:	7021      	strb	r1, [r4, #0]
    7f10:	20a1      	movs	r0, #161	; 0xa1
    7f12:	70a0      	strb	r0, [r4, #2]
    7f14:	7928      	ldrb	r0, [r5, #4]
    7f16:	70e0      	strb	r0, [r4, #3]
    7f18:	7968      	ldrb	r0, [r5, #5]
    7f1a:	7120      	strb	r0, [r4, #4]
    7f1c:	2000      	movs	r0, #0
    7f1e:	7160      	strb	r0, [r4, #5]
    7f20:	2004      	movs	r0, #4
    7f22:	e7b3      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f24:	7021      	strb	r1, [r4, #0]
    7f26:	20a2      	movs	r0, #162	; 0xa2
    7f28:	70a0      	strb	r0, [r4, #2]
    7f2a:	7928      	ldrb	r0, [r5, #4]
    7f2c:	70e0      	strb	r0, [r4, #3]
    7f2e:	88a8      	ldrh	r0, [r5, #4]
    7f30:	0a00      	lsrs	r0, r0, #8
    7f32:	7120      	strb	r0, [r4, #4]
    7f34:	79a8      	ldrb	r0, [r5, #6]
    7f36:	7160      	strb	r0, [r4, #5]
    7f38:	88e8      	ldrh	r0, [r5, #6]
    7f3a:	0a00      	lsrs	r0, r0, #8
    7f3c:	71a0      	strb	r0, [r4, #6]
    7f3e:	7a28      	ldrb	r0, [r5, #8]
    7f40:	71e0      	strb	r0, [r4, #7]
    7f42:	8928      	ldrh	r0, [r5, #8]
    7f44:	0a00      	lsrs	r0, r0, #8
    7f46:	7220      	strb	r0, [r4, #8]
    7f48:	7aa8      	ldrb	r0, [r5, #10]
    7f4a:	7260      	strb	r0, [r4, #9]
    7f4c:	8968      	ldrh	r0, [r5, #10]
    7f4e:	0a00      	lsrs	r0, r0, #8
    7f50:	72a0      	strb	r0, [r4, #10]
    7f52:	7b28      	ldrb	r0, [r5, #12]
    7f54:	72e0      	strb	r0, [r4, #11]
    7f56:	89a8      	ldrh	r0, [r5, #12]
    7f58:	0a00      	lsrs	r0, r0, #8
    7f5a:	7320      	strb	r0, [r4, #12]
    7f5c:	200b      	movs	r0, #11
    7f5e:	e795      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f60:	7021      	strb	r1, [r4, #0]
    7f62:	20a3      	movs	r0, #163	; 0xa3
    7f64:	70a0      	strb	r0, [r4, #2]
    7f66:	7928      	ldrb	r0, [r5, #4]
    7f68:	70e0      	strb	r0, [r4, #3]
    7f6a:	88a8      	ldrh	r0, [r5, #4]
    7f6c:	0a00      	lsrs	r0, r0, #8
    7f6e:	7120      	strb	r0, [r4, #4]
    7f70:	79a8      	ldrb	r0, [r5, #6]
    7f72:	7160      	strb	r0, [r4, #5]
    7f74:	79e8      	ldrb	r0, [r5, #7]
    7f76:	71a0      	strb	r0, [r4, #6]
    7f78:	2005      	movs	r0, #5
    7f7a:	e787      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f7c:	7026      	strb	r6, [r4, #0]
    7f7e:	2013      	movs	r0, #19
    7f80:	70a0      	strb	r0, [r4, #2]
    7f82:	7928      	ldrb	r0, [r5, #4]
    7f84:	70e0      	strb	r0, [r4, #3]
    7f86:	7968      	ldrb	r0, [r5, #5]
    7f88:	7120      	strb	r0, [r4, #4]
    7f8a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    7f8e:	f8c4 0005 	str.w	r0, [r4, #5]
    7f92:	8968      	ldrh	r0, [r5, #10]
    7f94:	f8a4 0009 	strh.w	r0, [r4, #9]
    7f98:	200a      	movs	r0, #10
    7f9a:	e777      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    7f9c:	7021      	strb	r1, [r4, #0]
    7f9e:	20a4      	movs	r0, #164	; 0xa4
    7fa0:	70a0      	strb	r0, [r4, #2]
    7fa2:	7928      	ldrb	r0, [r5, #4]
    7fa4:	70e0      	strb	r0, [r4, #3]
    7fa6:	88a8      	ldrh	r0, [r5, #4]
    7fa8:	0a00      	lsrs	r0, r0, #8
    7faa:	7120      	strb	r0, [r4, #4]
    7fac:	79a8      	ldrb	r0, [r5, #6]
    7fae:	7160      	strb	r0, [r4, #5]
    7fb0:	79e8      	ldrb	r0, [r5, #7]
    7fb2:	71a0      	strb	r0, [r4, #6]
    7fb4:	e6ac      	b.n	7d10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    7fb6:	7021      	strb	r1, [r4, #0]
    7fb8:	2080      	movs	r0, #128	; 0x80
    7fba:	70a0      	strb	r0, [r4, #2]
    7fbc:	88a9      	ldrh	r1, [r5, #4]
    7fbe:	f8a4 1003 	strh.w	r1, [r4, #3]
    7fc2:	88e9      	ldrh	r1, [r5, #6]
    7fc4:	f8a4 1005 	strh.w	r1, [r4, #5]
    7fc8:	7a29      	ldrb	r1, [r5, #8]
    7fca:	71e1      	strb	r1, [r4, #7]
    7fcc:	8969      	ldrh	r1, [r5, #10]
    7fce:	8121      	strh	r1, [r4, #8]
    7fd0:	89a9      	ldrh	r1, [r5, #12]
    7fd2:	8161      	strh	r1, [r4, #10]
    7fd4:	89e9      	ldrh	r1, [r5, #14]
    7fd6:	81a1      	strh	r1, [r4, #12]
    7fd8:	7c29      	ldrb	r1, [r5, #16]
    7fda:	f001 0101 	and.w	r1, r1, #1
    7fde:	73a1      	strb	r1, [r4, #14]
    7fe0:	200d      	movs	r0, #13
    7fe2:	e753      	b.n	7e8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

00007fe4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    7fe4:	223e      	movs	r2, #62	; 0x3e
    7fe6:	7002      	strb	r2, [r0, #0]
    7fe8:	2201      	movs	r2, #1
    7fea:	7082      	strb	r2, [r0, #2]
    7fec:	790a      	ldrb	r2, [r1, #4]
    7fee:	70c2      	strb	r2, [r0, #3]
    7ff0:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    7ff4:	7102      	strb	r2, [r0, #4]
    7ff6:	880a      	ldrh	r2, [r1, #0]
    7ff8:	0a12      	lsrs	r2, r2, #8
    7ffa:	7142      	strb	r2, [r0, #5]
    7ffc:	788a      	ldrb	r2, [r1, #2]
    7ffe:	7182      	strb	r2, [r0, #6]
    8000:	78ca      	ldrb	r2, [r1, #3]
    8002:	71c2      	strb	r2, [r0, #7]
    8004:	684a      	ldr	r2, [r1, #4]
    8006:	6082      	str	r2, [r0, #8]
    8008:	890a      	ldrh	r2, [r1, #8]
    800a:	8182      	strh	r2, [r0, #12]
    800c:	7d8a      	ldrb	r2, [r1, #22]
    800e:	7382      	strb	r2, [r0, #14]
    8010:	8aca      	ldrh	r2, [r1, #22]
    8012:	0a12      	lsrs	r2, r2, #8
    8014:	73c2      	strb	r2, [r0, #15]
    8016:	7e0a      	ldrb	r2, [r1, #24]
    8018:	7402      	strb	r2, [r0, #16]
    801a:	8b0a      	ldrh	r2, [r1, #24]
    801c:	0a12      	lsrs	r2, r2, #8
    801e:	7442      	strb	r2, [r0, #17]
    8020:	7e8a      	ldrb	r2, [r1, #26]
    8022:	7482      	strb	r2, [r0, #18]
    8024:	8b4a      	ldrh	r2, [r1, #26]
    8026:	0a12      	lsrs	r2, r2, #8
    8028:	74c2      	strb	r2, [r0, #19]
    802a:	7f09      	ldrb	r1, [r1, #28]
    802c:	7501      	strb	r1, [r0, #20]
    802e:	2113      	movs	r1, #19
    8030:	7041      	strb	r1, [r0, #1]
    8032:	4608      	mov	r0, r1
    8034:	4770      	bx	lr
    8036:	223e      	movs	r2, #62	; 0x3e
    8038:	7002      	strb	r2, [r0, #0]
    803a:	220a      	movs	r2, #10
    803c:	7082      	strb	r2, [r0, #2]
    803e:	790a      	ldrb	r2, [r1, #4]
    8040:	70c2      	strb	r2, [r0, #3]
    8042:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    8046:	7102      	strb	r2, [r0, #4]
    8048:	880a      	ldrh	r2, [r1, #0]
    804a:	0a12      	lsrs	r2, r2, #8
    804c:	7142      	strb	r2, [r0, #5]
    804e:	788a      	ldrb	r2, [r1, #2]
    8050:	7182      	strb	r2, [r0, #6]
    8052:	78ca      	ldrb	r2, [r1, #3]
    8054:	71c2      	strb	r2, [r0, #7]
    8056:	684a      	ldr	r2, [r1, #4]
    8058:	6082      	str	r2, [r0, #8]
    805a:	890a      	ldrh	r2, [r1, #8]
    805c:	8182      	strh	r2, [r0, #12]
    805e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    8062:	f8c0 200e 	str.w	r2, [r0, #14]
    8066:	89ca      	ldrh	r2, [r1, #14]
    8068:	8242      	strh	r2, [r0, #18]
    806a:	690a      	ldr	r2, [r1, #16]
    806c:	6142      	str	r2, [r0, #20]
    806e:	8a8a      	ldrh	r2, [r1, #20]
    8070:	8302      	strh	r2, [r0, #24]
    8072:	7d8a      	ldrb	r2, [r1, #22]
    8074:	7682      	strb	r2, [r0, #26]
    8076:	8aca      	ldrh	r2, [r1, #22]
    8078:	0a12      	lsrs	r2, r2, #8
    807a:	76c2      	strb	r2, [r0, #27]
    807c:	7e0a      	ldrb	r2, [r1, #24]
    807e:	7702      	strb	r2, [r0, #28]
    8080:	8b0a      	ldrh	r2, [r1, #24]
    8082:	0a12      	lsrs	r2, r2, #8
    8084:	7742      	strb	r2, [r0, #29]
    8086:	7e8a      	ldrb	r2, [r1, #26]
    8088:	7782      	strb	r2, [r0, #30]
    808a:	8b4a      	ldrh	r2, [r1, #26]
    808c:	0a12      	lsrs	r2, r2, #8
    808e:	77c2      	strb	r2, [r0, #31]
    8090:	7f09      	ldrb	r1, [r1, #28]
    8092:	f880 1020 	strb.w	r1, [r0, #32]
    8096:	211f      	movs	r1, #31
    8098:	7041      	strb	r1, [r0, #1]
    809a:	4608      	mov	r0, r1
    809c:	4770      	bx	lr
    809e:	094a      	lsrs	r2, r1, #5
    80a0:	f001 011f 	and.w	r1, r1, #31
    80a4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    80a8:	40c8      	lsrs	r0, r1
    80aa:	f000 0001 	and.w	r0, r0, #1
    80ae:	4770      	bx	lr

000080b0 <sdc_hci_get>:
    80b0:	b510      	push	{r4, lr}
    80b2:	460c      	mov	r4, r1
    80b4:	b130      	cbz	r0, 80c4 <sdc_hci_get+0x14>
    80b6:	b12c      	cbz	r4, 80c4 <sdc_hci_get+0x14>
    80b8:	f7f8 fa04 	bl	4c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    80bc:	b128      	cbz	r0, 80ca <sdc_hci_get+0x1a>
    80be:	7020      	strb	r0, [r4, #0]
    80c0:	2000      	movs	r0, #0
    80c2:	bd10      	pop	{r4, pc}
    80c4:	f06f 0015 	mvn.w	r0, #21
    80c8:	bd10      	pop	{r4, pc}
    80ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
    80ce:	bd10      	pop	{r4, pc}

000080d0 <sdc_hci_cmd_cb_set_event_mask>:
    80d0:	b510      	push	{r4, lr}
    80d2:	f7f8 fa9d 	bl	610 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    80d6:	2000      	movs	r0, #0
    80d8:	bd10      	pop	{r4, pc}

000080da <sdc_hci_cmd_vs_conn_event_extend>:
    80da:	b508      	push	{r3, lr}
    80dc:	7800      	ldrb	r0, [r0, #0]
    80de:	f88d 0000 	strb.w	r0, [sp]
    80e2:	4668      	mov	r0, sp
    80e4:	f001 fb0f 	bl	9706 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    80e8:	bd08      	pop	{r3, pc}

000080ea <sdc_hci_cmd_vs_conn_update>:
    80ea:	2001      	movs	r0, #1
    80ec:	4770      	bx	lr

000080ee <sdc_hci_cmd_vs_event_length_set>:
    80ee:	f7fa bc29 	b.w	2944 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

000080f2 <sdc_hci_cmd_vs_llpm_mode_set>:
    80f2:	2001      	movs	r0, #1
    80f4:	4770      	bx	lr

000080f6 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    80f6:	7800      	ldrb	r0, [r0, #0]
    80f8:	b100      	cbz	r0, 80fc <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    80fa:	2001      	movs	r0, #1
    80fc:	f001 bad8 	b.w	96b0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008100 <sdc_hci_cmd_vs_set_adv_randomness>:
    8100:	f001 badb 	b.w	96ba <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

00008104 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    8104:	b510      	push	{r4, lr}
    8106:	4604      	mov	r4, r0
    8108:	f7ff fa36 	bl	7578 <mpsl_temperature_get>
    810c:	17c1      	asrs	r1, r0, #31
    810e:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8112:	1080      	asrs	r0, r0, #2
    8114:	287f      	cmp	r0, #127	; 0x7f
    8116:	dd01      	ble.n	811c <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    8118:	207f      	movs	r0, #127	; 0x7f
    811a:	e004      	b.n	8126 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    811c:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    8120:	4288      	cmp	r0, r1
    8122:	da00      	bge.n	8126 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8124:	4608      	mov	r0, r1
    8126:	7020      	strb	r0, [r4, #0]
    8128:	2000      	movs	r0, #0
    812a:	bd10      	pop	{r4, pc}

0000812c <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    812c:	f001 bada 	b.w	96e4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00008130 <sdc_hci_cmd_ip_read_bd_addr>:
    8130:	f001 bbac 	b.w	988c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00008134 <sdc_hci_cmd_ip_read_local_version_information>:
    8134:	f7fa bc14 	b.w	2960 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008138 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8138:	f001 b92a 	b.w	9390 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000813c <sdc_hci_cmd_le_clear_filter_accept_list>:
    813c:	f001 b93f 	b.w	93be <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008140 <sdc_hci_cmd_le_encrypt>:
    8140:	f001 b94a 	b.w	93d8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008144 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    8144:	8802      	ldrh	r2, [r0, #0]
    8146:	800a      	strh	r2, [r1, #0]
    8148:	f001 b94f 	b.w	93ea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000814c <sdc_hci_cmd_le_rand>:
    814c:	f001 b966 	b.w	941c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008150 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    8150:	f001 b96a 	b.w	9428 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

00008154 <sdc_hci_cmd_le_read_buffer_size>:
    8154:	f7fa bb84 	b.w	2860 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008158 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8158:	f001 b981 	b.w	945e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000815c <sdc_hci_cmd_le_read_transmit_power>:
    815c:	f001 b96f 	b.w	943e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008160 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8160:	f001 b984 	b.w	946c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008164 <sdc_hci_cmd_le_set_adv_data>:
    8164:	f001 b997 	b.w	9496 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

00008168 <sdc_hci_cmd_le_set_adv_enable>:
    8168:	f001 b9aa 	b.w	94c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000816c <sdc_hci_cmd_le_set_adv_params>:
    816c:	f001 b9db 	b.w	9526 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

00008170 <sdc_hci_cmd_le_set_data_related_address_changes>:
    8170:	f001 ba6e 	b.w	9650 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

00008174 <sdc_hci_cmd_le_set_event_mask>:
    8174:	b510      	push	{r4, lr}
    8176:	f7f8 fa43 	bl	600 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    817a:	2000      	movs	r0, #0
    817c:	bd10      	pop	{r4, pc}

0000817e <sdc_hci_cmd_le_set_random_address>:
    817e:	f001 ba74 	b.w	966a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00008182 <sdc_hci_cmd_le_set_scan_response_data>:
    8182:	f001 ba80 	b.w	9686 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>
    8186:	b570      	push	{r4, r5, r6, lr}
    8188:	880b      	ldrh	r3, [r1, #0]
    818a:	7cc4      	ldrb	r4, [r0, #19]
    818c:	f100 0518 	add.w	r5, r0, #24
    8190:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8194:	8802      	ldrh	r2, [r0, #0]
    8196:	4435      	add	r5, r6
    8198:	1d64      	adds	r4, r4, #5
    819a:	882d      	ldrh	r5, [r5, #0]
    819c:	4422      	add	r2, r4
    819e:	b292      	uxth	r2, r2
    81a0:	4425      	add	r5, r4
    81a2:	1e54      	subs	r4, r2, #1
    81a4:	442c      	add	r4, r5
    81a6:	fb94 f4f2 	sdiv	r4, r4, r2
    81aa:	fb02 6204 	mla	r2, r2, r4, r6
    81ae:	8840      	ldrh	r0, [r0, #2]
    81b0:	b292      	uxth	r2, r2
    81b2:	4290      	cmp	r0, r2
    81b4:	d903      	bls.n	81be <sdc_hci_cmd_le_set_scan_response_data+0x3c>
    81b6:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    81ba:	4310      	orrs	r0, r2
    81bc:	e002      	b.n	81c4 <sdc_hci_cmd_le_set_scan_response_data+0x42>
    81be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    81c2:	4398      	bics	r0, r3
    81c4:	8008      	strh	r0, [r1, #0]
    81c6:	bd70      	pop	{r4, r5, r6, pc}

000081c8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    81c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81cc:	461d      	mov	r5, r3
    81ce:	4616      	mov	r6, r2
    81d0:	9f06      	ldr	r7, [sp, #24]
    81d2:	460b      	mov	r3, r1
    81d4:	4604      	mov	r4, r0
    81d6:	463a      	mov	r2, r7
    81d8:	4629      	mov	r1, r5
    81da:	4630      	mov	r0, r6
    81dc:	f000 f839 	bl	8252 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    81e0:	4283      	cmp	r3, r0
    81e2:	d201      	bcs.n	81e8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    81e4:	219e      	movs	r1, #158	; 0x9e
    81e6:	e012      	b.n	820e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    81e8:	07a0      	lsls	r0, r4, #30
    81ea:	d001      	beq.n	81f0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    81ec:	219f      	movs	r1, #159	; 0x9f
    81ee:	e00e      	b.n	820e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    81f0:	2218      	movs	r2, #24
    81f2:	2100      	movs	r1, #0
    81f4:	4620      	mov	r0, r4
    81f6:	f001 ff87 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81fa:	19a8      	adds	r0, r5, r6
    81fc:	1d40      	adds	r0, r0, #5
    81fe:	4378      	muls	r0, r7
    8200:	b280      	uxth	r0, r0
    8202:	74e5      	strb	r5, [r4, #19]
    8204:	8060      	strh	r0, [r4, #2]
    8206:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    820a:	d903      	bls.n	8214 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    820c:	21a4      	movs	r1, #164	; 0xa4
    820e:	2014      	movs	r0, #20
    8210:	f7f8 f89c 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8214:	8026      	strh	r6, [r4, #0]
    8216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000821a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    821a:	b570      	push	{r4, r5, r6, lr}
    821c:	460b      	mov	r3, r1
    821e:	4604      	mov	r4, r0
    8220:	f100 0118 	add.w	r1, r0, #24
    8224:	8902      	ldrh	r2, [r0, #8]
    8226:	8880      	ldrh	r0, [r0, #4]
    8228:	f3c2 050e 	ubfx	r5, r2, #0, #15
    822c:	440d      	add	r5, r1
    822e:	4282      	cmp	r2, r0
    8230:	d101      	bne.n	8236 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    8232:	2000      	movs	r0, #0
    8234:	bd70      	pop	{r4, r5, r6, pc}
    8236:	b123      	cbz	r3, 8242 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8238:	7ce2      	ldrb	r2, [r4, #19]
    823a:	1ca9      	adds	r1, r5, #2
    823c:	4618      	mov	r0, r3
    823e:	f001 fee9 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8242:	882d      	ldrh	r5, [r5, #0]
    8244:	f104 0108 	add.w	r1, r4, #8
    8248:	4620      	mov	r0, r4
    824a:	f7ff ff9c 	bl	8186 <sdc_hci_cmd_le_set_scan_response_data+0x4>
    824e:	4628      	mov	r0, r5
    8250:	bd70      	pop	{r4, r5, r6, pc}

00008252 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8252:	4401      	add	r1, r0
    8254:	1d49      	adds	r1, r1, #5
    8256:	4351      	muls	r1, r2
    8258:	b28a      	uxth	r2, r1
    825a:	2100      	movs	r1, #0
    825c:	2845      	cmp	r0, #69	; 0x45
    825e:	d202      	bcs.n	8266 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8260:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8264:	b281      	uxth	r1, r0
    8266:	3218      	adds	r2, #24
    8268:	1850      	adds	r0, r2, r1
    826a:	b280      	uxth	r0, r0
    826c:	4770      	bx	lr

0000826e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    826e:	b570      	push	{r4, r5, r6, lr}
    8270:	2300      	movs	r3, #0
    8272:	f1a1 0208 	sub.w	r2, r1, #8
    8276:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    827a:	42a2      	cmp	r2, r4
    827c:	d304      	bcc.n	8288 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    827e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    8282:	2015      	movs	r0, #21
    8284:	f7f8 f862 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8288:	6802      	ldr	r2, [r0, #0]
    828a:	b90a      	cbnz	r2, 8290 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    828c:	e01e      	b.n	82cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    828e:	4610      	mov	r0, r2
    8290:	6802      	ldr	r2, [r0, #0]
    8292:	8893      	ldrh	r3, [r2, #4]
    8294:	428b      	cmp	r3, r1
    8296:	d002      	beq.n	829e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    8298:	6813      	ldr	r3, [r2, #0]
    829a:	2b00      	cmp	r3, #0
    829c:	d1f7      	bne.n	828e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    829e:	8894      	ldrh	r4, [r2, #4]
    82a0:	4613      	mov	r3, r2
    82a2:	428c      	cmp	r4, r1
    82a4:	d101      	bne.n	82aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    82a6:	6811      	ldr	r1, [r2, #0]
    82a8:	e00d      	b.n	82c6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    82aa:	f101 0508 	add.w	r5, r1, #8
    82ae:	b2ae      	uxth	r6, r5
    82b0:	2500      	movs	r5, #0
    82b2:	42b4      	cmp	r4, r6
    82b4:	d309      	bcc.n	82ca <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    82b6:	1a64      	subs	r4, r4, r1
    82b8:	4411      	add	r1, r2
    82ba:	600d      	str	r5, [r1, #0]
    82bc:	808c      	strh	r4, [r1, #4]
    82be:	6802      	ldr	r2, [r0, #0]
    82c0:	6812      	ldr	r2, [r2, #0]
    82c2:	6002      	str	r2, [r0, #0]
    82c4:	600a      	str	r2, [r1, #0]
    82c6:	6001      	str	r1, [r0, #0]
    82c8:	e000      	b.n	82cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    82ca:	2300      	movs	r3, #0
    82cc:	4618      	mov	r0, r3
    82ce:	bd70      	pop	{r4, r5, r6, pc}

000082d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    82d0:	b510      	push	{r4, lr}
    82d2:	000c      	movs	r4, r1
    82d4:	d004      	beq.n	82e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    82d6:	2c08      	cmp	r4, #8
    82d8:	d207      	bcs.n	82ea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    82da:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    82de:	e00a      	b.n	82f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    82e0:	b108      	cbz	r0, 82e6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    82e2:	2100      	movs	r1, #0
    82e4:	6001      	str	r1, [r0, #0]
    82e6:	2000      	movs	r0, #0
    82e8:	bd10      	pop	{r4, pc}
    82ea:	b158      	cbz	r0, 8304 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    82ec:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    82f0:	d304      	bcc.n	82fc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    82f2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    82f6:	2015      	movs	r0, #21
    82f8:	f7f8 f828 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82fc:	b2a1      	uxth	r1, r4
    82fe:	6800      	ldr	r0, [r0, #0]
    8300:	f000 f814 	bl	832c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    8304:	1d20      	adds	r0, r4, #4
    8306:	bd10      	pop	{r4, pc}

00008308 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    8308:	2100      	movs	r1, #0
    830a:	6802      	ldr	r2, [r0, #0]
    830c:	e003      	b.n	8316 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    830e:	8893      	ldrh	r3, [r2, #4]
    8310:	6812      	ldr	r2, [r2, #0]
    8312:	4419      	add	r1, r3
    8314:	b289      	uxth	r1, r1
    8316:	2a00      	cmp	r2, #0
    8318:	d1f9      	bne.n	830e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    831a:	f000 b807 	b.w	832c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000831e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    831e:	2300      	movs	r3, #0
    8320:	600b      	str	r3, [r1, #0]
    8322:	808a      	strh	r2, [r1, #4]
    8324:	6802      	ldr	r2, [r0, #0]
    8326:	600a      	str	r2, [r1, #0]
    8328:	6001      	str	r1, [r0, #0]
    832a:	4770      	bx	lr
    832c:	2300      	movs	r3, #0
    832e:	6043      	str	r3, [r0, #4]
    8330:	1d02      	adds	r2, r0, #4
    8332:	8101      	strh	r1, [r0, #8]
    8334:	6002      	str	r2, [r0, #0]
    8336:	4770      	bx	lr
    8338:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    833c:	8159      	strh	r1, [r3, #10]
    833e:	4611      	mov	r1, r2
    8340:	f000 b814 	b.w	836c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    8344:	b170      	cbz	r0, 8364 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    8346:	7882      	ldrb	r2, [r0, #2]
    8348:	fbb1 f3f2 	udiv	r3, r1, r2
    834c:	fb02 1213 	mls	r2, r2, r3, r1
    8350:	b2d2      	uxtb	r2, r2
    8352:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8356:	895b      	ldrh	r3, [r3, #10]
    8358:	428b      	cmp	r3, r1
    835a:	d101      	bne.n	8360 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    835c:	4610      	mov	r0, r2
    835e:	4770      	bx	lr
    8360:	78c3      	ldrb	r3, [r0, #3]
    8362:	b10b      	cbz	r3, 8368 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    8364:	20ff      	movs	r0, #255	; 0xff
    8366:	4770      	bx	lr
    8368:	f7f8 ba8a 	b.w	880 <__z_interrupt_stack_SIZEOF+0x40>
    836c:	8802      	ldrh	r2, [r0, #0]
    836e:	fb01 0102 	mla	r1, r1, r2, r0
    8372:	7880      	ldrb	r0, [r0, #2]
    8374:	220a      	movs	r2, #10
    8376:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    837a:	4408      	add	r0, r1
    837c:	4770      	bx	lr

0000837e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    837e:	b51c      	push	{r2, r3, r4, lr}
    8380:	4604      	mov	r4, r0
    8382:	2000      	movs	r0, #0
    8384:	9001      	str	r0, [sp, #4]
    8386:	9000      	str	r0, [sp, #0]
    8388:	f88d 4006 	strb.w	r4, [sp, #6]
    838c:	e00a      	b.n	83a4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    838e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    8392:	4621      	mov	r1, r4
    8394:	f7f8 fb62 	bl	a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    8398:	b120      	cbz	r0, 83a4 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    839a:	f240 217e 	movw	r1, #638	; 0x27e
    839e:	2017      	movs	r0, #23
    83a0:	f7f7 ffd4 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83a4:	4668      	mov	r0, sp
    83a6:	f7f8 fb09 	bl	9bc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    83aa:	2800      	cmp	r0, #0
    83ac:	d0ef      	beq.n	838e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    83ae:	bd1c      	pop	{r2, r3, r4, pc}

000083b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    83b0:	b570      	push	{r4, r5, r6, lr}
    83b2:	460e      	mov	r6, r1
    83b4:	461d      	mov	r5, r3
    83b6:	4611      	mov	r1, r2
    83b8:	f000 f813 	bl	83e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    83bc:	4604      	mov	r4, r0
    83be:	4629      	mov	r1, r5
    83c0:	4630      	mov	r0, r6
    83c2:	f000 f804 	bl	83ce <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    83c6:	4420      	add	r0, r4
    83c8:	1d00      	adds	r0, r0, #4
    83ca:	b280      	uxth	r0, r0
    83cc:	bd70      	pop	{r4, r5, r6, pc}
    83ce:	b510      	push	{r4, lr}
    83d0:	460a      	mov	r2, r1
    83d2:	2109      	movs	r1, #9
    83d4:	f7ff ff3d 	bl	8252 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    83d8:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    83dc:	1cc0      	adds	r0, r0, #3
    83de:	4008      	ands	r0, r1
    83e0:	bd10      	pop	{r4, pc}
    83e2:	b510      	push	{r4, lr}
    83e4:	460a      	mov	r2, r1
    83e6:	210a      	movs	r1, #10
    83e8:	f7ff ff33 	bl	8252 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    83ec:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    83f0:	1cc0      	adds	r0, r0, #3
    83f2:	4008      	ands	r0, r1
    83f4:	bd10      	pop	{r4, pc}
    83f6:	b109      	cbz	r1, 83fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    83f8:	2100      	movs	r1, #0
    83fa:	e000      	b.n	83fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    83fc:	2102      	movs	r1, #2
    83fe:	1843      	adds	r3, r0, r1
    8400:	7d1a      	ldrb	r2, [r3, #20]
    8402:	2a02      	cmp	r2, #2
    8404:	d008      	beq.n	8418 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    8406:	7d5b      	ldrb	r3, [r3, #21]
    8408:	2b02      	cmp	r3, #2
    840a:	d009      	beq.n	8420 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    840c:	2a03      	cmp	r2, #3
    840e:	d003      	beq.n	8418 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    8410:	2b03      	cmp	r3, #3
    8412:	d005      	beq.n	8420 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    8414:	2000      	movs	r0, #0
    8416:	4770      	bx	lr
    8418:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    841c:	8b00      	ldrh	r0, [r0, #24]
    841e:	4770      	bx	lr
    8420:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8424:	8b40      	ldrh	r0, [r0, #26]
    8426:	4770      	bx	lr
    8428:	b109      	cbz	r1, 842e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    842a:	2100      	movs	r1, #0
    842c:	e000      	b.n	8430 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    842e:	2102      	movs	r1, #2
    8430:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    8434:	8b01      	ldrh	r1, [r0, #24]
    8436:	b911      	cbnz	r1, 843e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    8438:	8b40      	ldrh	r0, [r0, #26]
    843a:	2800      	cmp	r0, #0
    843c:	d000      	beq.n	8440 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    843e:	2001      	movs	r0, #1
    8440:	4770      	bx	lr
    8442:	b538      	push	{r3, r4, r5, lr}
    8444:	7883      	ldrb	r3, [r0, #2]
    8446:	f88d 3000 	strb.w	r3, [sp]
    844a:	9b00      	ldr	r3, [sp, #0]
    844c:	9300      	str	r3, [sp, #0]
    844e:	f89d 3000 	ldrb.w	r3, [sp]
    8452:	b95b      	cbnz	r3, 846c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    8454:	2400      	movs	r4, #0
    8456:	b10a      	cbz	r2, 845c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    8458:	2300      	movs	r3, #0
    845a:	e000      	b.n	845e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    845c:	2302      	movs	r3, #2
    845e:	18c2      	adds	r2, r0, r3
    8460:	7d15      	ldrb	r5, [r2, #20]
    8462:	2d02      	cmp	r5, #2
    8464:	d004      	beq.n	8470 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    8466:	7d52      	ldrb	r2, [r2, #21]
    8468:	2a02      	cmp	r2, #2
    846a:	d004      	beq.n	8476 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    846c:	2000      	movs	r0, #0
    846e:	bd38      	pop	{r3, r4, r5, pc}
    8470:	461a      	mov	r2, r3
    8472:	1c5b      	adds	r3, r3, #1
    8474:	e000      	b.n	8478 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    8476:	1c5a      	adds	r2, r3, #1
    8478:	b179      	cbz	r1, 849a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    847a:	18c5      	adds	r5, r0, r3
    847c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8480:	752c      	strb	r4, [r5, #20]
    8482:	831c      	strh	r4, [r3, #24]
    8484:	2303      	movs	r3, #3
    8486:	1884      	adds	r4, r0, r2
    8488:	7523      	strb	r3, [r4, #20]
    848a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    848e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    8492:	685b      	ldr	r3, [r3, #4]
    8494:	600b      	str	r3, [r1, #0]
    8496:	8b00      	ldrh	r0, [r0, #24]
    8498:	8088      	strh	r0, [r1, #4]
    849a:	2001      	movs	r0, #1
    849c:	bd38      	pop	{r3, r4, r5, pc}
    849e:	b510      	push	{r4, lr}
    84a0:	b109      	cbz	r1, 84a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    84a2:	2100      	movs	r1, #0
    84a4:	e000      	b.n	84a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    84a6:	2102      	movs	r1, #2
    84a8:	1843      	adds	r3, r0, r1
    84aa:	7d1c      	ldrb	r4, [r3, #20]
    84ac:	4294      	cmp	r4, r2
    84ae:	d103      	bne.n	84b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    84b0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    84b4:	8b00      	ldrh	r0, [r0, #24]
    84b6:	bd10      	pop	{r4, pc}
    84b8:	7d5b      	ldrb	r3, [r3, #21]
    84ba:	4293      	cmp	r3, r2
    84bc:	d103      	bne.n	84c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    84be:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    84c2:	8b40      	ldrh	r0, [r0, #26]
    84c4:	bd10      	pop	{r4, pc}
    84c6:	2000      	movs	r0, #0
    84c8:	bd10      	pop	{r4, pc}
    84ca:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    84ce:	d201      	bcs.n	84d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    84d0:	0841      	lsrs	r1, r0, #1
    84d2:	e000      	b.n	84d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    84d4:	21ff      	movs	r1, #255	; 0xff
    84d6:	1a40      	subs	r0, r0, r1
    84d8:	f240 6172 	movw	r1, #1650	; 0x672
    84dc:	4288      	cmp	r0, r1
    84de:	db00      	blt.n	84e2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    84e0:	4608      	mov	r0, r1
    84e2:	b280      	uxth	r0, r0
    84e4:	4770      	bx	lr

000084e6 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    84e6:	2101      	movs	r1, #1
    84e8:	f7ff bf85 	b.w	83f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

000084ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    84ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84f0:	4606      	mov	r6, r0
    84f2:	f342 0780 	sbfx	r7, r2, #2, #1
    84f6:	7848      	ldrb	r0, [r1, #1]
    84f8:	460c      	mov	r4, r1
    84fa:	f022 0504 	bic.w	r5, r2, #4
    84fe:	1c7f      	adds	r7, r7, #1
    8500:	b100      	cbz	r0, 8504 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    8502:	b90d      	cbnz	r5, 8508 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    8504:	4328      	orrs	r0, r5
    8506:	d104      	bne.n	8512 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    8508:	b145      	cbz	r5, 851c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    850a:	2100      	movs	r1, #0
    850c:	4620      	mov	r0, r4
    850e:	f7f8 fb9b 	bl	c48 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    8512:	20ff      	movs	r0, #255	; 0xff
    8514:	70a0      	strb	r0, [r4, #2]
    8516:	b11f      	cbz	r7, 8520 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    8518:	2000      	movs	r0, #0
    851a:	e002      	b.n	8522 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    851c:	2101      	movs	r1, #1
    851e:	e7f5      	b.n	850c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    8520:	2002      	movs	r0, #2
    8522:	1821      	adds	r1, r4, r0
    8524:	7d09      	ldrb	r1, [r1, #20]
    8526:	2903      	cmp	r1, #3
    8528:	d102      	bne.n	8530 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    852a:	2d02      	cmp	r5, #2
    852c:	d000      	beq.n	8530 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    852e:	1c40      	adds	r0, r0, #1
    8530:	1822      	adds	r2, r4, r0
    8532:	2101      	movs	r1, #1
    8534:	7511      	strb	r1, [r2, #20]
    8536:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    853a:	2200      	movs	r2, #0
    853c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8540:	830a      	strh	r2, [r1, #24]
    8542:	6840      	ldr	r0, [r0, #4]
    8544:	70a2      	strb	r2, [r4, #2]
    8546:	4631      	mov	r1, r6
    8548:	f362 010f 	bfi	r1, r2, #0, #16
    854c:	e9c6 0100 	strd	r0, r1, [r6]
    8550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008554 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    8554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8558:	461e      	mov	r6, r3
    855a:	4613      	mov	r3, r2
    855c:	4604      	mov	r4, r0
    855e:	b109      	cbz	r1, 8564 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    8560:	2000      	movs	r0, #0
    8562:	e000      	b.n	8566 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    8564:	2002      	movs	r0, #2
    8566:	21ff      	movs	r1, #255	; 0xff
    8568:	70a1      	strb	r1, [r4, #2]
    856a:	1821      	adds	r1, r4, r0
    856c:	7d0a      	ldrb	r2, [r1, #20]
    856e:	2a01      	cmp	r2, #1
    8570:	d003      	beq.n	857a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    8572:	7d49      	ldrb	r1, [r1, #21]
    8574:	2901      	cmp	r1, #1
    8576:	d10c      	bne.n	8592 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    8578:	1c40      	adds	r0, r0, #1
    857a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    857e:	2700      	movs	r7, #0
    8580:	8b29      	ldrh	r1, [r5, #24]
    8582:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    8586:	198a      	adds	r2, r1, r6
    8588:	4562      	cmp	r2, ip
    858a:	d905      	bls.n	8598 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    858c:	4420      	add	r0, r4
    858e:	832f      	strh	r7, [r5, #24]
    8590:	7507      	strb	r7, [r0, #20]
    8592:	2000      	movs	r0, #0
    8594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8598:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    859c:	4632      	mov	r2, r6
    859e:	6840      	ldr	r0, [r0, #4]
    85a0:	4408      	add	r0, r1
    85a2:	4619      	mov	r1, r3
    85a4:	f001 fd36 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    85a8:	8b28      	ldrh	r0, [r5, #24]
    85aa:	4430      	add	r0, r6
    85ac:	8328      	strh	r0, [r5, #24]
    85ae:	70a7      	strb	r7, [r4, #2]
    85b0:	2001      	movs	r0, #1
    85b2:	e7ef      	b.n	8594 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

000085b4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    85b4:	b510      	push	{r4, lr}
    85b6:	2101      	movs	r1, #1
    85b8:	f7ff ff36 	bl	8428 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    85bc:	2800      	cmp	r0, #0
    85be:	d000      	beq.n	85c2 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    85c0:	2001      	movs	r0, #1
    85c2:	bd10      	pop	{r4, pc}

000085c4 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    85c4:	2201      	movs	r2, #1
    85c6:	f7ff bf3c 	b.w	8442 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

000085ca <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    85ca:	2200      	movs	r2, #0
    85cc:	f7ff bf39 	b.w	8442 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

000085d0 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    85d0:	b510      	push	{r4, lr}
    85d2:	2100      	movs	r1, #0
    85d4:	f7ff ff28 	bl	8428 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    85d8:	2800      	cmp	r0, #0
    85da:	d000      	beq.n	85de <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    85dc:	2001      	movs	r0, #1
    85de:	bd10      	pop	{r4, pc}

000085e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    85e0:	b570      	push	{r4, r5, r6, lr}
    85e2:	b109      	cbz	r1, 85e8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    85e4:	2300      	movs	r3, #0
    85e6:	e000      	b.n	85ea <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    85e8:	2302      	movs	r3, #2
    85ea:	21ff      	movs	r1, #255	; 0xff
    85ec:	7081      	strb	r1, [r0, #2]
    85ee:	18c1      	adds	r1, r0, r3
    85f0:	2402      	movs	r4, #2
    85f2:	7d0d      	ldrb	r5, [r1, #20]
    85f4:	2d01      	cmp	r5, #1
    85f6:	d007      	beq.n	8608 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    85f8:	7d4d      	ldrb	r5, [r1, #21]
    85fa:	2d01      	cmp	r5, #1
    85fc:	d009      	beq.n	8612 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    85fe:	f44f 718b 	mov.w	r1, #278	; 0x116
    8602:	2009      	movs	r0, #9
    8604:	f7f7 fea2 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8608:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    860c:	831a      	strh	r2, [r3, #24]
    860e:	750c      	strb	r4, [r1, #20]
    8610:	e003      	b.n	861a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    8612:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8616:	835a      	strh	r2, [r3, #26]
    8618:	754c      	strb	r4, [r1, #21]
    861a:	2100      	movs	r1, #0
    861c:	7081      	strb	r1, [r0, #2]
    861e:	bd70      	pop	{r4, r5, r6, pc}

00008620 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    8620:	2101      	movs	r1, #1
    8622:	7001      	strb	r1, [r0, #0]
    8624:	4770      	bx	lr

00008626 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    8626:	2201      	movs	r2, #1
    8628:	4611      	mov	r1, r2
    862a:	f7ff bf38 	b.w	849e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000862e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    862e:	2201      	movs	r2, #1
    8630:	2100      	movs	r1, #0
    8632:	f7ff bf34 	b.w	849e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

00008636 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    8636:	2100      	movs	r1, #0
    8638:	f7ff bedd 	b.w	83f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    863c:	2800      	cmp	r0, #0
    863e:	db09      	blt.n	8654 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    8640:	f000 021f 	and.w	r2, r0, #31
    8644:	2101      	movs	r1, #1
    8646:	4091      	lsls	r1, r2
    8648:	0940      	lsrs	r0, r0, #5
    864a:	0080      	lsls	r0, r0, #2
    864c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8650:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8654:	4770      	bx	lr
    8656:	2800      	cmp	r0, #0
    8658:	db0d      	blt.n	8676 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    865a:	f000 021f 	and.w	r2, r0, #31
    865e:	2101      	movs	r1, #1
    8660:	4091      	lsls	r1, r2
    8662:	0940      	lsrs	r0, r0, #5
    8664:	0080      	lsls	r0, r0, #2
    8666:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    866a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    866e:	f3bf 8f4f 	dsb	sy
    8672:	f3bf 8f6f 	isb	sy
    8676:	4770      	bx	lr
    8678:	b510      	push	{r4, lr}
    867a:	200e      	movs	r0, #14
    867c:	f7ff ffeb 	bl	8656 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    8680:	200e      	movs	r0, #14
    8682:	f7ff ffdb 	bl	863c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8686:	200f      	movs	r0, #15
    8688:	f7ff ffe5 	bl	8656 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    868c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8690:	200f      	movs	r0, #15
    8692:	f7ff bfd3 	b.w	863c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    8696:	2800      	cmp	r0, #0
    8698:	db09      	blt.n	86ae <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    869a:	f000 021f 	and.w	r2, r0, #31
    869e:	2101      	movs	r1, #1
    86a0:	4091      	lsls	r1, r2
    86a2:	0940      	lsrs	r0, r0, #5
    86a4:	0080      	lsls	r0, r0, #2
    86a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    86aa:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    86ae:	4770      	bx	lr
    86b0:	5840      	ldr	r0, [r0, r1]
    86b2:	2800      	cmp	r0, #0
    86b4:	d000      	beq.n	86b8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    86b6:	2001      	movs	r0, #1
    86b8:	4770      	bx	lr

000086ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    86ba:	b510      	push	{r4, lr}
    86bc:	4604      	mov	r4, r0
    86be:	4620      	mov	r0, r4
    86c0:	f7f8 fbca 	bl	e58 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    86c4:	2811      	cmp	r0, #17
    86c6:	d0fa      	beq.n	86be <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    86c8:	bd10      	pop	{r4, pc}

000086ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    86ca:	b510      	push	{r4, lr}
    86cc:	f7ff fff5 	bl	86ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    86d0:	2800      	cmp	r0, #0
    86d2:	d003      	beq.n	86dc <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    86d4:	21a9      	movs	r1, #169	; 0xa9
    86d6:	201d      	movs	r0, #29
    86d8:	f7f7 fe38 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86dc:	bd10      	pop	{r4, pc}

000086de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    86de:	f7f8 bc99 	b.w	1014 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

000086e2 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    86e2:	b510      	push	{r4, lr}
    86e4:	4050      	eors	r0, r2
    86e6:	780a      	ldrb	r2, [r1, #0]
    86e8:	781c      	ldrb	r4, [r3, #0]
    86ea:	4062      	eors	r2, r4
    86ec:	4410      	add	r0, r2
    86ee:	784a      	ldrb	r2, [r1, #1]
    86f0:	785c      	ldrb	r4, [r3, #1]
    86f2:	4062      	eors	r2, r4
    86f4:	4410      	add	r0, r2
    86f6:	788a      	ldrb	r2, [r1, #2]
    86f8:	789c      	ldrb	r4, [r3, #2]
    86fa:	4062      	eors	r2, r4
    86fc:	4410      	add	r0, r2
    86fe:	78ca      	ldrb	r2, [r1, #3]
    8700:	78dc      	ldrb	r4, [r3, #3]
    8702:	4062      	eors	r2, r4
    8704:	4410      	add	r0, r2
    8706:	790a      	ldrb	r2, [r1, #4]
    8708:	791c      	ldrb	r4, [r3, #4]
    870a:	7949      	ldrb	r1, [r1, #5]
    870c:	4062      	eors	r2, r4
    870e:	4410      	add	r0, r2
    8710:	795a      	ldrb	r2, [r3, #5]
    8712:	4051      	eors	r1, r2
    8714:	42c1      	cmn	r1, r0
    8716:	d101      	bne.n	871c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    8718:	2001      	movs	r0, #1
    871a:	bd10      	pop	{r4, pc}
    871c:	2000      	movs	r0, #0
    871e:	bd10      	pop	{r4, pc}

00008720 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    8720:	b510      	push	{r4, lr}
    8722:	2900      	cmp	r1, #0
    8724:	4604      	mov	r4, r0
    8726:	f04f 0106 	mov.w	r1, #6
    872a:	d002      	beq.n	8732 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    872c:	f7f7 fe70 	bl	410 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8730:	e001      	b.n	8736 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    8732:	f7f7 fe7b 	bl	42c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8736:	7960      	ldrb	r0, [r4, #5]
    8738:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    873c:	7160      	strb	r0, [r4, #5]
    873e:	bd10      	pop	{r4, pc}

00008740 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    8740:	4770      	bx	lr

00008742 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    8742:	b530      	push	{r4, r5, lr}
    8744:	460c      	mov	r4, r1
    8746:	4605      	mov	r5, r0
    8748:	b08d      	sub	sp, #52	; 0x34
    874a:	f04f 0103 	mov.w	r1, #3
    874e:	f104 0003 	add.w	r0, r4, #3
    8752:	b112      	cbz	r2, 875a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8754:	f7f7 fe5c 	bl	410 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8758:	e001      	b.n	875e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    875a:	f7f7 fe67 	bl	42c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    875e:	7960      	ldrb	r0, [r4, #5]
    8760:	220d      	movs	r2, #13
    8762:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8766:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    876a:	7160      	strb	r0, [r4, #5]
    876c:	2100      	movs	r1, #0
    876e:	a804      	add	r0, sp, #16
    8770:	f001 fcca 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8774:	78e0      	ldrb	r0, [r4, #3]
    8776:	f88d 001f 	strb.w	r0, [sp, #31]
    877a:	7920      	ldrb	r0, [r4, #4]
    877c:	f88d 001e 	strb.w	r0, [sp, #30]
    8780:	7960      	ldrb	r0, [r4, #5]
    8782:	f88d 001d 	strb.w	r0, [sp, #29]
    8786:	2210      	movs	r2, #16
    8788:	4629      	mov	r1, r5
    878a:	4668      	mov	r0, sp
    878c:	f001 fc42 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8790:	4668      	mov	r0, sp
    8792:	f7ff ff9a 	bl	86ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8796:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    879a:	7020      	strb	r0, [r4, #0]
    879c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    87a0:	7060      	strb	r0, [r4, #1]
    87a2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    87a6:	70a0      	strb	r0, [r4, #2]
    87a8:	b00d      	add	sp, #52	; 0x34
    87aa:	bd30      	pop	{r4, r5, pc}

000087ac <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    87ac:	2101      	movs	r1, #1
    87ae:	f7f8 bcff 	b.w	11b0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

000087b2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    87b2:	b510      	push	{r4, lr}
    87b4:	f001 fa06 	bl	9bc4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    87b8:	b118      	cbz	r0, 87c2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    87ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87be:	f7fa bb11 	b.w	2de4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    87c2:	20ff      	movs	r0, #255	; 0xff
    87c4:	bd10      	pop	{r4, pc}

000087c6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    87c6:	b510      	push	{r4, lr}
    87c8:	f7f8 fd1e 	bl	1208 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    87cc:	2808      	cmp	r0, #8
    87ce:	d003      	beq.n	87d8 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    87d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87d4:	f7f8 bd04 	b.w	11e0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    87d8:	bd10      	pop	{r4, pc}

000087da <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    87da:	b570      	push	{r4, r5, r6, lr}
    87dc:	460e      	mov	r6, r1
    87de:	b08c      	sub	sp, #48	; 0x30
    87e0:	4614      	mov	r4, r2
    87e2:	4601      	mov	r1, r0
    87e4:	461d      	mov	r5, r3
    87e6:	2210      	movs	r2, #16
    87e8:	4668      	mov	r0, sp
    87ea:	f000 f84e 	bl	888a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    87ee:	2210      	movs	r2, #16
    87f0:	4631      	mov	r1, r6
    87f2:	a804      	add	r0, sp, #16
    87f4:	f000 f849 	bl	888a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    87f8:	4668      	mov	r0, sp
    87fa:	f7ff ff66 	bl	86ca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    87fe:	a908      	add	r1, sp, #32
    8800:	f04f 0210 	mov.w	r2, #16
    8804:	4628      	mov	r0, r5
    8806:	b11c      	cbz	r4, 8810 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    8808:	f000 f83f 	bl	888a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    880c:	b00c      	add	sp, #48	; 0x30
    880e:	bd70      	pop	{r4, r5, r6, pc}
    8810:	f001 fc00 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8814:	e7fa      	b.n	880c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

00008816 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    8816:	f240 41e2 	movw	r1, #1250	; 0x4e2
    881a:	fbb0 f0f1 	udiv	r0, r0, r1
    881e:	b280      	uxth	r0, r0
    8820:	4770      	bx	lr

00008822 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    8822:	6809      	ldr	r1, [r1, #0]
    8824:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    8828:	4770      	bx	lr

0000882a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    882e:	4607      	mov	r7, r0
    8830:	460e      	mov	r6, r1
    8832:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    8836:	f7fc ff29 	bl	568c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    883a:	b198      	cbz	r0, 8864 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    883c:	b31e      	cbz	r6, 8886 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    883e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    8842:	1b40      	subs	r0, r0, r5
    8844:	2300      	movs	r3, #0
    8846:	eb61 0104 	sbc.w	r1, r1, r4
    884a:	461a      	mov	r2, r3
    884c:	1a1b      	subs	r3, r3, r0
    884e:	418a      	sbcs	r2, r1
    8850:	da19      	bge.n	8886 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    8852:	1c42      	adds	r2, r0, #1
    8854:	f171 0100 	sbcs.w	r1, r1, #0
    8858:	db07      	blt.n	886a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    885a:	f240 211a 	movw	r1, #538	; 0x21a
    885e:	2029      	movs	r0, #41	; 0x29
    8860:	f7f7 fd74 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8864:	f44f 7104 	mov.w	r1, #528	; 0x210
    8868:	e7f9      	b.n	885e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    886a:	4430      	add	r0, r6
    886c:	1e40      	subs	r0, r0, #1
    886e:	fbb0 f1f6 	udiv	r1, r0, r6
    8872:	fb01 f006 	mul.w	r0, r1, r6
    8876:	1828      	adds	r0, r5, r0
    8878:	f144 0400 	adc.w	r4, r4, #0
    887c:	e9c7 0404 	strd	r0, r4, [r7, #16]
    8880:	4608      	mov	r0, r1
    8882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8886:	2000      	movs	r0, #0
    8888:	e7fb      	b.n	8882 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000888a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    888a:	b530      	push	{r4, r5, lr}
    888c:	4613      	mov	r3, r2
    888e:	e006      	b.n	889e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    8890:	18cc      	adds	r4, r1, r3
    8892:	1ad5      	subs	r5, r2, r3
    8894:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    8898:	1e5b      	subs	r3, r3, #1
    889a:	5544      	strb	r4, [r0, r5]
    889c:	b2db      	uxtb	r3, r3
    889e:	2b00      	cmp	r3, #0
    88a0:	d1f6      	bne.n	8890 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    88a2:	bd30      	pop	{r4, r5, pc}

000088a4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    88a4:	b510      	push	{r4, lr}
    88a6:	2300      	movs	r3, #0
    88a8:	461a      	mov	r2, r3
    88aa:	e003      	b.n	88b4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    88ac:	5c84      	ldrb	r4, [r0, r2]
    88ae:	4323      	orrs	r3, r4
    88b0:	1c52      	adds	r2, r2, #1
    88b2:	b2d2      	uxtb	r2, r2
    88b4:	428a      	cmp	r2, r1
    88b6:	d3f9      	bcc.n	88ac <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    88b8:	b10b      	cbz	r3, 88be <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    88ba:	2000      	movs	r0, #0
    88bc:	bd10      	pop	{r4, pc}
    88be:	2001      	movs	r0, #1
    88c0:	bd10      	pop	{r4, pc}

000088c2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    88c2:	2100      	movs	r1, #0
    88c4:	4608      	mov	r0, r1
    88c6:	f7f8 bd8d 	b.w	13e4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    88ca:	4401      	add	r1, r0
    88cc:	2914      	cmp	r1, #20
    88ce:	dd01      	ble.n	88d4 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    88d0:	2014      	movs	r0, #20
    88d2:	4770      	bx	lr
    88d4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    88d8:	4281      	cmp	r1, r0
    88da:	dbfa      	blt.n	88d2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    88dc:	b248      	sxtb	r0, r1
    88de:	4770      	bx	lr

000088e0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    88e0:	b570      	push	{r4, r5, r6, lr}
    88e2:	4604      	mov	r4, r0
    88e4:	1c40      	adds	r0, r0, #1
    88e6:	4288      	cmp	r0, r1
    88e8:	d004      	beq.n	88f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    88ea:	6808      	ldr	r0, [r1, #0]
    88ec:	f8c4 0001 	str.w	r0, [r4, #1]
    88f0:	7908      	ldrb	r0, [r1, #4]
    88f2:	7160      	strb	r0, [r4, #5]
    88f4:	7960      	ldrb	r0, [r4, #5]
    88f6:	f000 001f 	and.w	r0, r0, #31
    88fa:	7160      	strb	r0, [r4, #5]
    88fc:	2000      	movs	r0, #0
    88fe:	72e0      	strb	r0, [r4, #11]
    8900:	4605      	mov	r5, r0
    8902:	1966      	adds	r6, r4, r5
    8904:	7870      	ldrb	r0, [r6, #1]
    8906:	f000 f8d1 	bl	8aac <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    890a:	71b0      	strb	r0, [r6, #6]
    890c:	7ae1      	ldrb	r1, [r4, #11]
    890e:	1c6d      	adds	r5, r5, #1
    8910:	4408      	add	r0, r1
    8912:	b2ed      	uxtb	r5, r5
    8914:	72e0      	strb	r0, [r4, #11]
    8916:	2d05      	cmp	r5, #5
    8918:	d3f3      	bcc.n	8902 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    891a:	bd70      	pop	{r4, r5, r6, pc}

0000891c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    891c:	7802      	ldrb	r2, [r0, #0]
    891e:	f002 020f 	and.w	r2, r2, #15
    8922:	2a03      	cmp	r2, #3
    8924:	d003      	beq.n	892e <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    8926:	2a05      	cmp	r2, #5
    8928:	d104      	bne.n	8934 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    892a:	f000 b85f 	b.w	89ec <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x22>
    892e:	7840      	ldrb	r0, [r0, #1]
    8930:	280c      	cmp	r0, #12
    8932:	d001      	beq.n	8938 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    8934:	2000      	movs	r0, #0
    8936:	4770      	bx	lr
    8938:	2001      	movs	r0, #1
    893a:	4770      	bx	lr

0000893c <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    893c:	b570      	push	{r4, r5, r6, lr}
    893e:	4614      	mov	r4, r2
    8940:	4605      	mov	r5, r0
    8942:	2a1f      	cmp	r2, #31
    8944:	d903      	bls.n	894e <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    8946:	21ee      	movs	r1, #238	; 0xee
    8948:	202a      	movs	r0, #42	; 0x2a
    894a:	f7f7 fcff 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    894e:	f105 0009 	add.w	r0, r5, #9
    8952:	f001 fb5f 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8956:	1da4      	adds	r4, r4, #6
    8958:	706c      	strb	r4, [r5, #1]
    895a:	bd70      	pop	{r4, r5, r6, pc}

0000895c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    895c:	b510      	push	{r4, lr}
    895e:	7802      	ldrb	r2, [r0, #0]
    8960:	f001 030f 	and.w	r3, r1, #15
    8964:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    8968:	431a      	orrs	r2, r3
    896a:	7002      	strb	r2, [r0, #0]
    896c:	2907      	cmp	r1, #7
    896e:	d20c      	bcs.n	898a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    8970:	e8df f001 	tbb	[pc, r1]
    8974:	06040604 	.word	0x06040604
    8978:	00040804 	.word	0x00040804
    897c:	2106      	movs	r1, #6
    897e:	e002      	b.n	8986 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    8980:	210c      	movs	r1, #12
    8982:	e000      	b.n	8986 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    8984:	2122      	movs	r1, #34	; 0x22
    8986:	7041      	strb	r1, [r0, #1]
    8988:	bd10      	pop	{r4, pc}
    898a:	21a8      	movs	r1, #168	; 0xa8
    898c:	202a      	movs	r0, #42	; 0x2a
    898e:	f7f7 fcdd 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00008992 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    8992:	680a      	ldr	r2, [r1, #0]
    8994:	f840 2f09 	str.w	r2, [r0, #9]!
    8998:	8889      	ldrh	r1, [r1, #4]
    899a:	8081      	strh	r1, [r0, #4]
    899c:	4770      	bx	lr

0000899e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    899e:	7802      	ldrb	r2, [r0, #0]
    89a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    89a4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    89a8:	7002      	strb	r2, [r0, #0]
    89aa:	4770      	bx	lr

000089ac <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    89ac:	680a      	ldr	r2, [r1, #0]
    89ae:	f840 2f03 	str.w	r2, [r0, #3]!
    89b2:	8889      	ldrh	r1, [r1, #4]
    89b4:	8081      	strh	r1, [r0, #4]
    89b6:	4770      	bx	lr

000089b8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    89b8:	7802      	ldrb	r2, [r0, #0]
    89ba:	2340      	movs	r3, #64	; 0x40
    89bc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    89c0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    89c4:	430a      	orrs	r2, r1
    89c6:	7002      	strb	r2, [r0, #0]
    89c8:	4770      	bx	lr

000089ca <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    89ca:	b570      	push	{r4, r5, r6, lr}
    89cc:	4614      	mov	r4, r2
    89ce:	4605      	mov	r5, r0
    89d0:	2a1f      	cmp	r2, #31
    89d2:	d904      	bls.n	89de <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    89d4:	f44f 7188 	mov.w	r1, #272	; 0x110
    89d8:	202a      	movs	r0, #42	; 0x2a
    89da:	f7f7 fcb7 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89de:	f105 0009 	add.w	r0, r5, #9
    89e2:	f001 fb17 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    89e6:	1da4      	adds	r4, r4, #6
    89e8:	706c      	strb	r4, [r5, #1]
    89ea:	bd70      	pop	{r4, r5, r6, pc}
    89ec:	b570      	push	{r4, r5, r6, lr}
    89ee:	f8d0 201f 	ldr.w	r2, [r0, #31]
    89f2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    89f6:	f012 0fff 	tst.w	r2, #255	; 0xff
    89fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    89fe:	d108      	bne.n	8a12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8a00:	f3c2 2407 	ubfx	r4, r2, #8, #8
    8a04:	b92c      	cbnz	r4, 8a12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8a06:	f3c2 4407 	ubfx	r4, r2, #16, #8
    8a0a:	b914      	cbnz	r4, 8a12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8a0c:	0e12      	lsrs	r2, r2, #24
    8a0e:	d100      	bne.n	8a12 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x48>
    8a10:	b34b      	cbz	r3, 8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a12:	7846      	ldrb	r6, [r0, #1]
    8a14:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    8a18:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    8a1c:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    8a20:	7d83      	ldrb	r3, [r0, #22]
    8a22:	2e22      	cmp	r6, #34	; 0x22
    8a24:	d11f      	bne.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a26:	b131      	cbz	r1, 8a36 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    8a28:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    8a2c:	d903      	bls.n	8a36 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x6c>
    8a2e:	f640 5107 	movw	r1, #3335	; 0xd07
    8a32:	428a      	cmp	r2, r1
    8a34:	d90b      	bls.n	8a4e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x84>
    8a36:	1f91      	subs	r1, r2, #6
    8a38:	f640 467a 	movw	r6, #3194	; 0xc7a
    8a3c:	42b1      	cmp	r1, r6
    8a3e:	d812      	bhi.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a40:	b18b      	cbz	r3, 8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a42:	2b08      	cmp	r3, #8
    8a44:	d80f      	bhi.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a46:	4293      	cmp	r3, r2
    8a48:	d20d      	bcs.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a4a:	4295      	cmp	r5, r2
    8a4c:	d80b      	bhi.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a4e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    8a52:	d208      	bcs.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a54:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    8a58:	f640 4176 	movw	r1, #3190	; 0xc76
    8a5c:	380a      	subs	r0, #10
    8a5e:	4288      	cmp	r0, r1
    8a60:	d801      	bhi.n	8a66 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x9c>
    8a62:	2001      	movs	r0, #1
    8a64:	bd70      	pop	{r4, r5, r6, pc}
    8a66:	2000      	movs	r0, #0
    8a68:	bd70      	pop	{r4, r5, r6, pc}

00008a6a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    8a6a:	b508      	push	{r3, lr}
    8a6c:	7a03      	ldrb	r3, [r0, #8]
    8a6e:	f88d 3000 	strb.w	r3, [sp]
    8a72:	9b00      	ldr	r3, [sp, #0]
    8a74:	9300      	str	r3, [sp, #0]
    8a76:	f89d 3000 	ldrb.w	r3, [sp]
    8a7a:	b123      	cbz	r3, 8a86 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    8a7c:	f240 21c2 	movw	r1, #706	; 0x2c2
    8a80:	2010      	movs	r0, #16
    8a82:	f7f7 fc63 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8a8a:	f7f8 bdb1 	b.w	15f0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

00008a8e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    8a8e:	f7f8 bddd 	b.w	164c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    8a92:	b510      	push	{r4, lr}
    8a94:	4604      	mov	r4, r0
    8a96:	2108      	movs	r1, #8
    8a98:	4620      	mov	r0, r4
    8a9a:	f7f7 fcc7 	bl	42c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8a9e:	6820      	ldr	r0, [r4, #0]
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d102      	bne.n	8aaa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    8aa4:	6860      	ldr	r0, [r4, #4]
    8aa6:	2800      	cmp	r0, #0
    8aa8:	d0f5      	beq.n	8a96 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    8aaa:	bd10      	pop	{r4, pc}

00008aac <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    8aac:	f000 0155 	and.w	r1, r0, #85	; 0x55
    8ab0:	2255      	movs	r2, #85	; 0x55
    8ab2:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    8ab6:	4408      	add	r0, r1
    8ab8:	f000 0133 	and.w	r1, r0, #51	; 0x33
    8abc:	2233      	movs	r2, #51	; 0x33
    8abe:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    8ac2:	4408      	add	r0, r1
    8ac4:	f000 010f 	and.w	r1, r0, #15
    8ac8:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    8acc:	4770      	bx	lr

00008ace <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    8ace:	b508      	push	{r3, lr}
    8ad0:	f000 f804 	bl	8adc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    8ad4:	466a      	mov	r2, sp
    8ad6:	f7f8 fea1 	bl	181c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    8ada:	bd08      	pop	{r3, pc}
    8adc:	b530      	push	{r4, r5, lr}
    8ade:	784c      	ldrb	r4, [r1, #1]
    8ae0:	4603      	mov	r3, r0
    8ae2:	7808      	ldrb	r0, [r1, #0]
    8ae4:	788d      	ldrb	r5, [r1, #2]
    8ae6:	0e22      	lsrs	r2, r4, #24
    8ae8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    8aec:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    8af0:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    8af4:	78cd      	ldrb	r5, [r1, #3]
    8af6:	790c      	ldrb	r4, [r1, #4]
    8af8:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    8afc:	4322      	orrs	r2, r4
    8afe:	7949      	ldrb	r1, [r1, #5]
    8b00:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    8b04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8b08:	4611      	mov	r1, r2
    8b0a:	2b01      	cmp	r3, #1
    8b0c:	d101      	bne.n	8b12 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    8b0e:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    8b12:	bd30      	pop	{r4, r5, pc}
    8b14:	2801      	cmp	r0, #1
    8b16:	d102      	bne.n	8b1e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    8b18:	7948      	ldrb	r0, [r1, #5]
    8b1a:	0980      	lsrs	r0, r0, #6
    8b1c:	d001      	beq.n	8b22 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    8b1e:	2000      	movs	r0, #0
    8b20:	4770      	bx	lr
    8b22:	2001      	movs	r0, #1
    8b24:	4770      	bx	lr
    8b26:	2801      	cmp	r0, #1
    8b28:	d106      	bne.n	8b38 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    8b2a:	7948      	ldrb	r0, [r1, #5]
    8b2c:	2101      	movs	r1, #1
    8b2e:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    8b32:	d101      	bne.n	8b38 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    8b34:	2001      	movs	r0, #1
    8b36:	4770      	bx	lr
    8b38:	2000      	movs	r0, #0
    8b3a:	4770      	bx	lr
    8b3c:	2802      	cmp	r0, #2
    8b3e:	d003      	beq.n	8b48 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    8b40:	2803      	cmp	r0, #3
    8b42:	d001      	beq.n	8b48 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    8b44:	2000      	movs	r0, #0
    8b46:	4770      	bx	lr
    8b48:	2001      	movs	r0, #1
    8b4a:	4770      	bx	lr

00008b4c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    8b4c:	b510      	push	{r4, lr}
    8b4e:	4604      	mov	r4, r0
    8b50:	7c00      	ldrb	r0, [r0, #16]
    8b52:	f7ff fff3 	bl	8b3c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    8b56:	b148      	cbz	r0, 8b6c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    8b58:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    8b5c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    8b60:	f7ff fe31 	bl	87c6 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    8b64:	2808      	cmp	r0, #8
    8b66:	d001      	beq.n	8b6c <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    8b68:	2001      	movs	r0, #1
    8b6a:	bd10      	pop	{r4, pc}
    8b6c:	7c20      	ldrb	r0, [r4, #16]
    8b6e:	b118      	cbz	r0, 8b78 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    8b70:	2802      	cmp	r0, #2
    8b72:	d001      	beq.n	8b78 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    8b74:	7de0      	ldrb	r0, [r4, #23]
    8b76:	bd10      	pop	{r4, pc}
    8b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8b7c:	2000      	movs	r0, #0
    8b7e:	f7f8 ba83 	b.w	1088 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

00008b82 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    8b82:	b508      	push	{r3, lr}
    8b84:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    8b88:	f88d 1000 	strb.w	r1, [sp]
    8b8c:	9900      	ldr	r1, [sp, #0]
    8b8e:	9100      	str	r1, [sp, #0]
    8b90:	f89d 1000 	ldrb.w	r1, [sp]
    8b94:	b941      	cbnz	r1, 8ba8 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    8b96:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8b9a:	f88d 1000 	strb.w	r1, [sp]
    8b9e:	9900      	ldr	r1, [sp, #0]
    8ba0:	9100      	str	r1, [sp, #0]
    8ba2:	f89d 1000 	ldrb.w	r1, [sp]
    8ba6:	b109      	cbz	r1, 8bac <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    8ba8:	2001      	movs	r0, #1
    8baa:	bd08      	pop	{r3, pc}
    8bac:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    8bb0:	f88d 0000 	strb.w	r0, [sp]
    8bb4:	9800      	ldr	r0, [sp, #0]
    8bb6:	9000      	str	r0, [sp, #0]
    8bb8:	f89d 0000 	ldrb.w	r0, [sp]
    8bbc:	2000      	movs	r0, #0
    8bbe:	bd08      	pop	{r3, pc}

00008bc0 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    8bc0:	20ff      	movs	r0, #255	; 0xff
    8bc2:	7008      	strb	r0, [r1, #0]
    8bc4:	6b48      	ldr	r0, [r1, #52]	; 0x34
    8bc6:	f7ff bd2b 	b.w	8620 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

00008bca <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    8bca:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8bcc:	460d      	mov	r5, r1
    8bce:	4604      	mov	r4, r0
    8bd0:	f44f 728c 	mov.w	r2, #280	; 0x118
    8bd4:	2100      	movs	r1, #0
    8bd6:	f001 fa97 	bl	a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8bda:	20ff      	movs	r0, #255	; 0xff
    8bdc:	7020      	strb	r0, [r4, #0]
    8bde:	207f      	movs	r0, #127	; 0x7f
    8be0:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    8be4:	2013      	movs	r0, #19
    8be6:	8060      	strh	r0, [r4, #2]
    8be8:	f242 7010 	movw	r0, #10000	; 0x2710
    8bec:	8460      	strh	r0, [r4, #34]	; 0x22
    8bee:	f7f8 f8bb 	bl	d68 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    8bf2:	4601      	mov	r1, r0
    8bf4:	6360      	str	r0, [r4, #52]	; 0x34
    8bf6:	2200      	movs	r2, #0
    8bf8:	4668      	mov	r0, sp
    8bfa:	f7ff fc77 	bl	84ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    8bfe:	2200      	movs	r2, #0
    8c00:	2101      	movs	r1, #1
    8c02:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8c04:	f7ff fcec 	bl	85e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    8c08:	2204      	movs	r2, #4
    8c0a:	4668      	mov	r0, sp
    8c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8c0e:	f7ff fc6d 	bl	84ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    8c12:	2200      	movs	r2, #0
    8c14:	4611      	mov	r1, r2
    8c16:	6b60      	ldr	r0, [r4, #52]	; 0x34
    8c18:	f7ff fce2 	bl	85e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    8c1c:	73a5      	strb	r5, [r4, #14]
    8c1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8c22:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    8c26:	f000 b950 	b.w	8eca <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

00008c2a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    8c2a:	7880      	ldrb	r0, [r0, #2]
    8c2c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8c30:	b108      	cbz	r0, 8c36 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    8c32:	2000      	movs	r0, #0
    8c34:	4770      	bx	lr
    8c36:	201f      	movs	r0, #31
    8c38:	4770      	bx	lr

00008c3a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    8c3a:	f7f9 bb4d 	b.w	22d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

00008c3e <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    8c3e:	6880      	ldr	r0, [r0, #8]
    8c40:	4770      	bx	lr

00008c42 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    8c42:	2001      	movs	r0, #1
    8c44:	4770      	bx	lr

00008c46 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    8c46:	b510      	push	{r4, lr}
    8c48:	4604      	mov	r4, r0
    8c4a:	3028      	adds	r0, #40	; 0x28
    8c4c:	f000 f8fd 	bl	8e4a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    8c50:	8861      	ldrh	r1, [r4, #2]
    8c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c56:	2228      	movs	r2, #40	; 0x28
    8c58:	f7f9 bc62 	b.w	2520 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

00008c5c <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    8c5c:	2200      	movs	r2, #0
    8c5e:	8602      	strh	r2, [r0, #48]	; 0x30
    8c60:	8843      	ldrh	r3, [r0, #2]
    8c62:	2b1d      	cmp	r3, #29
    8c64:	d001      	beq.n	8c6a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    8c66:	7341      	strb	r1, [r0, #13]
    8c68:	4770      	bx	lr
    8c6a:	7342      	strb	r2, [r0, #13]
    8c6c:	4770      	bx	lr

00008c6e <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    8c6e:	b510      	push	{r4, lr}
    8c70:	2400      	movs	r4, #0
    8c72:	6b40      	ldr	r0, [r0, #52]	; 0x34
    8c74:	f7ff fcac 	bl	85d0 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    8c78:	4384      	bics	r4, r0
    8c7a:	f084 0001 	eor.w	r0, r4, #1
    8c7e:	bd10      	pop	{r4, pc}

00008c80 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    8c80:	2000      	movs	r0, #0
    8c82:	4770      	bx	lr

00008c84 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    8c84:	7880      	ldrb	r0, [r0, #2]
    8c86:	f000 0001 	and.w	r0, r0, #1
    8c8a:	4770      	bx	lr

00008c8c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    8c8c:	7880      	ldrb	r0, [r0, #2]
    8c8e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    8c92:	4770      	bx	lr

00008c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    8c94:	2001      	movs	r0, #1
    8c96:	4770      	bx	lr

00008c98 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    8c98:	7880      	ldrb	r0, [r0, #2]
    8c9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8c9e:	4770      	bx	lr

00008ca0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    8ca0:	f990 000e 	ldrsb.w	r0, [r0, #14]
    8ca4:	4770      	bx	lr

00008ca6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    8ca6:	7800      	ldrb	r0, [r0, #0]
    8ca8:	28ff      	cmp	r0, #255	; 0xff
    8caa:	d001      	beq.n	8cb0 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    8cac:	2001      	movs	r0, #1
    8cae:	4770      	bx	lr
    8cb0:	2000      	movs	r0, #0
    8cb2:	4770      	bx	lr

00008cb4 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    8cb4:	f800 1f20 	strb.w	r1, [r0, #32]!
    8cb8:	7042      	strb	r2, [r0, #1]
    8cba:	4770      	bx	lr

00008cbc <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    8cbc:	680a      	ldr	r2, [r1, #0]
    8cbe:	f840 2f11 	str.w	r2, [r0, #17]!
    8cc2:	8889      	ldrh	r1, [r1, #4]
    8cc4:	8081      	strh	r1, [r0, #4]
    8cc6:	2101      	movs	r1, #1
    8cc8:	7181      	strb	r1, [r0, #6]
    8cca:	4770      	bx	lr

00008ccc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    8ccc:	7b00      	ldrb	r0, [r0, #12]
    8cce:	4770      	bx	lr

00008cd0 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    8cd0:	2001      	movs	r0, #1
    8cd2:	4770      	bx	lr

00008cd4 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    8cd4:	61c1      	str	r1, [r0, #28]
    8cd6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    8cda:	724a      	strb	r2, [r1, #9]
    8cdc:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    8ce0:	f8c1 200a 	str.w	r2, [r1, #10]
    8ce4:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    8ce8:	81c8      	strh	r0, [r1, #14]
    8cea:	4770      	bx	lr

00008cec <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    8cec:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    8cf0:	4770      	bx	lr

00008cf2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    8cf2:	7bc0      	ldrb	r0, [r0, #15]
    8cf4:	2800      	cmp	r0, #0
    8cf6:	d000      	beq.n	8cfa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    8cf8:	2001      	movs	r0, #1
    8cfa:	4770      	bx	lr
    8cfc:	7802      	ldrb	r2, [r0, #0]
    8cfe:	2320      	movs	r3, #32
    8d00:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8d04:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    8d08:	430a      	orrs	r2, r1
    8d0a:	7002      	strb	r2, [r0, #0]
    8d0c:	4770      	bx	lr
    8d0e:	2101      	movs	r1, #1
    8d10:	f7f8 bf32 	b.w	1b78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    8d14:	2101      	movs	r1, #1
    8d16:	f7f8 bf2f 	b.w	1b78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    8d1a:	b510      	push	{r4, lr}
    8d1c:	460c      	mov	r4, r1
    8d1e:	2100      	movs	r1, #0
    8d20:	7061      	strb	r1, [r4, #1]
    8d22:	2112      	movs	r1, #18
    8d24:	7021      	strb	r1, [r4, #0]
    8d26:	f100 0109 	add.w	r1, r0, #9
    8d2a:	2221      	movs	r2, #33	; 0x21
    8d2c:	1d20      	adds	r0, r4, #4
    8d2e:	f001 f971 	bl	a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d32:	2001      	movs	r0, #1
    8d34:	71e0      	strb	r0, [r4, #7]
    8d36:	7920      	ldrb	r0, [r4, #4]
    8d38:	2800      	cmp	r0, #0
    8d3a:	d015      	beq.n	8d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    8d3c:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    8d40:	2100      	movs	r1, #0
    8d42:	4620      	mov	r0, r4
    8d44:	f7f7 fde8 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8d48:	2800      	cmp	r0, #0
    8d4a:	d00d      	beq.n	8d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    8d4c:	8800      	ldrh	r0, [r0, #0]
    8d4e:	f7ff fcc6 	bl	86de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    8d52:	2100      	movs	r1, #0
    8d54:	4620      	mov	r0, r4
    8d56:	f7f7 fe81 	bl	a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    8d5a:	2800      	cmp	r0, #0
    8d5c:	d004      	beq.n	8d68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x76>
    8d5e:	f240 2151 	movw	r1, #593	; 0x251
    8d62:	202d      	movs	r0, #45	; 0x2d
    8d64:	f7f7 faf2 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d68:	bd10      	pop	{r4, pc}
    8d6a:	2200      	movs	r2, #0
    8d6c:	704a      	strb	r2, [r1, #1]
    8d6e:	221a      	movs	r2, #26
    8d70:	700a      	strb	r2, [r1, #0]
    8d72:	f850 2f09 	ldr.w	r2, [r0, #9]!
    8d76:	604a      	str	r2, [r1, #4]
    8d78:	6842      	ldr	r2, [r0, #4]
    8d7a:	608a      	str	r2, [r1, #8]
    8d7c:	7a00      	ldrb	r0, [r0, #8]
    8d7e:	7308      	strb	r0, [r1, #12]
    8d80:	4770      	bx	lr
    8d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d86:	4604      	mov	r4, r0
    8d88:	460f      	mov	r7, r1
    8d8a:	7e40      	ldrb	r0, [r0, #25]
    8d8c:	f7f8 f9a2 	bl	10d4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    8d90:	4606      	mov	r6, r0
    8d92:	7e20      	ldrb	r0, [r4, #24]
    8d94:	f104 0551 	add.w	r5, r4, #81	; 0x51
    8d98:	b120      	cbz	r0, 8da4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    8d9a:	b11e      	cbz	r6, 8da4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb2>
    8d9c:	7e60      	ldrb	r0, [r4, #25]
    8d9e:	f7f8 f98d 	bl	10bc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    8da2:	b1a0      	cbz	r0, 8dce <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xdc>
    8da4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    8da8:	2800      	cmp	r0, #0
    8daa:	d024      	beq.n	8df6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    8dac:	7ea0      	ldrb	r0, [r4, #26]
    8dae:	2800      	cmp	r0, #0
    8db0:	d021      	beq.n	8df6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x104>
    8db2:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    8db6:	4629      	mov	r1, r5
    8db8:	f7ff feb5 	bl	8b26 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    8dbc:	b1a8      	cbz	r0, 8dea <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf8>
    8dbe:	f7f8 f979 	bl	10b4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8dc2:	463a      	mov	r2, r7
    8dc4:	4629      	mov	r1, r5
    8dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8dca:	f7ff bcba 	b.w	8742 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8dce:	2001      	movs	r0, #1
    8dd0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    8dd4:	463a      	mov	r2, r7
    8dd6:	4629      	mov	r1, r5
    8dd8:	4630      	mov	r0, r6
    8dda:	f7ff fcb2 	bl	8742 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    8dde:	7e61      	ldrb	r1, [r4, #25]
    8de0:	4628      	mov	r0, r5
    8de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8de6:	f7f8 b981 	b.w	10ec <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    8dea:	4639      	mov	r1, r7
    8dec:	4628      	mov	r0, r5
    8dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8df2:	f7ff bc95 	b.w	8720 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dfa:	b510      	push	{r4, lr}
    8dfc:	4604      	mov	r4, r0
    8dfe:	4608      	mov	r0, r1
    8e00:	f7fa fbc6 	bl	3590 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    8e04:	7921      	ldrb	r1, [r4, #4]
    8e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e0a:	2025      	movs	r0, #37	; 0x25
    8e0c:	f7fa bb96 	b.w	353c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    8e10:	b570      	push	{r4, r5, r6, lr}
    8e12:	4614      	mov	r4, r2
    8e14:	461d      	mov	r5, r3
    8e16:	4606      	mov	r6, r0
    8e18:	f000 ff6a 	bl	9cf0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    8e1c:	1900      	adds	r0, r0, r4
    8e1e:	4169      	adcs	r1, r5
    8e20:	e9c6 0100 	strd	r0, r1, [r6]
    8e24:	bd70      	pop	{r4, r5, r6, pc}

00008e26 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    8e26:	b570      	push	{r4, r5, r6, lr}
    8e28:	7001      	strb	r1, [r0, #0]
    8e2a:	7042      	strb	r2, [r0, #1]
    8e2c:	4614      	mov	r4, r2
    8e2e:	460d      	mov	r5, r1
    8e30:	7880      	ldrb	r0, [r0, #2]
    8e32:	f000 f87f 	bl	8f34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8e36:	fb10 f005 	smulbb	r0, r0, r5
    8e3a:	4360      	muls	r0, r4
    8e3c:	28ff      	cmp	r0, #255	; 0xff
    8e3e:	d303      	bcc.n	8e48 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    8e40:	215c      	movs	r1, #92	; 0x5c
    8e42:	202e      	movs	r0, #46	; 0x2e
    8e44:	f7f7 fa82 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e48:	bd70      	pop	{r4, r5, r6, pc}

00008e4a <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    8e4a:	b510      	push	{r4, lr}
    8e4c:	4604      	mov	r4, r0
    8e4e:	7880      	ldrb	r0, [r0, #2]
    8e50:	f000 f870 	bl	8f34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8e54:	7861      	ldrb	r1, [r4, #1]
    8e56:	7822      	ldrb	r2, [r4, #0]
    8e58:	fb11 f102 	smulbb	r1, r1, r2
    8e5c:	4348      	muls	r0, r1
    8e5e:	b2c0      	uxtb	r0, r0
    8e60:	bd10      	pop	{r4, pc}

00008e62 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    8e62:	b510      	push	{r4, lr}
    8e64:	4604      	mov	r4, r0
    8e66:	f000 f84d 	bl	8f04 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    8e6a:	7961      	ldrb	r1, [r4, #5]
    8e6c:	1c49      	adds	r1, r1, #1
    8e6e:	b2c9      	uxtb	r1, r1
    8e70:	7161      	strb	r1, [r4, #5]
    8e72:	7862      	ldrb	r2, [r4, #1]
    8e74:	4291      	cmp	r1, r2
    8e76:	d10b      	bne.n	8e90 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    8e78:	2200      	movs	r2, #0
    8e7a:	7162      	strb	r2, [r4, #5]
    8e7c:	78e1      	ldrb	r1, [r4, #3]
    8e7e:	4301      	orrs	r1, r0
    8e80:	70e1      	strb	r1, [r4, #3]
    8e82:	78a3      	ldrb	r3, [r4, #2]
    8e84:	4299      	cmp	r1, r3
    8e86:	d103      	bne.n	8e90 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    8e88:	70e2      	strb	r2, [r4, #3]
    8e8a:	7921      	ldrb	r1, [r4, #4]
    8e8c:	1c49      	adds	r1, r1, #1
    8e8e:	7121      	strb	r1, [r4, #4]
    8e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e94:	f000 b825 	b.w	8ee2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

00008e98 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    8e98:	7081      	strb	r1, [r0, #2]
    8e9a:	4770      	bx	lr

00008e9c <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    8e9c:	b570      	push	{r4, r5, r6, lr}
    8e9e:	4604      	mov	r4, r0
    8ea0:	7880      	ldrb	r0, [r0, #2]
    8ea2:	f000 f847 	bl	8f34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8ea6:	7861      	ldrb	r1, [r4, #1]
    8ea8:	fb11 f500 	smulbb	r5, r1, r0
    8eac:	78e0      	ldrb	r0, [r4, #3]
    8eae:	f000 f841 	bl	8f34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    8eb2:	7861      	ldrb	r1, [r4, #1]
    8eb4:	7962      	ldrb	r2, [r4, #5]
    8eb6:	fb10 2001 	smlabb	r0, r0, r1, r2
    8eba:	7821      	ldrb	r1, [r4, #0]
    8ebc:	7922      	ldrb	r2, [r4, #4]
    8ebe:	1a89      	subs	r1, r1, r2
    8ec0:	fb11 f105 	smulbb	r1, r1, r5
    8ec4:	1a08      	subs	r0, r1, r0
    8ec6:	b2c0      	uxtb	r0, r0
    8ec8:	bd70      	pop	{r4, r5, r6, pc}

00008eca <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    8eca:	2100      	movs	r1, #0
    8ecc:	6001      	str	r1, [r0, #0]
    8ece:	8081      	strh	r1, [r0, #4]
    8ed0:	2101      	movs	r1, #1
    8ed2:	7041      	strb	r1, [r0, #1]
    8ed4:	7001      	strb	r1, [r0, #0]
    8ed6:	4770      	bx	lr

00008ed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    8ed8:	2100      	movs	r1, #0
    8eda:	70c1      	strb	r1, [r0, #3]
    8edc:	7141      	strb	r1, [r0, #5]
    8ede:	7101      	strb	r1, [r0, #4]
    8ee0:	4770      	bx	lr
    8ee2:	b510      	push	{r4, lr}
    8ee4:	2801      	cmp	r0, #1
    8ee6:	d007      	beq.n	8ef8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    8ee8:	2802      	cmp	r0, #2
    8eea:	d007      	beq.n	8efc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    8eec:	2804      	cmp	r0, #4
    8eee:	d007      	beq.n	8f00 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    8ef0:	2139      	movs	r1, #57	; 0x39
    8ef2:	202e      	movs	r0, #46	; 0x2e
    8ef4:	f7f7 fa2a 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ef8:	2025      	movs	r0, #37	; 0x25
    8efa:	bd10      	pop	{r4, pc}
    8efc:	2026      	movs	r0, #38	; 0x26
    8efe:	bd10      	pop	{r4, pc}
    8f00:	2027      	movs	r0, #39	; 0x27
    8f02:	bd10      	pop	{r4, pc}
    8f04:	4601      	mov	r1, r0
    8f06:	2000      	movs	r0, #0
    8f08:	788a      	ldrb	r2, [r1, #2]
    8f0a:	07d3      	lsls	r3, r2, #31
    8f0c:	d002      	beq.n	8f14 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    8f0e:	78cb      	ldrb	r3, [r1, #3]
    8f10:	07db      	lsls	r3, r3, #31
    8f12:	d006      	beq.n	8f22 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    8f14:	0793      	lsls	r3, r2, #30
    8f16:	d506      	bpl.n	8f26 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    8f18:	78cb      	ldrb	r3, [r1, #3]
    8f1a:	079b      	lsls	r3, r3, #30
    8f1c:	d403      	bmi.n	8f26 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    8f1e:	2002      	movs	r0, #2
    8f20:	4770      	bx	lr
    8f22:	2001      	movs	r0, #1
    8f24:	4770      	bx	lr
    8f26:	0752      	lsls	r2, r2, #29
    8f28:	d5fc      	bpl.n	8f24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    8f2a:	78c9      	ldrb	r1, [r1, #3]
    8f2c:	0749      	lsls	r1, r1, #29
    8f2e:	d4f9      	bmi.n	8f24 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    8f30:	2004      	movs	r0, #4
    8f32:	4770      	bx	lr
    8f34:	f3c0 0180 	ubfx	r1, r0, #2, #1
    8f38:	f3c0 0240 	ubfx	r2, r0, #1, #1
    8f3c:	4411      	add	r1, r2
    8f3e:	f000 0001 	and.w	r0, r0, #1
    8f42:	4408      	add	r0, r1
    8f44:	4770      	bx	lr

00008f46 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    8f46:	f240 315a 	movw	r1, #858	; 0x35a
    8f4a:	4348      	muls	r0, r1
    8f4c:	4770      	bx	lr

00008f4e <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    8f4e:	f240 20ef 	movw	r0, #751	; 0x2ef
    8f52:	4770      	bx	lr
    8f54:	041c020e 	.word	0x041c020e
    8f58:	0c600630 	.word	0x0c600630
    8f5c:	06b4035a 	.word	0x06b4035a
    8f60:	0bf505c5 	.word	0x0bf505c5
    8f64:	01a31225 	.word	0x01a31225
    8f68:	05bf03b1 	.word	0x05bf03b1
    8f6c:	064902ef 	.word	0x064902ef
    8f70:	09a3      	.short	0x09a3

00008f72 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    8f72:	b510      	push	{r4, lr}
    8f74:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    8f78:	b109      	cbz	r1, 8f7e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    8f7a:	2000      	movs	r0, #0
    8f7c:	bd10      	pop	{r4, pc}
    8f7e:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    8f82:	b131      	cbz	r1, 8f92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    8f84:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    8f88:	428a      	cmp	r2, r1
    8f8a:	d902      	bls.n	8f92 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    8f8c:	f7f8 fddc 	bl	1b48 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    8f90:	e7f3      	b.n	8f7a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    8f92:	2001      	movs	r0, #1
    8f94:	bd10      	pop	{r4, pc}

00008f96 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    8f96:	b510      	push	{r4, lr}
    8f98:	b131      	cbz	r1, 8fa8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    8f9a:	2901      	cmp	r1, #1
    8f9c:	d008      	beq.n	8fb0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    8f9e:	f240 71d3 	movw	r1, #2003	; 0x7d3
    8fa2:	2030      	movs	r0, #48	; 0x30
    8fa4:	f7f7 f9d2 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8fac:	f000 b8e5 	b.w	917a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x16a>
    8fb0:	2100      	movs	r1, #0
    8fb2:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    8fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8fba:	f000 b8ae 	b.w	911a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>

00008fbe <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    8fbe:	b510      	push	{r4, lr}
    8fc0:	4604      	mov	r4, r0
    8fc2:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    8fc6:	2800      	cmp	r0, #0
    8fc8:	d019      	beq.n	8ffe <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    8fca:	2001      	movs	r0, #1
    8fcc:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    8fd0:	4601      	mov	r1, r0
    8fd2:	4620      	mov	r0, r4
    8fd4:	f7ff fe8a 	bl	8cec <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8fd8:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    8fdc:	b170      	cbz	r0, 8ffc <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    8fde:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    8fe2:	f7fc fd0d 	bl	5a00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8fe6:	7820      	ldrb	r0, [r4, #0]
    8fe8:	f7fc fe74 	bl	5cd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8fec:	f814 09c8 	ldrb.w	r0, [r4], #-200
    8ff0:	f7fc fe4e 	bl	5c90 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8ff4:	b120      	cbz	r0, 9000 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    8ff6:	2000      	movs	r0, #0
    8ff8:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    8ffc:	2000      	movs	r0, #0
    8ffe:	bd10      	pop	{r4, pc}
    9000:	f240 210b 	movw	r1, #523	; 0x20b
    9004:	2030      	movs	r0, #48	; 0x30
    9006:	f7f7 f9a1 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000900a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    900a:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    900e:	4770      	bx	lr

00009010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    9010:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    9014:	4770      	bx	lr
    9016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    901a:	4604      	mov	r4, r0
    901c:	f000 f886 	bl	912c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    9020:	2700      	movs	r7, #0
    9022:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    9026:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    902a:	2601      	movs	r6, #1
    902c:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    9030:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    9032:	463d      	mov	r5, r7
    9034:	b130      	cbz	r0, 9044 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x34>
    9036:	f000 fe5b 	bl	9cf0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    903a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    903c:	fbb0 f2f1 	udiv	r2, r0, r1
    9040:	fb01 0512 	mls	r5, r1, r2, r0
    9044:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    9048:	2100      	movs	r1, #0
    904a:	4680      	mov	r8, r0
    904c:	f7ff fbed 	bl	882a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9050:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    9054:	1949      	adds	r1, r1, r5
    9056:	4178      	adcs	r0, r7
    9058:	e9c4 1000 	strd	r1, r0, [r4]
    905c:	8920      	ldrh	r0, [r4, #8]
    905e:	3cf8      	subs	r4, #248	; 0xf8
    9060:	1c40      	adds	r0, r0, #1
    9062:	280a      	cmp	r0, #10
    9064:	d201      	bcs.n	906a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x5a>
    9066:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    906a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    906e:	b138      	cbz	r0, 9080 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    9070:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    9074:	1c40      	adds	r0, r0, #1
    9076:	280a      	cmp	r0, #10
    9078:	d302      	bcc.n	9080 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x70>
    907a:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    907e:	e002      	b.n	9086 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x76>
    9080:	2002      	movs	r0, #2
    9082:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    9086:	4620      	mov	r0, r4
    9088:	f000 f823 	bl	90d2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    908c:	b120      	cbz	r0, 9098 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x88>
    908e:	4620      	mov	r0, r4
    9090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9094:	f000 b80e 	b.w	90b4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    9098:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    909c:	4641      	mov	r1, r8
    909e:	f000 f843 	bl	9128 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    90a2:	2800      	cmp	r0, #0
    90a4:	d104      	bne.n	90b0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa0>
    90a6:	f240 61e7 	movw	r1, #1767	; 0x6e7
    90aa:	2030      	movs	r0, #48	; 0x30
    90ac:	f7f7 f94e 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90b4:	b510      	push	{r4, lr}
    90b6:	4604      	mov	r4, r0
    90b8:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    90bc:	f7fc fde8 	bl	5c90 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    90c0:	2000      	movs	r0, #0
    90c2:	7620      	strb	r0, [r4, #24]
    90c4:	bd10      	pop	{r4, pc}
    90c6:	b510      	push	{r4, lr}
    90c8:	f7ff fdbd 	bl	8c46 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    90cc:	f200 1015 	addw	r0, r0, #277	; 0x115
    90d0:	bd10      	pop	{r4, pc}
    90d2:	b570      	push	{r4, r5, r6, lr}
    90d4:	4605      	mov	r5, r0
    90d6:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    90da:	b108      	cbz	r0, 90e0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xd0>
    90dc:	2001      	movs	r0, #1
    90de:	bd70      	pop	{r4, r5, r6, pc}
    90e0:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    90e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    90e8:	4050      	eors	r0, r2
    90ea:	ea70 0101 	orns	r1, r0, r1
    90ee:	d012      	beq.n	9116 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    90f0:	2400      	movs	r4, #0
    90f2:	4621      	mov	r1, r4
    90f4:	4628      	mov	r0, r5
    90f6:	f7ff ffe6 	bl	90c6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    90fa:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    90fe:	1840      	adds	r0, r0, r1
    9100:	4154      	adcs	r4, r2
    9102:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    9106:	3df8      	subs	r5, #248	; 0xf8
    9108:	1a10      	subs	r0, r2, r0
    910a:	41a1      	sbcs	r1, r4
    910c:	d503      	bpl.n	9116 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x106>
    910e:	4628      	mov	r0, r5
    9110:	f7f8 fd1a 	bl	1b48 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    9114:	e7e2      	b.n	90dc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xcc>
    9116:	2000      	movs	r0, #0
    9118:	bd70      	pop	{r4, r5, r6, pc}
    911a:	b510      	push	{r4, lr}
    911c:	f7fa f872 	bl	3204 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9124:	f7fc bf12 	b.w	5f4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9128:	f7fc b80c 	b.w	5144 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    912c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    912e:	4604      	mov	r4, r0
    9130:	f7ff fdb0 	bl	8c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9134:	b1f8      	cbz	r0, 9176 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x166>
    9136:	4620      	mov	r0, r4
    9138:	f7ff fda4 	bl	8c84 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    913c:	b918      	cbnz	r0, 9146 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x136>
    913e:	4620      	mov	r0, r4
    9140:	f7ff fdaa 	bl	8c98 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9144:	b140      	cbz	r0, 9158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x148>
    9146:	245a      	movs	r4, #90	; 0x5a
    9148:	4668      	mov	r0, sp
    914a:	f7fe fb59 	bl	7800 <mpsl_fem_pa_is_configured>
    914e:	f89d 0000 	ldrb.w	r0, [sp]
    9152:	b118      	cbz	r0, 915c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14c>
    9154:	2501      	movs	r5, #1
    9156:	e002      	b.n	915e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x14e>
    9158:	2450      	movs	r4, #80	; 0x50
    915a:	e7f5      	b.n	9148 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x138>
    915c:	2500      	movs	r5, #0
    915e:	a801      	add	r0, sp, #4
    9160:	f7fe fb36 	bl	77d0 <mpsl_fem_lna_is_configured>
    9164:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9168:	b100      	cbz	r0, 916c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x15c>
    916a:	2001      	movs	r0, #1
    916c:	4305      	orrs	r5, r0
    916e:	d000      	beq.n	9172 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x162>
    9170:	340a      	adds	r4, #10
    9172:	4620      	mov	r0, r4
    9174:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9176:	2061      	movs	r0, #97	; 0x61
    9178:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    917a:	b570      	push	{r4, r5, r6, lr}
    917c:	4604      	mov	r4, r0
    917e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9180:	2500      	movs	r5, #0
    9182:	b130      	cbz	r0, 9192 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x182>
    9184:	f7f8 faba 	bl	16fc <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    9188:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    918a:	fbb0 f2f1 	udiv	r2, r0, r1
    918e:	fb01 0512 	mls	r5, r1, r2, r0
    9192:	4620      	mov	r0, r4
    9194:	f7ff fd53 	bl	8c3e <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    9198:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    919c:	4428      	add	r0, r5
    919e:	34e8      	adds	r4, #232	; 0xe8
    91a0:	2500      	movs	r5, #0
    91a2:	1882      	adds	r2, r0, r2
    91a4:	eb45 0001 	adc.w	r0, r5, r1
    91a8:	e9c4 2004 	strd	r2, r0, [r4, #16]
    91ac:	f804 5b0b 	strb.w	r5, [r4], #11
    91b0:	2001      	movs	r0, #1
    91b2:	f804 0901 	strb.w	r0, [r4], #-1
    91b6:	2002      	movs	r0, #2
    91b8:	f804 09f2 	strb.w	r0, [r4], #-242
    91bc:	4620      	mov	r0, r4
    91be:	f7ff ffb5 	bl	912c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x11c>
    91c2:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    91c6:	4620      	mov	r0, r4
    91c8:	f7ff ff83 	bl	90d2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xc2>
    91cc:	b930      	cbnz	r0, 91dc <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1cc>
    91ce:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    91d2:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    91d6:	f7ff ffa7 	bl	9128 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x118>
    91da:	b128      	cbz	r0, 91e8 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x1d8>
    91dc:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    91e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    91e4:	f7ff bf99 	b.w	911a <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x10a>
    91e8:	f240 712d 	movw	r1, #1837	; 0x72d
    91ec:	2030      	movs	r0, #48	; 0x30
    91ee:	f7f7 f8ad 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91f2:	b510      	push	{r4, lr}
    91f4:	4604      	mov	r4, r0
    91f6:	2000      	movs	r0, #0
    91f8:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    91fc:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    9200:	f7fc fd46 	bl	5c90 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9204:	2020      	movs	r0, #32
    9206:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    920a:	bd10      	pop	{r4, pc}
    920c:	b510      	push	{r4, lr}
    920e:	b140      	cbz	r0, 9222 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x212>
    9210:	2909      	cmp	r1, #9
    9212:	d22f      	bcs.n	9274 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x264>
    9214:	e8df f001 	tbb	[pc, r1]
    9218:	1e1e1607 	.word	0x1e1e1607
    921c:	26222e1a 	.word	0x26222e1a
    9220:	002a      	.short	0x002a
    9222:	21cd      	movs	r1, #205	; 0xcd
    9224:	e023      	b.n	926e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9226:	4604      	mov	r4, r0
    9228:	f7f8 fc66 	bl	1af8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    922c:	b110      	cbz	r0, 9234 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x224>
    922e:	f240 2187 	movw	r1, #647	; 0x287
    9232:	e01c      	b.n	926e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9234:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    9238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    923c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    9240:	f7fc bf60 	b.w	6104 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9248:	f000 b816 	b.w	9278 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x268>
    924c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9250:	f7fa b9a4 	b.w	359c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    9254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9258:	f7ff bedd 	b.w	9016 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x6>
    925c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9260:	f7ff bceb 	b.w	8c3a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    9264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9268:	f7ff bf24 	b.w	90b4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xa4>
    926c:	21ed      	movs	r1, #237	; 0xed
    926e:	2030      	movs	r0, #48	; 0x30
    9270:	f7f7 f86c 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9274:	21f1      	movs	r1, #241	; 0xf1
    9276:	e7fa      	b.n	926e <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x25e>
    9278:	b570      	push	{r4, r5, r6, lr}
    927a:	4605      	mov	r5, r0
    927c:	f7ff fd06 	bl	8c8c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9280:	b9c8      	cbnz	r0, 92b6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a6>
    9282:	2100      	movs	r1, #0
    9284:	4628      	mov	r0, r5
    9286:	f7ff ff1e 	bl	90c6 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0xb6>
    928a:	4604      	mov	r4, r0
    928c:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    9290:	42a0      	cmp	r0, r4
    9292:	d20e      	bcs.n	92b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    9294:	1a20      	subs	r0, r4, r0
    9296:	2867      	cmp	r0, #103	; 0x67
    9298:	d200      	bcs.n	929c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x28c>
    929a:	2067      	movs	r0, #103	; 0x67
    929c:	2103      	movs	r1, #3
    929e:	f7fb fd7b 	bl	4d98 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    92a2:	b130      	cbz	r0, 92b2 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2a2>
    92a4:	4628      	mov	r0, r5
    92a6:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    92aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92ae:	f7ff bcc4 	b.w	8c3a <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    92b2:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    92b6:	4628      	mov	r0, r5
    92b8:	f7f8 fc3a 	bl	1b30 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    92bc:	2800      	cmp	r0, #0
    92be:	d004      	beq.n	92ca <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY+0x2ba>
    92c0:	f240 21bd 	movw	r1, #701	; 0x2bd
    92c4:	2030      	movs	r0, #48	; 0x30
    92c6:	f7f7 f841 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92ca:	bd70      	pop	{r4, r5, r6, pc}

000092cc <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    92cc:	b510      	push	{r4, lr}
    92ce:	460c      	mov	r4, r1
    92d0:	f7f7 fc44 	bl	b5c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    92d4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    92d8:	2820      	cmp	r0, #32
    92da:	d00c      	beq.n	92f6 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    92dc:	f7fc fcfa 	bl	5cd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    92e0:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    92e4:	f7fc fcd4 	bl	5c90 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    92e8:	2800      	cmp	r0, #0
    92ea:	d104      	bne.n	92f6 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    92ec:	f640 4129 	movw	r1, #3113	; 0xc29
    92f0:	2031      	movs	r0, #49	; 0x31
    92f2:	f7f7 f82b 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92f6:	bd10      	pop	{r4, pc}

000092f8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    92f8:	207f      	movs	r0, #127	; 0x7f
    92fa:	f000 b83a 	b.w	9372 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

000092fe <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    92fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9302:	f000 b836 	b.w	9372 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6c>

00009306 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    9306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    930a:	460d      	mov	r5, r1
    930c:	4606      	mov	r6, r0
    930e:	f7ff fff3 	bl	92f8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    9312:	4607      	mov	r7, r0
    9314:	f7ff fff3 	bl	92fe <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    9318:	2400      	movs	r4, #0
    931a:	4285      	cmp	r5, r0
    931c:	d100      	bne.n	9320 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    931e:	2401      	movs	r4, #1
    9320:	42bd      	cmp	r5, r7
    9322:	d101      	bne.n	9328 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    9324:	f044 0402 	orr.w	r4, r4, #2
    9328:	f000 f813 	bl	9352 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    932c:	2200      	movs	r2, #0
    932e:	4601      	mov	r1, r0
    9330:	2301      	movs	r3, #1
    9332:	fa03 f002 	lsl.w	r0, r3, r2
    9336:	4208      	tst	r0, r1
    9338:	d005      	beq.n	9346 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    933a:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    933e:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    9342:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    9346:	1c52      	adds	r2, r2, #1
    9348:	b2d2      	uxtb	r2, r2
    934a:	2a02      	cmp	r2, #2
    934c:	d3f1      	bcc.n	9332 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9352:	b510      	push	{r4, lr}
    9354:	f7f9 fcc2 	bl	2cdc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    935c:	f000 b800 	b.w	9360 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x5a>
    9360:	0a00      	lsrs	r0, r0, #8
    9362:	2201      	movs	r2, #1
    9364:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    9368:	07c0      	lsls	r0, r0, #31
    936a:	d000      	beq.n	936e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x68>
    936c:	2203      	movs	r2, #3
    936e:	4610      	mov	r0, r2
    9370:	4770      	bx	lr
    9372:	b508      	push	{r3, lr}
    9374:	2301      	movs	r3, #1
    9376:	f640 1288 	movw	r2, #2440	; 0x988
    937a:	4669      	mov	r1, sp
    937c:	f7fe fa46 	bl	780c <mpsl_fem_tx_power_split>
    9380:	bd08      	pop	{r3, pc}
    9382:	b118      	cbz	r0, 938c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9384:	2802      	cmp	r0, #2
    9386:	d001      	beq.n	938c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x86>
    9388:	2001      	movs	r0, #1
    938a:	4770      	bx	lr
    938c:	2000      	movs	r0, #0
    938e:	4770      	bx	lr

00009390 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    9390:	b510      	push	{r4, lr}
    9392:	4604      	mov	r4, r0
    9394:	f7f9 fc28 	bl	2be8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9398:	b108      	cbz	r0, 939e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    939a:	200c      	movs	r0, #12
    939c:	bd10      	pop	{r4, pc}
    939e:	7820      	ldrb	r0, [r4, #0]
    93a0:	b118      	cbz	r0, 93aa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    93a2:	2801      	cmp	r0, #1
    93a4:	d001      	beq.n	93aa <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    93a6:	2012      	movs	r0, #18
    93a8:	bd10      	pop	{r4, pc}
    93aa:	f7ff ffea 	bl	9382 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    93ae:	1c61      	adds	r1, r4, #1
    93b0:	f7f8 f9ca 	bl	1748 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    93b4:	b108      	cbz	r0, 93ba <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    93b6:	2000      	movs	r0, #0
    93b8:	bd10      	pop	{r4, pc}
    93ba:	2007      	movs	r0, #7
    93bc:	bd10      	pop	{r4, pc}

000093be <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    93be:	b510      	push	{r4, lr}
    93c0:	f7f9 fc12 	bl	2be8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    93c4:	b108      	cbz	r0, 93ca <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    93c6:	200c      	movs	r0, #12
    93c8:	bd10      	pop	{r4, pc}
    93ca:	f7f8 fa1b 	bl	1804 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    93ce:	2000      	movs	r0, #0
    93d0:	f7f7 fee8 	bl	11a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    93d4:	2000      	movs	r0, #0
    93d6:	bd10      	pop	{r4, pc}

000093d8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    93d8:	b510      	push	{r4, lr}
    93da:	460b      	mov	r3, r1
    93dc:	2201      	movs	r2, #1
    93de:	f100 0110 	add.w	r1, r0, #16
    93e2:	f7ff f9fa 	bl	87da <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    93e6:	2000      	movs	r0, #0
    93e8:	bd10      	pop	{r4, pc}

000093ea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    93ea:	b510      	push	{r4, lr}
    93ec:	8800      	ldrh	r0, [r0, #0]
    93ee:	2100      	movs	r1, #0
    93f0:	f7f7 fa92 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    93f4:	b118      	cbz	r0, 93fe <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    93f6:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    93fa:	b111      	cbz	r1, 9402 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    93fc:	e007      	b.n	940e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    93fe:	2002      	movs	r0, #2
    9400:	bd10      	pop	{r4, pc}
    9402:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    9406:	2915      	cmp	r1, #21
    9408:	d003      	beq.n	9412 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    940a:	2916      	cmp	r1, #22
    940c:	d001      	beq.n	9412 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    940e:	200c      	movs	r0, #12
    9410:	bd10      	pop	{r4, pc}
    9412:	2102      	movs	r1, #2
    9414:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    9418:	2000      	movs	r0, #0
    941a:	bd10      	pop	{r4, pc}

0000941c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    941c:	b510      	push	{r4, lr}
    941e:	2108      	movs	r1, #8
    9420:	f7f7 f804 	bl	42c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9424:	2000      	movs	r0, #0
    9426:	bd10      	pop	{r4, pc}

00009428 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    9428:	b510      	push	{r4, lr}
    942a:	4604      	mov	r4, r0
    942c:	f7f9 fb3e 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9430:	f7ff fc36 	bl	8ca0 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    9434:	f7f7 ffb8 	bl	13a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9438:	7020      	strb	r0, [r4, #0]
    943a:	2000      	movs	r0, #0
    943c:	bd10      	pop	{r4, pc}

0000943e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    943e:	b510      	push	{r4, lr}
    9440:	4604      	mov	r4, r0
    9442:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    9446:	f000 fb41 	bl	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    944a:	f7f7 ffad 	bl	13a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    944e:	7020      	strb	r0, [r4, #0]
    9450:	f000 fb13 	bl	9a7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c8>
    9454:	f7f7 ffa8 	bl	13a8 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    9458:	7060      	strb	r0, [r4, #1]
    945a:	2000      	movs	r0, #0
    945c:	bd10      	pop	{r4, pc}

0000945e <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    945e:	b510      	push	{r4, lr}
    9460:	4604      	mov	r4, r0
    9462:	f7f8 f9d5 	bl	1810 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    9466:	7020      	strb	r0, [r4, #0]
    9468:	2000      	movs	r0, #0
    946a:	bd10      	pop	{r4, pc}

0000946c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    946c:	b510      	push	{r4, lr}
    946e:	4604      	mov	r4, r0
    9470:	f7f9 fbba 	bl	2be8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    9474:	b108      	cbz	r0, 947a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    9476:	200c      	movs	r0, #12
    9478:	bd10      	pop	{r4, pc}
    947a:	7820      	ldrb	r0, [r4, #0]
    947c:	b108      	cbz	r0, 9482 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    947e:	2801      	cmp	r0, #1
    9480:	d107      	bne.n	9492 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    9482:	f7ff ff7e 	bl	9382 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x7c>
    9486:	1c61      	adds	r1, r4, #1
    9488:	f7f8 f99c 	bl	17c4 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    948c:	b108      	cbz	r0, 9492 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    948e:	2000      	movs	r0, #0
    9490:	bd10      	pop	{r4, pc}
    9492:	2012      	movs	r0, #18
    9494:	bd10      	pop	{r4, pc}

00009496 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    9496:	b51c      	push	{r2, r3, r4, lr}
    9498:	4604      	mov	r4, r0
    949a:	f7f9 fb07 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    949e:	2000      	movs	r0, #0
    94a0:	f88d 0002 	strb.w	r0, [sp, #2]
    94a4:	2103      	movs	r1, #3
    94a6:	f88d 1001 	strb.w	r1, [sp, #1]
    94aa:	f814 1b01 	ldrb.w	r1, [r4], #1
    94ae:	f88d 1003 	strb.w	r1, [sp, #3]
    94b2:	f88d 0000 	strb.w	r0, [sp]
    94b6:	4668      	mov	r0, sp
    94b8:	9401      	str	r4, [sp, #4]
    94ba:	f000 f92c 	bl	9716 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    94be:	bd1c      	pop	{r2, r3, r4, pc}

000094c0 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    94c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    94c2:	4605      	mov	r5, r0
    94c4:	f7f9 faf2 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    94c8:	4606      	mov	r6, r0
    94ca:	7828      	ldrb	r0, [r5, #0]
    94cc:	2400      	movs	r4, #0
    94ce:	b160      	cbz	r0, 94ea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    94d0:	f88d 4000 	strb.w	r4, [sp]
    94d4:	2001      	movs	r0, #1
    94d6:	f10d 0101 	add.w	r1, sp, #1
    94da:	f7f7 fda9 	bl	1030 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    94de:	b120      	cbz	r0, 94ea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    94e0:	4668      	mov	r0, sp
    94e2:	f000 f897 	bl	9614 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    94e6:	2800      	cmp	r0, #0
    94e8:	d112      	bne.n	9510 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    94ea:	f88d 400c 	strb.w	r4, [sp, #12]
    94ee:	4630      	mov	r0, r6
    94f0:	f7ff fbcc 	bl	8c8c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    94f4:	b118      	cbz	r0, 94fe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    94f6:	2080      	movs	r0, #128	; 0x80
    94f8:	f8ad 000d 	strh.w	r0, [sp, #13]
    94fc:	e001      	b.n	9502 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    94fe:	f8ad 400d 	strh.w	r4, [sp, #13]
    9502:	f88d 400f 	strb.w	r4, [sp, #15]
    9506:	7828      	ldrb	r0, [r5, #0]
    9508:	2801      	cmp	r0, #1
    950a:	d003      	beq.n	9514 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    950c:	b138      	cbz	r0, 951e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    950e:	2012      	movs	r0, #18
    9510:	b004      	add	sp, #16
    9512:	bd70      	pop	{r4, r5, r6, pc}
    9514:	a903      	add	r1, sp, #12
    9516:	4630      	mov	r0, r6
    9518:	f7f9 fae4 	bl	2ae4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    951c:	e7f8      	b.n	9510 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    951e:	4630      	mov	r0, r6
    9520:	f000 faae 	bl	9a80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9524:	e7f4      	b.n	9510 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

00009526 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    9526:	b530      	push	{r4, r5, lr}
    9528:	b08b      	sub	sp, #44	; 0x2c
    952a:	4604      	mov	r4, r0
    952c:	f7f9 fabe 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9530:	4602      	mov	r2, r0
    9532:	7920      	ldrb	r0, [r4, #4]
    9534:	2804      	cmp	r0, #4
    9536:	d803      	bhi.n	9540 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    9538:	8860      	ldrh	r0, [r4, #2]
    953a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    953e:	d902      	bls.n	9546 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    9540:	2012      	movs	r0, #18
    9542:	b00b      	add	sp, #44	; 0x2c
    9544:	bd30      	pop	{r4, r5, pc}
    9546:	2500      	movs	r5, #0
    9548:	f88d 5004 	strb.w	r5, [sp, #4]
    954c:	7921      	ldrb	r1, [r4, #4]
    954e:	9500      	str	r5, [sp, #0]
    9550:	f89d 0000 	ldrb.w	r0, [sp]
    9554:	2905      	cmp	r1, #5
    9556:	f040 0010 	orr.w	r0, r0, #16
    955a:	f88d 0000 	strb.w	r0, [sp]
    955e:	d254      	bcs.n	960a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    9560:	e8df f001 	tbb	[pc, r1]
    9564:	11050803 	.word	0x11050803
    9568:	000b      	.short	0x000b
    956a:	f040 0001 	orr.w	r0, r0, #1
    956e:	f040 0002 	orr.w	r0, r0, #2
    9572:	e006      	b.n	9582 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    9574:	f040 0009 	orr.w	r0, r0, #9
    9578:	e001      	b.n	957e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    957a:	f040 0001 	orr.w	r0, r0, #1
    957e:	f040 0004 	orr.w	r0, r0, #4
    9582:	f88d 0000 	strb.w	r0, [sp]
    9586:	f8bd 0000 	ldrh.w	r0, [sp]
    958a:	9000      	str	r0, [sp, #0]
    958c:	f8bd 0000 	ldrh.w	r0, [sp]
    9590:	f8ad 0005 	strh.w	r0, [sp, #5]
    9594:	8821      	ldrh	r1, [r4, #0]
    9596:	f8dd 0006 	ldr.w	r0, [sp, #6]
    959a:	f361 201f 	bfi	r0, r1, #8, #24
    959e:	f8cd 0006 	str.w	r0, [sp, #6]
    95a2:	8861      	ldrh	r1, [r4, #2]
    95a4:	f8dd 0009 	ldr.w	r0, [sp, #9]
    95a8:	f361 201f 	bfi	r0, r1, #8, #24
    95ac:	f8cd 0009 	str.w	r0, [sp, #9]
    95b0:	7b60      	ldrb	r0, [r4, #13]
    95b2:	f88d 000d 	strb.w	r0, [sp, #13]
    95b6:	7960      	ldrb	r0, [r4, #5]
    95b8:	f88d 000e 	strb.w	r0, [sp, #14]
    95bc:	79a0      	ldrb	r0, [r4, #6]
    95be:	f88d 000f 	strb.w	r0, [sp, #15]
    95c2:	f8d4 0007 	ldr.w	r0, [r4, #7]
    95c6:	9004      	str	r0, [sp, #16]
    95c8:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    95cc:	f8ad 0014 	strh.w	r0, [sp, #20]
    95d0:	7ba0      	ldrb	r0, [r4, #14]
    95d2:	f88d 0016 	strb.w	r0, [sp, #22]
    95d6:	207f      	movs	r0, #127	; 0x7f
    95d8:	f88d 0017 	strb.w	r0, [sp, #23]
    95dc:	2001      	movs	r0, #1
    95de:	f88d 0018 	strb.w	r0, [sp, #24]
    95e2:	f88d 5019 	strb.w	r5, [sp, #25]
    95e6:	f88d 001a 	strb.w	r0, [sp, #26]
    95ea:	f88d 501b 	strb.w	r5, [sp, #27]
    95ee:	4610      	mov	r0, r2
    95f0:	f7ff fb6c 	bl	8ccc <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    95f4:	f88d 001c 	strb.w	r0, [sp, #28]
    95f8:	f88d 501d 	strb.w	r5, [sp, #29]
    95fc:	f88d 501e 	strb.w	r5, [sp, #30]
    9600:	a909      	add	r1, sp, #36	; 0x24
    9602:	a801      	add	r0, sp, #4
    9604:	f7f9 f936 	bl	2874 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    9608:	e79b      	b.n	9542 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    960a:	f241 31a9 	movw	r1, #5033	; 0x13a9
    960e:	2039      	movs	r0, #57	; 0x39
    9610:	f7f6 fe9c 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009614 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    9614:	b570      	push	{r4, r5, r6, lr}
    9616:	4604      	mov	r4, r0
    9618:	7800      	ldrb	r0, [r0, #0]
    961a:	2101      	movs	r1, #1
    961c:	f7f7 f97c 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9620:	0005      	movs	r5, r0
    9622:	d007      	beq.n	9634 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    9624:	f7ff fcf4 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9628:	b160      	cbz	r0, 9644 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    962a:	4628      	mov	r0, r5
    962c:	f7ff fb34 	bl	8c98 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9630:	b110      	cbz	r0, 9638 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    9632:	e005      	b.n	9640 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    9634:	2042      	movs	r0, #66	; 0x42
    9636:	bd70      	pop	{r4, r5, r6, pc}
    9638:	4628      	mov	r0, r5
    963a:	f7ff fb23 	bl	8c84 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    963e:	b108      	cbz	r0, 9644 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    9640:	200c      	movs	r0, #12
    9642:	bd70      	pop	{r4, r5, r6, pc}
    9644:	1c61      	adds	r1, r4, #1
    9646:	4628      	mov	r0, r5
    9648:	f7ff fb38 	bl	8cbc <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    964c:	2000      	movs	r0, #0
    964e:	bd70      	pop	{r4, r5, r6, pc}

00009650 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    9650:	b510      	push	{r4, lr}
    9652:	4604      	mov	r4, r0
    9654:	f7f9 fa2a 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    9658:	7861      	ldrb	r1, [r4, #1]
    965a:	f3c1 0240 	ubfx	r2, r1, #1, #1
    965e:	f001 0101 	and.w	r1, r1, #1
    9662:	f7ff fb27 	bl	8cb4 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    9666:	2000      	movs	r0, #0
    9668:	bd10      	pop	{r4, pc}

0000966a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    966a:	b510      	push	{r4, lr}
    966c:	4604      	mov	r4, r0
    966e:	2001      	movs	r0, #1
    9670:	f000 f93a 	bl	98e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9674:	b128      	cbz	r0, 9682 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    9676:	4621      	mov	r1, r4
    9678:	2001      	movs	r0, #1
    967a:	f7f7 fcf1 	bl	1060 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    967e:	2000      	movs	r0, #0
    9680:	bd10      	pop	{r4, pc}
    9682:	200c      	movs	r0, #12
    9684:	bd10      	pop	{r4, pc}

00009686 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    9686:	b51c      	push	{r2, r3, r4, lr}
    9688:	4604      	mov	r4, r0
    968a:	f7f9 fa0f 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    968e:	2000      	movs	r0, #0
    9690:	f88d 0000 	strb.w	r0, [sp]
    9694:	f88d 0002 	strb.w	r0, [sp, #2]
    9698:	2003      	movs	r0, #3
    969a:	f88d 0001 	strb.w	r0, [sp, #1]
    969e:	f814 0b01 	ldrb.w	r0, [r4], #1
    96a2:	f88d 0003 	strb.w	r0, [sp, #3]
    96a6:	4668      	mov	r0, sp
    96a8:	9401      	str	r4, [sp, #4]
    96aa:	f000 f89d 	bl	97e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    96ae:	bd1c      	pop	{r2, r3, r4, pc}

000096b0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    96b0:	b510      	push	{r4, lr}
    96b2:	f7f7 fcf9 	bl	10a8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    96b6:	2000      	movs	r0, #0
    96b8:	bd10      	pop	{r4, pc}

000096ba <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    96ba:	b510      	push	{r4, lr}
    96bc:	4604      	mov	r4, r0
    96be:	7800      	ldrb	r0, [r0, #0]
    96c0:	28ff      	cmp	r0, #255	; 0xff
    96c2:	d009      	beq.n	96d8 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    96c4:	2101      	movs	r1, #1
    96c6:	f7f7 f927 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    96ca:	b118      	cbz	r0, 96d4 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    96cc:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    96d0:	8441      	strh	r1, [r0, #34]	; 0x22
    96d2:	e005      	b.n	96e0 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    96d4:	2042      	movs	r0, #66	; 0x42
    96d6:	bd10      	pop	{r4, pc}
    96d8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    96dc:	f7f9 f816 	bl	270c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    96e0:	2000      	movs	r0, #0
    96e2:	bd10      	pop	{r4, pc}

000096e4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    96e4:	b510      	push	{r4, lr}
    96e6:	4604      	mov	r4, r0
    96e8:	f7f9 fabe 	bl	2c68 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    96ec:	b118      	cbz	r0, 96f6 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    96ee:	2000      	movs	r0, #0
    96f0:	f000 f8fa 	bl	98e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    96f4:	b128      	cbz	r0, 9702 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    96f6:	4621      	mov	r1, r4
    96f8:	2000      	movs	r0, #0
    96fa:	f7f7 fcb1 	bl	1060 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    96fe:	2000      	movs	r0, #0
    9700:	bd10      	pop	{r4, pc}
    9702:	200c      	movs	r0, #12
    9704:	bd10      	pop	{r4, pc}

00009706 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    9706:	b510      	push	{r4, lr}
    9708:	7800      	ldrb	r0, [r0, #0]
    970a:	b100      	cbz	r0, 970e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    970c:	2001      	movs	r0, #1
    970e:	f7f9 f827 	bl	2760 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    9712:	2000      	movs	r0, #0
    9714:	bd10      	pop	{r4, pc}

00009716 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    9716:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    971a:	4606      	mov	r6, r0
    971c:	7845      	ldrb	r5, [r0, #1]
    971e:	7800      	ldrb	r0, [r0, #0]
    9720:	2101      	movs	r1, #1
    9722:	f7f7 f8f9 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    9726:	0004      	movs	r4, r0
    9728:	d01e      	beq.n	9768 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    972a:	f7ff fa7e 	bl	8c2a <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    972e:	78f1      	ldrb	r1, [r6, #3]
    9730:	4281      	cmp	r1, r0
    9732:	d800      	bhi.n	9736 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    9734:	4608      	mov	r0, r1
    9736:	4607      	mov	r7, r0
    9738:	2d04      	cmp	r5, #4
    973a:	d018      	beq.n	976e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    973c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    973e:	f7fe ff72 	bl	8626 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    9742:	4438      	add	r0, r7
    9744:	b281      	uxth	r1, r0
    9746:	4620      	mov	r0, r4
    9748:	2201      	movs	r2, #1
    974a:	f000 f8df 	bl	990c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    974e:	2800      	cmp	r0, #0
    9750:	d10b      	bne.n	976a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9752:	2d03      	cmp	r5, #3
    9754:	d000      	beq.n	9758 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9756:	b1df      	cbz	r7, 9790 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9758:	4620      	mov	r0, r4
    975a:	f7ff fa9b 	bl	8c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    975e:	7871      	ldrb	r1, [r6, #1]
    9760:	2903      	cmp	r1, #3
    9762:	d010      	beq.n	9786 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9764:	b9a0      	cbnz	r0, 9790 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9766:	e004      	b.n	9772 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    9768:	2042      	movs	r0, #66	; 0x42
    976a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    976e:	b97f      	cbnz	r7, 9790 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9770:	e7f2      	b.n	9758 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    9772:	2904      	cmp	r1, #4
    9774:	d107      	bne.n	9786 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    9776:	4620      	mov	r0, r4
    9778:	f7ff fc4a 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    977c:	b140      	cbz	r0, 9790 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    977e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9780:	f7fe ff18 	bl	85b4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    9784:	b120      	cbz	r0, 9790 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    9786:	2d01      	cmp	r5, #1
    9788:	d004      	beq.n	9794 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    978a:	2d03      	cmp	r5, #3
    978c:	d002      	beq.n	9794 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    978e:	e00e      	b.n	97ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    9790:	2012      	movs	r0, #18
    9792:	e7ea      	b.n	976a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    9794:	4620      	mov	r0, r4
    9796:	f7ff fa7d 	bl	8c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    979a:	b108      	cbz	r0, 97a0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    979c:	2200      	movs	r2, #0
    979e:	e002      	b.n	97a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    97a0:	2d01      	cmp	r5, #1
    97a2:	d013      	beq.n	97cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    97a4:	2201      	movs	r2, #1
    97a6:	4668      	mov	r0, sp
    97a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    97aa:	f7fe fe9f 	bl	84ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    97ae:	2d04      	cmp	r5, #4
    97b0:	d018      	beq.n	97e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    97b2:	6872      	ldr	r2, [r6, #4]
    97b4:	463b      	mov	r3, r7
    97b6:	2101      	movs	r1, #1
    97b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    97ba:	f7fe fecb 	bl	8554 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    97be:	b138      	cbz	r0, 97d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    97c0:	7870      	ldrb	r0, [r6, #1]
    97c2:	2802      	cmp	r0, #2
    97c4:	d006      	beq.n	97d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    97c6:	2803      	cmp	r0, #3
    97c8:	d004      	beq.n	97d4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    97ca:	e00b      	b.n	97e4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    97cc:	2202      	movs	r2, #2
    97ce:	e7ea      	b.n	97a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    97d0:	2007      	movs	r0, #7
    97d2:	e7ca      	b.n	976a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    97d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    97d6:	f7fe ff26 	bl	8626 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    97da:	4602      	mov	r2, r0
    97dc:	2101      	movs	r1, #1
    97de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    97e0:	f7fe fefe 	bl	85e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    97e4:	2000      	movs	r0, #0
    97e6:	e7c0      	b.n	976a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

000097e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    97e8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    97ec:	4607      	mov	r7, r0
    97ee:	7845      	ldrb	r5, [r0, #1]
    97f0:	78c6      	ldrb	r6, [r0, #3]
    97f2:	7800      	ldrb	r0, [r0, #0]
    97f4:	2101      	movs	r1, #1
    97f6:	f7f7 f88f 	bl	918 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97fa:	0004      	movs	r4, r0
    97fc:	d003      	beq.n	9806 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    97fe:	f7ff fa4b 	bl	8c98 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    9802:	b118      	cbz	r0, 980c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    9804:	e003      	b.n	980e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    9806:	2042      	movs	r0, #66	; 0x42
    9808:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    980c:	2600      	movs	r6, #0
    980e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9810:	f7fe ff0d 	bl	862e <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    9814:	4430      	add	r0, r6
    9816:	b281      	uxth	r1, r0
    9818:	4688      	mov	r8, r1
    981a:	4620      	mov	r0, r4
    981c:	2201      	movs	r2, #1
    981e:	f000 f875 	bl	990c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    9822:	2800      	cmp	r0, #0
    9824:	d1f0      	bne.n	9808 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9826:	2d04      	cmp	r5, #4
    9828:	d008      	beq.n	983c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    982a:	2d03      	cmp	r5, #3
    982c:	d00a      	beq.n	9844 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    982e:	b12e      	cbz	r6, 983c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    9830:	4620      	mov	r0, r4
    9832:	f7ff fbed 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9836:	b118      	cbz	r0, 9840 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    9838:	200c      	movs	r0, #12
    983a:	e7e5      	b.n	9808 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    983c:	2012      	movs	r0, #18
    983e:	e7e3      	b.n	9808 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    9840:	2d01      	cmp	r5, #1
    9842:	d10c      	bne.n	985e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    9844:	4620      	mov	r0, r4
    9846:	f7ff fa25 	bl	8c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    984a:	b108      	cbz	r0, 9850 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    984c:	2204      	movs	r2, #4
    984e:	e002      	b.n	9856 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    9850:	2d01      	cmp	r5, #1
    9852:	d010      	beq.n	9876 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    9854:	2205      	movs	r2, #5
    9856:	4668      	mov	r0, sp
    9858:	6b61      	ldr	r1, [r4, #52]	; 0x34
    985a:	f7fe fe47 	bl	84ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    985e:	687a      	ldr	r2, [r7, #4]
    9860:	4633      	mov	r3, r6
    9862:	2100      	movs	r1, #0
    9864:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9866:	f7fe fe75 	bl	8554 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    986a:	b130      	cbz	r0, 987a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    986c:	2d02      	cmp	r5, #2
    986e:	d006      	beq.n	987e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    9870:	2d03      	cmp	r5, #3
    9872:	d004      	beq.n	987e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    9874:	e008      	b.n	9888 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    9876:	2206      	movs	r2, #6
    9878:	e7ed      	b.n	9856 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    987a:	2007      	movs	r0, #7
    987c:	e7c4      	b.n	9808 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    987e:	4642      	mov	r2, r8
    9880:	2100      	movs	r1, #0
    9882:	6b60      	ldr	r0, [r4, #52]	; 0x34
    9884:	f7fe feac 	bl	85e0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    9888:	2000      	movs	r0, #0
    988a:	e7bd      	b.n	9808 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000988c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    988c:	b510      	push	{r4, lr}
    988e:	4604      	mov	r4, r0
    9890:	4601      	mov	r1, r0
    9892:	2000      	movs	r0, #0
    9894:	f7f7 fbcc 	bl	1030 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    9898:	b910      	cbnz	r0, 98a0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    989a:	2000      	movs	r0, #0
    989c:	6020      	str	r0, [r4, #0]
    989e:	80a0      	strh	r0, [r4, #4]
    98a0:	2000      	movs	r0, #0
    98a2:	bd10      	pop	{r4, pc}

000098a4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    98a4:	b510      	push	{r4, lr}
    98a6:	f7f9 f9e5 	bl	2c74 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    98aa:	2000      	movs	r0, #0
    98ac:	bd10      	pop	{r4, pc}

000098ae <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    98ae:	f000 b800 	b.w	98b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000098b2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    98b2:	b510      	push	{r4, lr}
    98b4:	f7fe ff44 	bl	8740 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    98b8:	f7f7 fc32 	bl	1120 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    98bc:	f7f9 fa24 	bl	2d08 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    98c0:	f7ff f8e5 	bl	8a8e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    98c4:	f7fe fffd 	bl	88c2 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    98c8:	f7f7 ff9c 	bl	1804 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    98cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98d0:	f7f9 b8cc 	b.w	2a6c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xf8>
    98d4:	07c1      	lsls	r1, r0, #31
    98d6:	d001      	beq.n	98dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    98d8:	2001      	movs	r0, #1
    98da:	4770      	bx	lr
    98dc:	0780      	lsls	r0, r0, #30
    98de:	d501      	bpl.n	98e4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x32>
    98e0:	2002      	movs	r0, #2
    98e2:	4770      	bx	lr
    98e4:	2000      	movs	r0, #0
    98e6:	4770      	bx	lr
    98e8:	b510      	push	{r4, lr}
    98ea:	f7f9 f8a9 	bl	2a40 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xcc>
    98ee:	b158      	cbz	r0, 9908 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    98f0:	f7f9 f8dc 	bl	2aac <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x138>
    98f4:	4604      	mov	r4, r0
    98f6:	f7ff f9cf 	bl	8c98 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    98fa:	b918      	cbnz	r0, 9904 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x52>
    98fc:	4620      	mov	r0, r4
    98fe:	f7ff f9c1 	bl	8c84 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9902:	b108      	cbz	r0, 9908 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    9904:	2000      	movs	r0, #0
    9906:	bd10      	pop	{r4, pc}
    9908:	2001      	movs	r0, #1
    990a:	bd10      	pop	{r4, pc}
    990c:	b570      	push	{r4, r5, r6, lr}
    990e:	460c      	mov	r4, r1
    9910:	4605      	mov	r5, r0
    9912:	b112      	cbz	r2, 991a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x68>
    9914:	291f      	cmp	r1, #31
    9916:	d80c      	bhi.n	9932 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    9918:	e016      	b.n	9948 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    991a:	f7f7 fa49 	bl	db0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    991e:	42a0      	cmp	r0, r4
    9920:	d201      	bcs.n	9926 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x74>
    9922:	2007      	movs	r0, #7
    9924:	bd70      	pop	{r4, r5, r6, pc}
    9926:	4628      	mov	r0, r5
    9928:	f7ff f9b4 	bl	8c94 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    992c:	b118      	cbz	r0, 9936 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    992e:	2c1f      	cmp	r4, #31
    9930:	d901      	bls.n	9936 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    9932:	2012      	movs	r0, #18
    9934:	bd70      	pop	{r4, r5, r6, pc}
    9936:	4628      	mov	r0, r5
    9938:	f7ff f9b5 	bl	8ca6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    993c:	b130      	cbz	r0, 994c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    993e:	4621      	mov	r1, r4
    9940:	4628      	mov	r0, r5
    9942:	f7ff f97e 	bl	8c42 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    9946:	b118      	cbz	r0, 9950 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    9948:	2000      	movs	r0, #0
    994a:	bd70      	pop	{r4, r5, r6, pc}
    994c:	2042      	movs	r0, #66	; 0x42
    994e:	bd70      	pop	{r4, r5, r6, pc}
    9950:	2045      	movs	r0, #69	; 0x45
    9952:	bd70      	pop	{r4, r5, r6, pc}
    9954:	b510      	push	{r4, lr}
    9956:	4604      	mov	r4, r0
    9958:	7840      	ldrb	r0, [r0, #1]
    995a:	06c1      	lsls	r1, r0, #27
    995c:	d51c      	bpl.n	9998 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    995e:	07c0      	lsls	r0, r0, #31
    9960:	d00b      	beq.n	997a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    9962:	f7f9 f9a9 	bl	2cb8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    9966:	b1b8      	cbz	r0, 9998 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9968:	7860      	ldrb	r0, [r4, #1]
    996a:	06c1      	lsls	r1, r0, #27
    996c:	d405      	bmi.n	997a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    996e:	0700      	lsls	r0, r0, #28
    9970:	d503      	bpl.n	997a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    9972:	7d20      	ldrb	r0, [r4, #20]
    9974:	2802      	cmp	r0, #2
    9976:	d10f      	bne.n	9998 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9978:	e010      	b.n	999c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    997a:	7d20      	ldrb	r0, [r4, #20]
    997c:	2802      	cmp	r0, #2
    997e:	d001      	beq.n	9984 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9980:	7ea0      	ldrb	r0, [r4, #26]
    9982:	b948      	cbnz	r0, 9998 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe6>
    9984:	7860      	ldrb	r0, [r4, #1]
    9986:	0700      	lsls	r0, r0, #28
    9988:	d408      	bmi.n	999c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    998a:	f8d4 0005 	ldr.w	r0, [r4, #5]
    998e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9992:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    9996:	d201      	bcs.n	999c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xea>
    9998:	2011      	movs	r0, #17
    999a:	bd10      	pop	{r4, pc}
    999c:	2000      	movs	r0, #0
    999e:	bd10      	pop	{r4, pc}
    99a0:	b538      	push	{r3, r4, r5, lr}
    99a2:	4604      	mov	r4, r0
    99a4:	7800      	ldrb	r0, [r0, #0]
    99a6:	28ef      	cmp	r0, #239	; 0xef
    99a8:	d843      	bhi.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99aa:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    99ae:	f8ad 0000 	strh.w	r0, [sp]
    99b2:	9800      	ldr	r0, [sp, #0]
    99b4:	f000 f892 	bl	9adc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    99b8:	b3a0      	cbz	r0, 9a24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    99ba:	7861      	ldrb	r1, [r4, #1]
    99bc:	0708      	lsls	r0, r1, #28
    99be:	d40b      	bmi.n	99d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x126>
    99c0:	f8d4 0002 	ldr.w	r0, [r4, #2]
    99c4:	f8d4 3005 	ldr.w	r3, [r4, #5]
    99c8:	0a02      	lsrs	r2, r0, #8
    99ca:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    99ce:	d830      	bhi.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99d0:	2220      	movs	r2, #32
    99d2:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    99d6:	d82c      	bhi.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99d8:	7a60      	ldrb	r0, [r4, #9]
    99da:	b318      	cbz	r0, 9a24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x172>
    99dc:	2807      	cmp	r0, #7
    99de:	d828      	bhi.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99e0:	7aa0      	ldrb	r0, [r4, #10]
    99e2:	b128      	cbz	r0, 99f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    99e4:	2801      	cmp	r0, #1
    99e6:	d003      	beq.n	99f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    99e8:	2802      	cmp	r0, #2
    99ea:	d001      	beq.n	99f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    99ec:	2803      	cmp	r0, #3
    99ee:	d120      	bne.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    99f0:	074a      	lsls	r2, r1, #29
    99f2:	d403      	bmi.n	99fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    99f4:	2802      	cmp	r0, #2
    99f6:	d001      	beq.n	99fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    99f8:	2803      	cmp	r0, #3
    99fa:	d105      	bne.n	9a08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x156>
    99fc:	7ae0      	ldrb	r0, [r4, #11]
    99fe:	b108      	cbz	r0, 9a04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x152>
    9a00:	2801      	cmp	r0, #1
    9a02:	d116      	bne.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a04:	0748      	lsls	r0, r1, #29
    9a06:	d407      	bmi.n	9a18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    9a08:	7ca0      	ldrb	r0, [r4, #18]
    9a0a:	b128      	cbz	r0, 9a18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    9a0c:	2801      	cmp	r0, #1
    9a0e:	d003      	beq.n	9a18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    9a10:	2802      	cmp	r0, #2
    9a12:	d001      	beq.n	9a18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    9a14:	2803      	cmp	r0, #3
    9a16:	d10c      	bne.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a18:	06c8      	lsls	r0, r1, #27
    9a1a:	7d20      	ldrb	r0, [r4, #20]
    9a1c:	d503      	bpl.n	9a26 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9a1e:	2801      	cmp	r0, #1
    9a20:	d107      	bne.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a22:	e002      	b.n	9a2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    9a24:	e005      	b.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a26:	2802      	cmp	r0, #2
    9a28:	d003      	beq.n	9a32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x180>
    9a2a:	7e20      	ldrb	r0, [r4, #24]
    9a2c:	b118      	cbz	r0, 9a36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    9a2e:	2801      	cmp	r0, #1
    9a30:	d001      	beq.n	9a36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>
    9a32:	2012      	movs	r0, #18
    9a34:	bd38      	pop	{r3, r4, r5, pc}
    9a36:	2000      	movs	r0, #0
    9a38:	bd38      	pop	{r3, r4, r5, pc}
    9a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a3e:	7890      	ldrb	r0, [r2, #2]
    9a40:	9e06      	ldr	r6, [sp, #24]
    9a42:	461d      	mov	r5, r3
    9a44:	4614      	mov	r4, r2
    9a46:	b908      	cbnz	r0, 9a4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19a>
    9a48:	f7f9 f94e 	bl	2ce8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9a4c:	78e4      	ldrb	r4, [r4, #3]
    9a4e:	4607      	mov	r7, r0
    9a50:	b914      	cbnz	r4, 9a58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a6>
    9a52:	f7f9 f949 	bl	2ce8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9a56:	4604      	mov	r4, r0
    9a58:	b16f      	cbz	r7, 9a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a5a:	b164      	cbz	r4, 9a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a5c:	4638      	mov	r0, r7
    9a5e:	f7ff ff39 	bl	98d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    9a62:	4620      	mov	r0, r4
    9a64:	f7ff ff36 	bl	98d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    9a68:	b12f      	cbz	r7, 9a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a6a:	b124      	cbz	r4, 9a76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c4>
    9a6c:	702f      	strb	r7, [r5, #0]
    9a6e:	7034      	strb	r4, [r6, #0]
    9a70:	2000      	movs	r0, #0
    9a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a76:	2009      	movs	r0, #9
    9a78:	e7fb      	b.n	9a72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    9a7a:	207f      	movs	r0, #127	; 0x7f
    9a7c:	f000 b826 	b.w	9acc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9a80:	b570      	push	{r4, r5, r6, lr}
    9a82:	4605      	mov	r5, r0
    9a84:	f7ff f90f 	bl	8ca6 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9a88:	b170      	cbz	r0, 9aa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    9a8a:	4628      	mov	r0, r5
    9a8c:	f7ff fac0 	bl	9010 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    9a90:	2800      	cmp	r0, #0
    9a92:	d008      	beq.n	9aa6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    9a94:	4628      	mov	r0, r5
    9a96:	f7ff fab8 	bl	900a <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
    9a9a:	4604      	mov	r4, r0
    9a9c:	4628      	mov	r0, r5
    9a9e:	f7ff fa8e 	bl	8fbe <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    9aa2:	b118      	cbz	r0, 9aac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fa>
    9aa4:	200c      	movs	r0, #12
    9aa6:	bd70      	pop	{r4, r5, r6, pc}
    9aa8:	2042      	movs	r0, #66	; 0x42
    9aaa:	bd70      	pop	{r4, r5, r6, pc}
    9aac:	b164      	cbz	r4, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9aae:	8820      	ldrh	r0, [r4, #0]
    9ab0:	f7fe fe15 	bl	86de <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    9ab4:	8820      	ldrh	r0, [r4, #0]
    9ab6:	2100      	movs	r1, #0
    9ab8:	f7f6 ffd0 	bl	a5c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9abc:	b120      	cbz	r0, 9ac8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9abe:	f241 71ae 	movw	r1, #6062	; 0x17ae
    9ac2:	2039      	movs	r0, #57	; 0x39
    9ac4:	f7f6 fc42 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ac8:	2000      	movs	r0, #0
    9aca:	bd70      	pop	{r4, r5, r6, pc}
    9acc:	b508      	push	{r3, lr}
    9ace:	f640 1288 	movw	r2, #2440	; 0x988
    9ad2:	2300      	movs	r3, #0
    9ad4:	4669      	mov	r1, sp
    9ad6:	f7fd fe99 	bl	780c <mpsl_fem_tx_power_split>
    9ada:	bd08      	pop	{r3, pc}
    9adc:	b2c0      	uxtb	r0, r0
    9ade:	06c1      	lsls	r1, r0, #27
    9ae0:	d40c      	bmi.n	9afc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    9ae2:	0681      	lsls	r1, r0, #26
    9ae4:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    9ae8:	d503      	bpl.n	9af2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    9aea:	b9d1      	cbnz	r1, 9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9aec:	0781      	lsls	r1, r0, #30
    9aee:	d418      	bmi.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9af0:	e001      	b.n	9af6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x244>
    9af2:	2900      	cmp	r1, #0
    9af4:	d1fa      	bne.n	9aec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23a>
    9af6:	0700      	lsls	r0, r0, #28
    9af8:	d413      	bmi.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9afa:	e010      	b.n	9b1e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    9afc:	0641      	lsls	r1, r0, #25
    9afe:	d410      	bmi.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9b00:	0681      	lsls	r1, r0, #26
    9b02:	d40e      	bmi.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9b04:	07c1      	lsls	r1, r0, #31
    9b06:	ea4f 7180 	mov.w	r1, r0, lsl #30
    9b0a:	d004      	beq.n	9b16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    9b0c:	2900      	cmp	r1, #0
    9b0e:	db02      	blt.n	9b16 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x264>
    9b10:	0740      	lsls	r0, r0, #29
    9b12:	d404      	bmi.n	9b1e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26c>
    9b14:	e005      	b.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9b16:	0701      	lsls	r1, r0, #28
    9b18:	d403      	bmi.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9b1a:	0740      	lsls	r0, r0, #29
    9b1c:	d401      	bmi.n	9b22 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x270>
    9b1e:	2001      	movs	r0, #1
    9b20:	4770      	bx	lr
    9b22:	2000      	movs	r0, #0
    9b24:	4770      	bx	lr
    9b26:	b510      	push	{r4, lr}
    9b28:	f7f8 fe04 	bl	2734 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    9b2c:	b110      	cbz	r0, 9b34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x282>
    9b2e:	f44f 7188 	mov.w	r1, #272	; 0x110
    9b32:	e004      	b.n	9b3e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x28c>
    9b34:	f7f7 ffe8 	bl	1b08 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    9b38:	b120      	cbz	r0, 9b44 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    9b3a:	f240 1115 	movw	r1, #277	; 0x115
    9b3e:	2001      	movs	r0, #1
    9b40:	f7f6 fc04 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9b48:	2001      	movs	r0, #1
    9b4a:	f7fe bc18 	b.w	837e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    9b4e:	6802      	ldr	r2, [r0, #0]
    9b50:	b912      	cbnz	r2, 9b58 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a6>
    9b52:	6001      	str	r1, [r0, #0]
    9b54:	4770      	bx	lr
    9b56:	4602      	mov	r2, r0
    9b58:	6850      	ldr	r0, [r2, #4]
    9b5a:	b108      	cbz	r0, 9b60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ae>
    9b5c:	428a      	cmp	r2, r1
    9b5e:	d1fa      	bne.n	9b56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    9b60:	428a      	cmp	r2, r1
    9b62:	d0f7      	beq.n	9b54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a2>
    9b64:	6051      	str	r1, [r2, #4]
    9b66:	4770      	bx	lr
    9b68:	b510      	push	{r4, lr}
    9b6a:	4604      	mov	r4, r0
    9b6c:	e002      	b.n	9b74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c2>
    9b6e:	6820      	ldr	r0, [r4, #0]
    9b70:	4780      	blx	r0
    9b72:	6864      	ldr	r4, [r4, #4]
    9b74:	2c00      	cmp	r4, #0
    9b76:	d1fa      	bne.n	9b6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2bc>
    9b78:	bd10      	pop	{r4, pc}

00009b7a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    9b7a:	f7fd bb9b 	b.w	72b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    9b7e:	0001      	.short	0x0001
    9b80:	0002000b 	.word	0x0002000b
    9b84:	0005000a 	.word	0x0005000a
    9b88:	000a0009 	.word	0x000a0009
    9b8c:	00140008 	.word	0x00140008
    9b90:	001e0007 	.word	0x001e0007
    9b94:	00320006 	.word	0x00320006
    9b98:	004b0005 	.word	0x004b0005
    9b9c:	00640004 	.word	0x00640004
    9ba0:	00960003 	.word	0x00960003
    9ba4:	00fa0002 	.word	0x00fa0002
    9ba8:	01f40001 	.word	0x01f40001
	...

00009bae <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    9bae:	b510      	push	{r4, lr}
    9bb0:	f7f9 faf8 	bl	31a4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    9bb4:	f000 f818 	bl	9be8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    9bb8:	f7f9 f90a 	bl	2dd0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    9bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9bc0:	f7f9 b970 	b.w	2ea4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00009bc4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    9bc4:	b510      	push	{r4, lr}
    9bc6:	24c8      	movs	r4, #200	; 0xc8
    9bc8:	1e64      	subs	r4, r4, #1
    9bca:	b2e4      	uxtb	r4, r4
    9bcc:	f7f9 f91e 	bl	2e0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    9bd0:	2802      	cmp	r0, #2
    9bd2:	d003      	beq.n	9bdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    9bd4:	2801      	cmp	r0, #1
    9bd6:	d000      	beq.n	9bda <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    9bd8:	2000      	movs	r0, #0
    9bda:	bd10      	pop	{r4, pc}
    9bdc:	2c00      	cmp	r4, #0
    9bde:	d1f3      	bne.n	9bc8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    9be0:	21ed      	movs	r1, #237	; 0xed
    9be2:	203b      	movs	r0, #59	; 0x3b
    9be4:	f7f6 fbb2 	bl	34c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009be8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    9be8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9bec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9bf0:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    9bf4:	f3bf 8f4f 	dsb	sy
    9bf8:	f3bf 8f6f 	isb	sy
    9bfc:	f7f9 b986 	b.w	2f0c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    9c00:	2800      	cmp	r0, #0
    9c02:	db09      	blt.n	9c18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    9c04:	f000 021f 	and.w	r2, r0, #31
    9c08:	2101      	movs	r1, #1
    9c0a:	4091      	lsls	r1, r2
    9c0c:	0940      	lsrs	r0, r0, #5
    9c0e:	0080      	lsls	r0, r0, #2
    9c10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9c14:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9c18:	4770      	bx	lr
    9c1a:	2800      	cmp	r0, #0
    9c1c:	db0d      	blt.n	9c3a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    9c1e:	f000 021f 	and.w	r2, r0, #31
    9c22:	2101      	movs	r1, #1
    9c24:	4091      	lsls	r1, r2
    9c26:	0940      	lsrs	r0, r0, #5
    9c28:	0080      	lsls	r0, r0, #2
    9c2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9c2e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9c32:	f3bf 8f4f 	dsb	sy
    9c36:	f3bf 8f6f 	isb	sy
    9c3a:	4770      	bx	lr
    9c3c:	5840      	ldr	r0, [r0, r1]
    9c3e:	2800      	cmp	r0, #0
    9c40:	d000      	beq.n	9c44 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    9c42:	2001      	movs	r0, #1
    9c44:	4770      	bx	lr
    9c46:	5840      	ldr	r0, [r0, r1]
    9c48:	2800      	cmp	r0, #0
    9c4a:	d000      	beq.n	9c4e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    9c4c:	2001      	movs	r0, #1
    9c4e:	4770      	bx	lr

00009c50 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    9c50:	b510      	push	{r4, lr}
    9c52:	4604      	mov	r4, r0
    9c54:	4608      	mov	r0, r1
    9c56:	f7f9 fbbf 	bl	33d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9c5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c5e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9c62:	fbb0 f0f1 	udiv	r0, r0, r1
    9c66:	1a20      	subs	r0, r4, r0
    9c68:	1e80      	subs	r0, r0, #2
    9c6a:	bd10      	pop	{r4, pc}

00009c6c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    9c6c:	b510      	push	{r4, lr}
    9c6e:	4604      	mov	r4, r0
    9c70:	4608      	mov	r0, r1
    9c72:	f7f9 fbb1 	bl	33d8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9c7a:	fbb0 f0f1 	udiv	r0, r0, r1
    9c7e:	1a20      	subs	r0, r4, r0
    9c80:	bd10      	pop	{r4, pc}
    9c82:	2804      	cmp	r0, #4
    9c84:	d202      	bcs.n	9c8c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    9c86:	f04f 0028 	mov.w	r0, #40	; 0x28
    9c8a:	4770      	bx	lr
    9c8c:	d102      	bne.n	9c94 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    9c8e:	f04f 0010 	mov.w	r0, #16
    9c92:	4770      	bx	lr
    9c94:	f04f 0000 	mov.w	r0, #0
    9c98:	4770      	bx	lr
    9c9a:	2100      	movs	r1, #0
    9c9c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    9ca0:	f800 1f24 	strb.w	r1, [r0, #36]!
    9ca4:	7041      	strb	r1, [r0, #1]
    9ca6:	4770      	bx	lr

00009ca8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    9ca8:	b570      	push	{r4, r5, r6, lr}
    9caa:	f7fa f8ed 	bl	3e88 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9cae:	4605      	mov	r5, r0
    9cb0:	2400      	movs	r4, #0
    9cb2:	e006      	b.n	9cc2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    9cb4:	4620      	mov	r0, r4
    9cb6:	f7fa f8ed 	bl	3e94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9cba:	f7ff ffee 	bl	9c9a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9cbe:	1c64      	adds	r4, r4, #1
    9cc0:	b2e4      	uxtb	r4, r4
    9cc2:	42ac      	cmp	r4, r5
    9cc4:	d3f6      	bcc.n	9cb4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    9cc6:	bd70      	pop	{r4, r5, r6, pc}

00009cc8 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    9cc8:	f7fc bc96 	b.w	65f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00009ccc <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    9ccc:	b510      	push	{r4, lr}
    9cce:	2000      	movs	r0, #0
    9cd0:	f7fc ffee 	bl	6cb0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    9cd4:	6800      	ldr	r0, [r0, #0]
    9cd6:	2800      	cmp	r0, #0
    9cd8:	bf18      	it	ne
    9cda:	2001      	movne	r0, #1
    9cdc:	bd10      	pop	{r4, pc}

00009cde <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    9cde:	b510      	push	{r4, lr}
    9ce0:	f7fd f85e 	bl	6da0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9ce4:	f7fc fb42 	bl	636c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9ce8:	f000 f804 	bl	9cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9cec:	b280      	uxth	r0, r0
    9cee:	bd10      	pop	{r4, pc}

00009cf0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    9cf0:	f7fc bfb8 	b.w	6c64 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00009cf4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    9cf4:	0a41      	lsrs	r1, r0, #9
    9cf6:	f643 5209 	movw	r2, #15625	; 0x3d09
    9cfa:	4351      	muls	r1, r2
    9cfc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9d00:	fb10 f002 	smulbb	r0, r0, r2
    9d04:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9d08:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    9d0c:	4770      	bx	lr
    9d0e:	2800      	cmp	r0, #0
    9d10:	db09      	blt.n	9d26 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    9d12:	f000 021f 	and.w	r2, r0, #31
    9d16:	2101      	movs	r1, #1
    9d18:	4091      	lsls	r1, r2
    9d1a:	0940      	lsrs	r0, r0, #5
    9d1c:	0080      	lsls	r0, r0, #2
    9d1e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d22:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9d26:	4770      	bx	lr
    9d28:	2800      	cmp	r0, #0
    9d2a:	db0d      	blt.n	9d48 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    9d2c:	f000 021f 	and.w	r2, r0, #31
    9d30:	2101      	movs	r1, #1
    9d32:	4091      	lsls	r1, r2
    9d34:	0940      	lsrs	r0, r0, #5
    9d36:	0080      	lsls	r0, r0, #2
    9d38:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d3c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9d40:	f3bf 8f4f 	dsb	sy
    9d44:	f3bf 8f6f 	isb	sy
    9d48:	4770      	bx	lr
    9d4a:	5840      	ldr	r0, [r0, r1]
    9d4c:	2800      	cmp	r0, #0
    9d4e:	d000      	beq.n	9d52 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    9d50:	2001      	movs	r0, #1
    9d52:	4770      	bx	lr
    9d54:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    9d58:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    9d5c:	f002 0201 	and.w	r2, r2, #1
    9d60:	03c0      	lsls	r0, r0, #15
    9d62:	d503      	bpl.n	9d6c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9d64:	428a      	cmp	r2, r1
    9d66:	d101      	bne.n	9d6c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9d68:	2001      	movs	r0, #1
    9d6a:	4770      	bx	lr
    9d6c:	2000      	movs	r0, #0
    9d6e:	4770      	bx	lr

00009d70 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    9d70:	b510      	push	{r4, lr}
    9d72:	2101      	movs	r1, #1
    9d74:	0788      	lsls	r0, r1, #30
    9d76:	f7fd fb35 	bl	73e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9d7a:	2800      	cmp	r0, #0
    9d7c:	d000      	beq.n	9d80 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    9d7e:	2001      	movs	r0, #1
    9d80:	bd10      	pop	{r4, pc}

00009d82 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    9d82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9d86:	2101      	movs	r1, #1
    9d88:	6001      	str	r1, [r0, #0]
    9d8a:	4770      	bx	lr

00009d8c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    9d8c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9d90:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    9d94:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    9d98:	f002 0203 	and.w	r2, r2, #3
    9d9c:	03c9      	lsls	r1, r1, #15
    9d9e:	d503      	bpl.n	9da8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9da0:	4282      	cmp	r2, r0
    9da2:	d101      	bne.n	9da8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9da4:	2001      	movs	r0, #1
    9da6:	4770      	bx	lr
    9da8:	2000      	movs	r0, #0
    9daa:	4770      	bx	lr

00009dac <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    9dac:	b510      	push	{r4, lr}
    9dae:	2100      	movs	r1, #0
    9db0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9db4:	f7fd fb16 	bl	73e4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9db8:	2800      	cmp	r0, #0
    9dba:	d000      	beq.n	9dbe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    9dbc:	2001      	movs	r0, #1
    9dbe:	bd10      	pop	{r4, pc}
    9dc0:	2800      	cmp	r0, #0
    9dc2:	db09      	blt.n	9dd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    9dc4:	f000 021f 	and.w	r2, r0, #31
    9dc8:	2101      	movs	r1, #1
    9dca:	4091      	lsls	r1, r2
    9dcc:	0940      	lsrs	r0, r0, #5
    9dce:	0080      	lsls	r0, r0, #2
    9dd0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9dd4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9dd8:	4770      	bx	lr
    9dda:	2800      	cmp	r0, #0
    9ddc:	db0d      	blt.n	9dfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    9dde:	f000 021f 	and.w	r2, r0, #31
    9de2:	2101      	movs	r1, #1
    9de4:	4091      	lsls	r1, r2
    9de6:	0940      	lsrs	r0, r0, #5
    9de8:	0080      	lsls	r0, r0, #2
    9dea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9dee:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9df2:	f3bf 8f4f 	dsb	sy
    9df6:	f3bf 8f6f 	isb	sy
    9dfa:	4770      	bx	lr
    9dfc:	00021000 	.word	0x00021000
    9e00:	000000fa 	.word	0x000000fa
    9e04:	5faee8ff 	.word	0x5faee8ff
    9e08:	c87c9577 	.word	0xc87c9577
    9e0c:	18146227 	.word	0x18146227
    9e10:	c65deae6 	.word	0xc65deae6
    9e14:	3a723992 	.word	0x3a723992
    9e18:	2800      	cmp	r0, #0
    9e1a:	db09      	blt.n	9e30 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    9e1c:	f000 021f 	and.w	r2, r0, #31
    9e20:	2101      	movs	r1, #1
    9e22:	4091      	lsls	r1, r2
    9e24:	0940      	lsrs	r0, r0, #5
    9e26:	0080      	lsls	r0, r0, #2
    9e28:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e2c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9e30:	4770      	bx	lr

00009e32 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    9e32:	f3ef 8110 	mrs	r1, PRIMASK
    9e36:	b672      	cpsid	i
    9e38:	7802      	ldrb	r2, [r0, #0]
    9e3a:	2a01      	cmp	r2, #1
    9e3c:	d001      	beq.n	9e42 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    9e3e:	2201      	movs	r2, #1
    9e40:	e000      	b.n	9e44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    9e42:	2200      	movs	r2, #0
    9e44:	2301      	movs	r3, #1
    9e46:	7003      	strb	r3, [r0, #0]
    9e48:	b901      	cbnz	r1, 9e4c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    9e4a:	b662      	cpsie	i
    9e4c:	b10a      	cbz	r2, 9e52 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    9e4e:	2000      	movs	r0, #0
    9e50:	4770      	bx	lr
    9e52:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9e56:	4770      	bx	lr

00009e58 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    9e58:	2100      	movs	r1, #0
    9e5a:	7001      	strb	r1, [r0, #0]
    9e5c:	4608      	mov	r0, r1
    9e5e:	4770      	bx	lr

00009e60 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    9e60:	f3ef 8110 	mrs	r1, PRIMASK
    9e64:	b672      	cpsid	i
    9e66:	2200      	movs	r2, #0
    9e68:	7002      	strb	r2, [r0, #0]
    9e6a:	b901      	cbnz	r1, 9e6e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    9e6c:	b662      	cpsie	i
    9e6e:	2000      	movs	r0, #0
    9e70:	4770      	bx	lr

00009e72 <mpsl_low_priority_process>:
    9e72:	f7fd bc0b 	b.w	768c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00009e76 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    9e76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9e7a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9e7e:	280f      	cmp	r0, #15
    9e80:	d001      	beq.n	9e86 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    9e82:	2000      	movs	r0, #0
    9e84:	4770      	bx	lr
    9e86:	2001      	movs	r0, #1
    9e88:	4770      	bx	lr

00009e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    9e8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9e8e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9e92:	280a      	cmp	r0, #10
    9e94:	d001      	beq.n	9e9a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    9e96:	2000      	movs	r0, #0
    9e98:	4770      	bx	lr
    9e9a:	2001      	movs	r0, #1
    9e9c:	4770      	bx	lr

00009e9e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    9e9e:	b500      	push	{lr}
    9ea0:	f7ff fff3 	bl	9e8a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9ea4:	b120      	cbz	r0, 9eb0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    9ea6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9eaa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9eae:	b108      	cbz	r0, 9eb4 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    9eb0:	2000      	movs	r0, #0
    9eb2:	bd00      	pop	{pc}
    9eb4:	2001      	movs	r0, #1
    9eb6:	bd00      	pop	{pc}

00009eb8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    9eb8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ebc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9ec0:	280e      	cmp	r0, #14
    9ec2:	d001      	beq.n	9ec8 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    9ec4:	2000      	movs	r0, #0
    9ec6:	4770      	bx	lr
    9ec8:	2001      	movs	r0, #1
    9eca:	4770      	bx	lr

00009ecc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    9ecc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ed0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9ed4:	2810      	cmp	r0, #16
    9ed6:	d001      	beq.n	9edc <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    9ed8:	2000      	movs	r0, #0
    9eda:	4770      	bx	lr
    9edc:	2001      	movs	r0, #1
    9ede:	4770      	bx	lr

00009ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    9ee0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ee4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9ee8:	2806      	cmp	r0, #6
    9eea:	d003      	beq.n	9ef4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    9eec:	1c40      	adds	r0, r0, #1
    9eee:	d001      	beq.n	9ef4 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    9ef0:	2000      	movs	r0, #0
    9ef2:	4770      	bx	lr
    9ef4:	2001      	movs	r0, #1
    9ef6:	4770      	bx	lr

00009ef8 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    9ef8:	b500      	push	{lr}
    9efa:	f7ff fff1 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    9efe:	b148      	cbz	r0, 9f14 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    9f00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f04:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9f08:	2806      	cmp	r0, #6
    9f0a:	d303      	bcc.n	9f14 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    9f0c:	1c40      	adds	r0, r0, #1
    9f0e:	d001      	beq.n	9f14 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    9f10:	2001      	movs	r0, #1
    9f12:	bd00      	pop	{pc}
    9f14:	2000      	movs	r0, #0
    9f16:	bd00      	pop	{pc}

00009f18 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    9f18:	b500      	push	{lr}
    9f1a:	f7ff ffe1 	bl	9ee0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    9f1e:	b138      	cbz	r0, 9f30 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    9f20:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f24:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9f28:	2806      	cmp	r0, #6
    9f2a:	d303      	bcc.n	9f34 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    9f2c:	1c40      	adds	r0, r0, #1
    9f2e:	d001      	beq.n	9f34 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    9f30:	2000      	movs	r0, #0
    9f32:	bd00      	pop	{pc}
    9f34:	2001      	movs	r0, #1
    9f36:	bd00      	pop	{pc}

00009f38 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    9f38:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f3c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9f40:	280d      	cmp	r0, #13
    9f42:	d001      	beq.n	9f48 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    9f44:	2000      	movs	r0, #0
    9f46:	4770      	bx	lr
    9f48:	2001      	movs	r0, #1
    9f4a:	4770      	bx	lr

00009f4c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    9f4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9f50:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9f54:	2808      	cmp	r0, #8
    9f56:	d001      	beq.n	9f5c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    9f58:	2000      	movs	r0, #0
    9f5a:	4770      	bx	lr
    9f5c:	2001      	movs	r0, #1
    9f5e:	4770      	bx	lr

00009f60 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    9f60:	f7fd bbce 	b.w	7700 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00009f64 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    9f64:	f7fd bbcc 	b.w	7700 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00009f68 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    9f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f6c:	428a      	cmp	r2, r1
    9f6e:	d803      	bhi.n	9f78 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    9f70:	2179      	movs	r1, #121	; 0x79
    9f72:	2096      	movs	r0, #150	; 0x96
    9f74:	f7fd fa8c 	bl	7490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f78:	fab2 f382 	clz	r3, r2
    9f7c:	b143      	cbz	r3, 9f90 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    9f7e:	4099      	lsls	r1, r3
    9f80:	f1c3 0c20 	rsb	ip, r3, #32
    9f84:	fa20 fc0c 	lsr.w	ip, r0, ip
    9f88:	4098      	lsls	r0, r3
    9f8a:	ea41 010c 	orr.w	r1, r1, ip
    9f8e:	409a      	lsls	r2, r3
    9f90:	0c13      	lsrs	r3, r2, #16
    9f92:	fbb1 f5f3 	udiv	r5, r1, r3
    9f96:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    9f9a:	b287      	uxth	r7, r0
    9f9c:	fbb1 f0f3 	udiv	r0, r1, r3
    9fa0:	fb03 1615 	mls	r6, r3, r5, r1
    9fa4:	b294      	uxth	r4, r2
    9fa6:	fb00 f504 	mul.w	r5, r0, r4
    9faa:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    9fae:	42b5      	cmp	r5, r6
    9fb0:	d905      	bls.n	9fbe <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    9fb2:	1bad      	subs	r5, r5, r6
    9fb4:	4295      	cmp	r5, r2
    9fb6:	bf94      	ite	ls
    9fb8:	2501      	movls	r5, #1
    9fba:	2502      	movhi	r5, #2
    9fbc:	1b40      	subs	r0, r0, r5
    9fbe:	0409      	lsls	r1, r1, #16
    9fc0:	0405      	lsls	r5, r0, #16
    9fc2:	eb11 010c 	adds.w	r1, r1, ip
    9fc6:	fba0 0c02 	umull	r0, ip, r0, r2
    9fca:	1a09      	subs	r1, r1, r0
    9fcc:	fbb1 f0f3 	udiv	r0, r1, r3
    9fd0:	fbb1 fcf3 	udiv	ip, r1, r3
    9fd4:	fb03 131c 	mls	r3, r3, ip, r1
    9fd8:	fb00 f104 	mul.w	r1, r0, r4
    9fdc:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    9fe0:	4299      	cmp	r1, r3
    9fe2:	d905      	bls.n	9ff0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    9fe4:	1ac9      	subs	r1, r1, r3
    9fe6:	4291      	cmp	r1, r2
    9fe8:	bf94      	ite	ls
    9fea:	2101      	movls	r1, #1
    9fec:	2102      	movhi	r1, #2
    9fee:	1a40      	subs	r0, r0, r1
    9ff0:	4328      	orrs	r0, r5
    9ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009ff6 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    9ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ffa:	461e      	mov	r6, r3
    9ffc:	4615      	mov	r5, r2
    9ffe:	4604      	mov	r4, r0
    a000:	9f06      	ldr	r7, [sp, #24]
    a002:	f7ff ffb1 	bl	9f68 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    a006:	6030      	str	r0, [r6, #0]
    a008:	fba0 0105 	umull	r0, r1, r0, r5
    a00c:	1a20      	subs	r0, r4, r0
    a00e:	6038      	str	r0, [r7, #0]
    a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a014 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    a014:	b4f0      	push	{r4, r5, r6, r7}
    a016:	ea80 0c01 	eor.w	ip, r0, r1
    a01a:	4603      	mov	r3, r0
    a01c:	f01c 0f03 	tst.w	ip, #3
    a020:	d13c      	bne.n	a09c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a022:	f013 0f03 	tst.w	r3, #3
    a026:	d00b      	beq.n	a040 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a028:	2a00      	cmp	r2, #0
    a02a:	bf04      	itt	eq
    a02c:	bcf0      	popeq	{r4, r5, r6, r7}
    a02e:	4770      	bxeq	lr
    a030:	f811 cb01 	ldrb.w	ip, [r1], #1
    a034:	f803 cb01 	strb.w	ip, [r3], #1
    a038:	1e52      	subs	r2, r2, #1
    a03a:	f013 0f03 	tst.w	r3, #3
    a03e:	d1f3      	bne.n	a028 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a040:	2a03      	cmp	r2, #3
    a042:	d94f      	bls.n	a0e4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a044:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a048:	d24c      	bcs.n	a0e4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a04a:	f1c2 0c00 	rsb	ip, r2, #0
    a04e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a052:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a056:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a05a:	f1cc 0c00 	rsb	ip, ip, #0
    a05e:	f1bc 0f00 	cmp.w	ip, #0
    a062:	dd1b      	ble.n	a09c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a064:	1f0d      	subs	r5, r1, #4
    a066:	1f1c      	subs	r4, r3, #4
    a068:	f01c 0f01 	tst.w	ip, #1
    a06c:	d003      	beq.n	a076 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a06e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a072:	f844 6f04 	str.w	r6, [r4, #4]!
    a076:	ea5f 066c 	movs.w	r6, ip, asr #1
    a07a:	d007      	beq.n	a08c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a07c:	686f      	ldr	r7, [r5, #4]
    a07e:	6067      	str	r7, [r4, #4]
    a080:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a084:	f844 7f08 	str.w	r7, [r4, #8]!
    a088:	1e76      	subs	r6, r6, #1
    a08a:	d1f7      	bne.n	a07c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a08c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a090:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a094:	f1cc 0c00 	rsb	ip, ip, #0
    a098:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a09c:	2a00      	cmp	r2, #0
    a09e:	bf04      	itt	eq
    a0a0:	bcf0      	popeq	{r4, r5, r6, r7}
    a0a2:	4770      	bxeq	lr
    a0a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a0a8:	d226      	bcs.n	a0f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a0aa:	2a00      	cmp	r2, #0
    a0ac:	bfdc      	itt	le
    a0ae:	bcf0      	pople	{r4, r5, r6, r7}
    a0b0:	4770      	bxle	lr
    a0b2:	1e49      	subs	r1, r1, #1
    a0b4:	1e5b      	subs	r3, r3, #1
    a0b6:	f012 0f01 	tst.w	r2, #1
    a0ba:	d003      	beq.n	a0c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a0bc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a0c0:	f803 cf01 	strb.w	ip, [r3, #1]!
    a0c4:	1052      	asrs	r2, r2, #1
    a0c6:	bf04      	itt	eq
    a0c8:	bcf0      	popeq	{r4, r5, r6, r7}
    a0ca:	4770      	bxeq	lr
    a0cc:	f891 c001 	ldrb.w	ip, [r1, #1]
    a0d0:	f883 c001 	strb.w	ip, [r3, #1]
    a0d4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a0d8:	f803 cf02 	strb.w	ip, [r3, #2]!
    a0dc:	1e52      	subs	r2, r2, #1
    a0de:	d1f5      	bne.n	a0cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a0e0:	bcf0      	pop	{r4, r5, r6, r7}
    a0e2:	4770      	bx	lr
    a0e4:	2a04      	cmp	r2, #4
    a0e6:	d3d9      	bcc.n	a09c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a0e8:	f851 cb04 	ldr.w	ip, [r1], #4
    a0ec:	1f12      	subs	r2, r2, #4
    a0ee:	f843 cb04 	str.w	ip, [r3], #4
    a0f2:	2a04      	cmp	r2, #4
    a0f4:	d2f8      	bcs.n	a0e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    a0f6:	e7d1      	b.n	a09c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a0f8:	f811 cb01 	ldrb.w	ip, [r1], #1
    a0fc:	f803 cb01 	strb.w	ip, [r3], #1
    a100:	1e52      	subs	r2, r2, #1
    a102:	d1f9      	bne.n	a0f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a104:	bcf0      	pop	{r4, r5, r6, r7}
    a106:	4770      	bx	lr

0000a108 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    a108:	b470      	push	{r4, r5, r6}
    a10a:	4603      	mov	r3, r0
    a10c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    a110:	f010 0f03 	tst.w	r0, #3
    a114:	d009      	beq.n	a12a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    a116:	2a00      	cmp	r2, #0
    a118:	bf04      	itt	eq
    a11a:	bc70      	popeq	{r4, r5, r6}
    a11c:	4770      	bxeq	lr
    a11e:	f803 cb01 	strb.w	ip, [r3], #1
    a122:	1e52      	subs	r2, r2, #1
    a124:	f013 0f03 	tst.w	r3, #3
    a128:	d1f5      	bne.n	a116 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    a12a:	b2c9      	uxtb	r1, r1
    a12c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a130:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    a134:	2a03      	cmp	r2, #3
    a136:	d939      	bls.n	a1ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a138:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a13c:	d236      	bcs.n	a1ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a13e:	4251      	negs	r1, r2
    a140:	17cc      	asrs	r4, r1, #31
    a142:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    a146:	1089      	asrs	r1, r1, #2
    a148:	424e      	negs	r6, r1
    a14a:	2e00      	cmp	r6, #0
    a14c:	dd11      	ble.n	a172 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a14e:	1f19      	subs	r1, r3, #4
    a150:	f016 0f01 	tst.w	r6, #1
    a154:	bf18      	it	ne
    a156:	f841 5f04 	strne.w	r5, [r1, #4]!
    a15a:	1074      	asrs	r4, r6, #1
    a15c:	d004      	beq.n	a168 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    a15e:	604d      	str	r5, [r1, #4]
    a160:	f841 5f08 	str.w	r5, [r1, #8]!
    a164:	1e64      	subs	r4, r4, #1
    a166:	d1fa      	bne.n	a15e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    a168:	4271      	negs	r1, r6
    a16a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    a16e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a172:	2a00      	cmp	r2, #0
    a174:	bf04      	itt	eq
    a176:	bc70      	popeq	{r4, r5, r6}
    a178:	4770      	bxeq	lr
    a17a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a17e:	d21d      	bcs.n	a1bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a180:	2a00      	cmp	r2, #0
    a182:	bfdc      	itt	le
    a184:	bc70      	pople	{r4, r5, r6}
    a186:	4770      	bxle	lr
    a188:	1e59      	subs	r1, r3, #1
    a18a:	f012 0f01 	tst.w	r2, #1
    a18e:	bf18      	it	ne
    a190:	f801 cf01 	strbne.w	ip, [r1, #1]!
    a194:	1052      	asrs	r2, r2, #1
    a196:	bf04      	itt	eq
    a198:	bc70      	popeq	{r4, r5, r6}
    a19a:	4770      	bxeq	lr
    a19c:	f881 c001 	strb.w	ip, [r1, #1]
    a1a0:	f801 cf02 	strb.w	ip, [r1, #2]!
    a1a4:	1e52      	subs	r2, r2, #1
    a1a6:	d1f9      	bne.n	a19c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    a1a8:	bc70      	pop	{r4, r5, r6}
    a1aa:	4770      	bx	lr
    a1ac:	2a04      	cmp	r2, #4
    a1ae:	d3e0      	bcc.n	a172 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a1b0:	1f12      	subs	r2, r2, #4
    a1b2:	f843 5b04 	str.w	r5, [r3], #4
    a1b6:	2a04      	cmp	r2, #4
    a1b8:	d2fa      	bcs.n	a1b0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    a1ba:	e7da      	b.n	a172 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a1bc:	f803 cb01 	strb.w	ip, [r3], #1
    a1c0:	1e52      	subs	r2, r2, #1
    a1c2:	d1fb      	bne.n	a1bc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a1c4:	bc70      	pop	{r4, r5, r6}
    a1c6:	4770      	bx	lr
    a1c8:	f04f 30ff 	mov.w	r0, #4294967295
    a1cc:	4770      	bx	lr
    a1ce:	2000      	movs	r0, #0
    a1d0:	4770      	bx	lr
    a1d2:	2000      	movs	r0, #0
    a1d4:	4770      	bx	lr
    a1d6:	f04f 30ff 	mov.w	r0, #4294967295
    a1da:	4770      	bx	lr
    a1dc:	4770      	bx	lr
    a1de:	4770      	bx	lr
    a1e0:	2000      	movs	r0, #0
    a1e2:	4770      	bx	lr
    a1e4:	2100      	movs	r1, #0
    a1e6:	7001      	strb	r1, [r0, #0]
    a1e8:	4770      	bx	lr
    a1ea:	f04f 30ff 	mov.w	r0, #4294967295
    a1ee:	4770      	bx	lr
    a1f0:	f04f 30ff 	mov.w	r0, #4294967295
    a1f4:	4770      	bx	lr
    a1f6:	2100      	movs	r1, #0
    a1f8:	7001      	strb	r1, [r0, #0]
    a1fa:	4770      	bx	lr
    a1fc:	f04f 30ff 	mov.w	r0, #4294967295
    a200:	4770      	bx	lr
    a202:	f04f 30ff 	mov.w	r0, #4294967295
    a206:	4770      	bx	lr
    a208:	7800      	ldrb	r0, [r0, #0]
    a20a:	2800      	cmp	r0, #0
    a20c:	d001      	beq.n	a212 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    a20e:	f06f 0015 	mvn.w	r0, #21
    a212:	4770      	bx	lr
    a214:	2000      	movs	r0, #0
    a216:	4770      	bx	lr
    a218:	2200      	movs	r2, #0
    a21a:	f000 b802 	b.w	a222 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000a21e <mpsl_fem_init>:
    a21e:	f7f9 bda1 	b.w	3d64 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000a222 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    a222:	b570      	push	{r4, r5, r6, lr}
    a224:	4614      	mov	r4, r2
    a226:	460d      	mov	r5, r1
    a228:	1b00      	subs	r0, r0, r4
    a22a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a22e:	4288      	cmp	r0, r1
    a230:	da01      	bge.n	a236 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    a232:	4608      	mov	r0, r1
    a234:	e002      	b.n	a23c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a236:	287f      	cmp	r0, #127	; 0x7f
    a238:	dd00      	ble.n	a23c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a23a:	207f      	movs	r0, #127	; 0x7f
    a23c:	4619      	mov	r1, r3
    a23e:	b240      	sxtb	r0, r0
    a240:	f7f9 fdc4 	bl	3dcc <mpsl_tx_power_radio_supported_power_adjust>
    a244:	7028      	strb	r0, [r5, #0]
    a246:	706c      	strb	r4, [r5, #1]
    a248:	2100      	movs	r1, #0
    a24a:	4420      	add	r0, r4
    a24c:	70a9      	strb	r1, [r5, #2]
    a24e:	b240      	sxtb	r0, r0
    a250:	bd70      	pop	{r4, r5, r6, pc}
    a252:	ecd8      	.short	0xecd8
    a254:	fcf8f4f0 	.word	0xfcf8f4f0
    a258:	04030200 	.word	0x04030200
    a25c:	08070605 	.word	0x08070605
	...
    a274:	01010101 	.word	0x01010101
    a278:	02020202 	.word	0x02020202
    a27c:	03030303 	.word	0x03030303
    a280:	04040404 	.word	0x04040404
    a284:	05050505 	.word	0x05050505
    a288:	08070606 	.word	0x08070606
    a28c:	0c0b0a09 	.word	0x0c0b0a09
    a290:	0000000d 	.word	0x0000000d
	...
    a2a4:	01010100 	.word	0x01010100
    a2a8:	02020201 	.word	0x02020201
    a2ac:	03030302 	.word	0x03030302
    a2b0:	04040403 	.word	0x04040403
    a2b4:	05050504 	.word	0x05050504
    a2b8:	06060605 	.word	0x06060605
    a2bc:	00000908 	.word	0x00000908

0000a2c0 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
    a2c0:	b410      	push	{r4}
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    a2c2:	6883      	ldr	r3, [r0, #8]
    a2c4:	4903      	ldr	r1, [pc, #12]	; (a2d4 <uart_rx_enable.constprop.0+0x14>)
    a2c6:	68dc      	ldr	r4, [r3, #12]
    a2c8:	220d      	movs	r2, #13
    a2ca:	46a4      	mov	ip, r4
    a2cc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
    a2d0:	bc10      	pop	{r4}
    a2d2:	4760      	bx	ip
    a2d4:	2000311a 	.word	0x2000311a

0000a2d8 <thread0>:

	return err;
}

int thread0(void)
{	
    a2d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err;

	/* Setup leds on your board  */
	err = dk_leds_init();
    a2dc:	f006 fb32 	bl	10944 <dk_leds_init>
	if (err) {		
    a2e0:	2800      	cmp	r0, #0
    a2e2:	f040 80b6 	bne.w	a452 <thread0+0x17a>
	err = dk_buttons_init(button_changed);
    a2e6:	485d      	ldr	r0, [pc, #372]	; (a45c <thread0+0x184>)
    a2e8:	f006 fb6a 	bl	109c0 <dk_buttons_init>
		return -1;
	}	

	/* Setup buttons on your board  */
	err = init_button();
	if (err) {		
    a2ec:	4604      	mov	r4, r0
    a2ee:	2800      	cmp	r0, #0
    a2f0:	f040 80af 	bne.w	a452 <thread0+0x17a>
		return -1;
	}

	/* Verify that the UART device is ready */ 
	if (!device_is_ready(uart)){		
    a2f4:	4d5a      	ldr	r5, [pc, #360]	; (a460 <thread0+0x188>)
    a2f6:	6828      	ldr	r0, [r5, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    a2f8:	f00d fcac 	bl	17c54 <z_device_is_ready>
    a2fc:	2800      	cmp	r0, #0
    a2fe:	f000 80a8 	beq.w	a452 <thread0+0x17a>
		return -1;
	}

	/* Register the UART callback function */
	err = uart_callback_set(uart, uart_cb, NULL);
    a302:	6828      	ldr	r0, [r5, #0]
	if (api->callback_set == NULL) {
    a304:	6883      	ldr	r3, [r0, #8]
    a306:	681b      	ldr	r3, [r3, #0]
    a308:	2b00      	cmp	r3, #0
    a30a:	f000 80a2 	beq.w	a452 <thread0+0x17a>
	return api->callback_set(dev, callback, user_data);
    a30e:	4955      	ldr	r1, [pc, #340]	; (a464 <thread0+0x18c>)
    a310:	4622      	mov	r2, r4
    a312:	4798      	blx	r3
	if (err) {
    a314:	2800      	cmp	r0, #0
    a316:	f040 809c 	bne.w	a452 <thread0+0x17a>
		return -1;
	}	

	/* Bluetooth enable */
	err = bt_enable(NULL);
    a31a:	f004 f83f 	bl	e39c <bt_enable>
	if (err) {		
    a31e:	2800      	cmp	r0, #0
    a320:	f040 8097 	bne.w	a452 <thread0+0x17a>
		return -1;
	}	

	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    a324:	2301      	movs	r3, #1
    a326:	9300      	str	r3, [sp, #0]
    a328:	494f      	ldr	r1, [pc, #316]	; (a468 <thread0+0x190>)
    a32a:	4b50      	ldr	r3, [pc, #320]	; (a46c <thread0+0x194>)
    a32c:	4850      	ldr	r0, [pc, #320]	; (a470 <thread0+0x198>)
    a32e:	2203      	movs	r2, #3
    a330:	f004 fd02 	bl	ed38 <bt_le_adv_start>
	if (err) {		
    a334:	2800      	cmp	r0, #0
    a336:	f040 808c 	bne.w	a452 <thread0+0x17a>
		return -1;
	}	

	err = uart_rx_enable(uart ,rx_buf, 13,RECEIVE_TIMEOUT);
    a33a:	6828      	ldr	r0, [r5, #0]
    a33c:	f7ff ffc0 	bl	a2c0 <uart_rx_enable.constprop.0>
	if (err) {			
    a340:	2800      	cmp	r0, #0
    a342:	f040 8086 	bne.w	a452 <thread0+0x17a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    a346:	4e4b      	ldr	r6, [pc, #300]	; (a474 <thread0+0x19c>)
	}	

	while(1)
	{		
		k_sem_take(&sem, K_FOREVER);
		if(DF2301Q_CMD == 1)
    a348:	4d4b      	ldr	r5, [pc, #300]	; (a478 <thread0+0x1a0>)
		{
			DF2301Q_CMD = 0;
			if((rx_buf[0] == 0xF4) && (rx_buf[1] == 0xF5))
    a34a:	4c4c      	ldr	r4, [pc, #304]	; (a47c <thread0+0x1a4>)
    a34c:	f04f 32ff 	mov.w	r2, #4294967295
    a350:	f04f 33ff 	mov.w	r3, #4294967295
    a354:	4630      	mov	r0, r6
    a356:	f008 faaf 	bl	128b8 <z_impl_k_sem_take>
		if(DF2301Q_CMD == 1)
    a35a:	f895 8000 	ldrb.w	r8, [r5]
    a35e:	f1b8 0f01 	cmp.w	r8, #1
    a362:	d1f3      	bne.n	a34c <thread0+0x74>
			if((rx_buf[0] == 0xF4) && (rx_buf[1] == 0xF5))
    a364:	7823      	ldrb	r3, [r4, #0]
			DF2301Q_CMD = 0;
    a366:	2700      	movs	r7, #0
			if((rx_buf[0] == 0xF4) && (rx_buf[1] == 0xF5))
    a368:	2bf4      	cmp	r3, #244	; 0xf4
			DF2301Q_CMD = 0;
    a36a:	702f      	strb	r7, [r5, #0]
			if((rx_buf[0] == 0xF4) && (rx_buf[1] == 0xF5))
    a36c:	d1ee      	bne.n	a34c <thread0+0x74>
    a36e:	7863      	ldrb	r3, [r4, #1]
    a370:	2bf5      	cmp	r3, #245	; 0xf5
    a372:	d1eb      	bne.n	a34c <thread0+0x74>
			{			
				if(rx_buf[2] == 0x03)
    a374:	78a3      	ldrb	r3, [r4, #2]
    a376:	2b03      	cmp	r3, #3
    a378:	d160      	bne.n	a43c <thread0+0x164>
				{				
					if(rx_buf[7] == TEAM_HOME_PLUS_ONE_POINT)	
    a37a:	79e3      	ldrb	r3, [r4, #7]
    a37c:	2b05      	cmp	r3, #5
    a37e:	d111      	bne.n	a3a4 <thread0+0xcc>
					{
						if(adv_mfg_data.team_home_points == 99)
    a380:	4a3f      	ldr	r2, [pc, #252]	; (a480 <thread0+0x1a8>)
    a382:	7893      	ldrb	r3, [r2, #2]
    a384:	2b63      	cmp	r3, #99	; 0x63
    a386:	d001      	beq.n	a38c <thread0+0xb4>
						{
							adv_mfg_data.team_home_points = 99;
						}
						else
						{
							adv_mfg_data.team_home_points += 1; 
    a388:	3301      	adds	r3, #1
						{
							adv_mfg_data.team_home_points = 0;
						}
						else
						{
							adv_mfg_data.team_home_points -= 1; 
    a38a:	7093      	strb	r3, [r2, #2]
				{
					dk_set_led(DK_LED1, 0);
					dk_set_led(DK_LED2, 0);					
				}	

				bt_le_adv_update_data(ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    a38c:	4a37      	ldr	r2, [pc, #220]	; (a46c <thread0+0x194>)
    a38e:	4836      	ldr	r0, [pc, #216]	; (a468 <thread0+0x190>)
    a390:	2301      	movs	r3, #1
    a392:	2103      	movs	r1, #3
    a394:	f004 fb96 	bl	eac4 <bt_le_adv_update_data>
				memset(rx_buf, 0, sizeof(rx_buf));				
    a398:	220d      	movs	r2, #13
    a39a:	2100      	movs	r1, #0
    a39c:	4620      	mov	r0, r4
    a39e:	f00c fdbd 	bl	16f1c <memset>
	{		
    a3a2:	e7d3      	b.n	a34c <thread0+0x74>
					else if(rx_buf[7] == TEAM_HOME_MINUS_ONE_POINT)	
    a3a4:	3b06      	subs	r3, #6
    a3a6:	2b09      	cmp	r3, #9
    a3a8:	d8f0      	bhi.n	a38c <thread0+0xb4>
    a3aa:	e8df f003 	tbb	[pc, r3]
    a3ae:	0b05      	.short	0x0b05
    a3b0:	251f1812 	.word	0x251f1812
    a3b4:	413a322c 	.word	0x413a322c
						if(adv_mfg_data.team_home_points == 0)
    a3b8:	4a31      	ldr	r2, [pc, #196]	; (a480 <thread0+0x1a8>)
    a3ba:	7893      	ldrb	r3, [r2, #2]
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d0e5      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_home_points -= 1; 
    a3c0:	3b01      	subs	r3, #1
    a3c2:	e7e2      	b.n	a38a <thread0+0xb2>
						if(adv_mfg_data.team_guest_points == 99)
    a3c4:	4a2e      	ldr	r2, [pc, #184]	; (a480 <thread0+0x1a8>)
    a3c6:	78d3      	ldrb	r3, [r2, #3]
    a3c8:	2b63      	cmp	r3, #99	; 0x63
    a3ca:	d0df      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_guest_points += 1; 
    a3cc:	3301      	adds	r3, #1
							adv_mfg_data.team_guest_points -= 1; 
    a3ce:	70d3      	strb	r3, [r2, #3]
    a3d0:	e7dc      	b.n	a38c <thread0+0xb4>
						if(adv_mfg_data.team_guest_points == 0)
    a3d2:	4a2b      	ldr	r2, [pc, #172]	; (a480 <thread0+0x1a8>)
    a3d4:	78d3      	ldrb	r3, [r2, #3]
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	d0d8      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_guest_points -= 1; 
    a3da:	3b01      	subs	r3, #1
    a3dc:	e7f7      	b.n	a3ce <thread0+0xf6>
						if(adv_mfg_data.team_home_set == 9)
    a3de:	4a28      	ldr	r2, [pc, #160]	; (a480 <thread0+0x1a8>)
    a3e0:	7913      	ldrb	r3, [r2, #4]
    a3e2:	2b09      	cmp	r3, #9
    a3e4:	d0d2      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_home_set += 1; 
    a3e6:	3301      	adds	r3, #1
							adv_mfg_data.team_home_set -= 1; 
    a3e8:	7113      	strb	r3, [r2, #4]
    a3ea:	e7cf      	b.n	a38c <thread0+0xb4>
						if(adv_mfg_data.team_home_set == 0)
    a3ec:	4a24      	ldr	r2, [pc, #144]	; (a480 <thread0+0x1a8>)
    a3ee:	7913      	ldrb	r3, [r2, #4]
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	d0cb      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_home_set -= 1; 
    a3f4:	3b01      	subs	r3, #1
    a3f6:	e7f7      	b.n	a3e8 <thread0+0x110>
						if(adv_mfg_data.team_guest_set == 9)
    a3f8:	4a21      	ldr	r2, [pc, #132]	; (a480 <thread0+0x1a8>)
    a3fa:	7953      	ldrb	r3, [r2, #5]
    a3fc:	2b09      	cmp	r3, #9
    a3fe:	d0c5      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_guest_set += 1; 
    a400:	3301      	adds	r3, #1
							adv_mfg_data.team_guest_set -= 1; 
    a402:	7153      	strb	r3, [r2, #5]
    a404:	e7c2      	b.n	a38c <thread0+0xb4>
						if(adv_mfg_data.team_guest_set == 0)
    a406:	4a1e      	ldr	r2, [pc, #120]	; (a480 <thread0+0x1a8>)
    a408:	7953      	ldrb	r3, [r2, #5]
    a40a:	2b00      	cmp	r3, #0
    a40c:	d0be      	beq.n	a38c <thread0+0xb4>
							adv_mfg_data.team_guest_set -= 1; 
    a40e:	3b01      	subs	r3, #1
    a410:	e7f7      	b.n	a402 <thread0+0x12a>
						adv_mfg_data.serving &= ~(1 << TEAM_GUEST_SERVING_BIT);						
    a412:	4a1b      	ldr	r2, [pc, #108]	; (a480 <thread0+0x1a8>)
    a414:	7993      	ldrb	r3, [r2, #6]
    a416:	f023 0302 	bic.w	r3, r3, #2
    a41a:	f043 0301 	orr.w	r3, r3, #1
						adv_mfg_data.serving &= ~(1 << TEAM_HOME_SERVING_BIT);	
    a41e:	7193      	strb	r3, [r2, #6]
    a420:	e7b4      	b.n	a38c <thread0+0xb4>
    a422:	4a17      	ldr	r2, [pc, #92]	; (a480 <thread0+0x1a8>)
    a424:	7993      	ldrb	r3, [r2, #6]
    a426:	f023 0301 	bic.w	r3, r3, #1
    a42a:	f043 0302 	orr.w	r3, r3, #2
    a42e:	e7f6      	b.n	a41e <thread0+0x146>
						adv_mfg_data.team_home_points = 0;
    a430:	4b13      	ldr	r3, [pc, #76]	; (a480 <thread0+0x1a8>)
    a432:	2200      	movs	r2, #0
    a434:	805a      	strh	r2, [r3, #2]
						adv_mfg_data.team_home_set = 0;
    a436:	809a      	strh	r2, [r3, #4]
						adv_mfg_data.serving = 0;
    a438:	719a      	strb	r2, [r3, #6]
    a43a:	e7a7      	b.n	a38c <thread0+0xb4>
				else if(rx_buf[2] == 0x02)
    a43c:	2b02      	cmp	r3, #2
    a43e:	d1a5      	bne.n	a38c <thread0+0xb4>
					dk_set_led(DK_LED1, 0);
    a440:	4639      	mov	r1, r7
    a442:	4638      	mov	r0, r7
    a444:	f006 fb52 	bl	10aec <dk_set_led>
					dk_set_led(DK_LED2, 0);					
    a448:	4639      	mov	r1, r7
    a44a:	4640      	mov	r0, r8
    a44c:	f006 fb4e 	bl	10aec <dk_set_led>
    a450:	e79c      	b.n	a38c <thread0+0xb4>
			}
			//k_sleep(K_MSEC(500));
		}		
	}
}
    a452:	f04f 30ff 	mov.w	r0, #4294967295
    a456:	b002      	add	sp, #8
    a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a45c:	00016101 	.word	0x00016101
    a460:	20000398 	.word	0x20000398
    a464:	0000a485 	.word	0x0000a485
    a468:	00018b50 	.word	0x00018b50
    a46c:	00018b48 	.word	0x00018b48
    a470:	2000039c 	.word	0x2000039c
    a474:	20000610 	.word	0x20000610
    a478:	20003118 	.word	0x20003118
    a47c:	2000311a 	.word	0x2000311a
    a480:	20000524 	.word	0x20000524

0000a484 <uart_cb>:
{
    a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (evt->type) {
    a486:	780e      	ldrb	r6, [r1, #0]
    a488:	2e02      	cmp	r6, #2
{
    a48a:	4604      	mov	r4, r0
    a48c:	460d      	mov	r5, r1
	switch (evt->type) {
    a48e:	d002      	beq.n	a496 <uart_cb+0x12>
    a490:	2e05      	cmp	r6, #5
    a492:	d036      	beq.n	a502 <uart_cb+0x7e>
}
    a494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
    a496:	6883      	ldr	r3, [r0, #8]
	    if(flag == 0)
    a498:	4f1c      	ldr	r7, [pc, #112]	; (a50c <uart_cb+0x88>)
    a49a:	695b      	ldr	r3, [r3, #20]
    a49c:	4798      	blx	r3
    a49e:	783b      	ldrb	r3, [r7, #0]
    a4a0:	b9cb      	cbnz	r3, a4d6 <uart_cb+0x52>
			dk_set_led(DK_LED3, 1);	
    a4a2:	2101      	movs	r1, #1
    a4a4:	4630      	mov	r0, r6
    a4a6:	f006 fb21 	bl	10aec <dk_set_led>
			flag = 1;
    a4aa:	2301      	movs	r3, #1
			flag = 0;
    a4ac:	703b      	strb	r3, [r7, #0]
		if((evt->data.rx.len) == 13)
    a4ae:	68eb      	ldr	r3, [r5, #12]
    a4b0:	2b0d      	cmp	r3, #13
    a4b2:	d118      	bne.n	a4e6 <uart_cb+0x62>
			uart_rx_enable(dev ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
    a4b4:	4620      	mov	r0, r4
    a4b6:	f7ff ff03 	bl	a2c0 <uart_rx_enable.constprop.0>
			DF2301Q_CMD = 1;
    a4ba:	4b15      	ldr	r3, [pc, #84]	; (a510 <uart_cb+0x8c>)
    a4bc:	2201      	movs	r2, #1
    a4be:	701a      	strb	r2, [r3, #0]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a4c0:	4814      	ldr	r0, [pc, #80]	; (a514 <uart_cb+0x90>)
    a4c2:	f008 f9d3 	bl	1286c <z_impl_k_sem_give>
		uart_rx_enable(dev ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
    a4c6:	4620      	mov	r0, r4
    a4c8:	f7ff fefa 	bl	a2c0 <uart_rx_enable.constprop.0>
    a4cc:	4811      	ldr	r0, [pc, #68]	; (a514 <uart_cb+0x90>)
}
    a4ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a4d2:	f008 b9cb 	b.w	1286c <z_impl_k_sem_give>
		else if(flag == 1)
    a4d6:	2b01      	cmp	r3, #1
    a4d8:	d1e9      	bne.n	a4ae <uart_cb+0x2a>
			dk_set_led(DK_LED3, 0);
    a4da:	2100      	movs	r1, #0
    a4dc:	4630      	mov	r0, r6
    a4de:	f006 fb05 	bl	10aec <dk_set_led>
			flag = 0;
    a4e2:	2300      	movs	r3, #0
    a4e4:	e7e2      	b.n	a4ac <uart_cb+0x28>
		else if((evt->data.rx.len) == 12)
    a4e6:	2b0c      	cmp	r3, #12
    a4e8:	d1ed      	bne.n	a4c6 <uart_cb+0x42>
			dk_set_led(DK_LED1, 0);
    a4ea:	2100      	movs	r1, #0
    a4ec:	4608      	mov	r0, r1
    a4ee:	f006 fafd 	bl	10aec <dk_set_led>
			dk_set_led(DK_LED2, 0);
    a4f2:	2100      	movs	r1, #0
    a4f4:	2001      	movs	r0, #1
    a4f6:	f006 faf9 	bl	10aec <dk_set_led>
			DF2301Q_CMD = 0;
    a4fa:	4b05      	ldr	r3, [pc, #20]	; (a510 <uart_cb+0x8c>)
    a4fc:	2200      	movs	r2, #0
    a4fe:	701a      	strb	r2, [r3, #0]
    a500:	e7e1      	b.n	a4c6 <uart_cb+0x42>
}
    a502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		uart_rx_enable(dev ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
    a506:	f7ff bedb 	b.w	a2c0 <uart_rx_enable.constprop.0>
    a50a:	bf00      	nop
    a50c:	20003119 	.word	0x20003119
    a510:	20003118 	.word	0x20003118
    a514:	20000610 	.word	0x20000610

0000a518 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a51c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    a51e:	0784      	lsls	r4, r0, #30
{
    a520:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    a522:	f002 0304 	and.w	r3, r2, #4
    a526:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    a528:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    a52c:	f103 0301 	add.w	r3, r3, #1
    a530:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    a534:	9203      	str	r2, [sp, #12]
    a536:	4605      	mov	r5, r0
    a538:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    a53a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    a53c:	f040 81be 	bne.w	a8bc <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    a540:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    a542:	b130      	cbz	r0, a552 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    a544:	2907      	cmp	r1, #7
    a546:	d809      	bhi.n	a55c <cbvprintf_package+0x44>
		return -ENOSPC;
    a548:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    a54c:	b011      	add	sp, #68	; 0x44
    a54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    a552:	f001 0607 	and.w	r6, r1, #7
    a556:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    a558:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    a55c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    a55e:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    a562:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    a564:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    a568:	f04f 33ff 	mov.w	r3, #4294967295
    a56c:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    a56e:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    a572:	464f      	mov	r7, r9
	bool parsing = false;
    a574:	46cb      	mov	fp, r9
	size = sizeof(char *);
    a576:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    a578:	b10d      	cbz	r5, a57e <cbvprintf_package+0x66>
				*(const char **)buf = s;
    a57a:	9a00      	ldr	r2, [sp, #0]
    a57c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a57e:	9805      	ldr	r0, [sp, #20]
    a580:	2800      	cmp	r0, #0
    a582:	f300 80eb 	bgt.w	a75c <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    a586:	489a      	ldr	r0, [pc, #616]	; (a7f0 <cbvprintf_package+0x2d8>)
    a588:	9a00      	ldr	r2, [sp, #0]
    a58a:	4282      	cmp	r2, r0
    a58c:	d303      	bcc.n	a596 <cbvprintf_package+0x7e>
    a58e:	4899      	ldr	r0, [pc, #612]	; (a7f4 <cbvprintf_package+0x2dc>)
    a590:	4282      	cmp	r2, r0
    a592:	f0c0 80e3 	bcc.w	a75c <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    a596:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    a598:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    a59c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    a59e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    a5a2:	f100 8106 	bmi.w	a7b2 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    a5a6:	2f0f      	cmp	r7, #15
    a5a8:	f200 80b4 	bhi.w	a714 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    a5ac:	2d00      	cmp	r5, #0
    a5ae:	f000 8108 	beq.w	a7c2 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    a5b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
    a5b6:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    a5ba:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    a5bc:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    a5c0:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    a5c4:	9804      	ldr	r0, [sp, #16]
    a5c6:	3001      	adds	r0, #1
    a5c8:	9004      	str	r0, [sp, #16]
    a5ca:	e0ea      	b.n	a7a2 <cbvprintf_package+0x28a>
			switch (*fmt) {
    a5cc:	287a      	cmp	r0, #122	; 0x7a
    a5ce:	d860      	bhi.n	a692 <cbvprintf_package+0x17a>
    a5d0:	284b      	cmp	r0, #75	; 0x4b
    a5d2:	d80e      	bhi.n	a5f2 <cbvprintf_package+0xda>
    a5d4:	2847      	cmp	r0, #71	; 0x47
    a5d6:	d85c      	bhi.n	a692 <cbvprintf_package+0x17a>
    a5d8:	2829      	cmp	r0, #41	; 0x29
    a5da:	d82f      	bhi.n	a63c <cbvprintf_package+0x124>
    a5dc:	2825      	cmp	r0, #37	; 0x25
    a5de:	d055      	beq.n	a68c <cbvprintf_package+0x174>
    a5e0:	d857      	bhi.n	a692 <cbvprintf_package+0x17a>
    a5e2:	2820      	cmp	r0, #32
    a5e4:	d07d      	beq.n	a6e2 <cbvprintf_package+0x1ca>
    a5e6:	3823      	subs	r0, #35	; 0x23
    a5e8:	f1d0 0b00 	rsbs	fp, r0, #0
    a5ec:	eb4b 0b00 	adc.w	fp, fp, r0
    a5f0:	e077      	b.n	a6e2 <cbvprintf_package+0x1ca>
    a5f2:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    a5f6:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    a5fa:	d84a      	bhi.n	a692 <cbvprintf_package+0x17a>
    a5fc:	e8df f00c 	tbb	[pc, ip]
    a600:	49494971 	.word	0x49494971
    a604:	49494949 	.word	0x49494949
    a608:	49494949 	.word	0x49494949
    a60c:	4949494c 	.word	0x4949494c
    a610:	49494949 	.word	0x49494949
    a614:	4c495a49 	.word	0x4c495a49
    a618:	5a5a5a4c 	.word	0x5a5a5a4c
    a61c:	496e4c71 	.word	0x496e4c71
    a620:	4c184971 	.word	0x4c184971
    a624:	83494918 	.word	0x83494918
    a628:	49494c80 	.word	0x49494c80
    a62c:	494c      	.short	0x494c
    a62e:	80          	.byte	0x80
    a62f:	00          	.byte	0x00
    a630:	2000      	movs	r0, #0
    a632:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    a636:	f04f 0a04 	mov.w	sl, #4
    a63a:	e039      	b.n	a6b0 <cbvprintf_package+0x198>
			switch (*fmt) {
    a63c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    a640:	fa5f fc8c 	uxtb.w	ip, ip
    a644:	2201      	movs	r2, #1
    a646:	fa02 fc0c 	lsl.w	ip, r2, ip
    a64a:	ea1c 0f0e 	tst.w	ip, lr
    a64e:	d148      	bne.n	a6e2 <cbvprintf_package+0x1ca>
    a650:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    a654:	d12e      	bne.n	a6b4 <cbvprintf_package+0x19c>
    a656:	ea1c 0b02 	ands.w	fp, ip, r2
    a65a:	d042      	beq.n	a6e2 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    a65c:	3c01      	subs	r4, #1
    a65e:	4454      	add	r4, sl
    a660:	f1ca 0c00 	rsb	ip, sl, #0
    a664:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    a668:	2d00      	cmp	r5, #0
    a66a:	d061      	beq.n	a730 <cbvprintf_package+0x218>
    a66c:	eba3 0c05 	sub.w	ip, r3, r5
    a670:	44a4      	add	ip, r4
    a672:	45b4      	cmp	ip, r6
    a674:	f63f af68 	bhi.w	a548 <cbvprintf_package+0x30>
		if (is_str_arg) {
    a678:	2800      	cmp	r0, #0
    a67a:	d168      	bne.n	a74e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    a67c:	2b04      	cmp	r3, #4
    a67e:	d147      	bne.n	a710 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    a680:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    a684:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    a686:	3404      	adds	r4, #4
    a688:	2304      	movs	r3, #4
    a68a:	e02a      	b.n	a6e2 <cbvprintf_package+0x1ca>
				arg_idx--;
    a68c:	9a01      	ldr	r2, [sp, #4]
    a68e:	3a01      	subs	r2, #1
    a690:	9201      	str	r2, [sp, #4]
				parsing = false;
    a692:	f04f 0b00 	mov.w	fp, #0
				continue;
    a696:	e024      	b.n	a6e2 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    a698:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    a69c:	286c      	cmp	r0, #108	; 0x6c
    a69e:	d134      	bne.n	a70a <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    a6a0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    a6a4:	2000      	movs	r0, #0
    a6a6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    a6a8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    a6aa:	d1c4      	bne.n	a636 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    a6ac:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    a6b0:	4653      	mov	r3, sl
    a6b2:	e7d3      	b.n	a65c <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    a6b4:	f108 0807 	add.w	r8, r8, #7
    a6b8:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    a6bc:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    a6be:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    a6c2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    a6c6:	b135      	cbz	r5, a6d6 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    a6c8:	9806      	ldr	r0, [sp, #24]
    a6ca:	4420      	add	r0, r4
    a6cc:	42b0      	cmp	r0, r6
    a6ce:	f63f af3b 	bhi.w	a548 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    a6d2:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    a6d6:	3408      	adds	r4, #8
				parsing = false;
    a6d8:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    a6dc:	f04f 0a08 	mov.w	sl, #8
    a6e0:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    a6e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    a6e6:	2800      	cmp	r0, #0
    a6e8:	d078      	beq.n	a7dc <cbvprintf_package+0x2c4>
			if (!parsing) {
    a6ea:	f1bb 0f00 	cmp.w	fp, #0
    a6ee:	f47f af6d 	bne.w	a5cc <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    a6f2:	2825      	cmp	r0, #37	; 0x25
    a6f4:	d1f5      	bne.n	a6e2 <cbvprintf_package+0x1ca>
					arg_idx++;
    a6f6:	9b01      	ldr	r3, [sp, #4]
    a6f8:	3301      	adds	r3, #1
    a6fa:	9301      	str	r3, [sp, #4]
					parsing = true;
    a6fc:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    a700:	f04f 0a04 	mov.w	sl, #4
    a704:	e7ec      	b.n	a6e0 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    a706:	4658      	mov	r0, fp
    a708:	e793      	b.n	a632 <cbvprintf_package+0x11a>
    a70a:	2000      	movs	r0, #0
				parsing = false;
    a70c:	4683      	mov	fp, r0
    a70e:	e7a5      	b.n	a65c <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    a710:	2b08      	cmp	r3, #8
    a712:	d002      	beq.n	a71a <cbvprintf_package+0x202>
					return -EINVAL;
    a714:	f06f 0015 	mvn.w	r0, #21
    a718:	e718      	b.n	a54c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    a71a:	f108 0807 	add.w	r8, r8, #7
    a71e:	f028 0807 	bic.w	r8, r8, #7
    a722:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    a726:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    a72a:	3408      	adds	r4, #8
    a72c:	2308      	movs	r3, #8
    a72e:	e7d8      	b.n	a6e2 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    a730:	b968      	cbnz	r0, a74e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    a732:	2b04      	cmp	r3, #4
    a734:	d102      	bne.n	a73c <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    a736:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    a73a:	e7a4      	b.n	a686 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    a73c:	2b08      	cmp	r3, #8
    a73e:	d1e9      	bne.n	a714 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    a740:	f108 0807 	add.w	r8, r8, #7
    a744:	f028 0807 	bic.w	r8, r8, #7
    a748:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    a74c:	e7ed      	b.n	a72a <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a74e:	9a05      	ldr	r2, [sp, #20]
    a750:	3a01      	subs	r2, #1
    a752:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    a754:	f858 2b04 	ldr.w	r2, [r8], #4
    a758:	9200      	str	r2, [sp, #0]
    a75a:	e70d      	b.n	a578 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    a75c:	9a03      	ldr	r2, [sp, #12]
    a75e:	0790      	lsls	r0, r2, #30
    a760:	d520      	bpl.n	a7a4 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    a762:	eba4 0e05 	sub.w	lr, r4, r5
    a766:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a76a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    a76e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    a772:	d2cf      	bcs.n	a714 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    a774:	2f0f      	cmp	r7, #15
    a776:	d8cd      	bhi.n	a714 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    a778:	b1f5      	cbz	r5, a7b8 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    a77a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    a77e:	eb0d 0e02 	add.w	lr, sp, r2
    a782:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    a784:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    a786:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    a78a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    a78e:	f1bc 0f00 	cmp.w	ip, #0
    a792:	f43f af17 	beq.w	a5c4 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    a796:	f060 007f 	orn	r0, r0, #127	; 0x7f
    a79a:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    a79e:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    a7a2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    a7a4:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    a7a8:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    a7aa:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    a7ac:	f64f 7eda 	movw	lr, #65498	; 0xffda
    a7b0:	e797      	b.n	a6e2 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    a7b2:	f04f 0c00 	mov.w	ip, #0
    a7b6:	e7da      	b.n	a76e <cbvprintf_package+0x256>
				} else if (is_ro) {
    a7b8:	f1bc 0f00 	cmp.w	ip, #0
    a7bc:	d001      	beq.n	a7c2 <cbvprintf_package+0x2aa>
					len += 1;
    a7be:	3601      	adds	r6, #1
    a7c0:	e7ef      	b.n	a7a2 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    a7c2:	9802      	ldr	r0, [sp, #8]
					len += 2;
    a7c4:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    a7c6:	2800      	cmp	r0, #0
    a7c8:	d1eb      	bne.n	a7a2 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    a7ca:	9800      	ldr	r0, [sp, #0]
    a7cc:	e9cd 3106 	strd	r3, r1, [sp, #24]
    a7d0:	f00c fb62 	bl	16e98 <strlen>
    a7d4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    a7d8:	4406      	add	r6, r0
    a7da:	e7e2      	b.n	a7a2 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    a7dc:	1b63      	subs	r3, r4, r5
    a7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a7e2:	d297      	bcs.n	a714 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    a7e4:	b945      	cbnz	r5, a7f8 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    a7e6:	f1a6 0408 	sub.w	r4, r6, #8
    a7ea:	18e0      	adds	r0, r4, r3
    a7ec:	e6ae      	b.n	a54c <cbvprintf_package+0x34>
    a7ee:	bf00      	nop
    a7f0:	000186dc 	.word	0x000186dc
    a7f4:	0001a288 	.word	0x0001a288
	if (rws_pos_en) {
    a7f8:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    a7fa:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    a7fc:	089b      	lsrs	r3, r3, #2
    a7fe:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    a800:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    a804:	b1c2      	cbz	r2, a838 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    a806:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    a808:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    a80c:	f1b9 0f00 	cmp.w	r9, #0
    a810:	d005      	beq.n	a81e <cbvprintf_package+0x306>
    a812:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    a814:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    a816:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    a81a:	4297      	cmp	r7, r2
    a81c:	d10e      	bne.n	a83c <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    a81e:	f1c5 0301 	rsb	r3, r5, #1
    a822:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    a826:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    a82a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    a82c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    a830:	4557      	cmp	r7, sl
    a832:	d112      	bne.n	a85a <cbvprintf_package+0x342>
	return BUF_OFFSET;
    a834:	1b60      	subs	r0, r4, r5
    a836:	e689      	b.n	a54c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    a838:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    a83a:	e7e5      	b.n	a808 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    a83c:	f810 3b01 	ldrb.w	r3, [r0], #1
    a840:	0619      	lsls	r1, r3, #24
    a842:	d508      	bpl.n	a856 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    a844:	eb04 0e0c 	add.w	lr, r4, ip
    a848:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    a84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    a84e:	f63f ae7b 	bhi.w	a548 <cbvprintf_package+0x30>
			*buf++ = pos;
    a852:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    a856:	3201      	adds	r2, #1
    a858:	e7df      	b.n	a81a <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    a85a:	f1b9 0f00 	cmp.w	r9, #0
    a85e:	d003      	beq.n	a868 <cbvprintf_package+0x350>
    a860:	f998 2000 	ldrsb.w	r2, [r8]
    a864:	2a00      	cmp	r2, #0
    a866:	db17      	blt.n	a898 <cbvprintf_package+0x380>
		if (rws_pos_en) {
    a868:	9b02      	ldr	r3, [sp, #8]
    a86a:	b1d3      	cbz	r3, a8a2 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    a86c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    a870:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    a874:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    a876:	9b01      	ldr	r3, [sp, #4]
    a878:	1898      	adds	r0, r3, r2
    a87a:	4420      	add	r0, r4
    a87c:	42b0      	cmp	r0, r6
    a87e:	f63f ae63 	bhi.w	a548 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    a882:	f898 0000 	ldrb.w	r0, [r8]
    a886:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    a88a:	9900      	ldr	r1, [sp, #0]
    a88c:	9203      	str	r2, [sp, #12]
    a88e:	4620      	mov	r0, r4
    a890:	f00c fb39 	bl	16f06 <memcpy>
		buf += size;
    a894:	9a03      	ldr	r2, [sp, #12]
    a896:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    a898:	f10a 0a01 	add.w	sl, sl, #1
    a89c:	f108 0801 	add.w	r8, r8, #1
    a8a0:	e7c6      	b.n	a830 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    a8a2:	f898 2000 	ldrb.w	r2, [r8]
    a8a6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    a8aa:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    a8ac:	9b02      	ldr	r3, [sp, #8]
    a8ae:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    a8b2:	9800      	ldr	r0, [sp, #0]
    a8b4:	f00c faf0 	bl	16e98 <strlen>
    a8b8:	1c42      	adds	r2, r0, #1
    a8ba:	e7dc      	b.n	a876 <cbvprintf_package+0x35e>
		return -EFAULT;
    a8bc:	f06f 000d 	mvn.w	r0, #13
    a8c0:	e644      	b.n	a54c <cbvprintf_package+0x34>
    a8c2:	bf00      	nop

0000a8c4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8c8:	b095      	sub	sp, #84	; 0x54
    a8ca:	af00      	add	r7, sp, #0
    a8cc:	4604      	mov	r4, r0
    a8ce:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    a8d2:	61bb      	str	r3, [r7, #24]
    a8d4:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    a8d8:	627a      	str	r2, [r7, #36]	; 0x24
    a8da:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    a8dc:	6239      	str	r1, [r7, #32]
    a8de:	b951      	cbnz	r1, a8f6 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    a8e0:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    a8e2:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    a8e4:	7880      	ldrb	r0, [r0, #2]
    a8e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a8ea:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    a8ec:	6a3b      	ldr	r3, [r7, #32]
    a8ee:	429e      	cmp	r6, r3
    a8f0:	d81a      	bhi.n	a928 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    a8f2:	1b03      	subs	r3, r0, r4
    a8f4:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    a8f6:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    a8fa:	78e3      	ldrb	r3, [r4, #3]
    a8fc:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    a8fe:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    a900:	f1ba 0f00 	cmp.w	sl, #0
    a904:	d002      	beq.n	a90c <cbprintf_package_convert+0x48>
    a906:	f01b 0f01 	tst.w	fp, #1
    a90a:	d117      	bne.n	a93c <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    a90c:	697b      	ldr	r3, [r7, #20]
    a90e:	bb5b      	cbnz	r3, a968 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a912:	b11b      	cbz	r3, a91c <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    a914:	69ba      	ldr	r2, [r7, #24]
    a916:	6a39      	ldr	r1, [r7, #32]
    a918:	4620      	mov	r0, r4
    a91a:	4798      	blx	r3
		}

		return in_len;
    a91c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    a91e:	4628      	mov	r0, r5
    a920:	3754      	adds	r7, #84	; 0x54
    a922:	46bd      	mov	sp, r7
    a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    a928:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    a92a:	4628      	mov	r0, r5
    a92c:	f00c fab4 	bl	16e98 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    a930:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    a932:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    a934:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    a936:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    a938:	623b      	str	r3, [r7, #32]
    a93a:	e7d7      	b.n	a8ec <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    a93c:	f894 8000 	ldrb.w	r8, [r4]
    a940:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    a942:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    a946:	ea4f 0288 	mov.w	r2, r8, lsl #2
    a94a:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    a94c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    a950:	2b00      	cmp	r3, #0
    a952:	f040 8101 	bne.w	ab58 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    a956:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    a958:	46c1      	mov	r9, r8
    a95a:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    a95e:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    a960:	454b      	cmp	r3, r9
    a962:	d14e      	bne.n	aa02 <cbprintf_package_convert+0x13e>
    a964:	44d0      	add	r8, sl
    a966:	e013      	b.n	a990 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    a968:	f01b 0f02 	tst.w	fp, #2
    a96c:	d0d0      	beq.n	a910 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    a96e:	f894 8000 	ldrb.w	r8, [r4]
    a972:	ea4f 0388 	mov.w	r3, r8, lsl #2
    a976:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    a978:	6863      	ldr	r3, [r4, #4]
    a97a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    a97e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    a982:	2b00      	cmp	r3, #0
    a984:	d178      	bne.n	aa78 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    a986:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    a988:	f1ba 0f00 	cmp.w	sl, #0
    a98c:	d14e      	bne.n	aa2c <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    a98e:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    a990:	f01b 0f05 	tst.w	fp, #5
    a994:	bf0c      	ite	eq
    a996:	2302      	moveq	r3, #2
    a998:	2301      	movne	r3, #1
    a99a:	627b      	str	r3, [r7, #36]	; 0x24
    a99c:	697b      	ldr	r3, [r7, #20]
    a99e:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    a9a2:	f00b 0302 	and.w	r3, fp, #2
    a9a6:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    a9a8:	45d0      	cmp	r8, sl
    a9aa:	d0b8      	beq.n	a91e <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    a9ac:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    a9b0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    a9b4:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    a9b8:	4bac      	ldr	r3, [pc, #688]	; (ac6c <cbprintf_package_convert+0x3a8>)
    a9ba:	4599      	cmp	r9, r3
    a9bc:	d302      	bcc.n	a9c4 <cbprintf_package_convert+0x100>
    a9be:	4bac      	ldr	r3, [pc, #688]	; (ac70 <cbprintf_package_convert+0x3ac>)
    a9c0:	4599      	cmp	r9, r3
    a9c2:	d339      	bcc.n	aa38 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    a9c4:	693b      	ldr	r3, [r7, #16]
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	d043      	beq.n	aa52 <cbprintf_package_convert+0x18e>
    a9ca:	69f8      	ldr	r0, [r7, #28]
    a9cc:	f00b fbca 	bl	16164 <is_ptr>
    a9d0:	2800      	cmp	r0, #0
    a9d2:	d03e      	beq.n	aa52 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    a9d4:	46e9      	mov	r9, sp
    a9d6:	b08a      	sub	sp, #40	; 0x28
    a9d8:	466a      	mov	r2, sp
    a9da:	4ba6      	ldr	r3, [pc, #664]	; (ac74 <cbprintf_package_convert+0x3b0>)
    a9dc:	6153      	str	r3, [r2, #20]
    a9de:	69fb      	ldr	r3, [r7, #28]
    a9e0:	e9c2 3106 	strd	r3, r1, [r2, #24]
    a9e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    a9e8:	8413      	strh	r3, [r2, #32]
    a9ea:	4ba3      	ldr	r3, [pc, #652]	; (ac78 <cbprintf_package_convert+0x3b4>)
    a9ec:	f842 3f10 	str.w	r3, [r2, #16]!
    a9f0:	48a2      	ldr	r0, [pc, #648]	; (ac7c <cbprintf_package_convert+0x3b8>)
    a9f2:	2300      	movs	r3, #0
    a9f4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    a9f8:	f001 f8ce 	bl	bb98 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    a9fc:	3d02      	subs	r5, #2
    a9fe:	46cd      	mov	sp, r9
				continue;
    aa00:	e7d2      	b.n	a9a8 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    aa02:	f819 2b01 	ldrb.w	r2, [r9], #1
    aa06:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    aa08:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    aa0c:	f00c fa44 	bl	16e98 <strlen>
				if (strl && strl_cnt < strl_len) {
    aa10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    aa14:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    aa16:	b13a      	cbz	r2, aa28 <cbprintf_package_convert+0x164>
    aa18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    aa1c:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    aa1e:	bf3e      	ittt	cc
    aa20:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    aa22:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    aa26:	3601      	addcc	r6, #1
				out_len += len;
    aa28:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    aa2a:	e799      	b.n	a960 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    aa2c:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    aa30:	bf1c      	itt	ne
    aa32:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    aa34:	44d0      	addne	r8, sl
    aa36:	e7ab      	b.n	a990 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    aa38:	693b      	ldr	r3, [r7, #16]
    aa3a:	b123      	cbz	r3, aa46 <cbprintf_package_convert+0x182>
    aa3c:	69f8      	ldr	r0, [r7, #28]
    aa3e:	f00b fb91 	bl	16164 <is_ptr>
    aa42:	2800      	cmp	r0, #0
    aa44:	d1c6      	bne.n	a9d4 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    aa46:	f01b 0f01 	tst.w	fp, #1
    aa4a:	d105      	bne.n	aa58 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa4e:	1aed      	subs	r5, r5, r3
    aa50:	e7aa      	b.n	a9a8 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    aa52:	6a3b      	ldr	r3, [r7, #32]
    aa54:	2b00      	cmp	r3, #0
    aa56:	d0a7      	beq.n	a9a8 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    aa58:	4648      	mov	r0, r9
    aa5a:	f00c fa1d 	bl	16e98 <strlen>
				if (strl && strl_cnt < strl_len) {
    aa5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    aa60:	b143      	cbz	r3, aa74 <cbprintf_package_convert+0x1b0>
    aa62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    aa66:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    aa68:	bf3f      	itttt	cc
    aa6a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    aa6c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    aa6e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    aa72:	3601      	addcc	r6, #1
				out_len += (len - 1);
    aa74:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    aa76:	e797      	b.n	a9a8 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    aa78:	f1ba 0f00 	cmp.w	sl, #0
    aa7c:	d071      	beq.n	ab62 <cbprintf_package_convert+0x29e>
    aa7e:	f01b 0604 	ands.w	r6, fp, #4
    aa82:	d071      	beq.n	ab68 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    aa84:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    aa86:	2600      	movs	r6, #0
		dst = keep_str_pos;
    aa88:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    aa8c:	4652      	mov	r2, sl
    aa8e:	4641      	mov	r1, r8
    aa90:	f00c fa39 	bl	16f06 <memcpy>
	str_pos += ros_nbr;
    aa94:	697b      	ldr	r3, [r7, #20]
    aa96:	005b      	lsls	r3, r3, #1
    aa98:	60bb      	str	r3, [r7, #8]
    aa9a:	697b      	ldr	r3, [r7, #20]
    aa9c:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    aa9e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    aaa2:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    aaa4:	f00b 0302 	and.w	r3, fp, #2
    aaa8:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    aaaa:	697b      	ldr	r3, [r7, #20]
    aaac:	4598      	cmp	r8, r3
    aaae:	d15d      	bne.n	ab6c <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    aab0:	7823      	ldrb	r3, [r4, #0]
    aab2:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    aab4:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    aab6:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    aaba:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    aabe:	bf0c      	ite	eq
    aac0:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    aac4:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    aac6:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    aaca:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    aacc:	f040 809d 	bne.w	ac0a <cbprintf_package_convert+0x346>
    aad0:	f01b 0f04 	tst.w	fp, #4
    aad4:	bf14      	ite	ne
    aad6:	4648      	movne	r0, r9
    aad8:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    aada:	f894 b002 	ldrb.w	fp, [r4, #2]
    aade:	f894 8003 	ldrb.w	r8, [r4, #3]
    aae2:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    aae4:	7062      	strb	r2, [r4, #1]
    aae6:	70a0      	strb	r0, [r4, #2]
    aae8:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    aaea:	69ba      	ldr	r2, [r7, #24]
    aaec:	68f9      	ldr	r1, [r7, #12]
    aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aaf0:	4620      	mov	r0, r4
    aaf2:	4798      	blx	r3
	if (rv < 0) {
    aaf4:	1e05      	subs	r5, r0, #0
    aaf6:	f6ff af12 	blt.w	a91e <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    aafa:	69fb      	ldr	r3, [r7, #28]
    aafc:	7023      	strb	r3, [r4, #0]
    aafe:	693b      	ldr	r3, [r7, #16]
    ab00:	7063      	strb	r3, [r4, #1]
    ab02:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    ab06:	69ba      	ldr	r2, [r7, #24]
    ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    ab0a:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    ab0e:	4649      	mov	r1, r9
    ab10:	f107 0040 	add.w	r0, r7, #64	; 0x40
    ab14:	4798      	blx	r3
	if (rv < 0) {
    ab16:	f1b0 0800 	subs.w	r8, r0, #0
    ab1a:	f2c0 80a3 	blt.w	ac64 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    ab1e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    ab20:	69ba      	ldr	r2, [r7, #24]
    ab22:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    ab24:	eba3 010a 	sub.w	r1, r3, sl
    ab28:	68fb      	ldr	r3, [r7, #12]
    ab2a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    ab2c:	68bb      	ldr	r3, [r7, #8]
    ab2e:	1ac9      	subs	r1, r1, r3
    ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ab32:	4798      	blx	r3
	if (rv < 0) {
    ab34:	2800      	cmp	r0, #0
    ab36:	f2c0 8097 	blt.w	ac68 <cbprintf_package_convert+0x3a4>
	out_len += rv;
    ab3a:	44a8      	add	r8, r5
	out_len += rv;
    ab3c:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    ab40:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    ab44:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    ab48:	45b3      	cmp	fp, r6
    ab4a:	d360      	bcc.n	ac0e <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    ab4c:	2100      	movs	r1, #0
    ab4e:	69ba      	ldr	r2, [r7, #24]
    ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ab52:	4608      	mov	r0, r1
    ab54:	4798      	blx	r3
	return out_len;
    ab56:	e6e2      	b.n	a91e <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    ab58:	f04f 0900 	mov.w	r9, #0
    ab5c:	f107 0030 	add.w	r0, r7, #48	; 0x30
    ab60:	e794      	b.n	aa8c <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    ab62:	4656      	mov	r6, sl
		keep_cnt = 0;
    ab64:	46d1      	mov	r9, sl
    ab66:	e795      	b.n	aa94 <cbprintf_package_convert+0x1d0>
    ab68:	46b1      	mov	r9, r6
    ab6a:	e793      	b.n	aa94 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    ab6c:	f818 1b02 	ldrb.w	r1, [r8], #2
    ab70:	4a3e      	ldr	r2, [pc, #248]	; (ac6c <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    ab72:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    ab76:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    ab7a:	4293      	cmp	r3, r2
    ab7c:	d302      	bcc.n	ab84 <cbprintf_package_convert+0x2c0>
    ab7e:	4a3c      	ldr	r2, [pc, #240]	; (ac70 <cbprintf_package_convert+0x3ac>)
    ab80:	4293      	cmp	r3, r2
    ab82:	d31c      	bcc.n	abbe <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    ab84:	693b      	ldr	r3, [r7, #16]
    ab86:	b123      	cbz	r3, ab92 <cbprintf_package_convert+0x2ce>
    ab88:	69f8      	ldr	r0, [r7, #28]
    ab8a:	f00b faeb 	bl	16164 <is_ptr>
    ab8e:	2800      	cmp	r0, #0
    ab90:	d18b      	bne.n	aaaa <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    ab92:	687b      	ldr	r3, [r7, #4]
    ab94:	b9f3      	cbnz	r3, abd4 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    ab96:	f109 0228 	add.w	r2, r9, #40	; 0x28
    ab9a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    ab9e:	4402      	add	r2, r0
    aba0:	f109 0301 	add.w	r3, r9, #1
    aba4:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    aba8:	f107 0250 	add.w	r2, r7, #80	; 0x50
    abac:	fa52 f383 	uxtab	r3, r2, r3
    abb0:	f109 0902 	add.w	r9, r9, #2
    abb4:	fa5f f989 	uxtb.w	r9, r9
    abb8:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    abbc:	e775      	b.n	aaaa <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    abbe:	693b      	ldr	r3, [r7, #16]
    abc0:	b12b      	cbz	r3, abce <cbprintf_package_convert+0x30a>
    abc2:	69f8      	ldr	r0, [r7, #28]
    abc4:	f00b face 	bl	16164 <is_ptr>
    abc8:	2800      	cmp	r0, #0
    abca:	f47f af6e 	bne.w	aaaa <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    abce:	f01b 0f01 	tst.w	fp, #1
    abd2:	d009      	beq.n	abe8 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    abd4:	f106 0228 	add.w	r2, r6, #40	; 0x28
    abd8:	f107 0128 	add.w	r1, r7, #40	; 0x28
    abdc:	1c73      	adds	r3, r6, #1
    abde:	1856      	adds	r6, r2, r1
    abe0:	f806 5c20 	strb.w	r5, [r6, #-32]
    abe4:	b2de      	uxtb	r6, r3
    abe6:	e760      	b.n	aaaa <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    abe8:	f01b 0f04 	tst.w	fp, #4
    abec:	f43f af5d 	beq.w	aaaa <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    abf0:	f109 0228 	add.w	r2, r9, #40	; 0x28
    abf4:	f107 0128 	add.w	r1, r7, #40	; 0x28
    abf8:	f109 0301 	add.w	r3, r9, #1
    abfc:	eb02 0901 	add.w	r9, r2, r1
    ac00:	f809 5c10 	strb.w	r5, [r9, #-16]
    ac04:	fa5f f983 	uxtb.w	r9, r3
    ac08:	e74f      	b.n	aaaa <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    ac0a:	2000      	movs	r0, #0
    ac0c:	e765      	b.n	aada <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    ac0e:	f81b 300a 	ldrb.w	r3, [fp, sl]
    ac12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    ac16:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    ac1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    ac1c:	b1fb      	cbz	r3, ac5e <cbprintf_package_convert+0x39a>
    ac1e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    ac22:	69ba      	ldr	r2, [r7, #24]
    ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac26:	2101      	movs	r1, #1
    ac28:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    ac2c:	4798      	blx	r3
		if (rv < 0) {
    ac2e:	2800      	cmp	r0, #0
    ac30:	db1a      	blt.n	ac68 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    ac32:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    ac34:	f1b8 0f00 	cmp.w	r8, #0
    ac38:	d106      	bne.n	ac48 <cbprintf_package_convert+0x384>
    ac3a:	4648      	mov	r0, r9
    ac3c:	f00c f92c 	bl	16e98 <strlen>
    ac40:	f100 0801 	add.w	r8, r0, #1
    ac44:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    ac48:	69ba      	ldr	r2, [r7, #24]
    ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ac4c:	4641      	mov	r1, r8
    ac4e:	4648      	mov	r0, r9
    ac50:	4798      	blx	r3
		if (rv < 0) {
    ac52:	2800      	cmp	r0, #0
    ac54:	db08      	blt.n	ac68 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    ac56:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    ac58:	f10b 0b01 	add.w	fp, fp, #1
    ac5c:	e774      	b.n	ab48 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    ac5e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    ac62:	e7de      	b.n	ac22 <cbprintf_package_convert+0x35e>
    ac64:	4645      	mov	r5, r8
    ac66:	e65a      	b.n	a91e <cbprintf_package_convert+0x5a>
    ac68:	4605      	mov	r5, r0
    ac6a:	e658      	b.n	a91e <cbprintf_package_convert+0x5a>
    ac6c:	000186dc 	.word	0x000186dc
    ac70:	0001a288 	.word	0x0001a288
    ac74:	00019025 	.word	0x00019025
    ac78:	01000004 	.word	0x01000004
    ac7c:	00018a54 	.word	0x00018a54

0000ac80 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    ac80:	4b01      	ldr	r3, [pc, #4]	; (ac88 <__printk_hook_install+0x8>)
    ac82:	6018      	str	r0, [r3, #0]
}
    ac84:	4770      	bx	lr
    ac86:	bf00      	nop
    ac88:	200003b0 	.word	0x200003b0

0000ac8c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ac8c:	b530      	push	{r4, r5, lr}
    ac8e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    ac90:	2500      	movs	r5, #0
    ac92:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    ac96:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    ac98:	9500      	str	r5, [sp, #0]
    ac9a:	a903      	add	r1, sp, #12
    ac9c:	4805      	ldr	r0, [pc, #20]	; (acb4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    ac9e:	9505      	str	r5, [sp, #20]
    aca0:	f000 f918 	bl	aed4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    aca4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    aca8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    acaa:	bfb8      	it	lt
    acac:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    acae:	b007      	add	sp, #28
    acb0:	bd30      	pop	{r4, r5, pc}
    acb2:	bf00      	nop
    acb4:	000161b3 	.word	0x000161b3

0000acb8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    acbc:	8b05      	ldrh	r5, [r0, #24]
{
    acbe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    acc0:	0728      	lsls	r0, r5, #28
{
    acc2:	4690      	mov	r8, r2
	if (processing) {
    acc4:	d411      	bmi.n	acea <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    acc6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    acc8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    accc:	f040 80cd 	bne.w	ae6a <process_event+0x1b2>
			evt = process_recheck(mgr);
    acd0:	4620      	mov	r0, r4
    acd2:	f00b fc6c 	bl	165ae <process_recheck>
		}

		if (evt == EVT_NOP) {
    acd6:	b178      	cbz	r0, acf8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    acd8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    acda:	8b21      	ldrh	r1, [r4, #24]
    acdc:	2804      	cmp	r0, #4
    acde:	d811      	bhi.n	ad04 <process_event+0x4c>
    ace0:	e8df f000 	tbb	[pc, r0]
    ace4:	856d10c3 	.word	0x856d10c3
    ace8:	95          	.byte	0x95
    ace9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    acea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    acec:	bf0c      	ite	eq
    acee:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    acf2:	f045 0520 	orrne.w	r5, r5, #32
    acf6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    acf8:	f388 8811 	msr	BASEPRI, r8
    acfc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ad00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ad04:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ad08:	45aa      	cmp	sl, r5
    ad0a:	f000 80a6 	beq.w	ae5a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    ad0e:	2700      	movs	r7, #0
    ad10:	46b9      	mov	r9, r7
    ad12:	463e      	mov	r6, r7
    ad14:	68a3      	ldr	r3, [r4, #8]
    ad16:	2b00      	cmp	r3, #0
    ad18:	f000 80bd 	beq.w	ae96 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ad1c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    ad20:	8321      	strh	r1, [r4, #24]
    ad22:	f388 8811 	msr	BASEPRI, r8
    ad26:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ad2a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ad2c:	2900      	cmp	r1, #0
    ad2e:	f000 80bb 	beq.w	aea8 <process_event+0x1f0>
	return node->next;
    ad32:	680d      	ldr	r5, [r1, #0]
    ad34:	2900      	cmp	r1, #0
    ad36:	f000 80b7 	beq.w	aea8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    ad3a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    ad3e:	4633      	mov	r3, r6
    ad40:	4652      	mov	r2, sl
    ad42:	4620      	mov	r0, r4
    ad44:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ad46:	2d00      	cmp	r5, #0
    ad48:	d076      	beq.n	ae38 <process_event+0x180>
    ad4a:	682b      	ldr	r3, [r5, #0]
    ad4c:	4629      	mov	r1, r5
    ad4e:	461d      	mov	r5, r3
    ad50:	e7f0      	b.n	ad34 <process_event+0x7c>
    ad52:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    ad56:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    ad58:	2a01      	cmp	r2, #1
    ad5a:	d81b      	bhi.n	ad94 <process_event+0xdc>
	list->head = NULL;
    ad5c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ad5e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    ad62:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    ad64:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ad66:	b289      	uxth	r1, r1
	list->tail = NULL;
    ad68:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    ad6c:	d109      	bne.n	ad82 <process_event+0xca>
    ad6e:	463b      	mov	r3, r7
    ad70:	e003      	b.n	ad7a <process_event+0xc2>
				mgr->refs += 1U;
    ad72:	8b62      	ldrh	r2, [r4, #26]
    ad74:	3201      	adds	r2, #1
    ad76:	8362      	strh	r2, [r4, #26]
	return node->next;
    ad78:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    ad7a:	2b00      	cmp	r3, #0
    ad7c:	d1f9      	bne.n	ad72 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ad7e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    ad82:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ad84:	4620      	mov	r0, r4
    ad86:	f00b fc12 	bl	165ae <process_recheck>
    ad8a:	2800      	cmp	r0, #0
    ad8c:	d07b      	beq.n	ae86 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ad8e:	f041 0120 	orr.w	r1, r1, #32
    ad92:	e077      	b.n	ae84 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    ad94:	2b04      	cmp	r3, #4
    ad96:	d10a      	bne.n	adae <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ad98:	f021 0107 	bic.w	r1, r1, #7
    ad9c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    ad9e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    ada0:	4620      	mov	r0, r4
    ada2:	f00b fc04 	bl	165ae <process_recheck>
    ada6:	b110      	cbz	r0, adae <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ada8:	f041 0120 	orr.w	r1, r1, #32
    adac:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    adae:	8b21      	ldrh	r1, [r4, #24]
    adb0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    adb4:	45aa      	cmp	sl, r5
    adb6:	d050      	beq.n	ae5a <process_event+0x1a2>
    adb8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    adba:	46b9      	mov	r9, r7
    adbc:	e7aa      	b.n	ad14 <process_event+0x5c>
			transit = mgr->transitions->start;
    adbe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    adc0:	f021 0107 	bic.w	r1, r1, #7
    adc4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    adc8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    adca:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    adce:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    add0:	d12d      	bne.n	ae2e <process_event+0x176>
		    || (transit != NULL)) {
    add2:	f1b9 0f00 	cmp.w	r9, #0
    add6:	d040      	beq.n	ae5a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    add8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    addc:	8321      	strh	r1, [r4, #24]
    adde:	f388 8811 	msr	BASEPRI, r8
    ade2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    ade6:	493a      	ldr	r1, [pc, #232]	; (aed0 <process_event+0x218>)
    ade8:	4620      	mov	r0, r4
    adea:	47c8      	blx	r9
    adec:	e029      	b.n	ae42 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    adee:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    adf2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    adf4:	f041 0104 	orr.w	r1, r1, #4
    adf8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    adfa:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    adfc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    ae00:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    ae02:	d0e6      	beq.n	add2 <process_event+0x11a>
    ae04:	2700      	movs	r7, #0
		res = 0;
    ae06:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ae08:	f04f 0a04 	mov.w	sl, #4
    ae0c:	e782      	b.n	ad14 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ae0e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    ae12:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ae14:	f041 0105 	orr.w	r1, r1, #5
    ae18:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    ae1a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    ae1c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    ae20:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    ae22:	d0d6      	beq.n	add2 <process_event+0x11a>
    ae24:	2700      	movs	r7, #0
		res = 0;
    ae26:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ae28:	f04f 0a05 	mov.w	sl, #5
    ae2c:	e772      	b.n	ad14 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    ae2e:	2700      	movs	r7, #0
		res = 0;
    ae30:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ae32:	f04f 0a06 	mov.w	sl, #6
    ae36:	e76d      	b.n	ad14 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ae38:	462b      	mov	r3, r5
    ae3a:	e787      	b.n	ad4c <process_event+0x94>
			if (transit != NULL) {
    ae3c:	f1b9 0f00 	cmp.w	r9, #0
    ae40:	d1d1      	bne.n	ade6 <process_event+0x12e>
	__asm__ volatile(
    ae42:	f04f 0340 	mov.w	r3, #64	; 0x40
    ae46:	f3ef 8811 	mrs	r8, BASEPRI
    ae4a:	f383 8812 	msr	BASEPRI_MAX, r3
    ae4e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ae52:	8b23      	ldrh	r3, [r4, #24]
    ae54:	f023 0308 	bic.w	r3, r3, #8
    ae58:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ae5a:	8b25      	ldrh	r5, [r4, #24]
    ae5c:	06ea      	lsls	r2, r5, #27
    ae5e:	d52e      	bpl.n	aebe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ae60:	f025 0310 	bic.w	r3, r5, #16
    ae64:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    ae66:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    ae6a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ae6c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    ae6e:	2e00      	cmp	r6, #0
    ae70:	f6bf af6f 	bge.w	ad52 <process_event+0x9a>
	list->head = NULL;
    ae74:	2300      	movs	r3, #0
		*clients = mgr->clients;
    ae76:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    ae78:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ae7c:	f021 0107 	bic.w	r1, r1, #7
    ae80:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    ae84:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    ae86:	8b21      	ldrh	r1, [r4, #24]
    ae88:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    ae8c:	45aa      	cmp	sl, r5
    ae8e:	f04f 0900 	mov.w	r9, #0
    ae92:	f47f af3f 	bne.w	ad14 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    ae96:	2f00      	cmp	r7, #0
    ae98:	d09b      	beq.n	add2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    ae9a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    ae9e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    aea0:	f388 8811 	msr	BASEPRI, r8
    aea4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    aea8:	2f00      	cmp	r7, #0
    aeaa:	d0c7      	beq.n	ae3c <process_event+0x184>
	return node->next;
    aeac:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    aeae:	4639      	mov	r1, r7
    aeb0:	4633      	mov	r3, r6
    aeb2:	4652      	mov	r2, sl
    aeb4:	4620      	mov	r0, r4
    aeb6:	f00b fba6 	bl	16606 <notify_one>
	list->head = node;
    aeba:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    aebc:	e7f4      	b.n	aea8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    aebe:	06ab      	lsls	r3, r5, #26
    aec0:	f57f af1a 	bpl.w	acf8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    aec4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    aec8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    aeca:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    aece:	e6ff      	b.n	acd0 <process_event+0x18>
    aed0:	00016633 	.word	0x00016633

0000aed4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aed8:	4681      	mov	r9, r0
    aeda:	b095      	sub	sp, #84	; 0x54
    aedc:	468b      	mov	fp, r1
    aede:	4617      	mov	r7, r2
    aee0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    aee2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    aee4:	7838      	ldrb	r0, [r7, #0]
    aee6:	b908      	cbnz	r0, aeec <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    aee8:	4628      	mov	r0, r5
    aeea:	e358      	b.n	b59e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    aeec:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    aeee:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    aef0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    aef2:	d006      	beq.n	af02 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    aef4:	4659      	mov	r1, fp
    aef6:	47c8      	blx	r9
    aef8:	2800      	cmp	r0, #0
    aefa:	f2c0 8350 	blt.w	b59e <z_cbvprintf_impl+0x6ca>
    aefe:	3501      	adds	r5, #1
		if (bps == NULL) {
    af00:	e1fb      	b.n	b2fa <z_cbvprintf_impl+0x426>
		} state = {
    af02:	2218      	movs	r2, #24
    af04:	2100      	movs	r1, #0
    af06:	a80e      	add	r0, sp, #56	; 0x38
    af08:	f00c f808 	bl	16f1c <memset>
	if (*sp == '%') {
    af0c:	787b      	ldrb	r3, [r7, #1]
    af0e:	2b25      	cmp	r3, #37	; 0x25
    af10:	d07d      	beq.n	b00e <z_cbvprintf_impl+0x13a>
    af12:	2300      	movs	r3, #0
    af14:	1c78      	adds	r0, r7, #1
    af16:	4698      	mov	r8, r3
    af18:	469e      	mov	lr, r3
    af1a:	469c      	mov	ip, r3
    af1c:	461e      	mov	r6, r3
    af1e:	4601      	mov	r1, r0
		switch (*sp) {
    af20:	f810 2b01 	ldrb.w	r2, [r0], #1
    af24:	2a2b      	cmp	r2, #43	; 0x2b
    af26:	f000 80a1 	beq.w	b06c <z_cbvprintf_impl+0x198>
    af2a:	f200 8098 	bhi.w	b05e <z_cbvprintf_impl+0x18a>
    af2e:	2a20      	cmp	r2, #32
    af30:	f000 809f 	beq.w	b072 <z_cbvprintf_impl+0x19e>
    af34:	2a23      	cmp	r2, #35	; 0x23
    af36:	f000 809f 	beq.w	b078 <z_cbvprintf_impl+0x1a4>
    af3a:	b12b      	cbz	r3, af48 <z_cbvprintf_impl+0x74>
    af3c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    af40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    af44:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    af48:	f1b8 0f00 	cmp.w	r8, #0
    af4c:	d005      	beq.n	af5a <z_cbvprintf_impl+0x86>
    af4e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    af52:	f043 0320 	orr.w	r3, r3, #32
    af56:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    af5a:	f1be 0f00 	cmp.w	lr, #0
    af5e:	d005      	beq.n	af6c <z_cbvprintf_impl+0x98>
    af60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    af64:	f043 0310 	orr.w	r3, r3, #16
    af68:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    af6c:	f1bc 0f00 	cmp.w	ip, #0
    af70:	d005      	beq.n	af7e <z_cbvprintf_impl+0xaa>
    af72:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    af76:	f043 0308 	orr.w	r3, r3, #8
    af7a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    af7e:	b12e      	cbz	r6, af8c <z_cbvprintf_impl+0xb8>
    af80:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    af84:	f043 0304 	orr.w	r3, r3, #4
    af88:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    af8c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    af90:	f003 0044 	and.w	r0, r3, #68	; 0x44
    af94:	2844      	cmp	r0, #68	; 0x44
    af96:	d103      	bne.n	afa0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    af98:	f36f 1386 	bfc	r3, #6, #1
    af9c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    afa0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    afa4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    afa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    afaa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    afae:	d17f      	bne.n	b0b0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    afb0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    afb4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    afb8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    afba:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    afbe:	781a      	ldrb	r2, [r3, #0]
    afc0:	2a2e      	cmp	r2, #46	; 0x2e
    afc2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    afc6:	bf0c      	ite	eq
    afc8:	2101      	moveq	r1, #1
    afca:	2100      	movne	r1, #0
    afcc:	f361 0241 	bfi	r2, r1, #1, #1
    afd0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    afd4:	d178      	bne.n	b0c8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    afd6:	785a      	ldrb	r2, [r3, #1]
    afd8:	2a2a      	cmp	r2, #42	; 0x2a
    afda:	d06e      	beq.n	b0ba <z_cbvprintf_impl+0x1e6>
	++sp;
    afdc:	3301      	adds	r3, #1
	size_t val = 0;
    afde:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    afe0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    afe4:	4619      	mov	r1, r3
    afe6:	f811 0b01 	ldrb.w	r0, [r1], #1
    afea:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    afee:	2e09      	cmp	r6, #9
    aff0:	f240 8095 	bls.w	b11e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    aff4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    aff8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    affa:	f3c1 0040 	ubfx	r0, r1, #1, #1
    affe:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    b002:	460a      	mov	r2, r1
    b004:	f360 0241 	bfi	r2, r0, #1, #1
    b008:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    b00c:	e05c      	b.n	b0c8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    b00e:	1cba      	adds	r2, r7, #2
    b010:	9203      	str	r2, [sp, #12]
    b012:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    b016:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    b01a:	07da      	lsls	r2, r3, #31
    b01c:	f140 812e 	bpl.w	b27c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    b020:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    b024:	f1b8 0f00 	cmp.w	r8, #0
    b028:	da07      	bge.n	b03a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    b02a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    b02e:	f042 0204 	orr.w	r2, r2, #4
    b032:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    b036:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    b03a:	075e      	lsls	r6, r3, #29
    b03c:	f140 8127 	bpl.w	b28e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    b040:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    b044:	f1ba 0f00 	cmp.w	sl, #0
    b048:	f280 8126 	bge.w	b298 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    b04c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    b050:	f36f 0341 	bfc	r3, #1, #1
    b054:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    b058:	f04f 3aff 	mov.w	sl, #4294967295
    b05c:	e11c      	b.n	b298 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    b05e:	2a2d      	cmp	r2, #45	; 0x2d
    b060:	d00d      	beq.n	b07e <z_cbvprintf_impl+0x1aa>
    b062:	2a30      	cmp	r2, #48	; 0x30
    b064:	f47f af69 	bne.w	af3a <z_cbvprintf_impl+0x66>
    b068:	2301      	movs	r3, #1
	} while (loop);
    b06a:	e758      	b.n	af1e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    b06c:	f04f 0c01 	mov.w	ip, #1
    b070:	e755      	b.n	af1e <z_cbvprintf_impl+0x4a>
    b072:	f04f 0e01 	mov.w	lr, #1
    b076:	e752      	b.n	af1e <z_cbvprintf_impl+0x4a>
    b078:	f04f 0801 	mov.w	r8, #1
    b07c:	e74f      	b.n	af1e <z_cbvprintf_impl+0x4a>
    b07e:	2601      	movs	r6, #1
    b080:	e74d      	b.n	af1e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    b082:	fb0e 6202 	mla	r2, lr, r2, r6
    b086:	3a30      	subs	r2, #48	; 0x30
    b088:	4603      	mov	r3, r0
    b08a:	4618      	mov	r0, r3
    b08c:	f810 6b01 	ldrb.w	r6, [r0], #1
    b090:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    b094:	f1bc 0f09 	cmp.w	ip, #9
    b098:	d9f3      	bls.n	b082 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    b09a:	4299      	cmp	r1, r3
    b09c:	d08f      	beq.n	afbe <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    b09e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    b0a2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    b0a4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    b0a6:	f362 0141 	bfi	r1, r2, #1, #1
    b0aa:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    b0ae:	e786      	b.n	afbe <z_cbvprintf_impl+0xea>
    b0b0:	460b      	mov	r3, r1
	size_t val = 0;
    b0b2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    b0b4:	f04f 0e0a 	mov.w	lr, #10
    b0b8:	e7e7      	b.n	b08a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    b0ba:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    b0be:	f042 0204 	orr.w	r2, r2, #4
    b0c2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    b0c6:	3302      	adds	r3, #2
	switch (*sp) {
    b0c8:	781a      	ldrb	r2, [r3, #0]
    b0ca:	2a6c      	cmp	r2, #108	; 0x6c
    b0cc:	d047      	beq.n	b15e <z_cbvprintf_impl+0x28a>
    b0ce:	d82b      	bhi.n	b128 <z_cbvprintf_impl+0x254>
    b0d0:	2a68      	cmp	r2, #104	; 0x68
    b0d2:	d031      	beq.n	b138 <z_cbvprintf_impl+0x264>
    b0d4:	2a6a      	cmp	r2, #106	; 0x6a
    b0d6:	d04b      	beq.n	b170 <z_cbvprintf_impl+0x29c>
    b0d8:	2a4c      	cmp	r2, #76	; 0x4c
    b0da:	d051      	beq.n	b180 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    b0dc:	461a      	mov	r2, r3
    b0de:	f812 3b01 	ldrb.w	r3, [r2], #1
    b0e2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    b0e4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    b0e6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    b0ea:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    b0ee:	f200 80be 	bhi.w	b26e <z_cbvprintf_impl+0x39a>
    b0f2:	2b6d      	cmp	r3, #109	; 0x6d
    b0f4:	d851      	bhi.n	b19a <z_cbvprintf_impl+0x2c6>
    b0f6:	2b69      	cmp	r3, #105	; 0x69
    b0f8:	f200 80b9 	bhi.w	b26e <z_cbvprintf_impl+0x39a>
    b0fc:	2b57      	cmp	r3, #87	; 0x57
    b0fe:	d867      	bhi.n	b1d0 <z_cbvprintf_impl+0x2fc>
    b100:	2b41      	cmp	r3, #65	; 0x41
    b102:	d003      	beq.n	b10c <z_cbvprintf_impl+0x238>
    b104:	3b45      	subs	r3, #69	; 0x45
    b106:	2b02      	cmp	r3, #2
    b108:	f200 80b1 	bhi.w	b26e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    b10c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b110:	2204      	movs	r2, #4
    b112:	f362 0302 	bfi	r3, r2, #0, #3
    b116:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    b11a:	2301      	movs	r3, #1
			break;
    b11c:	e073      	b.n	b206 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    b11e:	fb0c 0202 	mla	r2, ip, r2, r0
    b122:	3a30      	subs	r2, #48	; 0x30
    b124:	460b      	mov	r3, r1
    b126:	e75d      	b.n	afe4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    b128:	2a74      	cmp	r2, #116	; 0x74
    b12a:	d025      	beq.n	b178 <z_cbvprintf_impl+0x2a4>
    b12c:	2a7a      	cmp	r2, #122	; 0x7a
    b12e:	d1d5      	bne.n	b0dc <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    b130:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    b134:	2106      	movs	r1, #6
    b136:	e00c      	b.n	b152 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    b138:	785a      	ldrb	r2, [r3, #1]
    b13a:	2a68      	cmp	r2, #104	; 0x68
    b13c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    b140:	d106      	bne.n	b150 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    b142:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b144:	f361 02c6 	bfi	r2, r1, #3, #4
    b148:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    b14c:	3302      	adds	r3, #2
    b14e:	e7c5      	b.n	b0dc <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    b150:	2102      	movs	r1, #2
    b152:	f361 02c6 	bfi	r2, r1, #3, #4
    b156:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    b15a:	3301      	adds	r3, #1
    b15c:	e7be      	b.n	b0dc <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    b15e:	785a      	ldrb	r2, [r3, #1]
    b160:	2a6c      	cmp	r2, #108	; 0x6c
    b162:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    b166:	d101      	bne.n	b16c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    b168:	2104      	movs	r1, #4
    b16a:	e7eb      	b.n	b144 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    b16c:	2103      	movs	r1, #3
    b16e:	e7f0      	b.n	b152 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    b170:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    b174:	2105      	movs	r1, #5
    b176:	e7ec      	b.n	b152 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    b178:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    b17c:	2107      	movs	r1, #7
    b17e:	e7e8      	b.n	b152 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    b180:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    b184:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    b188:	f022 0202 	bic.w	r2, r2, #2
    b18c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    b190:	f042 0202 	orr.w	r2, r2, #2
    b194:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    b198:	e7df      	b.n	b15a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    b19a:	3b6e      	subs	r3, #110	; 0x6e
    b19c:	b2d9      	uxtb	r1, r3
    b19e:	2301      	movs	r3, #1
    b1a0:	408b      	lsls	r3, r1
    b1a2:	f240 4182 	movw	r1, #1154	; 0x482
    b1a6:	420b      	tst	r3, r1
    b1a8:	d137      	bne.n	b21a <z_cbvprintf_impl+0x346>
    b1aa:	f013 0f24 	tst.w	r3, #36	; 0x24
    b1ae:	d151      	bne.n	b254 <z_cbvprintf_impl+0x380>
    b1b0:	07d8      	lsls	r0, r3, #31
    b1b2:	d55c      	bpl.n	b26e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    b1b4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b1b8:	2103      	movs	r1, #3
    b1ba:	f361 0302 	bfi	r3, r1, #0, #3
    b1be:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    b1c2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    b1c6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    b1ca:	424b      	negs	r3, r1
    b1cc:	414b      	adcs	r3, r1
    b1ce:	e01a      	b.n	b206 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    b1d0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    b1d4:	b2c9      	uxtb	r1, r1
    b1d6:	2001      	movs	r0, #1
    b1d8:	fa00 f101 	lsl.w	r1, r0, r1
    b1dc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    b1e0:	d194      	bne.n	b10c <z_cbvprintf_impl+0x238>
    b1e2:	f640 0601 	movw	r6, #2049	; 0x801
    b1e6:	4231      	tst	r1, r6
    b1e8:	d11d      	bne.n	b226 <z_cbvprintf_impl+0x352>
    b1ea:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    b1ee:	d03e      	beq.n	b26e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    b1f0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b1f4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b1f8:	f002 0278 	and.w	r2, r2, #120	; 0x78
    b1fc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    b1fe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    b202:	d034      	beq.n	b26e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    b204:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    b206:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    b20a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b20e:	430b      	orrs	r3, r1
    b210:	f363 0241 	bfi	r2, r3, #1, #1
    b214:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    b218:	e6fd      	b.n	b016 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    b21a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b21e:	2102      	movs	r1, #2
    b220:	f361 0302 	bfi	r3, r1, #0, #3
    b224:	e7e8      	b.n	b1f8 <z_cbvprintf_impl+0x324>
    b226:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    b22a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    b22c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b230:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b234:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b236:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    b23a:	bf02      	ittt	eq
    b23c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    b240:	f041 0101 	orreq.w	r1, r1, #1
    b244:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    b248:	2b63      	cmp	r3, #99	; 0x63
    b24a:	d1db      	bne.n	b204 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b24c:	1e13      	subs	r3, r2, #0
    b24e:	bf18      	it	ne
    b250:	2301      	movne	r3, #1
    b252:	e7d8      	b.n	b206 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    b254:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b258:	2103      	movs	r1, #3
    b25a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b25e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b262:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    b266:	bf14      	ite	ne
    b268:	2301      	movne	r3, #1
    b26a:	2300      	moveq	r3, #0
    b26c:	e7cb      	b.n	b206 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    b26e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    b272:	f043 0301 	orr.w	r3, r3, #1
    b276:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    b27a:	e7c3      	b.n	b204 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    b27c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    b280:	2a00      	cmp	r2, #0
			width = conv->width_value;
    b282:	bfb4      	ite	lt
    b284:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    b288:	f04f 38ff 	movge.w	r8, #4294967295
    b28c:	e6d5      	b.n	b03a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    b28e:	0798      	lsls	r0, r3, #30
    b290:	f57f aee2 	bpl.w	b058 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    b294:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    b298:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    b29c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b29e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    b2a2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    b2a6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b2aa:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b2ac:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b2b0:	d133      	bne.n	b31a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    b2b2:	1ecb      	subs	r3, r1, #3
    b2b4:	2b04      	cmp	r3, #4
    b2b6:	d804      	bhi.n	b2c2 <z_cbvprintf_impl+0x3ee>
    b2b8:	e8df f003 	tbb	[pc, r3]
    b2bc:	21464621 	.word	0x21464621
    b2c0:	21          	.byte	0x21
    b2c1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    b2c2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    b2c4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    b2c6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b2ca:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    b2ce:	d11c      	bne.n	b30a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    b2d0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    b2d4:	17da      	asrs	r2, r3, #31
    b2d6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    b2da:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    b2dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    b2e0:	f013 0603 	ands.w	r6, r3, #3
    b2e4:	d050      	beq.n	b388 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    b2e6:	9b03      	ldr	r3, [sp, #12]
    b2e8:	463a      	mov	r2, r7
    b2ea:	4659      	mov	r1, fp
    b2ec:	4648      	mov	r0, r9
    b2ee:	f00b fa8c 	bl	1680a <outs>
    b2f2:	2800      	cmp	r0, #0
    b2f4:	f2c0 8153 	blt.w	b59e <z_cbvprintf_impl+0x6ca>
    b2f8:	4405      	add	r5, r0
			continue;
    b2fa:	9f03      	ldr	r7, [sp, #12]
    b2fc:	e5f2      	b.n	aee4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b2fe:	f854 3b04 	ldr.w	r3, [r4], #4
    b302:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    b304:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    b308:	e7e8      	b.n	b2dc <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    b30a:	2902      	cmp	r1, #2
    b30c:	d1e5      	bne.n	b2da <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    b30e:	b21a      	sxth	r2, r3
    b310:	f343 33c0 	sbfx	r3, r3, #15, #1
    b314:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    b318:	e7df      	b.n	b2da <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b31a:	2b02      	cmp	r3, #2
    b31c:	d124      	bne.n	b368 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    b31e:	1ecb      	subs	r3, r1, #3
    b320:	2b04      	cmp	r3, #4
    b322:	d804      	bhi.n	b32e <z_cbvprintf_impl+0x45a>
    b324:	e8df f003 	tbb	[pc, r3]
    b328:	18101018 	.word	0x18101018
    b32c:	18          	.byte	0x18
    b32d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    b32e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    b330:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b334:	f04f 0200 	mov.w	r2, #0
    b338:	d014      	beq.n	b364 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    b33a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    b33c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    b340:	d1cc      	bne.n	b2dc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    b342:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    b344:	930e      	str	r3, [sp, #56]	; 0x38
    b346:	e7c9      	b.n	b2dc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    b348:	3407      	adds	r4, #7
    b34a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    b34e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b352:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    b356:	e7c1      	b.n	b2dc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    b358:	f854 3b04 	ldr.w	r3, [r4], #4
    b35c:	930e      	str	r3, [sp, #56]	; 0x38
    b35e:	2300      	movs	r3, #0
    b360:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    b362:	e7bb      	b.n	b2dc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    b364:	b2db      	uxtb	r3, r3
    b366:	e7cd      	b.n	b304 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    b368:	2b04      	cmp	r3, #4
    b36a:	d108      	bne.n	b37e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    b36c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    b36e:	f024 0407 	bic.w	r4, r4, #7
    b372:	e9d4 2300 	ldrd	r2, r3, [r4]
    b376:	3408      	adds	r4, #8
    b378:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    b37c:	e7ae      	b.n	b2dc <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b37e:	2b03      	cmp	r3, #3
    b380:	d1ac      	bne.n	b2dc <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    b382:	f854 3b04 	ldr.w	r3, [r4], #4
    b386:	e7dd      	b.n	b344 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    b388:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    b38c:	2878      	cmp	r0, #120	; 0x78
    b38e:	d8b4      	bhi.n	b2fa <z_cbvprintf_impl+0x426>
    b390:	2862      	cmp	r0, #98	; 0x62
    b392:	d81c      	bhi.n	b3ce <z_cbvprintf_impl+0x4fa>
    b394:	2825      	cmp	r0, #37	; 0x25
    b396:	f43f adad 	beq.w	aef4 <z_cbvprintf_impl+0x20>
    b39a:	2858      	cmp	r0, #88	; 0x58
    b39c:	d1ad      	bne.n	b2fa <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b39e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b3a2:	9300      	str	r3, [sp, #0]
    b3a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    b3a8:	ab08      	add	r3, sp, #32
    b3aa:	aa10      	add	r2, sp, #64	; 0x40
    b3ac:	f00b f9e7 	bl	1677e <encode_uint>
			if (precision >= 0) {
    b3b0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    b3b4:	4607      	mov	r7, r0
			if (precision >= 0) {
    b3b6:	f280 809a 	bge.w	b4ee <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    b3ba:	2f00      	cmp	r7, #0
    b3bc:	d09d      	beq.n	b2fa <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    b3be:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b3c2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    b3c4:	2e00      	cmp	r6, #0
    b3c6:	f000 80c1 	beq.w	b54c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    b3ca:	3001      	adds	r0, #1
    b3cc:	e0be      	b.n	b54c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    b3ce:	3863      	subs	r0, #99	; 0x63
    b3d0:	2815      	cmp	r0, #21
    b3d2:	d892      	bhi.n	b2fa <z_cbvprintf_impl+0x426>
    b3d4:	a201      	add	r2, pc, #4	; (adr r2, b3dc <z_cbvprintf_impl+0x508>)
    b3d6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b3da:	bf00      	nop
    b3dc:	0000b4b1 	.word	0x0000b4b1
    b3e0:	0000b4c3 	.word	0x0000b4c3
    b3e4:	0000b2fb 	.word	0x0000b2fb
    b3e8:	0000b2fb 	.word	0x0000b2fb
    b3ec:	0000b2fb 	.word	0x0000b2fb
    b3f0:	0000b2fb 	.word	0x0000b2fb
    b3f4:	0000b4c3 	.word	0x0000b4c3
    b3f8:	0000b2fb 	.word	0x0000b2fb
    b3fc:	0000b2fb 	.word	0x0000b2fb
    b400:	0000b2fb 	.word	0x0000b2fb
    b404:	0000b2fb 	.word	0x0000b2fb
    b408:	0000b551 	.word	0x0000b551
    b40c:	0000b4e9 	.word	0x0000b4e9
    b410:	0000b50f 	.word	0x0000b50f
    b414:	0000b2fb 	.word	0x0000b2fb
    b418:	0000b2fb 	.word	0x0000b2fb
    b41c:	0000b435 	.word	0x0000b435
    b420:	0000b2fb 	.word	0x0000b2fb
    b424:	0000b4e9 	.word	0x0000b4e9
    b428:	0000b2fb 	.word	0x0000b2fb
    b42c:	0000b2fb 	.word	0x0000b2fb
    b430:	0000b4e9 	.word	0x0000b4e9
			if (precision >= 0) {
    b434:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    b438:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    b43a:	db35      	blt.n	b4a8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    b43c:	4651      	mov	r1, sl
    b43e:	4638      	mov	r0, r7
    b440:	f00b fd31 	bl	16ea6 <strnlen>
			bpe = bps + len;
    b444:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    b448:	2f00      	cmp	r7, #0
    b44a:	f43f af56 	beq.w	b2fa <z_cbvprintf_impl+0x426>
		char sign = 0;
    b44e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    b450:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b454:	f013 0210 	ands.w	r2, r3, #16
    b458:	9205      	str	r2, [sp, #20]
    b45a:	f000 8093 	beq.w	b584 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    b45e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    b460:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    b462:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    b464:	bf48      	it	mi
    b466:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    b468:	9204      	str	r2, [sp, #16]
    b46a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    b46c:	bf48      	it	mi
    b46e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    b470:	f1b8 0f00 	cmp.w	r8, #0
    b474:	f340 80a0 	ble.w	b5b8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    b478:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    b47c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    b480:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b484:	0750      	lsls	r0, r2, #29
    b486:	9306      	str	r3, [sp, #24]
    b488:	f100 8096 	bmi.w	b5b8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    b48c:	0651      	lsls	r1, r2, #25
    b48e:	f140 8089 	bpl.w	b5a4 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    b492:	b13e      	cbz	r6, b4a4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    b494:	4659      	mov	r1, fp
    b496:	4630      	mov	r0, r6
    b498:	47c8      	blx	r9
    b49a:	2800      	cmp	r0, #0
    b49c:	db7f      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b49e:	9b06      	ldr	r3, [sp, #24]
    b4a0:	3501      	adds	r5, #1
    b4a2:	461e      	mov	r6, r3
					pad = '0';
    b4a4:	2230      	movs	r2, #48	; 0x30
    b4a6:	e07e      	b.n	b5a6 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    b4a8:	4638      	mov	r0, r7
    b4aa:	f00b fcf5 	bl	16e98 <strlen>
    b4ae:	e7c9      	b.n	b444 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b4b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b4b2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    b4b6:	2600      	movs	r6, #0
			bps = buf;
    b4b8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    b4ba:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    b4be:	2001      	movs	r0, #1
    b4c0:	e7c6      	b.n	b450 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    b4c2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    b4c4:	bf5c      	itt	pl
    b4c6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    b4ca:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    b4cc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    b4d0:	bf48      	it	mi
    b4d2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	f6bf af62 	bge.w	b39e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    b4da:	4252      	negs	r2, r2
    b4dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b4e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    b4e4:	262d      	movs	r6, #45	; 0x2d
    b4e6:	e75a      	b.n	b39e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    b4e8:	2600      	movs	r6, #0
    b4ea:	e758      	b.n	b39e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    b4ec:	2600      	movs	r6, #0
				conv->flag_zero = false;
    b4ee:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    b4f2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b4f6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    b4f8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b4fc:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    b4fe:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    b502:	f67f af5a 	bls.w	b3ba <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    b506:	ebaa 0303 	sub.w	r3, sl, r3
    b50a:	9311      	str	r3, [sp, #68]	; 0x44
    b50c:	e755      	b.n	b3ba <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    b50e:	980e      	ldr	r0, [sp, #56]	; 0x38
    b510:	b390      	cbz	r0, b578 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b512:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b516:	9300      	str	r3, [sp, #0]
    b518:	aa10      	add	r2, sp, #64	; 0x40
    b51a:	ab08      	add	r3, sp, #32
    b51c:	2100      	movs	r1, #0
    b51e:	f00b f92e 	bl	1677e <encode_uint>
				conv->altform_0c = true;
    b522:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    b526:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b52a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b52e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    b532:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b536:	4607      	mov	r7, r0
				conv->altform_0c = true;
    b538:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    b53c:	dad6      	bge.n	b4ec <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    b53e:	2800      	cmp	r0, #0
    b540:	f43f aedb 	beq.w	b2fa <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    b544:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b548:	1a18      	subs	r0, r3, r0
		char sign = 0;
    b54a:	2600      	movs	r6, #0
    b54c:	469a      	mov	sl, r3
    b54e:	e77f      	b.n	b450 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    b550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    b552:	2907      	cmp	r1, #7
    b554:	f63f aed1 	bhi.w	b2fa <z_cbvprintf_impl+0x426>
    b558:	e8df f001 	tbb	[pc, r1]
    b55c:	0c06040c 	.word	0x0c06040c
    b560:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    b564:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    b566:	e6c8      	b.n	b2fa <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    b568:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    b56a:	e6c6      	b.n	b2fa <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    b56c:	17ea      	asrs	r2, r5, #31
    b56e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    b572:	e6c2      	b.n	b2fa <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b574:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    b576:	e6c0      	b.n	b2fa <z_cbvprintf_impl+0x426>
    b578:	4f2e      	ldr	r7, [pc, #184]	; (b634 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    b57a:	4606      	mov	r6, r0
			bpe = bps + 5;
    b57c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    b580:	2005      	movs	r0, #5
    b582:	e765      	b.n	b450 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    b584:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    b586:	bf48      	it	mi
    b588:	3001      	addmi	r0, #1
    b58a:	e769      	b.n	b460 <z_cbvprintf_impl+0x58c>
    b58c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    b58e:	4610      	mov	r0, r2
    b590:	9206      	str	r2, [sp, #24]
    b592:	4659      	mov	r1, fp
    b594:	47c8      	blx	r9
    b596:	2800      	cmp	r0, #0
    b598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b59c:	da04      	bge.n	b5a8 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    b59e:	b015      	add	sp, #84	; 0x54
    b5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b5a4:	2220      	movs	r2, #32
					pad = '0';
    b5a6:	4643      	mov	r3, r8
				while (width-- > 0) {
    b5a8:	4619      	mov	r1, r3
    b5aa:	2900      	cmp	r1, #0
    b5ac:	f103 33ff 	add.w	r3, r3, #4294967295
    b5b0:	dcec      	bgt.n	b58c <z_cbvprintf_impl+0x6b8>
    b5b2:	4445      	add	r5, r8
    b5b4:	1a6d      	subs	r5, r5, r1
    b5b6:	4698      	mov	r8, r3
		if (sign != 0) {
    b5b8:	b12e      	cbz	r6, b5c6 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    b5ba:	4659      	mov	r1, fp
    b5bc:	4630      	mov	r0, r6
    b5be:	47c8      	blx	r9
    b5c0:	2800      	cmp	r0, #0
    b5c2:	dbec      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b5c4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b5c6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b5ca:	06da      	lsls	r2, r3, #27
    b5cc:	d401      	bmi.n	b5d2 <z_cbvprintf_impl+0x6fe>
    b5ce:	071b      	lsls	r3, r3, #28
    b5d0:	d505      	bpl.n	b5de <z_cbvprintf_impl+0x70a>
				OUTC('0');
    b5d2:	4659      	mov	r1, fp
    b5d4:	2030      	movs	r0, #48	; 0x30
    b5d6:	47c8      	blx	r9
    b5d8:	2800      	cmp	r0, #0
    b5da:	dbe0      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b5dc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b5de:	9b05      	ldr	r3, [sp, #20]
    b5e0:	b133      	cbz	r3, b5f0 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    b5e2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    b5e6:	4659      	mov	r1, fp
    b5e8:	47c8      	blx	r9
    b5ea:	2800      	cmp	r0, #0
    b5ec:	dbd7      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b5ee:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b5f0:	9e04      	ldr	r6, [sp, #16]
    b5f2:	442e      	add	r6, r5
    b5f4:	e005      	b.n	b602 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    b5f6:	4659      	mov	r1, fp
    b5f8:	2030      	movs	r0, #48	; 0x30
    b5fa:	47c8      	blx	r9
    b5fc:	2800      	cmp	r0, #0
    b5fe:	dbce      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b600:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b602:	1b73      	subs	r3, r6, r5
    b604:	2b00      	cmp	r3, #0
    b606:	dcf6      	bgt.n	b5f6 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    b608:	4653      	mov	r3, sl
    b60a:	463a      	mov	r2, r7
    b60c:	4659      	mov	r1, fp
    b60e:	4648      	mov	r0, r9
    b610:	f00b f8fb 	bl	1680a <outs>
    b614:	2800      	cmp	r0, #0
    b616:	dbc2      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b618:	4405      	add	r5, r0
		while (width > 0) {
    b61a:	44a8      	add	r8, r5
    b61c:	eba8 0305 	sub.w	r3, r8, r5
    b620:	2b00      	cmp	r3, #0
    b622:	f77f ae6a 	ble.w	b2fa <z_cbvprintf_impl+0x426>
			OUTC(' ');
    b626:	4659      	mov	r1, fp
    b628:	2020      	movs	r0, #32
    b62a:	47c8      	blx	r9
    b62c:	2800      	cmp	r0, #0
    b62e:	dbb6      	blt.n	b59e <z_cbvprintf_impl+0x6ca>
    b630:	3501      	adds	r5, #1
			--width;
    b632:	e7f3      	b.n	b61c <z_cbvprintf_impl+0x748>
    b634:	000190d9 	.word	0x000190d9

0000b638 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    b638:	b508      	push	{r3, lr}
    b63a:	4604      	mov	r4, r0
	__asm__ volatile(
    b63c:	f04f 0240 	mov.w	r2, #64	; 0x40
    b640:	f3ef 8311 	mrs	r3, BASEPRI
    b644:	f382 8812 	msr	BASEPRI_MAX, r2
    b648:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    b64c:	f004 ffcc 	bl	105e8 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    b650:	4620      	mov	r0, r4
    b652:	f001 feb5 	bl	d3c0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    b656:	4803      	ldr	r0, [pc, #12]	; (b664 <sys_reboot+0x2c>)
    b658:	f00a fdc0 	bl	161dc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    b65c:	f001 f838 	bl	c6d0 <arch_cpu_idle>
    b660:	e7fc      	b.n	b65c <sys_reboot+0x24>
    b662:	bf00      	nop
    b664:	000190df 	.word	0x000190df

0000b668 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b668:	f006 b860 	b.w	1172c <SystemInit>

0000b66c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    b66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b670:	f8df 8058 	ldr.w	r8, [pc, #88]	; b6cc <activate_foreach_backend+0x60>
{
    b674:	4604      	mov	r4, r0
	while (mask_cpy) {
    b676:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    b678:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    b67c:	b914      	cbnz	r4, b684 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    b67e:	4638      	mov	r0, r7
    b680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    b684:	fa94 f5a4 	rbit	r5, r4
    b688:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    b68c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b690:	012e      	lsls	r6, r5, #4
    b692:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    b696:	ea6f 0a03 	mvn.w	sl, r3
    b69a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b69e:	7b2b      	ldrb	r3, [r5, #12]
    b6a0:	2b00      	cmp	r3, #0
    b6a2:	d0eb      	beq.n	b67c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    b6a4:	f858 3006 	ldr.w	r3, [r8, r6]
    b6a8:	691b      	ldr	r3, [r3, #16]
    b6aa:	b94b      	cbnz	r3, b6c0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    b6ac:	4446      	add	r6, r8
			log_backend_enable(backend,
    b6ae:	2204      	movs	r2, #4
    b6b0:	6873      	ldr	r3, [r6, #4]
    b6b2:	4628      	mov	r0, r5
    b6b4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    b6b6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    b6ba:	f000 fa59 	bl	bb70 <log_backend_enable>
    b6be:	e7dd      	b.n	b67c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    b6c0:	4628      	mov	r0, r5
    b6c2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    b6c4:	2800      	cmp	r0, #0
    b6c6:	d1d9      	bne.n	b67c <activate_foreach_backend+0x10>
    b6c8:	e7f0      	b.n	b6ac <activate_foreach_backend+0x40>
    b6ca:	bf00      	nop
    b6cc:	00018acc 	.word	0x00018acc

0000b6d0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    b6d0:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    b6d2:	4910      	ldr	r1, [pc, #64]	; (b714 <enable_logger+0x44>)
    b6d4:	4810      	ldr	r0, [pc, #64]	; (b718 <enable_logger+0x48>)
{
    b6d6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    b6d8:	2200      	movs	r2, #0
    b6da:	f00c fe87 	bl	183ec <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    b6de:	4d0f      	ldr	r5, [pc, #60]	; (b71c <enable_logger+0x4c>)
    b6e0:	490f      	ldr	r1, [pc, #60]	; (b720 <enable_logger+0x50>)
    b6e2:	2200      	movs	r2, #0
    b6e4:	2300      	movs	r3, #0
    b6e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b6ea:	2400      	movs	r4, #0
    b6ec:	230e      	movs	r3, #14
    b6ee:	e9cd 3403 	strd	r3, r4, [sp, #12]
    b6f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b6f6:	4b0b      	ldr	r3, [pc, #44]	; (b724 <enable_logger+0x54>)
    b6f8:	9400      	str	r4, [sp, #0]
    b6fa:	f44f 7240 	mov.w	r2, #768	; 0x300
    b6fe:	4628      	mov	r0, r5
    b700:	f006 ff26 	bl	12550 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    b704:	4908      	ldr	r1, [pc, #32]	; (b728 <enable_logger+0x58>)
    b706:	4628      	mov	r0, r5
    b708:	f00c fb78 	bl	17dfc <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    b70c:	4620      	mov	r0, r4
    b70e:	b009      	add	sp, #36	; 0x24
    b710:	bd30      	pop	{r4, r5, pc}
    b712:	bf00      	nop
    b714:	0000b72d 	.word	0x0000b72d
    b718:	20001810 	.word	0x20001810
    b71c:	20001388 	.word	0x20001388
    b720:	20003b00 	.word	0x20003b00
    b724:	0000ba1d 	.word	0x0000ba1d
    b728:	00019108 	.word	0x00019108

0000b72c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    b72c:	4801      	ldr	r0, [pc, #4]	; (b734 <log_process_thread_timer_expiry_fn+0x8>)
    b72e:	f007 b89d 	b.w	1286c <z_impl_k_sem_give>
    b732:	bf00      	nop
    b734:	200005f8 	.word	0x200005f8

0000b738 <z_log_init>:
{
    b738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b73c:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    b73e:	481f      	ldr	r0, [pc, #124]	; (b7bc <z_log_init+0x84>)
{
    b740:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    b742:	f00b faef 	bl	16d24 <atomic_inc>
    b746:	4606      	mov	r6, r0
    b748:	2800      	cmp	r0, #0
    b74a:	d030      	beq.n	b7ae <z_log_init+0x76>
	uint32_t mask = 0;
    b74c:	2500      	movs	r5, #0
}
    b74e:	4628      	mov	r0, r5
    b750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    b754:	7b23      	ldrb	r3, [r4, #12]
    b756:	b173      	cbz	r3, b776 <z_log_init+0x3e>
	if (backend->api->init) {
    b758:	6823      	ldr	r3, [r4, #0]
    b75a:	68db      	ldr	r3, [r3, #12]
    b75c:	b10b      	cbz	r3, b762 <z_log_init+0x2a>
		backend->api->init(backend);
    b75e:	4620      	mov	r0, r4
    b760:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    b762:	6823      	ldr	r3, [r4, #0]
    b764:	691b      	ldr	r3, [r3, #16]
    b766:	b9d3      	cbnz	r3, b79e <z_log_init+0x66>
				log_backend_enable(backend,
    b768:	6863      	ldr	r3, [r4, #4]
    b76a:	2204      	movs	r2, #4
    b76c:	6819      	ldr	r1, [r3, #0]
    b76e:	4620      	mov	r0, r4
    b770:	f000 f9fe 	bl	bb70 <log_backend_enable>
			i++;
    b774:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b776:	3410      	adds	r4, #16
    b778:	454c      	cmp	r4, r9
    b77a:	d3eb      	bcc.n	b754 <z_log_init+0x1c>
	if (blocking) {
    b77c:	f1b8 0f00 	cmp.w	r8, #0
    b780:	d0e5      	beq.n	b74e <z_log_init+0x16>
		while (mask) {
    b782:	2d00      	cmp	r5, #0
    b784:	d0e2      	beq.n	b74c <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    b786:	4628      	mov	r0, r5
    b788:	f7ff ff70 	bl	b66c <activate_foreach_backend>
    b78c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    b78e:	2f00      	cmp	r7, #0
    b790:	d0f7      	beq.n	b782 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    b792:	2100      	movs	r1, #0
    b794:	f44f 70a4 	mov.w	r0, #328	; 0x148
    b798:	f007 fd10 	bl	131bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b79c:	e7f1      	b.n	b782 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    b79e:	4620      	mov	r0, r4
    b7a0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    b7a2:	2800      	cmp	r0, #0
    b7a4:	d0e0      	beq.n	b768 <z_log_init+0x30>
				mask |= BIT(i);
    b7a6:	fa0a f306 	lsl.w	r3, sl, r6
    b7aa:	431d      	orrs	r5, r3
    b7ac:	e7e2      	b.n	b774 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b7ae:	4c04      	ldr	r4, [pc, #16]	; (b7c0 <z_log_init+0x88>)
    b7b0:	f8df 9010 	ldr.w	r9, [pc, #16]	; b7c4 <z_log_init+0x8c>
	uint32_t mask = 0;
    b7b4:	4605      	mov	r5, r0
				mask |= BIT(i);
    b7b6:	f04f 0a01 	mov.w	sl, #1
    b7ba:	e7dd      	b.n	b778 <z_log_init+0x40>
    b7bc:	20001e88 	.word	0x20001e88
    b7c0:	00018acc 	.word	0x00018acc
    b7c4:	00018aec 	.word	0x00018aec

0000b7c8 <log_format_func_t_get>:
}
    b7c8:	4b01      	ldr	r3, [pc, #4]	; (b7d0 <log_format_func_t_get+0x8>)
    b7ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b7ce:	4770      	bx	lr
    b7d0:	00018b7c 	.word	0x00018b7c

0000b7d4 <log_set_timestamp_func>:
{
    b7d4:	b508      	push	{r3, lr}
    b7d6:	4603      	mov	r3, r0
    b7d8:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    b7da:	b12b      	cbz	r3, b7e8 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    b7dc:	4a04      	ldr	r2, [pc, #16]	; (b7f0 <log_set_timestamp_func+0x1c>)
    b7de:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    b7e0:	f000 fc78 	bl	c0d4 <log_output_timestamp_freq_set>
	return 0;
    b7e4:	2000      	movs	r0, #0
}
    b7e6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    b7e8:	f06f 0015 	mvn.w	r0, #21
    b7ec:	e7fb      	b.n	b7e6 <log_set_timestamp_func+0x12>
    b7ee:	bf00      	nop
    b7f0:	200003b4 	.word	0x200003b4

0000b7f4 <z_log_notify_backend_enabled>:
{
    b7f4:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    b7f6:	4c04      	ldr	r4, [pc, #16]	; (b808 <z_log_notify_backend_enabled+0x14>)
    b7f8:	7823      	ldrb	r3, [r4, #0]
    b7fa:	b913      	cbnz	r3, b802 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    b7fc:	4803      	ldr	r0, [pc, #12]	; (b80c <z_log_notify_backend_enabled+0x18>)
    b7fe:	f007 f835 	bl	1286c <z_impl_k_sem_give>
	backend_attached = true;
    b802:	2301      	movs	r3, #1
    b804:	7023      	strb	r3, [r4, #0]
}
    b806:	bd10      	pop	{r4, pc}
    b808:	20003127 	.word	0x20003127
    b80c:	200005f8 	.word	0x200005f8

0000b810 <z_log_dropped>:
{
    b810:	b510      	push	{r4, lr}
    b812:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    b814:	4808      	ldr	r0, [pc, #32]	; (b838 <z_log_dropped+0x28>)
    b816:	f00b fa85 	bl	16d24 <atomic_inc>
	if (buffered) {
    b81a:	b15c      	cbz	r4, b834 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b81c:	f3bf 8f5b 	dmb	ish
    b820:	4b06      	ldr	r3, [pc, #24]	; (b83c <z_log_dropped+0x2c>)
    b822:	e853 1f00 	ldrex	r1, [r3]
    b826:	3901      	subs	r1, #1
    b828:	e843 1200 	strex	r2, r1, [r3]
    b82c:	2a00      	cmp	r2, #0
    b82e:	d1f8      	bne.n	b822 <z_log_dropped+0x12>
    b830:	f3bf 8f5b 	dmb	ish
}
    b834:	bd10      	pop	{r4, pc}
    b836:	bf00      	nop
    b838:	20001e80 	.word	0x20001e80
    b83c:	20001e84 	.word	0x20001e84

0000b840 <z_log_dropped_read_and_clear>:
}
    b840:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b842:	4b06      	ldr	r3, [pc, #24]	; (b85c <z_log_dropped_read_and_clear+0x1c>)
    b844:	f3bf 8f5b 	dmb	ish
    b848:	4601      	mov	r1, r0
    b84a:	e853 0f00 	ldrex	r0, [r3]
    b84e:	e843 1200 	strex	r2, r1, [r3]
    b852:	2a00      	cmp	r2, #0
    b854:	d1f9      	bne.n	b84a <z_log_dropped_read_and_clear+0xa>
    b856:	f3bf 8f5b 	dmb	ish
    b85a:	4770      	bx	lr
    b85c:	20001e80 	.word	0x20001e80

0000b860 <dropped_notify>:
{
    b860:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    b862:	f7ff ffed 	bl	b840 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b866:	4c08      	ldr	r4, [pc, #32]	; (b888 <dropped_notify+0x28>)
    b868:	4e08      	ldr	r6, [pc, #32]	; (b88c <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    b86a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b86c:	42b4      	cmp	r4, r6
    b86e:	d300      	bcc.n	b872 <dropped_notify+0x12>
}
    b870:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    b872:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b874:	795b      	ldrb	r3, [r3, #5]
    b876:	b12b      	cbz	r3, b884 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    b878:	6823      	ldr	r3, [r4, #0]
    b87a:	685b      	ldr	r3, [r3, #4]
    b87c:	b113      	cbz	r3, b884 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    b87e:	4629      	mov	r1, r5
    b880:	4620      	mov	r0, r4
    b882:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b884:	3410      	adds	r4, #16
    b886:	e7f1      	b.n	b86c <dropped_notify+0xc>
    b888:	00018acc 	.word	0x00018acc
    b88c:	00018aec 	.word	0x00018aec

0000b890 <z_log_msg_init>:
{
    b890:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    b892:	4c04      	ldr	r4, [pc, #16]	; (b8a4 <z_log_msg_init+0x14>)
    b894:	4904      	ldr	r1, [pc, #16]	; (b8a8 <z_log_msg_init+0x18>)
    b896:	4620      	mov	r0, r4
    b898:	f00b f8d5 	bl	16a46 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    b89c:	4b03      	ldr	r3, [pc, #12]	; (b8ac <z_log_msg_init+0x1c>)
    b89e:	601c      	str	r4, [r3, #0]
}
    b8a0:	bd10      	pop	{r4, pc}
    b8a2:	bf00      	nop
    b8a4:	2000053c 	.word	0x2000053c
    b8a8:	00018b68 	.word	0x00018b68
    b8ac:	20001e78 	.word	0x20001e78

0000b8b0 <log_core_init>:
	panic_mode = false;
    b8b0:	4a08      	ldr	r2, [pc, #32]	; (b8d4 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    b8b2:	4809      	ldr	r0, [pc, #36]	; (b8d8 <log_core_init+0x28>)
{
    b8b4:	b508      	push	{r3, lr}
	panic_mode = false;
    b8b6:	2300      	movs	r3, #0
    b8b8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    b8ba:	4a08      	ldr	r2, [pc, #32]	; (b8dc <log_core_init+0x2c>)
    b8bc:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    b8be:	4a08      	ldr	r2, [pc, #32]	; (b8e0 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    b8c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    b8c4:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    b8c6:	f7ff ff85 	bl	b7d4 <log_set_timestamp_func>
}
    b8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    b8ce:	f7ff bfdf 	b.w	b890 <z_log_msg_init>
    b8d2:	bf00      	nop
    b8d4:	20003128 	.word	0x20003128
    b8d8:	00016d21 	.word	0x00016d21
    b8dc:	20001e80 	.word	0x20001e80
    b8e0:	20001e84 	.word	0x20001e84

0000b8e4 <z_log_msg_alloc>:
{
    b8e4:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    b8e6:	2200      	movs	r2, #0
    b8e8:	4801      	ldr	r0, [pc, #4]	; (b8f0 <z_log_msg_alloc+0xc>)
    b8ea:	2300      	movs	r3, #0
    b8ec:	f00b b8cc 	b.w	16a88 <mpsc_pbuf_alloc>
    b8f0:	2000053c 	.word	0x2000053c

0000b8f4 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    b8f4:	4801      	ldr	r0, [pc, #4]	; (b8fc <z_log_msg_local_claim+0x8>)
    b8f6:	f00b b965 	b.w	16bc4 <mpsc_pbuf_claim>
    b8fa:	bf00      	nop
    b8fc:	2000053c 	.word	0x2000053c

0000b900 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    b900:	4b02      	ldr	r3, [pc, #8]	; (b90c <z_log_msg_free+0xc>)
{
    b902:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    b904:	6818      	ldr	r0, [r3, #0]
    b906:	f00b b9af 	b.w	16c68 <mpsc_pbuf_free>
    b90a:	bf00      	nop
    b90c:	20001e78 	.word	0x20001e78

0000b910 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    b910:	4801      	ldr	r0, [pc, #4]	; (b918 <z_log_msg_pending+0x8>)
    b912:	f00b b9e5 	b.w	16ce0 <mpsc_pbuf_is_pending>
    b916:	bf00      	nop
    b918:	2000053c 	.word	0x2000053c

0000b91c <z_impl_log_process>:
{
    b91c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    b91e:	4b28      	ldr	r3, [pc, #160]	; (b9c0 <z_impl_log_process+0xa4>)
    b920:	7818      	ldrb	r0, [r3, #0]
    b922:	2800      	cmp	r0, #0
    b924:	d04b      	beq.n	b9be <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    b926:	f7ff ffe5 	bl	b8f4 <z_log_msg_local_claim>
	if (msg) {
    b92a:	4605      	mov	r5, r0
    b92c:	b190      	cbz	r0, b954 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    b92e:	f3bf 8f5b 	dmb	ish
    b932:	4b24      	ldr	r3, [pc, #144]	; (b9c4 <z_impl_log_process+0xa8>)
    b934:	e853 1f00 	ldrex	r1, [r3]
    b938:	3901      	subs	r1, #1
    b93a:	e843 1200 	strex	r2, r1, [r3]
    b93e:	2a00      	cmp	r2, #0
    b940:	d1f8      	bne.n	b934 <z_impl_log_process+0x18>
    b942:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b946:	4c20      	ldr	r4, [pc, #128]	; (b9c8 <z_impl_log_process+0xac>)
    b948:	4e20      	ldr	r6, [pc, #128]	; (b9cc <z_impl_log_process+0xb0>)
    b94a:	42b4      	cmp	r4, r6
    b94c:	d32d      	bcc.n	b9aa <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    b94e:	4628      	mov	r0, r5
    b950:	f7ff ffd6 	bl	b900 <z_log_msg_free>
	return dropped_cnt > 0;
    b954:	4b1e      	ldr	r3, [pc, #120]	; (b9d0 <z_impl_log_process+0xb4>)
    b956:	4c1f      	ldr	r4, [pc, #124]	; (b9d4 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    b958:	681b      	ldr	r3, [r3, #0]
    b95a:	2b00      	cmp	r3, #0
    b95c:	dd19      	ble.n	b992 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    b95e:	f00c fd1d 	bl	1839c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b966:	fba0 0302 	umull	r0, r3, r0, r2
    b96a:	fb02 3101 	mla	r1, r2, r1, r3
    b96e:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b970:	e9d4 2000 	ldrd	r2, r0, [r4]
    b974:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    b978:	1a9b      	subs	r3, r3, r2
    b97a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    b97e:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    b982:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    b986:	4293      	cmp	r3, r2
    b988:	f171 0100 	sbcs.w	r1, r1, #0
    b98c:	d301      	bcc.n	b992 <z_impl_log_process+0x76>
				dropped_notify();
    b98e:	f7ff ff67 	bl	b860 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    b992:	e9d4 3200 	ldrd	r3, r2, [r4]
    b996:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    b99a:	f142 0200 	adc.w	r2, r2, #0
    b99e:	e9c4 3200 	strd	r3, r2, [r4]
}
    b9a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    b9a6:	f7ff bfb3 	b.w	b910 <z_log_msg_pending>
	return backend->cb->active;
    b9aa:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    b9ac:	795b      	ldrb	r3, [r3, #5]
    b9ae:	b123      	cbz	r3, b9ba <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    b9b0:	6823      	ldr	r3, [r4, #0]
    b9b2:	4629      	mov	r1, r5
    b9b4:	681b      	ldr	r3, [r3, #0]
    b9b6:	4620      	mov	r0, r4
    b9b8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b9ba:	3410      	adds	r4, #16
    b9bc:	e7c5      	b.n	b94a <z_impl_log_process+0x2e>
}
    b9be:	bd70      	pop	{r4, r5, r6, pc}
    b9c0:	20003127 	.word	0x20003127
    b9c4:	20001e84 	.word	0x20001e84
    b9c8:	00018acc 	.word	0x00018acc
    b9cc:	00018aec 	.word	0x00018aec
    b9d0:	20001e80 	.word	0x20001e80
    b9d4:	20001808 	.word	0x20001808

0000b9d8 <z_impl_log_panic>:
{
    b9d8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    b9da:	4d0d      	ldr	r5, [pc, #52]	; (ba10 <z_impl_log_panic+0x38>)
    b9dc:	7829      	ldrb	r1, [r5, #0]
    b9de:	b961      	cbnz	r1, b9fa <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    b9e0:	2001      	movs	r0, #1
    b9e2:	f7ff fea9 	bl	b738 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    b9e6:	4c0b      	ldr	r4, [pc, #44]	; (ba14 <z_impl_log_panic+0x3c>)
    b9e8:	4e0b      	ldr	r6, [pc, #44]	; (ba18 <z_impl_log_panic+0x40>)
    b9ea:	42b4      	cmp	r4, r6
    b9ec:	d306      	bcc.n	b9fc <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    b9ee:	f7ff ff95 	bl	b91c <z_impl_log_process>
		while (log_process() == true) {
    b9f2:	2800      	cmp	r0, #0
    b9f4:	d1fb      	bne.n	b9ee <z_impl_log_panic+0x16>
	panic_mode = true;
    b9f6:	2301      	movs	r3, #1
    b9f8:	702b      	strb	r3, [r5, #0]
}
    b9fa:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    b9fc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    b9fe:	795b      	ldrb	r3, [r3, #5]
    ba00:	b11b      	cbz	r3, ba0a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    ba02:	6823      	ldr	r3, [r4, #0]
    ba04:	4620      	mov	r0, r4
    ba06:	689b      	ldr	r3, [r3, #8]
    ba08:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ba0a:	3410      	adds	r4, #16
    ba0c:	e7ed      	b.n	b9ea <z_impl_log_panic+0x12>
    ba0e:	bf00      	nop
    ba10:	20003128 	.word	0x20003128
    ba14:	00018acc 	.word	0x00018acc
    ba18:	00018aec 	.word	0x00018aec

0000ba1c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    ba1c:	2100      	movs	r1, #0
{
    ba1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    ba22:	4608      	mov	r0, r1
    ba24:	f7ff fe88 	bl	b738 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ba28:	4604      	mov	r4, r0
    ba2a:	b348      	cbz	r0, ba80 <log_process_thread_func+0x64>
    ba2c:	f240 6867 	movw	r8, #1639	; 0x667
    ba30:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    ba34:	f007 fbdc 	bl	131f0 <z_impl_z_current_get>
	proc_tid = process_tid;
    ba38:	4b1a      	ldr	r3, [pc, #104]	; (baa4 <log_process_thread_func+0x88>)
    ba3a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    ba3c:	b130      	cbz	r0, ba4c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    ba3e:	4b1a      	ldr	r3, [pc, #104]	; (baa8 <log_process_thread_func+0x8c>)
	    process_tid &&
    ba40:	681b      	ldr	r3, [r3, #0]
    ba42:	2b09      	cmp	r3, #9
    ba44:	dd02      	ble.n	ba4c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    ba46:	4819      	ldr	r0, [pc, #100]	; (baac <log_process_thread_func+0x90>)
    ba48:	f006 ff10 	bl	1286c <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ba4c:	4f18      	ldr	r7, [pc, #96]	; (bab0 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    ba4e:	f8df a05c 	ldr.w	sl, [pc, #92]	; baac <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ba52:	2500      	movs	r5, #0
		if (activate_mask) {
    ba54:	b144      	cbz	r4, ba68 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    ba56:	4620      	mov	r0, r4
    ba58:	f7ff fe08 	bl	b66c <activate_foreach_backend>
			if (!activate_mask) {
    ba5c:	4604      	mov	r4, r0
    ba5e:	b918      	cbnz	r0, ba68 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    ba60:	f04f 38ff 	mov.w	r8, #4294967295
    ba64:	f04f 39ff 	mov.w	r9, #4294967295
    ba68:	f7ff ff58 	bl	b91c <z_impl_log_process>
		if (log_process() == false) {
    ba6c:	4606      	mov	r6, r0
    ba6e:	b928      	cbnz	r0, ba7c <log_process_thread_func+0x60>
			if (processed_any) {
    ba70:	b9b5      	cbnz	r5, baa0 <log_process_thread_func+0x84>
    ba72:	4642      	mov	r2, r8
    ba74:	464b      	mov	r3, r9
    ba76:	4650      	mov	r0, sl
    ba78:	f006 ff1e 	bl	128b8 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    ba7c:	4635      	mov	r5, r6
    ba7e:	e7e9      	b.n	ba54 <log_process_thread_func+0x38>
    ba80:	f04f 38ff 	mov.w	r8, #4294967295
    ba84:	f04f 39ff 	mov.w	r9, #4294967295
    ba88:	e7d4      	b.n	ba34 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    ba8a:	682b      	ldr	r3, [r5, #0]
    ba8c:	699b      	ldr	r3, [r3, #24]
    ba8e:	b11b      	cbz	r3, ba98 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    ba90:	2200      	movs	r2, #0
    ba92:	4611      	mov	r1, r2
    ba94:	4628      	mov	r0, r5
    ba96:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    ba98:	3510      	adds	r5, #16
    ba9a:	42bd      	cmp	r5, r7
    ba9c:	d3f5      	bcc.n	ba8a <log_process_thread_func+0x6e>
    ba9e:	e7e8      	b.n	ba72 <log_process_thread_func+0x56>
    baa0:	4d04      	ldr	r5, [pc, #16]	; (bab4 <log_process_thread_func+0x98>)
    baa2:	e7fa      	b.n	ba9a <log_process_thread_func+0x7e>
    baa4:	20001e7c 	.word	0x20001e7c
    baa8:	20001e84 	.word	0x20001e84
    baac:	200005f8 	.word	0x200005f8
    bab0:	00018aec 	.word	0x00018aec
    bab4:	00018acc 	.word	0x00018acc

0000bab8 <z_log_msg_post_finalize>:
{
    bab8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    baba:	4818      	ldr	r0, [pc, #96]	; (bb1c <z_log_msg_post_finalize+0x64>)
    babc:	f00b f932 	bl	16d24 <atomic_inc>
	if (panic_mode) {
    bac0:	4b17      	ldr	r3, [pc, #92]	; (bb20 <z_log_msg_post_finalize+0x68>)
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	b17b      	cbz	r3, bae6 <z_log_msg_post_finalize+0x2e>
    bac6:	f04f 0340 	mov.w	r3, #64	; 0x40
    baca:	f3ef 8411 	mrs	r4, BASEPRI
    bace:	f383 8812 	msr	BASEPRI_MAX, r3
    bad2:	f3bf 8f6f 	isb	sy
    bad6:	f7ff ff21 	bl	b91c <z_impl_log_process>
	__asm__ volatile(
    bada:	f384 8811 	msr	BASEPRI, r4
    bade:	f3bf 8f6f 	isb	sy
}
    bae2:	b002      	add	sp, #8
    bae4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    bae6:	4b0f      	ldr	r3, [pc, #60]	; (bb24 <z_log_msg_post_finalize+0x6c>)
    bae8:	681b      	ldr	r3, [r3, #0]
    baea:	2b00      	cmp	r3, #0
    baec:	d0f9      	beq.n	bae2 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    baee:	b950      	cbnz	r0, bb06 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    baf0:	2200      	movs	r2, #0
    baf2:	2300      	movs	r3, #0
    baf4:	e9cd 2300 	strd	r2, r3, [sp]
    baf8:	480b      	ldr	r0, [pc, #44]	; (bb28 <z_log_msg_post_finalize+0x70>)
    bafa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    bafe:	2300      	movs	r3, #0
    bb00:	f007 fdba 	bl	13678 <z_impl_k_timer_start>
    bb04:	e7ed      	b.n	bae2 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    bb06:	280a      	cmp	r0, #10
    bb08:	d1eb      	bne.n	bae2 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    bb0a:	4807      	ldr	r0, [pc, #28]	; (bb28 <z_log_msg_post_finalize+0x70>)
    bb0c:	f00c fc7a 	bl	18404 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    bb10:	4806      	ldr	r0, [pc, #24]	; (bb2c <z_log_msg_post_finalize+0x74>)
}
    bb12:	b002      	add	sp, #8
    bb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb18:	f006 bea8 	b.w	1286c <z_impl_k_sem_give>
    bb1c:	20001e84 	.word	0x20001e84
    bb20:	20003128 	.word	0x20003128
    bb24:	20001e7c 	.word	0x20001e7c
    bb28:	20001810 	.word	0x20001810
    bb2c:	200005f8 	.word	0x200005f8

0000bb30 <z_log_msg_commit>:
{
    bb30:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    bb32:	4b06      	ldr	r3, [pc, #24]	; (bb4c <z_log_msg_commit+0x1c>)
    bb34:	681b      	ldr	r3, [r3, #0]
{
    bb36:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    bb38:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    bb3a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    bb3c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    bb3e:	4804      	ldr	r0, [pc, #16]	; (bb50 <z_log_msg_commit+0x20>)
    bb40:	f00b f820 	bl	16b84 <mpsc_pbuf_commit>
}
    bb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    bb48:	f7ff bfb6 	b.w	bab8 <z_log_msg_post_finalize>
    bb4c:	200003b4 	.word	0x200003b4
    bb50:	2000053c 	.word	0x2000053c

0000bb54 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    bb54:	4a04      	ldr	r2, [pc, #16]	; (bb68 <log_source_name_get+0x14>)
    bb56:	4b05      	ldr	r3, [pc, #20]	; (bb6c <log_source_name_get+0x18>)
    bb58:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    bb5a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    bb5e:	bf34      	ite	cc
    bb60:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    bb64:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    bb66:	4770      	bx	lr
    bb68:	00018a0c 	.word	0x00018a0c
    bb6c:	00018acc 	.word	0x00018acc

0000bb70 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    bb70:	4b08      	ldr	r3, [pc, #32]	; (bb94 <log_backend_enable+0x24>)
    bb72:	1ac3      	subs	r3, r0, r3
{
    bb74:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    bb76:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    bb78:	6844      	ldr	r4, [r0, #4]
    bb7a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    bb7c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    bb7e:	6843      	ldr	r3, [r0, #4]
    bb80:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    bb82:	6843      	ldr	r3, [r0, #4]
    bb84:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    bb86:	6843      	ldr	r3, [r0, #4]
    bb88:	2201      	movs	r2, #1
    bb8a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    bb8c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    bb8e:	f7ff be31 	b.w	b7f4 <z_log_notify_backend_enabled>
    bb92:	bf00      	nop
    bb94:	00018acc 	.word	0x00018acc

0000bb98 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb9c:	b08f      	sub	sp, #60	; 0x3c
    bb9e:	af04      	add	r7, sp, #16
    bba0:	f3c1 284a 	ubfx	r8, r1, #9, #11
    bba4:	60b8      	str	r0, [r7, #8]
    bba6:	460d      	mov	r5, r1
    bba8:	4691      	mov	r9, r2
    bbaa:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    bbac:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    bbae:	f1b8 0f00 	cmp.w	r8, #0
    bbb2:	d063      	beq.n	bc7c <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    bbb4:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    bbb6:	f107 0314 	add.w	r3, r7, #20
    bbba:	f04f 0b04 	mov.w	fp, #4
    bbbe:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    bbc2:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    bbc6:	e9c7 6607 	strd	r6, r6, [r7, #28]
    bbca:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    bbcc:	9301      	str	r3, [sp, #4]
    bbce:	f8cd b008 	str.w	fp, [sp, #8]
    bbd2:	f8cd a000 	str.w	sl, [sp]
    bbd6:	f107 031c 	add.w	r3, r7, #28
    bbda:	68f9      	ldr	r1, [r7, #12]
    bbdc:	4632      	mov	r2, r6
    bbde:	4648      	mov	r0, r9
    bbe0:	f7fe fe70 	bl	a8c4 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    bbe4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bbe8:	4603      	mov	r3, r0
    bbea:	d31c      	bcc.n	bc26 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    bbec:	466c      	mov	r4, sp
    bbee:	b08a      	sub	sp, #40	; 0x28
    bbf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bbf4:	ab04      	add	r3, sp, #16
    bbf6:	4826      	ldr	r0, [pc, #152]	; (bc90 <z_impl_z_log_msg_static_create+0xf8>)
    bbf8:	e9c3 0105 	strd	r0, r1, [r3, #20]
    bbfc:	f240 71ff 	movw	r1, #2047	; 0x7ff
    bc00:	61d9      	str	r1, [r3, #28]
    bc02:	461a      	mov	r2, r3
    bc04:	f44f 7100 	mov.w	r1, #512	; 0x200
    bc08:	8419      	strh	r1, [r3, #32]
    bc0a:	4b22      	ldr	r3, [pc, #136]	; (bc94 <z_impl_z_log_msg_static_create+0xfc>)
    bc0c:	f842 3f10 	str.w	r3, [r2, #16]!
    bc10:	4821      	ldr	r0, [pc, #132]	; (bc98 <z_impl_z_log_msg_static_create+0x100>)
    bc12:	4633      	mov	r3, r6
    bc14:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    bc18:	f7ff ffbe 	bl	bb98 <z_impl_z_log_msg_static_create>
    bc1c:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    bc1e:	372c      	adds	r7, #44	; 0x2c
    bc20:	46bd      	mov	sp, r7
    bc22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    bc26:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    bc2a:	f104 0017 	add.w	r0, r4, #23
    bc2e:	4418      	add	r0, r3
    bc30:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    bc34:	0880      	lsrs	r0, r0, #2
    bc36:	603b      	str	r3, [r7, #0]
    bc38:	f7ff fe54 	bl	b8e4 <z_log_msg_alloc>
    bc3c:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    bc40:	4604      	mov	r4, r0
    bc42:	b190      	cbz	r0, bc6a <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    bc44:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    bc46:	4a15      	ldr	r2, [pc, #84]	; (bc9c <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    bc48:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    bc4c:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    bc50:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    bc54:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    bc56:	e9cd a300 	strd	sl, r3, [sp]
    bc5a:	f8cd b008 	str.w	fp, [sp, #8]
    bc5e:	68f9      	ldr	r1, [r7, #12]
    bc60:	f107 031c 	add.w	r3, r7, #28
    bc64:	4648      	mov	r0, r9
    bc66:	f7fe fe2d 	bl	a8c4 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    bc6a:	f368 2553 	bfi	r5, r8, #9, #11
    bc6e:	687b      	ldr	r3, [r7, #4]
    bc70:	68b9      	ldr	r1, [r7, #8]
    bc72:	462a      	mov	r2, r5
    bc74:	4620      	mov	r0, r4
    bc76:	f00b f88b 	bl	16d90 <z_log_msg_finalize>
    bc7a:	e7d0      	b.n	bc1e <z_impl_z_log_msg_static_create+0x86>
    bc7c:	f104 0017 	add.w	r0, r4, #23
    bc80:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    bc84:	0880      	lsrs	r0, r0, #2
    bc86:	f7ff fe2d 	bl	b8e4 <z_log_msg_alloc>
    bc8a:	4604      	mov	r4, r0
    bc8c:	e7ed      	b.n	bc6a <z_impl_z_log_msg_static_create+0xd2>
    bc8e:	bf00      	nop
    bc90:	0001911d 	.word	0x0001911d
    bc94:	01000004 	.word	0x01000004
    bc98:	00018a74 	.word	0x00018a74
    bc9c:	00016d65 	.word	0x00016d65

0000bca0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bca4:	b087      	sub	sp, #28
    bca6:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    bcaa:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    bcae:	4604      	mov	r4, r0
    bcb0:	460f      	mov	r7, r1
    bcb2:	4693      	mov	fp, r2
    bcb4:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    bcb6:	b3a6      	cbz	r6, bd22 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    bcb8:	2110      	movs	r1, #16
    bcba:	f8cd 9000 	str.w	r9, [sp]
    bcbe:	4633      	mov	r3, r6
    bcc0:	4652      	mov	r2, sl
    bcc2:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    bcc4:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    bcc8:	f7fe fc26 	bl	a518 <cbvprintf_package>
    bccc:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    bcce:	f105 0017 	add.w	r0, r5, #23
    bcd2:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    bcd4:	4b14      	ldr	r3, [pc, #80]	; (bd28 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    bcd6:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    bcd8:	f004 0407 	and.w	r4, r4, #7
    bcdc:	f00b 0b07 	and.w	fp, fp, #7
    bce0:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    bce2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    bce6:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    bcea:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    bcee:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    bcf0:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    bcf2:	f7ff fdf7 	bl	b8e4 <z_log_msg_alloc>
	struct log_msg_desc desc =
    bcf6:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    bcfa:	4605      	mov	r5, r0
    bcfc:	b140      	cbz	r0, bd10 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    bcfe:	b13e      	cbz	r6, bd10 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    bd00:	9903      	ldr	r1, [sp, #12]
    bd02:	f8cd 9000 	str.w	r9, [sp]
    bd06:	4633      	mov	r3, r6
    bd08:	4652      	mov	r2, sl
    bd0a:	3010      	adds	r0, #16
    bd0c:	f7fe fc04 	bl	a518 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    bd10:	4643      	mov	r3, r8
    bd12:	4622      	mov	r2, r4
    bd14:	4639      	mov	r1, r7
    bd16:	4628      	mov	r0, r5
	}
}
    bd18:	b007      	add	sp, #28
    bd1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    bd1e:	f00b b837 	b.w	16d90 <z_log_msg_finalize>
		plen = 0;
    bd22:	4631      	mov	r1, r6
    bd24:	e7d3      	b.n	bcce <z_impl_z_log_msg_runtime_vcreate+0x2e>
    bd26:	bf00      	nop
    bd28:	000ffe00 	.word	0x000ffe00

0000bd2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    bd2c:	b40e      	push	{r1, r2, r3}
    bd2e:	b503      	push	{r0, r1, lr}
    bd30:	ab03      	add	r3, sp, #12
    bd32:	4601      	mov	r1, r0
    bd34:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    bd38:	4804      	ldr	r0, [pc, #16]	; (bd4c <print_formatted+0x20>)
	va_start(args, fmt);
    bd3a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    bd3c:	f00b f84e 	bl	16ddc <cbvprintf>
	va_end(args);

	return length;
}
    bd40:	b002      	add	sp, #8
    bd42:	f85d eb04 	ldr.w	lr, [sp], #4
    bd46:	b003      	add	sp, #12
    bd48:	4770      	bx	lr
    bd4a:	bf00      	nop
    bd4c:	00016e05 	.word	0x00016e05

0000bd50 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    bd50:	06ca      	lsls	r2, r1, #27
    bd52:	d405      	bmi.n	bd60 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    bd54:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    bd56:	bf4c      	ite	mi
    bd58:	4902      	ldrmi	r1, [pc, #8]	; (bd64 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    bd5a:	4903      	ldrpl	r1, [pc, #12]	; (bd68 <newline_print+0x18>)
    bd5c:	f7ff bfe6 	b.w	bd2c <print_formatted>
	}
}
    bd60:	4770      	bx	lr
    bd62:	bf00      	nop
    bd64:	0001915d 	.word	0x0001915d
    bd68:	0001915c 	.word	0x0001915c

0000bd6c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd70:	b089      	sub	sp, #36	; 0x24
    bd72:	469b      	mov	fp, r3
    bd74:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    bd78:	9304      	str	r3, [sp, #16]
    bd7a:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    bd7e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    bd80:	9b04      	ldr	r3, [sp, #16]
{
    bd82:	9206      	str	r2, [sp, #24]
    bd84:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    bd88:	4604      	mov	r4, r0
    bd8a:	460d      	mov	r5, r1
	if (!raw_string) {
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	f000 8087 	beq.w	bea0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    bd92:	f006 0308 	and.w	r3, r6, #8
    bd96:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    bd98:	f00a ffe2 	bl	16d60 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    bd9c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    bda0:	4602      	mov	r2, r0
    bda2:	2800      	cmp	r0, #0
    bda4:	d04b      	beq.n	be3e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    bda6:	4986      	ldr	r1, [pc, #536]	; (bfc0 <log_output_process+0x254>)
    bda8:	4620      	mov	r0, r4
    bdaa:	f7ff ffbf 	bl	bd2c <print_formatted>
    bdae:	4680      	mov	r8, r0
	if (stamp) {
    bdb0:	f1ba 0f00 	cmp.w	sl, #0
    bdb4:	d008      	beq.n	bdc8 <log_output_process+0x5c>
	if (!format) {
    bdb6:	f016 0f44 	tst.w	r6, #68	; 0x44
    bdba:	d142      	bne.n	be42 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    bdbc:	4981      	ldr	r1, [pc, #516]	; (bfc4 <log_output_process+0x258>)
    bdbe:	462a      	mov	r2, r5
    bdc0:	4620      	mov	r0, r4
    bdc2:	f7ff ffb3 	bl	bd2c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    bdc6:	4480      	add	r8, r0
	if (color) {
    bdc8:	f006 0301 	and.w	r3, r6, #1
    bdcc:	b15b      	cbz	r3, bde6 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    bdce:	4b7e      	ldr	r3, [pc, #504]	; (bfc8 <log_output_process+0x25c>)
    bdd0:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    bdd2:	497e      	ldr	r1, [pc, #504]	; (bfcc <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    bdd4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    bdd8:	4b7d      	ldr	r3, [pc, #500]	; (bfd0 <log_output_process+0x264>)
    bdda:	4620      	mov	r0, r4
    bddc:	2a00      	cmp	r2, #0
    bdde:	bf08      	it	eq
    bde0:	461a      	moveq	r2, r3
    bde2:	f7ff ffa3 	bl	bd2c <print_formatted>
	if (level_on) {
    bde6:	f006 0308 	and.w	r3, r6, #8
    bdea:	2b00      	cmp	r3, #0
    bdec:	d055      	beq.n	be9a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    bdee:	4b79      	ldr	r3, [pc, #484]	; (bfd4 <log_output_process+0x268>)
    bdf0:	9a04      	ldr	r2, [sp, #16]
    bdf2:	4979      	ldr	r1, [pc, #484]	; (bfd8 <log_output_process+0x26c>)
    bdf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    bdf8:	4620      	mov	r0, r4
    bdfa:	f7ff ff97 	bl	bd2c <print_formatted>
    bdfe:	4605      	mov	r5, r0
	if (domain) {
    be00:	9b06      	ldr	r3, [sp, #24]
    be02:	b12b      	cbz	r3, be10 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    be04:	4975      	ldr	r1, [pc, #468]	; (bfdc <log_output_process+0x270>)
    be06:	461a      	mov	r2, r3
    be08:	4620      	mov	r0, r4
    be0a:	f7ff ff8f 	bl	bd2c <print_formatted>
    be0e:	4405      	add	r5, r0
	if (source) {
    be10:	f1bb 0f00 	cmp.w	fp, #0
    be14:	d005      	beq.n	be22 <log_output_process+0xb6>
		total += print_formatted(output,
    be16:	4972      	ldr	r1, [pc, #456]	; (bfe0 <log_output_process+0x274>)
    be18:	465a      	mov	r2, fp
    be1a:	4620      	mov	r0, r4
    be1c:	f7ff ff86 	bl	bd2c <print_formatted>
    be20:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    be22:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    be24:	f1b9 0f00 	cmp.w	r9, #0
    be28:	d149      	bne.n	bebe <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    be2a:	2f00      	cmp	r7, #0
    be2c:	d14f      	bne.n	bece <log_output_process+0x162>
	if (color) {
    be2e:	07f3      	lsls	r3, r6, #31
    be30:	f100 80c0 	bmi.w	bfb4 <log_output_process+0x248>
	newline_print(output, flags);
    be34:	4631      	mov	r1, r6
    be36:	4620      	mov	r0, r4
    be38:	f7ff ff8a 	bl	bd50 <newline_print>
}
    be3c:	e0b4      	b.n	bfa8 <log_output_process+0x23c>
	uint32_t length = 0U;
    be3e:	4680      	mov	r8, r0
    be40:	e7b6      	b.n	bdb0 <log_output_process+0x44>
	} else if (freq != 0U) {
    be42:	4b68      	ldr	r3, [pc, #416]	; (bfe4 <log_output_process+0x278>)
    be44:	6818      	ldr	r0, [r3, #0]
    be46:	2800      	cmp	r0, #0
    be48:	d0bd      	beq.n	bdc6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    be4a:	4b67      	ldr	r3, [pc, #412]	; (bfe8 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    be4c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    be50:	681b      	ldr	r3, [r3, #0]
    be52:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    be56:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    be5a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    be5e:	fb00 5513 	mls	r5, r0, r3, r5
    be62:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    be66:	fb0e f505 	mul.w	r5, lr, r5
    be6a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    be6e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    be70:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    be74:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    be78:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    be7c:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    be80:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    be84:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    be86:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    be8a:	4958      	ldr	r1, [pc, #352]	; (bfec <log_output_process+0x280>)
    be8c:	e9cd c501 	strd	ip, r5, [sp, #4]
    be90:	4652      	mov	r2, sl
    be92:	4620      	mov	r0, r4
    be94:	f7ff ff4a 	bl	bd2c <print_formatted>
    be98:	e795      	b.n	bdc6 <log_output_process+0x5a>
	int total = 0;
    be9a:	f006 0508 	and.w	r5, r6, #8
    be9e:	e7af      	b.n	be00 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bea0:	f1bb 0f01 	cmp.w	fp, #1
    bea4:	d106      	bne.n	beb4 <log_output_process+0x148>
	if (package) {
    bea6:	f1b9 0f00 	cmp.w	r9, #0
    beaa:	d164      	bne.n	bf76 <log_output_process+0x20a>
	if (data_len) {
    beac:	2f00      	cmp	r7, #0
    beae:	d07b      	beq.n	bfa8 <log_output_process+0x23c>
		prefix_offset = 0;
    beb0:	2500      	movs	r5, #0
    beb2:	e00c      	b.n	bece <log_output_process+0x162>
	if (package) {
    beb4:	f1b9 0f00 	cmp.w	r9, #0
    beb8:	d0f8      	beq.n	beac <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    beba:	484d      	ldr	r0, [pc, #308]	; (bff0 <log_output_process+0x284>)
    bebc:	e05c      	b.n	bf78 <log_output_process+0x20c>
		cb = out_func;
    bebe:	484d      	ldr	r0, [pc, #308]	; (bff4 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    bec0:	494d      	ldr	r1, [pc, #308]	; (bff8 <log_output_process+0x28c>)
    bec2:	464b      	mov	r3, r9
    bec4:	4622      	mov	r2, r4
    bec6:	f00a f91c 	bl	16102 <cbpprintf_external>
	if (data_len) {
    beca:	2f00      	cmp	r7, #0
    becc:	d068      	beq.n	bfa0 <log_output_process+0x234>
		print_formatted(output, " ");
    bece:	f8df 912c 	ldr.w	r9, [pc, #300]	; bffc <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    bed2:	f8df a12c 	ldr.w	sl, [pc, #300]	; c000 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bed6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    bed8:	4631      	mov	r1, r6
    beda:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    bedc:	46b8      	mov	r8, r7
    bede:	bf28      	it	cs
    bee0:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    bee4:	f7ff ff34 	bl	bd50 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    bee8:	f04f 0b00 	mov.w	fp, #0
    beec:	455d      	cmp	r5, fp
    beee:	dc45      	bgt.n	bf7c <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    bef0:	9b05      	ldr	r3, [sp, #20]
    bef2:	4651      	mov	r1, sl
    bef4:	781a      	ldrb	r2, [r3, #0]
    bef6:	4620      	mov	r0, r4
    bef8:	f7ff ff18 	bl	bd2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    befc:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    bf00:	f01b 0f07 	tst.w	fp, #7
    bf04:	d103      	bne.n	bf0e <log_output_process+0x1a2>
			print_formatted(output, " ");
    bf06:	4649      	mov	r1, r9
    bf08:	4620      	mov	r0, r4
    bf0a:	f7ff ff0f 	bl	bd2c <print_formatted>
		if (i < length) {
    bf0e:	45d8      	cmp	r8, fp
    bf10:	d93b      	bls.n	bf8a <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    bf12:	9b05      	ldr	r3, [sp, #20]
    bf14:	4651      	mov	r1, sl
    bf16:	f813 200b 	ldrb.w	r2, [r3, fp]
    bf1a:	4620      	mov	r0, r4
    bf1c:	f7ff ff06 	bl	bd2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bf20:	f10b 0b01 	add.w	fp, fp, #1
    bf24:	f1bb 0f10 	cmp.w	fp, #16
    bf28:	d1ea      	bne.n	bf00 <log_output_process+0x194>
	print_formatted(output, "|");
    bf2a:	4936      	ldr	r1, [pc, #216]	; (c004 <log_output_process+0x298>)
    bf2c:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bf2e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    bf32:	f7ff fefb 	bl	bd2c <print_formatted>
		if (i < length) {
    bf36:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    bf38:	9b05      	ldr	r3, [sp, #20]
    bf3a:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    bf3c:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    bf40:	295f      	cmp	r1, #95	; 0x5f
    bf42:	bf28      	it	cs
    bf44:	222e      	movcs	r2, #46	; 0x2e
    bf46:	4930      	ldr	r1, [pc, #192]	; (c008 <log_output_process+0x29c>)
    bf48:	4620      	mov	r0, r4
    bf4a:	f7ff feef 	bl	bd2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    bf4e:	f10b 0b01 	add.w	fp, fp, #1
    bf52:	f1bb 0f10 	cmp.w	fp, #16
    bf56:	d01d      	beq.n	bf94 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    bf58:	f01b 0f07 	tst.w	fp, #7
    bf5c:	d103      	bne.n	bf66 <log_output_process+0x1fa>
			print_formatted(output, " ");
    bf5e:	4649      	mov	r1, r9
    bf60:	4620      	mov	r0, r4
    bf62:	f7ff fee3 	bl	bd2c <print_formatted>
		if (i < length) {
    bf66:	45d8      	cmp	r8, fp
    bf68:	465a      	mov	r2, fp
    bf6a:	d8e5      	bhi.n	bf38 <log_output_process+0x1cc>
			print_formatted(output, " ");
    bf6c:	4649      	mov	r1, r9
    bf6e:	4620      	mov	r0, r4
    bf70:	f7ff fedc 	bl	bd2c <print_formatted>
    bf74:	e7eb      	b.n	bf4e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    bf76:	481f      	ldr	r0, [pc, #124]	; (bff4 <log_output_process+0x288>)
		prefix_offset = 0;
    bf78:	9d04      	ldr	r5, [sp, #16]
    bf7a:	e7a1      	b.n	bec0 <log_output_process+0x154>
		print_formatted(output, " ");
    bf7c:	4649      	mov	r1, r9
    bf7e:	4620      	mov	r0, r4
    bf80:	f7ff fed4 	bl	bd2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    bf84:	f10b 0b01 	add.w	fp, fp, #1
    bf88:	e7b0      	b.n	beec <log_output_process+0x180>
			print_formatted(output, "   ");
    bf8a:	4920      	ldr	r1, [pc, #128]	; (c00c <log_output_process+0x2a0>)
    bf8c:	4620      	mov	r0, r4
    bf8e:	f7ff fecd 	bl	bd2c <print_formatted>
    bf92:	e7c5      	b.n	bf20 <log_output_process+0x1b4>
		data += length;
    bf94:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    bf96:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    bf9a:	4443      	add	r3, r8
    bf9c:	9305      	str	r3, [sp, #20]
	} while (len);
    bf9e:	d19a      	bne.n	bed6 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    bfa0:	9b04      	ldr	r3, [sp, #16]
    bfa2:	2b00      	cmp	r3, #0
    bfa4:	f47f af43 	bne.w	be2e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    bfa8:	4620      	mov	r0, r4
}
    bfaa:	b009      	add	sp, #36	; 0x24
    bfac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    bfb0:	f00a bf1b 	b.w	16dea <log_output_flush>
		print_formatted(output, "%s", log_color);
    bfb4:	4a06      	ldr	r2, [pc, #24]	; (bfd0 <log_output_process+0x264>)
    bfb6:	4905      	ldr	r1, [pc, #20]	; (bfcc <log_output_process+0x260>)
    bfb8:	4620      	mov	r0, r4
    bfba:	f7ff feb7 	bl	bd2c <print_formatted>
}
    bfbe:	e739      	b.n	be34 <log_output_process+0xc8>
    bfc0:	00019164 	.word	0x00019164
    bfc4:	00019168 	.word	0x00019168
    bfc8:	00018b8c 	.word	0x00018b8c
    bfcc:	00019ab7 	.word	0x00019ab7
    bfd0:	0001915f 	.word	0x0001915f
    bfd4:	00018ba0 	.word	0x00018ba0
    bfd8:	0001918d 	.word	0x0001918d
    bfdc:	00019193 	.word	0x00019193
    bfe0:	00019197 	.word	0x00019197
    bfe4:	20001e90 	.word	0x20001e90
    bfe8:	20001e8c 	.word	0x20001e8c
    bfec:	00019171 	.word	0x00019171
    bff0:	00016e3b 	.word	0x00016e3b
    bff4:	00016e05 	.word	0x00016e05
    bff8:	00016ddd 	.word	0x00016ddd
    bffc:	000191a4 	.word	0x000191a4
    c000:	0001919c 	.word	0x0001919c
    c004:	000191a6 	.word	0x000191a6
    c008:	000191a8 	.word	0x000191a8
    c00c:	000191a2 	.word	0x000191a2

0000c010 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    c010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    c014:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    c016:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    c018:	688e      	ldr	r6, [r1, #8]
    c01a:	b086      	sub	sp, #24
    c01c:	4605      	mov	r5, r0
    c01e:	460c      	mov	r4, r1
    c020:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    c022:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    c026:	b15b      	cbz	r3, c040 <log_output_msg_process+0x30>
    c028:	4a13      	ldr	r2, [pc, #76]	; (c078 <log_output_msg_process+0x68>)
    c02a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    c02c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c030:	2900      	cmp	r1, #0
    c032:	db1f      	blt.n	c074 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    c034:	7820      	ldrb	r0, [r4, #0]
    c036:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    c03a:	f7ff fd8b 	bl	bb54 <log_source_name_get>
    c03e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    c040:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    c042:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    c044:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    c048:	9700      	str	r7, [sp, #0]
    c04a:	f3c2 224a 	ubfx	r2, r2, #9, #11
    c04e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    c050:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    c054:	f3c0 100b 	ubfx	r0, r0, #4, #12
    c058:	bf08      	it	eq
    c05a:	2100      	moveq	r1, #0
    c05c:	e9cd 0803 	strd	r0, r8, [sp, #12]
    c060:	e9cd 1401 	strd	r1, r4, [sp, #4]
    c064:	2200      	movs	r2, #0
    c066:	4631      	mov	r1, r6
    c068:	4628      	mov	r0, r5
    c06a:	f7ff fe7f 	bl	bd6c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    c06e:	b006      	add	sp, #24
    c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    c074:	2300      	movs	r3, #0
    c076:	e7e3      	b.n	c040 <log_output_msg_process+0x30>
    c078:	00018a0c 	.word	0x00018a0c

0000c07c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    c07c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c07e:	f242 730f 	movw	r3, #9999	; 0x270f
    c082:	428b      	cmp	r3, r1
    c084:	bf28      	it	cs
    c086:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    c088:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c08a:	4a0f      	ldr	r2, [pc, #60]	; (c0c8 <log_output_dropped_process+0x4c>)
{
    c08c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c08e:	2105      	movs	r1, #5
    c090:	4668      	mov	r0, sp
    c092:	f00a f8b0 	bl	161f6 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    c096:	6863      	ldr	r3, [r4, #4]
    c098:	490c      	ldr	r1, [pc, #48]	; (c0cc <log_output_dropped_process+0x50>)
    c09a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    c09c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    c09e:	220b      	movs	r2, #11
    c0a0:	4628      	mov	r0, r5
    c0a2:	f00a fe8e 	bl	16dc2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    c0a6:	6863      	ldr	r3, [r4, #4]
    c0a8:	4632      	mov	r2, r6
    c0aa:	4669      	mov	r1, sp
    c0ac:	4628      	mov	r0, r5
    c0ae:	685b      	ldr	r3, [r3, #4]
    c0b0:	f00a fe87 	bl	16dc2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    c0b4:	6863      	ldr	r3, [r4, #4]
    c0b6:	4906      	ldr	r1, [pc, #24]	; (c0d0 <log_output_dropped_process+0x54>)
    c0b8:	685b      	ldr	r3, [r3, #4]
    c0ba:	221b      	movs	r2, #27
    c0bc:	4628      	mov	r0, r5
    c0be:	f00a fe80 	bl	16dc2 <buffer_write>
		     output->control_block->ctx);
}
    c0c2:	b002      	add	sp, #8
    c0c4:	bd70      	pop	{r4, r5, r6, pc}
    c0c6:	bf00      	nop
    c0c8:	0001a140 	.word	0x0001a140
    c0cc:	000191c7 	.word	0x000191c7
    c0d0:	000191ab 	.word	0x000191ab

0000c0d4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    c0d4:	4a07      	ldr	r2, [pc, #28]	; (c0f4 <log_output_timestamp_freq_set+0x20>)
    c0d6:	2100      	movs	r1, #0
    c0d8:	2301      	movs	r3, #1
    c0da:	4290      	cmp	r0, r2
    c0dc:	d806      	bhi.n	c0ec <log_output_timestamp_freq_set+0x18>
    c0de:	4a06      	ldr	r2, [pc, #24]	; (c0f8 <log_output_timestamp_freq_set+0x24>)
    c0e0:	b901      	cbnz	r1, c0e4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    c0e2:	2301      	movs	r3, #1
    c0e4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    c0e6:	4b05      	ldr	r3, [pc, #20]	; (c0fc <log_output_timestamp_freq_set+0x28>)
    c0e8:	6018      	str	r0, [r3, #0]
}
    c0ea:	4770      	bx	lr
		frequency /= 2U;
    c0ec:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    c0ee:	005b      	lsls	r3, r3, #1
    c0f0:	2101      	movs	r1, #1
    c0f2:	e7f2      	b.n	c0da <log_output_timestamp_freq_set+0x6>
    c0f4:	000f4240 	.word	0x000f4240
    c0f8:	20001e8c 	.word	0x20001e8c
    c0fc:	20001e90 	.word	0x20001e90

0000c100 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    c100:	4b01      	ldr	r3, [pc, #4]	; (c108 <log_backend_rtt_init+0x8>)
    c102:	2201      	movs	r2, #1
    c104:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    c106:	4770      	bx	lr
    c108:	20003129 	.word	0x20003129

0000c10c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c10c:	4b01      	ldr	r3, [pc, #4]	; (c114 <format_set+0x8>)
	return 0;
}
    c10e:	2000      	movs	r0, #0
	log_format_current = log_type;
    c110:	6019      	str	r1, [r3, #0]
}
    c112:	4770      	bx	lr
    c114:	20001ea8 	.word	0x20001ea8

0000c118 <panic>:
	panic_mode = true;
    c118:	4b02      	ldr	r3, [pc, #8]	; (c124 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    c11a:	4803      	ldr	r0, [pc, #12]	; (c128 <panic+0x10>)
    c11c:	2201      	movs	r2, #1
    c11e:	701a      	strb	r2, [r3, #0]
    c120:	f00a be63 	b.w	16dea <log_output_flush>
    c124:	2000312a 	.word	0x2000312a
    c128:	00018bd0 	.word	0x00018bd0

0000c12c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    c12c:	4801      	ldr	r0, [pc, #4]	; (c134 <dropped+0x8>)
    c12e:	f7ff bfa5 	b.w	c07c <log_output_dropped_process>
    c132:	bf00      	nop
    c134:	00018bd0 	.word	0x00018bd0

0000c138 <process>:
{
    c138:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c13a:	4b06      	ldr	r3, [pc, #24]	; (c154 <process+0x1c>)
    c13c:	6818      	ldr	r0, [r3, #0]
{
    c13e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c140:	f7ff fb42 	bl	b7c8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    c144:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c146:	4603      	mov	r3, r0
}
    c148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    c14c:	4802      	ldr	r0, [pc, #8]	; (c158 <process+0x20>)
    c14e:	220f      	movs	r2, #15
    c150:	4718      	bx	r3
    c152:	bf00      	nop
    c154:	20001ea8 	.word	0x20001ea8
    c158:	00018bd0 	.word	0x00018bd0

0000c15c <on_failed_write>:
	if (retry_cnt == 0) {
    c15c:	b910      	cbnz	r0, c164 <on_failed_write+0x8>
		host_present = false;
    c15e:	4b07      	ldr	r3, [pc, #28]	; (c17c <on_failed_write+0x20>)
    c160:	7018      	strb	r0, [r3, #0]
}
    c162:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    c164:	4b06      	ldr	r3, [pc, #24]	; (c180 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    c166:	781b      	ldrb	r3, [r3, #0]
    c168:	b11b      	cbz	r3, c172 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    c16a:	f241 3088 	movw	r0, #5000	; 0x1388
    c16e:	f00c b917 	b.w	183a0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    c172:	20a4      	movs	r0, #164	; 0xa4
    c174:	2100      	movs	r1, #0
    c176:	f007 b821 	b.w	131bc <z_impl_k_sleep>
    c17a:	bf00      	nop
    c17c:	20003129 	.word	0x20003129
    c180:	2000312a 	.word	0x2000312a

0000c184 <data_out_block_mode>:
{
    c184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    c188:	f8df 9074 	ldr.w	r9, [pc, #116]	; c200 <data_out_block_mode+0x7c>
    c18c:	4f1d      	ldr	r7, [pc, #116]	; (c204 <data_out_block_mode+0x80>)
{
    c18e:	4680      	mov	r8, r0
    c190:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    c192:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    c194:	f899 5000 	ldrb.w	r5, [r9]
    c198:	b995      	cbnz	r5, c1c0 <data_out_block_mode+0x3c>
			RTT_LOCK();
    c19a:	f005 ffd5 	bl	12148 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    c19e:	4628      	mov	r0, r5
    c1a0:	4632      	mov	r2, r6
    c1a2:	4641      	mov	r1, r8
    c1a4:	f005 ff7e 	bl	120a4 <SEGGER_RTT_WriteSkipNoLock>
    c1a8:	4605      	mov	r5, r0
			RTT_UNLOCK();
    c1aa:	f005 ffd7 	bl	1215c <zephyr_rtt_mutex_unlock>
		if (ret) {
    c1ae:	b1e5      	cbz	r5, c1ea <data_out_block_mode+0x66>
	host_present = true;
    c1b0:	2301      	movs	r3, #1
    c1b2:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    c1b4:	f899 3000 	ldrb.w	r3, [r9]
    c1b8:	b973      	cbnz	r3, c1d8 <data_out_block_mode+0x54>
}
    c1ba:	4630      	mov	r0, r6
    c1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    c1c0:	4632      	mov	r2, r6
    c1c2:	4641      	mov	r1, r8
    c1c4:	2000      	movs	r0, #0
    c1c6:	f005 ff6d 	bl	120a4 <SEGGER_RTT_WriteSkipNoLock>
    c1ca:	4605      	mov	r5, r0
    c1cc:	e7ef      	b.n	c1ae <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    c1ce:	4620      	mov	r0, r4
    c1d0:	f7ff ffc4 	bl	c15c <on_failed_write>
    c1d4:	1e65      	subs	r5, r4, #1
    c1d6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    c1d8:	2000      	movs	r0, #0
    c1da:	f005 ffab 	bl	12134 <SEGGER_RTT_HasDataUp>
    c1de:	2800      	cmp	r0, #0
    c1e0:	d0eb      	beq.n	c1ba <data_out_block_mode+0x36>
    c1e2:	783b      	ldrb	r3, [r7, #0]
    c1e4:	2b00      	cmp	r3, #0
    c1e6:	d1f2      	bne.n	c1ce <data_out_block_mode+0x4a>
    c1e8:	e7e7      	b.n	c1ba <data_out_block_mode+0x36>
		} else if (host_present) {
    c1ea:	783b      	ldrb	r3, [r7, #0]
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d0e4      	beq.n	c1ba <data_out_block_mode+0x36>
			retry_cnt--;
    c1f0:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    c1f2:	4620      	mov	r0, r4
    c1f4:	f7ff ffb2 	bl	c15c <on_failed_write>
	} while ((ret == 0) && host_present);
    c1f8:	783b      	ldrb	r3, [r7, #0]
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	d1ca      	bne.n	c194 <data_out_block_mode+0x10>
    c1fe:	e7dc      	b.n	c1ba <data_out_block_mode+0x36>
    c200:	2000312a 	.word	0x2000312a
    c204:	20003129 	.word	0x20003129

0000c208 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    c208:	4b01      	ldr	r3, [pc, #4]	; (c210 <format_set+0x8>)
	return 0;
}
    c20a:	2000      	movs	r0, #0
	log_format_current = log_type;
    c20c:	6019      	str	r1, [r3, #0]
}
    c20e:	4770      	bx	lr
    c210:	20001ec0 	.word	0x20001ec0

0000c214 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    c214:	4b02      	ldr	r3, [pc, #8]	; (c220 <panic+0xc>)
	log_output_flush(output);
    c216:	4803      	ldr	r0, [pc, #12]	; (c224 <panic+0x10>)
    c218:	2201      	movs	r2, #1
    c21a:	701a      	strb	r2, [r3, #0]
    c21c:	f00a bde5 	b.w	16dea <log_output_flush>
    c220:	2000313c 	.word	0x2000313c
    c224:	00018bfc 	.word	0x00018bfc

0000c228 <dropped>:
	log_output_dropped_process(output, cnt);
    c228:	4801      	ldr	r0, [pc, #4]	; (c230 <dropped+0x8>)
    c22a:	f7ff bf27 	b.w	c07c <log_output_dropped_process>
    c22e:	bf00      	nop
    c230:	00018bfc 	.word	0x00018bfc

0000c234 <process>:
{
    c234:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c236:	4b06      	ldr	r3, [pc, #24]	; (c250 <process+0x1c>)
    c238:	6818      	ldr	r0, [r3, #0]
{
    c23a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c23c:	f7ff fac4 	bl	b7c8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    c240:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    c242:	4603      	mov	r3, r0
}
    c244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    c248:	4802      	ldr	r0, [pc, #8]	; (c254 <process+0x20>)
    c24a:	220f      	movs	r2, #15
    c24c:	4718      	bx	r3
    c24e:	bf00      	nop
    c250:	20001ec0 	.word	0x20001ec0
    c254:	00018bfc 	.word	0x00018bfc

0000c258 <char_out>:
{
    c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
    c25a:	4f07      	ldr	r7, [pc, #28]	; (c278 <char_out+0x20>)
    c25c:	460d      	mov	r5, r1
    c25e:	4604      	mov	r4, r0
    c260:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    c262:	42b4      	cmp	r4, r6
    c264:	d101      	bne.n	c26a <char_out+0x12>
}
    c266:	4628      	mov	r0, r5
    c268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    c26a:	f814 1b01 	ldrb.w	r1, [r4], #1
    c26e:	68bb      	ldr	r3, [r7, #8]
    c270:	4801      	ldr	r0, [pc, #4]	; (c278 <char_out+0x20>)
    c272:	69db      	ldr	r3, [r3, #28]
    c274:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    c276:	e7f4      	b.n	c262 <char_out+0xa>
    c278:	0001881c 	.word	0x0001881c

0000c27c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c280:	4605      	mov	r5, r0
	__asm__ volatile(
    c282:	f04f 0340 	mov.w	r3, #64	; 0x40
    c286:	f3ef 8611 	mrs	r6, BASEPRI
    c28a:	f383 8812 	msr	BASEPRI_MAX, r3
    c28e:	f3bf 8f6f 	isb	sy
	return list->head;
    c292:	4b0e      	ldr	r3, [pc, #56]	; (c2cc <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c294:	4f0e      	ldr	r7, [pc, #56]	; (c2d0 <pm_state_notify+0x54>)
    c296:	681c      	ldr	r4, [r3, #0]
    c298:	f8df 8038 	ldr.w	r8, [pc, #56]	; c2d4 <pm_state_notify+0x58>
    c29c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    c2a0:	b92c      	cbnz	r4, c2ae <pm_state_notify+0x32>
	__asm__ volatile(
    c2a2:	f386 8811 	msr	BASEPRI, r6
    c2a6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    c2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    c2ae:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    c2b2:	2d00      	cmp	r5, #0
    c2b4:	bf18      	it	ne
    c2b6:	4613      	movne	r3, r2
		if (callback) {
    c2b8:	b12b      	cbz	r3, c2c6 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    c2ba:	f898 2010 	ldrb.w	r2, [r8, #16]
    c2be:	fb09 f202 	mul.w	r2, r9, r2
    c2c2:	5cb8      	ldrb	r0, [r7, r2]
    c2c4:	4798      	blx	r3
	return node->next;
    c2c6:	6824      	ldr	r4, [r4, #0]
    c2c8:	e7ea      	b.n	c2a0 <pm_state_notify+0x24>
    c2ca:	bf00      	nop
    c2cc:	20001edc 	.word	0x20001edc
    c2d0:	20001ed0 	.word	0x20001ed0
    c2d4:	20002614 	.word	0x20002614

0000c2d8 <pm_system_resume>:

void pm_system_resume(void)
{
    c2d8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    c2da:	4b19      	ldr	r3, [pc, #100]	; (c340 <pm_system_resume+0x68>)
    c2dc:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c2de:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c2e2:	f004 031f 	and.w	r3, r4, #31
    c2e6:	2201      	movs	r2, #1
    c2e8:	409a      	lsls	r2, r3
    c2ea:	4b16      	ldr	r3, [pc, #88]	; (c344 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c2ec:	0961      	lsrs	r1, r4, #5
    c2ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c2f2:	43d0      	mvns	r0, r2
    c2f4:	e853 1f00 	ldrex	r1, [r3]
    c2f8:	ea01 0500 	and.w	r5, r1, r0
    c2fc:	e843 5600 	strex	r6, r5, [r3]
    c300:	2e00      	cmp	r6, #0
    c302:	d1f7      	bne.n	c2f4 <pm_system_resume+0x1c>
    c304:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    c308:	420a      	tst	r2, r1
    c30a:	d013      	beq.n	c334 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    c30c:	4b0e      	ldr	r3, [pc, #56]	; (c348 <pm_system_resume+0x70>)
    c30e:	4d0f      	ldr	r5, [pc, #60]	; (c34c <pm_system_resume+0x74>)
    c310:	b18b      	cbz	r3, c336 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    c312:	230c      	movs	r3, #12
    c314:	4363      	muls	r3, r4
    c316:	18ea      	adds	r2, r5, r3
    c318:	5ce8      	ldrb	r0, [r5, r3]
    c31a:	7851      	ldrb	r1, [r2, #1]
    c31c:	f00a fe16 	bl	16f4c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    c320:	2000      	movs	r0, #0
    c322:	f7ff ffab 	bl	c27c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    c326:	230c      	movs	r3, #12
    c328:	435c      	muls	r4, r3
    c32a:	192a      	adds	r2, r5, r4
    c32c:	2300      	movs	r3, #0
    c32e:	512b      	str	r3, [r5, r4]
    c330:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    c334:	bd70      	pop	{r4, r5, r6, pc}
    c336:	f383 8811 	msr	BASEPRI, r3
    c33a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    c33e:	e7ef      	b.n	c320 <pm_system_resume+0x48>
    c340:	20002614 	.word	0x20002614
    c344:	20001ee4 	.word	0x20001ee4
    c348:	00016f4d 	.word	0x00016f4d
    c34c:	20001ed0 	.word	0x20001ed0

0000c350 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    c350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    c354:	4b35      	ldr	r3, [pc, #212]	; (c42c <pm_system_suspend+0xdc>)
{
    c356:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    c358:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    c35a:	f04f 0340 	mov.w	r3, #64	; 0x40
    c35e:	f3ef 8811 	mrs	r8, BASEPRI
    c362:	f383 8812 	msr	BASEPRI_MAX, r3
    c366:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    c36a:	240c      	movs	r4, #12
    c36c:	4b30      	ldr	r3, [pc, #192]	; (c430 <pm_system_suspend+0xe0>)
    c36e:	4e31      	ldr	r6, [pc, #196]	; (c434 <pm_system_suspend+0xe4>)
    c370:	436c      	muls	r4, r5
    c372:	191a      	adds	r2, r3, r4
    c374:	5d19      	ldrb	r1, [r3, r4]
    c376:	2900      	cmp	r1, #0
    c378:	d04c      	beq.n	c414 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    c37a:	ca07      	ldmia	r2, {r0, r1, r2}
    c37c:	eb06 0c04 	add.w	ip, r6, r4
    c380:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    c384:	2200      	movs	r2, #0
    c386:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    c388:	f388 8811 	msr	BASEPRI, r8
    c38c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    c390:	230c      	movs	r3, #12
    c392:	436b      	muls	r3, r5
    c394:	18f2      	adds	r2, r6, r3
    c396:	5cf0      	ldrb	r0, [r6, r3]
    c398:	2800      	cmp	r0, #0
    c39a:	d039      	beq.n	c410 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    c39c:	1c7b      	adds	r3, r7, #1
    c39e:	d010      	beq.n	c3c2 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    c3a0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    c3a4:	4c24      	ldr	r4, [pc, #144]	; (c438 <pm_system_suspend+0xe8>)
    c3a6:	4a25      	ldr	r2, [pc, #148]	; (c43c <pm_system_suspend+0xec>)
    c3a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c3ac:	2100      	movs	r1, #0
    c3ae:	fbec 4100 	umlal	r4, r1, ip, r0
    c3b2:	2300      	movs	r3, #0
    c3b4:	4620      	mov	r0, r4
    c3b6:	f7f3 fea3 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    c3ba:	2101      	movs	r1, #1
    c3bc:	1a38      	subs	r0, r7, r0
    c3be:	f004 f8d7 	bl	10570 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    c3c2:	f006 fe41 	bl	13048 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    c3c6:	2001      	movs	r0, #1
    c3c8:	f7ff ff58 	bl	c27c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c3cc:	f3bf 8f5b 	dmb	ish
    c3d0:	4b1b      	ldr	r3, [pc, #108]	; (c440 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    c3d2:	096a      	lsrs	r2, r5, #5
    c3d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    c3d8:	f005 011f 	and.w	r1, r5, #31
    c3dc:	2201      	movs	r2, #1
    c3de:	408a      	lsls	r2, r1
    c3e0:	e853 0f00 	ldrex	r0, [r3]
    c3e4:	4310      	orrs	r0, r2
    c3e6:	e843 0100 	strex	r1, r0, [r3]
    c3ea:	2900      	cmp	r1, #0
    c3ec:	d1f8      	bne.n	c3e0 <pm_system_suspend+0x90>
    c3ee:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    c3f2:	4b14      	ldr	r3, [pc, #80]	; (c444 <pm_system_suspend+0xf4>)
    c3f4:	b13b      	cbz	r3, c406 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    c3f6:	230c      	movs	r3, #12
    c3f8:	fb03 f005 	mul.w	r0, r3, r5
    c3fc:	1833      	adds	r3, r6, r0
    c3fe:	5c30      	ldrb	r0, [r6, r0]
    c400:	7859      	ldrb	r1, [r3, #1]
    c402:	f00a fd97 	bl	16f34 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    c406:	f7ff ff67 	bl	c2d8 <pm_system_resume>
	k_sched_unlock();
    c40a:	f006 fe31 	bl	13070 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    c40e:	2001      	movs	r0, #1
}
    c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    c414:	4601      	mov	r1, r0
    c416:	4628      	mov	r0, r5
    c418:	f000 f816 	bl	c448 <pm_policy_next_state>
		if (info != NULL) {
    c41c:	2800      	cmp	r0, #0
    c41e:	d0b3      	beq.n	c388 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    c420:	c807      	ldmia	r0, {r0, r1, r2}
    c422:	4434      	add	r4, r6
    c424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c428:	e7ae      	b.n	c388 <pm_system_suspend+0x38>
    c42a:	bf00      	nop
    c42c:	20002614 	.word	0x20002614
    c430:	20001ec4 	.word	0x20001ec4
    c434:	20001ed0 	.word	0x20001ed0
    c438:	000f423f 	.word	0x000f423f
    c43c:	000f4240 	.word	0x000f4240
    c440:	20001ee4 	.word	0x20001ee4
    c444:	00016f35 	.word	0x00016f35

0000c448 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    c448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c44c:	b085      	sub	sp, #20
    c44e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c450:	a903      	add	r1, sp, #12
    c452:	f000 f843 	bl	c4dc <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c456:	4b1e      	ldr	r3, [pc, #120]	; (c4d0 <pm_policy_next_state+0x88>)
    c458:	9d03      	ldr	r5, [sp, #12]
    c45a:	f8d3 a000 	ldr.w	sl, [r3]
    c45e:	f8df 8074 	ldr.w	r8, [pc, #116]	; c4d4 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c462:	1e43      	subs	r3, r0, #1
    c464:	b21b      	sxth	r3, r3
    c466:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    c46a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c46c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c470:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    c474:	f04f 0b00 	mov.w	fp, #0
    c478:	b924      	cbnz	r4, c484 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    c47a:	46a1      	mov	r9, r4
}
    c47c:	4648      	mov	r0, r9
    c47e:	b005      	add	sp, #20
    c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c484:	6868      	ldr	r0, [r5, #4]
    c486:	4a14      	ldr	r2, [pc, #80]	; (c4d8 <pm_policy_next_state+0x90>)
    c488:	46c4      	mov	ip, r8
    c48a:	4659      	mov	r1, fp
    c48c:	fbe0 c107 	umlal	ip, r1, r0, r7
    c490:	2300      	movs	r3, #0
    c492:	4660      	mov	r0, ip
    c494:	f7f3 fe34 	bl	100 <__aeabi_uldivmod>
    c498:	9001      	str	r0, [sp, #4]
    c49a:	68a8      	ldr	r0, [r5, #8]
    c49c:	4a0e      	ldr	r2, [pc, #56]	; (c4d8 <pm_policy_next_state+0x90>)
    c49e:	46c4      	mov	ip, r8
    c4a0:	4659      	mov	r1, fp
    c4a2:	fbe0 c107 	umlal	ip, r1, r0, r7
    c4a6:	2300      	movs	r3, #0
    c4a8:	4660      	mov	r0, ip
    c4aa:	f7f3 fe29 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c4ae:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    c4b2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    c4b4:	d001      	beq.n	c4ba <pm_policy_next_state+0x72>
    c4b6:	4582      	cmp	sl, r0
    c4b8:	d905      	bls.n	c4c6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    c4ba:	1c73      	adds	r3, r6, #1
    c4bc:	d0de      	beq.n	c47c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    c4be:	9b01      	ldr	r3, [sp, #4]
    c4c0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    c4c2:	42b0      	cmp	r0, r6
    c4c4:	d9da      	bls.n	c47c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    c4c6:	3c01      	subs	r4, #1
    c4c8:	b2a4      	uxth	r4, r4
    c4ca:	3d0c      	subs	r5, #12
    c4cc:	e7d4      	b.n	c478 <pm_policy_next_state+0x30>
    c4ce:	bf00      	nop
    c4d0:	200003b8 	.word	0x200003b8
    c4d4:	000f423f 	.word	0x000f423f
    c4d8:	000f4240 	.word	0x000f4240

0000c4dc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    c4dc:	b908      	cbnz	r0, c4e2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    c4de:	4b02      	ldr	r3, [pc, #8]	; (c4e8 <pm_state_cpu_get_all+0xc>)
    c4e0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    c4e2:	2000      	movs	r0, #0
    c4e4:	4770      	bx	lr
    c4e6:	bf00      	nop
    c4e8:	00018c0c 	.word	0x00018c0c

0000c4ec <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    c4ec:	4801      	ldr	r0, [pc, #4]	; (c4f4 <nrf_cc3xx_platform_abort_init+0x8>)
    c4ee:	f007 ba05 	b.w	138fc <nrf_cc3xx_platform_set_abort>
    c4f2:	bf00      	nop
    c4f4:	00018c0c 	.word	0x00018c0c

0000c4f8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c4f8:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    c4fa:	4604      	mov	r4, r0
    c4fc:	b918      	cbnz	r0, c506 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    c4fe:	4b0f      	ldr	r3, [pc, #60]	; (c53c <mutex_free_platform+0x44>)
    c500:	480f      	ldr	r0, [pc, #60]	; (c540 <mutex_free_platform+0x48>)
    c502:	685b      	ldr	r3, [r3, #4]
    c504:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    c506:	6861      	ldr	r1, [r4, #4]
    c508:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    c50c:	d00f      	beq.n	c52e <mutex_free_platform+0x36>
    c50e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    c512:	d00c      	beq.n	c52e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    c514:	4d0b      	ldr	r5, [pc, #44]	; (c544 <mutex_free_platform+0x4c>)
    c516:	42a9      	cmp	r1, r5
    c518:	d009      	beq.n	c52e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    c51a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    c51e:	d007      	beq.n	c530 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    c520:	4809      	ldr	r0, [pc, #36]	; (c548 <mutex_free_platform+0x50>)
    c522:	4621      	mov	r1, r4
    c524:	f00b fc3b 	bl	17d9e <k_mem_slab_free>
        mutex->mutex = NULL;
    c528:	2300      	movs	r3, #0
    c52a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    c52c:	6065      	str	r5, [r4, #4]
}
    c52e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    c530:	6820      	ldr	r0, [r4, #0]
    c532:	2214      	movs	r2, #20
    c534:	f00a fcf2 	bl	16f1c <memset>
    c538:	e7f8      	b.n	c52c <mutex_free_platform+0x34>
    c53a:	bf00      	nop
    c53c:	200004b4 	.word	0x200004b4
    c540:	00019220 	.word	0x00019220
    c544:	a95c5f2c 	.word	0xa95c5f2c
    c548:	200023e8 	.word	0x200023e8

0000c54c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c54c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    c54e:	b320      	cbz	r0, c59a <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    c550:	6843      	ldr	r3, [r0, #4]
    c552:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    c556:	d110      	bne.n	c57a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c558:	2201      	movs	r2, #1
    c55a:	6803      	ldr	r3, [r0, #0]
    c55c:	f3bf 8f5b 	dmb	ish
    c560:	e853 1f00 	ldrex	r1, [r3]
    c564:	2900      	cmp	r1, #0
    c566:	d103      	bne.n	c570 <mutex_lock_platform+0x24>
    c568:	e843 2000 	strex	r0, r2, [r3]
    c56c:	2800      	cmp	r0, #0
    c56e:	d1f7      	bne.n	c560 <mutex_lock_platform+0x14>
    c570:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c574:	d10d      	bne.n	c592 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    c576:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    c578:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    c57a:	4a09      	ldr	r2, [pc, #36]	; (c5a0 <mutex_lock_platform+0x54>)
    c57c:	4293      	cmp	r3, r2
    c57e:	d00a      	beq.n	c596 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    c580:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    c582:	f04f 32ff 	mov.w	r2, #4294967295
    c586:	f04f 33ff 	mov.w	r3, #4294967295
    c58a:	f006 f885 	bl	12698 <z_impl_k_mutex_lock>
        if (ret == 0) {
    c58e:	2800      	cmp	r0, #0
    c590:	d0f1      	beq.n	c576 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c592:	4804      	ldr	r0, [pc, #16]	; (c5a4 <mutex_lock_platform+0x58>)
    c594:	e7f0      	b.n	c578 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    c596:	4804      	ldr	r0, [pc, #16]	; (c5a8 <mutex_lock_platform+0x5c>)
    c598:	e7ee      	b.n	c578 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    c59a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c59e:	e7eb      	b.n	c578 <mutex_lock_platform+0x2c>
    c5a0:	a95c5f2c 	.word	0xa95c5f2c
    c5a4:	ffff8fe9 	.word	0xffff8fe9
    c5a8:	ffff8fea 	.word	0xffff8fea

0000c5ac <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c5ac:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    c5ae:	b1d8      	cbz	r0, c5e8 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    c5b0:	6843      	ldr	r3, [r0, #4]
    c5b2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    c5b6:	d110      	bne.n	c5da <mutex_unlock_platform+0x2e>
    c5b8:	2200      	movs	r2, #0
    c5ba:	6803      	ldr	r3, [r0, #0]
    c5bc:	f3bf 8f5b 	dmb	ish
    c5c0:	e853 1f00 	ldrex	r1, [r3]
    c5c4:	2901      	cmp	r1, #1
    c5c6:	d103      	bne.n	c5d0 <mutex_unlock_platform+0x24>
    c5c8:	e843 2000 	strex	r0, r2, [r3]
    c5cc:	2800      	cmp	r0, #0
    c5ce:	d1f7      	bne.n	c5c0 <mutex_unlock_platform+0x14>
    c5d0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c5d4:	d10b      	bne.n	c5ee <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    c5d6:	2000      	movs	r0, #0
    }
}
    c5d8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    c5da:	4a07      	ldr	r2, [pc, #28]	; (c5f8 <mutex_unlock_platform+0x4c>)
    c5dc:	4293      	cmp	r3, r2
    c5de:	d008      	beq.n	c5f2 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    c5e0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    c5e2:	f006 f8d3 	bl	1278c <z_impl_k_mutex_unlock>
    c5e6:	e7f6      	b.n	c5d6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    c5e8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    c5ec:	e7f4      	b.n	c5d8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    c5ee:	4803      	ldr	r0, [pc, #12]	; (c5fc <mutex_unlock_platform+0x50>)
    c5f0:	e7f2      	b.n	c5d8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    c5f2:	4803      	ldr	r0, [pc, #12]	; (c600 <mutex_unlock_platform+0x54>)
    c5f4:	e7f0      	b.n	c5d8 <mutex_unlock_platform+0x2c>
    c5f6:	bf00      	nop
    c5f8:	a95c5f2c 	.word	0xa95c5f2c
    c5fc:	ffff8fe9 	.word	0xffff8fe9
    c600:	ffff8fea 	.word	0xffff8fea

0000c604 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    c604:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    c606:	4604      	mov	r4, r0
    c608:	b918      	cbnz	r0, c612 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    c60a:	4b1d      	ldr	r3, [pc, #116]	; (c680 <mutex_init_platform+0x7c>)
    c60c:	481d      	ldr	r0, [pc, #116]	; (c684 <mutex_init_platform+0x80>)
    c60e:	685b      	ldr	r3, [r3, #4]
    c610:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    c612:	6863      	ldr	r3, [r4, #4]
    c614:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    c618:	d02f      	beq.n	c67a <mutex_init_platform+0x76>
    c61a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    c61e:	d02c      	beq.n	c67a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    c620:	4a19      	ldr	r2, [pc, #100]	; (c688 <mutex_init_platform+0x84>)
    c622:	4293      	cmp	r3, r2
    c624:	d119      	bne.n	c65a <mutex_init_platform+0x56>
    c626:	6823      	ldr	r3, [r4, #0]
    c628:	bb03      	cbnz	r3, c66c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    c62a:	4818      	ldr	r0, [pc, #96]	; (c68c <mutex_init_platform+0x88>)
    c62c:	f04f 32ff 	mov.w	r2, #4294967295
    c630:	f04f 33ff 	mov.w	r3, #4294967295
    c634:	4621      	mov	r1, r4
    c636:	f005 ff2b 	bl	12490 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    c63a:	b908      	cbnz	r0, c640 <mutex_init_platform+0x3c>
    c63c:	6823      	ldr	r3, [r4, #0]
    c63e:	b91b      	cbnz	r3, c648 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    c640:	4b0f      	ldr	r3, [pc, #60]	; (c680 <mutex_init_platform+0x7c>)
    c642:	4813      	ldr	r0, [pc, #76]	; (c690 <mutex_init_platform+0x8c>)
    c644:	685b      	ldr	r3, [r3, #4]
    c646:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    c648:	6820      	ldr	r0, [r4, #0]
    c64a:	2214      	movs	r2, #20
    c64c:	2100      	movs	r1, #0
    c64e:	f00a fc65 	bl	16f1c <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    c652:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    c656:	6063      	str	r3, [r4, #4]
    c658:	e008      	b.n	c66c <mutex_init_platform+0x68>
    switch(flags){
    c65a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    c65e:	d80d      	bhi.n	c67c <mutex_init_platform+0x78>
    c660:	2b3a      	cmp	r3, #58	; 0x3a
    c662:	d003      	beq.n	c66c <mutex_init_platform+0x68>
    c664:	f640 62ba 	movw	r2, #3770	; 0xeba
    c668:	4293      	cmp	r3, r2
    c66a:	d1de      	bne.n	c62a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    c66c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    c66e:	f00b fbdb 	bl	17e28 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    c672:	6863      	ldr	r3, [r4, #4]
    c674:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    c678:	6063      	str	r3, [r4, #4]
}
    c67a:	bd10      	pop	{r4, pc}
    switch(flags){
    c67c:	4a05      	ldr	r2, [pc, #20]	; (c694 <mutex_init_platform+0x90>)
    c67e:	e7f3      	b.n	c668 <mutex_init_platform+0x64>
    c680:	200004b4 	.word	0x200004b4
    c684:	00019220 	.word	0x00019220
    c688:	a95c5f2c 	.word	0xa95c5f2c
    c68c:	200023e8 	.word	0x200023e8
    c690:	00019246 	.word	0x00019246
    c694:	3a00003a 	.word	0x3a00003a

0000c698 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    c698:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    c69a:	4906      	ldr	r1, [pc, #24]	; (c6b4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    c69c:	4806      	ldr	r0, [pc, #24]	; (c6b8 <nrf_cc3xx_platform_mutex_init+0x20>)
    c69e:	2340      	movs	r3, #64	; 0x40
    c6a0:	2214      	movs	r2, #20
    c6a2:	f00b fb6e 	bl	17d82 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    c6a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    c6aa:	4904      	ldr	r1, [pc, #16]	; (c6bc <nrf_cc3xx_platform_mutex_init+0x24>)
    c6ac:	4804      	ldr	r0, [pc, #16]	; (c6c0 <nrf_cc3xx_platform_mutex_init+0x28>)
    c6ae:	f007 b9e9 	b.w	13a84 <nrf_cc3xx_platform_set_mutexes>
    c6b2:	bf00      	nop
    c6b4:	20001ee8 	.word	0x20001ee8
    c6b8:	200023e8 	.word	0x200023e8
    c6bc:	00018c14 	.word	0x00018c14
    c6c0:	00018c28 	.word	0x00018c28

0000c6c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    c6c4:	4901      	ldr	r1, [pc, #4]	; (c6cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    c6c6:	2210      	movs	r2, #16
	str	r2, [r1]
    c6c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    c6ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    c6cc:	e000ed10 	.word	0xe000ed10

0000c6d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    c6d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    c6d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    c6d4:	f380 8811 	msr	BASEPRI, r0
	isb
    c6d8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    c6dc:	f3bf 8f4f 	dsb	sy
    c6e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    c6e2:	b662      	cpsie	i
	isb
    c6e4:	f3bf 8f6f 	isb	sy

	bx	lr
    c6e8:	4770      	bx	lr
    c6ea:	bf00      	nop

0000c6ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    c6ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    c6ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    c6f0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    c6f4:	f3bf 8f4f 	dsb	sy
    c6f8:	bf20      	wfe

	msr	BASEPRI, r0
    c6fa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    c6fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    c700:	4770      	bx	lr
    c702:	bf00      	nop

0000c704 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    c704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c708:	4681      	mov	r9, r0
    c70a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    c70c:	460c      	mov	r4, r1
    c70e:	2900      	cmp	r1, #0
    c710:	d04c      	beq.n	c7ac <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    c712:	466e      	mov	r6, sp
    c714:	b08a      	sub	sp, #40	; 0x28
    c716:	e9d1 1200 	ldrd	r1, r2, [r1]
    c71a:	68a3      	ldr	r3, [r4, #8]
    c71c:	466d      	mov	r5, sp
    c71e:	4827      	ldr	r0, [pc, #156]	; (c7bc <z_arm_fatal_error+0xb8>)
    c720:	46a8      	mov	r8, r5
    c722:	f04f 0a05 	mov.w	sl, #5
    c726:	e9c5 0105 	strd	r0, r1, [r5, #20]
    c72a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    c72e:	f848 af10 	str.w	sl, [r8, #16]!
    c732:	4823      	ldr	r0, [pc, #140]	; (c7c0 <z_arm_fatal_error+0xbc>)
    c734:	4642      	mov	r2, r8
    c736:	2300      	movs	r3, #0
    c738:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c73c:	f7ff fa2c 	bl	bb98 <z_impl_z_log_msg_static_create>
    c740:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    c742:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    c746:	6963      	ldr	r3, [r4, #20]
    c748:	46ad      	mov	sp, r5
    c74a:	481e      	ldr	r0, [pc, #120]	; (c7c4 <z_arm_fatal_error+0xc0>)
    c74c:	f8c5 a010 	str.w	sl, [r5, #16]
    c750:	e9c5 0105 	strd	r0, r1, [r5, #20]
    c754:	e9c5 2307 	strd	r2, r3, [r5, #28]
    c758:	4819      	ldr	r0, [pc, #100]	; (c7c0 <z_arm_fatal_error+0xbc>)
    c75a:	2300      	movs	r3, #0
    c75c:	4642      	mov	r2, r8
    c75e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    c762:	f7ff fa19 	bl	bb98 <z_impl_z_log_msg_static_create>
    c766:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    c768:	b088      	sub	sp, #32
    c76a:	69e3      	ldr	r3, [r4, #28]
    c76c:	466d      	mov	r5, sp
    c76e:	4a16      	ldr	r2, [pc, #88]	; (c7c8 <z_arm_fatal_error+0xc4>)
    c770:	46a8      	mov	r8, r5
    c772:	f04f 0a03 	mov.w	sl, #3
    c776:	e9c5 2305 	strd	r2, r3, [r5, #20]
    c77a:	f848 af10 	str.w	sl, [r8, #16]!
    c77e:	4810      	ldr	r0, [pc, #64]	; (c7c0 <z_arm_fatal_error+0xbc>)
    c780:	2300      	movs	r3, #0
    c782:	4642      	mov	r2, r8
    c784:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c788:	f7ff fa06 	bl	bb98 <z_impl_z_log_msg_static_create>
    c78c:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    c78e:	69a3      	ldr	r3, [r4, #24]
    c790:	46ad      	mov	sp, r5
    c792:	4a0e      	ldr	r2, [pc, #56]	; (c7cc <z_arm_fatal_error+0xc8>)
    c794:	f8c5 a010 	str.w	sl, [r5, #16]
    c798:	e9c5 2305 	strd	r2, r3, [r5, #20]
    c79c:	4808      	ldr	r0, [pc, #32]	; (c7c0 <z_arm_fatal_error+0xbc>)
    c79e:	2300      	movs	r3, #0
    c7a0:	4642      	mov	r2, r8
    c7a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c7a6:	f7ff f9f7 	bl	bb98 <z_impl_z_log_msg_static_create>
    c7aa:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    c7ac:	4621      	mov	r1, r4
    c7ae:	4648      	mov	r0, r9
    c7b0:	f005 fcda 	bl	12168 <z_fatal_error>
}
    c7b4:	46bd      	mov	sp, r7
    c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7ba:	bf00      	nop
    c7bc:	00019273 	.word	0x00019273
    c7c0:	00018aac 	.word	0x00018aac
    c7c4:	000192a2 	.word	0x000192a2
    c7c8:	000192d1 	.word	0x000192d1
    c7cc:	000192e0 	.word	0x000192e0

0000c7d0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    c7d0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c7d2:	2800      	cmp	r0, #0
    c7d4:	db07      	blt.n	c7e6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c7d6:	4a04      	ldr	r2, [pc, #16]	; (c7e8 <arch_irq_enable+0x18>)
    c7d8:	0941      	lsrs	r1, r0, #5
    c7da:	2301      	movs	r3, #1
    c7dc:	f000 001f 	and.w	r0, r0, #31
    c7e0:	4083      	lsls	r3, r0
    c7e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    c7e6:	4770      	bx	lr
    c7e8:	e000e100 	.word	0xe000e100

0000c7ec <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    c7ec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    c7ee:	2800      	cmp	r0, #0
    c7f0:	db0c      	blt.n	c80c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c7f2:	0943      	lsrs	r3, r0, #5
    c7f4:	4906      	ldr	r1, [pc, #24]	; (c810 <arch_irq_disable+0x24>)
    c7f6:	f000 001f 	and.w	r0, r0, #31
    c7fa:	3320      	adds	r3, #32
    c7fc:	2201      	movs	r2, #1
    c7fe:	4082      	lsls	r2, r0
    c800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c804:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c808:	f3bf 8f6f 	isb	sy
}
    c80c:	4770      	bx	lr
    c80e:	bf00      	nop
    c810:	e000e100 	.word	0xe000e100

0000c814 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    c814:	4b05      	ldr	r3, [pc, #20]	; (c82c <arch_irq_is_enabled+0x18>)
    c816:	0942      	lsrs	r2, r0, #5
    c818:	f000 001f 	and.w	r0, r0, #31
    c81c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    c820:	2301      	movs	r3, #1
    c822:	fa03 f000 	lsl.w	r0, r3, r0
}
    c826:	4010      	ands	r0, r2
    c828:	4770      	bx	lr
    c82a:	bf00      	nop
    c82c:	e000e100 	.word	0xe000e100

0000c830 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    c830:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    c832:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    c834:	bf54      	ite	pl
    c836:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    c838:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    c83a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c83c:	bfac      	ite	ge
    c83e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c842:	4a07      	ldrlt	r2, [pc, #28]	; (c860 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c844:	ea4f 1341 	mov.w	r3, r1, lsl #5
    c848:	bfac      	ite	ge
    c84a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c84e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c852:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c854:	bfb4      	ite	lt
    c856:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    c858:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    c85c:	4770      	bx	lr
    c85e:	bf00      	nop
    c860:	e000ed14 	.word	0xe000ed14

0000c864 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    c864:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    c866:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    c868:	4b04      	ldr	r3, [pc, #16]	; (c87c <_arch_isr_direct_pm+0x18>)
    c86a:	695a      	ldr	r2, [r3, #20]
    c86c:	b11a      	cbz	r2, c876 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    c86e:	2200      	movs	r2, #0
    c870:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    c872:	f00b faca 	bl	17e0a <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    c876:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    c878:	bd08      	pop	{r3, pc}
    c87a:	bf00      	nop
    c87c:	20002614 	.word	0x20002614

0000c880 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    c880:	bf30      	wfi
    b z_SysNmiOnReset
    c882:	f7ff bffd 	b.w	c880 <z_SysNmiOnReset>
    c886:	bf00      	nop

0000c888 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c888:	4a0b      	ldr	r2, [pc, #44]	; (c8b8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    c88a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    c88c:	4b0b      	ldr	r3, [pc, #44]	; (c8bc <z_arm_prep_c+0x34>)
    c88e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    c892:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    c894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    c898:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    c89c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    c8a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    c8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    c8a8:	f005 fd1a 	bl	122e0 <z_bss_zero>
	z_data_copy();
    c8ac:	f006 fd18 	bl	132e0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    c8b0:	f000 fbd6 	bl	d060 <z_arm_interrupt_init>
	z_cstart();
    c8b4:	f005 fd58 	bl	12368 <z_cstart>
    c8b8:	00000000 	.word	0x00000000
    c8bc:	e000ed00 	.word	0xe000ed00

0000c8c0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    c8c0:	4a09      	ldr	r2, [pc, #36]	; (c8e8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    c8c2:	490a      	ldr	r1, [pc, #40]	; (c8ec <arch_swap+0x2c>)
	_current->arch.basepri = key;
    c8c4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    c8c6:	6809      	ldr	r1, [r1, #0]
    c8c8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c8ca:	4909      	ldr	r1, [pc, #36]	; (c8f0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    c8cc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    c8ce:	684b      	ldr	r3, [r1, #4]
    c8d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c8d4:	604b      	str	r3, [r1, #4]
    c8d6:	2300      	movs	r3, #0
    c8d8:	f383 8811 	msr	BASEPRI, r3
    c8dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    c8e0:	6893      	ldr	r3, [r2, #8]
}
    c8e2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    c8e4:	4770      	bx	lr
    c8e6:	bf00      	nop
    c8e8:	20002614 	.word	0x20002614
    c8ec:	00018e4c 	.word	0x00018e4c
    c8f0:	e000ed00 	.word	0xe000ed00

0000c8f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c8f4:	4912      	ldr	r1, [pc, #72]	; (c940 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c8f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c8f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    c8fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    c8fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    c902:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c906:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    c908:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    c90c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    c910:	4f0c      	ldr	r7, [pc, #48]	; (c944 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c912:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    c916:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    c918:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    c91a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    c91c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    c91e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c920:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c922:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    c926:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    c928:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    c92a:	f000 fc35 	bl	d198 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    c92e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    c932:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    c936:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    c93a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    c93e:	4770      	bx	lr
    ldr r1, =_kernel
    c940:	20002614 	.word	0x20002614
    ldr v4, =_SCS_ICSR
    c944:	e000ed04 	.word	0xe000ed04

0000c948 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    c948:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    c94c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    c94e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    c952:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    c956:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    c958:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    c95c:	2902      	cmp	r1, #2
    beq _oops
    c95e:	d0ff      	beq.n	c960 <_oops>

0000c960 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    c960:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    c962:	f00a fa7d 	bl	16e60 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    c966:	bd01      	pop	{r0, pc}

0000c968 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    c968:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    c96c:	9b00      	ldr	r3, [sp, #0]
    c96e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    c972:	490a      	ldr	r1, [pc, #40]	; (c99c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    c974:	9b01      	ldr	r3, [sp, #4]
    c976:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    c97a:	9b02      	ldr	r3, [sp, #8]
    c97c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    c980:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    c984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    c988:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    c98c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    c990:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    c992:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    c994:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    c996:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    c998:	4770      	bx	lr
    c99a:	bf00      	nop
    c99c:	00016211 	.word	0x00016211

0000c9a0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    c9a0:	4a09      	ldr	r2, [pc, #36]	; (c9c8 <z_check_thread_stack_fail+0x28>)
{
    c9a2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    c9a4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    c9a6:	b170      	cbz	r0, c9c6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    c9a8:	f113 0f16 	cmn.w	r3, #22
    c9ac:	6e80      	ldr	r0, [r0, #104]	; 0x68
    c9ae:	d005      	beq.n	c9bc <z_check_thread_stack_fail+0x1c>
    c9b0:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    c9b4:	429a      	cmp	r2, r3
    c9b6:	d805      	bhi.n	c9c4 <z_check_thread_stack_fail+0x24>
    c9b8:	4283      	cmp	r3, r0
    c9ba:	d203      	bcs.n	c9c4 <z_check_thread_stack_fail+0x24>
		return 0;
    c9bc:	4281      	cmp	r1, r0
    c9be:	bf28      	it	cs
    c9c0:	2000      	movcs	r0, #0
    c9c2:	4770      	bx	lr
    c9c4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    c9c6:	4770      	bx	lr
    c9c8:	20002614 	.word	0x20002614

0000c9cc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    c9cc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    c9ce:	4b09      	ldr	r3, [pc, #36]	; (c9f4 <arch_switch_to_main_thread+0x28>)
{
    c9d0:	460d      	mov	r5, r1
    c9d2:	4614      	mov	r4, r2
	_current = main_thread;
    c9d4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    c9d6:	f000 fbdf 	bl	d198 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    c9da:	4620      	mov	r0, r4
    c9dc:	f385 8809 	msr	PSP, r5
    c9e0:	2100      	movs	r1, #0
    c9e2:	b663      	cpsie	if
    c9e4:	f381 8811 	msr	BASEPRI, r1
    c9e8:	f3bf 8f6f 	isb	sy
    c9ec:	2200      	movs	r2, #0
    c9ee:	2300      	movs	r3, #0
    c9f0:	f009 fc0e 	bl	16210 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    c9f4:	20002614 	.word	0x20002614

0000c9f8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    c9f8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    c9fa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c9fc:	4a0b      	ldr	r2, [pc, #44]	; (ca2c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c9fe:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    ca00:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ca02:	bf1e      	ittt	ne
	movne	r1, #0
    ca04:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ca06:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    ca08:	f00b f9ff 	blne	17e0a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ca0c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ca0e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    ca12:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    ca16:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    ca1a:	4905      	ldr	r1, [pc, #20]	; (ca30 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    ca1c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    ca1e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    ca20:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    ca22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    ca26:	4903      	ldr	r1, [pc, #12]	; (ca34 <_isr_wrapper+0x3c>)
	bx r1
    ca28:	4708      	bx	r1
    ca2a:	0000      	.short	0x0000
	ldr r2, =_kernel
    ca2c:	20002614 	.word	0x20002614
	ldr r1, =_sw_isr_table
    ca30:	00018834 	.word	0x00018834
	ldr r1, =z_arm_int_exit
    ca34:	0000ca39 	.word	0x0000ca39

0000ca38 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ca38:	4b04      	ldr	r3, [pc, #16]	; (ca4c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ca3a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ca3c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    ca3e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ca40:	d003      	beq.n	ca4a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ca42:	4903      	ldr	r1, [pc, #12]	; (ca50 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    ca44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    ca48:	600a      	str	r2, [r1, #0]

0000ca4a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    ca4a:	4770      	bx	lr
	ldr r3, =_kernel
    ca4c:	20002614 	.word	0x20002614
	ldr r1, =_SCS_ICSR
    ca50:	e000ed04 	.word	0xe000ed04

0000ca54 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    ca54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca58:	b086      	sub	sp, #24
    ca5a:	4606      	mov	r6, r0
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    ca60:	4b47      	ldr	r3, [pc, #284]	; (cb80 <bus_fault.constprop.0+0x12c>)
    ca62:	617b      	str	r3, [r7, #20]
    ca64:	2402      	movs	r4, #2
    ca66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ca6a:	4846      	ldr	r0, [pc, #280]	; (cb84 <bus_fault.constprop.0+0x130>)
    ca6c:	613c      	str	r4, [r7, #16]
    ca6e:	f107 0210 	add.w	r2, r7, #16
    ca72:	f00a fa04 	bl	16e7e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ca76:	4b44      	ldr	r3, [pc, #272]	; (cb88 <bus_fault.constprop.0+0x134>)
    ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca7a:	04d9      	lsls	r1, r3, #19
    ca7c:	d56d      	bpl.n	cb5a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    ca7e:	4b43      	ldr	r3, [pc, #268]	; (cb8c <bus_fault.constprop.0+0x138>)
    ca80:	4840      	ldr	r0, [pc, #256]	; (cb84 <bus_fault.constprop.0+0x130>)
    ca82:	e9c7 4304 	strd	r4, r3, [r7, #16]
    ca86:	f107 0210 	add.w	r2, r7, #16
    ca8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ca8e:	f00a f9f6 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    ca92:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ca94:	4b3c      	ldr	r3, [pc, #240]	; (cb88 <bus_fault.constprop.0+0x134>)
    ca96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ca98:	051a      	lsls	r2, r3, #20
    ca9a:	d50b      	bpl.n	cab4 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    ca9c:	4b3c      	ldr	r3, [pc, #240]	; (cb90 <bus_fault.constprop.0+0x13c>)
    ca9e:	617b      	str	r3, [r7, #20]
    caa0:	2302      	movs	r3, #2
    caa2:	4838      	ldr	r0, [pc, #224]	; (cb84 <bus_fault.constprop.0+0x130>)
    caa4:	613b      	str	r3, [r7, #16]
    caa6:	f107 0210 	add.w	r2, r7, #16
    caaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    caae:	f00a f9e6 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    cab2:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    cab4:	4c34      	ldr	r4, [pc, #208]	; (cb88 <bus_fault.constprop.0+0x134>)
    cab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cab8:	059b      	lsls	r3, r3, #22
    caba:	d523      	bpl.n	cb04 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    cabc:	46e8      	mov	r8, sp
    cabe:	4b35      	ldr	r3, [pc, #212]	; (cb94 <bus_fault.constprop.0+0x140>)
    cac0:	617b      	str	r3, [r7, #20]
    cac2:	2302      	movs	r3, #2
    cac4:	482f      	ldr	r0, [pc, #188]	; (cb84 <bus_fault.constprop.0+0x130>)
    cac6:	613b      	str	r3, [r7, #16]
    cac8:	f107 0210 	add.w	r2, r7, #16
    cacc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cad0:	f00a f9d5 	bl	16e7e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    cad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    cad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cad8:	0410      	lsls	r0, r2, #16
    cada:	d512      	bpl.n	cb02 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    cadc:	b088      	sub	sp, #32
    cade:	466a      	mov	r2, sp
    cae0:	492d      	ldr	r1, [pc, #180]	; (cb98 <bus_fault.constprop.0+0x144>)
    cae2:	4828      	ldr	r0, [pc, #160]	; (cb84 <bus_fault.constprop.0+0x130>)
    cae4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cae8:	2303      	movs	r3, #3
    caea:	f842 3f10 	str.w	r3, [r2, #16]!
    caee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    caf2:	f00a f9c4 	bl	16e7e <z_log_msg_static_create.constprop.0>
    caf6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    caf8:	b11e      	cbz	r6, cb02 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    cafa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cafc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    cb00:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    cb02:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    cb04:	4b20      	ldr	r3, [pc, #128]	; (cb88 <bus_fault.constprop.0+0x134>)
    cb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb08:	0559      	lsls	r1, r3, #21
    cb0a:	d50b      	bpl.n	cb24 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    cb0c:	4b23      	ldr	r3, [pc, #140]	; (cb9c <bus_fault.constprop.0+0x148>)
    cb0e:	617b      	str	r3, [r7, #20]
    cb10:	2302      	movs	r3, #2
    cb12:	481c      	ldr	r0, [pc, #112]	; (cb84 <bus_fault.constprop.0+0x130>)
    cb14:	613b      	str	r3, [r7, #16]
    cb16:	f107 0210 	add.w	r2, r7, #16
    cb1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cb1e:	f00a f9ae 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    cb22:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    cb24:	4b18      	ldr	r3, [pc, #96]	; (cb88 <bus_fault.constprop.0+0x134>)
    cb26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cb28:	05d2      	lsls	r2, r2, #23
    cb2a:	d518      	bpl.n	cb5e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    cb2c:	4b1c      	ldr	r3, [pc, #112]	; (cba0 <bus_fault.constprop.0+0x14c>)
    cb2e:	617b      	str	r3, [r7, #20]
    cb30:	2302      	movs	r3, #2
    cb32:	4814      	ldr	r0, [pc, #80]	; (cb84 <bus_fault.constprop.0+0x130>)
    cb34:	613b      	str	r3, [r7, #16]
    cb36:	f107 0210 	add.w	r2, r7, #16
    cb3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cb3e:	f00a f99e 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    cb42:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    cb44:	4a10      	ldr	r2, [pc, #64]	; (cb88 <bus_fault.constprop.0+0x134>)
    cb46:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cb48:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    cb4c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    cb4e:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    cb50:	2300      	movs	r3, #0
    cb52:	702b      	strb	r3, [r5, #0]
}
    cb54:	46bd      	mov	sp, r7
    cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    cb5a:	2016      	movs	r0, #22
    cb5c:	e79a      	b.n	ca94 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    cb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cb60:	049b      	lsls	r3, r3, #18
    cb62:	d5ef      	bpl.n	cb44 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    cb64:	4b0f      	ldr	r3, [pc, #60]	; (cba4 <bus_fault.constprop.0+0x150>)
    cb66:	617b      	str	r3, [r7, #20]
    cb68:	2302      	movs	r3, #2
    cb6a:	4806      	ldr	r0, [pc, #24]	; (cb84 <bus_fault.constprop.0+0x130>)
    cb6c:	613b      	str	r3, [r7, #16]
    cb6e:	f107 0210 	add.w	r2, r7, #16
    cb72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cb76:	f00a f982 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    cb7a:	201c      	movs	r0, #28
    cb7c:	e7e2      	b.n	cb44 <bus_fault.constprop.0+0xf0>
    cb7e:	bf00      	nop
    cb80:	0001930e 	.word	0x0001930e
    cb84:	00018aac 	.word	0x00018aac
    cb88:	e000ed00 	.word	0xe000ed00
    cb8c:	00019324 	.word	0x00019324
    cb90:	00019335 	.word	0x00019335
    cb94:	00019348 	.word	0x00019348
    cb98:	00019361 	.word	0x00019361
    cb9c:	00019376 	.word	0x00019376
    cba0:	00019391 	.word	0x00019391
    cba4:	000193a9 	.word	0x000193a9

0000cba8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    cba8:	b510      	push	{r4, lr}
    cbaa:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    cbac:	4b36      	ldr	r3, [pc, #216]	; (cc88 <usage_fault.constprop.0+0xe0>)
    cbae:	4837      	ldr	r0, [pc, #220]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cbb0:	9305      	str	r3, [sp, #20]
    cbb2:	aa04      	add	r2, sp, #16
    cbb4:	2402      	movs	r4, #2
    cbb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cbba:	9404      	str	r4, [sp, #16]
    cbbc:	f00a f95f 	bl	16e7e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cbc0:	4b33      	ldr	r3, [pc, #204]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cbc4:	019a      	lsls	r2, r3, #6
    cbc6:	d55d      	bpl.n	cc84 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    cbc8:	4b32      	ldr	r3, [pc, #200]	; (cc94 <usage_fault.constprop.0+0xec>)
    cbca:	4830      	ldr	r0, [pc, #192]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cbcc:	aa04      	add	r2, sp, #16
    cbce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cbd2:	e9cd 4304 	strd	r4, r3, [sp, #16]
    cbd6:	f00a f952 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    cbda:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    cbdc:	4b2c      	ldr	r3, [pc, #176]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cbe0:	01db      	lsls	r3, r3, #7
    cbe2:	d50a      	bpl.n	cbfa <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    cbe4:	4b2c      	ldr	r3, [pc, #176]	; (cc98 <usage_fault.constprop.0+0xf0>)
    cbe6:	4829      	ldr	r0, [pc, #164]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cbe8:	9305      	str	r3, [sp, #20]
    cbea:	aa04      	add	r2, sp, #16
    cbec:	2302      	movs	r3, #2
    cbee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cbf2:	9304      	str	r3, [sp, #16]
    cbf4:	f00a f943 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    cbf8:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    cbfa:	4b25      	ldr	r3, [pc, #148]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cbfe:	031c      	lsls	r4, r3, #12
    cc00:	d50a      	bpl.n	cc18 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    cc02:	4b26      	ldr	r3, [pc, #152]	; (cc9c <usage_fault.constprop.0+0xf4>)
    cc04:	4821      	ldr	r0, [pc, #132]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cc06:	9305      	str	r3, [sp, #20]
    cc08:	aa04      	add	r2, sp, #16
    cc0a:	2302      	movs	r3, #2
    cc0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc10:	9304      	str	r3, [sp, #16]
    cc12:	f00a f934 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    cc16:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    cc18:	4b1d      	ldr	r3, [pc, #116]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc1c:	0359      	lsls	r1, r3, #13
    cc1e:	d50a      	bpl.n	cc36 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    cc20:	4b1f      	ldr	r3, [pc, #124]	; (cca0 <usage_fault.constprop.0+0xf8>)
    cc22:	481a      	ldr	r0, [pc, #104]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cc24:	9305      	str	r3, [sp, #20]
    cc26:	aa04      	add	r2, sp, #16
    cc28:	2302      	movs	r3, #2
    cc2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc2e:	9304      	str	r3, [sp, #16]
    cc30:	f00a f925 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    cc34:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    cc36:	4b16      	ldr	r3, [pc, #88]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc3a:	039a      	lsls	r2, r3, #14
    cc3c:	d50a      	bpl.n	cc54 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    cc3e:	4b19      	ldr	r3, [pc, #100]	; (cca4 <usage_fault.constprop.0+0xfc>)
    cc40:	4812      	ldr	r0, [pc, #72]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cc42:	9305      	str	r3, [sp, #20]
    cc44:	aa04      	add	r2, sp, #16
    cc46:	2302      	movs	r3, #2
    cc48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc4c:	9304      	str	r3, [sp, #16]
    cc4e:	f00a f916 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    cc52:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    cc54:	4b0e      	ldr	r3, [pc, #56]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc58:	03db      	lsls	r3, r3, #15
    cc5a:	d50a      	bpl.n	cc72 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    cc5c:	4b12      	ldr	r3, [pc, #72]	; (cca8 <usage_fault.constprop.0+0x100>)
    cc5e:	480b      	ldr	r0, [pc, #44]	; (cc8c <usage_fault.constprop.0+0xe4>)
    cc60:	9305      	str	r3, [sp, #20]
    cc62:	aa04      	add	r2, sp, #16
    cc64:	2302      	movs	r3, #2
    cc66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cc6a:	9304      	str	r3, [sp, #16]
    cc6c:	f00a f907 	bl	16e7e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    cc70:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    cc72:	4a07      	ldr	r2, [pc, #28]	; (cc90 <usage_fault.constprop.0+0xe8>)
    cc74:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cc76:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    cc7a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    cc7e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    cc80:	b006      	add	sp, #24
    cc82:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    cc84:	201d      	movs	r0, #29
    cc86:	e7a9      	b.n	cbdc <usage_fault.constprop.0+0x34>
    cc88:	000193d8 	.word	0x000193d8
    cc8c:	00018aac 	.word	0x00018aac
    cc90:	e000ed00 	.word	0xe000ed00
    cc94:	000193f0 	.word	0x000193f0
    cc98:	00019403 	.word	0x00019403
    cc9c:	0001941d 	.word	0x0001941d
    cca0:	0001943b 	.word	0x0001943b
    cca4:	00019460 	.word	0x00019460
    cca8:	0001947a 	.word	0x0001947a

0000ccac <mem_manage_fault>:
{
    ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccb0:	b086      	sub	sp, #24
    ccb2:	4681      	mov	r9, r0
    ccb4:	af00      	add	r7, sp, #0
    ccb6:	468a      	mov	sl, r1
    ccb8:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    ccba:	4b51      	ldr	r3, [pc, #324]	; (ce00 <mem_manage_fault+0x154>)
    ccbc:	617b      	str	r3, [r7, #20]
    ccbe:	2402      	movs	r4, #2
    ccc0:	4850      	ldr	r0, [pc, #320]	; (ce04 <mem_manage_fault+0x158>)
    ccc2:	613c      	str	r4, [r7, #16]
    ccc4:	f107 0210 	add.w	r2, r7, #16
    ccc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cccc:	f00a f8d7 	bl	16e7e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    ccd0:	4b4d      	ldr	r3, [pc, #308]	; (ce08 <mem_manage_fault+0x15c>)
    ccd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ccd4:	06de      	lsls	r6, r3, #27
    ccd6:	d545      	bpl.n	cd64 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    ccd8:	4b4c      	ldr	r3, [pc, #304]	; (ce0c <mem_manage_fault+0x160>)
    ccda:	484a      	ldr	r0, [pc, #296]	; (ce04 <mem_manage_fault+0x158>)
    ccdc:	e9c7 4304 	strd	r4, r3, [r7, #16]
    cce0:	f107 0210 	add.w	r2, r7, #16
    cce4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    cce8:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    ccea:	f00a f8c8 	bl	16e7e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ccee:	4b46      	ldr	r3, [pc, #280]	; (ce08 <mem_manage_fault+0x15c>)
    ccf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ccf2:	071d      	lsls	r5, r3, #28
    ccf4:	d50b      	bpl.n	cd0e <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    ccf6:	4b46      	ldr	r3, [pc, #280]	; (ce10 <mem_manage_fault+0x164>)
    ccf8:	617b      	str	r3, [r7, #20]
    ccfa:	2302      	movs	r3, #2
    ccfc:	4841      	ldr	r0, [pc, #260]	; (ce04 <mem_manage_fault+0x158>)
    ccfe:	613b      	str	r3, [r7, #16]
    cd00:	f107 0210 	add.w	r2, r7, #16
    cd04:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    cd08:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    cd0a:	f00a f8b8 	bl	16e7e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    cd0e:	4d3e      	ldr	r5, [pc, #248]	; (ce08 <mem_manage_fault+0x15c>)
    cd10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cd12:	0798      	lsls	r0, r3, #30
    cd14:	d528      	bpl.n	cd68 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    cd16:	466c      	mov	r4, sp
    cd18:	4b3e      	ldr	r3, [pc, #248]	; (ce14 <mem_manage_fault+0x168>)
    cd1a:	617b      	str	r3, [r7, #20]
    cd1c:	2302      	movs	r3, #2
    cd1e:	613b      	str	r3, [r7, #16]
    cd20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cd24:	4837      	ldr	r0, [pc, #220]	; (ce04 <mem_manage_fault+0x158>)
    cd26:	f107 0210 	add.w	r2, r7, #16
    cd2a:	f00a f8a8 	bl	16e7e <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    cd2e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    cd30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cd32:	0619      	lsls	r1, r3, #24
    cd34:	d560      	bpl.n	cdf8 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    cd36:	b088      	sub	sp, #32
    cd38:	466a      	mov	r2, sp
    cd3a:	4b37      	ldr	r3, [pc, #220]	; (ce18 <mem_manage_fault+0x16c>)
    cd3c:	4831      	ldr	r0, [pc, #196]	; (ce04 <mem_manage_fault+0x158>)
    cd3e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    cd42:	2303      	movs	r3, #3
    cd44:	f842 3f10 	str.w	r3, [r2, #16]!
    cd48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cd4c:	f00a f897 	bl	16e7e <z_log_msg_static_create.constprop.0>
    cd50:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    cd52:	f1ba 0f00 	cmp.w	sl, #0
    cd56:	d003      	beq.n	cd60 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    cd58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cd5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cd5e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    cd60:	2413      	movs	r4, #19
    cd62:	e003      	b.n	cd6c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    cd64:	2410      	movs	r4, #16
    cd66:	e7c2      	b.n	ccee <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    cd68:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    cd6c:	4b26      	ldr	r3, [pc, #152]	; (ce08 <mem_manage_fault+0x15c>)
    cd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd70:	07da      	lsls	r2, r3, #31
    cd72:	d50b      	bpl.n	cd8c <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    cd74:	4b29      	ldr	r3, [pc, #164]	; (ce1c <mem_manage_fault+0x170>)
    cd76:	617b      	str	r3, [r7, #20]
    cd78:	2302      	movs	r3, #2
    cd7a:	4822      	ldr	r0, [pc, #136]	; (ce04 <mem_manage_fault+0x158>)
    cd7c:	613b      	str	r3, [r7, #16]
    cd7e:	f107 0210 	add.w	r2, r7, #16
    cd82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    cd86:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    cd88:	f00a f879 	bl	16e7e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cd8c:	4b1e      	ldr	r3, [pc, #120]	; (ce08 <mem_manage_fault+0x15c>)
    cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cd90:	069b      	lsls	r3, r3, #26
    cd92:	d50b      	bpl.n	cdac <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    cd94:	4b22      	ldr	r3, [pc, #136]	; (ce20 <mem_manage_fault+0x174>)
    cd96:	617b      	str	r3, [r7, #20]
    cd98:	2302      	movs	r3, #2
    cd9a:	481a      	ldr	r0, [pc, #104]	; (ce04 <mem_manage_fault+0x158>)
    cd9c:	613b      	str	r3, [r7, #16]
    cd9e:	f107 0210 	add.w	r2, r7, #16
    cda2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    cda6:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    cda8:	f00a f869 	bl	16e7e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cdac:	4b16      	ldr	r3, [pc, #88]	; (ce08 <mem_manage_fault+0x15c>)
    cdae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cdb0:	06d5      	lsls	r5, r2, #27
    cdb2:	d402      	bmi.n	cdba <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    cdb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    cdb6:	0790      	lsls	r0, r2, #30
    cdb8:	d50a      	bpl.n	cdd0 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    cdba:	685b      	ldr	r3, [r3, #4]
    cdbc:	0519      	lsls	r1, r3, #20
    cdbe:	d507      	bpl.n	cdd0 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    cdc0:	4649      	mov	r1, r9
    cdc2:	4630      	mov	r0, r6
    cdc4:	f7ff fdec 	bl	c9a0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    cdc8:	b110      	cbz	r0, cdd0 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    cdca:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    cdce:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    cdd0:	4b0d      	ldr	r3, [pc, #52]	; (ce08 <mem_manage_fault+0x15c>)
    cdd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cdd4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    cdd6:	bf42      	ittt	mi
    cdd8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    cdda:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    cdde:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    cde0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    cde2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    cde6:	629a      	str	r2, [r3, #40]	; 0x28
}
    cde8:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    cdea:	2300      	movs	r3, #0
}
    cdec:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    cdee:	f888 3000 	strb.w	r3, [r8]
}
    cdf2:	46bd      	mov	sp, r7
    cdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    cdf8:	f06f 0615 	mvn.w	r6, #21
    cdfc:	e7b0      	b.n	cd60 <mem_manage_fault+0xb4>
    cdfe:	bf00      	nop
    ce00:	000194a5 	.word	0x000194a5
    ce04:	00018aac 	.word	0x00018aac
    ce08:	e000ed00 	.word	0xe000ed00
    ce0c:	000194bb 	.word	0x000194bb
    ce10:	00019335 	.word	0x00019335
    ce14:	000194ee 	.word	0x000194ee
    ce18:	00019506 	.word	0x00019506
    ce1c:	0001951c 	.word	0x0001951c
    ce20:	000193a9 	.word	0x000193a9

0000ce24 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    ce24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ce28:	4b77      	ldr	r3, [pc, #476]	; (d008 <z_arm_fault+0x1e4>)
{
    ce2a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ce2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    ce30:	af00      	add	r7, sp, #0
    ce32:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ce34:	f3c8 0408 	ubfx	r4, r8, #0, #9
    ce38:	2600      	movs	r6, #0
    ce3a:	f386 8811 	msr	BASEPRI, r6
    ce3e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ce42:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    ce46:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    ce4a:	d10e      	bne.n	ce6a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    ce4c:	f002 030c 	and.w	r3, r2, #12
    ce50:	2b08      	cmp	r3, #8
    ce52:	d119      	bne.n	ce88 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    ce54:	4b6d      	ldr	r3, [pc, #436]	; (d00c <z_arm_fault+0x1e8>)
    ce56:	61fb      	str	r3, [r7, #28]
    ce58:	2302      	movs	r3, #2
    ce5a:	486d      	ldr	r0, [pc, #436]	; (d010 <z_arm_fault+0x1ec>)
    ce5c:	61bb      	str	r3, [r7, #24]
    ce5e:	f107 0218 	add.w	r2, r7, #24
    ce62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ce66:	f00a f80a 	bl	16e7e <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    ce6a:	2600      	movs	r6, #0
		return NULL;
    ce6c:	4635      	mov	r5, r6
	*recoverable = false;
    ce6e:	2300      	movs	r3, #0
    ce70:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    ce72:	1ee3      	subs	r3, r4, #3
    ce74:	2b09      	cmp	r3, #9
    ce76:	f200 80a6 	bhi.w	cfc6 <z_arm_fault+0x1a2>
    ce7a:	e8df f003 	tbb	[pc, r3]
    ce7e:	990a      	.short	0x990a
    ce80:	a4a4959c 	.word	0xa4a4959c
    ce84:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    ce88:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    ce8a:	bf4c      	ite	mi
    ce8c:	460d      	movmi	r5, r1
			*nested_exc = true;
    ce8e:	2601      	movpl	r6, #1
    ce90:	e7ed      	b.n	ce6e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    ce92:	46e9      	mov	r9, sp
    ce94:	4b5f      	ldr	r3, [pc, #380]	; (d014 <z_arm_fault+0x1f0>)
    ce96:	61fb      	str	r3, [r7, #28]
    ce98:	f04f 0802 	mov.w	r8, #2
    ce9c:	f107 0218 	add.w	r2, r7, #24
    cea0:	485b      	ldr	r0, [pc, #364]	; (d010 <z_arm_fault+0x1ec>)
    cea2:	f8c7 8018 	str.w	r8, [r7, #24]
    cea6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ceaa:	f009 ffe8 	bl	16e7e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    ceae:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ceb0:	4c55      	ldr	r4, [pc, #340]	; (d008 <z_arm_fault+0x1e4>)
	*recoverable = false;
    ceb2:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    ceb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ceb6:	079a      	lsls	r2, r3, #30
    ceb8:	d50b      	bpl.n	ced2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    ceba:	4b57      	ldr	r3, [pc, #348]	; (d018 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    cebc:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    cec0:	4853      	ldr	r0, [pc, #332]	; (d010 <z_arm_fault+0x1ec>)
    cec2:	f107 0218 	add.w	r2, r7, #24
    cec6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ceca:	f009 ffd8 	bl	16e7e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    cece:	2400      	movs	r4, #0
    ced0:	e041      	b.n	cf56 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    ced2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ced4:	2b00      	cmp	r3, #0
    ced6:	da01      	bge.n	cedc <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    ced8:	4b50      	ldr	r3, [pc, #320]	; (d01c <z_arm_fault+0x1f8>)
    ceda:	e7ef      	b.n	cebc <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    cedc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    cede:	005b      	lsls	r3, r3, #1
    cee0:	d5f5      	bpl.n	cece <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    cee2:	4b4f      	ldr	r3, [pc, #316]	; (d020 <z_arm_fault+0x1fc>)
    cee4:	484a      	ldr	r0, [pc, #296]	; (d010 <z_arm_fault+0x1ec>)
    cee6:	e9c7 8306 	strd	r8, r3, [r7, #24]
    ceea:	f107 0218 	add.w	r2, r7, #24
    ceee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cef2:	f009 ffc4 	bl	16e7e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    cef6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    cef8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    cefa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    cefe:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    cf00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cf04:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    cf08:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    cf0a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    cf0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    cf12:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    cf14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cf18:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    cf1c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    cf20:	429a      	cmp	r2, r3
    cf22:	d008      	beq.n	cf36 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    cf24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf26:	b2db      	uxtb	r3, r3
    cf28:	b38b      	cbz	r3, cf8e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    cf2a:	1dfa      	adds	r2, r7, #7
    cf2c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    cf2e:	4628      	mov	r0, r5
    cf30:	f7ff febc 	bl	ccac <mem_manage_fault>
    cf34:	e03a      	b.n	cfac <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    cf36:	b088      	sub	sp, #32
    cf38:	682b      	ldr	r3, [r5, #0]
    cf3a:	466a      	mov	r2, sp
    cf3c:	4939      	ldr	r1, [pc, #228]	; (d024 <z_arm_fault+0x200>)
    cf3e:	4834      	ldr	r0, [pc, #208]	; (d010 <z_arm_fault+0x1ec>)
    cf40:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cf44:	2303      	movs	r3, #3
    cf46:	f842 3f10 	str.w	r3, [r2, #16]!
    cf4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    cf4e:	f009 ff96 	bl	16e7e <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    cf52:	682c      	ldr	r4, [r5, #0]
    cf54:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    cf56:	79fb      	ldrb	r3, [r7, #7]
    cf58:	b9ab      	cbnz	r3, cf86 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    cf5a:	2220      	movs	r2, #32
    cf5c:	4629      	mov	r1, r5
    cf5e:	f107 0008 	add.w	r0, r7, #8
    cf62:	f009 ffd0 	bl	16f06 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf68:	2e00      	cmp	r6, #0
    cf6a:	d047      	beq.n	cffc <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    cf6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    cf70:	b922      	cbnz	r2, cf7c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    cf72:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    cf76:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    cf7a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    cf7c:	f107 0108 	add.w	r1, r7, #8
    cf80:	4620      	mov	r0, r4
    cf82:	f7ff fbbf 	bl	c704 <z_arm_fatal_error>
}
    cf86:	372c      	adds	r7, #44	; 0x2c
    cf88:	46bd      	mov	sp, r7
    cf8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    cf8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf90:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    cf94:	d004      	beq.n	cfa0 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    cf96:	1df9      	adds	r1, r7, #7
    cf98:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    cf9a:	f7ff fd5b 	bl	ca54 <bus_fault.constprop.0>
    cf9e:	e005      	b.n	cfac <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    cfa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cfa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cfa6:	d392      	bcc.n	cece <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    cfa8:	f7ff fdfe 	bl	cba8 <usage_fault.constprop.0>
    cfac:	4604      	mov	r4, r0
    cfae:	e7d2      	b.n	cf56 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    cfb0:	1dfa      	adds	r2, r7, #7
    cfb2:	2100      	movs	r1, #0
    cfb4:	e7bb      	b.n	cf2e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    cfb6:	1df9      	adds	r1, r7, #7
    cfb8:	2000      	movs	r0, #0
    cfba:	e7ee      	b.n	cf9a <z_arm_fault+0x176>
	PR_FAULT_INFO(
    cfbc:	4b1a      	ldr	r3, [pc, #104]	; (d028 <z_arm_fault+0x204>)
    cfbe:	61fb      	str	r3, [r7, #28]
    cfc0:	2302      	movs	r3, #2
    cfc2:	61bb      	str	r3, [r7, #24]
    cfc4:	e77c      	b.n	cec0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    cfc6:	4a19      	ldr	r2, [pc, #100]	; (d02c <z_arm_fault+0x208>)
    cfc8:	4b19      	ldr	r3, [pc, #100]	; (d030 <z_arm_fault+0x20c>)
    cfca:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    cfce:	46e8      	mov	r8, sp
    cfd0:	b08a      	sub	sp, #40	; 0x28
    cfd2:	bf18      	it	ne
    cfd4:	4613      	movne	r3, r2
    cfd6:	466a      	mov	r2, sp
    cfd8:	4916      	ldr	r1, [pc, #88]	; (d034 <z_arm_fault+0x210>)
    cfda:	480d      	ldr	r0, [pc, #52]	; (d010 <z_arm_fault+0x1ec>)
    cfdc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    cfe0:	f44f 7300 	mov.w	r3, #512	; 0x200
    cfe4:	8413      	strh	r3, [r2, #32]
    cfe6:	3c10      	subs	r4, #16
    cfe8:	4b13      	ldr	r3, [pc, #76]	; (d038 <z_arm_fault+0x214>)
    cfea:	61d4      	str	r4, [r2, #28]
    cfec:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    cff0:	f842 3f10 	str.w	r3, [r2, #16]!
    cff4:	f009 ff43 	bl	16e7e <z_log_msg_static_create.constprop.0>
    cff8:	46c5      	mov	sp, r8
}
    cffa:	e768      	b.n	cece <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    cffc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d000:	f023 0301 	bic.w	r3, r3, #1
    d004:	e7b9      	b.n	cf7a <z_arm_fault+0x156>
    d006:	bf00      	nop
    d008:	e000ed00 	.word	0xe000ed00
    d00c:	00019569 	.word	0x00019569
    d010:	00018aac 	.word	0x00018aac
    d014:	00019594 	.word	0x00019594
    d018:	000195ab 	.word	0x000195ab
    d01c:	000195cc 	.word	0x000195cc
    d020:	000195da 	.word	0x000195da
    d024:	000195f9 	.word	0x000195f9
    d028:	00019615 	.word	0x00019615
    d02c:	00019550 	.word	0x00019550
    d030:	0001953b 	.word	0x0001953b
    d034:	00019639 	.word	0x00019639
    d038:	01000004 	.word	0x01000004

0000d03c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d03c:	4a02      	ldr	r2, [pc, #8]	; (d048 <z_arm_fault_init+0xc>)
    d03e:	6953      	ldr	r3, [r2, #20]
    d040:	f043 0310 	orr.w	r3, r3, #16
    d044:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    d046:	4770      	bx	lr
    d048:	e000ed00 	.word	0xe000ed00

0000d04c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    d04c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    d050:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    d054:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    d056:	4672      	mov	r2, lr
	bl z_arm_fault
    d058:	f7ff fee4 	bl	ce24 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    d05c:	bd01      	pop	{r0, pc}
    d05e:	bf00      	nop

0000d060 <z_arm_interrupt_init>:
    d060:	4804      	ldr	r0, [pc, #16]	; (d074 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d062:	2300      	movs	r3, #0
    d064:	2140      	movs	r1, #64	; 0x40
    d066:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d068:	3301      	adds	r3, #1
    d06a:	2b30      	cmp	r3, #48	; 0x30
    d06c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d070:	d1f9      	bne.n	d066 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d072:	4770      	bx	lr
    d074:	e000e100 	.word	0xe000e100

0000d078 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    d078:	2000      	movs	r0, #0
    msr CONTROL, r0
    d07a:	f380 8814 	msr	CONTROL, r0
    isb
    d07e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    d082:	f7fe faf1 	bl	b668 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    d086:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    d088:	490d      	ldr	r1, [pc, #52]	; (d0c0 <__start+0x48>)
    str r0, [r1]
    d08a:	6008      	str	r0, [r1, #0]
    dsb
    d08c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d090:	480c      	ldr	r0, [pc, #48]	; (d0c4 <__start+0x4c>)
    msr msp, r0
    d092:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    d096:	f000 f82b 	bl	d0f0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d09a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    d09c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d0a0:	4809      	ldr	r0, [pc, #36]	; (d0c8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d0a2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    d0a6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d0a8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d0ac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    d0b0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    d0b2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    d0b4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    d0b8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    d0bc:	f7ff fbe4 	bl	c888 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    d0c0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    d0c4:	20005ec0 	.word	0x20005ec0
    ldr r0, =z_interrupt_stacks
    d0c8:	20004d00 	.word	0x20004d00

0000d0cc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    d0cc:	4907      	ldr	r1, [pc, #28]	; (d0ec <z_arm_clear_arm_mpu_config+0x20>)
    d0ce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    d0d2:	2300      	movs	r3, #0
	int num_regions =
    d0d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    d0d8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    d0da:	4293      	cmp	r3, r2
    d0dc:	db00      	blt.n	d0e0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    d0de:	4770      	bx	lr
  MPU->RNR = rnr;
    d0e0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    d0e4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    d0e8:	3301      	adds	r3, #1
    d0ea:	e7f6      	b.n	d0da <z_arm_clear_arm_mpu_config+0xe>
    d0ec:	e000ed00 	.word	0xe000ed00

0000d0f0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    d0f0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    d0f2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    d0f4:	2300      	movs	r3, #0
    d0f6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    d0fa:	f7ff ffe7 	bl	d0cc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    d0fe:	4b14      	ldr	r3, [pc, #80]	; (d150 <z_arm_init_arch_hw_at_boot+0x60>)
    d100:	f04f 32ff 	mov.w	r2, #4294967295
    d104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    d108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    d10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    d110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    d114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    d118:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    d11c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    d120:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    d124:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    d128:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    d12c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    d130:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    d134:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    d138:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    d13c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    d140:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    d144:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    d146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d14a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    d14e:	bd08      	pop	{r3, pc}
    d150:	e000e100 	.word	0xe000e100

0000d154 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    d154:	4b08      	ldr	r3, [pc, #32]	; (d178 <z_impl_k_thread_abort+0x24>)
    d156:	689b      	ldr	r3, [r3, #8]
    d158:	4283      	cmp	r3, r0
    d15a:	d10b      	bne.n	d174 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d15c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d160:	b143      	cbz	r3, d174 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d162:	4b06      	ldr	r3, [pc, #24]	; (d17c <z_impl_k_thread_abort+0x28>)
    d164:	685a      	ldr	r2, [r3, #4]
    d166:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    d16a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    d16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d16e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    d172:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    d174:	f006 b842 	b.w	131fc <z_thread_abort>
    d178:	20002614 	.word	0x20002614
    d17c:	e000ed00 	.word	0xe000ed00

0000d180 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d180:	4b02      	ldr	r3, [pc, #8]	; (d18c <z_arm_configure_static_mpu_regions+0xc>)
    d182:	4a03      	ldr	r2, [pc, #12]	; (d190 <z_arm_configure_static_mpu_regions+0x10>)
    d184:	4803      	ldr	r0, [pc, #12]	; (d194 <z_arm_configure_static_mpu_regions+0x14>)
    d186:	2101      	movs	r1, #1
    d188:	f000 b892 	b.w	d2b0 <arm_core_mpu_configure_static_mpu_regions>
    d18c:	20040000 	.word	0x20040000
    d190:	20000000 	.word	0x20000000
    d194:	00018c38 	.word	0x00018c38

0000d198 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    d198:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    d19a:	4b05      	ldr	r3, [pc, #20]	; (d1b0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    d19c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    d19e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    d1a0:	4a04      	ldr	r2, [pc, #16]	; (d1b4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    d1a2:	2140      	movs	r1, #64	; 0x40
    d1a4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    d1a8:	4618      	mov	r0, r3
    d1aa:	2101      	movs	r1, #1
    d1ac:	f000 b88a 	b.w	d2c4 <arm_core_mpu_configure_dynamic_mpu_regions>
    d1b0:	20002404 	.word	0x20002404
    d1b4:	150b0000 	.word	0x150b0000

0000d1b8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    d1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    d1bc:	f8df e0b4 	ldr.w	lr, [pc, #180]	; d274 <mpu_configure_regions+0xbc>
    d1c0:	469c      	mov	ip, r3
    d1c2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    d1c4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    d1c6:	2300      	movs	r3, #0
    d1c8:	428b      	cmp	r3, r1
    d1ca:	da1a      	bge.n	d202 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    d1cc:	6844      	ldr	r4, [r0, #4]
    d1ce:	2c00      	cmp	r4, #0
    d1d0:	d04d      	beq.n	d26e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    d1d2:	f1bc 0f00 	cmp.w	ip, #0
    d1d6:	d01d      	beq.n	d214 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    d1d8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    d1da:	4234      	tst	r4, r6
    d1dc:	d015      	beq.n	d20a <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    d1de:	466c      	mov	r4, sp
    d1e0:	b088      	sub	sp, #32
    d1e2:	466a      	mov	r2, sp
    d1e4:	4924      	ldr	r1, [pc, #144]	; (d278 <mpu_configure_regions+0xc0>)
    d1e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d1ea:	2303      	movs	r3, #3
    d1ec:	f842 3f10 	str.w	r3, [r2, #16]!
    d1f0:	4822      	ldr	r0, [pc, #136]	; (d27c <mpu_configure_regions+0xc4>)
    d1f2:	2300      	movs	r3, #0
    d1f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d1f8:	f7fe fcce 	bl	bb98 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    d1fc:	f06f 0515 	mvn.w	r5, #21
    d200:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    d202:	4628      	mov	r0, r5
    d204:	46bd      	mov	sp, r7
    d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    d20a:	2c1f      	cmp	r4, #31
    d20c:	d9e7      	bls.n	d1de <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    d20e:	6802      	ldr	r2, [r0, #0]
		&&
    d210:	4216      	tst	r6, r2
    d212:	d1e4      	bne.n	d1de <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    d214:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    d216:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    d218:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    d21a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    d21e:	d914      	bls.n	d24a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    d220:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    d224:	d813      	bhi.n	d24e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    d226:	3c01      	subs	r4, #1
    d228:	fab4 f484 	clz	r4, r4
    d22c:	f1c4 041f 	rsb	r4, r4, #31
    d230:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    d232:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    d236:	ea46 0604 	orr.w	r6, r6, r4
    d23a:	d90a      	bls.n	d252 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d23c:	466c      	mov	r4, sp
    d23e:	b088      	sub	sp, #32
    d240:	466a      	mov	r2, sp
    d242:	4b0f      	ldr	r3, [pc, #60]	; (d280 <mpu_configure_regions+0xc8>)
    d244:	e9c2 3505 	strd	r3, r5, [r2, #20]
    d248:	e7cf      	b.n	d1ea <mpu_configure_regions+0x32>
		return REGION_32B;
    d24a:	2408      	movs	r4, #8
    d24c:	e7f1      	b.n	d232 <mpu_configure_regions+0x7a>
		return REGION_4G;
    d24e:	243e      	movs	r4, #62	; 0x3e
    d250:	e7ef      	b.n	d232 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    d252:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    d256:	432a      	orrs	r2, r5
    d258:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    d25c:	f046 0601 	orr.w	r6, r6, #1
    d260:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    d264:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    d268:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    d26a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    d26e:	3301      	adds	r3, #1
    d270:	300c      	adds	r0, #12
    d272:	e7a9      	b.n	d1c8 <mpu_configure_regions+0x10>
    d274:	e000ed00 	.word	0xe000ed00
    d278:	00019650 	.word	0x00019650
    d27c:	00018a94 	.word	0x00018a94
    d280:	00019673 	.word	0x00019673

0000d284 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d284:	4b04      	ldr	r3, [pc, #16]	; (d298 <arm_core_mpu_enable+0x14>)
    d286:	2205      	movs	r2, #5
    d288:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d28c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d290:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d294:	4770      	bx	lr
    d296:	bf00      	nop
    d298:	e000ed00 	.word	0xe000ed00

0000d29c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    d29c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d2a0:	4b02      	ldr	r3, [pc, #8]	; (d2ac <arm_core_mpu_disable+0x10>)
    d2a2:	2200      	movs	r2, #0
    d2a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d2a8:	4770      	bx	lr
    d2aa:	bf00      	nop
    d2ac:	e000ed00 	.word	0xe000ed00

0000d2b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    d2b0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d2b2:	4c03      	ldr	r4, [pc, #12]	; (d2c0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    d2b4:	2301      	movs	r3, #1
    d2b6:	7822      	ldrb	r2, [r4, #0]
    d2b8:	f7ff ff7e 	bl	d1b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d2bc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    d2be:	bd10      	pop	{r4, pc}
    d2c0:	2000313d 	.word	0x2000313d

0000d2c4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    d2c4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    d2c6:	4a09      	ldr	r2, [pc, #36]	; (d2ec <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    d2c8:	2300      	movs	r3, #0
    d2ca:	7812      	ldrb	r2, [r2, #0]
    d2cc:	f7ff ff74 	bl	d1b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    d2d0:	f110 0f16 	cmn.w	r0, #22
    d2d4:	d003      	beq.n	d2de <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    d2d6:	4b06      	ldr	r3, [pc, #24]	; (d2f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    d2d8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    d2da:	2807      	cmp	r0, #7
    d2dc:	dd00      	ble.n	d2e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    d2de:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    d2e0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    d2e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    d2e8:	3001      	adds	r0, #1
    d2ea:	e7f6      	b.n	d2da <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    d2ec:	2000313d 	.word	0x2000313d
    d2f0:	e000ed00 	.word	0xe000ed00

0000d2f4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d2f4:	4914      	ldr	r1, [pc, #80]	; (d348 <z_arm_mpu_init+0x54>)
    d2f6:	6808      	ldr	r0, [r1, #0]
    d2f8:	2808      	cmp	r0, #8
{
    d2fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    d2fc:	d821      	bhi.n	d342 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    d2fe:	f7ff ffcd 	bl	d29c <arm_core_mpu_disable>
    d302:	4c12      	ldr	r4, [pc, #72]	; (d34c <z_arm_mpu_init+0x58>)
    d304:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d306:	2200      	movs	r2, #0
    d308:	4290      	cmp	r0, r2
    d30a:	f101 010c 	add.w	r1, r1, #12
    d30e:	d105      	bne.n	d31c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    d310:	4b0f      	ldr	r3, [pc, #60]	; (d350 <z_arm_mpu_init+0x5c>)
    d312:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    d314:	f7ff ffb6 	bl	d284 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    d318:	2000      	movs	r0, #0
}
    d31a:	bd10      	pop	{r4, pc}
    d31c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    d320:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    d324:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    d328:	4313      	orrs	r3, r2
    d32a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    d32e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    d332:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d336:	f043 0301 	orr.w	r3, r3, #1
    d33a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d33e:	3201      	adds	r2, #1
    d340:	e7e2      	b.n	d308 <z_arm_mpu_init+0x14>
		return -1;
    d342:	f04f 30ff 	mov.w	r0, #4294967295
    d346:	e7e8      	b.n	d31a <z_arm_mpu_init+0x26>
    d348:	00018c44 	.word	0x00018c44
    d34c:	e000ed00 	.word	0xe000ed00
    d350:	2000313d 	.word	0x2000313d

0000d354 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    d354:	4b01      	ldr	r3, [pc, #4]	; (d35c <__stdout_hook_install+0x8>)
    d356:	6018      	str	r0, [r3, #0]
}
    d358:	4770      	bx	lr
    d35a:	bf00      	nop
    d35c:	200003dc 	.word	0x200003dc

0000d360 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    d360:	b510      	push	{r4, lr}
	__asm__ volatile(
    d362:	f04f 0340 	mov.w	r3, #64	; 0x40
    d366:	f3ef 8011 	mrs	r0, BASEPRI
    d36a:	f383 8812 	msr	BASEPRI_MAX, r3
    d36e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    d372:	4a11      	ldr	r2, [pc, #68]	; (d3b8 <nordicsemi_nrf52_init+0x58>)
    d374:	2301      	movs	r3, #1
    d376:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    d37a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    d37e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    d382:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    d386:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    d38a:	2c08      	cmp	r4, #8
    d38c:	d108      	bne.n	d3a0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    d38e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    d392:	2905      	cmp	r1, #5
    d394:	d804      	bhi.n	d3a0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    d396:	4c09      	ldr	r4, [pc, #36]	; (d3bc <nordicsemi_nrf52_init+0x5c>)
    d398:	5c61      	ldrb	r1, [r4, r1]
    d39a:	b109      	cbz	r1, d3a0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    d39c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    d3a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d3a4:	2201      	movs	r2, #1
    d3a6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    d3aa:	f380 8811 	msr	BASEPRI, r0
    d3ae:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    d3b2:	2000      	movs	r0, #0
    d3b4:	bd10      	pop	{r4, pc}
    d3b6:	bf00      	nop
    d3b8:	4001e000 	.word	0x4001e000
    d3bc:	000196a8 	.word	0x000196a8

0000d3c0 <sys_arch_reboot>:
    *p_gpregret = val;
    d3c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d3c4:	b2c0      	uxtb	r0, r0
    d3c6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    d3ca:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d3ce:	4905      	ldr	r1, [pc, #20]	; (d3e4 <sys_arch_reboot+0x24>)
    d3d0:	4b05      	ldr	r3, [pc, #20]	; (d3e8 <sys_arch_reboot+0x28>)
    d3d2:	68ca      	ldr	r2, [r1, #12]
    d3d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d3d8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d3da:	60cb      	str	r3, [r1, #12]
    d3dc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d3e0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d3e2:	e7fd      	b.n	d3e0 <sys_arch_reboot+0x20>
    d3e4:	e000ed00 	.word	0xe000ed00
    d3e8:	05fa0004 	.word	0x05fa0004

0000d3ec <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    d3ec:	b120      	cbz	r0, d3f8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    d3ee:	4b03      	ldr	r3, [pc, #12]	; (d3fc <arch_busy_wait+0x10>)
    d3f0:	0180      	lsls	r0, r0, #6
    d3f2:	f043 0301 	orr.w	r3, r3, #1
    d3f6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    d3f8:	4770      	bx	lr
    d3fa:	bf00      	nop
    d3fc:	00018b40 	.word	0x00018b40

0000d400 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    d400:	b508      	push	{r3, lr}
    d402:	4804      	ldr	r0, [pc, #16]	; (d414 <xoshiro128_initialize+0x14>)
    d404:	f00a fc26 	bl	17c54 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    d408:	2800      	cmp	r0, #0
}
    d40a:	bf0c      	ite	eq
    d40c:	f06f 0012 	mvneq.w	r0, #18
    d410:	2000      	movne	r0, #0
    d412:	bd08      	pop	{r3, pc}
    d414:	00018804 	.word	0x00018804

0000d418 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d418:	4b0e      	ldr	r3, [pc, #56]	; (d454 <bt_hex+0x3c>)
    d41a:	2940      	cmp	r1, #64	; 0x40
{
    d41c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    d41e:	bf28      	it	cs
    d420:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
    d422:	4c0d      	ldr	r4, [pc, #52]	; (d458 <bt_hex+0x40>)
    d424:	1846      	adds	r6, r0, r1
    d426:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    d428:	42b0      	cmp	r0, r6
    d42a:	f103 0302 	add.w	r3, r3, #2
    d42e:	d104      	bne.n	d43a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d430:	2300      	movs	r3, #0
    d432:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d436:	4807      	ldr	r0, [pc, #28]	; (d454 <bt_hex+0x3c>)
    d438:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
    d43a:	7802      	ldrb	r2, [r0, #0]
    d43c:	0912      	lsrs	r2, r2, #4
    d43e:	5ca2      	ldrb	r2, [r4, r2]
    d440:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d444:	f810 2b01 	ldrb.w	r2, [r0], #1
    d448:	f002 020f 	and.w	r2, r2, #15
    d44c:	5ca2      	ldrb	r2, [r4, r2]
    d44e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d452:	e7e9      	b.n	d428 <bt_hex+0x10>
    d454:	2000315c 	.word	0x2000315c
    d458:	0001970a 	.word	0x0001970a

0000d45c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    d45c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    d45e:	7803      	ldrb	r3, [r0, #0]
    d460:	b08b      	sub	sp, #44	; 0x2c
    d462:	4604      	mov	r4, r0
    d464:	ad07      	add	r5, sp, #28
    d466:	2b03      	cmp	r3, #3
    d468:	d821      	bhi.n	d4ae <bt_addr_le_str+0x52>
    d46a:	e8df f003 	tbb	[pc, r3]
    d46e:	1a02      	.short	0x1a02
    d470:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    d472:	4912      	ldr	r1, [pc, #72]	; (d4bc <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    d474:	4628      	mov	r0, r5
    d476:	f009 fd05 	bl	16e84 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d47a:	9505      	str	r5, [sp, #20]
    d47c:	7863      	ldrb	r3, [r4, #1]
    d47e:	9304      	str	r3, [sp, #16]
    d480:	78a3      	ldrb	r3, [r4, #2]
    d482:	9303      	str	r3, [sp, #12]
    d484:	78e3      	ldrb	r3, [r4, #3]
    d486:	9302      	str	r3, [sp, #8]
    d488:	7923      	ldrb	r3, [r4, #4]
    d48a:	9301      	str	r3, [sp, #4]
    d48c:	7963      	ldrb	r3, [r4, #5]
    d48e:	9300      	str	r3, [sp, #0]
    d490:	79a3      	ldrb	r3, [r4, #6]
    d492:	4a0b      	ldr	r2, [pc, #44]	; (d4c0 <bt_addr_le_str+0x64>)
    d494:	480b      	ldr	r0, [pc, #44]	; (d4c4 <bt_addr_le_str+0x68>)
    d496:	211e      	movs	r1, #30
    d498:	f008 fead 	bl	161f6 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    d49c:	4809      	ldr	r0, [pc, #36]	; (d4c4 <bt_addr_le_str+0x68>)
    d49e:	b00b      	add	sp, #44	; 0x2c
    d4a0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    d4a2:	4909      	ldr	r1, [pc, #36]	; (d4c8 <bt_addr_le_str+0x6c>)
    d4a4:	e7e6      	b.n	d474 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
    d4a6:	4909      	ldr	r1, [pc, #36]	; (d4cc <bt_addr_le_str+0x70>)
    d4a8:	e7e4      	b.n	d474 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
    d4aa:	4909      	ldr	r1, [pc, #36]	; (d4d0 <bt_addr_le_str+0x74>)
    d4ac:	e7e2      	b.n	d474 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d4ae:	4a09      	ldr	r2, [pc, #36]	; (d4d4 <bt_addr_le_str+0x78>)
    d4b0:	210a      	movs	r1, #10
    d4b2:	4628      	mov	r0, r5
    d4b4:	f008 fe9f 	bl	161f6 <snprintk>
		break;
    d4b8:	e7df      	b.n	d47a <bt_addr_le_str+0x1e>
    d4ba:	bf00      	nop
    d4bc:	000196c5 	.word	0x000196c5
    d4c0:	000196e7 	.word	0x000196e7
    d4c4:	2000313e 	.word	0x2000313e
    d4c8:	000196cc 	.word	0x000196cc
    d4cc:	000196d3 	.word	0x000196d3
    d4d0:	000196dd 	.word	0x000196dd
    d4d4:	0001990c 	.word	0x0001990c

0000d4d8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    d4d8:	b538      	push	{r3, r4, r5, lr}
    d4da:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    d4dc:	4805      	ldr	r0, [pc, #20]	; (d4f4 <bt_buf_get_rx+0x1c>)
    d4de:	f009 fe76 	bl	171ce <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    d4e2:	4604      	mov	r4, r0
    d4e4:	b120      	cbz	r0, d4f0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    d4e6:	2100      	movs	r1, #0
    d4e8:	300c      	adds	r0, #12
    d4ea:	f009 feaa 	bl	17242 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    d4ee:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    d4f0:	4620      	mov	r0, r4
    d4f2:	bd38      	pop	{r3, r4, r5, pc}
    d4f4:	20000680 	.word	0x20000680

0000d4f8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    d4f8:	b570      	push	{r4, r5, r6, lr}
    d4fa:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d4fc:	480d      	ldr	r0, [pc, #52]	; (d534 <bt_buf_get_cmd_complete+0x3c>)
    d4fe:	f3bf 8f5b 	dmb	ish
    d502:	460b      	mov	r3, r1
    d504:	2100      	movs	r1, #0
    d506:	e850 4f00 	ldrex	r4, [r0]
    d50a:	e840 1500 	strex	r5, r1, [r0]
    d50e:	2d00      	cmp	r5, #0
    d510:	d1f9      	bne.n	d506 <bt_buf_get_cmd_complete+0xe>
    d512:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    d516:	b924      	cbnz	r4, d522 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    d518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d51c:	2001      	movs	r0, #1
    d51e:	f7ff bfdb 	b.w	d4d8 <bt_buf_get_rx>
    d522:	2301      	movs	r3, #1
    d524:	f104 000c 	add.w	r0, r4, #12
    d528:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    d52a:	8221      	strh	r1, [r4, #16]
    d52c:	f009 fe89 	bl	17242 <net_buf_simple_reserve>
}
    d530:	4620      	mov	r0, r4
    d532:	bd70      	pop	{r4, r5, r6, pc}
    d534:	200002a0 	.word	0x200002a0

0000d538 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    d538:	b570      	push	{r4, r5, r6, lr}
    d53a:	4605      	mov	r5, r0
	switch (evt) {
    d53c:	3d0e      	subs	r5, #14
    d53e:	2d01      	cmp	r5, #1
{
    d540:	460c      	mov	r4, r1
    d542:	4610      	mov	r0, r2
    d544:	4619      	mov	r1, r3
	switch (evt) {
    d546:	d803      	bhi.n	d550 <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    d548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    d54c:	f7ff bfd4 	b.w	d4f8 <bt_buf_get_cmd_complete>
		if (discardable) {
    d550:	b164      	cbz	r4, d56c <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
    d552:	4809      	ldr	r0, [pc, #36]	; (d578 <bt_buf_get_evt+0x40>)
    d554:	f009 fe3b 	bl	171ce <net_buf_alloc_fixed>
			if (buf) {
    d558:	4604      	mov	r4, r0
    d55a:	b128      	cbz	r0, d568 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    d55c:	2100      	movs	r1, #0
    d55e:	300c      	adds	r0, #12
    d560:	f009 fe6f 	bl	17242 <net_buf_simple_reserve>
    d564:	2301      	movs	r3, #1
    d566:	7623      	strb	r3, [r4, #24]
}
    d568:	4620      	mov	r0, r4
    d56a:	bd70      	pop	{r4, r5, r6, pc}
    d56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    d570:	2001      	movs	r0, #1
    d572:	f7ff bfb1 	b.w	d4d8 <bt_buf_get_rx>
    d576:	bf00      	nop
    d578:	20000628 	.word	0x20000628

0000d57c <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
    d57c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    d57e:	4d0c      	ldr	r5, [pc, #48]	; (d5b0 <ver_str+0x34>)
{
    d580:	4606      	mov	r6, r0
	const char * const str[] = {
    d582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    d584:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    d586:	466c      	mov	r4, sp
    d588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d58a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d58c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d58e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d592:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
    d596:	2e0d      	cmp	r6, #13
	const char * const str[] = {
    d598:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    d59c:	bf9b      	ittet	ls
    d59e:	ab0e      	addls	r3, sp, #56	; 0x38
    d5a0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    d5a4:	4803      	ldrhi	r0, [pc, #12]	; (d5b4 <ver_str+0x38>)
		return str[ver];
    d5a6:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
    d5aa:	b00e      	add	sp, #56	; 0x38
    d5ac:	bd70      	pop	{r4, r5, r6, pc}
    d5ae:	bf00      	nop
    d5b0:	00018af0 	.word	0x00018af0
    d5b4:	00019723 	.word	0x00019723

0000d5b8 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    d5b8:	b5b0      	push	{r4, r5, r7, lr}
    d5ba:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    d5bc:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
    d5be:	af00      	add	r7, sp, #0
    d5c0:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
    d5c2:	4629      	mov	r1, r5
    d5c4:	68d8      	ldr	r0, [r3, #12]
    d5c6:	f7ff ff27 	bl	d418 <bt_hex>
    d5ca:	b08a      	sub	sp, #40	; 0x28
    d5cc:	466a      	mov	r2, sp
    d5ce:	4b09      	ldr	r3, [pc, #36]	; (d5f4 <handle_event.part.0+0x3c>)
    d5d0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    d5d4:	f240 4302 	movw	r3, #1026	; 0x402
    d5d8:	8493      	strh	r3, [r2, #36]	; 0x24
    d5da:	4b07      	ldr	r3, [pc, #28]	; (d5f8 <handle_event.part.0+0x40>)
    d5dc:	e9c2 5007 	strd	r5, r0, [r2, #28]
    d5e0:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
    d5e4:	f842 3f10 	str.w	r3, [r2, #16]!
    d5e8:	4804      	ldr	r0, [pc, #16]	; (d5fc <handle_event.part.0+0x44>)
    d5ea:	f009 fcc4 	bl	16f76 <z_log_msg_static_create.constprop.0>
}
    d5ee:	46bd      	mov	sp, r7
    d5f0:	bdb0      	pop	{r4, r5, r7, pc}
    d5f2:	bf00      	nop
    d5f4:	0001972b 	.word	0x0001972b
    d5f8:	01000005 	.word	0x01000005
    d5fc:	00018a34 	.word	0x00018a34

0000d600 <handle_event>:
{
    d600:	b5b0      	push	{r4, r5, r7, lr}
    d602:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d606:	af00      	add	r7, sp, #0
    d608:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
    d60a:	4293      	cmp	r3, r2
    d60c:	d103      	bne.n	d616 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
    d60e:	4620      	mov	r0, r4
    d610:	f7ff ffd2 	bl	d5b8 <handle_event.part.0>
}
    d614:	e018      	b.n	d648 <handle_event+0x48>
		if (handler->event != event) {
    d616:	4610      	mov	r0, r2
    d618:	f810 5b08 	ldrb.w	r5, [r0], #8
    d61c:	42a5      	cmp	r5, r4
    d61e:	d119      	bne.n	d654 <handle_event+0x54>
		if (buf->len < handler->min_len) {
    d620:	8a0b      	ldrh	r3, [r1, #16]
    d622:	7850      	ldrb	r0, [r2, #1]
    d624:	4298      	cmp	r0, r3
    d626:	d911      	bls.n	d64c <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
    d628:	466d      	mov	r5, sp
    d62a:	b088      	sub	sp, #32
    d62c:	466a      	mov	r2, sp
    d62e:	490a      	ldr	r1, [pc, #40]	; (d658 <handle_event+0x58>)
    d630:	61d4      	str	r4, [r2, #28]
    d632:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d636:	2304      	movs	r3, #4
    d638:	f842 3f10 	str.w	r3, [r2, #16]!
    d63c:	4807      	ldr	r0, [pc, #28]	; (d65c <handle_event+0x5c>)
    d63e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    d642:	f009 fc98 	bl	16f76 <z_log_msg_static_create.constprop.0>
    d646:	46ad      	mov	sp, r5
}
    d648:	46bd      	mov	sp, r7
    d64a:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    d64c:	6853      	ldr	r3, [r2, #4]
    d64e:	4608      	mov	r0, r1
    d650:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
    d652:	e7f9      	b.n	d648 <handle_event+0x48>
    d654:	4602      	mov	r2, r0
    d656:	e7d8      	b.n	d60a <handle_event+0xa>
    d658:	0001974d 	.word	0x0001974d
    d65c:	00018a34 	.word	0x00018a34

0000d660 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    d660:	b5b0      	push	{r4, r5, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    d662:	4832      	ldr	r0, [pc, #200]	; (d72c <rx_work_handler+0xcc>)
{
    d664:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    d666:	f009 fdcf 	bl	17208 <net_buf_slist_get>
	if (!buf) {
    d66a:	4604      	mov	r4, r0
    d66c:	2800      	cmp	r0, #0
    d66e:	d04b      	beq.n	d708 <rx_work_handler+0xa8>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    d670:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    d672:	2b01      	cmp	r3, #1
    d674:	d14a      	bne.n	d70c <rx_work_handler+0xac>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    d676:	8a03      	ldrh	r3, [r0, #16]
    d678:	2b01      	cmp	r3, #1
    d67a:	d80c      	bhi.n	d696 <rx_work_handler+0x36>
    d67c:	4a2c      	ldr	r2, [pc, #176]	; (d730 <rx_work_handler+0xd0>)
    d67e:	492d      	ldr	r1, [pc, #180]	; (d734 <rx_work_handler+0xd4>)
    d680:	482d      	ldr	r0, [pc, #180]	; (d738 <rx_work_handler+0xd8>)
    d682:	f640 2347 	movw	r3, #2631	; 0xa47
    d686:	f009 f8d7 	bl	16838 <assert_print>
    d68a:	4040      	eors	r0, r0
    d68c:	f380 8811 	msr	BASEPRI, r0
    d690:	f04f 0003 	mov.w	r0, #3
    d694:	df02      	svc	2
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    d696:	2102      	movs	r1, #2
    d698:	f104 000c 	add.w	r0, r4, #12
    d69c:	f009 fdec 	bl	17278 <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    d6a0:	7803      	ldrb	r3, [r0, #0]
    d6a2:	3b0e      	subs	r3, #14
    d6a4:	2b01      	cmp	r3, #1
    d6a6:	4605      	mov	r5, r0
    d6a8:	d80c      	bhi.n	d6c4 <rx_work_handler+0x64>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    d6aa:	4a21      	ldr	r2, [pc, #132]	; (d730 <rx_work_handler+0xd0>)
    d6ac:	4923      	ldr	r1, [pc, #140]	; (d73c <rx_work_handler+0xdc>)
    d6ae:	4822      	ldr	r0, [pc, #136]	; (d738 <rx_work_handler+0xd8>)
    d6b0:	f640 234b 	movw	r3, #2635	; 0xa4b
    d6b4:	f009 f8c0 	bl	16838 <assert_print>
    d6b8:	4040      	eors	r0, r0
    d6ba:	f380 8811 	msr	BASEPRI, r0
    d6be:	f04f 0003 	mov.w	r0, #3
    d6c2:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    d6c4:	4a1e      	ldr	r2, [pc, #120]	; (d740 <rx_work_handler+0xe0>)
    d6c6:	7828      	ldrb	r0, [r5, #0]
    d6c8:	2303      	movs	r3, #3
    d6ca:	4621      	mov	r1, r4
    d6cc:	f7ff ff98 	bl	d600 <handle_event>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    d6d0:	4620      	mov	r0, r4
    d6d2:	f001 fc5d 	bl	ef90 <net_buf_unref>
	return list->head;
    d6d6:	4b1b      	ldr	r3, [pc, #108]	; (d744 <rx_work_handler+0xe4>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    d6d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    d6dc:	b1a3      	cbz	r3, d708 <rx_work_handler+0xa8>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    d6de:	491a      	ldr	r1, [pc, #104]	; (d748 <rx_work_handler+0xe8>)
    d6e0:	481a      	ldr	r0, [pc, #104]	; (d74c <rx_work_handler+0xec>)
    d6e2:	f00a fcdb 	bl	1809c <k_work_submit_to_queue>
#endif
		if (err < 0) {
    d6e6:	2800      	cmp	r0, #0
    d6e8:	da0e      	bge.n	d708 <rx_work_handler+0xa8>
			LOG_ERR("Could not submit rx_work: %d", err);
    d6ea:	466c      	mov	r4, sp
    d6ec:	b088      	sub	sp, #32
    d6ee:	466a      	mov	r2, sp
    d6f0:	4b17      	ldr	r3, [pc, #92]	; (d750 <rx_work_handler+0xf0>)
    d6f2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    d6f6:	2303      	movs	r3, #3
    d6f8:	f842 3f10 	str.w	r3, [r2, #16]!
    d6fc:	4815      	ldr	r0, [pc, #84]	; (d754 <rx_work_handler+0xf4>)
    d6fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d702:	f009 fc38 	bl	16f76 <z_log_msg_static_create.constprop.0>
    d706:	46a5      	mov	sp, r4
		}
	}
}
    d708:	46bd      	mov	sp, r7
    d70a:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    d70c:	466d      	mov	r5, sp
    d70e:	b088      	sub	sp, #32
    d710:	466a      	mov	r2, sp
    d712:	4911      	ldr	r1, [pc, #68]	; (d758 <rx_work_handler+0xf8>)
    d714:	480f      	ldr	r0, [pc, #60]	; (d754 <rx_work_handler+0xf4>)
	switch (bt_buf_get_type(buf)) {
    d716:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    d71a:	2303      	movs	r3, #3
    d71c:	f842 3f10 	str.w	r3, [r2, #16]!
    d720:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d724:	f009 fc27 	bl	16f76 <z_log_msg_static_create.constprop.0>
    d728:	46ad      	mov	sp, r5
    d72a:	e7d1      	b.n	d6d0 <rx_work_handler+0x70>
    d72c:	200002a4 	.word	0x200002a4
    d730:	0001976f 	.word	0x0001976f
    d734:	000197a3 	.word	0x000197a3
    d738:	000197bc 	.word	0x000197bc
    d73c:	000197d9 	.word	0x000197d9
    d740:	00018cc4 	.word	0x00018cc4
    d744:	200001a0 	.word	0x200001a0
    d748:	200003f4 	.word	0x200003f4
    d74c:	200018c8 	.word	0x200018c8
    d750:	0001981b 	.word	0x0001981b
    d754:	00018a34 	.word	0x00018a34
    d758:	00019807 	.word	0x00019807

0000d75c <hci_le_meta_event>:
{
    d75c:	b510      	push	{r4, lr}
    d75e:	2101      	movs	r1, #1
    d760:	4604      	mov	r4, r0
    d762:	300c      	adds	r0, #12
    d764:	f009 fd88 	bl	17278 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    d768:	4621      	mov	r1, r4
    d76a:	4a03      	ldr	r2, [pc, #12]	; (d778 <hci_le_meta_event+0x1c>)
    d76c:	7800      	ldrb	r0, [r0, #0]
}
    d76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    d772:	2300      	movs	r3, #0
    d774:	f7ff bf44 	b.w	d600 <handle_event>
    d778:	00018cdc 	.word	0x00018cdc

0000d77c <hci_hardware_error>:
{
    d77c:	b580      	push	{r7, lr}
    d77e:	2101      	movs	r1, #1
    d780:	af00      	add	r7, sp, #0
    d782:	300c      	adds	r0, #12
    d784:	f009 fd78 	bl	17278 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    d788:	b088      	sub	sp, #32
    d78a:	7803      	ldrb	r3, [r0, #0]
    d78c:	466a      	mov	r2, sp
    d78e:	4906      	ldr	r1, [pc, #24]	; (d7a8 <hci_hardware_error+0x2c>)
    d790:	4806      	ldr	r0, [pc, #24]	; (d7ac <hci_hardware_error+0x30>)
    d792:	e9c2 1305 	strd	r1, r3, [r2, #20]
    d796:	2303      	movs	r3, #3
    d798:	f842 3f10 	str.w	r3, [r2, #16]!
    d79c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d7a0:	f009 fbe9 	bl	16f76 <z_log_msg_static_create.constprop.0>
}
    d7a4:	46bd      	mov	sp, r7
    d7a6:	bd80      	pop	{r7, pc}
    d7a8:	00019838 	.word	0x00019838
    d7ac:	00018a34 	.word	0x00018a34

0000d7b0 <hci_cmd_done>:
{
    d7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7b4:	4680      	mov	r8, r0
    d7b6:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    d7b8:	7a90      	ldrb	r0, [r2, #10]
    d7ba:	4d4c      	ldr	r5, [pc, #304]	; (d8ec <hci_cmd_done+0x13c>)
{
    d7bc:	460e      	mov	r6, r1
    d7be:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    d7c0:	f001 fb24 	bl	ee0c <net_buf_pool_get>
    d7c4:	4285      	cmp	r5, r0
    d7c6:	d018      	beq.n	d7fa <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
    d7c8:	7aa4      	ldrb	r4, [r4, #10]
    d7ca:	4620      	mov	r0, r4
    d7cc:	f001 fb1e 	bl	ee0c <net_buf_pool_get>
    d7d0:	466e      	mov	r6, sp
    d7d2:	b08a      	sub	sp, #40	; 0x28
    d7d4:	466a      	mov	r2, sp
    d7d6:	4b46      	ldr	r3, [pc, #280]	; (d8f0 <hci_cmd_done+0x140>)
    d7d8:	6255      	str	r5, [r2, #36]	; 0x24
    d7da:	e9c2 3805 	strd	r3, r8, [r2, #20]
    d7de:	2306      	movs	r3, #6
    d7e0:	e9c2 4007 	strd	r4, r0, [r2, #28]
    d7e4:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    d7e8:	f842 3f10 	str.w	r3, [r2, #16]!
    d7ec:	4841      	ldr	r0, [pc, #260]	; (d8f4 <hci_cmd_done+0x144>)
    d7ee:	f009 fbc2 	bl	16f76 <z_log_msg_static_create.constprop.0>
    d7f2:	46b5      	mov	sp, r6
}
    d7f4:	46bd      	mov	sp, r7
    d7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    d7fa:	4620      	mov	r0, r4
    d7fc:	f001 fb0e 	bl	ee1c <net_buf_id>
    d800:	4d3d      	ldr	r5, [pc, #244]	; (d8f8 <hci_cmd_done+0x148>)
    d802:	f04f 090c 	mov.w	r9, #12
    d806:	fb09 5000 	mla	r0, r9, r0, r5
    d80a:	8843      	ldrh	r3, [r0, #2]
    d80c:	4543      	cmp	r3, r8
    d80e:	d016      	beq.n	d83e <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
    d810:	4620      	mov	r0, r4
    d812:	f001 fb03 	bl	ee1c <net_buf_id>
    d816:	fb09 5000 	mla	r0, r9, r0, r5
    d81a:	466c      	mov	r4, sp
    d81c:	b088      	sub	sp, #32
    d81e:	8843      	ldrh	r3, [r0, #2]
    d820:	466a      	mov	r2, sp
    d822:	4936      	ldr	r1, [pc, #216]	; (d8fc <hci_cmd_done+0x14c>)
    d824:	61d3      	str	r3, [r2, #28]
    d826:	2304      	movs	r3, #4
    d828:	e9c2 1805 	strd	r1, r8, [r2, #20]
    d82c:	4831      	ldr	r0, [pc, #196]	; (d8f4 <hci_cmd_done+0x144>)
    d82e:	f842 3f10 	str.w	r3, [r2, #16]!
    d832:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    d836:	f009 fb9e 	bl	16f76 <z_log_msg_static_create.constprop.0>
    d83a:	46a5      	mov	sp, r4
		return;
    d83c:	e7da      	b.n	d7f4 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
    d83e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d900 <hci_cmd_done+0x150>
    d842:	f8d8 0100 	ldr.w	r0, [r8, #256]	; 0x100
    d846:	b120      	cbz	r0, d852 <hci_cmd_done+0xa2>
		net_buf_unref(bt_dev.sent_cmd);
    d848:	f001 fba2 	bl	ef90 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    d84c:	2300      	movs	r3, #0
    d84e:	f8c8 3100 	str.w	r3, [r8, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    d852:	4620      	mov	r0, r4
    d854:	f001 fae2 	bl	ee1c <net_buf_id>
    d858:	f04f 080c 	mov.w	r8, #12
    d85c:	fb08 5000 	mla	r0, r8, r0, r5
    d860:	6843      	ldr	r3, [r0, #4]
    d862:	b1eb      	cbz	r3, d8a0 <hci_cmd_done+0xf0>
    d864:	b9e6      	cbnz	r6, d8a0 <hci_cmd_done+0xf0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    d866:	4620      	mov	r0, r4
    d868:	f001 fad8 	bl	ee1c <net_buf_id>
    d86c:	fb08 5000 	mla	r0, r8, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    d870:	2201      	movs	r2, #1
    d872:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    d874:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    d878:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    d87a:	f001 0c1f 	and.w	ip, r1, #31
    d87e:	fa02 f20c 	lsl.w	r2, r2, ip
	if (val) {
    d882:	0949      	lsrs	r1, r1, #5
    d884:	b328      	cbz	r0, d8d2 <hci_cmd_done+0x122>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d886:	f3bf 8f5b 	dmb	ish
    d88a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d88e:	e853 0f00 	ldrex	r0, [r3]
    d892:	4310      	orrs	r0, r2
    d894:	e843 0100 	strex	r1, r0, [r3]
    d898:	2900      	cmp	r1, #0
    d89a:	d1f8      	bne.n	d88e <hci_cmd_done+0xde>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d89c:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    d8a0:	4620      	mov	r0, r4
    d8a2:	f001 fabb 	bl	ee1c <net_buf_id>
    d8a6:	f04f 080c 	mov.w	r8, #12
    d8aa:	fb08 5000 	mla	r0, r8, r0, r5
    d8ae:	6883      	ldr	r3, [r0, #8]
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d09f      	beq.n	d7f4 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
    d8b4:	4620      	mov	r0, r4
    d8b6:	f001 fab1 	bl	ee1c <net_buf_id>
    d8ba:	fb08 f000 	mul.w	r0, r8, r0
    d8be:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    d8c0:	4620      	mov	r0, r4
    d8c2:	f001 faab 	bl	ee1c <net_buf_id>
    d8c6:	fb08 5500 	mla	r5, r8, r0, r5
    d8ca:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    d8cc:	f004 ffce 	bl	1286c <z_impl_k_sem_give>
}
    d8d0:	e790      	b.n	d7f4 <hci_cmd_done+0x44>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d8d2:	43d2      	mvns	r2, r2
    d8d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    d8d8:	f3bf 8f5b 	dmb	ish
    d8dc:	e853 0f00 	ldrex	r0, [r3]
    d8e0:	4010      	ands	r0, r2
    d8e2:	e843 0100 	strex	r1, r0, [r3]
    d8e6:	2900      	cmp	r1, #0
    d8e8:	d0d8      	beq.n	d89c <hci_cmd_done+0xec>
    d8ea:	e7f7      	b.n	d8dc <hci_cmd_done+0x12c>
    d8ec:	20000654 	.word	0x20000654
    d8f0:	0001985a 	.word	0x0001985a
    d8f4:	00018a34 	.word	0x00018a34
    d8f8:	20002410 	.word	0x20002410
    d8fc:	0001988f 	.word	0x0001988f
    d900:	200001a0 	.word	0x200001a0

0000d904 <hci_cmd_status>:
{
    d904:	b538      	push	{r3, r4, r5, lr}
    d906:	2104      	movs	r1, #4
    d908:	4604      	mov	r4, r0
    d90a:	300c      	adds	r0, #12
    d90c:	f009 fcb4 	bl	17278 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    d910:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    d912:	7801      	ldrb	r1, [r0, #0]
    d914:	8840      	ldrh	r0, [r0, #2]
    d916:	4622      	mov	r2, r4
    d918:	f7ff ff4a 	bl	d7b0 <hci_cmd_done>
	if (ncmd) {
    d91c:	b125      	cbz	r5, d928 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    d91e:	4803      	ldr	r0, [pc, #12]	; (d92c <hci_cmd_status+0x28>)
}
    d920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d924:	f004 bfa2 	b.w	1286c <z_impl_k_sem_give>
    d928:	bd38      	pop	{r3, r4, r5, pc}
    d92a:	bf00      	nop
    d92c:	20000288 	.word	0x20000288

0000d930 <hci_cmd_complete>:
{
    d930:	b538      	push	{r3, r4, r5, lr}
    d932:	2103      	movs	r1, #3
    d934:	4604      	mov	r4, r0
    d936:	300c      	adds	r0, #12
    d938:	f009 fc9e 	bl	17278 <net_buf_simple_pull_mem>
	status = buf->data[0];
    d93c:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    d93e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    d940:	7819      	ldrb	r1, [r3, #0]
    d942:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    d946:	4622      	mov	r2, r4
    d948:	f7ff ff32 	bl	d7b0 <hci_cmd_done>
	if (ncmd) {
    d94c:	b125      	cbz	r5, d958 <hci_cmd_complete+0x28>
    d94e:	4803      	ldr	r0, [pc, #12]	; (d95c <hci_cmd_complete+0x2c>)
}
    d950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d954:	f004 bf8a 	b.w	1286c <z_impl_k_sem_give>
    d958:	bd38      	pop	{r3, r4, r5, pc}
    d95a:	bf00      	nop
    d95c:	20000288 	.word	0x20000288

0000d960 <bt_hci_cmd_state_set_init>:
{
    d960:	b510      	push	{r4, lr}
	state->bit = bit;
    d962:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    d966:	f89d 3008 	ldrb.w	r3, [sp, #8]
    d96a:	720b      	strb	r3, [r1, #8]
{
    d96c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    d96e:	f001 fa55 	bl	ee1c <net_buf_id>
    d972:	4b03      	ldr	r3, [pc, #12]	; (d980 <bt_hci_cmd_state_set_init+0x20>)
    d974:	220c      	movs	r2, #12
    d976:	fb02 3300 	mla	r3, r2, r0, r3
    d97a:	605c      	str	r4, [r3, #4]
}
    d97c:	bd10      	pop	{r4, pc}
    d97e:	bf00      	nop
    d980:	20002410 	.word	0x20002410

0000d984 <bt_hci_cmd_create>:
{
    d984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    d988:	f04f 32ff 	mov.w	r2, #4294967295
    d98c:	f04f 33ff 	mov.w	r3, #4294967295
    d990:	4606      	mov	r6, r0
    d992:	4817      	ldr	r0, [pc, #92]	; (d9f0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    d994:	4d17      	ldr	r5, [pc, #92]	; (d9f4 <bt_hci_cmd_create+0x70>)
{
    d996:	460f      	mov	r7, r1
    d998:	f009 fc19 	bl	171ce <net_buf_alloc_fixed>
    d99c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    d99e:	f100 0a0c 	add.w	sl, r0, #12
    d9a2:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    d9a4:	f04f 0800 	mov.w	r8, #0
    d9a8:	4650      	mov	r0, sl
    d9aa:	f009 fc4a 	bl	17242 <net_buf_simple_reserve>
    d9ae:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    d9b2:	4620      	mov	r0, r4
    d9b4:	f001 fa32 	bl	ee1c <net_buf_id>
    d9b8:	f04f 090c 	mov.w	r9, #12
    d9bc:	fb09 5000 	mla	r0, r9, r0, r5
    d9c0:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    d9c2:	4620      	mov	r0, r4
    d9c4:	f001 fa2a 	bl	ee1c <net_buf_id>
    d9c8:	fb09 5000 	mla	r0, r9, r0, r5
    d9cc:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    d9d0:	4620      	mov	r0, r4
    d9d2:	f001 fa23 	bl	ee1c <net_buf_id>
    d9d6:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    d9da:	2103      	movs	r1, #3
    d9dc:	4650      	mov	r0, sl
    d9de:	f8c5 8004 	str.w	r8, [r5, #4]
    d9e2:	f009 fc32 	bl	1724a <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    d9e6:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    d9e8:	7087      	strb	r7, [r0, #2]
}
    d9ea:	4620      	mov	r0, r4
    d9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9f0:	20000654 	.word	0x20000654
    d9f4:	20002410 	.word	0x20002410

0000d9f8 <bt_hci_cmd_send_sync>:
{
    d9f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d9fc:	b087      	sub	sp, #28
    d9fe:	4606      	mov	r6, r0
    da00:	af00      	add	r7, sp, #0
    da02:	4615      	mov	r5, r2
	if (!buf) {
    da04:	460c      	mov	r4, r1
    da06:	b921      	cbnz	r1, da12 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    da08:	f7ff ffbc 	bl	d984 <bt_hci_cmd_create>
		if (!buf) {
    da0c:	4604      	mov	r4, r0
    da0e:	2800      	cmp	r0, #0
    da10:	d05f      	beq.n	dad2 <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
    da12:	2201      	movs	r2, #1
    da14:	2100      	movs	r1, #0
    da16:	4638      	mov	r0, r7
    da18:	f00a faa0 	bl	17f5c <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    da1c:	4620      	mov	r0, r4
    da1e:	f001 f9fd 	bl	ee1c <net_buf_id>
    da22:	f8df 90b4 	ldr.w	r9, [pc, #180]	; dad8 <bt_hci_cmd_send_sync+0xe0>
    da26:	230c      	movs	r3, #12
    da28:	fb03 9000 	mla	r0, r3, r0, r9
    da2c:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    da2e:	4620      	mov	r0, r4
    da30:	f009 fc03 	bl	1723a <net_buf_ref>
    da34:	4601      	mov	r1, r0
    da36:	4829      	ldr	r0, [pc, #164]	; (dadc <bt_hci_cmd_send_sync+0xe4>)
    da38:	f009 fbfd 	bl	17236 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    da3c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    da40:	2300      	movs	r3, #0
    da42:	4638      	mov	r0, r7
    da44:	f004 ff38 	bl	128b8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    da48:	4680      	mov	r8, r0
    da4a:	b188      	cbz	r0, da70 <bt_hci_cmd_send_sync+0x78>
    da4c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    da50:	4a23      	ldr	r2, [pc, #140]	; (dae0 <bt_hci_cmd_send_sync+0xe8>)
    da52:	4924      	ldr	r1, [pc, #144]	; (dae4 <bt_hci_cmd_send_sync+0xec>)
    da54:	4824      	ldr	r0, [pc, #144]	; (dae8 <bt_hci_cmd_send_sync+0xf0>)
    da56:	f008 feef 	bl	16838 <assert_print>
    da5a:	4824      	ldr	r0, [pc, #144]	; (daec <bt_hci_cmd_send_sync+0xf4>)
    da5c:	4642      	mov	r2, r8
    da5e:	4631      	mov	r1, r6
    da60:	f008 feea 	bl	16838 <assert_print>
    da64:	4040      	eors	r0, r0
    da66:	f380 8811 	msr	BASEPRI, r0
    da6a:	f04f 0003 	mov.w	r0, #3
    da6e:	df02      	svc	2
	status = cmd(buf)->status;
    da70:	4620      	mov	r0, r4
    da72:	f001 f9d3 	bl	ee1c <net_buf_id>
    da76:	230c      	movs	r3, #12
    da78:	4358      	muls	r0, r3
    da7a:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
    da7e:	f1b8 0f00 	cmp.w	r8, #0
    da82:	d01e      	beq.n	dac2 <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
    da84:	466d      	mov	r5, sp
    da86:	b088      	sub	sp, #32
    da88:	466a      	mov	r2, sp
    da8a:	4b19      	ldr	r3, [pc, #100]	; (daf0 <bt_hci_cmd_send_sync+0xf8>)
    da8c:	f8c2 801c 	str.w	r8, [r2, #28]
    da90:	e9c2 3605 	strd	r3, r6, [r2, #20]
    da94:	2304      	movs	r3, #4
    da96:	f842 3f10 	str.w	r3, [r2, #16]!
    da9a:	4816      	ldr	r0, [pc, #88]	; (daf4 <bt_hci_cmd_send_sync+0xfc>)
    da9c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    daa0:	f009 fa69 	bl	16f76 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    daa4:	4620      	mov	r0, r4
    daa6:	46ad      	mov	sp, r5
    daa8:	f001 fa72 	bl	ef90 <net_buf_unref>
			return -ECONNREFUSED;
    daac:	f1b8 0f09 	cmp.w	r8, #9
    dab0:	bf14      	ite	ne
    dab2:	f06f 0004 	mvnne.w	r0, #4
    dab6:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    daba:	371c      	adds	r7, #28
    dabc:	46bd      	mov	sp, r7
    dabe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    dac2:	b115      	cbz	r5, daca <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
    dac4:	602c      	str	r4, [r5, #0]
	return 0;
    dac6:	2000      	movs	r0, #0
    dac8:	e7f7      	b.n	daba <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
    daca:	4620      	mov	r0, r4
    dacc:	f001 fa60 	bl	ef90 <net_buf_unref>
    dad0:	e7f9      	b.n	dac6 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
    dad2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dad6:	e7f0      	b.n	daba <bt_hci_cmd_send_sync+0xc2>
    dad8:	20002410 	.word	0x20002410
    dadc:	200002ac 	.word	0x200002ac
    dae0:	0001976f 	.word	0x0001976f
    dae4:	000198c2 	.word	0x000198c2
    dae8:	000197bc 	.word	0x000197bc
    daec:	000198cb 	.word	0x000198cb
    daf0:	000198f7 	.word	0x000198f7
    daf4:	00018a34 	.word	0x00018a34

0000daf8 <hci_init>:
{
    daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    dafc:	4d91      	ldr	r5, [pc, #580]	; (dd44 <hci_init+0x24c>)
{
    dafe:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    db00:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    db04:	6899      	ldr	r1, [r3, #8]
    db06:	f011 0101 	ands.w	r1, r1, #1
{
    db0a:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    db0c:	d122      	bne.n	db54 <hci_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    db0e:	f107 0208 	add.w	r2, r7, #8
    db12:	f640 4003 	movw	r0, #3075	; 0xc03
    db16:	f7ff ff6f 	bl	d9f8 <bt_hci_cmd_send_sync>
		if (err) {
    db1a:	4604      	mov	r4, r0
    db1c:	2800      	cmp	r0, #0
    db1e:	d170      	bne.n	dc02 <hci_init+0x10a>
		hci_reset_complete(rsp);
    db20:	68b8      	ldr	r0, [r7, #8]
	uint8_t status = buf->data[0];
    db22:	68c3      	ldr	r3, [r0, #12]
	if (status) {
    db24:	781b      	ldrb	r3, [r3, #0]
    db26:	b99b      	cbnz	r3, db50 <hci_init+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db28:	f3bf 8f5b 	dmb	ish
    db2c:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    db30:	f3bf 8f5b 	dmb	ish
    db34:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    db38:	f003 0309 	and.w	r3, r3, #9
    db3c:	f3bf 8f5b 	dmb	ish
    db40:	e852 1f00 	ldrex	r1, [r2]
    db44:	e842 3400 	strex	r4, r3, [r2]
    db48:	2c00      	cmp	r4, #0
    db4a:	d1f9      	bne.n	db40 <hci_init+0x48>
    db4c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    db50:	f001 fa1e 	bl	ef90 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    db54:	f107 0208 	add.w	r2, r7, #8
    db58:	2100      	movs	r1, #0
    db5a:	f241 0003 	movw	r0, #4099	; 0x1003
    db5e:	f7ff ff4b 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    db62:	4604      	mov	r4, r0
    db64:	2800      	cmp	r0, #0
    db66:	d14c      	bne.n	dc02 <hci_init+0x10a>
	read_local_features_complete(rsp);
    db68:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    db6a:	4877      	ldr	r0, [pc, #476]	; (dd48 <hci_init+0x250>)
    db6c:	68f1      	ldr	r1, [r6, #12]
    db6e:	2208      	movs	r2, #8
    db70:	3101      	adds	r1, #1
    db72:	f009 f9c8 	bl	16f06 <memcpy>
	net_buf_unref(rsp);
    db76:	4630      	mov	r0, r6
    db78:	f001 fa0a 	bl	ef90 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    db7c:	4621      	mov	r1, r4
    db7e:	f107 0208 	add.w	r2, r7, #8
    db82:	f241 0001 	movw	r0, #4097	; 0x1001
    db86:	f7ff ff37 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    db8a:	4604      	mov	r4, r0
    db8c:	2800      	cmp	r0, #0
    db8e:	d138      	bne.n	dc02 <hci_init+0x10a>
	read_local_ver_complete(rsp);
    db90:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    db92:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    db94:	785a      	ldrb	r2, [r3, #1]
    db96:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    db9a:	885a      	ldrh	r2, [r3, #2]
    db9c:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    dba0:	791a      	ldrb	r2, [r3, #4]
    dba2:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    dba6:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    dbaa:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    dbae:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    dbb2:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    dbb6:	f001 f9eb 	bl	ef90 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    dbba:	4621      	mov	r1, r4
    dbbc:	f107 0208 	add.w	r2, r7, #8
    dbc0:	f241 0002 	movw	r0, #4098	; 0x1002
    dbc4:	f7ff ff18 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    dbc8:	4604      	mov	r4, r0
    dbca:	b9d0      	cbnz	r0, dc02 <hci_init+0x10a>
	read_supported_commands_complete(rsp);
    dbcc:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    dbce:	485f      	ldr	r0, [pc, #380]	; (dd4c <hci_init+0x254>)
    dbd0:	68f1      	ldr	r1, [r6, #12]
    dbd2:	2240      	movs	r2, #64	; 0x40
    dbd4:	3101      	adds	r1, #1
    dbd6:	f009 f996 	bl	16f06 <memcpy>
	net_buf_unref(rsp);
    dbda:	4630      	mov	r0, r6
    dbdc:	f001 f9d8 	bl	ef90 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    dbe0:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    dbe4:	0658      	lsls	r0, r3, #25
    dbe6:	d411      	bmi.n	dc0c <hci_init+0x114>
		LOG_ERR("Non-LE capable controller detected!");
    dbe8:	4b59      	ldr	r3, [pc, #356]	; (dd50 <hci_init+0x258>)
    dbea:	61fb      	str	r3, [r7, #28]
    dbec:	2302      	movs	r3, #2
    dbee:	4859      	ldr	r0, [pc, #356]	; (dd54 <hci_init+0x25c>)
    dbf0:	61bb      	str	r3, [r7, #24]
    dbf2:	f107 0218 	add.w	r2, r7, #24
    dbf6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    dbfa:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
    dbfe:	f009 f9ba 	bl	16f76 <z_log_msg_static_create.constprop.0>
}
    dc02:	4620      	mov	r0, r4
    dc04:	3720      	adds	r7, #32
    dc06:	46bd      	mov	sp, r7
    dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    dc0c:	4621      	mov	r1, r4
    dc0e:	f107 0208 	add.w	r2, r7, #8
    dc12:	f242 0003 	movw	r0, #8195	; 0x2003
    dc16:	f7ff feef 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    dc1a:	4604      	mov	r4, r0
    dc1c:	2800      	cmp	r0, #0
    dc1e:	d1f0      	bne.n	dc02 <hci_init+0x10a>
	read_le_features_complete(rsp);
    dc20:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    dc22:	484d      	ldr	r0, [pc, #308]	; (dd58 <hci_init+0x260>)
    dc24:	68f1      	ldr	r1, [r6, #12]
    dc26:	2208      	movs	r2, #8
    dc28:	3101      	adds	r1, #1
    dc2a:	f009 f96c 	bl	16f06 <memcpy>
	net_buf_unref(rsp);
    dc2e:	4630      	mov	r0, r6
    dc30:	f001 f9ae 	bl	ef90 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    dc34:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    dc38:	0699      	lsls	r1, r3, #26
    dc3a:	d417      	bmi.n	dc6c <hci_init+0x174>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    dc3c:	2102      	movs	r1, #2
    dc3e:	f640 406d 	movw	r0, #3181	; 0xc6d
    dc42:	f7ff fe9f 	bl	d984 <bt_hci_cmd_create>
		if (!buf) {
    dc46:	4606      	mov	r6, r0
    dc48:	2800      	cmp	r0, #0
    dc4a:	d04b      	beq.n	dce4 <hci_init+0x1ec>
    dc4c:	2102      	movs	r1, #2
    dc4e:	300c      	adds	r0, #12
    dc50:	f009 fafb 	bl	1724a <net_buf_simple_add>
		cp_le->le = 0x01;
    dc54:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    dc56:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    dc58:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    dc5a:	4622      	mov	r2, r4
    dc5c:	4631      	mov	r1, r6
    dc5e:	f640 406d 	movw	r0, #3181	; 0xc6d
    dc62:	f7ff fec9 	bl	d9f8 <bt_hci_cmd_send_sync>
		if (err) {
    dc66:	4604      	mov	r4, r0
    dc68:	2800      	cmp	r0, #0
    dc6a:	d1ca      	bne.n	dc02 <hci_init+0x10a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    dc6c:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    dc70:	071a      	lsls	r2, r3, #28
    dc72:	d513      	bpl.n	dc9c <hci_init+0x1a4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    dc74:	f107 0208 	add.w	r2, r7, #8
    dc78:	2100      	movs	r1, #0
    dc7a:	f242 001c 	movw	r0, #8220	; 0x201c
    dc7e:	f7ff febb 	bl	d9f8 <bt_hci_cmd_send_sync>
		if (err) {
    dc82:	4604      	mov	r4, r0
    dc84:	2800      	cmp	r0, #0
    dc86:	d1bc      	bne.n	dc02 <hci_init+0x10a>
		le_read_supp_states_complete(rsp);
    dc88:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    dc8a:	68c3      	ldr	r3, [r0, #12]
    dc8c:	f8d3 2001 	ldr.w	r2, [r3, #1]
    dc90:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    dc94:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    dc98:	f001 f97a 	bl	ef90 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    dc9c:	2108      	movs	r1, #8
    dc9e:	f242 0001 	movw	r0, #8193	; 0x2001
    dca2:	f7ff fe6f 	bl	d984 <bt_hci_cmd_create>
	if (!buf) {
    dca6:	4604      	mov	r4, r0
    dca8:	b1e0      	cbz	r0, dce4 <hci_init+0x1ec>
    dcaa:	2108      	movs	r1, #8
    dcac:	300c      	adds	r0, #12
    dcae:	f009 facc 	bl	1724a <net_buf_simple_add>
	dst[0] = val;
    dcb2:	2602      	movs	r6, #2
	dst[1] = val >> 8;
    dcb4:	2200      	movs	r2, #0
	dst[0] = val;
    dcb6:	7006      	strb	r6, [r0, #0]
	dst[1] = val >> 8;
    dcb8:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    dcba:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    dcbc:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    dcbe:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    dcc0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    dcc2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    dcc4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    dcc6:	4621      	mov	r1, r4
    dcc8:	f242 0001 	movw	r0, #8193	; 0x2001
    dccc:	f7ff fe94 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    dcd0:	4604      	mov	r4, r0
    dcd2:	2800      	cmp	r0, #0
    dcd4:	d195      	bne.n	dc02 <hci_init+0x10a>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    dcd6:	2108      	movs	r1, #8
    dcd8:	f640 4001 	movw	r0, #3073	; 0xc01
    dcdc:	f7ff fe52 	bl	d984 <bt_hci_cmd_create>
	if (!buf) {
    dce0:	4680      	mov	r8, r0
    dce2:	b910      	cbnz	r0, dcea <hci_init+0x1f2>
		return -ENOBUFS;
    dce4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    dce8:	e78b      	b.n	dc02 <hci_init+0x10a>
    dcea:	2108      	movs	r1, #8
    dcec:	300c      	adds	r0, #12
    dcee:	f009 faac 	bl	1724a <net_buf_simple_add>
    dcf2:	2380      	movs	r3, #128	; 0x80
    dcf4:	7043      	strb	r3, [r0, #1]
    dcf6:	2320      	movs	r3, #32
	dst[0] = val;
    dcf8:	7004      	strb	r4, [r0, #0]
    dcfa:	7084      	strb	r4, [r0, #2]
    dcfc:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    dcfe:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    dd00:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    dd02:	70c6      	strb	r6, [r0, #3]
    dd04:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    dd06:	4622      	mov	r2, r4
    dd08:	4641      	mov	r1, r8
    dd0a:	f640 4001 	movw	r0, #3073	; 0xc01
    dd0e:	f7ff fe73 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    dd12:	4604      	mov	r4, r0
    dd14:	2800      	cmp	r0, #0
    dd16:	f47f af74 	bne.w	dc02 <hci_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    dd1a:	4601      	mov	r1, r0
    dd1c:	1d3a      	adds	r2, r7, #4
    dd1e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    dd22:	f7ff fe69 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    dd26:	b1d8      	cbz	r0, dd60 <hci_init+0x268>
		LOG_WRN("Vendor HCI extensions not available");
    dd28:	4b0c      	ldr	r3, [pc, #48]	; (dd5c <hci_init+0x264>)
    dd2a:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
    dd2e:	4809      	ldr	r0, [pc, #36]	; (dd54 <hci_init+0x25c>)
    dd30:	f107 0218 	add.w	r2, r7, #24
    dd34:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dd38:	f009 f91d 	bl	16f76 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
    dd3c:	f000 fde0 	bl	e900 <bt_id_init>
    dd40:	4604      	mov	r4, r0
	if (err) {
    dd42:	e75e      	b.n	dc02 <hci_init+0x10a>
    dd44:	200001a0 	.word	0x200001a0
    dd48:	20000218 	.word	0x20000218
    dd4c:	20000220 	.word	0x20000220
    dd50:	00019913 	.word	0x00019913
    dd54:	00018a34 	.word	0x00018a34
    dd58:	20000278 	.word	0x20000278
    dd5c:	00019937 	.word	0x00019937
	rp.info = (void *)rsp->data;
    dd60:	687b      	ldr	r3, [r7, #4]
    dd62:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dd64:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    dd68:	2b03      	cmp	r3, #3
		return plat_str[platform];
    dd6a:	bf96      	itet	ls
    dd6c:	4a47      	ldrls	r2, [pc, #284]	; (de8c <hci_init+0x394>)
	return "unknown";
    dd6e:	4948      	ldrhi	r1, [pc, #288]	; (de90 <hci_init+0x398>)
		return plat_str[platform];
    dd70:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
    dd74:	466e      	mov	r6, sp
    dd76:	b08a      	sub	sp, #40	; 0x28
    dd78:	466a      	mov	r2, sp
    dd7a:	4846      	ldr	r0, [pc, #280]	; (de94 <hci_init+0x39c>)
    dd7c:	61d3      	str	r3, [r2, #28]
    dd7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    dd82:	8413      	strh	r3, [r2, #32]
    dd84:	4b44      	ldr	r3, [pc, #272]	; (de98 <hci_init+0x3a0>)
    dd86:	e9c2 0105 	strd	r0, r1, [r2, #20]
    dd8a:	f842 3f10 	str.w	r3, [r2, #16]!
    dd8e:	4843      	ldr	r0, [pc, #268]	; (de9c <hci_init+0x3a4>)
    dd90:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    dd94:	f009 f8ef 	bl	16f76 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    dd98:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
    dd9c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    dda0:	2a02      	cmp	r2, #2
    dda2:	46b5      	mov	sp, r6
    dda4:	d14c      	bne.n	de40 <hci_init+0x348>
	if (variant < ARRAY_SIZE(nordic_str)) {
    dda6:	2b03      	cmp	r3, #3
    dda8:	d84a      	bhi.n	de40 <hci_init+0x348>
		return nordic_str[variant];
    ddaa:	4a3d      	ldr	r2, [pc, #244]	; (dea0 <hci_init+0x3a8>)
    ddac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
    ddb0:	466e      	mov	r6, sp
    ddb2:	b08a      	sub	sp, #40	; 0x28
    ddb4:	466a      	mov	r2, sp
    ddb6:	483b      	ldr	r0, [pc, #236]	; (dea4 <hci_init+0x3ac>)
    ddb8:	61d3      	str	r3, [r2, #28]
    ddba:	f44f 7300 	mov.w	r3, #512	; 0x200
    ddbe:	8413      	strh	r3, [r2, #32]
    ddc0:	4b35      	ldr	r3, [pc, #212]	; (de98 <hci_init+0x3a0>)
    ddc2:	e9c2 0105 	strd	r0, r1, [r2, #20]
    ddc6:	f842 3f10 	str.w	r3, [r2, #16]!
    ddca:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    ddce:	4833      	ldr	r0, [pc, #204]	; (de9c <hci_init+0x3a4>)
    ddd0:	f009 f8d1 	bl	16f76 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    ddd4:	7963      	ldrb	r3, [r4, #5]
    ddd6:	f894 c006 	ldrb.w	ip, [r4, #6]
    ddda:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
    ddde:	2b03      	cmp	r3, #3
    dde0:	46b5      	mov	sp, r6
		return var_str[variant];
    dde2:	bf98      	it	ls
    dde4:	4a30      	ldrls	r2, [pc, #192]	; (dea8 <hci_init+0x3b0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    dde6:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
    ddea:	bf94      	ite	ls
    ddec:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
    ddf0:	4927      	ldrhi	r1, [pc, #156]	; (de90 <hci_init+0x398>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
    ddf2:	466c      	mov	r4, sp
    ddf4:	b08c      	sub	sp, #48	; 0x30
    ddf6:	466a      	mov	r2, sp
    ddf8:	f8df e0b0 	ldr.w	lr, [pc, #176]	; deac <hci_init+0x3b4>
    ddfc:	e9c2 3c07 	strd	r3, ip, [r2, #28]
    de00:	f44f 7300 	mov.w	r3, #512	; 0x200
    de04:	8593      	strh	r3, [r2, #44]	; 0x2c
    de06:	4b2a      	ldr	r3, [pc, #168]	; (deb0 <hci_init+0x3b8>)
    de08:	e9c2 e105 	strd	lr, r1, [r2, #20]
    de0c:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
    de10:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
    de14:	f842 3f10 	str.w	r3, [r2, #16]!
    de18:	4820      	ldr	r0, [pc, #128]	; (de9c <hci_init+0x3a4>)
    de1a:	f009 f8ac 	bl	16f76 <z_log_msg_static_create.constprop.0>
    de1e:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
    de20:	6878      	ldr	r0, [r7, #4]
    de22:	f001 f8b5 	bl	ef90 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    de26:	1d3a      	adds	r2, r7, #4
    de28:	2100      	movs	r1, #0
    de2a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    de2e:	f7ff fde3 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    de32:	4604      	mov	r4, r0
    de34:	b130      	cbz	r0, de44 <hci_init+0x34c>
		LOG_WRN("Failed to read supported vendor commands");
    de36:	4b1f      	ldr	r3, [pc, #124]	; (deb4 <hci_init+0x3bc>)
			LOG_WRN("Failed to read supported vendor features");
    de38:	61fb      	str	r3, [r7, #28]
    de3a:	2302      	movs	r3, #2
    de3c:	61bb      	str	r3, [r7, #24]
    de3e:	e776      	b.n	dd2e <hci_init+0x236>
		return "unknown";
    de40:	4913      	ldr	r1, [pc, #76]	; (de90 <hci_init+0x398>)
    de42:	e7b5      	b.n	ddb0 <hci_init+0x2b8>
	rp.cmds = (void *)rsp->data;
    de44:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    de46:	481c      	ldr	r0, [pc, #112]	; (deb8 <hci_init+0x3c0>)
    de48:	68f1      	ldr	r1, [r6, #12]
    de4a:	2202      	movs	r2, #2
    de4c:	3101      	adds	r1, #1
    de4e:	f009 f85a 	bl	16f06 <memcpy>
	net_buf_unref(rsp);
    de52:	4630      	mov	r0, r6
    de54:	f001 f89c 	bl	ef90 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    de58:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    de5c:	075b      	lsls	r3, r3, #29
    de5e:	f57f af6d 	bpl.w	dd3c <hci_init+0x244>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    de62:	1d3a      	adds	r2, r7, #4
    de64:	4621      	mov	r1, r4
    de66:	f64f 4003 	movw	r0, #64515	; 0xfc03
    de6a:	f7ff fdc5 	bl	d9f8 <bt_hci_cmd_send_sync>
		if (err) {
    de6e:	b108      	cbz	r0, de74 <hci_init+0x37c>
			LOG_WRN("Failed to read supported vendor features");
    de70:	4b12      	ldr	r3, [pc, #72]	; (debc <hci_init+0x3c4>)
    de72:	e7e1      	b.n	de38 <hci_init+0x340>
		rp.feat = (void *)rsp->data;
    de74:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    de76:	4812      	ldr	r0, [pc, #72]	; (dec0 <hci_init+0x3c8>)
    de78:	68e1      	ldr	r1, [r4, #12]
    de7a:	2201      	movs	r2, #1
    de7c:	4411      	add	r1, r2
    de7e:	f009 f842 	bl	16f06 <memcpy>
		net_buf_unref(rsp);
    de82:	4620      	mov	r0, r4
    de84:	f001 f884 	bl	ef90 <net_buf_unref>
    de88:	e758      	b.n	dd3c <hci_init+0x244>
    de8a:	bf00      	nop
    de8c:	00018ca4 	.word	0x00018ca4
    de90:	00019723 	.word	0x00019723
    de94:	0001995b 	.word	0x0001995b
    de98:	01000004 	.word	0x01000004
    de9c:	00018a34 	.word	0x00018a34
    dea0:	00018c94 	.word	0x00018c94
    dea4:	00019974 	.word	0x00019974
    dea8:	00018c84 	.word	0x00018c84
    deac:	0001998c 	.word	0x0001998c
    deb0:	01000007 	.word	0x01000007
    deb4:	000199b9 	.word	0x000199b9
    deb8:	20000261 	.word	0x20000261
    debc:	000199e2 	.word	0x000199e2
    dec0:	20000260 	.word	0x20000260

0000dec4 <bt_hci_le_rand>:
{
    dec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    dec6:	4b14      	ldr	r3, [pc, #80]	; (df18 <bt_hci_le_rand+0x54>)
    dec8:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    decc:	2b00      	cmp	r3, #0
{
    dece:	4605      	mov	r5, r0
    ded0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    ded2:	da1d      	bge.n	df10 <bt_hci_le_rand+0x4c>
	while (len > 0) {
    ded4:	b914      	cbnz	r4, dedc <bt_hci_le_rand+0x18>
	return 0;
    ded6:	4620      	mov	r0, r4
}
    ded8:	b003      	add	sp, #12
    deda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    dedc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    dede:	aa01      	add	r2, sp, #4
    dee0:	f04f 0100 	mov.w	r1, #0
    dee4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    dee8:	4626      	mov	r6, r4
    deea:	bf28      	it	cs
    deec:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    deee:	f7ff fd83 	bl	d9f8 <bt_hci_cmd_send_sync>
		if (err) {
    def2:	2800      	cmp	r0, #0
    def4:	d1f0      	bne.n	ded8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    def6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    def8:	68f9      	ldr	r1, [r7, #12]
    defa:	4632      	mov	r2, r6
    defc:	3101      	adds	r1, #1
    defe:	4628      	mov	r0, r5
    df00:	f009 f801 	bl	16f06 <memcpy>
		net_buf_unref(rsp);
    df04:	4638      	mov	r0, r7
    df06:	f001 f843 	bl	ef90 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    df0a:	4435      	add	r5, r6
		len -= count;
    df0c:	1ba4      	subs	r4, r4, r6
    df0e:	e7e1      	b.n	ded4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    df10:	f06f 0085 	mvn.w	r0, #133	; 0x85
    df14:	e7e0      	b.n	ded8 <bt_hci_le_rand+0x14>
    df16:	bf00      	nop
    df18:	200001a0 	.word	0x200001a0

0000df1c <bt_send>:
	return bt_dev.drv->send(buf);
    df1c:	4b02      	ldr	r3, [pc, #8]	; (df28 <bt_send+0xc>)
    df1e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    df22:	695b      	ldr	r3, [r3, #20]
    df24:	4718      	bx	r3
    df26:	bf00      	nop
    df28:	200001a0 	.word	0x200001a0

0000df2c <hci_tx_thread>:
{
    df2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    df30:	4d4c      	ldr	r5, [pc, #304]	; (e064 <hci_tx_thread+0x138>)
	if (bt_dev.sent_cmd) {
    df32:	4e4d      	ldr	r6, [pc, #308]	; (e068 <hci_tx_thread+0x13c>)
{
    df34:	b086      	sub	sp, #24
    df36:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
    df38:	68eb      	ldr	r3, [r5, #12]
    df3a:	f36f 3394 	bfc	r3, #14, #7
    df3e:	60eb      	str	r3, [r5, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    df40:	4848      	ldr	r0, [pc, #288]	; (e064 <hci_tx_thread+0x138>)
    df42:	f04f 32ff 	mov.w	r2, #4294967295
    df46:	f04f 33ff 	mov.w	r3, #4294967295
    df4a:	2101      	movs	r1, #1
    df4c:	f005 fbc4 	bl	136d8 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    df50:	b160      	cbz	r0, df6c <hci_tx_thread+0x40>
    df52:	4a46      	ldr	r2, [pc, #280]	; (e06c <hci_tx_thread+0x140>)
    df54:	4946      	ldr	r1, [pc, #280]	; (e070 <hci_tx_thread+0x144>)
    df56:	4847      	ldr	r0, [pc, #284]	; (e074 <hci_tx_thread+0x148>)
    df58:	f640 23c8 	movw	r3, #2760	; 0xac8
    df5c:	f008 fc6c 	bl	16838 <assert_print>
    df60:	4040      	eors	r0, r0
    df62:	f380 8811 	msr	BASEPRI, r0
    df66:	f04f 0003 	mov.w	r0, #3
    df6a:	df02      	svc	2
		switch (ev->state) {
    df6c:	68eb      	ldr	r3, [r5, #12]
    df6e:	f3c3 3386 	ubfx	r3, r3, #14, #7
    df72:	2b02      	cmp	r3, #2
    df74:	d910      	bls.n	df98 <hci_tx_thread+0x6c>
    df76:	2b04      	cmp	r3, #4
    df78:	d011      	beq.n	df9e <hci_tx_thread+0x72>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    df7a:	466c      	mov	r4, sp
    df7c:	b088      	sub	sp, #32
    df7e:	466a      	mov	r2, sp
    df80:	493d      	ldr	r1, [pc, #244]	; (e078 <hci_tx_thread+0x14c>)
    df82:	483e      	ldr	r0, [pc, #248]	; (e07c <hci_tx_thread+0x150>)
		switch (ev->state) {
    df84:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
    df88:	2303      	movs	r3, #3
    df8a:	f842 3f10 	str.w	r3, [r2, #16]!
    df8e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    df92:	f008 fff0 	bl	16f76 <z_log_msg_static_create.constprop.0>
    df96:	46a5      	mov	sp, r4
	z_impl_k_yield();
    df98:	f005 f88e 	bl	130b8 <z_impl_k_yield>
	while (1) {
    df9c:	e7cc      	b.n	df38 <hci_tx_thread+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    df9e:	7b2b      	ldrb	r3, [r5, #12]
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	d1f9      	bne.n	df98 <hci_tx_thread+0x6c>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    dfa4:	4836      	ldr	r0, [pc, #216]	; (e080 <hci_tx_thread+0x154>)
    dfa6:	2200      	movs	r2, #0
    dfa8:	2300      	movs	r3, #0
    dfaa:	f009 f915 	bl	171d8 <net_buf_get>
	BT_ASSERT(buf);
    dfae:	4604      	mov	r4, r0
    dfb0:	2800      	cmp	r0, #0
    dfb2:	d048      	beq.n	e046 <hci_tx_thread+0x11a>
	return z_impl_k_sem_take(sem, timeout);
    dfb4:	f04f 33ff 	mov.w	r3, #4294967295
    dfb8:	4832      	ldr	r0, [pc, #200]	; (e084 <hci_tx_thread+0x158>)
    dfba:	f04f 32ff 	mov.w	r2, #4294967295
    dfbe:	f004 fc7b 	bl	128b8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    dfc2:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    dfc6:	bb5b      	cbnz	r3, e020 <hci_tx_thread+0xf4>
	bt_dev.sent_cmd = net_buf_ref(buf);
    dfc8:	4620      	mov	r0, r4
    dfca:	f009 f936 	bl	1723a <net_buf_ref>
    dfce:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
    dfd2:	4620      	mov	r0, r4
    dfd4:	f7ff ffa2 	bl	df1c <bt_send>
	if (err) {
    dfd8:	2800      	cmp	r0, #0
    dfda:	d0dd      	beq.n	df98 <hci_tx_thread+0x6c>
		LOG_ERR("Unable to send to driver (err %d)", err);
    dfdc:	46e8      	mov	r8, sp
    dfde:	b088      	sub	sp, #32
    dfe0:	466a      	mov	r2, sp
    dfe2:	4b29      	ldr	r3, [pc, #164]	; (e088 <hci_tx_thread+0x15c>)
    dfe4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    dfe8:	2303      	movs	r3, #3
    dfea:	f842 3f10 	str.w	r3, [r2, #16]!
    dfee:	4823      	ldr	r0, [pc, #140]	; (e07c <hci_tx_thread+0x150>)
    dff0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    dff4:	f008 ffbf 	bl	16f76 <z_log_msg_static_create.constprop.0>
    dff8:	46c5      	mov	sp, r8
	z_impl_k_sem_give(sem);
    dffa:	4822      	ldr	r0, [pc, #136]	; (e084 <hci_tx_thread+0x158>)
    dffc:	f004 fc36 	bl	1286c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    e000:	4620      	mov	r0, r4
    e002:	f000 ff0b 	bl	ee1c <net_buf_id>
    e006:	4b21      	ldr	r3, [pc, #132]	; (e08c <hci_tx_thread+0x160>)
    e008:	220c      	movs	r2, #12
    e00a:	fb02 3000 	mla	r0, r2, r0, r3
    e00e:	211f      	movs	r1, #31
    e010:	8840      	ldrh	r0, [r0, #2]
    e012:	4622      	mov	r2, r4
    e014:	f7ff fbcc 	bl	d7b0 <hci_cmd_done>
		net_buf_unref(buf);
    e018:	4620      	mov	r0, r4
    e01a:	f000 ffb9 	bl	ef90 <net_buf_unref>
    e01e:	e7bb      	b.n	df98 <hci_tx_thread+0x6c>
		LOG_ERR("Uncleared pending sent_cmd");
    e020:	4b1b      	ldr	r3, [pc, #108]	; (e090 <hci_tx_thread+0x164>)
    e022:	4816      	ldr	r0, [pc, #88]	; (e07c <hci_tx_thread+0x150>)
    e024:	617b      	str	r3, [r7, #20]
    e026:	f107 0210 	add.w	r2, r7, #16
    e02a:	2302      	movs	r3, #2
    e02c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e030:	613b      	str	r3, [r7, #16]
    e032:	f008 ffa0 	bl	16f76 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    e036:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    e03a:	f000 ffa9 	bl	ef90 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    e03e:	2300      	movs	r3, #0
    e040:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    e044:	e7c0      	b.n	dfc8 <hci_tx_thread+0x9c>
	BT_ASSERT(buf);
    e046:	4a09      	ldr	r2, [pc, #36]	; (e06c <hci_tx_thread+0x140>)
    e048:	4912      	ldr	r1, [pc, #72]	; (e094 <hci_tx_thread+0x168>)
    e04a:	480a      	ldr	r0, [pc, #40]	; (e074 <hci_tx_thread+0x148>)
    e04c:	f640 235a 	movw	r3, #2650	; 0xa5a
    e050:	f008 fbf2 	bl	16838 <assert_print>
    e054:	4040      	eors	r0, r0
    e056:	f380 8811 	msr	BASEPRI, r0
    e05a:	f04f 0003 	mov.w	r0, #3
    e05e:	df02      	svc	2
    e060:	e7a8      	b.n	dfb4 <hci_tx_thread+0x88>
    e062:	bf00      	nop
    e064:	200003e0 	.word	0x200003e0
    e068:	200001a0 	.word	0x200001a0
    e06c:	0001976f 	.word	0x0001976f
    e070:	000198c2 	.word	0x000198c2
    e074:	000197bc 	.word	0x000197bc
    e078:	00019a2d 	.word	0x00019a2d
    e07c:	00018a34 	.word	0x00018a34
    e080:	200002ac 	.word	0x200002ac
    e084:	20000288 	.word	0x20000288
    e088:	00019a0b 	.word	0x00019a0b
    e08c:	20002410 	.word	0x20002410
    e090:	00019a4e 	.word	0x00019a4e
    e094:	00019dcd 	.word	0x00019dcd

0000e098 <hci_event_prio>:
{
    e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e09c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    e09e:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    e0a2:	4630      	mov	r0, r6
    e0a4:	f009 f8f0 	bl	17288 <net_buf_simple_headroom>
	state->len = buf->len;
    e0a8:	8a27      	ldrh	r7, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e0aa:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    e0ac:	4605      	mov	r5, r0
    e0ae:	d80c      	bhi.n	e0ca <hci_event_prio+0x32>
    e0b0:	4a20      	ldr	r2, [pc, #128]	; (e134 <hci_event_prio+0x9c>)
    e0b2:	4921      	ldr	r1, [pc, #132]	; (e138 <hci_event_prio+0xa0>)
    e0b4:	4821      	ldr	r0, [pc, #132]	; (e13c <hci_event_prio+0xa4>)
    e0b6:	f640 636f 	movw	r3, #3695	; 0xe6f
    e0ba:	f008 fbbd 	bl	16838 <assert_print>
    e0be:	4040      	eors	r0, r0
    e0c0:	f380 8811 	msr	BASEPRI, r0
    e0c4:	f04f 0003 	mov.w	r0, #3
    e0c8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    e0ca:	4630      	mov	r0, r6
    e0cc:	2102      	movs	r1, #2
    e0ce:	f009 f8d3 	bl	17278 <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    e0d2:	7803      	ldrb	r3, [r0, #0]
    e0d4:	2b05      	cmp	r3, #5
    e0d6:	4606      	mov	r6, r0
    e0d8:	d021      	beq.n	e11e <hci_event_prio+0x86>
    e0da:	3b0e      	subs	r3, #14
    e0dc:	2b01      	cmp	r3, #1
    e0de:	d921      	bls.n	e124 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    e0e0:	4a14      	ldr	r2, [pc, #80]	; (e134 <hci_event_prio+0x9c>)
    e0e2:	4917      	ldr	r1, [pc, #92]	; (e140 <hci_event_prio+0xa8>)
    e0e4:	4815      	ldr	r0, [pc, #84]	; (e13c <hci_event_prio+0xa4>)
    e0e6:	f640 6373 	movw	r3, #3699	; 0xe73
    e0ea:	f008 fba5 	bl	16838 <assert_print>
    e0ee:	4040      	eors	r0, r0
    e0f0:	f380 8811 	msr	BASEPRI, r0
    e0f4:	f04f 0003 	mov.w	r0, #3
    e0f8:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    e0fa:	f04f 0802 	mov.w	r8, #2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    e0fe:	4a11      	ldr	r2, [pc, #68]	; (e144 <hci_event_prio+0xac>)
    e100:	7830      	ldrb	r0, [r6, #0]
    e102:	2302      	movs	r3, #2
    e104:	4621      	mov	r1, r4
    e106:	f7ff fa7b 	bl	d600 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    e10a:	f018 0f02 	tst.w	r8, #2
    e10e:	d00c      	beq.n	e12a <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
    e110:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    e112:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
    e114:	fa13 f585 	uxtah	r5, r3, r5
    e118:	60e5      	str	r5, [r4, #12]
}
    e11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    e11e:	f04f 0803 	mov.w	r8, #3
    e122:	e7ec      	b.n	e0fe <hci_event_prio+0x66>
	switch (evt) {
    e124:	f04f 0801 	mov.w	r8, #1
    e128:	e7e9      	b.n	e0fe <hci_event_prio+0x66>
		net_buf_unref(buf);
    e12a:	4620      	mov	r0, r4
}
    e12c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    e130:	f000 bf2e 	b.w	ef90 <net_buf_unref>
    e134:	0001976f 	.word	0x0001976f
    e138:	000197a3 	.word	0x000197a3
    e13c:	000197bc 	.word	0x000197bc
    e140:	00019a69 	.word	0x00019a69
    e144:	00018cb4 	.word	0x00018cb4

0000e148 <bt_recv>:
{
    e148:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e14a:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
    e14c:	2b01      	cmp	r3, #1
{
    e14e:	af00      	add	r7, sp, #0
    e150:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    e152:	d127      	bne.n	e1a4 <bt_recv+0x5c>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    e154:	68c3      	ldr	r3, [r0, #12]
    e156:	781b      	ldrb	r3, [r3, #0]
    e158:	2b05      	cmp	r3, #5
    e15a:	d007      	beq.n	e16c <bt_recv+0x24>
    e15c:	3b0e      	subs	r3, #14
    e15e:	2b01      	cmp	r3, #1
    e160:	d806      	bhi.n	e170 <bt_recv+0x28>
			hci_event_prio(buf);
    e162:	f7ff ff99 	bl	e098 <hci_event_prio>
		return 0;
    e166:	2000      	movs	r0, #0
}
    e168:	46bd      	mov	sp, r7
    e16a:	bdb0      	pop	{r4, r5, r7, pc}
			hci_event_prio(buf);
    e16c:	f7ff ff94 	bl	e098 <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    e170:	4817      	ldr	r0, [pc, #92]	; (e1d0 <bt_recv+0x88>)
    e172:	4621      	mov	r1, r4
    e174:	f009 f832 	bl	171dc <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    e178:	4916      	ldr	r1, [pc, #88]	; (e1d4 <bt_recv+0x8c>)
    e17a:	4817      	ldr	r0, [pc, #92]	; (e1d8 <bt_recv+0x90>)
    e17c:	f009 ff8e 	bl	1809c <k_work_submit_to_queue>
	if (err < 0) {
    e180:	2800      	cmp	r0, #0
    e182:	daf0      	bge.n	e166 <bt_recv+0x1e>
		LOG_ERR("Could not submit rx_work: %d", err);
    e184:	466c      	mov	r4, sp
    e186:	b088      	sub	sp, #32
    e188:	466a      	mov	r2, sp
    e18a:	4b14      	ldr	r3, [pc, #80]	; (e1dc <bt_recv+0x94>)
    e18c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    e190:	2303      	movs	r3, #3
    e192:	f842 3f10 	str.w	r3, [r2, #16]!
    e196:	4812      	ldr	r0, [pc, #72]	; (e1e0 <bt_recv+0x98>)
    e198:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e19c:	f008 feeb 	bl	16f76 <z_log_msg_static_create.constprop.0>
    e1a0:	46a5      	mov	sp, r4
    e1a2:	e7e0      	b.n	e166 <bt_recv+0x1e>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    e1a4:	466d      	mov	r5, sp
    e1a6:	b088      	sub	sp, #32
    e1a8:	466a      	mov	r2, sp
    e1aa:	490e      	ldr	r1, [pc, #56]	; (e1e4 <bt_recv+0x9c>)
    e1ac:	480c      	ldr	r0, [pc, #48]	; (e1e0 <bt_recv+0x98>)
	switch (bt_buf_get_type(buf)) {
    e1ae:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    e1b2:	2303      	movs	r3, #3
    e1b4:	f842 3f10 	str.w	r3, [r2, #16]!
    e1b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e1bc:	f008 fedb 	bl	16f76 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
    e1c0:	4620      	mov	r0, r4
    e1c2:	46ad      	mov	sp, r5
    e1c4:	f000 fee4 	bl	ef90 <net_buf_unref>
		return -EINVAL;
    e1c8:	f06f 0015 	mvn.w	r0, #21
    e1cc:	e7cc      	b.n	e168 <bt_recv+0x20>
    e1ce:	bf00      	nop
    e1d0:	200002a4 	.word	0x200002a4
    e1d4:	200003f4 	.word	0x200003f4
    e1d8:	200018c8 	.word	0x200018c8
    e1dc:	0001981b 	.word	0x0001981b
    e1e0:	00018a34 	.word	0x00018a34
    e1e4:	00019a82 	.word	0x00019a82

0000e1e8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    e1e8:	4a08      	ldr	r2, [pc, #32]	; (e20c <bt_hci_driver_register+0x24>)
{
    e1ea:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    e1ec:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    e1f0:	b930      	cbnz	r0, e200 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    e1f2:	68d9      	ldr	r1, [r3, #12]
    e1f4:	b139      	cbz	r1, e206 <bt_hci_driver_register+0x1e>
    e1f6:	6959      	ldr	r1, [r3, #20]
    e1f8:	b129      	cbz	r1, e206 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    e1fa:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    e1fe:	4770      	bx	lr
		return -EALREADY;
    e200:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e204:	4770      	bx	lr
		return -EINVAL;
    e206:	f06f 0015 	mvn.w	r0, #21
}
    e20a:	4770      	bx	lr
    e20c:	200001a0 	.word	0x200001a0

0000e210 <bt_finalize_init>:
{
    e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e214:	4b4a      	ldr	r3, [pc, #296]	; (e340 <bt_finalize_init+0x130>)
    e216:	b083      	sub	sp, #12
    e218:	af00      	add	r7, sp, #0
    e21a:	f3bf 8f5b 	dmb	ish
    e21e:	e853 2f00 	ldrex	r2, [r3]
    e222:	f042 0204 	orr.w	r2, r2, #4
    e226:	e843 2100 	strex	r1, r2, [r3]
    e22a:	2900      	cmp	r1, #0
    e22c:	d1f7      	bne.n	e21e <bt_finalize_init+0xe>
    e22e:	f3bf 8f5b 	dmb	ish
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    e232:	f1a3 04d4 	sub.w	r4, r3, #212	; 0xd4
    e236:	f813 2ccd 	ldrb.w	r2, [r3, #-205]
    e23a:	4d42      	ldr	r5, [pc, #264]	; (e344 <bt_finalize_init+0x134>)
    e23c:	4b42      	ldr	r3, [pc, #264]	; (e348 <bt_finalize_init+0x138>)
    e23e:	4620      	mov	r0, r4
    e240:	2a01      	cmp	r2, #1
    e242:	bf88      	it	hi
    e244:	461d      	movhi	r5, r3
    e246:	466e      	mov	r6, sp
    e248:	f7ff f908 	bl	d45c <bt_addr_le_str>
    e24c:	b08a      	sub	sp, #40	; 0x28
    e24e:	466b      	mov	r3, sp
    e250:	493e      	ldr	r1, [pc, #248]	; (e34c <bt_finalize_init+0x13c>)
    e252:	61d8      	str	r0, [r3, #28]
    e254:	e9c3 1505 	strd	r1, r5, [r3, #20]
    e258:	493d      	ldr	r1, [pc, #244]	; (e350 <bt_finalize_init+0x140>)
    e25a:	6079      	str	r1, [r7, #4]
    e25c:	f103 0210 	add.w	r2, r3, #16
    e260:	1d38      	adds	r0, r7, #4
    e262:	f103 011f 	add.w	r1, r3, #31
    e266:	f103 0523 	add.w	r5, r3, #35	; 0x23
    e26a:	f810 cb01 	ldrb.w	ip, [r0], #1
    e26e:	f801 cf01 	strb.w	ip, [r1, #1]!
    e272:	428d      	cmp	r5, r1
    e274:	d1f9      	bne.n	e26a <bt_finalize_init+0x5a>
    e276:	4937      	ldr	r1, [pc, #220]	; (e354 <bt_finalize_init+0x144>)
    e278:	6119      	str	r1, [r3, #16]
    e27a:	4837      	ldr	r0, [pc, #220]	; (e358 <bt_finalize_init+0x148>)
    e27c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; e35c <bt_finalize_init+0x14c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    e280:	f8df 80dc 	ldr.w	r8, [pc, #220]	; e360 <bt_finalize_init+0x150>
    e284:	f8df 90d0 	ldr.w	r9, [pc, #208]	; e358 <bt_finalize_init+0x148>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    e288:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
    e28c:	f008 fe73 	bl	16f76 <z_log_msg_static_create.constprop.0>
    e290:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    e292:	4e34      	ldr	r6, [pc, #208]	; (e364 <bt_finalize_init+0x154>)
	for (i = 1; i < bt_dev.id_count; i++) {
    e294:	2501      	movs	r5, #1
    e296:	79e3      	ldrb	r3, [r4, #7]
    e298:	429d      	cmp	r5, r3
    e29a:	f10b 0b07 	add.w	fp, fp, #7
    e29e:	db39      	blt.n	e314 <bt_finalize_init+0x104>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    e2a0:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
    e2a4:	4628      	mov	r0, r5
    e2a6:	f7ff f969 	bl	d57c <ver_str>
    e2aa:	466e      	mov	r6, sp
    e2ac:	b08c      	sub	sp, #48	; 0x30
    e2ae:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
    e2b2:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    e2b6:	466a      	mov	r2, sp
    e2b8:	f8df c0ac 	ldr.w	ip, [pc, #172]	; e368 <bt_finalize_init+0x158>
    e2bc:	6253      	str	r3, [r2, #36]	; 0x24
    e2be:	e9c2 5107 	strd	r5, r1, [r2, #28]
    e2c2:	4b2a      	ldr	r3, [pc, #168]	; (e36c <bt_finalize_init+0x15c>)
    e2c4:	f44f 7500 	mov.w	r5, #512	; 0x200
    e2c8:	e9c2 c005 	strd	ip, r0, [r2, #20]
    e2cc:	8515      	strh	r5, [r2, #40]	; 0x28
    e2ce:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
    e2d2:	f842 3f10 	str.w	r3, [r2, #16]!
    e2d6:	4820      	ldr	r0, [pc, #128]	; (e358 <bt_finalize_init+0x148>)
    e2d8:	f008 fe4d 	bl	16f76 <z_log_msg_static_create.constprop.0>
    e2dc:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
    e2de:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
    e2e2:	4630      	mov	r0, r6
    e2e4:	f7ff f94a 	bl	d57c <ver_str>
    e2e8:	b08a      	sub	sp, #40	; 0x28
    e2ea:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    e2ee:	466a      	mov	r2, sp
    e2f0:	491f      	ldr	r1, [pc, #124]	; (e370 <bt_finalize_init+0x160>)
    e2f2:	8495      	strh	r5, [r2, #36]	; 0x24
    e2f4:	e9c2 6307 	strd	r6, r3, [r2, #28]
    e2f8:	4b1e      	ldr	r3, [pc, #120]	; (e374 <bt_finalize_init+0x164>)
    e2fa:	e9c2 1005 	strd	r1, r0, [r2, #20]
    e2fe:	f842 3f10 	str.w	r3, [r2, #16]!
    e302:	4815      	ldr	r0, [pc, #84]	; (e358 <bt_finalize_init+0x148>)
    e304:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
    e308:	f008 fe35 	bl	16f76 <z_log_msg_static_create.constprop.0>
}
    e30c:	370c      	adds	r7, #12
    e30e:	46bd      	mov	sp, r7
    e310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
    e314:	4658      	mov	r0, fp
    e316:	f7ff f8a1 	bl	d45c <bt_addr_le_str>
    e31a:	46ea      	mov	sl, sp
    e31c:	b08a      	sub	sp, #40	; 0x28
    e31e:	466a      	mov	r2, sp
    e320:	f240 3301 	movw	r3, #769	; 0x301
    e324:	e9c2 6505 	strd	r6, r5, [r2, #20]
    e328:	61d0      	str	r0, [r2, #28]
    e32a:	8413      	strh	r3, [r2, #32]
    e32c:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
    e330:	f842 8f10 	str.w	r8, [r2, #16]!
    e334:	4648      	mov	r0, r9
    e336:	f008 fe1e 	bl	16f76 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
    e33a:	3501      	adds	r5, #1
    e33c:	46d5      	mov	sp, sl
    e33e:	e7aa      	b.n	e296 <bt_finalize_init+0x86>
    e340:	20000274 	.word	0x20000274
    e344:	0001915e 	.word	0x0001915e
    e348:	00019a96 	.word	0x00019a96
    e34c:	00019a9a 	.word	0x00019a9a
    e350:	03010200 	.word	0x03010200
    e354:	02000004 	.word	0x02000004
    e358:	00018a34 	.word	0x00018a34
    e35c:	200001a0 	.word	0x200001a0
    e360:	01000004 	.word	0x01000004
    e364:	00019aa9 	.word	0x00019aa9
    e368:	00019aba 	.word	0x00019aba
    e36c:	01000006 	.word	0x01000006
    e370:	00019af8 	.word	0x00019af8
    e374:	01000005 	.word	0x01000005

0000e378 <init_work>:
{
    e378:	b510      	push	{r4, lr}
	err = hci_init();
    e37a:	f7ff fbbd 	bl	daf8 <hci_init>
	if (err) {
    e37e:	4604      	mov	r4, r0
    e380:	b908      	cbnz	r0, e386 <init_work+0xe>
	bt_finalize_init();
    e382:	f7ff ff45 	bl	e210 <bt_finalize_init>
	if (ready_cb) {
    e386:	4b04      	ldr	r3, [pc, #16]	; (e398 <init_work+0x20>)
    e388:	681b      	ldr	r3, [r3, #0]
    e38a:	b11b      	cbz	r3, e394 <init_work+0x1c>
		ready_cb(err);
    e38c:	4620      	mov	r0, r4
}
    e38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    e392:	4718      	bx	r3
}
    e394:	bd10      	pop	{r4, pc}
    e396:	bf00      	nop
    e398:	20002428 	.word	0x20002428

0000e39c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
    e39e:	4d47      	ldr	r5, [pc, #284]	; (e4bc <bt_enable+0x120>)
{
    e3a0:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
    e3a2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    e3a6:	af08      	add	r7, sp, #32
    e3a8:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    e3aa:	b983      	cbnz	r3, e3ce <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
    e3ac:	4b44      	ldr	r3, [pc, #272]	; (e4c0 <bt_enable+0x124>)
    e3ae:	617b      	str	r3, [r7, #20]
    e3b0:	4844      	ldr	r0, [pc, #272]	; (e4c4 <bt_enable+0x128>)
    e3b2:	2302      	movs	r3, #2
    e3b4:	f107 0210 	add.w	r2, r7, #16
    e3b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    e3bc:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
    e3c0:	613b      	str	r3, [r7, #16]
    e3c2:	f008 fdd8 	bl	16f76 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    e3c6:	4620      	mov	r0, r4
    e3c8:	371c      	adds	r7, #28
    e3ca:	46bd      	mov	sp, r7
    e3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e3ce:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    e3d2:	f3bf 8f5b 	dmb	ish
    e3d6:	e853 2f00 	ldrex	r2, [r3]
    e3da:	f022 0202 	bic.w	r2, r2, #2
    e3de:	e843 2100 	strex	r1, r2, [r3]
    e3e2:	2900      	cmp	r1, #0
    e3e4:	d1f7      	bne.n	e3d6 <bt_enable+0x3a>
    e3e6:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e3ea:	f3bf 8f5b 	dmb	ish
    e3ee:	e853 4f00 	ldrex	r4, [r3]
    e3f2:	f044 0201 	orr.w	r2, r4, #1
    e3f6:	e843 2100 	strex	r1, r2, [r3]
    e3fa:	2900      	cmp	r1, #0
    e3fc:	d1f7      	bne.n	e3ee <bt_enable+0x52>
    e3fe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e402:	f014 0401 	ands.w	r4, r4, #1
    e406:	d155      	bne.n	e4b4 <bt_enable+0x118>
	ready_cb = cb;
    e408:	4b2f      	ldr	r3, [pc, #188]	; (e4c8 <bt_enable+0x12c>)
    e40a:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    e40c:	2201      	movs	r2, #1
    e40e:	4611      	mov	r1, r2
    e410:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
    e414:	f009 fda2 	bl	17f5c <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    e418:	f505 7086 	add.w	r0, r5, #268	; 0x10c
    e41c:	f009 fd7d 	bl	17f1a <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e420:	2200      	movs	r2, #0
    e422:	2300      	movs	r3, #0
    e424:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e428:	f06f 0308 	mvn.w	r3, #8
    e42c:	e9cd 4302 	strd	r4, r3, [sp, #8]
    e430:	e9cd 4400 	strd	r4, r4, [sp]
    e434:	4b25      	ldr	r3, [pc, #148]	; (e4cc <bt_enable+0x130>)
    e436:	4926      	ldr	r1, [pc, #152]	; (e4d0 <bt_enable+0x134>)
    e438:	9404      	str	r4, [sp, #16]
    e43a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    e43e:	4825      	ldr	r0, [pc, #148]	; (e4d4 <bt_enable+0x138>)
    e440:	f004 f886 	bl	12550 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    e444:	4924      	ldr	r1, [pc, #144]	; (e4d8 <bt_enable+0x13c>)
    e446:	4823      	ldr	r0, [pc, #140]	; (e4d4 <bt_enable+0x138>)
    e448:	f009 fcd8 	bl	17dfc <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
    e44c:	4823      	ldr	r0, [pc, #140]	; (e4dc <bt_enable+0x140>)
    e44e:	f009 fe36 	bl	180be <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    e452:	4923      	ldr	r1, [pc, #140]	; (e4e0 <bt_enable+0x144>)
    e454:	4821      	ldr	r0, [pc, #132]	; (e4dc <bt_enable+0x140>)
    e456:	9400      	str	r4, [sp, #0]
    e458:	f06f 0307 	mvn.w	r3, #7
    e45c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e460:	f004 fb4e 	bl	12b00 <k_work_queue_start>
    e464:	491f      	ldr	r1, [pc, #124]	; (e4e4 <bt_enable+0x148>)
    e466:	481d      	ldr	r0, [pc, #116]	; (e4dc <bt_enable+0x140>)
    e468:	f009 fcc8 	bl	17dfc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    e46c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    e470:	68db      	ldr	r3, [r3, #12]
    e472:	4798      	blx	r3
	if (err) {
    e474:	4604      	mov	r4, r0
    e476:	b178      	cbz	r0, e498 <bt_enable+0xfc>
		LOG_ERR("HCI driver open failed (%d)", err);
    e478:	466d      	mov	r5, sp
    e47a:	462a      	mov	r2, r5
    e47c:	b088      	sub	sp, #32
    e47e:	4b1a      	ldr	r3, [pc, #104]	; (e4e8 <bt_enable+0x14c>)
    e480:	e9c5 3005 	strd	r3, r0, [r5, #20]
    e484:	2303      	movs	r3, #3
    e486:	f842 3f10 	str.w	r3, [r2, #16]!
    e48a:	480e      	ldr	r0, [pc, #56]	; (e4c4 <bt_enable+0x128>)
    e48c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e490:	f008 fd71 	bl	16f76 <z_log_msg_static_create.constprop.0>
    e494:	46ad      	mov	sp, r5
		return err;
    e496:	e796      	b.n	e3c6 <bt_enable+0x2a>
	if (!cb) {
    e498:	b93e      	cbnz	r6, e4aa <bt_enable+0x10e>
	err = hci_init();
    e49a:	f7ff fb2d 	bl	daf8 <hci_init>
	if (err) {
    e49e:	4604      	mov	r4, r0
    e4a0:	2800      	cmp	r0, #0
    e4a2:	d190      	bne.n	e3c6 <bt_enable+0x2a>
	bt_finalize_init();
    e4a4:	f7ff feb4 	bl	e210 <bt_finalize_init>
	return 0;
    e4a8:	e78d      	b.n	e3c6 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
    e4aa:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    e4ae:	f004 fb21 	bl	12af4 <k_work_submit>
	return 0;
    e4b2:	e788      	b.n	e3c6 <bt_enable+0x2a>
		return -EALREADY;
    e4b4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    e4b8:	e785      	b.n	e3c6 <bt_enable+0x2a>
    e4ba:	bf00      	nop
    e4bc:	200001a0 	.word	0x200001a0
    e4c0:	00019b1f 	.word	0x00019b1f
    e4c4:	00018a34 	.word	0x00018a34
    e4c8:	20002428 	.word	0x20002428
    e4cc:	0000df2d 	.word	0x0000df2d
    e4d0:	20003e40 	.word	0x20003e40
    e4d4:	20001848 	.word	0x20001848
    e4d8:	00019b38 	.word	0x00019b38
    e4dc:	200018c8 	.word	0x200018c8
    e4e0:	20004480 	.word	0x20004480
    e4e4:	00019b3e 	.word	0x00019b3e
    e4e8:	00019b44 	.word	0x00019b44

0000e4ec <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e4ec:	4b04      	ldr	r3, [pc, #16]	; (e500 <bt_is_ready+0x14>)
    e4ee:	f3bf 8f5b 	dmb	ish
    e4f2:	6818      	ldr	r0, [r3, #0]
    e4f4:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    e4f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e4fc:	4770      	bx	lr
    e4fe:	bf00      	nop
    e500:	20000274 	.word	0x20000274

0000e504 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    e504:	4800      	ldr	r0, [pc, #0]	; (e508 <bt_get_name+0x4>)
    e506:	4770      	bx	lr
    e508:	0001900e 	.word	0x0001900e

0000e50c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e50e:	4f0a      	ldr	r7, [pc, #40]	; (e538 <id_find+0x2c>)
{
    e510:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    e512:	2500      	movs	r5, #0
    e514:	79fb      	ldrb	r3, [r7, #7]
    e516:	b2ec      	uxtb	r4, r5
    e518:	42a3      	cmp	r3, r4
    e51a:	d802      	bhi.n	e522 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e51c:	f06f 0001 	mvn.w	r0, #1
    e520:	e009      	b.n	e536 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    e522:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e526:	4439      	add	r1, r7
    e528:	4630      	mov	r0, r6
    e52a:	f008 fd27 	bl	16f7c <bt_addr_le_eq>
    e52e:	3501      	adds	r5, #1
    e530:	2800      	cmp	r0, #0
    e532:	d0ef      	beq.n	e514 <id_find+0x8>
    e534:	4620      	mov	r0, r4
}
    e536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e538:	200001a0 	.word	0x200001a0

0000e53c <set_random_address>:
{
    e53c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    e53e:	4913      	ldr	r1, [pc, #76]	; (e58c <set_random_address+0x50>)
    e540:	2206      	movs	r2, #6
    e542:	4605      	mov	r5, r0
    e544:	f008 fcb8 	bl	16eb8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e548:	b1d8      	cbz	r0, e582 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e54a:	2106      	movs	r1, #6
    e54c:	f242 0005 	movw	r0, #8197	; 0x2005
    e550:	f7ff fa18 	bl	d984 <bt_hci_cmd_create>
	if (!buf) {
    e554:	4604      	mov	r4, r0
    e556:	b1b0      	cbz	r0, e586 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e558:	2206      	movs	r2, #6
    e55a:	4629      	mov	r1, r5
    e55c:	300c      	adds	r0, #12
    e55e:	f008 fe7a 	bl	17256 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e562:	2200      	movs	r2, #0
    e564:	4621      	mov	r1, r4
    e566:	f242 0005 	movw	r0, #8197	; 0x2005
    e56a:	f7ff fa45 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    e56e:	b948      	cbnz	r0, e584 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
    e570:	2206      	movs	r2, #6
    e572:	4806      	ldr	r0, [pc, #24]	; (e58c <set_random_address+0x50>)
    e574:	4629      	mov	r1, r5
    e576:	f008 fcc6 	bl	16f06 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e57a:	4b05      	ldr	r3, [pc, #20]	; (e590 <set_random_address+0x54>)
    e57c:	2201      	movs	r2, #1
    e57e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    e582:	2000      	movs	r0, #0
}
    e584:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    e586:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e58a:	e7fb      	b.n	e584 <set_random_address+0x48>
    e58c:	20000209 	.word	0x20000209
    e590:	200001a0 	.word	0x200001a0

0000e594 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e594:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e596:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e598:	460d      	mov	r5, r1
    e59a:	b179      	cbz	r1, e5bc <id_create.constprop.0+0x28>
    e59c:	4914      	ldr	r1, [pc, #80]	; (e5f0 <id_create.constprop.0+0x5c>)
    e59e:	4628      	mov	r0, r5
    e5a0:	f008 fcec 	bl	16f7c <bt_addr_le_eq>
    e5a4:	b950      	cbnz	r0, e5bc <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
    e5a6:	4813      	ldr	r0, [pc, #76]	; (e5f4 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e5a8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e5ac:	2207      	movs	r2, #7
    e5ae:	4629      	mov	r1, r5
    e5b0:	4420      	add	r0, r4
    e5b2:	f008 fca8 	bl	16f06 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    e5b6:	2000      	movs	r0, #0
}
    e5b8:	b003      	add	sp, #12
    e5ba:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    e5bc:	4668      	mov	r0, sp
    e5be:	f008 fccb 	bl	16f58 <bt_addr_le_create_static>
			if (err) {
    e5c2:	2800      	cmp	r0, #0
    e5c4:	d1f8      	bne.n	e5b8 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    e5c6:	4668      	mov	r0, sp
    e5c8:	f7ff ffa0 	bl	e50c <id_find>
    e5cc:	2800      	cmp	r0, #0
    e5ce:	daf5      	bge.n	e5bc <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e5d0:	4b08      	ldr	r3, [pc, #32]	; (e5f4 <id_create.constprop.0+0x60>)
    e5d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e5d6:	441c      	add	r4, r3
    e5d8:	2207      	movs	r2, #7
    e5da:	4669      	mov	r1, sp
    e5dc:	4620      	mov	r0, r4
    e5de:	f008 fc92 	bl	16f06 <memcpy>
		if (addr) {
    e5e2:	2d00      	cmp	r5, #0
    e5e4:	d0e7      	beq.n	e5b6 <id_create.constprop.0+0x22>
    e5e6:	2207      	movs	r2, #7
    e5e8:	4621      	mov	r1, r4
    e5ea:	4628      	mov	r0, r5
    e5ec:	e7e1      	b.n	e5b2 <id_create.constprop.0+0x1e>
    e5ee:	bf00      	nop
    e5f0:	000196b2 	.word	0x000196b2
    e5f4:	200001a0 	.word	0x200001a0

0000e5f8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    e5f8:	b570      	push	{r4, r5, r6, lr}
    e5fa:	460d      	mov	r5, r1
    e5fc:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e5fe:	4604      	mov	r4, r0
    e600:	b920      	cbnz	r0, e60c <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    e602:	b31d      	cbz	r5, e64c <bt_id_create+0x54>
			return -EINVAL;
    e604:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    e608:	b006      	add	sp, #24
    e60a:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    e60c:	4921      	ldr	r1, [pc, #132]	; (e694 <bt_id_create+0x9c>)
    e60e:	f008 fcb5 	bl	16f7c <bt_addr_le_eq>
    e612:	2800      	cmp	r0, #0
    e614:	d1f5      	bne.n	e602 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    e616:	7823      	ldrb	r3, [r4, #0]
    e618:	2b01      	cmp	r3, #1
    e61a:	d104      	bne.n	e626 <bt_id_create+0x2e>
    e61c:	79a3      	ldrb	r3, [r4, #6]
    e61e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e622:	2bc0      	cmp	r3, #192	; 0xc0
    e624:	d00a      	beq.n	e63c <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
    e626:	4b1c      	ldr	r3, [pc, #112]	; (e698 <bt_id_create+0xa0>)
    e628:	9305      	str	r3, [sp, #20]
    e62a:	481c      	ldr	r0, [pc, #112]	; (e69c <bt_id_create+0xa4>)
    e62c:	2302      	movs	r3, #2
    e62e:	aa04      	add	r2, sp, #16
    e630:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e634:	9304      	str	r3, [sp, #16]
    e636:	f008 fca9 	bl	16f8c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
    e63a:	e7e3      	b.n	e604 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    e63c:	4620      	mov	r0, r4
    e63e:	f7ff ff65 	bl	e50c <id_find>
    e642:	2800      	cmp	r0, #0
    e644:	dbdd      	blt.n	e602 <bt_id_create+0xa>
			return -EALREADY;
    e646:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e64a:	e7dd      	b.n	e608 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    e64c:	4d14      	ldr	r5, [pc, #80]	; (e6a0 <bt_id_create+0xa8>)
    e64e:	79eb      	ldrb	r3, [r5, #7]
    e650:	2b01      	cmp	r3, #1
    e652:	d01c      	beq.n	e68e <bt_id_create+0x96>
    e654:	f3bf 8f5b 	dmb	ish
    e658:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    e65c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    e660:	07db      	lsls	r3, r3, #31
    e662:	d50b      	bpl.n	e67c <bt_id_create+0x84>
	new_id = bt_dev.id_count;
    e664:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    e666:	4621      	mov	r1, r4
    e668:	4630      	mov	r0, r6
    e66a:	f7ff ff93 	bl	e594 <id_create.constprop.0>
	if (err) {
    e66e:	2800      	cmp	r0, #0
    e670:	d1ca      	bne.n	e608 <bt_id_create+0x10>
		bt_dev.id_count++;
    e672:	79eb      	ldrb	r3, [r5, #7]
    e674:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    e676:	4630      	mov	r0, r6
		bt_dev.id_count++;
    e678:	71eb      	strb	r3, [r5, #7]
	return new_id;
    e67a:	e7c5      	b.n	e608 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    e67c:	2c00      	cmp	r4, #0
    e67e:	d0c1      	beq.n	e604 <bt_id_create+0xc>
    e680:	4904      	ldr	r1, [pc, #16]	; (e694 <bt_id_create+0x9c>)
    e682:	4620      	mov	r0, r4
    e684:	f008 fc7a 	bl	16f7c <bt_addr_le_eq>
    e688:	2800      	cmp	r0, #0
    e68a:	d0eb      	beq.n	e664 <bt_id_create+0x6c>
    e68c:	e7ba      	b.n	e604 <bt_id_create+0xc>
		return -ENOMEM;
    e68e:	f06f 000b 	mvn.w	r0, #11
    e692:	e7b9      	b.n	e608 <bt_id_create+0x10>
    e694:	000196b2 	.word	0x000196b2
    e698:	00019c53 	.word	0x00019c53
    e69c:	00018a3c 	.word	0x00018a3c
    e6a0:	200001a0 	.word	0x200001a0

0000e6a4 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    e6a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    e6a6:	4604      	mov	r4, r0
{
    e6a8:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
    e6aa:	b960      	cbnz	r0, e6c6 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
    e6ac:	4b1a      	ldr	r3, [pc, #104]	; (e718 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
    e6ae:	9307      	str	r3, [sp, #28]
    e6b0:	481a      	ldr	r0, [pc, #104]	; (e71c <bt_id_read_public_addr+0x78>)
    e6b2:	2302      	movs	r3, #2
    e6b4:	aa06      	add	r2, sp, #24
    e6b6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e6ba:	9306      	str	r3, [sp, #24]
    e6bc:	f008 fc66 	bl	16f8c <z_log_msg_static_create.constprop.0>
		return 0U;
    e6c0:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    e6c2:	b008      	add	sp, #32
    e6c4:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    e6c6:	aa01      	add	r2, sp, #4
    e6c8:	2100      	movs	r1, #0
    e6ca:	f241 0009 	movw	r0, #4105	; 0x1009
    e6ce:	f7ff f993 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    e6d2:	4606      	mov	r6, r0
    e6d4:	b108      	cbz	r0, e6da <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
    e6d6:	4b12      	ldr	r3, [pc, #72]	; (e720 <bt_id_read_public_addr+0x7c>)
    e6d8:	e7e9      	b.n	e6ae <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
    e6da:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    e6dc:	4911      	ldr	r1, [pc, #68]	; (e724 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e6de:	68dd      	ldr	r5, [r3, #12]
    e6e0:	3501      	adds	r5, #1
    e6e2:	2206      	movs	r2, #6
    e6e4:	4628      	mov	r0, r5
    e6e6:	f008 fbe7 	bl	16eb8 <memcmp>
    e6ea:	b918      	cbnz	r0, e6f4 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    e6ec:	9801      	ldr	r0, [sp, #4]
    e6ee:	f000 fc4f 	bl	ef90 <net_buf_unref>
		return 0U;
    e6f2:	e7e5      	b.n	e6c0 <bt_id_read_public_addr+0x1c>
    e6f4:	490c      	ldr	r1, [pc, #48]	; (e728 <bt_id_read_public_addr+0x84>)
    e6f6:	2206      	movs	r2, #6
    e6f8:	4628      	mov	r0, r5
    e6fa:	f008 fbdd 	bl	16eb8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    e6fe:	2800      	cmp	r0, #0
    e700:	d0f4      	beq.n	e6ec <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    e702:	2206      	movs	r2, #6
    e704:	4629      	mov	r1, r5
    e706:	1c60      	adds	r0, r4, #1
    e708:	f008 fbfd 	bl	16f06 <memcpy>
	net_buf_unref(rsp);
    e70c:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    e70e:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    e710:	f000 fc3e 	bl	ef90 <net_buf_unref>
	return 1U;
    e714:	2001      	movs	r0, #1
    e716:	e7d4      	b.n	e6c2 <bt_id_read_public_addr+0x1e>
    e718:	00019c81 	.word	0x00019c81
    e71c:	00018a3c 	.word	0x00018a3c
    e720:	00019c9a 	.word	0x00019c9a
    e724:	000196bf 	.word	0x000196bf
    e728:	000196b9 	.word	0x000196b9

0000e72c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    e72c:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    e72e:	4668      	mov	r0, sp
    e730:	f7ff ffb8 	bl	e6a4 <bt_id_read_public_addr>
    e734:	4b04      	ldr	r3, [pc, #16]	; (e748 <bt_setup_public_id_addr+0x1c>)
    e736:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    e738:	b118      	cbz	r0, e742 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    e73a:	4669      	mov	r1, sp
    e73c:	2000      	movs	r0, #0
    e73e:	f7ff ff29 	bl	e594 <id_create.constprop.0>
}
    e742:	b003      	add	sp, #12
    e744:	f85d fb04 	ldr.w	pc, [sp], #4
    e748:	200001a0 	.word	0x200001a0

0000e74c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e750:	4b22      	ldr	r3, [pc, #136]	; (e7dc <bt_read_static_addr+0x90>)
    e752:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    e756:	07db      	lsls	r3, r3, #31
{
    e758:	b088      	sub	sp, #32
    e75a:	4607      	mov	r7, r0
    e75c:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    e75e:	d40e      	bmi.n	e77e <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
    e760:	4b1f      	ldr	r3, [pc, #124]	; (e7e0 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
    e762:	9307      	str	r3, [sp, #28]
    e764:	481f      	ldr	r0, [pc, #124]	; (e7e4 <bt_read_static_addr+0x98>)
    e766:	2302      	movs	r3, #2
    e768:	aa06      	add	r2, sp, #24
    e76a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
    e76e:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
    e770:	9306      	str	r3, [sp, #24]
    e772:	f008 fc0b 	bl	16f8c <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    e776:	4628      	mov	r0, r5
    e778:	b008      	add	sp, #32
    e77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    e77e:	aa01      	add	r2, sp, #4
    e780:	2100      	movs	r1, #0
    e782:	f64f 4009 	movw	r0, #64521	; 0xfc09
    e786:	f7ff f937 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    e78a:	4604      	mov	r4, r0
    e78c:	b108      	cbz	r0, e792 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
    e78e:	4b16      	ldr	r3, [pc, #88]	; (e7e8 <bt_read_static_addr+0x9c>)
    e790:	e7e7      	b.n	e762 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
    e792:	9b01      	ldr	r3, [sp, #4]
    e794:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    e796:	7875      	ldrb	r5, [r6, #1]
    e798:	4545      	cmp	r5, r8
    e79a:	bf28      	it	cs
    e79c:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
    e79e:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e7a0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    e7a4:	42a5      	cmp	r5, r4
    e7a6:	dc0f      	bgt.n	e7c8 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
    e7a8:	9801      	ldr	r0, [sp, #4]
    e7aa:	f000 fbf1 	bl	ef90 <net_buf_unref>
	if (!cnt) {
    e7ae:	2d00      	cmp	r5, #0
    e7b0:	d1e1      	bne.n	e776 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
    e7b2:	4b0e      	ldr	r3, [pc, #56]	; (e7ec <bt_read_static_addr+0xa0>)
    e7b4:	9307      	str	r3, [sp, #28]
    e7b6:	480b      	ldr	r0, [pc, #44]	; (e7e4 <bt_read_static_addr+0x98>)
    e7b8:	2302      	movs	r3, #2
    e7ba:	aa06      	add	r2, sp, #24
    e7bc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    e7c0:	9306      	str	r3, [sp, #24]
    e7c2:	f008 fbe3 	bl	16f8c <z_log_msg_static_create.constprop.0>
    e7c6:	e7d6      	b.n	e776 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    e7c8:	4631      	mov	r1, r6
    e7ca:	fb08 7004 	mla	r0, r8, r4, r7
    e7ce:	2216      	movs	r2, #22
    e7d0:	f008 fb99 	bl	16f06 <memcpy>
	for (i = 0; i < cnt; i++) {
    e7d4:	3401      	adds	r4, #1
    e7d6:	3616      	adds	r6, #22
    e7d8:	e7e4      	b.n	e7a4 <bt_read_static_addr+0x58>
    e7da:	bf00      	nop
    e7dc:	200001a0 	.word	0x200001a0
    e7e0:	00019cb8 	.word	0x00019cb8
    e7e4:	00018a3c 	.word	0x00018a3c
    e7e8:	00019ce4 	.word	0x00019ce4
    e7ec:	00019d04 	.word	0x00019d04

0000e7f0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    e7f2:	4e15      	ldr	r6, [pc, #84]	; (e848 <bt_setup_random_id_addr+0x58>)
    e7f4:	79f4      	ldrb	r4, [r6, #7]
{
    e7f6:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    e7f8:	b92c      	cbnz	r4, e806 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    e7fa:	2101      	movs	r1, #1
    e7fc:	a802      	add	r0, sp, #8
    e7fe:	f7ff ffa5 	bl	e74c <bt_read_static_addr>
    e802:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    e804:	b9c8      	cbnz	r0, e83a <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    e806:	2100      	movs	r1, #0
    e808:	4608      	mov	r0, r1
}
    e80a:	b009      	add	sp, #36	; 0x24
    e80c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    e810:	f7ff bef2 	b.w	e5f8 <bt_id_create>
    e814:	ab02      	add	r3, sp, #8
    e816:	fb07 3105 	mla	r1, r7, r5, r3
    e81a:	2206      	movs	r2, #6
    e81c:	f10d 0001 	add.w	r0, sp, #1
    e820:	f008 fb71 	bl	16f06 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    e824:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    e826:	4669      	mov	r1, sp
    e828:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    e82a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    e82e:	f7ff feb1 	bl	e594 <id_create.constprop.0>
				if (err) {
    e832:	3401      	adds	r4, #1
    e834:	b110      	cbz	r0, e83c <bt_setup_random_id_addr+0x4c>
}
    e836:	b009      	add	sp, #36	; 0x24
    e838:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    e83a:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    e83c:	79f3      	ldrb	r3, [r6, #7]
    e83e:	b2e5      	uxtb	r5, r4
    e840:	42ab      	cmp	r3, r5
    e842:	d8e7      	bhi.n	e814 <bt_setup_random_id_addr+0x24>
			return 0;
    e844:	2000      	movs	r0, #0
    e846:	e7f6      	b.n	e836 <bt_setup_random_id_addr+0x46>
    e848:	200001a0 	.word	0x200001a0

0000e84c <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e850:	4690      	mov	r8, r2
    e852:	460e      	mov	r6, r1
    e854:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
    e856:	4602      	mov	r2, r0
    e858:	2800      	cmp	r0, #0
    e85a:	d04b      	beq.n	e8f4 <bt_id_set_adv_own_addr+0xa8>
    e85c:	2b00      	cmp	r3, #0
    e85e:	d049      	beq.n	e8f4 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e860:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
    e862:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e864:	d531      	bpl.n	e8ca <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e866:	4f25      	ldr	r7, [pc, #148]	; (e8fc <bt_id_set_adv_own_addr+0xb0>)
    e868:	f1b8 0f00 	cmp.w	r8, #0
    e86c:	d013      	beq.n	e896 <bt_id_set_adv_own_addr+0x4a>
    e86e:	0688      	lsls	r0, r1, #26
    e870:	d40a      	bmi.n	e888 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e872:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e876:	5cfb      	ldrb	r3, [r7, r3]
    e878:	2b01      	cmp	r3, #1
    e87a:	d015      	beq.n	e8a8 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    e87c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e87e:	06b2      	lsls	r2, r6, #26
    e880:	d50f      	bpl.n	e8a2 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e882:	f043 0302 	orr.w	r3, r3, #2
    e886:	e00b      	b.n	e8a0 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e888:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
    e88c:	0659      	lsls	r1, r3, #25
    e88e:	d4f0      	bmi.n	e872 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
    e890:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e894:	e006      	b.n	e8a4 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e896:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    e89a:	5cfb      	ldrb	r3, [r7, r3]
    e89c:	2b01      	cmp	r3, #1
    e89e:	d003      	beq.n	e8a8 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
    e8a0:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    e8a2:	2000      	movs	r0, #0
}
    e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e8a8:	2107      	movs	r1, #7
    e8aa:	fb01 7104 	mla	r1, r1, r4, r7
    e8ae:	3101      	adds	r1, #1
    e8b0:	4610      	mov	r0, r2
    e8b2:	f008 fb6e 	bl	16f92 <bt_id_set_adv_random_addr>
				if (err) {
    e8b6:	2800      	cmp	r0, #0
    e8b8:	d1f4      	bne.n	e8a4 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
    e8ba:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    e8be:	5d3b      	ldrb	r3, [r7, r4]
    e8c0:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e8c2:	f1b8 0f00 	cmp.w	r8, #0
    e8c6:	d0ec      	beq.n	e8a2 <bt_id_set_adv_own_addr+0x56>
    e8c8:	e7d9      	b.n	e87e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e8ca:	074b      	lsls	r3, r1, #29
    e8cc:	d50e      	bpl.n	e8ec <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e8ce:	4e0b      	ldr	r6, [pc, #44]	; (e8fc <bt_id_set_adv_own_addr+0xb0>)
    e8d0:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    e8d4:	5df3      	ldrb	r3, [r6, r7]
    e8d6:	2b01      	cmp	r3, #1
    e8d8:	d1e2      	bne.n	e8a0 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    e8da:	2107      	movs	r1, #7
    e8dc:	fb11 3104 	smlabb	r1, r1, r4, r3
    e8e0:	4431      	add	r1, r6
    e8e2:	f008 fb56 	bl	16f92 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
    e8e6:	5df3      	ldrb	r3, [r6, r7]
    e8e8:	702b      	strb	r3, [r5, #0]
		if (err) {
    e8ea:	e7db      	b.n	e8a4 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
    e8ec:	f008 fb59 	bl	16fa2 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e8f0:	2301      	movs	r3, #1
    e8f2:	e7f9      	b.n	e8e8 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
    e8f4:	f06f 0015 	mvn.w	r0, #21
    e8f8:	e7d4      	b.n	e8a4 <bt_id_set_adv_own_addr+0x58>
    e8fa:	bf00      	nop
    e8fc:	200001a0 	.word	0x200001a0

0000e900 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    e900:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e902:	4d13      	ldr	r5, [pc, #76]	; (e950 <bt_id_init+0x50>)
    e904:	79eb      	ldrb	r3, [r5, #7]
{
    e906:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e908:	b11b      	cbz	r3, e912 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    e90a:	2400      	movs	r4, #0
}
    e90c:	4620      	mov	r0, r4
    e90e:	b007      	add	sp, #28
    e910:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    e912:	f7ff ff0b 	bl	e72c <bt_setup_public_id_addr>
		if (err) {
    e916:	4604      	mov	r4, r0
    e918:	b150      	cbz	r0, e930 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
    e91a:	4b0e      	ldr	r3, [pc, #56]	; (e954 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
    e91c:	9305      	str	r3, [sp, #20]
    e91e:	480e      	ldr	r0, [pc, #56]	; (e958 <bt_id_init+0x58>)
    e920:	2302      	movs	r3, #2
    e922:	aa04      	add	r2, sp, #16
    e924:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e928:	9304      	str	r3, [sp, #16]
    e92a:	f008 fb2f 	bl	16f8c <z_log_msg_static_create.constprop.0>
			return err;
    e92e:	e7ed      	b.n	e90c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    e930:	79eb      	ldrb	r3, [r5, #7]
    e932:	2b00      	cmp	r3, #0
    e934:	d1e9      	bne.n	e90a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    e936:	f7ff ff5b 	bl	e7f0 <bt_setup_random_id_addr>
		if (err) {
    e93a:	4604      	mov	r4, r0
    e93c:	2800      	cmp	r0, #0
    e93e:	d1ec      	bne.n	e91a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    e940:	1c68      	adds	r0, r5, #1
    e942:	f7ff fdfb 	bl	e53c <set_random_address>
		if (err) {
    e946:	4604      	mov	r4, r0
    e948:	2800      	cmp	r0, #0
    e94a:	d0df      	beq.n	e90c <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
    e94c:	4b03      	ldr	r3, [pc, #12]	; (e95c <bt_id_init+0x5c>)
    e94e:	e7e5      	b.n	e91c <bt_id_init+0x1c>
    e950:	200001a0 	.word	0x200001a0
    e954:	00019d2d 	.word	0x00019d2d
    e958:	00018a3c 	.word	0x00018a3c
    e95c:	00019d4c 	.word	0x00019d4c

0000e960 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    e960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e964:	b089      	sub	sp, #36	; 0x24
    e966:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e968:	2120      	movs	r1, #32
{
    e96a:	9000      	str	r0, [sp, #0]
    e96c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e96e:	f7ff f809 	bl	d984 <bt_hci_cmd_create>
	if (!buf) {
    e972:	4605      	mov	r5, r0
    e974:	2800      	cmp	r0, #0
    e976:	d05b      	beq.n	ea30 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
    e978:	2120      	movs	r1, #32
    e97a:	300c      	adds	r0, #12
    e97c:	f008 fc65 	bl	1724a <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    e980:	2220      	movs	r2, #32
    e982:	2100      	movs	r1, #0
    e984:	4681      	mov	r9, r0
    e986:	f008 fac9 	bl	16f1c <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e98a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e98e:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
    e992:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    e994:	f8d4 8000 	ldr.w	r8, [r4]
    e998:	2300      	movs	r3, #0
    e99a:	6862      	ldr	r2, [r4, #4]
    e99c:	4293      	cmp	r3, r2
    e99e:	d30c      	bcc.n	e9ba <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
    e9a0:	3408      	adds	r4, #8
    e9a2:	45a2      	cmp	sl, r4
    e9a4:	d1f6      	bne.n	e994 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e9a6:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
    e9a8:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e9ac:	2200      	movs	r2, #0
    e9ae:	4629      	mov	r1, r5
}
    e9b0:	b009      	add	sp, #36	; 0x24
    e9b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e9b6:	f7ff b81f 	b.w	d9f8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e9ba:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e9be:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e9c2:	1cb0      	adds	r0, r6, #2
    e9c4:	1811      	adds	r1, r2, r0
    e9c6:	291f      	cmp	r1, #31
    e9c8:	d91b      	bls.n	ea02 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e9ca:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e9ce:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e9d2:	d101      	bne.n	e9d8 <hci_set_ad+0x78>
    e9d4:	2a00      	cmp	r2, #0
    e9d6:	dc12      	bgt.n	e9fe <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
    e9d8:	4b17      	ldr	r3, [pc, #92]	; (ea38 <hci_set_ad+0xd8>)
    e9da:	9307      	str	r3, [sp, #28]
    e9dc:	2302      	movs	r3, #2
    e9de:	9306      	str	r3, [sp, #24]
    e9e0:	4816      	ldr	r0, [pc, #88]	; (ea3c <hci_set_ad+0xdc>)
    e9e2:	2300      	movs	r3, #0
    e9e4:	aa06      	add	r2, sp, #24
    e9e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e9ea:	f7fd f8d5 	bl	bb98 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
    e9ee:	4628      	mov	r0, r5
    e9f0:	f000 face 	bl	ef90 <net_buf_unref>
					return -EINVAL;
    e9f4:	f06f 0015 	mvn.w	r0, #21
}
    e9f8:	b009      	add	sp, #36	; 0x24
    e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e9fe:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    ea02:	b2d7      	uxtb	r7, r2
    ea04:	1c79      	adds	r1, r7, #1
    ea06:	f80b 1006 	strb.w	r1, [fp, r6]
    ea0a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    ea0c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    ea0e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    ea12:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    ea16:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ea1a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    ea1c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    ea1e:	f008 fa72 	bl	16f06 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    ea22:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    ea24:	4437      	add	r7, r6
    ea26:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
    ea28:	3301      	adds	r3, #1
    ea2a:	f108 0808 	add.w	r8, r8, #8
    ea2e:	e7b4      	b.n	e99a <hci_set_ad+0x3a>
		return -ENOBUFS;
    ea30:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ea34:	e7e0      	b.n	e9f8 <hci_set_ad+0x98>
    ea36:	bf00      	nop
    ea38:	00019d6f 	.word	0x00019d6f
    ea3c:	00018a24 	.word	0x00018a24

0000ea40 <valid_adv_param>:
{
    ea40:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ea42:	6843      	ldr	r3, [r0, #4]
{
    ea44:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    ea46:	0558      	lsls	r0, r3, #21
    ea48:	d501      	bpl.n	ea4e <valid_adv_param+0xe>
		return false;
    ea4a:	2000      	movs	r0, #0
}
    ea4c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ea4e:	6922      	ldr	r2, [r4, #16]
    ea50:	b10a      	cbz	r2, ea56 <valid_adv_param+0x16>
    ea52:	07d9      	lsls	r1, r3, #31
    ea54:	d5f9      	bpl.n	ea4a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    ea56:	4d19      	ldr	r5, [pc, #100]	; (eabc <valid_adv_param+0x7c>)
    ea58:	7820      	ldrb	r0, [r4, #0]
    ea5a:	79eb      	ldrb	r3, [r5, #7]
    ea5c:	4283      	cmp	r3, r0
    ea5e:	d9f4      	bls.n	ea4a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    ea60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
    ea64:	4916      	ldr	r1, [pc, #88]	; (eac0 <valid_adv_param+0x80>)
    ea66:	2207      	movs	r2, #7
    ea68:	4428      	add	r0, r5
    ea6a:	f008 fa25 	bl	16eb8 <memcmp>
	if (param->id >= bt_dev.id_count ||
    ea6e:	2800      	cmp	r0, #0
    ea70:	d0eb      	beq.n	ea4a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    ea72:	6860      	ldr	r0, [r4, #4]
    ea74:	07c2      	lsls	r2, r0, #31
    ea76:	d406      	bmi.n	ea86 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    ea78:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
    ea7c:	2b08      	cmp	r3, #8
    ea7e:	d802      	bhi.n	ea86 <valid_adv_param+0x46>
    ea80:	68a3      	ldr	r3, [r4, #8]
    ea82:	2b9f      	cmp	r3, #159	; 0x9f
    ea84:	d9e1      	bls.n	ea4a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    ea86:	f010 0f30 	tst.w	r0, #48	; 0x30
    ea8a:	d002      	beq.n	ea92 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    ea8c:	6923      	ldr	r3, [r4, #16]
    ea8e:	2b00      	cmp	r3, #0
    ea90:	d0db      	beq.n	ea4a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    ea92:	06c3      	lsls	r3, r0, #27
    ea94:	d401      	bmi.n	ea9a <valid_adv_param+0x5a>
    ea96:	6923      	ldr	r3, [r4, #16]
    ea98:	b943      	cbnz	r3, eaac <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
    ea9a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    ea9e:	429a      	cmp	r2, r3
    eaa0:	d8d3      	bhi.n	ea4a <valid_adv_param+0xa>
    eaa2:	2a1f      	cmp	r2, #31
    eaa4:	d9d1      	bls.n	ea4a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    eaa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    eaaa:	d8ce      	bhi.n	ea4a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    eaac:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    eab0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    eab4:	bf18      	it	ne
    eab6:	2001      	movne	r0, #1
    eab8:	e7c8      	b.n	ea4c <valid_adv_param+0xc>
    eaba:	bf00      	nop
    eabc:	200001a0 	.word	0x200001a0
    eac0:	000196b2 	.word	0x000196b2

0000eac4 <bt_le_adv_update_data>:
	return 0;
}

int bt_le_adv_update_data(const struct bt_data *ad, size_t ad_len,
			  const struct bt_data *sd, size_t sd_len)
{
    eac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eac6:	4605      	mov	r5, r0
    eac8:	b085      	sub	sp, #20
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eaca:	480f      	ldr	r0, [pc, #60]	; (eb08 <bt_le_adv_update_data+0x44>)
    eacc:	f008 fa93 	bl	16ff6 <atomic_get>
    ead0:	461f      	mov	r7, r3

	if (!adv) {
		return -EINVAL;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ead2:	0603      	lsls	r3, r0, #24
{
    ead4:	4616      	mov	r6, r2
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ead6:	d513      	bpl.n	eb00 <bt_le_adv_update_data+0x3c>
    ead8:	480b      	ldr	r0, [pc, #44]	; (eb08 <bt_le_adv_update_data+0x44>)
    eada:	f008 fa8c 	bl	16ff6 <atomic_get>
    eade:	4604      	mov	r4, r0
		return -EAGAIN;
	}

	scannable = atomic_test_bit(adv->flags, BT_ADV_SCANNABLE);

	return le_adv_update(adv, ad, ad_len, sd, sd_len, false, scannable,
    eae0:	480a      	ldr	r0, [pc, #40]	; (eb0c <bt_le_adv_update_data+0x48>)
    eae2:	f008 fb2b 	bl	1713c <get_adv_name_type>
    eae6:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    eaea:	9002      	str	r0, [sp, #8]
    eaec:	460a      	mov	r2, r1
    eaee:	e9cd 7400 	strd	r7, r4, [sp]
    eaf2:	4806      	ldr	r0, [pc, #24]	; (eb0c <bt_le_adv_update_data+0x48>)
    eaf4:	4633      	mov	r3, r6
    eaf6:	4629      	mov	r1, r5
    eaf8:	f008 faa9 	bl	1704e <le_adv_update.constprop.0>
			     get_adv_name_type(adv));
}
    eafc:	b005      	add	sp, #20
    eafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EAGAIN;
    eb00:	f06f 000a 	mvn.w	r0, #10
    eb04:	e7fa      	b.n	eafc <bt_le_adv_update_data+0x38>
    eb06:	bf00      	nop
    eb08:	200001c8 	.word	0x200001c8
    eb0c:	200001b8 	.word	0x200001b8

0000eb10 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    eb14:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
    eb18:	b091      	sub	sp, #68	; 0x44
	bool dir_adv = (param->peer != NULL), scannable = false;
    eb1a:	f1ba 0500 	subs.w	r5, sl, #0
{
    eb1e:	4606      	mov	r6, r0
    eb20:	4880      	ldr	r0, [pc, #512]	; (ed24 <bt_le_adv_start_legacy+0x214>)
    eb22:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    eb24:	bf18      	it	ne
    eb26:	2501      	movne	r5, #1
    eb28:	f008 fa65 	bl	16ff6 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    eb2c:	0740      	lsls	r0, r0, #29
{
    eb2e:	460c      	mov	r4, r1
    eb30:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    eb32:	f140 80ec 	bpl.w	ed0e <bt_le_adv_start_legacy+0x1fe>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    eb36:	4608      	mov	r0, r1
    eb38:	f7ff ff82 	bl	ea40 <valid_adv_param>
    eb3c:	b928      	cbnz	r0, eb4a <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    eb3e:	f06f 0515 	mvn.w	r5, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    eb42:	4628      	mov	r0, r5
    eb44:	b011      	add	sp, #68	; 0x44
    eb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    eb4a:	4620      	mov	r0, r4
    eb4c:	f008 fa40 	bl	16fd0 <bt_id_adv_random_addr_check>
    eb50:	4681      	mov	r9, r0
    eb52:	2800      	cmp	r0, #0
    eb54:	d0f3      	beq.n	eb3e <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    eb56:	f106 0810 	add.w	r8, r6, #16
    eb5a:	4640      	mov	r0, r8
    eb5c:	f008 fa4b 	bl	16ff6 <atomic_get>
    eb60:	0601      	lsls	r1, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    eb62:	f3c0 17c0 	ubfx	r7, r0, #7, #1
    eb66:	f100 80d5 	bmi.w	ed14 <bt_le_adv_start_legacy+0x204>
	(void)memset(&set_param, 0, sizeof(set_param));
    eb6a:	220f      	movs	r2, #15
    eb6c:	4639      	mov	r1, r7
    eb6e:	a806      	add	r0, sp, #24
    eb70:	f008 f9d4 	bl	16f1c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    eb74:	68a3      	ldr	r3, [r4, #8]
    eb76:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.channel_map  = get_adv_channel_map(param->options);
    eb7a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    eb7c:	68e3      	ldr	r3, [r4, #12]
    eb7e:	f8ad 301a 	strh.w	r3, [sp, #26]
	set_param.channel_map  = get_adv_channel_map(param->options);
    eb82:	f008 fa29 	bl	16fd8 <get_adv_channel_map>
	if (adv->id != param->id) {
    eb86:	7832      	ldrb	r2, [r6, #0]
    eb88:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    eb8a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	if (adv->id != param->id) {
    eb8e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    eb90:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
	if (adv->id != param->id) {
    eb94:	d004      	beq.n	eba0 <bt_le_adv_start_legacy+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    eb96:	4863      	ldr	r0, [pc, #396]	; (ed24 <bt_le_adv_start_legacy+0x214>)
    eb98:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    eb9c:	f008 fa31 	bl	17002 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    eba0:	4a61      	ldr	r2, [pc, #388]	; (ed28 <bt_le_adv_start_legacy+0x218>)
	adv->id = param->id;
    eba2:	7823      	ldrb	r3, [r4, #0]
    eba4:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    eba6:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    ebaa:	6861      	ldr	r1, [r4, #4]
    ebac:	462a      	mov	r2, r5
    ebae:	f10d 031d 	add.w	r3, sp, #29
    ebb2:	4630      	mov	r0, r6
    ebb4:	f7ff fe4a 	bl	e84c <bt_id_set_adv_own_addr>
	if (err) {
    ebb8:	4605      	mov	r5, r0
    ebba:	2800      	cmp	r0, #0
    ebbc:	d1c1      	bne.n	eb42 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ebbe:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
    ebc2:	2207      	movs	r2, #7
	if (dir_adv) {
    ebc4:	f1ba 0f00 	cmp.w	sl, #0
    ebc8:	d013      	beq.n	ebf2 <bt_le_adv_start_legacy+0xe2>
    ebca:	6921      	ldr	r1, [r4, #16]
    ebcc:	f008 f99b 	bl	16f06 <memcpy>
	name_type = get_adv_name_type_param(param);
    ebd0:	4620      	mov	r0, r4
    ebd2:	f008 fac3 	bl	1715c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ebd6:	6863      	ldr	r3, [r4, #4]
    ebd8:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    ebda:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ebdc:	d416      	bmi.n	ec0c <bt_le_adv_start_legacy+0xfc>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    ebde:	0598      	lsls	r0, r3, #22
    ebe0:	d403      	bmi.n	ebea <bt_le_adv_start_legacy+0xda>
    ebe2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ebe4:	b90b      	cbnz	r3, ebea <bt_le_adv_start_legacy+0xda>
    ebe6:	2f02      	cmp	r7, #2
    ebe8:	d14b      	bne.n	ec82 <bt_le_adv_start_legacy+0x172>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    ebea:	2302      	movs	r3, #2
    ebec:	f88d 301c 	strb.w	r3, [sp, #28]
    ebf0:	e01a      	b.n	ec28 <bt_le_adv_start_legacy+0x118>
    ebf2:	494e      	ldr	r1, [pc, #312]	; (ed2c <bt_le_adv_start_legacy+0x21c>)
    ebf4:	f008 f987 	bl	16f06 <memcpy>
	name_type = get_adv_name_type_param(param);
    ebf8:	4620      	mov	r0, r4
    ebfa:	f008 faaf 	bl	1715c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ebfe:	6863      	ldr	r3, [r4, #4]
    ec00:	07dd      	lsls	r5, r3, #31
	name_type = get_adv_name_type_param(param);
    ec02:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ec04:	d5eb      	bpl.n	ebde <bt_le_adv_start_legacy+0xce>
			set_param.type = BT_HCI_ADV_IND;
    ec06:	f88d a01c 	strb.w	sl, [sp, #28]
    ec0a:	e00d      	b.n	ec28 <bt_le_adv_start_legacy+0x118>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
    ec0c:	f013 0f10 	tst.w	r3, #16
    ec10:	bf0c      	ite	eq
    ec12:	2301      	moveq	r3, #1
    ec14:	2304      	movne	r3, #4
    ec16:	6921      	ldr	r1, [r4, #16]
    ec18:	f88d 301c 	strb.w	r3, [sp, #28]
    ec1c:	2207      	movs	r2, #7
    ec1e:	f10d 001e 	add.w	r0, sp, #30
    ec22:	f008 f970 	bl	16f06 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    ec26:	46a9      	mov	r9, r5
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    ec28:	210f      	movs	r1, #15
    ec2a:	f242 0006 	movw	r0, #8198	; 0x2006
    ec2e:	f7fe fea9 	bl	d984 <bt_hci_cmd_create>
	if (!buf) {
    ec32:	4605      	mov	r5, r0
    ec34:	2800      	cmp	r0, #0
    ec36:	d070      	beq.n	ed1a <bt_le_adv_start_legacy+0x20a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ec38:	220f      	movs	r2, #15
    ec3a:	a906      	add	r1, sp, #24
    ec3c:	300c      	adds	r0, #12
    ec3e:	f008 fb0a 	bl	17256 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    ec42:	4629      	mov	r1, r5
    ec44:	2200      	movs	r2, #0
    ec46:	f242 0006 	movw	r0, #8198	; 0x2006
    ec4a:	f7fe fed5 	bl	d9f8 <bt_hci_cmd_send_sync>
	if (err) {
    ec4e:	4605      	mov	r5, r0
    ec50:	2800      	cmp	r0, #0
    ec52:	f47f af76 	bne.w	eb42 <bt_le_adv_start_legacy+0x32>
	if (!dir_adv) {
    ec56:	f1ba 0f00 	cmp.w	sl, #0
    ec5a:	d018      	beq.n	ec8e <bt_le_adv_start_legacy+0x17e>
	return bt_le_adv_set_enable_legacy(adv, enable);
    ec5c:	4630      	mov	r0, r6
    ec5e:	2101      	movs	r1, #1
    ec60:	f008 fa8c 	bl	1717c <bt_le_adv_set_enable_legacy>
	if (err) {
    ec64:	4606      	mov	r6, r0
    ec66:	b350      	cbz	r0, ecbe <bt_le_adv_start_legacy+0x1ae>
		LOG_ERR("Failed to start advertiser");
    ec68:	4b31      	ldr	r3, [pc, #196]	; (ed30 <bt_le_adv_start_legacy+0x220>)
    ec6a:	930f      	str	r3, [sp, #60]	; 0x3c
    ec6c:	2302      	movs	r3, #2
    ec6e:	930e      	str	r3, [sp, #56]	; 0x38
    ec70:	4830      	ldr	r0, [pc, #192]	; (ed34 <bt_le_adv_start_legacy+0x224>)
    ec72:	2300      	movs	r3, #0
    ec74:	aa0e      	add	r2, sp, #56	; 0x38
    ec76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ec7a:	f7fc ff8d 	bl	bb98 <z_impl_z_log_msg_static_create>
		return err;
    ec7e:	4635      	mov	r5, r6
    ec80:	e75f      	b.n	eb42 <bt_le_adv_start_legacy+0x32>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    ec82:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    ec84:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    ec88:	f88d 301c 	strb.w	r3, [sp, #28]
    ec8c:	e7cc      	b.n	ec28 <bt_le_adv_start_legacy+0x118>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    ec8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ec90:	9300      	str	r3, [sp, #0]
    ec92:	e9cd 9701 	strd	r9, r7, [sp, #4]
    ec96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ec98:	9a05      	ldr	r2, [sp, #20]
    ec9a:	4659      	mov	r1, fp
    ec9c:	4630      	mov	r0, r6
    ec9e:	f008 f9d6 	bl	1704e <le_adv_update.constprop.0>
		if (err) {
    eca2:	2800      	cmp	r0, #0
    eca4:	d13c      	bne.n	ed20 <bt_le_adv_start_legacy+0x210>
	return bt_le_adv_set_enable_legacy(adv, enable);
    eca6:	4630      	mov	r0, r6
    eca8:	2101      	movs	r1, #1
    ecaa:	f008 fa67 	bl	1717c <bt_le_adv_set_enable_legacy>
	if (err) {
    ecae:	4606      	mov	r6, r0
    ecb0:	2800      	cmp	r0, #0
    ecb2:	d1d9      	bne.n	ec68 <bt_le_adv_start_legacy+0x158>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ecb4:	6866      	ldr	r6, [r4, #4]
    ecb6:	f086 0602 	eor.w	r6, r6, #2
    ecba:	f3c6 0640 	ubfx	r6, r6, #1, #1
    ecbe:	f006 0201 	and.w	r2, r6, #1
    ecc2:	4640      	mov	r0, r8
    ecc4:	210e      	movs	r1, #14
    ecc6:	f008 f9ab 	bl	17020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    ecca:	1e7b      	subs	r3, r7, #1
    eccc:	425a      	negs	r2, r3
    ecce:	415a      	adcs	r2, r3
    ecd0:	4640      	mov	r0, r8
    ecd2:	2108      	movs	r1, #8
    ecd4:	f008 f9a4 	bl	17020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    ecd8:	1eb9      	subs	r1, r7, #2
    ecda:	424a      	negs	r2, r1
    ecdc:	414a      	adcs	r2, r1
    ecde:	4640      	mov	r0, r8
    ece0:	2109      	movs	r1, #9
    ece2:	f008 f99d 	bl	17020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    ece6:	6862      	ldr	r2, [r4, #4]
    ece8:	4640      	mov	r0, r8
    ecea:	f002 0201 	and.w	r2, r2, #1
    ecee:	210a      	movs	r1, #10
    ecf0:	f008 f996 	bl	17020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    ecf4:	464a      	mov	r2, r9
    ecf6:	4640      	mov	r0, r8
    ecf8:	210b      	movs	r1, #11
    ecfa:	f008 f991 	bl	17020 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    ecfe:	6862      	ldr	r2, [r4, #4]
    ed00:	210d      	movs	r1, #13
    ed02:	f3c2 0280 	ubfx	r2, r2, #2, #1
    ed06:	4640      	mov	r0, r8
    ed08:	f008 f98a 	bl	17020 <atomic_set_bit_to>
	return 0;
    ed0c:	e719      	b.n	eb42 <bt_le_adv_start_legacy+0x32>
		return -EAGAIN;
    ed0e:	f06f 050a 	mvn.w	r5, #10
    ed12:	e716      	b.n	eb42 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    ed14:	f06f 0577 	mvn.w	r5, #119	; 0x77
    ed18:	e713      	b.n	eb42 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    ed1a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    ed1e:	e710      	b.n	eb42 <bt_le_adv_start_legacy+0x32>
    ed20:	4605      	mov	r5, r0
    ed22:	e70e      	b.n	eb42 <bt_le_adv_start_legacy+0x32>
    ed24:	20000274 	.word	0x20000274
    ed28:	200001a0 	.word	0x200001a0
    ed2c:	000196b2 	.word	0x000196b2
    ed30:	00019d88 	.word	0x00019d88
    ed34:	00018a24 	.word	0x00018a24

0000ed38 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    ed38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ed3a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ed3c:	9a06      	ldr	r2, [sp, #24]
{
    ed3e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ed40:	e9cd 3200 	strd	r3, r2, [sp]
    ed44:	462b      	mov	r3, r5
    ed46:	460a      	mov	r2, r1
    ed48:	4601      	mov	r1, r0
    ed4a:	4811      	ldr	r0, [pc, #68]	; (ed90 <bt_le_adv_start+0x58>)
    ed4c:	f7ff fee0 	bl	eb10 <bt_le_adv_start_legacy>
    ed50:	4621      	mov	r1, r4
    ed52:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    ed54:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    ed56:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    ed5a:	429d      	cmp	r5, r3
    ed5c:	d102      	bne.n	ed64 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    ed5e:	4630      	mov	r0, r6
    ed60:	b002      	add	sp, #8
    ed62:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    ed64:	880a      	ldrh	r2, [r1, #0]
    ed66:	4282      	cmp	r2, r0
    ed68:	d104      	bne.n	ed74 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    ed6a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    ed6c:	b112      	cbz	r2, ed74 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    ed6e:	7812      	ldrb	r2, [r2, #0]
    ed70:	07d2      	lsls	r2, r2, #31
    ed72:	d402      	bmi.n	ed7a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    ed74:	3301      	adds	r3, #1
    ed76:	3108      	adds	r1, #8
    ed78:	e7ef      	b.n	ed5a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    ed7a:	4906      	ldr	r1, [pc, #24]	; (ed94 <bt_le_adv_start+0x5c>)
    ed7c:	4806      	ldr	r0, [pc, #24]	; (ed98 <bt_le_adv_start+0x60>)
    ed7e:	f009 f9a4 	bl	180ca <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    ed82:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ed86:	2300      	movs	r3, #0
    ed88:	4803      	ldr	r0, [pc, #12]	; (ed98 <bt_le_adv_start+0x60>)
    ed8a:	f003 ff4f 	bl	12c2c <k_work_reschedule>
    ed8e:	e7e6      	b.n	ed5e <bt_le_adv_start+0x26>
    ed90:	200001b8 	.word	0x200001b8
    ed94:	0000edd5 	.word	0x0000edd5
    ed98:	200001d0 	.word	0x200001d0

0000ed9c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    ed9c:	b508      	push	{r3, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
    ed9e:	480b      	ldr	r0, [pc, #44]	; (edcc <bt_le_adv_stop+0x30>)
    eda0:	f008 fa11 	bl	171c6 <bt_le_lim_adv_cancel_timeout>
    eda4:	480a      	ldr	r0, [pc, #40]	; (edd0 <bt_le_adv_stop+0x34>)
    eda6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
    edaa:	f008 f92a 	bl	17002 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    edae:	4808      	ldr	r0, [pc, #32]	; (edd0 <bt_le_adv_stop+0x34>)
    edb0:	f008 f921 	bl	16ff6 <atomic_get>
    edb4:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    edb6:	061b      	lsls	r3, r3, #24
    edb8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    edbc:	d505      	bpl.n	edca <bt_le_adv_stop+0x2e>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    edbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    edc2:	4802      	ldr	r0, [pc, #8]	; (edcc <bt_le_adv_stop+0x30>)
    edc4:	2100      	movs	r1, #0
    edc6:	f008 b9d9 	b.w	1717c <bt_le_adv_set_enable_legacy>
}
    edca:	bd08      	pop	{r3, pc}
    edcc:	200001b8 	.word	0x200001b8
    edd0:	200001c8 	.word	0x200001c8

0000edd4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    edd4:	b598      	push	{r3, r4, r7, lr}
    edd6:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    edd8:	f7ff ffe0 	bl	ed9c <bt_le_adv_stop>
#endif
	if (err) {
    eddc:	b178      	cbz	r0, edfe <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
    edde:	466c      	mov	r4, sp
    ede0:	b088      	sub	sp, #32
    ede2:	466a      	mov	r2, sp
    ede4:	4b07      	ldr	r3, [pc, #28]	; (ee04 <adv_timeout+0x30>)
    ede6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    edea:	2303      	movs	r3, #3
    edec:	f842 3f10 	str.w	r3, [r2, #16]!
    edf0:	4805      	ldr	r0, [pc, #20]	; (ee08 <adv_timeout+0x34>)
    edf2:	2300      	movs	r3, #0
    edf4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    edf8:	f7fc fece 	bl	bb98 <z_impl_z_log_msg_static_create>
    edfc:	46a5      	mov	sp, r4
	}
}
    edfe:	46bd      	mov	sp, r7
    ee00:	bd98      	pop	{r3, r4, r7, pc}
    ee02:	bf00      	nop
    ee04:	00019da3 	.word	0x00019da3
    ee08:	00018a24 	.word	0x00018a24

0000ee0c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    ee0c:	4b02      	ldr	r3, [pc, #8]	; (ee18 <net_buf_pool_get+0xc>)
    ee0e:	222c      	movs	r2, #44	; 0x2c
    ee10:	fb02 3000 	mla	r0, r2, r0, r3
    ee14:	4770      	bx	lr
    ee16:	bf00      	nop
    ee18:	20000628 	.word	0x20000628

0000ee1c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ee1c:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    ee1e:	4b06      	ldr	r3, [pc, #24]	; (ee38 <net_buf_id+0x1c>)
    ee20:	212c      	movs	r1, #44	; 0x2c
    ee22:	fb01 3302 	mla	r3, r1, r2, r3
    ee26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ee28:	7f1b      	ldrb	r3, [r3, #28]
    ee2a:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    ee2c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ee2e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    ee32:	fbb0 f0f3 	udiv	r0, r0, r3
    ee36:	4770      	bx	lr
    ee38:	20000628 	.word	0x20000628

0000ee3c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    ee3c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ee3e:	4b0a      	ldr	r3, [pc, #40]	; (ee68 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ee40:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ee42:	242c      	movs	r4, #44	; 0x2c
    ee44:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    ee48:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    ee4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ee4c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    ee4e:	681a      	ldr	r2, [r3, #0]
    ee50:	4294      	cmp	r4, r2
    ee52:	bf94      	ite	ls
    ee54:	600c      	strls	r4, [r1, #0]
    ee56:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    ee58:	e9d3 5400 	ldrd	r5, r4, [r3]
    ee5c:	f7ff ffde 	bl	ee1c <net_buf_id>
}
    ee60:	fb05 4000 	mla	r0, r5, r0, r4
    ee64:	bd38      	pop	{r3, r4, r5, pc}
    ee66:	bf00      	nop
    ee68:	20000628 	.word	0x20000628

0000ee6c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    ee6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee70:	4605      	mov	r5, r0
    ee72:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    ee74:	4610      	mov	r0, r2
    ee76:	4619      	mov	r1, r3
{
    ee78:	4691      	mov	r9, r2
    ee7a:	4698      	mov	r8, r3
    ee7c:	4617      	mov	r7, r2
    ee7e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    ee80:	f009 fa92 	bl	183a8 <sys_clock_timeout_end_calc>
    ee84:	4682      	mov	sl, r0
    ee86:	468b      	mov	fp, r1
	__asm__ volatile(
    ee88:	f04f 0340 	mov.w	r3, #64	; 0x40
    ee8c:	f3ef 8111 	mrs	r1, BASEPRI
    ee90:	f383 8812 	msr	BASEPRI_MAX, r3
    ee94:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    ee98:	8b6b      	ldrh	r3, [r5, #26]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d058      	beq.n	ef50 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    ee9e:	8b2a      	ldrh	r2, [r5, #24]
    eea0:	429a      	cmp	r2, r3
    eea2:	d93c      	bls.n	ef1e <net_buf_alloc_len+0xb2>
    eea4:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    eea6:	2200      	movs	r2, #0
    eea8:	2300      	movs	r3, #0
    eeaa:	4628      	mov	r0, r5
    eeac:	f003 fcaa 	bl	12804 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    eeb0:	9900      	ldr	r1, [sp, #0]
    eeb2:	4604      	mov	r4, r0
    eeb4:	2800      	cmp	r0, #0
    eeb6:	d032      	beq.n	ef1e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
    eeb8:	f381 8811 	msr	BASEPRI, r1
    eebc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    eec0:	9b01      	ldr	r3, [sp, #4]
    eec2:	2b00      	cmp	r3, #0
    eec4:	d055      	beq.n	ef72 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    eec6:	ea58 0309 	orrs.w	r3, r8, r9
    eeca:	d00f      	beq.n	eeec <net_buf_alloc_len+0x80>
    eecc:	f1b8 3fff 	cmp.w	r8, #4294967295
    eed0:	bf08      	it	eq
    eed2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
    eed6:	d009      	beq.n	eeec <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    eed8:	f004 fb42 	bl	13560 <sys_clock_tick_get>
    eedc:	ebba 0700 	subs.w	r7, sl, r0
    eee0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    eee4:	2e00      	cmp	r6, #0
    eee6:	bfbc      	itt	lt
    eee8:	2700      	movlt	r7, #0
    eeea:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    eeec:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
    eeee:	4d26      	ldr	r5, [pc, #152]	; (ef88 <net_buf_alloc_len+0x11c>)
    eef0:	f04f 082c 	mov.w	r8, #44	; 0x2c
    eef4:	fb08 5303 	mla	r3, r8, r3, r5
    eef8:	463a      	mov	r2, r7
    eefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eefc:	681b      	ldr	r3, [r3, #0]
    eefe:	a901      	add	r1, sp, #4
    ef00:	f8d3 9000 	ldr.w	r9, [r3]
    ef04:	4620      	mov	r0, r4
    ef06:	4633      	mov	r3, r6
    ef08:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    ef0a:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
    ef0c:	2800      	cmp	r0, #0
    ef0e:	d131      	bne.n	ef74 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
    ef10:	7aa0      	ldrb	r0, [r4, #10]
    ef12:	4621      	mov	r1, r4
    ef14:	fb00 5008 	mla	r0, r0, r8, r5
    ef18:	f009 f816 	bl	17f48 <k_queue_prepend>
}
    ef1c:	e024      	b.n	ef68 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
    ef1e:	8b68      	ldrh	r0, [r5, #26]
    ef20:	1e43      	subs	r3, r0, #1
    ef22:	836b      	strh	r3, [r5, #26]
    ef24:	f381 8811 	msr	BASEPRI, r1
    ef28:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ef2c:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    ef2e:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    ef30:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    ef32:	331b      	adds	r3, #27
    ef34:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    ef38:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    ef3a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    ef3e:	4b12      	ldr	r3, [pc, #72]	; (ef88 <net_buf_alloc_len+0x11c>)
    ef40:	4a12      	ldr	r2, [pc, #72]	; (ef8c <net_buf_alloc_len+0x120>)
    ef42:	1aeb      	subs	r3, r5, r3
    ef44:	109b      	asrs	r3, r3, #2
    ef46:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    ef48:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
    ef4a:	7f2b      	ldrb	r3, [r5, #28]
    ef4c:	72e3      	strb	r3, [r4, #11]
		goto success;
    ef4e:	e7b7      	b.n	eec0 <net_buf_alloc_len+0x54>
    ef50:	f381 8811 	msr	BASEPRI, r1
    ef54:	f3bf 8f6f 	isb	sy
    ef58:	464a      	mov	r2, r9
    ef5a:	4643      	mov	r3, r8
    ef5c:	4628      	mov	r0, r5
    ef5e:	f003 fc51 	bl	12804 <z_impl_k_queue_get>
	if (!buf) {
    ef62:	4604      	mov	r4, r0
    ef64:	2800      	cmp	r0, #0
    ef66:	d1ab      	bne.n	eec0 <net_buf_alloc_len+0x54>
		return NULL;
    ef68:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    ef6a:	4620      	mov	r0, r4
    ef6c:	b003      	add	sp, #12
    ef6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    ef72:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
    ef74:	2300      	movs	r3, #0
	buf->ref   = 1U;
    ef76:	2201      	movs	r2, #1
	buf->frags = NULL;
    ef78:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
    ef7a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
    ef7c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
    ef7e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    ef80:	6963      	ldr	r3, [r4, #20]
    ef82:	8262      	strh	r2, [r4, #18]
    ef84:	60e3      	str	r3, [r4, #12]
	return buf;
    ef86:	e7f0      	b.n	ef6a <net_buf_alloc_len+0xfe>
    ef88:	20000628 	.word	0x20000628
    ef8c:	ba2e8ba3 	.word	0xba2e8ba3

0000ef90 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef94:	4d16      	ldr	r5, [pc, #88]	; (eff0 <net_buf_unref+0x60>)
    ef96:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    ef98:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    ef9a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
    ef9c:	b90c      	cbnz	r4, efa2 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    ef9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    efa2:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
    efa4:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
    efa8:	3b01      	subs	r3, #1
    efaa:	b2db      	uxtb	r3, r3
    efac:	7223      	strb	r3, [r4, #8]
    efae:	2b00      	cmp	r3, #0
    efb0:	d1f5      	bne.n	ef9e <net_buf_unref+0xe>
		if (buf->__buf) {
    efb2:	6961      	ldr	r1, [r4, #20]
    efb4:	b159      	cbz	r1, efce <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    efb6:	7a63      	ldrb	r3, [r4, #9]
    efb8:	07db      	lsls	r3, r3, #31
    efba:	d407      	bmi.n	efcc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    efbc:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
    efbe:	fb07 5303 	mla	r3, r7, r3, r5
    efc2:	4620      	mov	r0, r4
    efc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    efc6:	681b      	ldr	r3, [r3, #0]
    efc8:	689b      	ldr	r3, [r3, #8]
    efca:	4798      	blx	r3
			buf->__buf = NULL;
    efcc:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
    efce:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
    efd0:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
    efd2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    efd6:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
    efd8:	6a1b      	ldr	r3, [r3, #32]
    efda:	b11b      	cbz	r3, efe4 <net_buf_unref+0x54>
			pool->destroy(buf);
    efdc:	4620      	mov	r0, r4
    efde:	4798      	blx	r3
{
    efe0:	4644      	mov	r4, r8
    efe2:	e7db      	b.n	ef9c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    efe4:	4621      	mov	r1, r4
    efe6:	fb00 5007 	mla	r0, r0, r7, r5
    efea:	f008 ffad 	bl	17f48 <k_queue_prepend>
}
    efee:	e7f7      	b.n	efe0 <net_buf_unref+0x50>
    eff0:	20000628 	.word	0x20000628

0000eff4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    eff4:	4b08      	ldr	r3, [pc, #32]	; (f018 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    eff6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    eff8:	1ac3      	subs	r3, r0, r3
{
    effa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    effc:	4907      	ldr	r1, [pc, #28]	; (f01c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    effe:	109b      	asrs	r3, r3, #2
{
    f000:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    f002:	4359      	muls	r1, r3
    f004:	4806      	ldr	r0, [pc, #24]	; (f020 <onoff_stop+0x2c>)
    f006:	2240      	movs	r2, #64	; 0x40
    f008:	f008 f95e 	bl	172c8 <stop>
	notify(mgr, res);
    f00c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    f00e:	4601      	mov	r1, r0
	notify(mgr, res);
    f010:	4620      	mov	r0, r4
}
    f012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    f016:	4718      	bx	r3
    f018:	20002440 	.word	0x20002440
    f01c:	b6db6db7 	.word	0xb6db6db7
    f020:	0001878c 	.word	0x0001878c

0000f024 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    f024:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    f026:	4c0c      	ldr	r4, [pc, #48]	; (f058 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    f028:	4a0c      	ldr	r2, [pc, #48]	; (f05c <onoff_start+0x38>)
    f02a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    f02c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    f02e:	9300      	str	r3, [sp, #0]
{
    f030:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    f032:	460b      	mov	r3, r1
    f034:	490a      	ldr	r1, [pc, #40]	; (f060 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    f036:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    f038:	4361      	muls	r1, r4
{
    f03a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    f03c:	4809      	ldr	r0, [pc, #36]	; (f064 <onoff_start+0x40>)
    f03e:	f008 f96f 	bl	17320 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    f042:	1e01      	subs	r1, r0, #0
    f044:	da05      	bge.n	f052 <onoff_start+0x2e>
		notify(mgr, err);
    f046:	4630      	mov	r0, r6
    f048:	462b      	mov	r3, r5
	}
}
    f04a:	b002      	add	sp, #8
    f04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    f050:	4718      	bx	r3
}
    f052:	b002      	add	sp, #8
    f054:	bd70      	pop	{r4, r5, r6, pc}
    f056:	bf00      	nop
    f058:	20002440 	.word	0x20002440
    f05c:	0001738b 	.word	0x0001738b
    f060:	b6db6db7 	.word	0xb6db6db7
    f064:	0001878c 	.word	0x0001878c

0000f068 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f068:	2200      	movs	r2, #0
{
    f06a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f06c:	2101      	movs	r1, #1
{
    f06e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    f070:	4610      	mov	r0, r2
    f072:	f7fd fbdd 	bl	c830 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    f076:	480f      	ldr	r0, [pc, #60]	; (f0b4 <clk_init+0x4c>)
    f078:	f002 fb36 	bl	116e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    f07c:	4b0e      	ldr	r3, [pc, #56]	; (f0b8 <clk_init+0x50>)
    f07e:	4298      	cmp	r0, r3
    f080:	d115      	bne.n	f0ae <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    f082:	f008 fd76 	bl	17b72 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    f086:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    f088:	490c      	ldr	r1, [pc, #48]	; (f0bc <clk_init+0x54>)
    f08a:	4630      	mov	r0, r6
    f08c:	f007 fadf 	bl	1664e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    f090:	2800      	cmp	r0, #0
    f092:	db0b      	blt.n	f0ac <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f094:	2501      	movs	r5, #1
    f096:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    f098:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    f09a:	4908      	ldr	r1, [pc, #32]	; (f0bc <clk_init+0x54>)
    f09c:	f104 001c 	add.w	r0, r4, #28
    f0a0:	f007 fad5 	bl	1664e <onoff_manager_init>
		if (err < 0) {
    f0a4:	2800      	cmp	r0, #0
    f0a6:	db01      	blt.n	f0ac <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    f0a8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    f0aa:	2000      	movs	r0, #0
}
    f0ac:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    f0ae:	f06f 0004 	mvn.w	r0, #4
    f0b2:	e7fb      	b.n	f0ac <clk_init+0x44>
    f0b4:	0000f0f5 	.word	0x0000f0f5
    f0b8:	0bad0000 	.word	0x0bad0000
    f0bc:	00018cf8 	.word	0x00018cf8

0000f0c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    f0c0:	b570      	push	{r4, r5, r6, lr}
    f0c2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    f0c4:	230c      	movs	r3, #12
    f0c6:	4809      	ldr	r0, [pc, #36]	; (f0ec <clkstarted_handle.constprop.0+0x2c>)
    f0c8:	434b      	muls	r3, r1
    f0ca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    f0cc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    f0d0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    f0d2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    f0d4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    f0d6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    f0d8:	f008 f8e3 	bl	172a2 <set_on_state>
	if (callback) {
    f0dc:	b12d      	cbz	r5, f0ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f0de:	4632      	mov	r2, r6
    f0e0:	462b      	mov	r3, r5
    f0e2:	4803      	ldr	r0, [pc, #12]	; (f0f0 <clkstarted_handle.constprop.0+0x30>)
}
    f0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    f0e8:	4718      	bx	r3
}
    f0ea:	bd70      	pop	{r4, r5, r6, pc}
    f0ec:	20002440 	.word	0x20002440
    f0f0:	0001878c 	.word	0x0001878c

0000f0f4 <clock_event_handler>:
	switch (event) {
    f0f4:	b110      	cbz	r0, f0fc <clock_event_handler+0x8>
    f0f6:	2801      	cmp	r0, #1
    f0f8:	d004      	beq.n	f104 <clock_event_handler+0x10>
    f0fa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    f0fc:	4b03      	ldr	r3, [pc, #12]	; (f10c <clock_event_handler+0x18>)
    f0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f100:	075b      	lsls	r3, r3, #29
    f102:	d101      	bne.n	f108 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    f104:	f7ff bfdc 	b.w	f0c0 <clkstarted_handle.constprop.0>
}
    f108:	4770      	bx	lr
    f10a:	bf00      	nop
    f10c:	20002440 	.word	0x20002440

0000f110 <generic_hfclk_start>:
{
    f110:	b508      	push	{r3, lr}
	__asm__ volatile(
    f112:	f04f 0340 	mov.w	r3, #64	; 0x40
    f116:	f3ef 8111 	mrs	r1, BASEPRI
    f11a:	f383 8812 	msr	BASEPRI_MAX, r3
    f11e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    f122:	4a12      	ldr	r2, [pc, #72]	; (f16c <generic_hfclk_start+0x5c>)
    f124:	6813      	ldr	r3, [r2, #0]
    f126:	f043 0002 	orr.w	r0, r3, #2
    f12a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    f12c:	07da      	lsls	r2, r3, #31
    f12e:	d408      	bmi.n	f142 <generic_hfclk_start+0x32>
	__asm__ volatile(
    f130:	f381 8811 	msr	BASEPRI, r1
    f134:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f138:	2001      	movs	r0, #1
}
    f13a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f13e:	f002 bac3 	b.w	116c8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    f142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f146:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    f14a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    f14e:	07d3      	lsls	r3, r2, #31
    f150:	d5ee      	bpl.n	f130 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    f152:	4807      	ldr	r0, [pc, #28]	; (f170 <generic_hfclk_start+0x60>)
    f154:	f008 f8a5 	bl	172a2 <set_on_state>
    f158:	f381 8811 	msr	BASEPRI, r1
    f15c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    f160:	2000      	movs	r0, #0
}
    f162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    f166:	f7ff bfab 	b.w	f0c0 <clkstarted_handle.constprop.0>
    f16a:	bf00      	nop
    f16c:	20002490 	.word	0x20002490
    f170:	20002480 	.word	0x20002480

0000f174 <api_blocking_start>:
{
    f174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f176:	2200      	movs	r2, #0
    f178:	2301      	movs	r3, #1
    f17a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f17e:	ab04      	add	r3, sp, #16
    f180:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    f184:	4a09      	ldr	r2, [pc, #36]	; (f1ac <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f186:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    f18a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    f18c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    f190:	f008 f8f4 	bl	1737c <api_start>
	if (err < 0) {
    f194:	2800      	cmp	r0, #0
    f196:	db05      	blt.n	f1a4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    f198:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    f19c:	2300      	movs	r3, #0
    f19e:	4668      	mov	r0, sp
    f1a0:	f003 fb8a 	bl	128b8 <z_impl_k_sem_take>
}
    f1a4:	b007      	add	sp, #28
    f1a6:	f85d fb04 	ldr.w	pc, [sp], #4
    f1aa:	bf00      	nop
    f1ac:	000173a9 	.word	0x000173a9

0000f1b0 <generic_hfclk_stop>:
{
    f1b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    f1b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    f1b6:	f3ef 8411 	mrs	r4, BASEPRI
    f1ba:	f383 8812 	msr	BASEPRI_MAX, r3
    f1be:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    f1c2:	4a07      	ldr	r2, [pc, #28]	; (f1e0 <generic_hfclk_stop+0x30>)
    f1c4:	6813      	ldr	r3, [r2, #0]
    f1c6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    f1ca:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    f1cc:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    f1ce:	d402      	bmi.n	f1d6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f1d0:	2001      	movs	r0, #1
    f1d2:	f008 fcc9 	bl	17b68 <nrfx_clock_stop>
	__asm__ volatile(
    f1d6:	f384 8811 	msr	BASEPRI, r4
    f1da:	f3bf 8f6f 	isb	sy
}
    f1de:	bd10      	pop	{r4, pc}
    f1e0:	20002490 	.word	0x20002490

0000f1e4 <z_nrf_clock_control_lf_on>:
{
    f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f1e8:	4938      	ldr	r1, [pc, #224]	; (f2cc <z_nrf_clock_control_lf_on+0xe8>)
    f1ea:	f3bf 8f5b 	dmb	ish
    f1ee:	4607      	mov	r7, r0
    f1f0:	2201      	movs	r2, #1
    f1f2:	e851 3f00 	ldrex	r3, [r1]
    f1f6:	e841 2000 	strex	r0, r2, [r1]
    f1fa:	2800      	cmp	r0, #0
    f1fc:	d1f9      	bne.n	f1f2 <z_nrf_clock_control_lf_on+0xe>
    f1fe:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    f202:	b933      	cbnz	r3, f212 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    f204:	4932      	ldr	r1, [pc, #200]	; (f2d0 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    f206:	4833      	ldr	r0, [pc, #204]	; (f2d4 <z_nrf_clock_control_lf_on+0xf0>)
    f208:	604b      	str	r3, [r1, #4]
    f20a:	60cb      	str	r3, [r1, #12]
    f20c:	608a      	str	r2, [r1, #8]
    f20e:	f007 fa31 	bl	16674 <onoff_request>
	switch (start_mode) {
    f212:	1e7b      	subs	r3, r7, #1
    f214:	2b01      	cmp	r3, #1
    f216:	d82b      	bhi.n	f270 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    f218:	2f01      	cmp	r7, #1
    f21a:	d107      	bne.n	f22c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    f21c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f220:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    f224:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    f228:	2b01      	cmp	r3, #1
    f22a:	d021      	beq.n	f270 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f22c:	f008 fde0 	bl	17df0 <k_is_in_isr>
    f230:	4605      	mov	r5, r0
    f232:	b9f8      	cbnz	r0, f274 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    f234:	4b28      	ldr	r3, [pc, #160]	; (f2d8 <z_nrf_clock_control_lf_on+0xf4>)
    f236:	781b      	ldrb	r3, [r3, #0]
    f238:	b1e3      	cbz	r3, f274 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    f23a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f23e:	2202      	movs	r2, #2
    f240:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    f244:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f246:	f8df 8094 	ldr.w	r8, [pc, #148]	; f2dc <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    f24a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    f24e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    f252:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    f256:	03d2      	lsls	r2, r2, #15
    f258:	d516      	bpl.n	f288 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    f25a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    f25e:	2b01      	cmp	r3, #1
    f260:	d001      	beq.n	f266 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    f262:	2f01      	cmp	r7, #1
    f264:	d110      	bne.n	f288 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    f266:	b35d      	cbz	r5, f2c0 <z_nrf_clock_control_lf_on+0xdc>
    f268:	f386 8811 	msr	BASEPRI, r6
    f26c:	f3bf 8f6f 	isb	sy
}
    f270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    f274:	f04f 0340 	mov.w	r3, #64	; 0x40
    f278:	f3ef 8611 	mrs	r6, BASEPRI
    f27c:	f383 8812 	msr	BASEPRI_MAX, r3
    f280:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    f284:	2501      	movs	r5, #1
    f286:	e7de      	b.n	f246 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    f288:	b1ad      	cbz	r5, f2b6 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    f28a:	4630      	mov	r0, r6
    f28c:	f7fd fa2e 	bl	c6ec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    f290:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    f294:	2b00      	cmp	r3, #0
    f296:	d1da      	bne.n	f24e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    f298:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    f29c:	2a00      	cmp	r2, #0
    f29e:	d0d6      	beq.n	f24e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f2a0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    f2a4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    f2a8:	2301      	movs	r3, #1
    f2aa:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    f2ae:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f2b2:	60a3      	str	r3, [r4, #8]
}
    f2b4:	e7cb      	b.n	f24e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    f2b6:	2100      	movs	r1, #0
    f2b8:	2021      	movs	r0, #33	; 0x21
    f2ba:	f003 ff7f 	bl	131bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    f2be:	e7e7      	b.n	f290 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    f2c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f2c4:	2202      	movs	r2, #2
    f2c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f2ca:	e7d1      	b.n	f270 <z_nrf_clock_control_lf_on+0x8c>
    f2cc:	2000243c 	.word	0x2000243c
    f2d0:	2000242c 	.word	0x2000242c
    f2d4:	2000245c 	.word	0x2000245c
    f2d8:	20003686 	.word	0x20003686
    f2dc:	e000e100 	.word	0xe000e100

0000f2e0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    f2e0:	b508      	push	{r3, lr}
    f2e2:	4807      	ldr	r0, [pc, #28]	; (f300 <uart_console_init+0x20>)
    f2e4:	f008 fcb6 	bl	17c54 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    f2e8:	b138      	cbz	r0, f2fa <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    f2ea:	4806      	ldr	r0, [pc, #24]	; (f304 <uart_console_init+0x24>)
    f2ec:	f7fe f832 	bl	d354 <__stdout_hook_install>
	__printk_hook_install(console_out);
    f2f0:	4804      	ldr	r0, [pc, #16]	; (f304 <uart_console_init+0x24>)
    f2f2:	f7fb fcc5 	bl	ac80 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    f2f6:	2000      	movs	r0, #0
}
    f2f8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    f2fa:	f06f 0012 	mvn.w	r0, #18
    f2fe:	e7fb      	b.n	f2f8 <uart_console_init+0x18>
    f300:	0001881c 	.word	0x0001881c
    f304:	0000f309 	.word	0x0000f309

0000f308 <console_out>:
	if ('\n' == c) {
    f308:	280a      	cmp	r0, #10
{
    f30a:	b538      	push	{r3, r4, r5, lr}
    f30c:	4d07      	ldr	r5, [pc, #28]	; (f32c <console_out+0x24>)
    f30e:	4604      	mov	r4, r0
	if ('\n' == c) {
    f310:	d104      	bne.n	f31c <console_out+0x14>
    f312:	68ab      	ldr	r3, [r5, #8]
    f314:	210d      	movs	r1, #13
    f316:	69db      	ldr	r3, [r3, #28]
    f318:	4628      	mov	r0, r5
    f31a:	4798      	blx	r3
    f31c:	68ab      	ldr	r3, [r5, #8]
    f31e:	4803      	ldr	r0, [pc, #12]	; (f32c <console_out+0x24>)
    f320:	69db      	ldr	r3, [r3, #28]
    f322:	b2e1      	uxtb	r1, r4
    f324:	4798      	blx	r3
}
    f326:	4620      	mov	r0, r4
    f328:	bd38      	pop	{r3, r4, r5, pc}
    f32a:	bf00      	nop
    f32c:	0001881c 	.word	0x0001881c

0000f330 <random_byte_get>:
    f330:	f04f 0340 	mov.w	r3, #64	; 0x40
    f334:	f3ef 8211 	mrs	r2, BASEPRI
    f338:	f383 8812 	msr	BASEPRI_MAX, r3
    f33c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    f340:	4b09      	ldr	r3, [pc, #36]	; (f368 <random_byte_get+0x38>)
    f342:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    f346:	b161      	cbz	r1, f362 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    f348:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    f34a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    f34e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    f352:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    f356:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    f358:	f382 8811 	msr	BASEPRI, r2
    f35c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    f360:	4770      	bx	lr
	int retval = -EAGAIN;
    f362:	f06f 000a 	mvn.w	r0, #10
    f366:	e7f7      	b.n	f358 <random_byte_get+0x28>
    f368:	4000d000 	.word	0x4000d000

0000f36c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    f36c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f36e:	4603      	mov	r3, r0
    f370:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    f372:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    f374:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    f378:	f04f 0540 	mov.w	r5, #64	; 0x40
    f37c:	f3ef 8211 	mrs	r2, BASEPRI
    f380:	f385 8812 	msr	BASEPRI_MAX, r5
    f384:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    f388:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    f38a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    f38e:	1be4      	subs	r4, r4, r7
    f390:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    f394:	42a0      	cmp	r0, r4
		len = available;
    f396:	bf88      	it	hi
    f398:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    f39a:	183e      	adds	r6, r7, r0
    f39c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    f3a0:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    f3a2:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    f3a4:	f382 8811 	msr	BASEPRI, r2
    f3a8:	f3bf 8f6f 	isb	sy
    f3ac:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    f3ae:	428a      	cmp	r2, r1
    f3b0:	d117      	bne.n	f3e2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    f3b2:	4577      	cmp	r7, lr
    f3b4:	d10d      	bne.n	f3d2 <rng_pool_get+0x66>
	__asm__ volatile(
    f3b6:	f04f 0140 	mov.w	r1, #64	; 0x40
    f3ba:	f3ef 8211 	mrs	r2, BASEPRI
    f3be:	f381 8812 	msr	BASEPRI_MAX, r1
    f3c2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    f3c6:	7819      	ldrb	r1, [r3, #0]
    f3c8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    f3ca:	f382 8811 	msr	BASEPRI, r2
    f3ce:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    f3d2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    f3d4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    f3d6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    f3d8:	bf22      	ittt	cs
    f3da:	4b06      	ldrcs	r3, [pc, #24]	; (f3f4 <rng_pool_get+0x88>)
    f3dc:	2201      	movcs	r2, #1
    f3de:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    f3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    f3e2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    f3e4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    f3e6:	7976      	ldrb	r6, [r6, #5]
    f3e8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    f3ec:	ea05 050c 	and.w	r5, r5, ip
    f3f0:	e7dd      	b.n	f3ae <rng_pool_get+0x42>
    f3f2:	bf00      	nop
    f3f4:	4000d000 	.word	0x4000d000

0000f3f8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    f3f8:	43db      	mvns	r3, r3
{
    f3fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    f3fe:	f013 0501 	ands.w	r5, r3, #1
{
    f402:	460e      	mov	r6, r1
    f404:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    f406:	d004      	beq.n	f412 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    f408:	4823      	ldr	r0, [pc, #140]	; (f498 <entropy_nrf5_get_entropy_isr+0xa0>)
    f40a:	f7ff ffaf 	bl	f36c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    f40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    f412:	b3a2      	cbz	r2, f47e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    f414:	f04f 0340 	mov.w	r3, #64	; 0x40
    f418:	f3ef 8811 	mrs	r8, BASEPRI
    f41c:	f383 8812 	msr	BASEPRI_MAX, r3
    f420:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    f424:	200d      	movs	r0, #13
    f426:	f7fd f9f5 	bl	c814 <arch_irq_is_enabled>
    f42a:	4607      	mov	r7, r0
		irq_disable(IRQN);
    f42c:	200d      	movs	r0, #13
    f42e:	f7fd f9dd 	bl	c7ec <arch_irq_disable>
	__asm__ volatile(
    f432:	f388 8811 	msr	BASEPRI, r8
    f436:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    f43a:	f8df a060 	ldr.w	sl, [pc, #96]	; f49c <entropy_nrf5_get_entropy_isr+0xa4>
    f43e:	f8df 8060 	ldr.w	r8, [pc, #96]	; f4a0 <entropy_nrf5_get_entropy_isr+0xa8>
    f442:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
    f446:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
    f44a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    f44e:	2301      	movs	r3, #1
    f450:	f8ca 3000 	str.w	r3, [sl]
    f454:	4625      	mov	r5, r4
    f456:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    f45a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    f45e:	b183      	cbz	r3, f482 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    f460:	f7ff ff66 	bl	f330 <random_byte_get>
			if (byte < 0) {
    f464:	1e03      	subs	r3, r0, #0
    f466:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    f46a:	dbf6      	blt.n	f45a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    f46c:	3d01      	subs	r5, #1
    f46e:	b2ad      	uxth	r5, r5
    f470:	5573      	strb	r3, [r6, r5]
		} while (len);
    f472:	2d00      	cmp	r5, #0
    f474:	d1f1      	bne.n	f45a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    f476:	b117      	cbz	r7, f47e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    f478:	200d      	movs	r0, #13
    f47a:	f7fd f9a9 	bl	c7d0 <arch_irq_enable>
	return cnt;
    f47e:	4620      	mov	r0, r4
    f480:	e7c5      	b.n	f40e <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
    f482:	f04f 0340 	mov.w	r3, #64	; 0x40
    f486:	f3ef 8011 	mrs	r0, BASEPRI
    f48a:	f383 8812 	msr	BASEPRI_MAX, r3
    f48e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
    f492:	f7fd f92b 	bl	c6ec <arch_cpu_atomic_idle>
}
    f496:	e7e0      	b.n	f45a <entropy_nrf5_get_entropy_isr+0x62>
    f498:	200024c4 	.word	0x200024c4
    f49c:	4000d000 	.word	0x4000d000
    f4a0:	e000e100 	.word	0xe000e100

0000f4a4 <entropy_nrf5_get_entropy>:
{
    f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    f4a8:	4f12      	ldr	r7, [pc, #72]	; (f4f4 <entropy_nrf5_get_entropy+0x50>)
    f4aa:	460d      	mov	r5, r1
    f4ac:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    f4ae:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
    f4b2:	b914      	cbnz	r4, f4ba <entropy_nrf5_get_entropy+0x16>
}
    f4b4:	4620      	mov	r0, r4
    f4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f4ba:	f04f 33ff 	mov.w	r3, #4294967295
    f4be:	f04f 32ff 	mov.w	r2, #4294967295
    f4c2:	4638      	mov	r0, r7
    f4c4:	f003 f9f8 	bl	128b8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    f4c8:	4622      	mov	r2, r4
    f4ca:	4629      	mov	r1, r5
    f4cc:	4640      	mov	r0, r8
    f4ce:	f7ff ff4d 	bl	f36c <rng_pool_get>
    f4d2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    f4d4:	4638      	mov	r0, r7
    f4d6:	f003 f9c9 	bl	1286c <z_impl_k_sem_give>
		if (bytes == 0U) {
    f4da:	b93e      	cbnz	r6, f4ec <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    f4dc:	f04f 32ff 	mov.w	r2, #4294967295
    f4e0:	f04f 33ff 	mov.w	r3, #4294967295
    f4e4:	4804      	ldr	r0, [pc, #16]	; (f4f8 <entropy_nrf5_get_entropy+0x54>)
    f4e6:	f003 f9e7 	bl	128b8 <z_impl_k_sem_take>
	while (len) {
    f4ea:	e7e6      	b.n	f4ba <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    f4ec:	1ba4      	subs	r4, r4, r6
    f4ee:	b2a4      	uxth	r4, r4
		buf += bytes;
    f4f0:	4435      	add	r5, r6
    f4f2:	e7de      	b.n	f4b2 <entropy_nrf5_get_entropy+0xe>
    f4f4:	20002494 	.word	0x20002494
    f4f8:	200024ac 	.word	0x200024ac

0000f4fc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    f4fc:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    f4fe:	4c19      	ldr	r4, [pc, #100]	; (f564 <entropy_nrf5_init+0x68>)
    f500:	2201      	movs	r2, #1
    f502:	4611      	mov	r1, r2
    f504:	4620      	mov	r0, r4
    f506:	f008 fd29 	bl	17f5c <z_impl_k_sem_init>
    f50a:	2201      	movs	r2, #1
    f50c:	2100      	movs	r1, #0
    f50e:	f104 0018 	add.w	r0, r4, #24
    f512:	f008 fd23 	bl	17f5c <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    f516:	f240 4307 	movw	r3, #1031	; 0x407
    f51a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    f51e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    f522:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    f524:	230c      	movs	r3, #12
    f526:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    f52a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    f52c:	4b0e      	ldr	r3, [pc, #56]	; (f568 <entropy_nrf5_init+0x6c>)
    f52e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    f532:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    f536:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    f53a:	f022 0201 	bic.w	r2, r2, #1
    f53e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    f542:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    f544:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    f548:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    f54c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    f550:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    f552:	6019      	str	r1, [r3, #0]
    f554:	200d      	movs	r0, #13
    f556:	f7fd f96b 	bl	c830 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    f55a:	200d      	movs	r0, #13
    f55c:	f7fd f938 	bl	c7d0 <arch_irq_enable>

	return 0;
}
    f560:	4628      	mov	r0, r5
    f562:	bd38      	pop	{r3, r4, r5, pc}
    f564:	20002494 	.word	0x20002494
    f568:	4000d000 	.word	0x4000d000

0000f56c <isr>:
{
    f56c:	b510      	push	{r4, lr}
	byte = random_byte_get();
    f56e:	f7ff fedf 	bl	f330 <random_byte_get>
	if (byte < 0) {
    f572:	2800      	cmp	r0, #0
    f574:	db20      	blt.n	f5b8 <isr+0x4c>
	uint8_t last  = rngp->last;
    f576:	4b17      	ldr	r3, [pc, #92]	; (f5d4 <isr+0x68>)
    f578:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    f57c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    f580:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    f584:	1b14      	subs	r4, r2, r4
    f586:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    f58a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    f58c:	d10d      	bne.n	f5aa <isr+0x3e>
	uint8_t last  = rngp->last;
    f58e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    f592:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    f596:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    f59a:	1b14      	subs	r4, r2, r4
    f59c:	ea31 0404 	bics.w	r4, r1, r4
    f5a0:	d10b      	bne.n	f5ba <isr+0x4e>
    f5a2:	4b0d      	ldr	r3, [pc, #52]	; (f5d8 <isr+0x6c>)
    f5a4:	2201      	movs	r2, #1
    f5a6:	605a      	str	r2, [r3, #4]
}
    f5a8:	e00e      	b.n	f5c8 <isr+0x5c>
	rngp->buffer[last] = byte;
    f5aa:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    f5ac:	3201      	adds	r2, #1
    f5ae:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    f5b0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    f5b4:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
    f5b8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    f5ba:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    f5bc:	3201      	adds	r2, #1
    f5be:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    f5c0:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    f5c4:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    f5c8:	4804      	ldr	r0, [pc, #16]	; (f5dc <isr+0x70>)
}
    f5ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5ce:	f003 b94d 	b.w	1286c <z_impl_k_sem_give>
    f5d2:	bf00      	nop
    f5d4:	20002494 	.word	0x20002494
    f5d8:	4000d000 	.word	0x4000d000
    f5dc:	200024ac 	.word	0x200024ac

0000f5e0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    f5e0:	b530      	push	{r4, r5, lr}
	return port->config;
    f5e2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f5e4:	7b05      	ldrb	r5, [r0, #12]
    f5e6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    f5ea:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    f5ee:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    f5f0:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    f5f4:	d105      	bne.n	f602 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    f5f6:	4620      	mov	r0, r4
    f5f8:	f002 fbf4 	bl	11de4 <nrfx_gpiote_trigger_disable>

		return 0;
    f5fc:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    f5fe:	b005      	add	sp, #20
    f600:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    f602:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    f604:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    f608:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    f60c:	d114      	bne.n	f638 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    f60e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    f612:	bf0c      	ite	eq
    f614:	2304      	moveq	r3, #4
    f616:	2305      	movne	r3, #5
    f618:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f61c:	2300      	movs	r3, #0
    f61e:	4619      	mov	r1, r3
    f620:	aa02      	add	r2, sp, #8
    f622:	4620      	mov	r0, r4
    f624:	f002 fa1c 	bl	11a60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    f628:	4b1f      	ldr	r3, [pc, #124]	; (f6a8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    f62a:	4298      	cmp	r0, r3
    f62c:	d139      	bne.n	f6a2 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    f62e:	2101      	movs	r1, #1
    f630:	4620      	mov	r0, r4
    f632:	f002 fb8f 	bl	11d54 <nrfx_gpiote_trigger_enable>
	return 0;
    f636:	e7e1      	b.n	f5fc <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f638:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    f63c:	d026      	beq.n	f68c <gpio_nrfx_pin_interrupt_configure+0xac>
    f63e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    f642:	bf14      	ite	ne
    f644:	2301      	movne	r3, #1
    f646:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    f648:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    f64c:	6883      	ldr	r3, [r0, #8]
    f64e:	40cb      	lsrs	r3, r1
    f650:	07d9      	lsls	r1, r3, #31
    f652:	d4e3      	bmi.n	f61c <gpio_nrfx_pin_interrupt_configure+0x3c>
    f654:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    f658:	d1e0      	bne.n	f61c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    f65a:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    f65c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    f65e:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    f662:	4a12      	ldr	r2, [pc, #72]	; (f6ac <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f664:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    f668:	bf18      	it	ne
    f66a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    f66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    f672:	07db      	lsls	r3, r3, #31
    f674:	d4d2      	bmi.n	f61c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f676:	f10d 0507 	add.w	r5, sp, #7
    f67a:	4629      	mov	r1, r5
    f67c:	4620      	mov	r0, r4
    f67e:	f002 fb15 	bl	11cac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    f682:	4b0b      	ldr	r3, [pc, #44]	; (f6b0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    f684:	4298      	cmp	r0, r3
    f686:	d003      	beq.n	f690 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    f688:	9503      	str	r5, [sp, #12]
    f68a:	e7c7      	b.n	f61c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f68c:	2303      	movs	r3, #3
    f68e:	e7db      	b.n	f648 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    f690:	4628      	mov	r0, r5
    f692:	f002 fb59 	bl	11d48 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    f696:	4b04      	ldr	r3, [pc, #16]	; (f6a8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    f698:	4298      	cmp	r0, r3
    f69a:	d0f5      	beq.n	f688 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    f69c:	f06f 000b 	mvn.w	r0, #11
    f6a0:	e7ad      	b.n	f5fe <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    f6a2:	f06f 0015 	mvn.w	r0, #21
    f6a6:	e7aa      	b.n	f5fe <gpio_nrfx_pin_interrupt_configure+0x1e>
    f6a8:	0bad0000 	.word	0x0bad0000
    f6ac:	50000300 	.word	0x50000300
    f6b0:	0bad0004 	.word	0x0bad0004

0000f6b4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    f6b4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    f6b6:	f002 fb37 	bl	11d28 <nrfx_gpiote_is_init>
    f6ba:	4604      	mov	r4, r0
    f6bc:	b968      	cbnz	r0, f6da <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    f6be:	f002 fb0b 	bl	11cd8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    f6c2:	4b08      	ldr	r3, [pc, #32]	; (f6e4 <gpio_nrfx_init+0x30>)
    f6c4:	4298      	cmp	r0, r3
    f6c6:	d10a      	bne.n	f6de <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    f6c8:	4807      	ldr	r0, [pc, #28]	; (f6e8 <gpio_nrfx_init+0x34>)
    f6ca:	4621      	mov	r1, r4
    f6cc:	f002 fae8 	bl	11ca0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    f6d0:	4622      	mov	r2, r4
    f6d2:	2105      	movs	r1, #5
    f6d4:	2006      	movs	r0, #6
    f6d6:	f7fd f8ab 	bl	c830 <z_arm_irq_priority_set>
		return 0;
    f6da:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    f6dc:	bd10      	pop	{r4, pc}
		return -EIO;
    f6de:	f06f 0004 	mvn.w	r0, #4
    f6e2:	e7fb      	b.n	f6dc <gpio_nrfx_init+0x28>
    f6e4:	0bad0000 	.word	0x0bad0000
    f6e8:	0000f6ed 	.word	0x0000f6ed

0000f6ec <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f6ec:	0942      	lsrs	r2, r0, #5
{
    f6ee:	b570      	push	{r4, r5, r6, lr}
    f6f0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f6f2:	d002      	beq.n	f6fa <nrfx_gpio_handler+0xe>
    f6f4:	2a01      	cmp	r2, #1
    f6f6:	d017      	beq.n	f728 <nrfx_gpio_handler+0x3c>
}
    f6f8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f6fa:	4e0d      	ldr	r6, [pc, #52]	; (f730 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    f6fc:	6932      	ldr	r2, [r6, #16]
    f6fe:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f700:	2900      	cmp	r1, #0
    f702:	d0f9      	beq.n	f6f8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    f704:	f003 031f 	and.w	r3, r3, #31
    f708:	2501      	movs	r5, #1
	return node->next;
    f70a:	680c      	ldr	r4, [r1, #0]
    f70c:	409d      	lsls	r5, r3
    f70e:	2900      	cmp	r1, #0
    f710:	d0f2      	beq.n	f6f8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    f712:	688a      	ldr	r2, [r1, #8]
    f714:	402a      	ands	r2, r5
    f716:	d002      	beq.n	f71e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    f718:	684b      	ldr	r3, [r1, #4]
    f71a:	4630      	mov	r0, r6
    f71c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    f71e:	b12c      	cbz	r4, f72c <nrfx_gpio_handler+0x40>
    f720:	6823      	ldr	r3, [r4, #0]
    f722:	4621      	mov	r1, r4
    f724:	461c      	mov	r4, r3
    f726:	e7f2      	b.n	f70e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    f728:	4e02      	ldr	r6, [pc, #8]	; (f734 <nrfx_gpio_handler+0x48>)
    f72a:	e7e7      	b.n	f6fc <nrfx_gpio_handler+0x10>
    f72c:	4623      	mov	r3, r4
    f72e:	e7f8      	b.n	f722 <nrfx_gpio_handler+0x36>
    f730:	000187bc 	.word	0x000187bc
    f734:	000187a4 	.word	0x000187a4

0000f738 <gpio_nrfx_pin_configure>:
{
    f738:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    f73c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    f73e:	7b3b      	ldrb	r3, [r7, #12]
    f740:	f001 051f 	and.w	r5, r1, #31
    f744:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    f748:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f74a:	4628      	mov	r0, r5
    f74c:	f10d 0103 	add.w	r1, sp, #3
{
    f750:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f752:	f002 faab 	bl	11cac <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    f756:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    f75a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    f75c:	d10b      	bne.n	f776 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    f75e:	4628      	mov	r0, r5
    f760:	f002 fb68 	bl	11e34 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    f764:	4b3d      	ldr	r3, [pc, #244]	; (f85c <gpio_nrfx_pin_configure+0x124>)
    f766:	4598      	cmp	r8, r3
    f768:	d103      	bne.n	f772 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    f76a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f76e:	f002 fae5 	bl	11d3c <nrfx_gpiote_channel_free>
		return 0;
    f772:	2000      	movs	r0, #0
    f774:	e00c      	b.n	f790 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    f776:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f778:	4619      	mov	r1, r3
    f77a:	aa02      	add	r2, sp, #8
    f77c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    f77e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    f782:	f002 f96d 	bl	11a60 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    f786:	4b35      	ldr	r3, [pc, #212]	; (f85c <gpio_nrfx_pin_configure+0x124>)
    f788:	4298      	cmp	r0, r3
    f78a:	d004      	beq.n	f796 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    f78c:	f06f 0015 	mvn.w	r0, #21
}
    f790:	b004      	add	sp, #16
    f792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    f796:	4580      	cmp	r8, r0
    f798:	d103      	bne.n	f7a2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    f79a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f79e:	f002 facd 	bl	11d3c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    f7a2:	03a3      	lsls	r3, r4, #14
    f7a4:	d54b      	bpl.n	f83e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f7a6:	f240 3306 	movw	r3, #774	; 0x306
    f7aa:	4023      	ands	r3, r4
    f7ac:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    f7b0:	d019      	beq.n	f7e6 <gpio_nrfx_pin_configure+0xae>
    f7b2:	d80c      	bhi.n	f7ce <gpio_nrfx_pin_configure+0x96>
    f7b4:	2b06      	cmp	r3, #6
    f7b6:	d017      	beq.n	f7e8 <gpio_nrfx_pin_configure+0xb0>
    f7b8:	d804      	bhi.n	f7c4 <gpio_nrfx_pin_configure+0x8c>
    f7ba:	b1ab      	cbz	r3, f7e8 <gpio_nrfx_pin_configure+0xb0>
    f7bc:	2b02      	cmp	r3, #2
    f7be:	d1e5      	bne.n	f78c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    f7c0:	2304      	movs	r3, #4
    f7c2:	e011      	b.n	f7e8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    f7c8:	d1e0      	bne.n	f78c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    f7ca:	2301      	movs	r3, #1
    f7cc:	e00c      	b.n	f7e8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f7ce:	f240 2202 	movw	r2, #514	; 0x202
    f7d2:	4293      	cmp	r3, r2
    f7d4:	d027      	beq.n	f826 <gpio_nrfx_pin_configure+0xee>
    f7d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    f7da:	d026      	beq.n	f82a <gpio_nrfx_pin_configure+0xf2>
    f7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    f7e0:	d1d4      	bne.n	f78c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    f7e2:	2302      	movs	r3, #2
    f7e4:	e000      	b.n	f7e8 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    f7e6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    f7e8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    f7ec:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    f7f0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    f7f4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    f7f6:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    f7fa:	bf54      	ite	pl
    f7fc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    f800:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    f802:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    f804:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    f808:	d511      	bpl.n	f82e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    f80a:	687a      	ldr	r2, [r7, #4]
    f80c:	2301      	movs	r3, #1
    f80e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    f810:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    f814:	2200      	movs	r2, #0
    f816:	a901      	add	r1, sp, #4
    f818:	4628      	mov	r0, r5
    f81a:	f002 f9cf 	bl	11bbc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    f81e:	4b0f      	ldr	r3, [pc, #60]	; (f85c <gpio_nrfx_pin_configure+0x124>)
    f820:	4298      	cmp	r0, r3
    f822:	d0a6      	beq.n	f772 <gpio_nrfx_pin_configure+0x3a>
    f824:	e7b2      	b.n	f78c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    f826:	2305      	movs	r3, #5
    f828:	e7de      	b.n	f7e8 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    f82a:	2303      	movs	r3, #3
    f82c:	e7dc      	b.n	f7e8 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    f82e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    f830:	bf41      	itttt	mi
    f832:	2301      	movmi	r3, #1
    f834:	687a      	ldrmi	r2, [r7, #4]
    f836:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    f838:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    f83c:	e7ea      	b.n	f814 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    f83e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f840:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    f844:	bf54      	ite	pl
    f846:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    f84a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f84c:	461a      	mov	r2, r3
    f84e:	a901      	add	r1, sp, #4
    f850:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    f852:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    f856:	f002 f903 	bl	11a60 <nrfx_gpiote_input_configure>
    f85a:	e7e0      	b.n	f81e <gpio_nrfx_pin_configure+0xe6>
    f85c:	0bad0000 	.word	0x0bad0000

0000f860 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    f860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    f864:	4e5a      	ldr	r6, [pc, #360]	; (f9d0 <pinctrl_configure_pins+0x170>)
    f866:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f86a:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    f86c:	4281      	cmp	r1, r0
    f86e:	d102      	bne.n	f876 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    f870:	2000      	movs	r0, #0
}
    f872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    f876:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    f878:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    f87c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    f880:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    f882:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    f886:	bf08      	it	eq
    f888:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    f88c:	2c22      	cmp	r4, #34	; 0x22
    f88e:	f200 809b 	bhi.w	f9c8 <pinctrl_configure_pins+0x168>
    f892:	e8df f004 	tbb	[pc, r4]
    f896:	2412      	.short	0x2412
    f898:	402c4429 	.word	0x402c4429
    f89c:	99999944 	.word	0x99999944
    f8a0:	99704799 	.word	0x99704799
    f8a4:	99999999 	.word	0x99999999
    f8a8:	99999999 	.word	0x99999999
    f8ac:	817e7b73 	.word	0x817e7b73
    f8b0:	84999999 	.word	0x84999999
    f8b4:	93908d8a 	.word	0x93908d8a
    f8b8:	96          	.byte	0x96
    f8b9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    f8ba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    f8be:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    f8c2:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    f8c6:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    f8ca:	bf14      	ite	ne
    f8cc:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    f8d0:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    f8d2:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    f8d6:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    f8da:	2401      	movs	r4, #1
    f8dc:	e002      	b.n	f8e4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    f8de:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    f8e2:	2400      	movs	r4, #0
    f8e4:	46a6      	mov	lr, r4
    f8e6:	e024      	b.n	f932 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    f8e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    f8ec:	e7e7      	b.n	f8be <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    f8ee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    f8f2:	2400      	movs	r4, #0
    return pin_number >> 5;
    f8f4:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    f8f8:	f1be 0f01 	cmp.w	lr, #1
    f8fc:	bf14      	ite	ne
    f8fe:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    f902:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    f904:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    f908:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    f90c:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    f910:	f04f 0e01 	mov.w	lr, #1
    f914:	e00d      	b.n	f932 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    f916:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    f91a:	2401      	movs	r4, #1
    f91c:	e7ea      	b.n	f8f4 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    f91e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    f922:	e7de      	b.n	f8e2 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    f924:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    f928:	2d00      	cmp	r5, #0
    f92a:	d1da      	bne.n	f8e2 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    f92c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    f92e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    f930:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    f932:	f850 cb04 	ldr.w	ip, [r0], #4
    f936:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    f93a:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    f93e:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    f942:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    f946:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    f94a:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    f94e:	bf1c      	itt	ne
    f950:	2401      	movne	r4, #1
    f952:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f956:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    f95a:	2b01      	cmp	r3, #1
    f95c:	bf0c      	ite	eq
    f95e:	4633      	moveq	r3, r6
    f960:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f964:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    f968:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    f96c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    f970:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    f974:	e77a      	b.n	f86c <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    f976:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    f97a:	e7d5      	b.n	f928 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    f97c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    f980:	6804      	ldr	r4, [r0, #0]
    f982:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    f986:	2c00      	cmp	r4, #0
    f988:	d0c7      	beq.n	f91a <pinctrl_configure_pins+0xba>
    f98a:	e798      	b.n	f8be <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    f98c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    f990:	e7f6      	b.n	f980 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    f992:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    f996:	e7f3      	b.n	f980 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    f998:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    f99c:	e7f0      	b.n	f980 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    f99e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    f9a2:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    f9a4:	f04f 0e00 	mov.w	lr, #0
    f9a8:	e7c3      	b.n	f932 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    f9aa:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    f9ae:	e786      	b.n	f8be <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    f9b0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    f9b4:	e7f5      	b.n	f9a2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    f9b6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    f9ba:	e7f2      	b.n	f9a2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    f9bc:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    f9c0:	e7ef      	b.n	f9a2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    f9c2:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    f9c6:	e7ec      	b.n	f9a2 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    f9c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f9cc:	e751      	b.n	f872 <pinctrl_configure_pins+0x12>
    f9ce:	bf00      	nop
    f9d0:	50000300 	.word	0x50000300

0000f9d4 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    f9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f9d6:	461d      	mov	r5, r3
	return config->uarte_regs;
    f9d8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    f9da:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    f9dc:	f8d3 c000 	ldr.w	ip, [r3]
{
    f9e0:	4606      	mov	r6, r0
    f9e2:	f04f 0340 	mov.w	r3, #64	; 0x40
    f9e6:	f3ef 8711 	mrs	r7, BASEPRI
    f9ea:	f383 8812 	msr	BASEPRI_MAX, r3
    f9ee:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
    f9f2:	68e3      	ldr	r3, [r4, #12]
    f9f4:	68d8      	ldr	r0, [r3, #12]
    f9f6:	b138      	cbz	r0, fa08 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
    f9f8:	f387 8811 	msr	BASEPRI, r7
    f9fc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    fa00:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    fa04:	b003      	add	sp, #12
    fa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
    fa08:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
    fa0a:	68e3      	ldr	r3, [r4, #12]
    fa0c:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    fa0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    fa12:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    fa16:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    fa1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    fa1e:	68e3      	ldr	r3, [r4, #12]
    fa20:	d111      	bne.n	fa46 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    fa22:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    fa24:	68e3      	ldr	r3, [r4, #12]
    fa26:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    fa28:	4621      	mov	r1, r4
    fa2a:	4630      	mov	r0, r6
    fa2c:	f007 fedd 	bl	177ea <start_tx_locked>
    fa30:	f387 8811 	msr	BASEPRI, r7
    fa34:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    fa38:	7ae3      	ldrb	r3, [r4, #11]
    fa3a:	2b01      	cmp	r3, #1
    fa3c:	d101      	bne.n	fa42 <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
    fa3e:	1c6b      	adds	r3, r5, #1
    fa40:	d106      	bne.n	fa50 <uarte_nrfx_tx+0x7c>
	return 0;
    fa42:	2000      	movs	r0, #0
    fa44:	e7de      	b.n	fa04 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
    fa46:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
    fa48:	4620      	mov	r0, r4
    fa4a:	f007 fe48 	bl	176de <setup_tx_cache>
    fa4e:	e7eb      	b.n	fa28 <uarte_nrfx_tx+0x54>
			return ((t * to_hz + off) / from_hz);
    fa50:	480b      	ldr	r0, [pc, #44]	; (fa80 <uarte_nrfx_tx+0xac>)
    fa52:	4a0c      	ldr	r2, [pc, #48]	; (fa84 <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    fa54:	68e4      	ldr	r4, [r4, #12]
    fa56:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    fa5a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    fa5e:	2100      	movs	r1, #0
    fa60:	2300      	movs	r3, #0
    fa62:	fbc5 0106 	smlal	r0, r1, r5, r6
    fa66:	f7f0 fb4b 	bl	100 <__aeabi_uldivmod>
    fa6a:	3420      	adds	r4, #32
    fa6c:	4602      	mov	r2, r0
    fa6e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    fa70:	2000      	movs	r0, #0
    fa72:	2100      	movs	r1, #0
    fa74:	e9cd 0100 	strd	r0, r1, [sp]
    fa78:	4620      	mov	r0, r4
    fa7a:	f003 fdfd 	bl	13678 <z_impl_k_timer_start>
    fa7e:	e7e0      	b.n	fa42 <uarte_nrfx_tx+0x6e>
    fa80:	000f423f 	.word	0x000f423f
    fa84:	000f4240 	.word	0x000f4240

0000fa88 <uarte_nrfx_configure>:
{
    fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    fa8a:	794b      	ldrb	r3, [r1, #5]
    fa8c:	2b01      	cmp	r3, #1
    fa8e:	d026      	beq.n	fade <uarte_nrfx_configure+0x56>
    fa90:	2b03      	cmp	r3, #3
    fa92:	d121      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    fa94:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    fa96:	798b      	ldrb	r3, [r1, #6]
    fa98:	2b03      	cmp	r3, #3
    fa9a:	d11d      	bne.n	fad8 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    fa9c:	79ce      	ldrb	r6, [r1, #7]
    fa9e:	b10e      	cbz	r6, faa4 <uarte_nrfx_configure+0x1c>
    faa0:	2e01      	cmp	r6, #1
    faa2:	d119      	bne.n	fad8 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    faa4:	790a      	ldrb	r2, [r1, #4]
    faa6:	b112      	cbz	r2, faae <uarte_nrfx_configure+0x26>
    faa8:	2a02      	cmp	r2, #2
    faaa:	d115      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    faac:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    faae:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    fab0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    fab2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    fab6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    fab8:	d067      	beq.n	fb8a <uarte_nrfx_configure+0x102>
    faba:	d82d      	bhi.n	fb18 <uarte_nrfx_configure+0x90>
    fabc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    fac0:	d066      	beq.n	fb90 <uarte_nrfx_configure+0x108>
    fac2:	d816      	bhi.n	faf2 <uarte_nrfx_configure+0x6a>
    fac4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    fac8:	d064      	beq.n	fb94 <uarte_nrfx_configure+0x10c>
    faca:	d80a      	bhi.n	fae2 <uarte_nrfx_configure+0x5a>
    facc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    fad0:	d063      	beq.n	fb9a <uarte_nrfx_configure+0x112>
    fad2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    fad6:	d063      	beq.n	fba0 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    fad8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fadc:	e054      	b.n	fb88 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    fade:	2500      	movs	r5, #0
    fae0:	e7d9      	b.n	fa96 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    fae2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    fae6:	d05e      	beq.n	fba6 <uarte_nrfx_configure+0x11e>
    fae8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    faec:	d1f4      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    faee:	4b38      	ldr	r3, [pc, #224]	; (fbd0 <uarte_nrfx_configure+0x148>)
    faf0:	e03c      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    faf2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    faf6:	d059      	beq.n	fbac <uarte_nrfx_configure+0x124>
    faf8:	d807      	bhi.n	fb0a <uarte_nrfx_configure+0x82>
    fafa:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    fafe:	d057      	beq.n	fbb0 <uarte_nrfx_configure+0x128>
    fb00:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    fb04:	d1e8      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    fb06:	4b33      	ldr	r3, [pc, #204]	; (fbd4 <uarte_nrfx_configure+0x14c>)
    fb08:	e030      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    fb0a:	f647 2412 	movw	r4, #31250	; 0x7a12
    fb0e:	42a3      	cmp	r3, r4
    fb10:	d1e2      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    fb12:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    fb16:	e029      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    fb18:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    fb1c:	d04a      	beq.n	fbb4 <uarte_nrfx_configure+0x12c>
    fb1e:	d813      	bhi.n	fb48 <uarte_nrfx_configure+0xc0>
    fb20:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    fb24:	d049      	beq.n	fbba <uarte_nrfx_configure+0x132>
    fb26:	d809      	bhi.n	fb3c <uarte_nrfx_configure+0xb4>
    fb28:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    fb2c:	42a3      	cmp	r3, r4
    fb2e:	d046      	beq.n	fbbe <uarte_nrfx_configure+0x136>
    fb30:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    fb34:	d1d0      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    fb36:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    fb3a:	e017      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    fb3c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    fb40:	d1ca      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    fb42:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    fb46:	e011      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    fb48:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    fb4c:	d03a      	beq.n	fbc4 <uarte_nrfx_configure+0x13c>
    fb4e:	d808      	bhi.n	fb62 <uarte_nrfx_configure+0xda>
    fb50:	4c21      	ldr	r4, [pc, #132]	; (fbd8 <uarte_nrfx_configure+0x150>)
    fb52:	42a3      	cmp	r3, r4
    fb54:	d039      	beq.n	fbca <uarte_nrfx_configure+0x142>
    fb56:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    fb5a:	d1bd      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    fb5c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    fb60:	e004      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    fb62:	4c1e      	ldr	r4, [pc, #120]	; (fbdc <uarte_nrfx_configure+0x154>)
    fb64:	42a3      	cmp	r3, r4
    fb66:	d1b7      	bne.n	fad8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    fb68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    fb6c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    fb6e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    fb72:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    fb74:	4335      	orrs	r5, r6
    fb76:	681b      	ldr	r3, [r3, #0]
    fb78:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    fb7a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
    fb7e:	c903      	ldmia	r1, {r0, r1}
    fb80:	1d23      	adds	r3, r4, #4
    fb82:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    fb86:	2000      	movs	r0, #0
}
    fb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    fb8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    fb8e:	e7ed      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    fb90:	4b13      	ldr	r3, [pc, #76]	; (fbe0 <uarte_nrfx_configure+0x158>)
    fb92:	e7eb      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    fb94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    fb98:	e7e8      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    fb9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    fb9e:	e7e5      	b.n	fb6c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    fba0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    fba4:	e7e2      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    fba6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    fbaa:	e7df      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    fbac:	4b0d      	ldr	r3, [pc, #52]	; (fbe4 <uarte_nrfx_configure+0x15c>)
    fbae:	e7dd      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    fbb0:	4b0d      	ldr	r3, [pc, #52]	; (fbe8 <uarte_nrfx_configure+0x160>)
    fbb2:	e7db      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    fbb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    fbb8:	e7d8      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    fbba:	4b0c      	ldr	r3, [pc, #48]	; (fbec <uarte_nrfx_configure+0x164>)
    fbbc:	e7d6      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    fbbe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    fbc2:	e7d3      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    fbc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    fbc8:	e7d0      	b.n	fb6c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    fbca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    fbce:	e7cd      	b.n	fb6c <uarte_nrfx_configure+0xe4>
    fbd0:	0013b000 	.word	0x0013b000
    fbd4:	004ea000 	.word	0x004ea000
    fbd8:	0003d090 	.word	0x0003d090
    fbdc:	000f4240 	.word	0x000f4240
    fbe0:	00275000 	.word	0x00275000
    fbe4:	0075c000 	.word	0x0075c000
    fbe8:	003af000 	.word	0x003af000
    fbec:	013a9000 	.word	0x013a9000

0000fbf0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    fbf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fbf4:	2200      	movs	r2, #0
    fbf6:	b087      	sub	sp, #28
    fbf8:	4607      	mov	r7, r0
    fbfa:	2101      	movs	r1, #1
    fbfc:	2002      	movs	r0, #2
    fbfe:	f7fc fe17 	bl	c830 <z_arm_irq_priority_set>
    fc02:	2002      	movs	r0, #2
    fc04:	f7fc fde4 	bl	c7d0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    fc08:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    fc0c:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    fc0e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    fc12:	2100      	movs	r1, #0
    fc14:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    fc18:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    fc1a:	f8d8 900c 	ldr.w	r9, [r8, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    fc1e:	466a      	mov	r2, sp
    fc20:	4648      	mov	r0, r9
    fc22:	f007 fc57 	bl	174d4 <pinctrl_lookup_state>
	if (ret < 0) {
    fc26:	1e05      	subs	r5, r0, #0
    fc28:	db26      	blt.n	fc78 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    fc2a:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    fc2c:	f8d9 2000 	ldr.w	r2, [r9]
    fc30:	7919      	ldrb	r1, [r3, #4]
    fc32:	6818      	ldr	r0, [r3, #0]
    fc34:	f7ff fe14 	bl	f860 <pinctrl_configure_pins>
	if (err < 0) {
    fc38:	1e05      	subs	r5, r0, #0
    fc3a:	db1d      	blt.n	fc78 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    fc3c:	1d31      	adds	r1, r6, #4
    fc3e:	4638      	mov	r0, r7
    fc40:	f7ff ff22 	bl	fa88 <uarte_nrfx_configure>
	if (err) {
    fc44:	4605      	mov	r5, r0
    fc46:	b9b8      	cbnz	r0, fc78 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    fc48:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    fc4c:	0799      	lsls	r1, r3, #30
    fc4e:	d52b      	bpl.n	fca8 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    fc50:	f106 001c 	add.w	r0, r6, #28
    fc54:	f002 f9f0 	bl	12038 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    fc58:	4b4b      	ldr	r3, [pc, #300]	; (fd88 <uarte_0_init+0x198>)
    fc5a:	4298      	cmp	r0, r3
    fc5c:	d010      	beq.n	fc80 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    fc5e:	4b4b      	ldr	r3, [pc, #300]	; (fd8c <uarte_0_init+0x19c>)
    fc60:	9305      	str	r3, [sp, #20]
    fc62:	2302      	movs	r3, #2
    fc64:	9304      	str	r3, [sp, #16]
    fc66:	484a      	ldr	r0, [pc, #296]	; (fd90 <uarte_0_init+0x1a0>)
    fc68:	462b      	mov	r3, r5
    fc6a:	aa04      	add	r2, sp, #16
    fc6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    fc70:	f06f 0504 	mvn.w	r5, #4
    fc74:	f7fb ff90 	bl	bb98 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    fc78:	4628      	mov	r0, r5
    fc7a:	b007      	add	sp, #28
    fc7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    fc80:	7f33      	ldrb	r3, [r6, #28]
    fc82:	00db      	lsls	r3, r3, #3
    fc84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    fc88:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    fc8c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    fc90:	f504 7190 	add.w	r1, r4, #288	; 0x120
    fc94:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    fc98:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    fc9c:	7f32      	ldrb	r2, [r6, #28]
    fc9e:	2301      	movs	r3, #1
    fca0:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    fca2:	4a3c      	ldr	r2, [pc, #240]	; (fd94 <uarte_0_init+0x1a4>)
    fca4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    fca8:	68f3      	ldr	r3, [r6, #12]
    fcaa:	2b00      	cmp	r3, #0
    fcac:	d059      	beq.n	fd62 <uarte_0_init+0x172>
	return config->uarte_regs;
    fcae:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    fcb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
	return config->uarte_regs;
    fcb4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    fcb6:	2204      	movs	r2, #4
    fcb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    fcbc:	f8d9 100c 	ldr.w	r1, [r9, #12]
    fcc0:	2201      	movs	r2, #1
    fcc2:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
    fcc6:	4934      	ldr	r1, [pc, #208]	; (fd98 <uarte_0_init+0x1a8>)
    fcc8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fccc:	2108      	movs	r1, #8
    fcce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fcd2:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    fcd6:	b1a1      	cbz	r1, fd02 <uarte_0_init+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fcd8:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fcda:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    fcde:	b91a      	cbnz	r2, fce8 <uarte_0_init+0xf8>
    fce0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    fce4:	2a00      	cmp	r2, #0
    fce6:	d0f8      	beq.n	fcda <uarte_0_init+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fce8:	2200      	movs	r2, #0
    fcea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    fcee:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    fcf2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    fcf6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    fcfa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    fcfe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    fd02:	f8d9 000c 	ldr.w	r0, [r9, #12]
    fd06:	4925      	ldr	r1, [pc, #148]	; (fd9c <uarte_0_init+0x1ac>)
    fd08:	2200      	movs	r2, #0
    fd0a:	3080      	adds	r0, #128	; 0x80
    fd0c:	f008 fb6e 	bl	183ec <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    fd10:	f8d9 300c 	ldr.w	r3, [r9, #12]
	timer->user_data = user_data;
    fd14:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    fd18:	f8d9 000c 	ldr.w	r0, [r9, #12]
    fd1c:	4920      	ldr	r1, [pc, #128]	; (fda0 <uarte_0_init+0x1b0>)
    fd1e:	2200      	movs	r2, #0
    fd20:	3020      	adds	r0, #32
    fd22:	f008 fb63 	bl	183ec <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    fd26:	f8d9 300c 	ldr.w	r3, [r9, #12]
    fd2a:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    fd2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fd32:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    fd34:	bf5c      	itt	pl
    fd36:	f44f 7380 	movpl.w	r3, #256	; 0x100
    fd3a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    fd3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    fd42:	06db      	lsls	r3, r3, #27
    fd44:	bf44      	itt	mi
    fd46:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    fd4a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fd4e:	6973      	ldr	r3, [r6, #20]
    fd50:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fd54:	2300      	movs	r3, #0
    fd56:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd5a:	2301      	movs	r3, #1
    fd5c:	60a3      	str	r3, [r4, #8]
    fd5e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    fd60:	e78a      	b.n	fc78 <uarte_0_init+0x88>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fd62:	2308      	movs	r3, #8
    fd64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    fd68:	f898 3008 	ldrb.w	r3, [r8, #8]
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d1de      	bne.n	fd2e <uarte_0_init+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd70:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fd74:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fd78:	69b3      	ldr	r3, [r6, #24]
    fd7a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fd7e:	2301      	movs	r3, #1
    fd80:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd84:	6023      	str	r3, [r4, #0]
}
    fd86:	e7d2      	b.n	fd2e <uarte_0_init+0x13e>
    fd88:	0bad0000 	.word	0x0bad0000
    fd8c:	00019e54 	.word	0x00019e54
    fd90:	00018ac4 	.word	0x00018ac4
    fd94:	4001f000 	.word	0x4001f000
    fd98:	000a0210 	.word	0x000a0210
    fd9c:	0001793f 	.word	0x0001793f
    fda0:	00017a0f 	.word	0x00017a0f

0000fda4 <uarte_nrfx_poll_out>:
{
    fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fda8:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    fdaa:	6905      	ldr	r5, [r0, #16]
{
    fdac:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    fdae:	f008 f81f 	bl	17df0 <k_is_in_isr>
    fdb2:	b9b0      	cbnz	r0, fde2 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
    fdb4:	4b2a      	ldr	r3, [pc, #168]	; (fe60 <uarte_nrfx_poll_out+0xbc>)
    fdb6:	781b      	ldrb	r3, [r3, #0]
    fdb8:	b19b      	cbz	r3, fde2 <uarte_nrfx_poll_out+0x3e>
{
    fdba:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    fdbc:	6860      	ldr	r0, [r4, #4]
    fdbe:	f007 fd04 	bl	177ca <is_tx_ready.isra.0>
    fdc2:	2800      	cmp	r0, #0
    fdc4:	d138      	bne.n	fe38 <uarte_nrfx_poll_out+0x94>
    fdc6:	2001      	movs	r0, #1
    fdc8:	f007 fee2 	bl	17b90 <nrfx_busy_wait>
    fdcc:	3f01      	subs	r7, #1
    fdce:	d1f5      	bne.n	fdbc <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
    fdd0:	2100      	movs	r1, #0
    fdd2:	2021      	movs	r0, #33	; 0x21
    fdd4:	f003 f9f2 	bl	131bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    fdd8:	e7ef      	b.n	fdba <uarte_nrfx_poll_out+0x16>
    fdda:	f381 8811 	msr	BASEPRI, r1
    fdde:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    fde2:	f04f 0340 	mov.w	r3, #64	; 0x40
    fde6:	f3ef 8111 	mrs	r1, BASEPRI
    fdea:	f383 8812 	msr	BASEPRI_MAX, r3
    fdee:	f3bf 8f6f 	isb	sy
    fdf2:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
    fdf6:	4640      	mov	r0, r8
    fdf8:	460f      	mov	r7, r1
    fdfa:	f007 fce6 	bl	177ca <is_tx_ready.isra.0>
    fdfe:	2800      	cmp	r0, #0
    fe00:	d0eb      	beq.n	fdda <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
    fe02:	68eb      	ldr	r3, [r5, #12]
    fe04:	b15b      	cbz	r3, fe1e <uarte_nrfx_poll_out+0x7a>
    fe06:	68da      	ldr	r2, [r3, #12]
    fe08:	b14a      	cbz	r2, fe1e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
    fe0a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
    fe0e:	2a00      	cmp	r2, #0
    fe10:	da05      	bge.n	fe1e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
    fe12:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
    fe16:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    fe1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
    fe1e:	696b      	ldr	r3, [r5, #20]
    fe20:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    fe22:	6969      	ldr	r1, [r5, #20]
    fe24:	2201      	movs	r2, #1
    fe26:	4620      	mov	r0, r4
    fe28:	f007 fb76 	bl	17518 <tx_start>
	__asm__ volatile(
    fe2c:	f387 8811 	msr	BASEPRI, r7
    fe30:	f3bf 8f6f 	isb	sy
}
    fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    fe38:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe3c:	f3ef 8111 	mrs	r1, BASEPRI
    fe40:	f383 8812 	msr	BASEPRI_MAX, r3
    fe44:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    fe48:	6860      	ldr	r0, [r4, #4]
    fe4a:	460f      	mov	r7, r1
    fe4c:	f007 fcbd 	bl	177ca <is_tx_ready.isra.0>
    fe50:	2800      	cmp	r0, #0
    fe52:	d1e4      	bne.n	fe1e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
    fe54:	f381 8811 	msr	BASEPRI, r1
    fe58:	f3bf 8f6f 	isb	sy
}
    fe5c:	e7b8      	b.n	fdd0 <uarte_nrfx_poll_out+0x2c>
    fe5e:	bf00      	nop
    fe60:	20003686 	.word	0x20003686

0000fe64 <uarte_nrfx_isr_async>:
{
    fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    fe68:	6843      	ldr	r3, [r0, #4]
    fe6a:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    fe6c:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe6e:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    fe72:	b088      	sub	sp, #32
    fe74:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    fe76:	b169      	cbz	r1, fe94 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe78:	2200      	movs	r2, #0
    fe7a:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    fe7e:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    fe82:	68da      	ldr	r2, [r3, #12]
    fe84:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
    fe88:	3301      	adds	r3, #1
    fe8a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
    fe8e:	b008      	add	sp, #32
    fe90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fe94:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    fe98:	b323      	cbz	r3, fee4 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe9a:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    fe9e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
    fea2:	6843      	ldr	r3, [r0, #4]
    fea4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    fea6:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    feaa:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
    feae:	2214      	movs	r2, #20
    feb0:	a803      	add	r0, sp, #12
    feb2:	f007 f833 	bl	16f1c <memset>
    feb6:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    feb8:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
    feba:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    febe:	f100 810c 	bmi.w	100da <uarte_nrfx_isr_async+0x276>
    fec2:	07b3      	lsls	r3, r6, #30
    fec4:	f100 810b 	bmi.w	100de <uarte_nrfx_isr_async+0x27a>
    fec8:	0777      	lsls	r7, r6, #29
    feca:	f100 810a 	bmi.w	100e2 <uarte_nrfx_isr_async+0x27e>
    fece:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    fed2:	4620      	mov	r0, r4
    fed4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    fed6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    feda:	f007 fb45 	bl	17568 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    fede:	4620      	mov	r0, r4
    fee0:	f007 fbd8 	bl	17694 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fee4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    fee8:	2b00      	cmp	r3, #0
    feea:	d033      	beq.n	ff54 <uarte_nrfx_isr_async+0xf0>
    return p_reg->INTENSET & mask;
    feec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    fef0:	06d8      	lsls	r0, r3, #27
    fef2:	d52f      	bpl.n	ff54 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fef4:	f04f 0800 	mov.w	r8, #0
    fef8:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
    fefc:	6926      	ldr	r6, [r4, #16]
    fefe:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    ff02:	6863      	ldr	r3, [r4, #4]
    ff04:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
    ff06:	68f3      	ldr	r3, [r6, #12]
    ff08:	2201      	movs	r2, #1
    ff0a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
    ff0e:	68f0      	ldr	r0, [r6, #12]
    ff10:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
    ff12:	f008 fa77 	bl	18404 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    ff16:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    ff18:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
    ff1c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
    ff20:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
    ff24:	68f2      	ldr	r2, [r6, #12]
    ff26:	6e10      	ldr	r0, [r2, #96]	; 0x60
    ff28:	1a1b      	subs	r3, r3, r0
    ff2a:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    ff2c:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
    ff2e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    ff32:	4408      	add	r0, r1
	if (rx_len > 0) {
    ff34:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    ff36:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
    ff38:	dd02      	ble.n	ff40 <uarte_nrfx_isr_async+0xdc>
		notify_uart_rx_rdy(dev, rx_len);
    ff3a:	4620      	mov	r0, r4
    ff3c:	f007 fb1b 	bl	17576 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    ff40:	68f1      	ldr	r1, [r6, #12]
    ff42:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
    ff46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ff4a:	2b00      	cmp	r3, #0
    ff4c:	f040 80cb 	bne.w	100e6 <uarte_nrfx_isr_async+0x282>
		data->async->is_in_irq = false;
    ff50:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ff54:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    ff58:	b383      	cbz	r3, ffbc <uarte_nrfx_isr_async+0x158>
    ff5a:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    ff5e:	bb6e      	cbnz	r6, ffbc <uarte_nrfx_isr_async+0x158>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff60:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    ff64:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    ff66:	6927      	ldr	r7, [r4, #16]
    ff68:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
    ff6c:	4631      	mov	r1, r6
    ff6e:	a803      	add	r0, sp, #12
    ff70:	f006 ffd4 	bl	16f1c <memset>
    ff74:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    ff76:	a903      	add	r1, sp, #12
    ff78:	4620      	mov	r0, r4
	struct uart_event evt = {
    ff7a:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    ff7e:	f007 faf3 	bl	17568 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    ff82:	68fb      	ldr	r3, [r7, #12]
    ff84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    ff86:	1c51      	adds	r1, r2, #1
    ff88:	d018      	beq.n	ffbc <uarte_nrfx_isr_async+0x158>
		data->async->rx_timeout_left = data->async->rx_timeout;
    ff8a:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
    ff8c:	68ff      	ldr	r7, [r7, #12]
    ff8e:	498f      	ldr	r1, [pc, #572]	; (101cc <uarte_nrfx_isr_async+0x368>)
			      K_USEC(data->async->rx_timeout_slab),
    ff90:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    ff92:	4a8f      	ldr	r2, [pc, #572]	; (101d0 <uarte_nrfx_isr_async+0x36c>)
    ff94:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    ff98:	468e      	mov	lr, r1
    ff9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ff9e:	4631      	mov	r1, r6
    ffa0:	fbcc e100 	smlal	lr, r1, ip, r0
    ffa4:	2300      	movs	r3, #0
    ffa6:	4670      	mov	r0, lr
    ffa8:	f7f0 f8aa 	bl	100 <__aeabi_uldivmod>
    ffac:	4602      	mov	r2, r0
    ffae:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    ffb0:	e9cd 0100 	strd	r0, r1, [sp]
    ffb4:	f107 0080 	add.w	r0, r7, #128	; 0x80
    ffb8:	f003 fb5e 	bl	13678 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ffbc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    ffc0:	b363      	cbz	r3, 1001c <uarte_nrfx_isr_async+0x1b8>
    ffc2:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    ffc6:	bb4e      	cbnz	r6, 1001c <uarte_nrfx_isr_async+0x1b8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ffc8:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
    ffcc:	6927      	ldr	r7, [r4, #16]
    ffce:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    ffd2:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
    ffd4:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    ffd8:	3158      	adds	r1, #88	; 0x58
    ffda:	4620      	mov	r0, r4
    ffdc:	f007 fae4 	bl	175a8 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    ffe0:	68f9      	ldr	r1, [r7, #12]
    ffe2:	4620      	mov	r0, r4
    ffe4:	3164      	adds	r1, #100	; 0x64
    ffe6:	f007 fadf 	bl	175a8 <rx_buf_release>
	data->async->rx_enabled = false;
    ffea:	68fb      	ldr	r3, [r7, #12]
    ffec:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
    fff0:	68fb      	ldr	r3, [r7, #12]
    fff2:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    fff6:	b132      	cbz	r2, 10006 <uarte_nrfx_isr_async+0x1a2>
		data->async->discard_rx_fifo = false;
    fff8:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
    fffc:	6860      	ldr	r0, [r4, #4]
    fffe:	4632      	mov	r2, r6
   10000:	4631      	mov	r1, r6
   10002:	f007 fb84 	bl	1770e <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   10006:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1000a:	06d8      	lsls	r0, r3, #27
   1000c:	d503      	bpl.n	10016 <uarte_nrfx_isr_async+0x1b2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1000e:	2102      	movs	r1, #2
   10010:	4620      	mov	r0, r4
   10012:	f007 fbb0 	bl	17776 <async_uart_release>
	notify_rx_disable(dev);
   10016:	4620      	mov	r0, r4
   10018:	f007 fade 	bl	175d8 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1001c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   10020:	b1db      	cbz	r3, 1005a <uarte_nrfx_isr_async+0x1f6>
    return p_reg->INTENSET & mask;
   10022:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   10026:	05d9      	lsls	r1, r3, #23
   10028:	d517      	bpl.n	1005a <uarte_nrfx_isr_async+0x1f6>
	return config->uarte_regs;
   1002a:	6863      	ldr	r3, [r4, #4]
   1002c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1002e:	f04f 0140 	mov.w	r1, #64	; 0x40
   10032:	f3ef 8211 	mrs	r2, BASEPRI
   10036:	f381 8812 	msr	BASEPRI_MAX, r1
   1003a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1003e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   10042:	b131      	cbz	r1, 10052 <uarte_nrfx_isr_async+0x1ee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10044:	2100      	movs	r1, #0
   10046:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1004a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1004e:	2101      	movs	r1, #1
   10050:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   10052:	f382 8811 	msr	BASEPRI, r2
   10056:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1005a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1005e:	2b00      	cmp	r3, #0
   10060:	f43f af15 	beq.w	fe8e <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   10064:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   10068:	025a      	lsls	r2, r3, #9
   1006a:	f57f af10 	bpl.w	fe8e <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1006e:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   10070:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   10072:	e9d3 7300 	ldrd	r7, r3, [r3]
   10076:	06db      	lsls	r3, r3, #27
   10078:	d466      	bmi.n	10148 <uarte_nrfx_isr_async+0x2e4>
	if (!data->async->tx_buf) {
   1007a:	68eb      	ldr	r3, [r5, #12]
   1007c:	689b      	ldr	r3, [r3, #8]
   1007e:	2b00      	cmp	r3, #0
   10080:	f43f af05 	beq.w	fe8e <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   10084:	f04f 0340 	mov.w	r3, #64	; 0x40
   10088:	f3ef 8211 	mrs	r2, BASEPRI
   1008c:	f383 8812 	msr	BASEPRI_MAX, r3
   10090:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   10094:	68eb      	ldr	r3, [r5, #12]
   10096:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1009a:	2900      	cmp	r1, #0
   1009c:	bfac      	ite	ge
   1009e:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   100a2:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   100a6:	f382 8811 	msr	BASEPRI, r2
   100aa:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   100ae:	68eb      	ldr	r3, [r5, #12]
   100b0:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   100b4:	2a00      	cmp	r2, #0
   100b6:	d054      	beq.n	10162 <uarte_nrfx_isr_async+0x2fe>
	__asm__ volatile(
   100b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   100bc:	f3ef 8611 	mrs	r6, BASEPRI
   100c0:	f383 8812 	msr	BASEPRI_MAX, r3
   100c4:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   100c8:	4629      	mov	r1, r5
   100ca:	4620      	mov	r0, r4
   100cc:	f007 fb8d 	bl	177ea <start_tx_locked>
	__asm__ volatile(
   100d0:	f386 8811 	msr	BASEPRI, r6
   100d4:	f3bf 8f6f 	isb	sy
				return;
   100d8:	e6d9      	b.n	fe8e <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   100da:	2601      	movs	r6, #1
   100dc:	e6f9      	b.n	fed2 <uarte_nrfx_isr_async+0x6e>
   100de:	2602      	movs	r6, #2
   100e0:	e6f7      	b.n	fed2 <uarte_nrfx_isr_async+0x6e>
   100e2:	2604      	movs	r6, #4
   100e4:	e6f5      	b.n	fed2 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   100e6:	3158      	adds	r1, #88	; 0x58
   100e8:	4620      	mov	r0, r4
   100ea:	f007 fa5d 	bl	175a8 <rx_buf_release>
	__asm__ volatile(
   100ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   100f2:	f3ef 8111 	mrs	r1, BASEPRI
   100f6:	f383 8812 	msr	BASEPRI_MAX, r3
   100fa:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   100fe:	68f3      	ldr	r3, [r6, #12]
   10100:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   10102:	b1f2      	cbz	r2, 10142 <uarte_nrfx_isr_async+0x2de>
		data->async->rx_buf = data->async->rx_next_buf;
   10104:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   10106:	68f3      	ldr	r3, [r6, #12]
   10108:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1010a:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1010c:	68f2      	ldr	r2, [r6, #12]
   1010e:	2300      	movs	r3, #0
   10110:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   10112:	68f2      	ldr	r2, [r6, #12]
   10114:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   10116:	68f2      	ldr	r2, [r6, #12]
   10118:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1011a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1011e:	b90b      	cbnz	r3, 10124 <uarte_nrfx_isr_async+0x2c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10120:	2301      	movs	r3, #1
   10122:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   10124:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   10128:	f023 0320 	bic.w	r3, r3, #32
   1012c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   10130:	f381 8811 	msr	BASEPRI, r1
   10134:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   10138:	68f3      	ldr	r3, [r6, #12]
   1013a:	2200      	movs	r2, #0
   1013c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   10140:	e708      	b.n	ff54 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10142:	2301      	movs	r3, #1
   10144:	607b      	str	r3, [r7, #4]
}
   10146:	e7f3      	b.n	10130 <uarte_nrfx_isr_async+0x2cc>
    p_reg->INTENCLR = mask;
   10148:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1014c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   10150:	2101      	movs	r1, #1
   10152:	4620      	mov	r0, r4
   10154:	f007 fb0f 	bl	17776 <async_uart_release>
		if (!data->async->tx_size) {
   10158:	68eb      	ldr	r3, [r5, #12]
   1015a:	68db      	ldr	r3, [r3, #12]
   1015c:	2b00      	cmp	r3, #0
   1015e:	d18c      	bne.n	1007a <uarte_nrfx_isr_async+0x216>
   10160:	e695      	b.n	fe8e <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   10162:	6899      	ldr	r1, [r3, #8]
   10164:	691a      	ldr	r2, [r3, #16]
   10166:	4291      	cmp	r1, r2
   10168:	d00c      	beq.n	10184 <uarte_nrfx_isr_async+0x320>
		if (amount == data->async->xfer_len) {
   1016a:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1016c:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1016e:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   10170:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   10172:	d128      	bne.n	101c6 <uarte_nrfx_isr_async+0x362>
			data->async->tx_cache_offset += amount;
   10174:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   10176:	4628      	mov	r0, r5
   10178:	f007 fab1 	bl	176de <setup_tx_cache>
   1017c:	2800      	cmp	r0, #0
   1017e:	d19b      	bne.n	100b8 <uarte_nrfx_isr_async+0x254>
			amount = data->async->tx_cache_offset;
   10180:	68eb      	ldr	r3, [r5, #12]
   10182:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   10184:	68e8      	ldr	r0, [r5, #12]
   10186:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   10188:	f008 f93c 	bl	18404 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1018c:	2214      	movs	r2, #20
   1018e:	2100      	movs	r1, #0
   10190:	a803      	add	r0, sp, #12
   10192:	f006 fec3 	bl	16f1c <memset>
		.data.tx.buf = data->async->tx_buf,
   10196:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   10198:	689a      	ldr	r2, [r3, #8]
   1019a:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1019e:	68db      	ldr	r3, [r3, #12]
   101a0:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   101a2:	bf1c      	itt	ne
   101a4:	2301      	movne	r3, #1
   101a6:	f88d 300c 	strbne.w	r3, [sp, #12]
   101aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   101ae:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   101b2:	68ea      	ldr	r2, [r5, #12]
   101b4:	2300      	movs	r3, #0
   101b6:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   101b8:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   101ba:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   101bc:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   101be:	4620      	mov	r0, r4
   101c0:	f007 f9d2 	bl	17568 <user_callback>
   101c4:	e663      	b.n	fe8e <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   101c6:	4616      	mov	r6, r2
   101c8:	e7dc      	b.n	10184 <uarte_nrfx_isr_async+0x320>
   101ca:	bf00      	nop
   101cc:	000f423f 	.word	0x000f423f
   101d0:	000f4240 	.word	0x000f4240

000101d4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   101d4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   101d6:	2301      	movs	r3, #1
   101d8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   101da:	4a0e      	ldr	r2, [pc, #56]	; (10214 <compare_int_lock+0x40>)
   101dc:	f3bf 8f5b 	dmb	ish
   101e0:	43dc      	mvns	r4, r3
   101e2:	e852 1f00 	ldrex	r1, [r2]
   101e6:	ea01 0504 	and.w	r5, r1, r4
   101ea:	e842 5600 	strex	r6, r5, [r2]
   101ee:	2e00      	cmp	r6, #0
   101f0:	d1f7      	bne.n	101e2 <compare_int_lock+0xe>
   101f2:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   101f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   101fa:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   101fc:	4806      	ldr	r0, [pc, #24]	; (10218 <compare_int_lock+0x44>)
   101fe:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   10202:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10206:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1020a:	420b      	tst	r3, r1
}
   1020c:	bf14      	ite	ne
   1020e:	2001      	movne	r0, #1
   10210:	2000      	moveq	r0, #0
   10212:	bd70      	pop	{r4, r5, r6, pc}
   10214:	20002504 	.word	0x20002504
   10218:	40011000 	.word	0x40011000

0001021c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1021c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1021e:	490e      	ldr	r1, [pc, #56]	; (10258 <sys_clock_timeout_handler+0x3c>)
   10220:	e9d1 3400 	ldrd	r3, r4, [r1]
   10224:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   10226:	18c3      	adds	r3, r0, r3
   10228:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1022c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   10230:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   10234:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   10238:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1023c:	d209      	bcs.n	10252 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1023e:	4b07      	ldr	r3, [pc, #28]	; (1025c <sys_clock_timeout_handler+0x40>)
   10240:	681b      	ldr	r3, [r3, #0]
   10242:	0a1a      	lsrs	r2, r3, #8
   10244:	061b      	lsls	r3, r3, #24
   10246:	199c      	adds	r4, r3, r6
   10248:	4b05      	ldr	r3, [pc, #20]	; (10260 <sys_clock_timeout_handler+0x44>)
   1024a:	f142 0500 	adc.w	r5, r2, #0
   1024e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   10252:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   10254:	f003 b91a 	b.w	1348c <sys_clock_announce>
   10258:	20001978 	.word	0x20001978
   1025c:	20002508 	.word	0x20002508
   10260:	20001980 	.word	0x20001980

00010264 <compare_int_unlock>:
	if (key) {
   10264:	b311      	cbz	r1, 102ac <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10266:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1026a:	2301      	movs	r3, #1
   1026c:	4a10      	ldr	r2, [pc, #64]	; (102b0 <compare_int_unlock+0x4c>)
   1026e:	4083      	lsls	r3, r0
   10270:	e852 cf00 	ldrex	ip, [r2]
   10274:	ea4c 0c03 	orr.w	ip, ip, r3
   10278:	e842 c100 	strex	r1, ip, [r2]
   1027c:	2900      	cmp	r1, #0
   1027e:	d1f7      	bne.n	10270 <compare_int_unlock+0xc>
   10280:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   10284:	4a0b      	ldr	r2, [pc, #44]	; (102b4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1028a:	4083      	lsls	r3, r0
   1028c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10290:	4b09      	ldr	r3, [pc, #36]	; (102b8 <compare_int_unlock+0x54>)
   10292:	f3bf 8f5b 	dmb	ish
   10296:	681b      	ldr	r3, [r3, #0]
   10298:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1029c:	40c3      	lsrs	r3, r0
   1029e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   102a0:	bf42      	ittt	mi
   102a2:	4b06      	ldrmi	r3, [pc, #24]	; (102bc <compare_int_unlock+0x58>)
   102a4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   102a8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   102ac:	4770      	bx	lr
   102ae:	bf00      	nop
   102b0:	20002504 	.word	0x20002504
   102b4:	40011000 	.word	0x40011000
   102b8:	20002500 	.word	0x20002500
   102bc:	e000e100 	.word	0xe000e100

000102c0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   102c0:	4b0d      	ldr	r3, [pc, #52]	; (102f8 <z_nrf_rtc_timer_read+0x38>)
   102c2:	6818      	ldr	r0, [r3, #0]
   102c4:	0a01      	lsrs	r1, r0, #8
   102c6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   102c8:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   102cc:	4b0b      	ldr	r3, [pc, #44]	; (102fc <z_nrf_rtc_timer_read+0x3c>)
   102ce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   102d2:	1818      	adds	r0, r3, r0
   102d4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   102d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   102dc:	d20a      	bcs.n	102f4 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   102de:	4b08      	ldr	r3, [pc, #32]	; (10300 <z_nrf_rtc_timer_read+0x40>)
   102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   102e4:	4290      	cmp	r0, r2
   102e6:	eb71 0303 	sbcs.w	r3, r1, r3
   102ea:	d203      	bcs.n	102f4 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   102ec:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   102f0:	f141 0100 	adc.w	r1, r1, #0
}
   102f4:	4770      	bx	lr
   102f6:	bf00      	nop
   102f8:	20002508 	.word	0x20002508
   102fc:	40011000 	.word	0x40011000
   10300:	20001980 	.word	0x20001980

00010304 <compare_set>:
{
   10304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10308:	4616      	mov	r6, r2
   1030a:	461f      	mov	r7, r3
   1030c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1030e:	f7ff ff61 	bl	101d4 <compare_int_lock>
   10312:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   10314:	f7ff ffd4 	bl	102c0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   10318:	42b0      	cmp	r0, r6
   1031a:	eb71 0307 	sbcs.w	r3, r1, r7
   1031e:	d251      	bcs.n	103c4 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   10320:	4b3a      	ldr	r3, [pc, #232]	; (1040c <compare_set+0x108>)
   10322:	1a30      	subs	r0, r6, r0
   10324:	eb67 0101 	sbc.w	r1, r7, r1
   10328:	4298      	cmp	r0, r3
   1032a:	f171 0100 	sbcs.w	r1, r1, #0
   1032e:	d26a      	bcs.n	10406 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   10330:	4b37      	ldr	r3, [pc, #220]	; (10410 <compare_set+0x10c>)
   10332:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   10336:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1033a:	429f      	cmp	r7, r3
   1033c:	bf08      	it	eq
   1033e:	4296      	cmpeq	r6, r2
   10340:	d04e      	beq.n	103e0 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   10342:	4934      	ldr	r1, [pc, #208]	; (10414 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   10344:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10348:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1034c:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   10350:	00ad      	lsls	r5, r5, #2
   10352:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   10356:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10358:	b2ad      	uxth	r5, r5
   1035a:	f007 fb5d 	bl	17a18 <event_clear>
	return absolute_time & COUNTER_MAX;
   1035e:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   10362:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   10366:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1036a:	4a2b      	ldr	r2, [pc, #172]	; (10418 <compare_set+0x114>)
   1036c:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1036e:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   10372:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   10374:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   10378:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1037a:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1037e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   10382:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   10386:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1038a:	f06f 0002 	mvn.w	r0, #2
   1038e:	eba0 0008 	sub.w	r0, r0, r8
   10392:	4460      	add	r0, ip
   10394:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   10398:	4290      	cmp	r0, r2
   1039a:	d921      	bls.n	103e0 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1039c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1039e:	b160      	cbz	r0, 103ba <compare_set+0xb6>
     return p_reg->COUNTER;
   103a0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   103a4:	eba8 000b 	sub.w	r0, r8, fp
   103a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   103ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   103b0:	d916      	bls.n	103e0 <compare_set+0xdc>
					event_clear(chan);
   103b2:	4620      	mov	r0, r4
   103b4:	f007 fb30 	bl	17a18 <event_clear>
   103b8:	4a17      	ldr	r2, [pc, #92]	; (10418 <compare_set+0x114>)
			cc_val = now + cc_inc;
   103ba:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   103be:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   103c2:	e7d9      	b.n	10378 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   103c4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   103c6:	4a15      	ldr	r2, [pc, #84]	; (1041c <compare_set+0x118>)
   103c8:	f3bf 8f5b 	dmb	ish
   103cc:	40a3      	lsls	r3, r4
   103ce:	e852 0f00 	ldrex	r0, [r2]
   103d2:	4318      	orrs	r0, r3
   103d4:	e842 0100 	strex	r1, r0, [r2]
   103d8:	2900      	cmp	r1, #0
   103da:	d1f8      	bne.n	103ce <compare_set+0xca>
   103dc:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   103e0:	490b      	ldr	r1, [pc, #44]	; (10410 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   103e2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   103e4:	0123      	lsls	r3, r4, #4
   103e6:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   103ea:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   103ee:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   103f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   103f2:	6053      	str	r3, [r2, #4]
	return ret;
   103f4:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   103f6:	4620      	mov	r0, r4
   103f8:	9900      	ldr	r1, [sp, #0]
   103fa:	f7ff ff33 	bl	10264 <compare_int_unlock>
}
   103fe:	4628      	mov	r0, r5
   10400:	b003      	add	sp, #12
   10402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   10406:	f06f 0515 	mvn.w	r5, #21
   1040a:	e7f4      	b.n	103f6 <compare_set+0xf2>
   1040c:	00800001 	.word	0x00800001
   10410:	20001968 	.word	0x20001968
   10414:	40011000 	.word	0x40011000
   10418:	007ffffd 	.word	0x007ffffd
   1041c:	20002500 	.word	0x20002500

00010420 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   10420:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   10422:	4c1b      	ldr	r4, [pc, #108]	; (10490 <sys_clock_driver_init+0x70>)
   10424:	4b1b      	ldr	r3, [pc, #108]	; (10494 <sys_clock_driver_init+0x74>)
   10426:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1042a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1042e:	4b1a      	ldr	r3, [pc, #104]	; (10498 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   10430:	2500      	movs	r5, #0
   10432:	f04f 30ff 	mov.w	r0, #4294967295
   10436:	f04f 31ff 	mov.w	r1, #4294967295
   1043a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1043e:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   10442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   10446:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1044a:	4b14      	ldr	r3, [pc, #80]	; (1049c <sys_clock_driver_init+0x7c>)
   1044c:	2602      	movs	r6, #2
   1044e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   10452:	2101      	movs	r1, #1
   10454:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   10458:	2011      	movs	r0, #17
   1045a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1045e:	462a      	mov	r2, r5
   10460:	f7fc f9e6 	bl	c830 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   10464:	2011      	movs	r0, #17
   10466:	f7fc f9b3 	bl	c7d0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1046a:	4a0d      	ldr	r2, [pc, #52]	; (104a0 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1046c:	2301      	movs	r3, #1
   1046e:	60a3      	str	r3, [r4, #8]
   10470:	6023      	str	r3, [r4, #0]
   10472:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   10474:	4b0b      	ldr	r3, [pc, #44]	; (104a4 <sys_clock_driver_init+0x84>)
   10476:	4a0c      	ldr	r2, [pc, #48]	; (104a8 <sys_clock_driver_init+0x88>)
   10478:	9300      	str	r3, [sp, #0]
   1047a:	9501      	str	r5, [sp, #4]
   1047c:	2300      	movs	r3, #0
   1047e:	4628      	mov	r0, r5
   10480:	f7ff ff40 	bl	10304 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   10484:	4630      	mov	r0, r6
   10486:	f7fe fead 	bl	f1e4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1048a:	4628      	mov	r0, r5
   1048c:	b002      	add	sp, #8
   1048e:	bd70      	pop	{r4, r5, r6, pc}
   10490:	40011000 	.word	0x40011000
   10494:	000f0003 	.word	0x000f0003
   10498:	20001968 	.word	0x20001968
   1049c:	e000e100 	.word	0xe000e100
   104a0:	20002504 	.word	0x20002504
   104a4:	0001021d 	.word	0x0001021d
   104a8:	007fffff 	.word	0x007fffff

000104ac <rtc_nrf_isr>:
{
   104ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   104b0:	4c2b      	ldr	r4, [pc, #172]	; (10560 <rtc_nrf_isr+0xb4>)
   104b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   104b6:	0799      	lsls	r1, r3, #30
   104b8:	d50b      	bpl.n	104d2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   104ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   104be:	b143      	cbz	r3, 104d2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   104c0:	4a28      	ldr	r2, [pc, #160]	; (10564 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   104c2:	2300      	movs	r3, #0
   104c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   104c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   104cc:	6813      	ldr	r3, [r2, #0]
   104ce:	3301      	adds	r3, #1
   104d0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   104d2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   104d6:	03da      	lsls	r2, r3, #15
   104d8:	d523      	bpl.n	10522 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   104da:	f3bf 8f5b 	dmb	ish
   104de:	4b22      	ldr	r3, [pc, #136]	; (10568 <rtc_nrf_isr+0xbc>)
   104e0:	e853 2f00 	ldrex	r2, [r3]
   104e4:	f022 0101 	bic.w	r1, r2, #1
   104e8:	e843 1000 	strex	r0, r1, [r3]
   104ec:	2800      	cmp	r0, #0
   104ee:	d1f7      	bne.n	104e0 <rtc_nrf_isr+0x34>
   104f0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   104f4:	07d3      	lsls	r3, r2, #31
   104f6:	d402      	bmi.n	104fe <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   104f8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   104fc:	b18b      	cbz	r3, 10522 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   104fe:	2500      	movs	r5, #0
   10500:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10504:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   10508:	f7ff feda 	bl	102c0 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1050c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   10510:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   10512:	4b16      	ldr	r3, [pc, #88]	; (1056c <rtc_nrf_isr+0xc0>)
   10514:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   10518:	42b0      	cmp	r0, r6
   1051a:	41b9      	sbcs	r1, r7
   1051c:	d204      	bcs.n	10528 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1051e:	f382 8810 	msr	PRIMASK, r2
}
   10522:	b003      	add	sp, #12
   10524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   10528:	f04f 38ff 	mov.w	r8, #4294967295
   1052c:	f04f 39ff 	mov.w	r9, #4294967295
   10530:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   10534:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   10538:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1053a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1053e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   10542:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   10546:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1054a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1054e:	2900      	cmp	r1, #0
   10550:	d0e7      	beq.n	10522 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   10552:	9000      	str	r0, [sp, #0]
   10554:	4632      	mov	r2, r6
   10556:	463b      	mov	r3, r7
   10558:	4628      	mov	r0, r5
   1055a:	4788      	blx	r1
   1055c:	e7e1      	b.n	10522 <rtc_nrf_isr+0x76>
   1055e:	bf00      	nop
   10560:	40011000 	.word	0x40011000
   10564:	20002508 	.word	0x20002508
   10568:	20002500 	.word	0x20002500
   1056c:	20001968 	.word	0x20001968

00010570 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   10570:	1c43      	adds	r3, r0, #1
{
   10572:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   10574:	d022      	beq.n	105bc <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   10576:	2801      	cmp	r0, #1
   10578:	dd22      	ble.n	105c0 <sys_clock_set_timeout+0x50>
   1057a:	4a12      	ldr	r2, [pc, #72]	; (105c4 <sys_clock_set_timeout+0x54>)
   1057c:	4b12      	ldr	r3, [pc, #72]	; (105c8 <sys_clock_set_timeout+0x58>)
   1057e:	4290      	cmp	r0, r2
   10580:	bfd4      	ite	le
   10582:	4604      	movle	r4, r0
   10584:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   10586:	f7ff fe9b 	bl	102c0 <z_nrf_rtc_timer_read>
   1058a:	4b10      	ldr	r3, [pc, #64]	; (105cc <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1058c:	490e      	ldr	r1, [pc, #56]	; (105c8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1058e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10592:	1a80      	subs	r0, r0, r2
		cyc = 0;
   10594:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10598:	bf28      	it	cs
   1059a:	2400      	movcs	r4, #0
	cyc += unannounced;
   1059c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1059e:	428c      	cmp	r4, r1
   105a0:	bf28      	it	cs
   105a2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   105a4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   105a6:	490a      	ldr	r1, [pc, #40]	; (105d0 <sys_clock_set_timeout+0x60>)
   105a8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   105aa:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   105ae:	9001      	str	r0, [sp, #4]
   105b0:	f143 0300 	adc.w	r3, r3, #0
   105b4:	f7ff fea6 	bl	10304 <compare_set>
}
   105b8:	b002      	add	sp, #8
   105ba:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   105bc:	4c02      	ldr	r4, [pc, #8]	; (105c8 <sys_clock_set_timeout+0x58>)
   105be:	e7e2      	b.n	10586 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   105c0:	2401      	movs	r4, #1
   105c2:	e7e0      	b.n	10586 <sys_clock_set_timeout+0x16>
   105c4:	007ffffe 	.word	0x007ffffe
   105c8:	007fffff 	.word	0x007fffff
   105cc:	20001978 	.word	0x20001978
   105d0:	0001021d 	.word	0x0001021d

000105d4 <sys_clock_elapsed>:
{
   105d4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   105d6:	f7ff fe73 	bl	102c0 <z_nrf_rtc_timer_read>
   105da:	4b02      	ldr	r3, [pc, #8]	; (105e4 <sys_clock_elapsed+0x10>)
   105dc:	681b      	ldr	r3, [r3, #0]
}
   105de:	1ac0      	subs	r0, r0, r3
   105e0:	bd08      	pop	{r3, pc}
   105e2:	bf00      	nop
   105e4:	20001978 	.word	0x20001978

000105e8 <sys_clock_disable>:
{
   105e8:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   105ea:	4c08      	ldr	r4, [pc, #32]	; (1060c <sys_clock_disable+0x24>)
   105ec:	2301      	movs	r3, #1
   105ee:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   105f0:	2011      	movs	r0, #17
   105f2:	f7fc f8fb 	bl	c7ec <arch_irq_disable>
    p_reg->INTENCLR = mask;
   105f6:	4b06      	ldr	r3, [pc, #24]	; (10610 <sys_clock_disable+0x28>)
   105f8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   105fc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   10600:	4b04      	ldr	r3, [pc, #16]	; (10614 <sys_clock_disable+0x2c>)
   10602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   10606:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1060a:	bd10      	pop	{r4, pc}
   1060c:	40011000 	.word	0x40011000
   10610:	000f0003 	.word	0x000f0003
   10614:	e000e100 	.word	0xe000e100

00010618 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   10618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1061a:	4b07      	ldr	r3, [pc, #28]	; (10638 <get_buttons.part.0+0x20>)
   1061c:	9305      	str	r3, [sp, #20]
   1061e:	4807      	ldr	r0, [pc, #28]	; (1063c <get_buttons.part.0+0x24>)
   10620:	2302      	movs	r3, #2
   10622:	aa04      	add	r2, sp, #16
   10624:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10628:	9304      	str	r3, [sp, #16]
   1062a:	f007 fa2a 	bl	17a82 <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1062e:	2000      	movs	r0, #0
   10630:	b007      	add	sp, #28
   10632:	f85d fb04 	ldr.w	pc, [sp], #4
   10636:	bf00      	nop
   10638:	00019e91 	.word	0x00019e91
   1063c:	00018a64 	.word	0x00018a64

00010640 <get_buttons>:
{
   10640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   10644:	2400      	movs	r4, #0
   10646:	4e14      	ldr	r6, [pc, #80]	; (10698 <get_buttons+0x58>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10648:	4625      	mov	r5, r4
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1064a:	f04f 0801 	mov.w	r8, #1
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   1064e:	6830      	ldr	r0, [r6, #0]
   10650:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   10652:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   10656:	6883      	ldr	r3, [r0, #8]
   10658:	a901      	add	r1, sp, #4
   1065a:	685b      	ldr	r3, [r3, #4]
   1065c:	4798      	blx	r3
	if (ret == 0) {
   1065e:	2800      	cmp	r0, #0
   10660:	d00c      	beq.n	1067c <get_buttons+0x3c>
		if (val < 0) {
   10662:	db14      	blt.n	1068e <get_buttons+0x4e>
			ret |= 1U << i;
   10664:	fa08 f305 	lsl.w	r3, r8, r5
   10668:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1066a:	3501      	adds	r5, #1
   1066c:	2d04      	cmp	r5, #4
   1066e:	f106 0608 	add.w	r6, r6, #8
   10672:	d1ec      	bne.n	1064e <get_buttons+0xe>
}
   10674:	4620      	mov	r0, r4
   10676:	b003      	add	sp, #12
   10678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   1067c:	f8d9 2000 	ldr.w	r2, [r9]
   10680:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   10682:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   10686:	4053      	eors	r3, r2
		if (val) {
   10688:	423b      	tst	r3, r7
   1068a:	d0ee      	beq.n	1066a <get_buttons+0x2a>
   1068c:	e7ea      	b.n	10664 <get_buttons+0x24>
}
   1068e:	b003      	add	sp, #12
   10690:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10694:	f7ff bfc0 	b.w	10618 <get_buttons.part.0>
   10698:	00018e14 	.word	0x00018e14

0001069c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106a0:	4e15      	ldr	r6, [pc, #84]	; (106f8 <dk_set_leds_state.part.0+0x5c>)
   106a2:	b086      	sub	sp, #24
   106a4:	4607      	mov	r7, r0
   106a6:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   106a8:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   106aa:	fa27 f205 	lsr.w	r2, r7, r5
   106ae:	f012 0201 	ands.w	r2, r2, #1
   106b2:	d117      	bne.n	106e4 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   106b4:	fa28 f305 	lsr.w	r3, r8, r5
   106b8:	07db      	lsls	r3, r3, #31
   106ba:	d515      	bpl.n	106e8 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   106bc:	7931      	ldrb	r1, [r6, #4]
   106be:	6830      	ldr	r0, [r6, #0]
   106c0:	f007 f9cf 	bl	17a62 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   106c4:	4604      	mov	r4, r0
   106c6:	b178      	cbz	r0, 106e8 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   106c8:	4b0c      	ldr	r3, [pc, #48]	; (106fc <dk_set_leds_state.part.0+0x60>)
   106ca:	9305      	str	r3, [sp, #20]
   106cc:	480c      	ldr	r0, [pc, #48]	; (10700 <dk_set_leds_state.part.0+0x64>)
   106ce:	2302      	movs	r3, #2
   106d0:	aa04      	add	r2, sp, #16
   106d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   106d6:	9304      	str	r3, [sp, #16]
   106d8:	f007 f9d3 	bl	17a82 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   106dc:	4620      	mov	r0, r4
   106de:	b006      	add	sp, #24
   106e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   106e4:	2201      	movs	r2, #1
   106e6:	e7e9      	b.n	106bc <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   106e8:	3501      	adds	r5, #1
   106ea:	2d04      	cmp	r5, #4
   106ec:	f106 0608 	add.w	r6, r6, #8
   106f0:	d1db      	bne.n	106aa <dk_set_leds_state.part.0+0xe>
	return 0;
   106f2:	2400      	movs	r4, #0
   106f4:	e7f2      	b.n	106dc <dk_set_leds_state.part.0+0x40>
   106f6:	bf00      	nop
   106f8:	00018df4 	.word	0x00018df4
   106fc:	00019ea6 	.word	0x00019ea6
   10700:	00018a64 	.word	0x00018a64

00010704 <callback_ctrl>:
{
   10704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10708:	4d22      	ldr	r5, [pc, #136]	; (10794 <callback_ctrl+0x90>)
					 FLAGS_GPIO_0_1_ACTIVE :
   1070a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 10798 <callback_ctrl+0x94>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   1070e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1079c <callback_ctrl+0x98>
{
   10712:	af00      	add	r7, sp, #0
   10714:	4680      	mov	r8, r0
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   10716:	2600      	movs	r6, #0
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   10718:	6828      	ldr	r0, [r5, #0]
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1071a:	7929      	ldrb	r1, [r5, #4]
		if (enable) {
   1071c:	f1b8 0f00 	cmp.w	r8, #0
   10720:	d02d      	beq.n	1077e <callback_ctrl+0x7a>
					 FLAGS_GPIO_0_1_ACTIVE :
   10722:	4548      	cmp	r0, r9
   10724:	d01f      	beq.n	10766 <callback_ctrl+0x62>
			flags = ((buttons[i].port == GPIO0_DEV || buttons[i].port == GPIO1_DEV) ?
   10726:	4550      	cmp	r0, sl
   10728:	d01d      	beq.n	10766 <callback_ctrl+0x62>
	const struct gpio_driver_api *api =
   1072a:	6883      	ldr	r3, [r0, #8]
					 FLAGS_GPIO_0_1_ACTIVE :
   1072c:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10730:	699c      	ldr	r4, [r3, #24]
   10732:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   10736:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   1073a:	47a0      	blx	r4
		if (err) {
   1073c:	4604      	mov	r4, r0
   1073e:	b310      	cbz	r0, 10786 <callback_ctrl+0x82>
			LOG_ERR("GPIO IRQ config failed, err: %d", err);
   10740:	466d      	mov	r5, sp
   10742:	b088      	sub	sp, #32
   10744:	466a      	mov	r2, sp
   10746:	4b16      	ldr	r3, [pc, #88]	; (107a0 <callback_ctrl+0x9c>)
   10748:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1074c:	2303      	movs	r3, #3
   1074e:	f842 3f10 	str.w	r3, [r2, #16]!
   10752:	4814      	ldr	r0, [pc, #80]	; (107a4 <callback_ctrl+0xa0>)
   10754:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10758:	f007 f993 	bl	17a82 <z_log_msg_static_create.constprop.0>
   1075c:	46ad      	mov	sp, r5
}
   1075e:	4620      	mov	r0, r4
   10760:	46bd      	mov	sp, r7
   10762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   10766:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   10768:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1076a:	6812      	ldr	r2, [r2, #0]
   1076c:	2401      	movs	r4, #1
   1076e:	408c      	lsls	r4, r1
					 FLAGS_GPIO_0_1_ACTIVE :
   10770:	4214      	tst	r4, r2
   10772:	bf14      	ite	ne
   10774:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
   10778:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   1077c:	e7d8      	b.n	10730 <callback_ctrl+0x2c>
			flags = GPIO_INT_DISABLE;
   1077e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	const struct gpio_driver_api *api =
   10782:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   10784:	e7d4      	b.n	10730 <callback_ctrl+0x2c>
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   10786:	3601      	adds	r6, #1
   10788:	2e04      	cmp	r6, #4
   1078a:	f105 0508 	add.w	r5, r5, #8
   1078e:	d1c3      	bne.n	10718 <callback_ctrl+0x14>
   10790:	e7e5      	b.n	1075e <callback_ctrl+0x5a>
   10792:	bf00      	nop
   10794:	00018e14 	.word	0x00018e14
   10798:	000187bc 	.word	0x000187bc
   1079c:	000187a4 	.word	0x000187a4
   107a0:	00019ebc 	.word	0x00019ebc
   107a4:	00018a64 	.word	0x00018a64

000107a8 <button_pressed>:
{
   107a8:	b530      	push	{r4, r5, lr}
   107aa:	b087      	sub	sp, #28
	__asm__ volatile(
   107ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   107b0:	f3ef 8511 	mrs	r5, BASEPRI
   107b4:	f383 8812 	msr	BASEPRI_MAX, r3
   107b8:	f3bf 8f6f 	isb	sy
	switch (state) {
   107bc:	4c13      	ldr	r4, [pc, #76]	; (1080c <button_pressed+0x64>)
   107be:	7823      	ldrb	r3, [r4, #0]
   107c0:	b9eb      	cbnz	r3, 107fe <button_pressed+0x56>
		if (gpio_dev == GPIO0_DEV || gpio_dev == GPIO1_DEV) {
   107c2:	4b13      	ldr	r3, [pc, #76]	; (10810 <button_pressed+0x68>)
   107c4:	4298      	cmp	r0, r3
   107c6:	d002      	beq.n	107ce <button_pressed+0x26>
   107c8:	4b12      	ldr	r3, [pc, #72]	; (10814 <button_pressed+0x6c>)
   107ca:	4298      	cmp	r0, r3
   107cc:	d110      	bne.n	107f0 <button_pressed+0x48>
			err = callback_ctrl(false);
   107ce:	2000      	movs	r0, #0
   107d0:	f7ff ff98 	bl	10704 <callback_ctrl>
			if (err) {
   107d4:	b148      	cbz	r0, 107ea <button_pressed+0x42>
				LOG_ERR("Failed disabling interrupts");
   107d6:	4b10      	ldr	r3, [pc, #64]	; (10818 <button_pressed+0x70>)
   107d8:	9305      	str	r3, [sp, #20]
   107da:	4810      	ldr	r0, [pc, #64]	; (1081c <button_pressed+0x74>)
   107dc:	2302      	movs	r3, #2
   107de:	aa04      	add	r2, sp, #16
   107e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   107e4:	9304      	str	r3, [sp, #16]
   107e6:	f007 f94c 	bl	17a82 <z_log_msg_static_create.constprop.0>
			irq_enabled = false;
   107ea:	4b0d      	ldr	r3, [pc, #52]	; (10820 <button_pressed+0x78>)
   107ec:	2200      	movs	r2, #0
   107ee:	701a      	strb	r2, [r3, #0]
		state = STATE_SCANNING;
   107f0:	2301      	movs	r3, #1
   107f2:	7023      	strb	r3, [r4, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   107f4:	480b      	ldr	r0, [pc, #44]	; (10824 <button_pressed+0x7c>)
   107f6:	2221      	movs	r2, #33	; 0x21
   107f8:	2300      	movs	r3, #0
   107fa:	f002 fa17 	bl	12c2c <k_work_reschedule>
	__asm__ volatile(
   107fe:	f385 8811 	msr	BASEPRI, r5
   10802:	f3bf 8f6f 	isb	sy
}
   10806:	b007      	add	sp, #28
   10808:	bd30      	pop	{r4, r5, pc}
   1080a:	bf00      	nop
   1080c:	200031e8 	.word	0x200031e8
   10810:	000187bc 	.word	0x000187bc
   10814:	000187a4 	.word	0x000187a4
   10818:	00019edc 	.word	0x00019edc
   1081c:	00018a64 	.word	0x00018a64
   10820:	200031e7 	.word	0x200031e7
   10824:	20001988 	.word	0x20001988

00010828 <buttons_scan_fn>:
{
   10828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (irq_enabled) {
   1082c:	4f39      	ldr	r7, [pc, #228]	; (10914 <buttons_scan_fn+0xec>)
   1082e:	783b      	ldrb	r3, [r7, #0]
{
   10830:	b086      	sub	sp, #24
	if (irq_enabled) {
   10832:	b17b      	cbz	r3, 10854 <buttons_scan_fn+0x2c>
		err = callback_ctrl(false);
   10834:	2000      	movs	r0, #0
   10836:	f7ff ff65 	bl	10704 <callback_ctrl>
		if (err) {
   1083a:	b150      	cbz	r0, 10852 <buttons_scan_fn+0x2a>
			LOG_ERR("Cannot disable callbacks");
   1083c:	4b36      	ldr	r3, [pc, #216]	; (10918 <buttons_scan_fn+0xf0>)
			LOG_ERR("Cannot enable callbacks");
   1083e:	9305      	str	r3, [sp, #20]
   10840:	4836      	ldr	r0, [pc, #216]	; (1091c <buttons_scan_fn+0xf4>)
   10842:	2302      	movs	r3, #2
   10844:	aa04      	add	r2, sp, #16
   10846:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1084a:	9304      	str	r3, [sp, #16]
   1084c:	f007 f919 	bl	17a82 <z_log_msg_static_create.constprop.0>
   10850:	e050      	b.n	108f4 <buttons_scan_fn+0xcc>
		irq_enabled = false;
   10852:	7038      	strb	r0, [r7, #0]
	button_scan = get_buttons();
   10854:	f7ff fef4 	bl	10640 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10858:	f3bf 8f5b 	dmb	ish
   1085c:	4b30      	ldr	r3, [pc, #192]	; (10920 <buttons_scan_fn+0xf8>)
   1085e:	4604      	mov	r4, r0
   10860:	e853 2f00 	ldrex	r2, [r3]
   10864:	e843 4100 	strex	r1, r4, [r3]
   10868:	2900      	cmp	r1, #0
   1086a:	d1f9      	bne.n	10860 <buttons_scan_fn+0x38>
   1086c:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   10870:	4b2c      	ldr	r3, [pc, #176]	; (10924 <buttons_scan_fn+0xfc>)
   10872:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 10928 <buttons_scan_fn+0x100>
   10876:	781a      	ldrb	r2, [r3, #0]
   10878:	bb4a      	cbnz	r2, 108ce <buttons_scan_fn+0xa6>
		if (button_scan != last_button_scan) {
   1087a:	f8d8 6000 	ldr.w	r6, [r8]
   1087e:	42a6      	cmp	r6, r4
   10880:	d019      	beq.n	108b6 <buttons_scan_fn+0x8e>
	if (button_handler_cb != NULL) {
   10882:	4b2a      	ldr	r3, [pc, #168]	; (1092c <buttons_scan_fn+0x104>)
   10884:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   10886:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   10888:	b10b      	cbz	r3, 1088e <buttons_scan_fn+0x66>
		button_handler_cb(button_state, has_changed);
   1088a:	4631      	mov	r1, r6
   1088c:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1088e:	f04f 33ff 	mov.w	r3, #4294967295
   10892:	4827      	ldr	r0, [pc, #156]	; (10930 <buttons_scan_fn+0x108>)
   10894:	f04f 32ff 	mov.w	r2, #4294967295
   10898:	f001 fefe 	bl	12698 <z_impl_k_mutex_lock>
	return list->head;
   1089c:	4b25      	ldr	r3, [pc, #148]	; (10934 <buttons_scan_fn+0x10c>)
   1089e:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   108a0:	b135      	cbz	r5, 108b0 <buttons_scan_fn+0x88>
   108a2:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   108a4:	4631      	mov	r1, r6
   108a6:	682b      	ldr	r3, [r5, #0]
   108a8:	4620      	mov	r0, r4
   108aa:	4798      	blx	r3
	return node->next;
   108ac:	686d      	ldr	r5, [r5, #4]
   108ae:	e7f7      	b.n	108a0 <buttons_scan_fn+0x78>
	return z_impl_k_mutex_unlock(mutex);
   108b0:	481f      	ldr	r0, [pc, #124]	; (10930 <buttons_scan_fn+0x108>)
   108b2:	f001 ff6b 	bl	1278c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   108b6:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   108ba:	b15c      	cbz	r4, 108d4 <buttons_scan_fn+0xac>
		k_work_reschedule(&buttons_scan,
   108bc:	481e      	ldr	r0, [pc, #120]	; (10938 <buttons_scan_fn+0x110>)
   108be:	f44f 72a4 	mov.w	r2, #328	; 0x148
   108c2:	2300      	movs	r3, #0
}
   108c4:	b006      	add	sp, #24
   108c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   108ca:	f002 b9af 	b.w	12c2c <k_work_reschedule>
		initial_run = false;
   108ce:	2200      	movs	r2, #0
   108d0:	701a      	strb	r2, [r3, #0]
   108d2:	e7f0      	b.n	108b6 <buttons_scan_fn+0x8e>
	__asm__ volatile(
   108d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   108d8:	f3ef 8611 	mrs	r6, BASEPRI
   108dc:	f383 8812 	msr	BASEPRI_MAX, r3
   108e0:	f3bf 8f6f 	isb	sy
		switch (state) {
   108e4:	4b15      	ldr	r3, [pc, #84]	; (1093c <buttons_scan_fn+0x114>)
   108e6:	781d      	ldrb	r5, [r3, #0]
   108e8:	2d01      	cmp	r5, #1
   108ea:	d006      	beq.n	108fa <buttons_scan_fn+0xd2>
	__asm__ volatile(
   108ec:	f386 8811 	msr	BASEPRI, r6
   108f0:	f3bf 8f6f 	isb	sy
}
   108f4:	b006      	add	sp, #24
   108f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = callback_ctrl(true);
   108fa:	4628      	mov	r0, r5
			state = STATE_WAITING;
   108fc:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   108fe:	f7ff ff01 	bl	10704 <callback_ctrl>
			irq_enabled = true;
   10902:	703d      	strb	r5, [r7, #0]
   10904:	f386 8811 	msr	BASEPRI, r6
   10908:	f3bf 8f6f 	isb	sy
		if (err) {
   1090c:	2800      	cmp	r0, #0
   1090e:	d0f1      	beq.n	108f4 <buttons_scan_fn+0xcc>
			LOG_ERR("Cannot enable callbacks");
   10910:	4b0b      	ldr	r3, [pc, #44]	; (10940 <buttons_scan_fn+0x118>)
   10912:	e794      	b.n	1083e <buttons_scan_fn+0x16>
   10914:	200031e7 	.word	0x200031e7
   10918:	00019ef8 	.word	0x00019ef8
   1091c:	00018a64 	.word	0x00018a64
   10920:	2000253c 	.word	0x2000253c
   10924:	2000052d 	.word	0x2000052d
   10928:	20002510 	.word	0x20002510
   1092c:	20002540 	.word	0x20002540
   10930:	20002514 	.word	0x20002514
   10934:	20002528 	.word	0x20002528
   10938:	20001988 	.word	0x20001988
   1093c:	200031e8 	.word	0x200031e8
   10940:	00019f11 	.word	0x00019f11

00010944 <dk_leds_init>:
{
   10944:	b570      	push	{r4, r5, r6, lr}
   10946:	4e11      	ldr	r6, [pc, #68]	; (1098c <dk_leds_init+0x48>)
   10948:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1094a:	2500      	movs	r5, #0
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1094c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   10950:	4630      	mov	r0, r6
   10952:	f007 f871 	bl	17a38 <gpio_pin_configure_dt>
		if (err) {
   10956:	4604      	mov	r4, r0
   10958:	b950      	cbnz	r0, 10970 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1095a:	3501      	adds	r5, #1
   1095c:	2d04      	cmp	r5, #4
   1095e:	f106 0608 	add.w	r6, r6, #8
   10962:	d1f3      	bne.n	1094c <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   10964:	210f      	movs	r1, #15
}
   10966:	b006      	add	sp, #24
   10968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1096c:	f7ff be96 	b.w	1069c <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   10970:	4b07      	ldr	r3, [pc, #28]	; (10990 <dk_leds_init+0x4c>)
   10972:	9305      	str	r3, [sp, #20]
   10974:	4807      	ldr	r0, [pc, #28]	; (10994 <dk_leds_init+0x50>)
   10976:	2302      	movs	r3, #2
   10978:	aa04      	add	r2, sp, #16
   1097a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1097e:	9304      	str	r3, [sp, #16]
   10980:	f007 f87f 	bl	17a82 <z_log_msg_static_create.constprop.0>
}
   10984:	4620      	mov	r0, r4
   10986:	b006      	add	sp, #24
   10988:	bd70      	pop	{r4, r5, r6, pc}
   1098a:	bf00      	nop
   1098c:	00018df4 	.word	0x00018df4
   10990:	00019f29 	.word	0x00019f29
   10994:	00018a64 	.word	0x00018a64

00010998 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   10998:	4b07      	ldr	r3, [pc, #28]	; (109b8 <dk_read_buttons+0x20>)
   1099a:	f3bf 8f5b 	dmb	ish
   1099e:	681b      	ldr	r3, [r3, #0]
   109a0:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   109a4:	b100      	cbz	r0, 109a8 <dk_read_buttons+0x10>
		*button_state = current_state;
   109a6:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   109a8:	4804      	ldr	r0, [pc, #16]	; (109bc <dk_read_buttons+0x24>)
   109aa:	b111      	cbz	r1, 109b2 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   109ac:	6802      	ldr	r2, [r0, #0]
   109ae:	405a      	eors	r2, r3
   109b0:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   109b2:	6003      	str	r3, [r0, #0]
}
   109b4:	4770      	bx	lr
   109b6:	bf00      	nop
   109b8:	2000253c 	.word	0x2000253c
   109bc:	2000250c 	.word	0x2000250c

000109c0 <dk_buttons_init>:
{
   109c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   109c4:	4b3c      	ldr	r3, [pc, #240]	; (10ab8 <dk_buttons_init+0xf8>)
{
   109c6:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   109c8:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   109ca:	483c      	ldr	r0, [pc, #240]	; (10abc <dk_buttons_init+0xfc>)
   109cc:	4d3c      	ldr	r5, [pc, #240]	; (10ac0 <dk_buttons_init+0x100>)
   109ce:	f007 fa2b 	bl	17e28 <z_impl_k_mutex_init>
   109d2:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   109d4:	2700      	movs	r7, #0
   109d6:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   109d8:	88f3      	ldrh	r3, [r6, #6]
   109da:	f013 0f01 	tst.w	r3, #1
   109de:	bf0c      	ite	eq
   109e0:	2120      	moveq	r1, #32
   109e2:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   109e4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   109e8:	4630      	mov	r0, r6
   109ea:	f007 f825 	bl	17a38 <gpio_pin_configure_dt>
		if (err) {
   109ee:	4604      	mov	r4, r0
   109f0:	b168      	cbz	r0, 10a0e <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   109f2:	4b34      	ldr	r3, [pc, #208]	; (10ac4 <dk_buttons_init+0x104>)
			LOG_ERR("Cannot disable callbacks()");
   109f4:	9305      	str	r3, [sp, #20]
   109f6:	4834      	ldr	r0, [pc, #208]	; (10ac8 <dk_buttons_init+0x108>)
   109f8:	2302      	movs	r3, #2
   109fa:	aa04      	add	r2, sp, #16
   109fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10a00:	9304      	str	r3, [sp, #16]
   10a02:	f007 f83e 	bl	17a82 <z_log_msg_static_create.constprop.0>
}
   10a06:	4620      	mov	r0, r4
   10a08:	b007      	add	sp, #28
   10a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a0e:	3701      	adds	r7, #1
   10a10:	2f04      	cmp	r7, #4
   10a12:	f106 0608 	add.w	r6, r6, #8
   10a16:	d1df      	bne.n	109d8 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a18:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   10a1a:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   10a1c:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   10a20:	6828      	ldr	r0, [r5, #0]
   10a22:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   10a24:	6883      	ldr	r3, [r0, #8]
   10a26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10a2a:	699c      	ldr	r4, [r3, #24]
   10a2c:	2300      	movs	r3, #0
   10a2e:	47a0      	blx	r4
		if (err) {
   10a30:	4604      	mov	r4, r0
   10a32:	b108      	cbz	r0, 10a38 <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   10a34:	4b25      	ldr	r3, [pc, #148]	; (10acc <dk_buttons_init+0x10c>)
   10a36:	e7dd      	b.n	109f4 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   10a38:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a3a:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   10a3c:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a40:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   10a42:	ea47 0703 	orr.w	r7, r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a46:	f105 0508 	add.w	r5, r5, #8
   10a4a:	d1e9      	bne.n	10a20 <dk_buttons_init+0x60>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   10a4c:	4e20      	ldr	r6, [pc, #128]	; (10ad0 <dk_buttons_init+0x110>)
   10a4e:	4b21      	ldr	r3, [pc, #132]	; (10ad4 <dk_buttons_init+0x114>)
	callback->pin_mask = pin_mask;
   10a50:	e9c6 3701 	strd	r3, r7, [r6, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a54:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   10a56:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   10a5a:	6883      	ldr	r3, [r0, #8]
   10a5c:	69db      	ldr	r3, [r3, #28]
   10a5e:	b133      	cbz	r3, 10a6e <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   10a60:	2201      	movs	r2, #1
   10a62:	4631      	mov	r1, r6
   10a64:	4798      	blx	r3
		if (err) {
   10a66:	4604      	mov	r4, r0
   10a68:	b120      	cbz	r0, 10a74 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   10a6a:	4b1b      	ldr	r3, [pc, #108]	; (10ad8 <dk_buttons_init+0x118>)
   10a6c:	e7c2      	b.n	109f4 <dk_buttons_init+0x34>
		return -ENOTSUP;
   10a6e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   10a72:	e7fa      	b.n	10a6a <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   10a74:	3501      	adds	r5, #1
   10a76:	2d04      	cmp	r5, #4
   10a78:	d1ed      	bne.n	10a56 <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   10a7a:	4918      	ldr	r1, [pc, #96]	; (10adc <dk_buttons_init+0x11c>)
   10a7c:	4818      	ldr	r0, [pc, #96]	; (10ae0 <dk_buttons_init+0x120>)
   10a7e:	f007 fb24 	bl	180ca <k_work_init_delayable>
	state = STATE_SCANNING;
   10a82:	4b18      	ldr	r3, [pc, #96]	; (10ae4 <dk_buttons_init+0x124>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   10a84:	4816      	ldr	r0, [pc, #88]	; (10ae0 <dk_buttons_init+0x120>)
	state = STATE_SCANNING;
   10a86:	2201      	movs	r2, #1
   10a88:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   10a8a:	2300      	movs	r3, #0
   10a8c:	2200      	movs	r2, #0
   10a8e:	f002 f899 	bl	12bc4 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   10a92:	4621      	mov	r1, r4
   10a94:	4620      	mov	r0, r4
   10a96:	f7ff ff7f 	bl	10998 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   10a9a:	f7ff fdd1 	bl	10640 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10a9e:	f3bf 8f5b 	dmb	ish
   10aa2:	4b11      	ldr	r3, [pc, #68]	; (10ae8 <dk_buttons_init+0x128>)
   10aa4:	e853 2f00 	ldrex	r2, [r3]
   10aa8:	e843 0100 	strex	r1, r0, [r3]
   10aac:	2900      	cmp	r1, #0
   10aae:	d1f9      	bne.n	10aa4 <dk_buttons_init+0xe4>
   10ab0:	f3bf 8f5b 	dmb	ish
   10ab4:	e7a7      	b.n	10a06 <dk_buttons_init+0x46>
   10ab6:	bf00      	nop
   10ab8:	20002540 	.word	0x20002540
   10abc:	20002514 	.word	0x20002514
   10ac0:	00018e14 	.word	0x00018e14
   10ac4:	00019f43 	.word	0x00019f43
   10ac8:	00018a64 	.word	0x00018a64
   10acc:	00019f60 	.word	0x00019f60
   10ad0:	20002530 	.word	0x20002530
   10ad4:	000107a9 	.word	0x000107a9
   10ad8:	00019f7b 	.word	0x00019f7b
   10adc:	00010829 	.word	0x00010829
   10ae0:	20001988 	.word	0x20001988
   10ae4:	200031e8 	.word	0x200031e8
   10ae8:	2000253c 	.word	0x2000253c

00010aec <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   10aec:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   10aee:	2803      	cmp	r0, #3
{
   10af0:	b086      	sub	sp, #24
   10af2:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   10af4:	d90e      	bls.n	10b14 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   10af6:	4b12      	ldr	r3, [pc, #72]	; (10b40 <dk_set_led+0x54>)
   10af8:	9305      	str	r3, [sp, #20]
   10afa:	4812      	ldr	r0, [pc, #72]	; (10b44 <dk_set_led+0x58>)
   10afc:	2302      	movs	r3, #2
   10afe:	aa04      	add	r2, sp, #16
   10b00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   10b04:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   10b08:	9304      	str	r3, [sp, #16]
   10b0a:	f006 ffba 	bl	17a82 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   10b0e:	4620      	mov	r0, r4
   10b10:	b006      	add	sp, #24
   10b12:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   10b14:	4b0c      	ldr	r3, [pc, #48]	; (10b48 <dk_set_led+0x5c>)
   10b16:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   10b1a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   10b1e:	7909      	ldrb	r1, [r1, #4]
   10b20:	f006 ff9f 	bl	17a62 <gpio_pin_set>
	if (err) {
   10b24:	4604      	mov	r4, r0
   10b26:	2800      	cmp	r0, #0
   10b28:	d0f1      	beq.n	10b0e <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   10b2a:	4b08      	ldr	r3, [pc, #32]	; (10b4c <dk_set_led+0x60>)
   10b2c:	9305      	str	r3, [sp, #20]
   10b2e:	4805      	ldr	r0, [pc, #20]	; (10b44 <dk_set_led+0x58>)
   10b30:	2302      	movs	r3, #2
   10b32:	aa04      	add	r2, sp, #16
   10b34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b38:	9304      	str	r3, [sp, #16]
   10b3a:	f006 ffa2 	bl	17a82 <z_log_msg_static_create.constprop.0>
   10b3e:	e7e6      	b.n	10b0e <dk_set_led+0x22>
   10b40:	00019f8f 	.word	0x00019f8f
   10b44:	00018a64 	.word	0x00018a64
   10b48:	00018df4 	.word	0x00018df4
   10b4c:	00019ea6 	.word	0x00019ea6

00010b50 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   10b50:	4602      	mov	r2, r0
   10b52:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   10b54:	4801      	ldr	r0, [pc, #4]	; (10b5c <multithreading_lock_acquire+0xc>)
   10b56:	f001 bd9f 	b.w	12698 <z_impl_k_mutex_lock>
   10b5a:	bf00      	nop
   10b5c:	20000594 	.word	0x20000594

00010b60 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   10b60:	4801      	ldr	r0, [pc, #4]	; (10b68 <multithreading_lock_release+0x8>)
   10b62:	f001 be13 	b.w	1278c <z_impl_k_mutex_unlock>
   10b66:	bf00      	nop
   10b68:	20000594 	.word	0x20000594

00010b6c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   10b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   10b6e:	f7fa ff33 	bl	b9d8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   10b72:	4b07      	ldr	r3, [pc, #28]	; (10b90 <k_sys_fatal_error_handler+0x24>)
   10b74:	9305      	str	r3, [sp, #20]
   10b76:	2302      	movs	r3, #2
   10b78:	9304      	str	r3, [sp, #16]
   10b7a:	4806      	ldr	r0, [pc, #24]	; (10b94 <k_sys_fatal_error_handler+0x28>)
   10b7c:	2300      	movs	r3, #0
   10b7e:	aa04      	add	r2, sp, #16
   10b80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10b84:	f7fb f808 	bl	bb98 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   10b88:	2000      	movs	r0, #0
   10b8a:	f7fc fc19 	bl	d3c0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   10b8e:	bf00      	nop
   10b90:	00019fbe 	.word	0x00019fbe
   10b94:	00018a6c 	.word	0x00018a6c

00010b98 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   10b98:	b598      	push	{r3, r4, r7, lr}
   10b9a:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   10b9c:	466c      	mov	r4, sp
   10b9e:	b08a      	sub	sp, #40	; 0x28
   10ba0:	466a      	mov	r2, sp
   10ba2:	4b0c      	ldr	r3, [pc, #48]	; (10bd4 <sdc_assertion_handler+0x3c>)
   10ba4:	61d1      	str	r1, [r2, #28]
   10ba6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10baa:	f44f 7300 	mov.w	r3, #512	; 0x200
   10bae:	8413      	strh	r3, [r2, #32]
   10bb0:	4b09      	ldr	r3, [pc, #36]	; (10bd8 <sdc_assertion_handler+0x40>)
   10bb2:	f842 3f10 	str.w	r3, [r2, #16]!
   10bb6:	4809      	ldr	r0, [pc, #36]	; (10bdc <sdc_assertion_handler+0x44>)
   10bb8:	2300      	movs	r3, #0
   10bba:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   10bbe:	f7fa ffeb 	bl	bb98 <z_impl_z_log_msg_static_create>
   10bc2:	46a5      	mov	sp, r4
	k_oops();
   10bc4:	4040      	eors	r0, r0
   10bc6:	f380 8811 	msr	BASEPRI, r0
   10bca:	f04f 0003 	mov.w	r0, #3
   10bce:	df02      	svc	2
}
   10bd0:	46bd      	mov	sp, r7
   10bd2:	bd98      	pop	{r3, r4, r7, pc}
   10bd4:	00019fdb 	.word	0x00019fdb
   10bd8:	01000004 	.word	0x01000004
   10bdc:	00018a4c 	.word	0x00018a4c

00010be0 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   10be0:	b538      	push	{r3, r4, r5, lr}
   10be2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   10be4:	4807      	ldr	r0, [pc, #28]	; (10c04 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   10be6:	6883      	ldr	r3, [r0, #8]
   10be8:	685d      	ldr	r5, [r3, #4]
   10bea:	460a      	mov	r2, r1
   10bec:	b135      	cbz	r5, 10bfc <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   10bee:	2300      	movs	r3, #0
   10bf0:	4621      	mov	r1, r4
   10bf2:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   10bf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   10bf8:	b2c0      	uxtb	r0, r0
   10bfa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   10bfc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10c00:	e7f8      	b.n	10bf4 <rand_prio_low_vector_get+0x14>
   10c02:	bf00      	nop
   10c04:	000187d4 	.word	0x000187d4

00010c08 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   10c08:	4901      	ldr	r1, [pc, #4]	; (10c10 <receive_signal_raise+0x8>)
   10c0a:	4802      	ldr	r0, [pc, #8]	; (10c14 <receive_signal_raise+0xc>)
   10c0c:	f007 ba46 	b.w	1809c <k_work_submit_to_queue>
   10c10:	20002544 	.word	0x20002544
   10c14:	20001c18 	.word	0x20001c18

00010c18 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   10c18:	b410      	push	{r4}
   10c1a:	4603      	mov	r3, r0
   10c1c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   10c1e:	4803      	ldr	r0, [pc, #12]	; (10c2c <rand_prio_low_vector_get_blocking+0x14>)
   10c20:	6881      	ldr	r1, [r0, #8]
   10c22:	680c      	ldr	r4, [r1, #0]
   10c24:	4619      	mov	r1, r3
   10c26:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   10c28:	bc10      	pop	{r4}
   10c2a:	4718      	bx	r3
   10c2c:	000187d4 	.word	0x000187d4

00010c30 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   10c30:	b5b0      	push	{r4, r5, r7, lr}
   10c32:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   10c34:	4832      	ldr	r0, [pc, #200]	; (10d00 <hci_driver_init+0xd0>)
{
   10c36:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   10c38:	f7fd fad6 	bl	e1e8 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   10c3c:	4831      	ldr	r0, [pc, #196]	; (10d04 <hci_driver_init+0xd4>)
   10c3e:	f7ef fb3f 	bl	2c0 <sdc_init>
		err = sdc_support_adv();
   10c42:	f7ef fbb7 	bl	3b4 <sdc_support_adv>
		if (err) {
   10c46:	4604      	mov	r4, r0
   10c48:	2800      	cmp	r0, #0
   10c4a:	d155      	bne.n	10cf8 <hci_driver_init+0xc8>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c4c:	1d3a      	adds	r2, r7, #4
   10c4e:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   10c50:	7138      	strb	r0, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c52:	f7ef faab 	bl	1ac <sdc_cfg_set>
	if (required_memory < 0) {
   10c56:	2800      	cmp	r0, #0
   10c58:	db49      	blt.n	10cee <hci_driver_init+0xbe>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   10c5a:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c5c:	1d3a      	adds	r2, r7, #4
   10c5e:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   10c60:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c62:	f7ef faa3 	bl	1ac <sdc_cfg_set>
	if (required_memory < 0) {
   10c66:	2800      	cmp	r0, #0
   10c68:	db41      	blt.n	10cee <hci_driver_init+0xbe>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   10c6a:	4b27      	ldr	r3, [pc, #156]	; (10d08 <hci_driver_init+0xd8>)
   10c6c:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c6e:	1d3a      	adds	r2, r7, #4
   10c70:	2103      	movs	r1, #3
   10c72:	4620      	mov	r0, r4
   10c74:	f7ef fa9a 	bl	1ac <sdc_cfg_set>
	if (required_memory < 0) {
   10c78:	2800      	cmp	r0, #0
   10c7a:	db38      	blt.n	10cee <hci_driver_init+0xbe>
	cfg.event_length.event_length_us =
   10c7c:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c80:	1d3a      	adds	r2, r7, #4
   10c82:	2104      	movs	r1, #4
   10c84:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   10c86:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c88:	f7ef fa90 	bl	1ac <sdc_cfg_set>
	if (required_memory < 0) {
   10c8c:	2800      	cmp	r0, #0
   10c8e:	db2e      	blt.n	10cee <hci_driver_init+0xbe>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   10c90:	2301      	movs	r3, #1
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c92:	1d3a      	adds	r2, r7, #4
   10c94:	2105      	movs	r1, #5
   10c96:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   10c98:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10c9a:	f7ef fa87 	bl	1ac <sdc_cfg_set>
	if (required_memory < 0) {
   10c9e:	2800      	cmp	r0, #0
   10ca0:	db25      	blt.n	10cee <hci_driver_init+0xbe>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   10ca2:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10ca4:	1d3a      	adds	r2, r7, #4
   10ca6:	2107      	movs	r1, #7
   10ca8:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   10caa:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   10cac:	f7ef fa7e 	bl	1ac <sdc_cfg_set>
	if (required_memory < 0) {
   10cb0:	2800      	cmp	r0, #0
   10cb2:	db1c      	blt.n	10cee <hci_driver_init+0xbe>
	if (required_memory > sizeof(sdc_mempool)) {
   10cb4:	f240 235e 	movw	r3, #606	; 0x25e
   10cb8:	4298      	cmp	r0, r3
   10cba:	dd1b      	ble.n	10cf4 <hci_driver_init+0xc4>
		LOG_ERR("Allocated memory too low: %u < %u",
   10cbc:	466d      	mov	r5, sp
   10cbe:	b088      	sub	sp, #32
   10cc0:	466a      	mov	r2, sp
   10cc2:	4912      	ldr	r1, [pc, #72]	; (10d0c <hci_driver_init+0xdc>)
   10cc4:	61d0      	str	r0, [r2, #28]
   10cc6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10cca:	2304      	movs	r3, #4
   10ccc:	f842 3f10 	str.w	r3, [r2, #16]!
   10cd0:	480f      	ldr	r0, [pc, #60]	; (10d10 <hci_driver_init+0xe0>)
   10cd2:	4623      	mov	r3, r4
   10cd4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   10cd8:	f7fa ff5e 	bl	bb98 <z_impl_z_log_msg_static_create>
   10cdc:	46ad      	mov	sp, r5
		k_panic();
   10cde:	4040      	eors	r0, r0
   10ce0:	f380 8811 	msr	BASEPRI, r0
   10ce4:	f04f 0004 	mov.w	r0, #4
   10ce8:	df02      	svc	2
		return -ENOMEM;
   10cea:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return err;
}
   10cee:	3708      	adds	r7, #8
   10cf0:	46bd      	mov	sp, r7
   10cf2:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   10cf4:	4620      	mov	r0, r4
	if (err) {
   10cf6:	e7fa      	b.n	10cee <hci_driver_init+0xbe>
			return -ENOTSUP;
   10cf8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10cfc:	e7f7      	b.n	10cee <hci_driver_init+0xbe>
   10cfe:	bf00      	nop
   10d00:	00018e34 	.word	0x00018e34
   10d04:	00010b99 	.word	0x00010b99
   10d08:	02031b1b 	.word	0x02031b1b
   10d0c:	0001a000 	.word	0x0001a000
   10d10:	00018a4c 	.word	0x00018a4c

00010d14 <hci_driver_open>:
{
   10d14:	b590      	push	{r4, r7, lr}
   10d16:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   10d18:	492e      	ldr	r1, [pc, #184]	; (10dd4 <hci_driver_open+0xc0>)
   10d1a:	482f      	ldr	r0, [pc, #188]	; (10dd8 <hci_driver_open+0xc4>)
{
   10d1c:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   10d1e:	f007 f9a0 	bl	18062 <k_work_init>
	sdc_build_revision_get(build_revision);
   10d22:	1d38      	adds	r0, r7, #4
   10d24:	f7ef fa34 	bl	190 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   10d28:	466c      	mov	r4, sp
   10d2a:	b088      	sub	sp, #32
   10d2c:	466a      	mov	r2, sp
   10d2e:	4b2b      	ldr	r3, [pc, #172]	; (10ddc <hci_driver_open+0xc8>)
   10d30:	6153      	str	r3, [r2, #20]
   10d32:	4b2b      	ldr	r3, [pc, #172]	; (10de0 <hci_driver_open+0xcc>)
   10d34:	6193      	str	r3, [r2, #24]
   10d36:	f44f 7300 	mov.w	r3, #512	; 0x200
   10d3a:	8393      	strh	r3, [r2, #28]
   10d3c:	4b29      	ldr	r3, [pc, #164]	; (10de4 <hci_driver_open+0xd0>)
   10d3e:	f842 3f10 	str.w	r3, [r2, #16]!
   10d42:	4929      	ldr	r1, [pc, #164]	; (10de8 <hci_driver_open+0xd4>)
   10d44:	4829      	ldr	r0, [pc, #164]	; (10dec <hci_driver_open+0xd8>)
   10d46:	1d3b      	adds	r3, r7, #4
   10d48:	f7fa ff26 	bl	bb98 <z_impl_z_log_msg_static_create>
   10d4c:	46a5      	mov	sp, r4
   10d4e:	4828      	ldr	r0, [pc, #160]	; (10df0 <hci_driver_open+0xdc>)
   10d50:	f006 ff80 	bl	17c54 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   10d54:	4603      	mov	r3, r0
   10d56:	b980      	cbnz	r0, 10d7a <hci_driver_open+0x66>
		LOG_ERR("Entropy source device not ready");
   10d58:	4a26      	ldr	r2, [pc, #152]	; (10df4 <hci_driver_open+0xe0>)
   10d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   10d5c:	2202      	movs	r2, #2
   10d5e:	62ba      	str	r2, [r7, #40]	; 0x28
   10d60:	4822      	ldr	r0, [pc, #136]	; (10dec <hci_driver_open+0xd8>)
   10d62:	f107 0228 	add.w	r2, r7, #40	; 0x28
   10d66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   10d6a:	f06f 0412 	mvn.w	r4, #18
   10d6e:	f7fa ff13 	bl	bb98 <z_impl_z_log_msg_static_create>
}
   10d72:	4620      	mov	r0, r4
   10d74:	3734      	adds	r7, #52	; 0x34
   10d76:	46bd      	mov	sp, r7
   10d78:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   10d7a:	4a1f      	ldr	r2, [pc, #124]	; (10df8 <hci_driver_open+0xe4>)
   10d7c:	ca07      	ldmia	r2, {r0, r1, r2}
   10d7e:	f107 0318 	add.w	r3, r7, #24
   10d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   10d86:	4618      	mov	r0, r3
   10d88:	f7ef fb6c 	bl	464 <sdc_rand_source_register>
	if (err) {
   10d8c:	b188      	cbz	r0, 10db2 <hci_driver_open+0x9e>
		LOG_ERR("Failed to register rand source (%d)", err);
   10d8e:	b088      	sub	sp, #32
   10d90:	466a      	mov	r2, sp
   10d92:	4b1a      	ldr	r3, [pc, #104]	; (10dfc <hci_driver_open+0xe8>)
   10d94:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10d98:	2303      	movs	r3, #3
   10d9a:	f842 3f10 	str.w	r3, [r2, #16]!
   10d9e:	4813      	ldr	r0, [pc, #76]	; (10dec <hci_driver_open+0xd8>)
   10da0:	2300      	movs	r3, #0
   10da2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10da6:	f7fa fef7 	bl	bb98 <z_impl_z_log_msg_static_create>
   10daa:	46a5      	mov	sp, r4
		return -EINVAL;
   10dac:	f06f 0415 	mvn.w	r4, #21
   10db0:	e7df      	b.n	10d72 <hci_driver_open+0x5e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   10db2:	f04f 30ff 	mov.w	r0, #4294967295
   10db6:	f04f 31ff 	mov.w	r1, #4294967295
   10dba:	f7ff fec9 	bl	10b50 <multithreading_lock_acquire>
	if (err) {
   10dbe:	4604      	mov	r4, r0
   10dc0:	2800      	cmp	r0, #0
   10dc2:	d1d6      	bne.n	10d72 <hci_driver_open+0x5e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   10dc4:	490e      	ldr	r1, [pc, #56]	; (10e00 <hci_driver_open+0xec>)
   10dc6:	480f      	ldr	r0, [pc, #60]	; (10e04 <hci_driver_open+0xf0>)
   10dc8:	f7ef fa50 	bl	26c <sdc_enable>
	if (err) {
   10dcc:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   10dce:	f7ff fec7 	bl	10b60 <multithreading_lock_release>
	return 0;
   10dd2:	e7ce      	b.n	10d72 <hci_driver_open+0x5e>
   10dd4:	00017aeb 	.word	0x00017aeb
   10dd8:	20002544 	.word	0x20002544
   10ddc:	00019ab7 	.word	0x00019ab7
   10de0:	0001a022 	.word	0x0001a022
   10de4:	01000003 	.word	0x01000003
   10de8:	01401cc0 	.word	0x01401cc0
   10dec:	00018a4c 	.word	0x00018a4c
   10df0:	000187d4 	.word	0x000187d4
   10df4:	0001a049 	.word	0x0001a049
   10df8:	00018b28 	.word	0x00018b28
   10dfc:	0001a069 	.word	0x0001a069
   10e00:	200019b8 	.word	0x200019b8
   10e04:	00010c09 	.word	0x00010c09

00010e08 <hci_driver_receive_process>:
{
   10e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e0a:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   10e0c:	f04f 30ff 	mov.w	r0, #4294967295
{
   10e10:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   10e12:	f04f 31ff 	mov.w	r1, #4294967295
   10e16:	f7ff fe9b 	bl	10b50 <multithreading_lock_acquire>
	if (!errcode) {
   10e1a:	bb40      	cbnz	r0, 10e6e <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   10e1c:	4d33      	ldr	r5, [pc, #204]	; (10eec <hci_driver_receive_process+0xe4>)
   10e1e:	1df9      	adds	r1, r7, #7
   10e20:	4628      	mov	r0, r5
   10e22:	f000 fba5 	bl	11570 <hci_internal_msg_get>
   10e26:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   10e28:	f7ff fe9a 	bl	10b60 <multithreading_lock_release>
	if (errcode) {
   10e2c:	b9fc      	cbnz	r4, 10e6e <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   10e2e:	79fe      	ldrb	r6, [r7, #7]
   10e30:	2e04      	cmp	r6, #4
   10e32:	d133      	bne.n	10e9c <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   10e34:	7828      	ldrb	r0, [r5, #0]
   10e36:	283e      	cmp	r0, #62	; 0x3e
   10e38:	d01c      	beq.n	10e74 <hci_driver_receive_process+0x6c>
   10e3a:	28ff      	cmp	r0, #255	; 0xff
   10e3c:	d021      	beq.n	10e82 <hci_driver_receive_process+0x7a>
		switch (subevent) {
   10e3e:	f04f 32ff 	mov.w	r2, #4294967295
   10e42:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   10e46:	4621      	mov	r1, r4
   10e48:	f7fc fb76 	bl	d538 <bt_buf_get_evt>
	if (!evt_buf) {
   10e4c:	4606      	mov	r6, r0
   10e4e:	b9d8      	cbnz	r0, 10e88 <hci_driver_receive_process+0x80>
		if (discardable) {
   10e50:	b95c      	cbnz	r4, 10e6a <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   10e52:	4b27      	ldr	r3, [pc, #156]	; (10ef0 <hci_driver_receive_process+0xe8>)
   10e54:	61fb      	str	r3, [r7, #28]
   10e56:	2302      	movs	r3, #2
   10e58:	61bb      	str	r3, [r7, #24]
   10e5a:	4826      	ldr	r0, [pc, #152]	; (10ef4 <hci_driver_receive_process+0xec>)
   10e5c:	4623      	mov	r3, r4
   10e5e:	f107 0218 	add.w	r2, r7, #24
   10e62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10e66:	f7fa fe97 	bl	bb98 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   10e6a:	f7ff fecd 	bl	10c08 <receive_signal_raise>
}
   10e6e:	3724      	adds	r7, #36	; 0x24
   10e70:	46bd      	mov	sp, r7
   10e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   10e74:	78ab      	ldrb	r3, [r5, #2]
   10e76:	2b02      	cmp	r3, #2
		switch (subevent) {
   10e78:	d1e1      	bne.n	10e3e <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   10e7a:	2200      	movs	r2, #0
   10e7c:	2300      	movs	r3, #0
			return true;
   10e7e:	2401      	movs	r4, #1
   10e80:	e7e1      	b.n	10e46 <hci_driver_receive_process+0x3e>
		switch (subevent) {
   10e82:	78ab      	ldrb	r3, [r5, #2]
   10e84:	2b80      	cmp	r3, #128	; 0x80
   10e86:	e7f7      	b.n	10e78 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   10e88:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10e8a:	4918      	ldr	r1, [pc, #96]	; (10eec <hci_driver_receive_process+0xe4>)
   10e8c:	3202      	adds	r2, #2
   10e8e:	300c      	adds	r0, #12
   10e90:	f006 f9e1 	bl	17256 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   10e94:	4630      	mov	r0, r6
	bt_recv(data_buf);
   10e96:	f7fd f957 	bl	e148 <bt_recv>
   10e9a:	e7e6      	b.n	10e6a <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   10e9c:	2e02      	cmp	r6, #2
   10e9e:	d114      	bne.n	10eca <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   10ea0:	f04f 32ff 	mov.w	r2, #4294967295
   10ea4:	f04f 33ff 	mov.w	r3, #4294967295
   10ea8:	2003      	movs	r0, #3
   10eaa:	f7fc fb15 	bl	d4d8 <bt_buf_get_rx>
	if (!data_buf) {
   10eae:	4604      	mov	r4, r0
   10eb0:	b918      	cbnz	r0, 10eba <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   10eb2:	4b11      	ldr	r3, [pc, #68]	; (10ef8 <hci_driver_receive_process+0xf0>)
   10eb4:	e9c7 6306 	strd	r6, r3, [r7, #24]
   10eb8:	e7cf      	b.n	10e5a <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   10eba:	886a      	ldrh	r2, [r5, #2]
   10ebc:	4629      	mov	r1, r5
   10ebe:	3204      	adds	r2, #4
   10ec0:	300c      	adds	r0, #12
   10ec2:	f006 f9c8 	bl	17256 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   10ec6:	4620      	mov	r0, r4
   10ec8:	e7e5      	b.n	10e96 <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   10eca:	466d      	mov	r5, sp
   10ecc:	b088      	sub	sp, #32
   10ece:	466a      	mov	r2, sp
   10ed0:	4b0a      	ldr	r3, [pc, #40]	; (10efc <hci_driver_receive_process+0xf4>)
   10ed2:	e9c2 3605 	strd	r3, r6, [r2, #20]
   10ed6:	2303      	movs	r3, #3
   10ed8:	f842 3f10 	str.w	r3, [r2, #16]!
   10edc:	4805      	ldr	r0, [pc, #20]	; (10ef4 <hci_driver_receive_process+0xec>)
   10ede:	4623      	mov	r3, r4
   10ee0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10ee4:	f7fa fe58 	bl	bb98 <z_impl_z_log_msg_static_create>
   10ee8:	46ad      	mov	sp, r5
   10eea:	e7be      	b.n	10e6a <hci_driver_receive_process+0x62>
   10eec:	200031e9 	.word	0x200031e9
   10ef0:	0001a08d 	.word	0x0001a08d
   10ef4:	00018a4c 	.word	0x00018a4c
   10ef8:	0001a0a7 	.word	0x0001a0a7
   10efc:	0001a0c0 	.word	0x0001a0c0

00010f00 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   10f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   10f02:	4cd3      	ldr	r4, [pc, #844]	; (11250 <hci_internal_cmd_put+0x350>)
   10f04:	8805      	ldrh	r5, [r0, #0]
   10f06:	7823      	ldrb	r3, [r4, #0]
{
   10f08:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	f040 8326 	bne.w	1155c <hci_internal_cmd_put+0x65c>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   10f10:	2304      	movs	r3, #4
   10f12:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   10f16:	4bcf      	ldr	r3, [pc, #828]	; (11254 <hci_internal_cmd_put+0x354>)
   10f18:	681f      	ldr	r7, [r3, #0]
   10f1a:	b1a7      	cbz	r7, 10f46 <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
   10f1c:	f10d 0306 	add.w	r3, sp, #6
   10f20:	f10d 0207 	add.w	r2, sp, #7
   10f24:	1c61      	adds	r1, r4, #1
   10f26:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   10f28:	2801      	cmp	r0, #1
   10f2a:	d00c      	beq.n	10f46 <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
   10f2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10f30:	bb33      	cbnz	r3, 10f80 <hci_internal_cmd_put+0x80>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   10f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   10f36:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   10f38:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   10f3a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   10f3c:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   10f3e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   10f40:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   10f42:	71a0      	strb	r0, [r4, #6]
}
   10f44:	e025      	b.n	10f92 <hci_internal_cmd_put+0x92>
		switch (BT_OGF(opcode)) {
   10f46:	0aab      	lsrs	r3, r5, #10
   10f48:	2b08      	cmp	r3, #8
   10f4a:	f000 80ee 	beq.w	1112a <hci_internal_cmd_put+0x22a>
   10f4e:	d813      	bhi.n	10f78 <hci_internal_cmd_put+0x78>
   10f50:	2b03      	cmp	r3, #3
   10f52:	d02b      	beq.n	10fac <hci_internal_cmd_put+0xac>
   10f54:	2b04      	cmp	r3, #4
   10f56:	d046      	beq.n	10fe6 <hci_internal_cmd_put+0xe6>
   10f58:	2001      	movs	r0, #1
	switch (hci_opcode) {
   10f5a:	f240 4306 	movw	r3, #1030	; 0x406
   10f5e:	429d      	cmp	r5, r3
   10f60:	f040 8100 	bne.w	11164 <hci_internal_cmd_put+0x264>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   10f64:	230f      	movs	r3, #15
   10f66:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   10f68:	2204      	movs	r2, #4
	evt_data->ncmd = 1;
   10f6a:	2301      	movs	r3, #1
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   10f6c:	70a2      	strb	r2, [r4, #2]
	evt_data->status = status_code;
   10f6e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   10f70:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   10f72:	2106      	movs	r1, #6
   10f74:	7161      	strb	r1, [r4, #5]
   10f76:	e15a      	b.n	1122e <hci_internal_cmd_put+0x32e>
		switch (BT_OGF(opcode)) {
   10f78:	2b3f      	cmp	r3, #63	; 0x3f
   10f7a:	f000 8206 	beq.w	1138a <hci_internal_cmd_put+0x48a>
	switch (opcode)	{
   10f7e:	2001      	movs	r0, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   10f80:	230f      	movs	r3, #15
   10f82:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   10f84:	2304      	movs	r3, #4
   10f86:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   10f88:	2301      	movs	r3, #1
	evt_data->status = status_code;
   10f8a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   10f8c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   10f8e:	f8a4 5005 	strh.w	r5, [r4, #5]
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
   10f92:	2301      	movs	r3, #1
   10f94:	7023      	strb	r3, [r4, #0]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   10f96:	f242 0383 	movw	r3, #8323	; 0x2083
   10f9a:	429d      	cmp	r5, r3
   10f9c:	f040 809d 	bne.w	110da <hci_internal_cmd_put+0x1da>
		&&
   10fa0:	7863      	ldrb	r3, [r4, #1]
   10fa2:	2b0e      	cmp	r3, #14
   10fa4:	f040 8099 	bne.w	110da <hci_internal_cmd_put+0x1da>
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   10fa8:	2300      	movs	r3, #0
   10faa:	e141      	b.n	11230 <hci_internal_cmd_put+0x330>
	return ((uint16_t)src[1] << 8) | src[0];
   10fac:	f9b6 3000 	ldrsh.w	r3, [r6]
	switch (opcode)	{
   10fb0:	f640 4201 	movw	r2, #3073	; 0xc01
   10fb4:	4293      	cmp	r3, r2
   10fb6:	d00d      	beq.n	10fd4 <hci_internal_cmd_put+0xd4>
   10fb8:	f640 4203 	movw	r2, #3075	; 0xc03
   10fbc:	4293      	cmp	r3, r2
   10fbe:	d00f      	beq.n	10fe0 <hci_internal_cmd_put+0xe0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   10fc0:	230f      	movs	r3, #15
   10fc2:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   10fc4:	2304      	movs	r3, #4
   10fc6:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   10fc8:	2301      	movs	r3, #1
   10fca:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   10fcc:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   10fce:	f8a4 5005 	strh.w	r5, [r4, #5]
	cmd_complete_or_status.occurred = true;
   10fd2:	e12d      	b.n	11230 <hci_internal_cmd_put+0x330>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   10fd4:	1cf0      	adds	r0, r6, #3
   10fd6:	f7f7 f87b 	bl	80d0 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   10fda:	2801      	cmp	r0, #1
   10fdc:	d0cf      	beq.n	10f7e <hci_internal_cmd_put+0x7e>
   10fde:	e7a8      	b.n	10f32 <hci_internal_cmd_put+0x32>
		return sdc_hci_cmd_cb_reset();
   10fe0:	f7ef fb38 	bl	654 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   10fe4:	e7f9      	b.n	10fda <hci_internal_cmd_put+0xda>
	switch (opcode)	{
   10fe6:	8833      	ldrh	r3, [r6, #0]
   10fe8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   10fec:	3b01      	subs	r3, #1
   10fee:	2b08      	cmp	r3, #8
   10ff0:	d8e6      	bhi.n	10fc0 <hci_internal_cmd_put+0xc0>
   10ff2:	a201      	add	r2, pc, #4	; (adr r2, 10ff8 <hci_internal_cmd_put+0xf8>)
   10ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10ff8:	0001101d 	.word	0x0001101d
   10ffc:	0001102f 	.word	0x0001102f
   11000:	000110e1 	.word	0x000110e1
   11004:	00010fc1 	.word	0x00010fc1
   11008:	00010fc1 	.word	0x00010fc1
   1100c:	00010fc1 	.word	0x00010fc1
   11010:	00010fc1 	.word	0x00010fc1
   11014:	00010fc1 	.word	0x00010fc1
   11018:	00011119 	.word	0x00011119
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1101c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   11020:	488d      	ldr	r0, [pc, #564]	; (11258 <hci_internal_cmd_put+0x358>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   11022:	3308      	adds	r3, #8
   11024:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   11028:	f7f7 f884 	bl	8134 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1102c:	e7d5      	b.n	10fda <hci_internal_cmd_put+0xda>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1102e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   11032:	4e89      	ldr	r6, [pc, #548]	; (11258 <hci_internal_cmd_put+0x358>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   11034:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   11036:	2230      	movs	r2, #48	; 0x30
   11038:	2100      	movs	r1, #0
   1103a:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1103c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   11040:	f005 ff6c 	bl	16f1c <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   11044:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   11048:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1104a:	2300      	movs	r3, #0
   1104c:	71a3      	strb	r3, [r4, #6]
	cmds->hci_set_event_mask = 1;
   1104e:	7b23      	ldrb	r3, [r4, #12]
	evt_data->opcode = hci_opcode;
   11050:	80a5      	strh	r5, [r4, #4]
	cmds->hci_set_event_mask = 1;
   11052:	f063 033f 	orn	r3, r3, #63	; 0x3f
   11056:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
   11058:	7d63      	ldrb	r3, [r4, #21]
   1105a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1105e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   11062:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   11064:	7da3      	ldrb	r3, [r4, #22]
   11066:	f043 0302 	orr.w	r3, r3, #2
   1106a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   1106c:	f894 3020 	ldrb.w	r3, [r4, #32]
   11070:	f063 0308 	orn	r3, r3, #8
   11074:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   11078:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1107c:	f063 033c 	orn	r3, r3, #60	; 0x3c
   11080:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   11084:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   11088:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1108c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
   11090:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   11094:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   11098:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   1109c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   110a0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   110a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   110a8:	220e      	movs	r2, #14
	cmds->hci_le_receiver_test_v2 = 1;
   110aa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   110ae:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   110b2:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   110b4:	2201      	movs	r2, #1
	cmds->hci_le_transmitter_test_v2 = 1;
   110b6:	4313      	orrs	r3, r2
   110b8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   110bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	evt_data->ncmd = 1;
   110c0:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_read_transmit_power = 1;
   110c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   110c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_data_related_address_changes = 1;
   110ca:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   110ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   110d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   110d6:	f806 2c07 	strb.w	r2, [r6, #-7]
	}

	return 0;
   110da:	2000      	movs	r0, #0
}
   110dc:	b003      	add	sp, #12
   110de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   110e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   110e4:	4e5c      	ldr	r6, [pc, #368]	; (11258 <hci_internal_cmd_put+0x358>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   110e6:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   110e8:	2208      	movs	r2, #8
   110ea:	2100      	movs	r1, #0
   110ec:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   110ee:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   110f2:	f005 ff13 	bl	16f1c <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   110f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   110fa:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   110fc:	2300      	movs	r3, #0
   110fe:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   11100:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   11102:	80a5      	strh	r5, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   11104:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   11106:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1110a:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   1110c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   11110:	2201      	movs	r2, #1
   11112:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   11114:	72e3      	strb	r3, [r4, #11]
   11116:	e7de      	b.n	110d6 <hci_internal_cmd_put+0x1d6>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   11118:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1111c:	484e      	ldr	r0, [pc, #312]	; (11258 <hci_internal_cmd_put+0x358>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1111e:	3306      	adds	r3, #6
   11120:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   11124:	f7f7 f804 	bl	8130 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   11128:	e757      	b.n	10fda <hci_internal_cmd_put+0xda>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1112a:	4630      	mov	r0, r6
	switch (opcode)	{
   1112c:	f242 011c 	movw	r1, #8220	; 0x201c
   11130:	f830 3b03 	ldrh.w	r3, [r0], #3
   11134:	b21a      	sxth	r2, r3
   11136:	428a      	cmp	r2, r1
   11138:	dc62      	bgt.n	11200 <hci_internal_cmd_put+0x300>
   1113a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1113e:	f242 0232 	movw	r2, #8242	; 0x2032
   11142:	dc1d      	bgt.n	11180 <hci_internal_cmd_put+0x280>
	switch (hci_opcode) {
   11144:	4295      	cmp	r5, r2
   11146:	d068      	beq.n	1121a <hci_internal_cmd_put+0x31a>
   11148:	f200 8206 	bhi.w	11558 <hci_internal_cmd_put+0x658>
   1114c:	f242 0326 	movw	r3, #8230	; 0x2026
   11150:	429d      	cmp	r5, r3
   11152:	f63f af14 	bhi.w	10f7e <hci_internal_cmd_put+0x7e>
   11156:	f242 030c 	movw	r3, #8204	; 0x200c
   1115a:	429d      	cmp	r5, r3
   1115c:	f04f 0001 	mov.w	r0, #1
   11160:	f200 81cc 	bhi.w	114fc <hci_internal_cmd_put+0x5fc>
   11164:	f240 431d 	movw	r3, #1053	; 0x41d
   11168:	429d      	cmp	r5, r3
   1116a:	f47f af36 	bne.w	10fda <hci_internal_cmd_put+0xda>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1116e:	230f      	movs	r3, #15
   11170:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   11172:	2204      	movs	r2, #4
	evt_data->ncmd = 1;
   11174:	2301      	movs	r3, #1
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   11176:	70a2      	strb	r2, [r4, #2]
	evt_data->status = status_code;
   11178:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1117a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1117c:	211d      	movs	r1, #29
   1117e:	e6f9      	b.n	10f74 <hci_internal_cmd_put+0x74>
	switch (opcode)	{
   11180:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   11184:	3b01      	subs	r3, #1
   11186:	2b1b      	cmp	r3, #27
   11188:	d8dc      	bhi.n	11144 <hci_internal_cmd_put+0x244>
   1118a:	a101      	add	r1, pc, #4	; (adr r1, 11190 <hci_internal_cmd_put+0x290>)
   1118c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   11190:	00011235 	.word	0x00011235
   11194:	0001125d 	.word	0x0001125d
   11198:	0001126f 	.word	0x0001126f
   1119c:	00011145 	.word	0x00011145
   111a0:	000112d1 	.word	0x000112d1
   111a4:	000112d7 	.word	0x000112d7
   111a8:	000112dd 	.word	0x000112dd
   111ac:	000112ef 	.word	0x000112ef
   111b0:	000112f5 	.word	0x000112f5
   111b4:	000112fb 	.word	0x000112fb
   111b8:	00011145 	.word	0x00011145
   111bc:	00011145 	.word	0x00011145
   111c0:	00011145 	.word	0x00011145
   111c4:	00011145 	.word	0x00011145
   111c8:	00011307 	.word	0x00011307
   111cc:	00011319 	.word	0x00011319
   111d0:	0001131f 	.word	0x0001131f
   111d4:	00011325 	.word	0x00011325
   111d8:	00011145 	.word	0x00011145
   111dc:	00011145 	.word	0x00011145
   111e0:	00011145 	.word	0x00011145
   111e4:	00011145 	.word	0x00011145
   111e8:	0001132b 	.word	0x0001132b
   111ec:	0001133d 	.word	0x0001133d
   111f0:	00011145 	.word	0x00011145
   111f4:	00011145 	.word	0x00011145
   111f8:	00011145 	.word	0x00011145
   111fc:	0001134f 	.word	0x0001134f
   11200:	f242 034b 	movw	r3, #8267	; 0x204b
   11204:	429a      	cmp	r2, r3
   11206:	f000 80b7 	beq.w	11378 <hci_internal_cmd_put+0x478>
   1120a:	f242 037c 	movw	r3, #8316	; 0x207c
   1120e:	429a      	cmp	r2, r3
   11210:	d076      	beq.n	11300 <hci_internal_cmd_put+0x400>
	switch (hci_opcode) {
   11212:	f242 0332 	movw	r3, #8242	; 0x2032
   11216:	429d      	cmp	r5, r3
   11218:	e795      	b.n	11146 <hci_internal_cmd_put+0x246>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1121a:	230f      	movs	r3, #15
   1121c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1121e:	2304      	movs	r3, #4
   11220:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   11222:	2301      	movs	r3, #1
   11224:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   11226:	2232      	movs	r2, #50	; 0x32
   11228:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   1122a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1122c:	2220      	movs	r2, #32
   1122e:	71a2      	strb	r2, [r4, #6]
		cmd_complete_or_status.occurred = false;
   11230:	7023      	strb	r3, [r4, #0]
   11232:	e752      	b.n	110da <hci_internal_cmd_put+0x1da>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   11234:	f7f6 ff9e 	bl	8174 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   11238:	f242 0332 	movw	r3, #8242	; 0x2032
   1123c:	429d      	cmp	r5, r3
   1123e:	f040 814f 	bne.w	114e0 <hci_internal_cmd_put+0x5e0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   11242:	230f      	movs	r3, #15
   11244:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   11246:	2304      	movs	r3, #4
   11248:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1124a:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1124c:	2301      	movs	r3, #1
   1124e:	e6bd      	b.n	10fcc <hci_internal_cmd_put+0xcc>
   11250:	2000322f 	.word	0x2000322f
   11254:	20002554 	.word	0x20002554
   11258:	20003236 	.word	0x20003236
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1125c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   11260:	48c0      	ldr	r0, [pc, #768]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   11262:	3303      	adds	r3, #3
   11264:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   11268:	f7f6 ff74 	bl	8154 <sdc_hci_cmd_le_read_buffer_size>
   1126c:	e7e4      	b.n	11238 <hci_internal_cmd_put+0x338>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1126e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   11272:	4ebc      	ldr	r6, [pc, #752]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   11274:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   11276:	2208      	movs	r2, #8
   11278:	2100      	movs	r1, #0
   1127a:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1127c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   11280:	f005 fe4c 	bl	16f1c <memset>
	features->params.le_encryption = 1;
   11284:	79e3      	ldrb	r3, [r4, #7]
   11286:	f023 031d 	bic.w	r3, r3, #29
   1128a:	f043 031d 	orr.w	r3, r3, #29
   1128e:	71e3      	strb	r3, [r4, #7]
	features->params.channel_selection_algorithm_2 = 1;
   11290:	7a23      	ldrb	r3, [r4, #8]
   11292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11296:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   11298:	f242 0332 	movw	r3, #8242	; 0x2032
   1129c:	429d      	cmp	r5, r3
   1129e:	d008      	beq.n	112b2 <hci_internal_cmd_put+0x3b2>
   112a0:	f200 8148 	bhi.w	11534 <hci_internal_cmd_put+0x634>
   112a4:	f242 0326 	movw	r3, #8230	; 0x2026
   112a8:	429d      	cmp	r5, r3
   112aa:	f240 8132 	bls.w	11512 <hci_internal_cmd_put+0x612>
		return 0;
   112ae:	2000      	movs	r0, #0
   112b0:	e63f      	b.n	10f32 <hci_internal_cmd_put+0x32>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   112b2:	230f      	movs	r3, #15
   112b4:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   112b6:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   112b8:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   112ba:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   112bc:	2300      	movs	r3, #0
   112be:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   112c0:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   112c2:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   112c4:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   112c6:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   112c8:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   112ca:	f806 3c07 	strb.w	r3, [r6, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   112ce:	e704      	b.n	110da <hci_internal_cmd_put+0x1da>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   112d0:	f7f6 ff55 	bl	817e <sdc_hci_cmd_le_set_random_address>
   112d4:	e7b0      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   112d6:	f7f6 ff49 	bl	816c <sdc_hci_cmd_le_set_adv_params>
   112da:	e7ad      	b.n	11238 <hci_internal_cmd_put+0x338>
		*param_length_out +=
   112dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   112e0:	48a0      	ldr	r0, [pc, #640]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out +=
   112e2:	3301      	adds	r3, #1
   112e4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   112e8:	f7f6 ff32 	bl	8150 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   112ec:	e7a4      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   112ee:	f7f6 ff39 	bl	8164 <sdc_hci_cmd_le_set_adv_data>
   112f2:	e7a1      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   112f4:	f7f6 ff45 	bl	8182 <sdc_hci_cmd_le_set_scan_response_data>
   112f8:	e79e      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   112fa:	f7f6 ff35 	bl	8168 <sdc_hci_cmd_le_set_adv_enable>
   112fe:	e79b      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   11300:	f7f6 ff36 	bl	8170 <sdc_hci_cmd_le_set_data_related_address_changes>
   11304:	e798      	b.n	11238 <hci_internal_cmd_put+0x338>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   11306:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1130a:	4896      	ldr	r0, [pc, #600]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1130c:	3301      	adds	r3, #1
   1130e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   11312:	f7f6 ff21 	bl	8158 <sdc_hci_cmd_le_read_filter_accept_list_size>
   11316:	e78f      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   11318:	f7f6 ff10 	bl	813c <sdc_hci_cmd_le_clear_filter_accept_list>
   1131c:	e78c      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1131e:	f7f6 ff0b 	bl	8138 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   11322:	e789      	b.n	11238 <hci_internal_cmd_put+0x338>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   11324:	f7f6 ff1c 	bl	8160 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   11328:	e786      	b.n	11238 <hci_internal_cmd_put+0x338>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1132a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1132e:	498d      	ldr	r1, [pc, #564]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   11330:	3310      	adds	r3, #16
   11332:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   11336:	f7f6 ff03 	bl	8140 <sdc_hci_cmd_le_encrypt>
   1133a:	e77d      	b.n	11238 <hci_internal_cmd_put+0x338>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1133c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   11340:	4888      	ldr	r0, [pc, #544]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   11342:	3308      	adds	r3, #8
   11344:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   11348:	f7f6 ff00 	bl	814c <sdc_hci_cmd_le_rand>
   1134c:	e774      	b.n	11238 <hci_internal_cmd_put+0x338>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1134e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11352:	3308      	adds	r3, #8
   11354:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (hci_opcode) {
   11358:	f242 0232 	movw	r2, #8242	; 0x2032
	*buf = states1;
   1135c:	2303      	movs	r3, #3
   1135e:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   11360:	4295      	cmp	r5, r2
	*(buf + 4) = states2;
   11362:	f04f 0300 	mov.w	r3, #0
   11366:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   11368:	d19a      	bne.n	112a0 <hci_internal_cmd_put+0x3a0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1136a:	220f      	movs	r2, #15
   1136c:	7062      	strb	r2, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1136e:	2204      	movs	r2, #4
	evt_data->status = status_code;
   11370:	70e3      	strb	r3, [r4, #3]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   11372:	70a2      	strb	r2, [r4, #2]
	evt_data->ncmd = 1;
   11374:	2301      	movs	r3, #1
   11376:	e756      	b.n	11226 <hci_internal_cmd_put+0x326>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   11378:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1137c:	4879      	ldr	r0, [pc, #484]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1137e:	3302      	adds	r3, #2
   11380:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   11384:	f7f6 feea 	bl	815c <sdc_hci_cmd_le_read_transmit_power>
   11388:	e756      	b.n	11238 <hci_internal_cmd_put+0x338>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1138a:	4630      	mov	r0, r6
	switch (opcode)	{
   1138c:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   11390:	f830 3b03 	ldrh.w	r3, [r0], #3
   11394:	4293      	cmp	r3, r2
   11396:	d812      	bhi.n	113be <hci_internal_cmd_put+0x4be>
   11398:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1139c:	d801      	bhi.n	113a2 <hci_internal_cmd_put+0x4a2>
   1139e:	2001      	movs	r0, #1
   113a0:	e03c      	b.n	1141c <hci_internal_cmd_put+0x51c>
   113a2:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   113a6:	3b01      	subs	r3, #1
   113a8:	2b0a      	cmp	r3, #10
   113aa:	f200 8098 	bhi.w	114de <hci_internal_cmd_put+0x5de>
   113ae:	e8df f003 	tbb	[pc, r3]
   113b2:	3d2d      	.short	0x3d2d
   113b4:	67969696 	.word	0x67969696
   113b8:	5e559696 	.word	0x5e559696
   113bc:	6a          	.byte	0x6a
   113bd:	00          	.byte	0x00
   113be:	f503 7240 	add.w	r2, r3, #768	; 0x300
   113c2:	b292      	uxth	r2, r2
   113c4:	2a0c      	cmp	r2, #12
   113c6:	d8ea      	bhi.n	1139e <hci_internal_cmd_put+0x49e>
   113c8:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   113cc:	2b0c      	cmp	r3, #12
   113ce:	d8e6      	bhi.n	1139e <hci_internal_cmd_put+0x49e>
   113d0:	a201      	add	r2, pc, #4	; (adr r2, 113d8 <hci_internal_cmd_put+0x4d8>)
   113d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   113d6:	bf00      	nop
   113d8:	00011499 	.word	0x00011499
   113dc:	000114bb 	.word	0x000114bb
   113e0:	000114c1 	.word	0x000114c1
   113e4:	000114c7 	.word	0x000114c7
   113e8:	000114cd 	.word	0x000114cd
   113ec:	000114d3 	.word	0x000114d3
   113f0:	0001139f 	.word	0x0001139f
   113f4:	0001139f 	.word	0x0001139f
   113f8:	0001139f 	.word	0x0001139f
   113fc:	0001139f 	.word	0x0001139f
   11400:	0001139f 	.word	0x0001139f
   11404:	0001139f 	.word	0x0001139f
   11408:	000114d9 	.word	0x000114d9
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1140c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   11410:	4854      	ldr	r0, [pc, #336]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   11412:	330c      	adds	r3, #12
   11414:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   11418:	f7ef f9c4 	bl	7a4 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1141c:	f025 0308 	bic.w	r3, r5, #8
   11420:	f64f 5202 	movw	r2, #64770	; 0xfd02
   11424:	4293      	cmp	r3, r2
   11426:	f47f add8 	bne.w	10fda <hci_internal_cmd_put+0xda>
   1142a:	e70a      	b.n	11242 <hci_internal_cmd_put+0x342>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1142c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   11430:	484c      	ldr	r0, [pc, #304]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   11432:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   11434:	2202      	movs	r2, #2
   11436:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   11438:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1143c:	f005 fd6e 	bl	16f1c <memset>
	cmds->read_version_info = 1;
   11440:	79e3      	ldrb	r3, [r4, #7]
   11442:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   11446:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1144a:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1144c:	7a23      	ldrb	r3, [r4, #8]
   1144e:	f023 0307 	bic.w	r3, r3, #7
   11452:	f043 0307 	orr.w	r3, r3, #7
   11456:	7223      	strb	r3, [r4, #8]
		return 0;
   11458:	2000      	movs	r0, #0
   1145a:	e7df      	b.n	1141c <hci_internal_cmd_put+0x51c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1145c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   11460:	4840      	ldr	r0, [pc, #256]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   11462:	3317      	adds	r3, #23
   11464:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   11468:	f7ef f950 	bl	70c <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1146c:	e7d6      	b.n	1141c <hci_internal_cmd_put+0x51c>
		*param_length_out +=
   1146e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   11472:	483c      	ldr	r0, [pc, #240]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out +=
   11474:	3320      	adds	r3, #32
   11476:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1147a:	f7ef f8ff 	bl	67c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1147e:	e7cd      	b.n	1141c <hci_internal_cmd_put+0x51c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   11480:	f7f6 fe54 	bl	812c <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   11484:	e7ca      	b.n	1141c <hci_internal_cmd_put+0x51c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   11486:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1148a:	4836      	ldr	r0, [pc, #216]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1148c:	3301      	adds	r3, #1
   1148e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   11492:	f7f6 fe37 	bl	8104 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   11496:	e7c1      	b.n	1141c <hci_internal_cmd_put+0x51c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   11498:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1149c:	4831      	ldr	r0, [pc, #196]	; (11564 <hci_internal_cmd_put+0x664>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1149e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   114a0:	2202      	movs	r2, #2
   114a2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   114a4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   114a8:	f005 fd38 	bl	16f1c <memset>
	cmds->read_supported_vs_commands = 1;
   114ac:	79e3      	ldrb	r3, [r4, #7]
   114ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   114b2:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   114b6:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   114b8:	e7ce      	b.n	11458 <hci_internal_cmd_put+0x558>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   114ba:	f7f6 fe1a 	bl	80f2 <sdc_hci_cmd_vs_llpm_mode_set>
   114be:	e7ad      	b.n	1141c <hci_internal_cmd_put+0x51c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   114c0:	f7f6 fe13 	bl	80ea <sdc_hci_cmd_vs_conn_update>
   114c4:	e7aa      	b.n	1141c <hci_internal_cmd_put+0x51c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   114c6:	f7f6 fe08 	bl	80da <sdc_hci_cmd_vs_conn_event_extend>
   114ca:	e7a7      	b.n	1141c <hci_internal_cmd_put+0x51c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   114cc:	f7f6 fe13 	bl	80f6 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   114d0:	e7a4      	b.n	1141c <hci_internal_cmd_put+0x51c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   114d2:	f7f6 fe0c 	bl	80ee <sdc_hci_cmd_vs_event_length_set>
   114d6:	e7a1      	b.n	1141c <hci_internal_cmd_put+0x51c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   114d8:	f7f6 fe12 	bl	8100 <sdc_hci_cmd_vs_set_adv_randomness>
   114dc:	e79e      	b.n	1141c <hci_internal_cmd_put+0x51c>
	switch (opcode)	{
   114de:	2001      	movs	r0, #1
	switch (hci_opcode) {
   114e0:	f242 0332 	movw	r3, #8242	; 0x2032
   114e4:	429d      	cmp	r5, r3
   114e6:	d826      	bhi.n	11536 <hci_internal_cmd_put+0x636>
   114e8:	f242 0326 	movw	r3, #8230	; 0x2026
   114ec:	429d      	cmp	r5, r3
   114ee:	f63f ad74 	bhi.w	10fda <hci_internal_cmd_put+0xda>
   114f2:	f242 030c 	movw	r3, #8204	; 0x200c
   114f6:	429d      	cmp	r5, r3
   114f8:	f67f ad2f 	bls.w	10f5a <hci_internal_cmd_put+0x5a>
   114fc:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   11500:	4a19      	ldr	r2, [pc, #100]	; (11568 <hci_internal_cmd_put+0x668>)
   11502:	3b0d      	subs	r3, #13
   11504:	b29b      	uxth	r3, r3
   11506:	fa22 f303 	lsr.w	r3, r2, r3
   1150a:	07db      	lsls	r3, r3, #31
   1150c:	f57f ad65 	bpl.w	10fda <hci_internal_cmd_put+0xda>
   11510:	e697      	b.n	11242 <hci_internal_cmd_put+0x342>
   11512:	f242 030c 	movw	r3, #8204	; 0x200c
   11516:	429d      	cmp	r5, r3
   11518:	d80a      	bhi.n	11530 <hci_internal_cmd_put+0x630>
		return 0;
   1151a:	2000      	movs	r0, #0
   1151c:	e622      	b.n	11164 <hci_internal_cmd_put+0x264>
	switch (hci_opcode) {
   1151e:	4a13      	ldr	r2, [pc, #76]	; (1156c <hci_internal_cmd_put+0x66c>)
   11520:	3b2d      	subs	r3, #45	; 0x2d
   11522:	b29b      	uxth	r3, r3
   11524:	fa22 f303 	lsr.w	r3, r2, r3
   11528:	07da      	lsls	r2, r3, #31
   1152a:	f57f ad56 	bpl.w	10fda <hci_internal_cmd_put+0xda>
   1152e:	e527      	b.n	10f80 <hci_internal_cmd_put+0x80>
		return 0;
   11530:	2000      	movs	r0, #0
   11532:	e7e3      	b.n	114fc <hci_internal_cmd_put+0x5fc>
   11534:	2000      	movs	r0, #0
	switch (hci_opcode) {
   11536:	f242 0385 	movw	r3, #8325	; 0x2085
   1153a:	429d      	cmp	r5, r3
   1153c:	f63f af6e 	bhi.w	1141c <hci_internal_cmd_put+0x51c>
   11540:	f242 036c 	movw	r3, #8300	; 0x206c
   11544:	429d      	cmp	r5, r3
   11546:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   1154a:	d8e8      	bhi.n	1151e <hci_internal_cmd_put+0x61e>
   1154c:	3b03      	subs	r3, #3
   1154e:	b29b      	uxth	r3, r3
   11550:	2b01      	cmp	r3, #1
   11552:	f67f ae76 	bls.w	11242 <hci_internal_cmd_put+0x342>
   11556:	e540      	b.n	10fda <hci_internal_cmd_put+0xda>
   11558:	2001      	movs	r0, #1
   1155a:	e7ec      	b.n	11536 <hci_internal_cmd_put+0x636>
		return -NRF_EPERM;
   1155c:	f04f 30ff 	mov.w	r0, #4294967295
   11560:	e5bc      	b.n	110dc <hci_internal_cmd_put+0x1dc>
   11562:	bf00      	nop
   11564:	20003236 	.word	0x20003236
   11568:	03001241 	.word	0x03001241
   1156c:	01000401 	.word	0x01000401

00011570 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   11570:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   11572:	4c09      	ldr	r4, [pc, #36]	; (11598 <hci_internal_msg_get+0x28>)
   11574:	7823      	ldrb	r3, [r4, #0]
{
   11576:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   11578:	b91b      	cbnz	r3, 11582 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1157a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1157e:	f7f6 bd97 	b.w	80b0 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   11582:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   11584:	1c61      	adds	r1, r4, #1
   11586:	3202      	adds	r2, #2
   11588:	f005 fcbd 	bl	16f06 <memcpy>
		cmd_complete_or_status.occurred = false;
   1158c:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1158e:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   11590:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   11592:	702b      	strb	r3, [r5, #0]
}
   11594:	bd38      	pop	{r3, r4, r5, pc}
   11596:	bf00      	nop
   11598:	2000322f 	.word	0x2000322f

0001159c <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1159c:	b570      	push	{r4, r5, r6, lr}
   1159e:	4605      	mov	r5, r0
   115a0:	460e      	mov	r6, r1
   115a2:	4c08      	ldr	r4, [pc, #32]	; (115c4 <bt_rand+0x28>)
   115a4:	4620      	mov	r0, r4
   115a6:	f006 fb55 	bl	17c54 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   115aa:	b138      	cbz	r0, 115bc <bt_rand+0x20>
   115ac:	68a3      	ldr	r3, [r4, #8]
   115ae:	b2b2      	uxth	r2, r6
   115b0:	4629      	mov	r1, r5
   115b2:	4620      	mov	r0, r4
   115b4:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   115b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   115ba:	4718      	bx	r3
   115bc:	f06f 0012 	mvn.w	r0, #18
   115c0:	bd70      	pop	{r4, r5, r6, pc}
   115c2:	bf00      	nop
   115c4:	000187d4 	.word	0x000187d4

000115c8 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   115c8:	4901      	ldr	r1, [pc, #4]	; (115d0 <mpsl_low_prio_irq_handler+0x8>)
   115ca:	4802      	ldr	r0, [pc, #8]	; (115d4 <mpsl_low_prio_irq_handler+0xc>)
   115cc:	f006 bd66 	b.w	1809c <k_work_submit_to_queue>
   115d0:	20002558 	.word	0x20002558
   115d4:	20001c18 	.word	0x20001c18

000115d8 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   115d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   115da:	2332      	movs	r3, #50	; 0x32
   115dc:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   115e0:	4a10      	ldr	r2, [pc, #64]	; (11624 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   115e2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   115e4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   115e6:	2119      	movs	r1, #25
   115e8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   115ea:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   115ee:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   115f2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   115f6:	f7f5 ff6f 	bl	74d8 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   115fa:	4604      	mov	r4, r0
   115fc:	b970      	cbnz	r0, 1161c <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   115fe:	4601      	mov	r1, r0
   11600:	462a      	mov	r2, r5
   11602:	2008      	movs	r0, #8
   11604:	f7fb f914 	bl	c830 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   11608:	462a      	mov	r2, r5
   1160a:	4621      	mov	r1, r4
   1160c:	200b      	movs	r0, #11
   1160e:	f7fb f90f 	bl	c830 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   11612:	462a      	mov	r2, r5
   11614:	4621      	mov	r1, r4
   11616:	4628      	mov	r0, r5
   11618:	f7fb f90a 	bl	c830 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1161c:	4620      	mov	r0, r4
   1161e:	b003      	add	sp, #12
   11620:	bd30      	pop	{r4, r5, pc}
   11622:	bf00      	nop
   11624:	00011629 	.word	0x00011629

00011628 <m_assert_handler>:
{
   11628:	b598      	push	{r3, r4, r7, lr}
   1162a:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1162c:	466c      	mov	r4, sp
   1162e:	b08a      	sub	sp, #40	; 0x28
   11630:	466a      	mov	r2, sp
   11632:	4b0c      	ldr	r3, [pc, #48]	; (11664 <m_assert_handler+0x3c>)
   11634:	61d1      	str	r1, [r2, #28]
   11636:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1163a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1163e:	8413      	strh	r3, [r2, #32]
   11640:	4b09      	ldr	r3, [pc, #36]	; (11668 <m_assert_handler+0x40>)
   11642:	f842 3f10 	str.w	r3, [r2, #16]!
   11646:	4809      	ldr	r0, [pc, #36]	; (1166c <m_assert_handler+0x44>)
   11648:	2300      	movs	r3, #0
   1164a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1164e:	f7fa faa3 	bl	bb98 <z_impl_z_log_msg_static_create>
   11652:	46a5      	mov	sp, r4
	k_oops();
   11654:	4040      	eors	r0, r0
   11656:	f380 8811 	msr	BASEPRI, r0
   1165a:	f04f 0003 	mov.w	r0, #3
   1165e:	df02      	svc	2
}
   11660:	46bd      	mov	sp, r7
   11662:	bd98      	pop	{r3, r4, r7, pc}
   11664:	0001a12f 	.word	0x0001a12f
   11668:	01000004 	.word	0x01000004
   1166c:	00018a8c 	.word	0x00018a8c

00011670 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   11670:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   11672:	4d0d      	ldr	r5, [pc, #52]	; (116a8 <mpsl_low_prio_init+0x38>)
   11674:	490d      	ldr	r1, [pc, #52]	; (116ac <mpsl_low_prio_init+0x3c>)
   11676:	2400      	movs	r4, #0
   11678:	9400      	str	r4, [sp, #0]
   1167a:	f06f 0309 	mvn.w	r3, #9
   1167e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11682:	4628      	mov	r0, r5
   11684:	f001 fa3c 	bl	12b00 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   11688:	4909      	ldr	r1, [pc, #36]	; (116b0 <mpsl_low_prio_init+0x40>)
   1168a:	4628      	mov	r0, r5
   1168c:	f006 fbb6 	bl	17dfc <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   11690:	4908      	ldr	r1, [pc, #32]	; (116b4 <mpsl_low_prio_init+0x44>)
   11692:	4809      	ldr	r0, [pc, #36]	; (116b8 <mpsl_low_prio_init+0x48>)
   11694:	f006 fce5 	bl	18062 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   11698:	4622      	mov	r2, r4
   1169a:	2104      	movs	r1, #4
   1169c:	2019      	movs	r0, #25
   1169e:	f7fb f8c7 	bl	c830 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   116a2:	4620      	mov	r0, r4
   116a4:	b003      	add	sp, #12
   116a6:	bd30      	pop	{r4, r5, pc}
   116a8:	20001c18 	.word	0x20001c18
   116ac:	200048c0 	.word	0x200048c0
   116b0:	0001a143 	.word	0x0001a143
   116b4:	00017b0d 	.word	0x00017b0d
   116b8:	20002558 	.word	0x20002558

000116bc <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   116bc:	4b01      	ldr	r3, [pc, #4]	; (116c4 <mpsl_hfclk_callback+0x8>)
   116be:	2000      	movs	r0, #0
   116c0:	681b      	ldr	r3, [r3, #0]
   116c2:	4718      	bx	r3
   116c4:	20002568 	.word	0x20002568

000116c8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   116c8:	b120      	cbz	r0, 116d4 <nrfx_clock_start+0xc>
   116ca:	2801      	cmp	r0, #1
   116cc:	d106      	bne.n	116dc <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   116ce:	4804      	ldr	r0, [pc, #16]	; (116e0 <nrfx_clock_start+0x18>)
   116d0:	f7f5 bd82 	b.w	71d8 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   116d4:	4b03      	ldr	r3, [pc, #12]	; (116e4 <nrfx_clock_start+0x1c>)
   116d6:	2001      	movs	r0, #1
   116d8:	681b      	ldr	r3, [r3, #0]
   116da:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   116dc:	4770      	bx	lr
   116de:	bf00      	nop
   116e0:	000116bd 	.word	0x000116bd
   116e4:	20002568 	.word	0x20002568

000116e8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   116e8:	4b01      	ldr	r3, [pc, #4]	; (116f0 <nrfx_clock_init+0x8>)
   116ea:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   116ec:	4801      	ldr	r0, [pc, #4]	; (116f4 <nrfx_clock_init+0xc>)
   116ee:	4770      	bx	lr
   116f0:	20002568 	.word	0x20002568
   116f4:	0bad0000 	.word	0x0bad0000

000116f8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   116f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   116fc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   11700:	2a08      	cmp	r2, #8
   11702:	d106      	bne.n	11712 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   11704:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   11708:	2b05      	cmp	r3, #5
   1170a:	d802      	bhi.n	11712 <nrf52_errata_103+0x1a>
   1170c:	4a02      	ldr	r2, [pc, #8]	; (11718 <nrf52_errata_103+0x20>)
   1170e:	5cd0      	ldrb	r0, [r2, r3]
   11710:	4770      	bx	lr
                        return false;
   11712:	2000      	movs	r0, #0
}
   11714:	4770      	bx	lr
   11716:	bf00      	nop
   11718:	0001a15d 	.word	0x0001a15d

0001171c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1171c:	4a02      	ldr	r2, [pc, #8]	; (11728 <nvmc_wait+0xc>)
   1171e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   11722:	2b00      	cmp	r3, #0
   11724:	d0fb      	beq.n	1171e <nvmc_wait+0x2>
}
   11726:	4770      	bx	lr
   11728:	4001e000 	.word	0x4001e000

0001172c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1172c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1172e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   11732:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   11736:	2a08      	cmp	r2, #8
   11738:	d14e      	bne.n	117d8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1173a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1173e:	2100      	movs	r1, #0
   11740:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   11744:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   11748:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1174c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   11750:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   11754:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   11758:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1175c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   11760:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   11764:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   11768:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1176c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   11770:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   11774:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   11778:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1177c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   11780:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   11784:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   11788:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1178c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   11790:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   11794:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   11798:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1179c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   117a0:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   117a4:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   117a8:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   117ac:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   117b0:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   117b4:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   117b8:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   117bc:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   117c0:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   117c4:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   117c8:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   117cc:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   117d0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   117d4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   117d8:	f7ff ff8e 	bl	116f8 <nrf52_errata_103>
   117dc:	b118      	cbz	r0, 117e6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   117de:	4b3a      	ldr	r3, [pc, #232]	; (118c8 <SystemInit+0x19c>)
   117e0:	4a3a      	ldr	r2, [pc, #232]	; (118cc <SystemInit+0x1a0>)
   117e2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   117e6:	f7ff ff87 	bl	116f8 <nrf52_errata_103>
   117ea:	b118      	cbz	r0, 117f4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   117ec:	4b38      	ldr	r3, [pc, #224]	; (118d0 <SystemInit+0x1a4>)
   117ee:	22fb      	movs	r2, #251	; 0xfb
   117f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   117f4:	f7ff ff80 	bl	116f8 <nrf52_errata_103>
   117f8:	b170      	cbz	r0, 11818 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   117fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   117fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   11802:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   11806:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1180a:	f022 020f 	bic.w	r2, r2, #15
   1180e:	f003 030f 	and.w	r3, r3, #15
   11812:	4313      	orrs	r3, r2
   11814:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   11818:	f7ff ff6e 	bl	116f8 <nrf52_errata_103>
   1181c:	b120      	cbz	r0, 11828 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1181e:	4b2d      	ldr	r3, [pc, #180]	; (118d4 <SystemInit+0x1a8>)
   11820:	f44f 7200 	mov.w	r2, #512	; 0x200
   11824:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   11828:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1182c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   11830:	2b08      	cmp	r3, #8
   11832:	d11a      	bne.n	1186a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   11834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11838:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1183c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1183e:	bf44      	itt	mi
   11840:	f06f 0201 	mvnmi.w	r2, #1
   11844:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   11848:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1184c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   11850:	2b05      	cmp	r3, #5
   11852:	d802      	bhi.n	1185a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   11854:	4a20      	ldr	r2, [pc, #128]	; (118d8 <SystemInit+0x1ac>)
   11856:	5cd3      	ldrb	r3, [r2, r3]
   11858:	b13b      	cbz	r3, 1186a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1185a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1185e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   11862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11866:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1186a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1186e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   11872:	2a00      	cmp	r2, #0
   11874:	db03      	blt.n	1187e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   11876:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1187a:	2b00      	cmp	r3, #0
   1187c:	da22      	bge.n	118c4 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1187e:	4917      	ldr	r1, [pc, #92]	; (118dc <SystemInit+0x1b0>)
   11880:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   11882:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   11886:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1188a:	2412      	movs	r4, #18
    nvmc_wait();
   1188c:	f7ff ff46 	bl	1171c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   11890:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   11894:	f7ff ff42 	bl	1171c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   11898:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1189c:	f7ff ff3e 	bl	1171c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   118a0:	2300      	movs	r3, #0
   118a2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   118a6:	f7ff ff39 	bl	1171c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   118aa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   118ae:	490c      	ldr	r1, [pc, #48]	; (118e0 <SystemInit+0x1b4>)
   118b0:	4b0c      	ldr	r3, [pc, #48]	; (118e4 <SystemInit+0x1b8>)
   118b2:	68ca      	ldr	r2, [r1, #12]
   118b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   118b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   118ba:	60cb      	str	r3, [r1, #12]
   118bc:	f3bf 8f4f 	dsb	sy
    __NOP();
   118c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   118c2:	e7fd      	b.n	118c0 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   118c4:	bd10      	pop	{r4, pc}
   118c6:	bf00      	nop
   118c8:	40005000 	.word	0x40005000
   118cc:	00038148 	.word	0x00038148
   118d0:	4000f000 	.word	0x4000f000
   118d4:	40029000 	.word	0x40029000
   118d8:	0001a157 	.word	0x0001a157
   118dc:	4001e000 	.word	0x4001e000
   118e0:	e000ed00 	.word	0xe000ed00
   118e4:	05fa0004 	.word	0x05fa0004

000118e8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   118e8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   118ea:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   118ec:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   118ee:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   118f2:	fab2 f382 	clz	r3, r2
   118f6:	f1c3 031f 	rsb	r3, r3, #31
   118fa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   118fc:	fa05 f403 	lsl.w	r4, r5, r3
   11900:	ea22 0404 	bic.w	r4, r2, r4
   11904:	e850 6f00 	ldrex	r6, [r0]
   11908:	4296      	cmp	r6, r2
   1190a:	d104      	bne.n	11916 <nrfx_flag32_alloc+0x2e>
   1190c:	e840 4c00 	strex	ip, r4, [r0]
   11910:	f1bc 0f00 	cmp.w	ip, #0
   11914:	d1f6      	bne.n	11904 <nrfx_flag32_alloc+0x1c>
   11916:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1191a:	d1e7      	bne.n	118ec <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1191c:	4801      	ldr	r0, [pc, #4]	; (11924 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1191e:	700b      	strb	r3, [r1, #0]
}
   11920:	bd70      	pop	{r4, r5, r6, pc}
   11922:	bf00      	nop
   11924:	0bad0000 	.word	0x0bad0000

00011928 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   11928:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1192a:	6803      	ldr	r3, [r0, #0]
   1192c:	40cb      	lsrs	r3, r1
   1192e:	07db      	lsls	r3, r3, #31
   11930:	d414      	bmi.n	1195c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   11932:	2301      	movs	r3, #1
   11934:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   11936:	6802      	ldr	r2, [r0, #0]
   11938:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1193c:	ea43 0102 	orr.w	r1, r3, r2
   11940:	e850 4f00 	ldrex	r4, [r0]
   11944:	4294      	cmp	r4, r2
   11946:	d104      	bne.n	11952 <nrfx_flag32_free+0x2a>
   11948:	e840 1c00 	strex	ip, r1, [r0]
   1194c:	f1bc 0f00 	cmp.w	ip, #0
   11950:	d1f6      	bne.n	11940 <nrfx_flag32_free+0x18>
   11952:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   11956:	d1ee      	bne.n	11936 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   11958:	4801      	ldr	r0, [pc, #4]	; (11960 <nrfx_flag32_free+0x38>)
}
   1195a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1195c:	4801      	ldr	r0, [pc, #4]	; (11964 <nrfx_flag32_free+0x3c>)
   1195e:	e7fc      	b.n	1195a <nrfx_flag32_free+0x32>
   11960:	0bad0000 	.word	0x0bad0000
   11964:	0bad0004 	.word	0x0bad0004

00011968 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   11968:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1196a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1196e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   11970:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   11972:	6002      	str	r2, [r0, #0]
}
   11974:	4802      	ldr	r0, [pc, #8]	; (11980 <nrf_gpio_pin_port_decode+0x18>)
   11976:	bf18      	it	ne
   11978:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1197c:	4770      	bx	lr
   1197e:	bf00      	nop
   11980:	50000300 	.word	0x50000300

00011984 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   11984:	4b03      	ldr	r3, [pc, #12]	; (11994 <pin_in_use_by_te+0x10>)
   11986:	3008      	adds	r0, #8
   11988:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1198c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11990:	4770      	bx	lr
   11992:	bf00      	nop
   11994:	20000424 	.word	0x20000424

00011998 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   11998:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1199a:	f100 0308 	add.w	r3, r0, #8
   1199e:	4c0c      	ldr	r4, [pc, #48]	; (119d0 <call_handler+0x38>)
   119a0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   119a4:	05da      	lsls	r2, r3, #23
{
   119a6:	4605      	mov	r5, r0
   119a8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   119aa:	d507      	bpl.n	119bc <call_handler+0x24>
   119ac:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   119b0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   119b4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   119b8:	6852      	ldr	r2, [r2, #4]
   119ba:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   119bc:	68a3      	ldr	r3, [r4, #8]
   119be:	b12b      	cbz	r3, 119cc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   119c0:	68e2      	ldr	r2, [r4, #12]
   119c2:	4631      	mov	r1, r6
   119c4:	4628      	mov	r0, r5
    }
}
   119c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   119ca:	4718      	bx	r3
}
   119cc:	bd70      	pop	{r4, r5, r6, pc}
   119ce:	bf00      	nop
   119d0:	20000424 	.word	0x20000424

000119d4 <release_handler>:
{
   119d4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   119d6:	4a12      	ldr	r2, [pc, #72]	; (11a20 <release_handler+0x4c>)
   119d8:	3008      	adds	r0, #8
   119da:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   119de:	05d9      	lsls	r1, r3, #23
   119e0:	d51b      	bpl.n	11a1a <release_handler+0x46>
   119e2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   119e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   119ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   119ee:	f102 040e 	add.w	r4, r2, #14
   119f2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   119f4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   119f8:	f413 7f80 	tst.w	r3, #256	; 0x100
   119fc:	d003      	beq.n	11a06 <release_handler+0x32>
   119fe:	f3c3 2343 	ubfx	r3, r3, #9, #4
   11a02:	4299      	cmp	r1, r3
   11a04:	d009      	beq.n	11a1a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   11a06:	3001      	adds	r0, #1
   11a08:	2830      	cmp	r0, #48	; 0x30
   11a0a:	d1f3      	bne.n	119f4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   11a0c:	2300      	movs	r3, #0
   11a0e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   11a12:	4804      	ldr	r0, [pc, #16]	; (11a24 <release_handler+0x50>)
}
   11a14:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   11a16:	f7ff bf87 	b.w	11928 <nrfx_flag32_free>
}
   11a1a:	bc10      	pop	{r4}
   11a1c:	4770      	bx	lr
   11a1e:	bf00      	nop
   11a20:	20000424 	.word	0x20000424
   11a24:	20000498 	.word	0x20000498

00011a28 <pin_handler_trigger_uninit>:
{
   11a28:	b538      	push	{r3, r4, r5, lr}
   11a2a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   11a2c:	f7ff ffaa 	bl	11984 <pin_in_use_by_te>
   11a30:	4c09      	ldr	r4, [pc, #36]	; (11a58 <pin_handler_trigger_uninit+0x30>)
   11a32:	f102 0508 	add.w	r5, r2, #8
   11a36:	b140      	cbz	r0, 11a4a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11a38:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   11a3c:	4907      	ldr	r1, [pc, #28]	; (11a5c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   11a3e:	0b5b      	lsrs	r3, r3, #13
   11a40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   11a44:	2000      	movs	r0, #0
   11a46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   11a4a:	4610      	mov	r0, r2
   11a4c:	f7ff ffc2 	bl	119d4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   11a50:	2300      	movs	r3, #0
   11a52:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   11a56:	bd38      	pop	{r3, r4, r5, pc}
   11a58:	20000424 	.word	0x20000424
   11a5c:	40006000 	.word	0x40006000

00011a60 <nrfx_gpiote_input_configure>:
{
   11a60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11a64:	4604      	mov	r4, r0
   11a66:	4616      	mov	r6, r2
   11a68:	461d      	mov	r5, r3
    if (p_input_config)
   11a6a:	b301      	cbz	r1, 11aae <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11a6c:	4f4e      	ldr	r7, [pc, #312]	; (11ba8 <nrfx_gpiote_input_configure+0x148>)
   11a6e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   11a72:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   11a76:	079b      	lsls	r3, r3, #30
   11a78:	d502      	bpl.n	11a80 <nrfx_gpiote_input_configure+0x20>
   11a7a:	f7ff ff83 	bl	11984 <pin_in_use_by_te>
   11a7e:	bb10      	cbnz	r0, 11ac6 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   11a80:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   11a82:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   11a86:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   11a8a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   11a8e:	f10d 020f 	add.w	r2, sp, #15
   11a92:	460b      	mov	r3, r1
   11a94:	4620      	mov	r0, r4
   11a96:	f10d 010e 	add.w	r1, sp, #14
   11a9a:	f006 f87b 	bl	17b94 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   11a9e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   11aa2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   11aa6:	f043 0301 	orr.w	r3, r3, #1
   11aaa:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   11aae:	b346      	cbz	r6, 11b02 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11ab0:	4b3d      	ldr	r3, [pc, #244]	; (11ba8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   11ab2:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   11ab6:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11ab8:	f104 0708 	add.w	r7, r4, #8
   11abc:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   11ac0:	0788      	lsls	r0, r1, #30
   11ac2:	d502      	bpl.n	11aca <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   11ac4:	b1aa      	cbz	r2, 11af2 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   11ac6:	4839      	ldr	r0, [pc, #228]	; (11bac <nrfx_gpiote_input_configure+0x14c>)
   11ac8:	e01d      	b.n	11b06 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   11aca:	f021 0120 	bic.w	r1, r1, #32
   11ace:	04c9      	lsls	r1, r1, #19
   11ad0:	0cc9      	lsrs	r1, r1, #19
   11ad2:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   11ad6:	b162      	cbz	r2, 11af2 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   11ad8:	f1bc 0f03 	cmp.w	ip, #3
   11adc:	d8f3      	bhi.n	11ac6 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   11ade:	6872      	ldr	r2, [r6, #4]
   11ae0:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   11ae2:	f1bc 0f00 	cmp.w	ip, #0
   11ae6:	d111      	bne.n	11b0c <nrfx_gpiote_input_configure+0xac>
   11ae8:	4a31      	ldr	r2, [pc, #196]	; (11bb0 <nrfx_gpiote_input_configure+0x150>)
   11aea:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   11aee:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   11af2:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   11af6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   11afa:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   11afe:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   11b02:	bb45      	cbnz	r5, 11b56 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   11b04:	482b      	ldr	r0, [pc, #172]	; (11bb4 <nrfx_gpiote_input_configure+0x154>)
}
   11b06:	b004      	add	sp, #16
   11b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   11b0c:	00b2      	lsls	r2, r6, #2
   11b0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11b12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   11b16:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   11b1a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   11b1e:	f020 0003 	bic.w	r0, r0, #3
   11b22:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   11b26:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   11b2a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   11b2e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   11b32:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11b36:	0220      	lsls	r0, r4, #8
   11b38:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   11b3c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   11b40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   11b44:	ea40 000e 	orr.w	r0, r0, lr
   11b48:	f041 0120 	orr.w	r1, r1, #32
   11b4c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   11b50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   11b54:	e7cd      	b.n	11af2 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   11b56:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   11b5a:	4620      	mov	r0, r4
   11b5c:	f7ff ff3a 	bl	119d4 <release_handler>
    if (!handler)
   11b60:	2e00      	cmp	r6, #0
   11b62:	d0cf      	beq.n	11b04 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11b64:	4d10      	ldr	r5, [pc, #64]	; (11ba8 <nrfx_gpiote_input_configure+0x148>)
   11b66:	e9d5 2300 	ldrd	r2, r3, [r5]
   11b6a:	4296      	cmp	r6, r2
   11b6c:	d101      	bne.n	11b72 <nrfx_gpiote_input_configure+0x112>
   11b6e:	429f      	cmp	r7, r3
   11b70:	d018      	beq.n	11ba4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   11b72:	4811      	ldr	r0, [pc, #68]	; (11bb8 <nrfx_gpiote_input_configure+0x158>)
   11b74:	f10d 010f 	add.w	r1, sp, #15
   11b78:	f7ff feb6 	bl	118e8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   11b7c:	4b0d      	ldr	r3, [pc, #52]	; (11bb4 <nrfx_gpiote_input_configure+0x154>)
   11b7e:	4298      	cmp	r0, r3
   11b80:	d1c1      	bne.n	11b06 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   11b82:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   11b86:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   11b8a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   11b8e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   11b90:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   11b92:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   11b96:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   11b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11b9e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   11ba2:	e7af      	b.n	11b04 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11ba4:	2200      	movs	r2, #0
   11ba6:	e7ee      	b.n	11b86 <nrfx_gpiote_input_configure+0x126>
   11ba8:	20000424 	.word	0x20000424
   11bac:	0bad0004 	.word	0x0bad0004
   11bb0:	40006000 	.word	0x40006000
   11bb4:	0bad0000 	.word	0x0bad0000
   11bb8:	20000498 	.word	0x20000498

00011bbc <nrfx_gpiote_output_configure>:
{
   11bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bbe:	4604      	mov	r4, r0
   11bc0:	b085      	sub	sp, #20
   11bc2:	4615      	mov	r5, r2
    if (p_config)
   11bc4:	b319      	cbz	r1, 11c0e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11bc6:	4e33      	ldr	r6, [pc, #204]	; (11c94 <nrfx_gpiote_output_configure+0xd8>)
   11bc8:	f100 0708 	add.w	r7, r0, #8
   11bcc:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   11bd0:	0793      	lsls	r3, r2, #30
   11bd2:	d403      	bmi.n	11bdc <nrfx_gpiote_output_configure+0x20>
   11bd4:	f7ff fed6 	bl	11984 <pin_in_use_by_te>
   11bd8:	2800      	cmp	r0, #0
   11bda:	d158      	bne.n	11c8e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   11bdc:	f012 0f1c 	tst.w	r2, #28
   11be0:	d002      	beq.n	11be8 <nrfx_gpiote_output_configure+0x2c>
   11be2:	784b      	ldrb	r3, [r1, #1]
   11be4:	2b01      	cmp	r3, #1
   11be6:	d052      	beq.n	11c8e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   11be8:	2301      	movs	r3, #1
   11bea:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   11bee:	2300      	movs	r3, #0
   11bf0:	e9cd 1300 	strd	r1, r3, [sp]
   11bf4:	1c4a      	adds	r2, r1, #1
   11bf6:	1c8b      	adds	r3, r1, #2
   11bf8:	4620      	mov	r0, r4
   11bfa:	f10d 010f 	add.w	r1, sp, #15
   11bfe:	f005 ffc9 	bl	17b94 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   11c02:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   11c06:	f043 0303 	orr.w	r3, r3, #3
   11c0a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   11c0e:	b915      	cbnz	r5, 11c16 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   11c10:	4821      	ldr	r0, [pc, #132]	; (11c98 <nrfx_gpiote_output_configure+0xdc>)
}
   11c12:	b005      	add	sp, #20
   11c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11c16:	4e1f      	ldr	r6, [pc, #124]	; (11c94 <nrfx_gpiote_output_configure+0xd8>)
   11c18:	f104 0708 	add.w	r7, r4, #8
   11c1c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   11c20:	0783      	lsls	r3, r0, #30
   11c22:	d534      	bpl.n	11c8e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   11c24:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   11c28:	4661      	mov	r1, ip
   11c2a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   11c2c:	f020 0020 	bic.w	r0, r0, #32
   11c30:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   11c34:	04c0      	lsls	r0, r0, #19
   11c36:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   11c3a:	0cc0      	lsrs	r0, r0, #19
   11c3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   11c40:	2300      	movs	r3, #0
   11c42:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   11c46:	786a      	ldrb	r2, [r5, #1]
   11c48:	2a00      	cmp	r2, #0
   11c4a:	d0e1      	beq.n	11c10 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   11c4c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   11c50:	78ad      	ldrb	r5, [r5, #2]
   11c52:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   11c56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   11c5a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11c5e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   11c62:	0223      	lsls	r3, r4, #8
   11c64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   11c68:	0412      	lsls	r2, r2, #16
   11c6a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11c6e:	ea43 030e 	orr.w	r3, r3, lr
   11c72:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   11c74:	052a      	lsls	r2, r5, #20
   11c76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   11c7a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   11c7e:	4313      	orrs	r3, r2
   11c80:	f040 0020 	orr.w	r0, r0, #32
   11c84:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   11c88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   11c8c:	e7c0      	b.n	11c10 <nrfx_gpiote_output_configure+0x54>
{
   11c8e:	4803      	ldr	r0, [pc, #12]	; (11c9c <nrfx_gpiote_output_configure+0xe0>)
   11c90:	e7bf      	b.n	11c12 <nrfx_gpiote_output_configure+0x56>
   11c92:	bf00      	nop
   11c94:	20000424 	.word	0x20000424
   11c98:	0bad0000 	.word	0x0bad0000
   11c9c:	0bad0004 	.word	0x0bad0004

00011ca0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   11ca0:	4b01      	ldr	r3, [pc, #4]	; (11ca8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   11ca2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   11ca6:	4770      	bx	lr
   11ca8:	20000424 	.word	0x20000424

00011cac <nrfx_gpiote_channel_get>:
{
   11cac:	b508      	push	{r3, lr}
   11cae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   11cb0:	f7ff fe68 	bl	11984 <pin_in_use_by_te>
   11cb4:	b138      	cbz	r0, 11cc6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11cb6:	4b05      	ldr	r3, [pc, #20]	; (11ccc <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   11cb8:	4805      	ldr	r0, [pc, #20]	; (11cd0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11cba:	3208      	adds	r2, #8
   11cbc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11cc0:	0b5b      	lsrs	r3, r3, #13
   11cc2:	700b      	strb	r3, [r1, #0]
}
   11cc4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   11cc6:	4803      	ldr	r0, [pc, #12]	; (11cd4 <nrfx_gpiote_channel_get+0x28>)
   11cc8:	e7fc      	b.n	11cc4 <nrfx_gpiote_channel_get+0x18>
   11cca:	bf00      	nop
   11ccc:	20000424 	.word	0x20000424
   11cd0:	0bad0000 	.word	0x0bad0000
   11cd4:	0bad0004 	.word	0x0bad0004

00011cd8 <nrfx_gpiote_init>:
{
   11cd8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   11cda:	4c0f      	ldr	r4, [pc, #60]	; (11d18 <nrfx_gpiote_init+0x40>)
   11cdc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   11ce0:	b9bd      	cbnz	r5, 11d12 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   11ce2:	2260      	movs	r2, #96	; 0x60
   11ce4:	4629      	mov	r1, r5
   11ce6:	f104 0010 	add.w	r0, r4, #16
   11cea:	f005 f917 	bl	16f1c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   11cee:	2006      	movs	r0, #6
   11cf0:	f7fa fd6e 	bl	c7d0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11cf4:	4b09      	ldr	r3, [pc, #36]	; (11d1c <nrfx_gpiote_init+0x44>)
    return err_code;
   11cf6:	480a      	ldr	r0, [pc, #40]	; (11d20 <nrfx_gpiote_init+0x48>)
   11cf8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   11cfc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   11d00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11d04:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   11d08:	2301      	movs	r3, #1
   11d0a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   11d0e:	6763      	str	r3, [r4, #116]	; 0x74
}
   11d10:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   11d12:	4804      	ldr	r0, [pc, #16]	; (11d24 <nrfx_gpiote_init+0x4c>)
   11d14:	e7fc      	b.n	11d10 <nrfx_gpiote_init+0x38>
   11d16:	bf00      	nop
   11d18:	20000424 	.word	0x20000424
   11d1c:	40006000 	.word	0x40006000
   11d20:	0bad0000 	.word	0x0bad0000
   11d24:	0bad0005 	.word	0x0bad0005

00011d28 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   11d28:	4b03      	ldr	r3, [pc, #12]	; (11d38 <nrfx_gpiote_is_init+0x10>)
   11d2a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   11d2e:	3800      	subs	r0, #0
   11d30:	bf18      	it	ne
   11d32:	2001      	movne	r0, #1
   11d34:	4770      	bx	lr
   11d36:	bf00      	nop
   11d38:	20000424 	.word	0x20000424

00011d3c <nrfx_gpiote_channel_free>:
{
   11d3c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   11d3e:	4801      	ldr	r0, [pc, #4]	; (11d44 <nrfx_gpiote_channel_free+0x8>)
   11d40:	f7ff bdf2 	b.w	11928 <nrfx_flag32_free>
   11d44:	20000494 	.word	0x20000494

00011d48 <nrfx_gpiote_channel_alloc>:
{
   11d48:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   11d4a:	4801      	ldr	r0, [pc, #4]	; (11d50 <nrfx_gpiote_channel_alloc+0x8>)
   11d4c:	f7ff bdcc 	b.w	118e8 <nrfx_flag32_alloc>
   11d50:	20000494 	.word	0x20000494

00011d54 <nrfx_gpiote_trigger_enable>:
{
   11d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11d56:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11d58:	f7ff fe14 	bl	11984 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11d5c:	f104 0208 	add.w	r2, r4, #8
   11d60:	4b1e      	ldr	r3, [pc, #120]	; (11ddc <nrfx_gpiote_trigger_enable+0x88>)
   11d62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11d66:	b1e8      	cbz	r0, 11da4 <nrfx_gpiote_trigger_enable+0x50>
   11d68:	f013 0502 	ands.w	r5, r3, #2
   11d6c:	d11a      	bne.n	11da4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11d6e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   11d70:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   11d72:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   11d76:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   11d7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11d7e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11d82:	6005      	str	r5, [r0, #0]
   11d84:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   11d86:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   11d8a:	f040 0001 	orr.w	r0, r0, #1
   11d8e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   11d92:	b129      	cbz	r1, 11da0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   11d94:	2201      	movs	r2, #1
   11d96:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   11d9a:	4a11      	ldr	r2, [pc, #68]	; (11de0 <nrfx_gpiote_trigger_enable+0x8c>)
   11d9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   11da0:	b003      	add	sp, #12
   11da2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   11da4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   11da8:	2b04      	cmp	r3, #4
   11daa:	d012      	beq.n	11dd2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   11dac:	2b05      	cmp	r3, #5
   11dae:	d012      	beq.n	11dd6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11db0:	a801      	add	r0, sp, #4
   11db2:	9401      	str	r4, [sp, #4]
   11db4:	f7ff fdd8 	bl	11968 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   11db8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   11dba:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   11dbe:	40d9      	lsrs	r1, r3
   11dc0:	f001 0101 	and.w	r1, r1, #1
   11dc4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   11dc6:	4620      	mov	r0, r4
}
   11dc8:	b003      	add	sp, #12
   11dca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   11dce:	f005 bf2a 	b.w	17c26 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   11dd2:	2103      	movs	r1, #3
   11dd4:	e7f7      	b.n	11dc6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   11dd6:	2102      	movs	r1, #2
   11dd8:	e7f5      	b.n	11dc6 <nrfx_gpiote_trigger_enable+0x72>
   11dda:	bf00      	nop
   11ddc:	20000424 	.word	0x20000424
   11de0:	40006000 	.word	0x40006000

00011de4 <nrfx_gpiote_trigger_disable>:
{
   11de4:	b508      	push	{r3, lr}
   11de6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11de8:	f7ff fdcc 	bl	11984 <pin_in_use_by_te>
   11dec:	b1c0      	cbz	r0, 11e20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11dee:	f102 0108 	add.w	r1, r2, #8
   11df2:	4b0e      	ldr	r3, [pc, #56]	; (11e2c <nrfx_gpiote_trigger_disable+0x48>)
   11df4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   11df8:	0799      	lsls	r1, r3, #30
   11dfa:	d411      	bmi.n	11e20 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11dfc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   11dfe:	2201      	movs	r2, #1
   11e00:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   11e02:	009b      	lsls	r3, r3, #2
   11e04:	490a      	ldr	r1, [pc, #40]	; (11e30 <nrfx_gpiote_trigger_disable+0x4c>)
   11e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11e0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   11e0e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   11e12:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   11e16:	f022 0203 	bic.w	r2, r2, #3
   11e1a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   11e1e:	bd08      	pop	{r3, pc}
   11e20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   11e24:	2100      	movs	r1, #0
   11e26:	4610      	mov	r0, r2
   11e28:	f005 befd 	b.w	17c26 <nrf_gpio_cfg_sense_set>
   11e2c:	20000424 	.word	0x20000424
   11e30:	40006000 	.word	0x40006000

00011e34 <nrfx_gpiote_pin_uninit>:
{
   11e34:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   11e36:	4b0e      	ldr	r3, [pc, #56]	; (11e70 <nrfx_gpiote_pin_uninit+0x3c>)
   11e38:	f100 0208 	add.w	r2, r0, #8
{
   11e3c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   11e3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   11e42:	07db      	lsls	r3, r3, #31
   11e44:	d511      	bpl.n	11e6a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   11e46:	f7ff ffcd 	bl	11de4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   11e4a:	4620      	mov	r0, r4
   11e4c:	f7ff fdec 	bl	11a28 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11e50:	a801      	add	r0, sp, #4
   11e52:	9401      	str	r4, [sp, #4]
   11e54:	f7ff fd88 	bl	11968 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   11e58:	9b01      	ldr	r3, [sp, #4]
   11e5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   11e5e:	2202      	movs	r2, #2
   11e60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   11e64:	4803      	ldr	r0, [pc, #12]	; (11e74 <nrfx_gpiote_pin_uninit+0x40>)
}
   11e66:	b002      	add	sp, #8
   11e68:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   11e6a:	4803      	ldr	r0, [pc, #12]	; (11e78 <nrfx_gpiote_pin_uninit+0x44>)
   11e6c:	e7fb      	b.n	11e66 <nrfx_gpiote_pin_uninit+0x32>
   11e6e:	bf00      	nop
   11e70:	20000424 	.word	0x20000424
   11e74:	0bad0000 	.word	0x0bad0000
   11e78:	0bad0004 	.word	0x0bad0004

00011e7c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   11e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e80:	4b68      	ldr	r3, [pc, #416]	; (12024 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   11e82:	4869      	ldr	r0, [pc, #420]	; (12028 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   11e84:	4969      	ldr	r1, [pc, #420]	; (1202c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   11e86:	2600      	movs	r6, #0
{
   11e88:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   11e8a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11e8c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11e8e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   11e90:	b135      	cbz	r5, 11ea0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   11e92:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   11e96:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11e98:	bf1e      	ittt	ne
   11e9a:	601c      	strne	r4, [r3, #0]
   11e9c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   11e9e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   11ea0:	3304      	adds	r3, #4
   11ea2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   11ea4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   11ea8:	d1f1      	bne.n	11e8e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11eaa:	f8df 917c 	ldr.w	r9, [pc, #380]	; 12028 <nrfx_gpiote_irq_handler+0x1ac>
   11eae:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   11eb2:	2b00      	cmp	r3, #0
   11eb4:	f000 8099 	beq.w	11fea <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   11eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   11ebc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   11ec0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   11ec2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   11ec6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   11eca:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   11ecc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   11ed0:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   11ed4:	f10d 0a10 	add.w	sl, sp, #16
   11ed8:	ea4f 1348 	mov.w	r3, r8, lsl #5
   11edc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   11ede:	f04f 0b01 	mov.w	fp, #1
   11ee2:	e049      	b.n	11f78 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   11ee4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   11ee6:	4a52      	ldr	r2, [pc, #328]	; (12030 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   11ee8:	fa94 f4a4 	rbit	r4, r4
   11eec:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   11ef0:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   11ef2:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   11ef4:	f104 0308 	add.w	r3, r4, #8
   11ef8:	9403      	str	r4, [sp, #12]
   11efa:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   11efe:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   11f02:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   11f06:	fa0b f202 	lsl.w	r2, fp, r2
   11f0a:	ea23 0302 	bic.w	r3, r3, r2
   11f0e:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f12:	a803      	add	r0, sp, #12
   11f14:	f7ff fd28 	bl	11968 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   11f18:	9b03      	ldr	r3, [sp, #12]
   11f1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   11f1e:	08b9      	lsrs	r1, r7, #2
   11f20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11f24:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   11f28:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   11f2a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   11f2c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   11f30:	d52c      	bpl.n	11f8c <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   11f32:	4620      	mov	r0, r4
   11f34:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   11f36:	b2dd      	uxtb	r5, r3
   11f38:	f7ff fd2e 	bl	11998 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f3c:	a803      	add	r0, sp, #12
   11f3e:	9403      	str	r4, [sp, #12]
   11f40:	f7ff fd12 	bl	11968 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   11f44:	9b03      	ldr	r3, [sp, #12]
   11f46:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   11f4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   11f4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   11f52:	429d      	cmp	r5, r3
   11f54:	d107      	bne.n	11f66 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   11f56:	2100      	movs	r1, #0
   11f58:	4620      	mov	r0, r4
   11f5a:	f005 fe64 	bl	17c26 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   11f5e:	4629      	mov	r1, r5
   11f60:	4620      	mov	r0, r4
   11f62:	f005 fe60 	bl	17c26 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   11f66:	a803      	add	r0, sp, #12
   11f68:	9403      	str	r4, [sp, #12]
   11f6a:	f7ff fcfd 	bl	11968 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   11f6e:	9b03      	ldr	r3, [sp, #12]
   11f70:	fa0b f303 	lsl.w	r3, fp, r3
   11f74:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   11f78:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   11f7c:	2c00      	cmp	r4, #0
   11f7e:	d1b1      	bne.n	11ee4 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   11f80:	f1b8 0f00 	cmp.w	r8, #0
   11f84:	d11d      	bne.n	11fc2 <nrfx_gpiote_irq_handler+0x146>
   11f86:	f04f 0801 	mov.w	r8, #1
   11f8a:	e7a5      	b.n	11ed8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   11f8c:	2b02      	cmp	r3, #2
   11f8e:	d10c      	bne.n	11faa <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   11f90:	2103      	movs	r1, #3
   11f92:	4620      	mov	r0, r4
   11f94:	f005 fe47 	bl	17c26 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   11f98:	f005 0305 	and.w	r3, r5, #5
   11f9c:	2b01      	cmp	r3, #1
   11f9e:	d1e2      	bne.n	11f66 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   11fa0:	4639      	mov	r1, r7
   11fa2:	4620      	mov	r0, r4
   11fa4:	f7ff fcf8 	bl	11998 <call_handler>
   11fa8:	e7dd      	b.n	11f66 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   11faa:	2102      	movs	r1, #2
   11fac:	4620      	mov	r0, r4
   11fae:	9301      	str	r3, [sp, #4]
   11fb0:	f005 fe39 	bl	17c26 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   11fb4:	2d03      	cmp	r5, #3
   11fb6:	d0f3      	beq.n	11fa0 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	2b03      	cmp	r3, #3
   11fbc:	d1d3      	bne.n	11f66 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   11fbe:	2d02      	cmp	r5, #2
   11fc0:	e7ed      	b.n	11f9e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   11fc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   11fc6:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   11fca:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   11fce:	4919      	ldr	r1, [pc, #100]	; (12034 <nrfx_gpiote_irq_handler+0x1b8>)
   11fd0:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   11fd4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   11fd6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   11fda:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   11fde:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   11fe0:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   11fe2:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   11fe6:	f47f af73 	bne.w	11ed0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   11fea:	2401      	movs	r4, #1
    while (mask)
   11fec:	b916      	cbnz	r6, 11ff4 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   11fee:	b007      	add	sp, #28
   11ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   11ff4:	fa96 f3a6 	rbit	r3, r6
   11ff8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   11ffc:	fa04 f203 	lsl.w	r2, r4, r3
   12000:	009b      	lsls	r3, r3, #2
   12002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12006:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1200a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1200e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   12012:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   12016:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1201a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1201e:	f7ff fcbb 	bl	11998 <call_handler>
   12022:	e7e3      	b.n	11fec <nrfx_gpiote_irq_handler+0x170>
   12024:	40006100 	.word	0x40006100
   12028:	40006000 	.word	0x40006000
   1202c:	40006120 	.word	0x40006120
   12030:	20000424 	.word	0x20000424
   12034:	50000300 	.word	0x50000300

00012038 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   12038:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1203a:	4801      	ldr	r0, [pc, #4]	; (12040 <nrfx_ppi_channel_alloc+0x8>)
   1203c:	f7ff bc54 	b.w	118e8 <nrfx_flag32_alloc>
   12040:	200004a0 	.word	0x200004a0

00012044 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   12044:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   12046:	4c11      	ldr	r4, [pc, #68]	; (1208c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   12048:	4a11      	ldr	r2, [pc, #68]	; (12090 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1204a:	4912      	ldr	r1, [pc, #72]	; (12094 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1204c:	2303      	movs	r3, #3
   1204e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   12050:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   12052:	4b11      	ldr	r3, [pc, #68]	; (12098 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   12054:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   12056:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   12058:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1205c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1205e:	2300      	movs	r3, #0
   12060:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   12062:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   12064:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   12066:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   12068:	4a0c      	ldr	r2, [pc, #48]	; (1209c <_DoInit+0x58>)
   1206a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1206c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1206e:	2210      	movs	r2, #16
   12070:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   12072:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   12074:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   12076:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   12078:	f004 ff04 	bl	16e84 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1207c:	4908      	ldr	r1, [pc, #32]	; (120a0 <_DoInit+0x5c>)
   1207e:	4620      	mov	r0, r4
   12080:	f004 ff00 	bl	16e84 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   12084:	2320      	movs	r3, #32
   12086:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   12088:	bd10      	pop	{r4, pc}
   1208a:	bf00      	nop
   1208c:	2000256c 	.word	0x2000256c
   12090:	0001a178 	.word	0x0001a178
   12094:	0001a181 	.word	0x0001a181
   12098:	20003286 	.word	0x20003286
   1209c:	20003276 	.word	0x20003276
   120a0:	0001a185 	.word	0x0001a185

000120a4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   120a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   120a8:	4f21      	ldr	r7, [pc, #132]	; (12130 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   120aa:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   120ae:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   120b0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   120b4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   120b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   120b8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   120ba:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   120bc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   120be:	d831      	bhi.n	12124 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   120c0:	f8d2 a020 	ldr.w	sl, [r2, #32]
   120c4:	ebaa 0905 	sub.w	r9, sl, r5
   120c8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   120cc:	4294      	cmp	r4, r2
   120ce:	d811      	bhi.n	120f4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   120d0:	2318      	movs	r3, #24
   120d2:	fb06 3303 	mla	r3, r6, r3, r3
   120d6:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   120d8:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   120da:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   120dc:	4641      	mov	r1, r8
   120de:	4428      	add	r0, r5
   120e0:	f004 ff11 	bl	16f06 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   120e4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   120e6:	2318      	movs	r3, #24
   120e8:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   120ec:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   120ee:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   120f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   120f4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   120f6:	429c      	cmp	r4, r3
   120f8:	d818      	bhi.n	1212c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   120fa:	fb00 bb0b 	mla	fp, r0, fp, fp
   120fe:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   12100:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   12102:	f8db 0004 	ldr.w	r0, [fp, #4]
   12106:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   12108:	4428      	add	r0, r5
   1210a:	f004 fefc 	bl	16f06 <memcpy>
      if (NumBytes) {
   1210e:	ebb4 040a 	subs.w	r4, r4, sl
   12112:	d0e8      	beq.n	120e6 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   12114:	f8db 0004 	ldr.w	r0, [fp, #4]
   12118:	4622      	mov	r2, r4
   1211a:	eb08 0109 	add.w	r1, r8, r9
   1211e:	f004 fef2 	bl	16f06 <memcpy>
      return 1;
   12122:	e7e0      	b.n	120e6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   12124:	3b01      	subs	r3, #1
   12126:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   12128:	42a3      	cmp	r3, r4
   1212a:	d2d1      	bcs.n	120d0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1212c:	2000      	movs	r0, #0
   1212e:	e7df      	b.n	120f0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   12130:	2000256c 	.word	0x2000256c

00012134 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   12134:	4b03      	ldr	r3, [pc, #12]	; (12144 <SEGGER_RTT_HasDataUp+0x10>)
   12136:	2218      	movs	r2, #24
   12138:	fb02 3300 	mla	r3, r2, r0, r3
   1213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1213e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   12140:	1a80      	subs	r0, r0, r2
   12142:	4770      	bx	lr
   12144:	2000256c 	.word	0x2000256c

00012148 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   12148:	4803      	ldr	r0, [pc, #12]	; (12158 <zephyr_rtt_mutex_lock+0x10>)
   1214a:	f04f 32ff 	mov.w	r2, #4294967295
   1214e:	f04f 33ff 	mov.w	r3, #4294967295
   12152:	f000 baa1 	b.w	12698 <z_impl_k_mutex_lock>
   12156:	bf00      	nop
   12158:	200005d0 	.word	0x200005d0

0001215c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1215c:	4801      	ldr	r0, [pc, #4]	; (12164 <zephyr_rtt_mutex_unlock+0x8>)
   1215e:	f000 bb15 	b.w	1278c <z_impl_k_mutex_unlock>
   12162:	bf00      	nop
   12164:	200005d0 	.word	0x200005d0

00012168 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1216c:	b086      	sub	sp, #24
   1216e:	4605      	mov	r5, r0
   12170:	af00      	add	r7, sp, #0
   12172:	460e      	mov	r6, r1
	__asm__ volatile(
   12174:	f04f 0340 	mov.w	r3, #64	; 0x40
   12178:	f3ef 8811 	mrs	r8, BASEPRI
   1217c:	f383 8812 	msr	BASEPRI_MAX, r3
   12180:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   12184:	f001 f834 	bl	131f0 <z_impl_z_current_get>
   12188:	2d04      	cmp	r5, #4
   1218a:	bf96      	itet	ls
   1218c:	4b2c      	ldrls	r3, [pc, #176]	; (12240 <z_fatal_error+0xd8>)
   1218e:	4b2d      	ldrhi	r3, [pc, #180]	; (12244 <z_fatal_error+0xdc>)
   12190:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   12194:	46e9      	mov	r9, sp
   12196:	b08a      	sub	sp, #40	; 0x28
   12198:	4604      	mov	r4, r0
   1219a:	466a      	mov	r2, sp
   1219c:	492a      	ldr	r1, [pc, #168]	; (12248 <z_fatal_error+0xe0>)
   1219e:	61d3      	str	r3, [r2, #28]
   121a0:	f240 3301 	movw	r3, #769	; 0x301
   121a4:	8493      	strh	r3, [r2, #36]	; 0x24
   121a6:	f04f 0a00 	mov.w	sl, #0
   121aa:	4b28      	ldr	r3, [pc, #160]	; (1224c <z_fatal_error+0xe4>)
   121ac:	f8c2 a020 	str.w	sl, [r2, #32]
   121b0:	e9c2 1505 	strd	r1, r5, [r2, #20]
   121b4:	f842 3f10 	str.w	r3, [r2, #16]!
   121b8:	4825      	ldr	r0, [pc, #148]	; (12250 <z_fatal_error+0xe8>)
   121ba:	4653      	mov	r3, sl
   121bc:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   121c0:	f7f9 fcea 	bl	bb98 <z_impl_z_log_msg_static_create>
   121c4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   121c6:	b17e      	cbz	r6, 121e8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   121c8:	69f3      	ldr	r3, [r6, #28]
   121ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
   121ce:	b15b      	cbz	r3, 121e8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   121d0:	4b20      	ldr	r3, [pc, #128]	; (12254 <z_fatal_error+0xec>)
   121d2:	617b      	str	r3, [r7, #20]
   121d4:	2302      	movs	r3, #2
   121d6:	613b      	str	r3, [r7, #16]
   121d8:	481d      	ldr	r0, [pc, #116]	; (12250 <z_fatal_error+0xe8>)
   121da:	4653      	mov	r3, sl
   121dc:	f107 0210 	add.w	r2, r7, #16
   121e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121e4:	f7f9 fcd8 	bl	bb98 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   121e8:	b12c      	cbz	r4, 121f6 <z_fatal_error+0x8e>
   121ea:	4620      	mov	r0, r4
   121ec:	f005 fe09 	bl	17e02 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   121f0:	b108      	cbz	r0, 121f6 <z_fatal_error+0x8e>
   121f2:	7803      	ldrb	r3, [r0, #0]
   121f4:	b903      	cbnz	r3, 121f8 <z_fatal_error+0x90>
		thread_name = "unknown";
   121f6:	4818      	ldr	r0, [pc, #96]	; (12258 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   121f8:	46e9      	mov	r9, sp
   121fa:	b08a      	sub	sp, #40	; 0x28
   121fc:	466a      	mov	r2, sp
   121fe:	4b17      	ldr	r3, [pc, #92]	; (1225c <z_fatal_error+0xf4>)
   12200:	61d0      	str	r0, [r2, #28]
   12202:	e9c2 3405 	strd	r3, r4, [r2, #20]
   12206:	f240 3301 	movw	r3, #769	; 0x301
   1220a:	8413      	strh	r3, [r2, #32]
   1220c:	4b14      	ldr	r3, [pc, #80]	; (12260 <z_fatal_error+0xf8>)
   1220e:	f842 3f10 	str.w	r3, [r2, #16]!
   12212:	2300      	movs	r3, #0
   12214:	480e      	ldr	r0, [pc, #56]	; (12250 <z_fatal_error+0xe8>)
   12216:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1221a:	f7f9 fcbd 	bl	bb98 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1221e:	4631      	mov	r1, r6
   12220:	46cd      	mov	sp, r9
   12222:	4628      	mov	r0, r5
   12224:	f7fe fca2 	bl	10b6c <k_sys_fatal_error_handler>
	__asm__ volatile(
   12228:	f388 8811 	msr	BASEPRI, r8
   1222c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   12230:	4620      	mov	r0, r4
   12232:	f7fa ff8f 	bl	d154 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   12236:	3718      	adds	r7, #24
   12238:	46bd      	mov	sp, r7
   1223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1223e:	bf00      	nop
   12240:	00018e50 	.word	0x00018e50
   12244:	0001a18c 	.word	0x0001a18c
   12248:	0001a19a 	.word	0x0001a19a
   1224c:	01000005 	.word	0x01000005
   12250:	00018aac 	.word	0x00018aac
   12254:	0001a1c2 	.word	0x0001a1c2
   12258:	00019723 	.word	0x00019723
   1225c:	0001a1e3 	.word	0x0001a1e3
   12260:	01000004 	.word	0x01000004

00012264 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12264:	4b10      	ldr	r3, [pc, #64]	; (122a8 <z_sys_init_run_level+0x44>)
{
   12266:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12268:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1226c:	3001      	adds	r0, #1
   1226e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   12272:	42a6      	cmp	r6, r4
   12274:	d800      	bhi.n	12278 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   12276:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   12278:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1227c:	b18d      	cbz	r5, 122a2 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   1227e:	4628      	mov	r0, r5
   12280:	4798      	blx	r3
			if (rc != 0) {
   12282:	b138      	cbz	r0, 12294 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   12284:	2800      	cmp	r0, #0
   12286:	bfb8      	it	lt
   12288:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1228a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1228c:	28ff      	cmp	r0, #255	; 0xff
   1228e:	bfa8      	it	ge
   12290:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   12292:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   12294:	68ea      	ldr	r2, [r5, #12]
   12296:	7853      	ldrb	r3, [r2, #1]
   12298:	f043 0301 	orr.w	r3, r3, #1
   1229c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1229e:	3408      	adds	r4, #8
   122a0:	e7e7      	b.n	12272 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   122a2:	4798      	blx	r3
   122a4:	e7fb      	b.n	1229e <z_sys_init_run_level+0x3a>
   122a6:	bf00      	nop
   122a8:	00018e64 	.word	0x00018e64

000122ac <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   122ac:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   122ae:	4b0a      	ldr	r3, [pc, #40]	; (122d8 <bg_thread_main+0x2c>)
   122b0:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   122b2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   122b4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   122b6:	f7ff ffd5 	bl	12264 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   122ba:	f001 fab1 	bl	13820 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   122be:	2004      	movs	r0, #4
   122c0:	f7ff ffd0 	bl	12264 <z_sys_init_run_level>

	z_init_static_threads();
   122c4:	f000 f970 	bl	125a8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   122c8:	f006 f9ff 	bl	186ca <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   122cc:	4a03      	ldr	r2, [pc, #12]	; (122dc <bg_thread_main+0x30>)
   122ce:	7b13      	ldrb	r3, [r2, #12]
   122d0:	f023 0301 	bic.w	r3, r3, #1
   122d4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   122d6:	bd08      	pop	{r3, pc}
   122d8:	20003686 	.word	0x20003686
   122dc:	20001d38 	.word	0x20001d38

000122e0 <z_bss_zero>:
{
   122e0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   122e2:	4803      	ldr	r0, [pc, #12]	; (122f0 <z_bss_zero+0x10>)
   122e4:	4a03      	ldr	r2, [pc, #12]	; (122f4 <z_bss_zero+0x14>)
   122e6:	2100      	movs	r1, #0
   122e8:	1a12      	subs	r2, r2, r0
   122ea:	f005 fcbe 	bl	17c6a <z_early_memset>
}
   122ee:	bd08      	pop	{r3, pc}
   122f0:	200006b0 	.word	0x200006b0
   122f4:	20003688 	.word	0x20003688

000122f8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   122f8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   122fa:	2300      	movs	r3, #0
{
   122fc:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   122fe:	2201      	movs	r2, #1
   12300:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   12304:	4e13      	ldr	r6, [pc, #76]	; (12354 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   12306:	4d14      	ldr	r5, [pc, #80]	; (12358 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   12308:	9301      	str	r3, [sp, #4]
   1230a:	220f      	movs	r2, #15
   1230c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   12310:	4912      	ldr	r1, [pc, #72]	; (1235c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   12312:	2314      	movs	r3, #20
   12314:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   12318:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1231c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1231e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   12322:	fb00 1104 	mla	r1, r0, r4, r1
   12326:	4b0e      	ldr	r3, [pc, #56]	; (12360 <z_init_cpu+0x68>)
   12328:	9500      	str	r5, [sp, #0]
   1232a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1232e:	4630      	mov	r0, r6
   12330:	f000 f8dc 	bl	124ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12334:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   12336:	4a0b      	ldr	r2, [pc, #44]	; (12364 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   12338:	60ee      	str	r6, [r5, #12]
   1233a:	f023 0304 	bic.w	r3, r3, #4
   1233e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   12340:	f44f 6304 	mov.w	r3, #2112	; 0x840
   12344:	fb04 3303 	mla	r3, r4, r3, r3
   12348:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1234a:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   1234c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1234e:	b006      	add	sp, #24
   12350:	bd70      	pop	{r4, r5, r6, pc}
   12352:	bf00      	nop
   12354:	20001cb8 	.word	0x20001cb8
   12358:	20002614 	.word	0x20002614
   1235c:	20005540 	.word	0x20005540
   12360:	00012661 	.word	0x00012661
   12364:	20004d00 	.word	0x20004d00

00012368 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   12368:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1236a:	2000      	movs	r0, #0
{
   1236c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1236e:	f7ff ff79 	bl	12264 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   12372:	4b2e      	ldr	r3, [pc, #184]	; (1242c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12374:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   12378:	4d2d      	ldr	r5, [pc, #180]	; (12430 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1237a:	4e2e      	ldr	r6, [pc, #184]	; (12434 <z_cstart+0xcc>)
   1237c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1237e:	4f2e      	ldr	r7, [pc, #184]	; (12438 <z_cstart+0xd0>)
   12380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   12384:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12386:	23e0      	movs	r3, #224	; 0xe0
   12388:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1238c:	2400      	movs	r4, #0
   1238e:	2320      	movs	r3, #32
   12390:	77eb      	strb	r3, [r5, #31]
   12392:	762c      	strb	r4, [r5, #24]
   12394:	766c      	strb	r4, [r5, #25]
   12396:	76ac      	strb	r4, [r5, #26]
   12398:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1239c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1239e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   123a2:	626b      	str	r3, [r5, #36]	; 0x24
   123a4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   123a8:	f7fa fe48 	bl	d03c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   123ac:	f7fa f98a 	bl	c6c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   123b0:	f04f 33ff 	mov.w	r3, #4294967295
   123b4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   123b6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   123b8:	f7fa ff9c 	bl	d2f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   123bc:	f7fa fee0 	bl	d180 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   123c0:	f7f9 fa76 	bl	b8b0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   123c4:	f240 1301 	movw	r3, #257	; 0x101
   123c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   123cc:	ab06      	add	r3, sp, #24
   123ce:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   123d0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   123d4:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   123d6:	f005 fc3c 	bl	17c52 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   123da:	2001      	movs	r0, #1
   123dc:	f7ff ff42 	bl	12264 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   123e0:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   123e2:	4d16      	ldr	r5, [pc, #88]	; (1243c <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   123e4:	f7ff ff3e 	bl	12264 <z_sys_init_run_level>
	z_sched_init();
   123e8:	f000 fe5e 	bl	130a8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   123ec:	4b14      	ldr	r3, [pc, #80]	; (12440 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   123ee:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   123f0:	9305      	str	r3, [sp, #20]
   123f2:	2301      	movs	r3, #1
   123f4:	4913      	ldr	r1, [pc, #76]	; (12444 <z_cstart+0xdc>)
   123f6:	9400      	str	r4, [sp, #0]
   123f8:	e9cd 4303 	strd	r4, r3, [sp, #12]
   123fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12400:	463b      	mov	r3, r7
   12402:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12406:	4628      	mov	r0, r5
   12408:	f000 f870 	bl	124ec <z_setup_new_thread>
   1240c:	7b6a      	ldrb	r2, [r5, #13]
   1240e:	4606      	mov	r6, r0
   12410:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   12414:	4628      	mov	r0, r5
   12416:	736a      	strb	r2, [r5, #13]
   12418:	f005 feba 	bl	18190 <z_ready_thread>
	z_init_cpu(0);
   1241c:	4620      	mov	r0, r4
   1241e:	f7ff ff6b 	bl	122f8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   12422:	463a      	mov	r2, r7
   12424:	4631      	mov	r1, r6
   12426:	4628      	mov	r0, r5
   12428:	f7fa fad0 	bl	c9cc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1242c:	20005540 	.word	0x20005540
   12430:	e000ed00 	.word	0xe000ed00
   12434:	20002614 	.word	0x20002614
   12438:	000122ad 	.word	0x000122ad
   1243c:	20001d38 	.word	0x20001d38
   12440:	0001a245 	.word	0x0001a245
   12444:	200056c0 	.word	0x200056c0

00012448 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   12448:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1244a:	4c06      	ldr	r4, [pc, #24]	; (12464 <statics_init+0x1c>)
   1244c:	4d06      	ldr	r5, [pc, #24]	; (12468 <statics_init+0x20>)
   1244e:	42ac      	cmp	r4, r5
   12450:	d301      	bcc.n	12456 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   12452:	2000      	movs	r0, #0
   12454:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12456:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1245a:	4620      	mov	r0, r4
   1245c:	f005 fc09 	bl	17c72 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12460:	3414      	adds	r4, #20
   12462:	e7f4      	b.n	1244e <statics_init+0x6>
   12464:	20000580 	.word	0x20000580
   12468:	20000580 	.word	0x20000580

0001246c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   1246c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1246e:	4c06      	ldr	r4, [pc, #24]	; (12488 <init_mem_slab_module+0x1c>)
   12470:	4d06      	ldr	r5, [pc, #24]	; (1248c <init_mem_slab_module+0x20>)
	int rc = 0;
   12472:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   12474:	42ac      	cmp	r4, r5
   12476:	d300      	bcc.n	1247a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   12478:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1247a:	4620      	mov	r0, r4
   1247c:	f005 fc6b 	bl	17d56 <create_free_list>
		if (rc < 0) {
   12480:	2800      	cmp	r0, #0
   12482:	dbf9      	blt.n	12478 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   12484:	341c      	adds	r4, #28
   12486:	e7f5      	b.n	12474 <init_mem_slab_module+0x8>
   12488:	20000580 	.word	0x20000580
   1248c:	20000580 	.word	0x20000580

00012490 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   12490:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12492:	460c      	mov	r4, r1
	__asm__ volatile(
   12494:	f04f 0540 	mov.w	r5, #64	; 0x40
   12498:	f3ef 8111 	mrs	r1, BASEPRI
   1249c:	f385 8812 	msr	BASEPRI_MAX, r5
   124a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   124a4:	6945      	ldr	r5, [r0, #20]
   124a6:	b15d      	cbz	r5, 124c0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   124a8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   124aa:	682b      	ldr	r3, [r5, #0]
   124ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   124ae:	6983      	ldr	r3, [r0, #24]
   124b0:	3301      	adds	r3, #1
   124b2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   124b4:	2000      	movs	r0, #0
	__asm__ volatile(
   124b6:	f381 8811 	msr	BASEPRI, r1
   124ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   124be:	e011      	b.n	124e4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   124c0:	ea52 0603 	orrs.w	r6, r2, r3
   124c4:	d103      	bne.n	124ce <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   124c6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   124c8:	f06f 000b 	mvn.w	r0, #11
   124cc:	e7f3      	b.n	124b6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   124ce:	e9cd 2300 	strd	r2, r3, [sp]
   124d2:	4602      	mov	r2, r0
   124d4:	3008      	adds	r0, #8
   124d6:	f000 fcf1 	bl	12ebc <z_pend_curr>
		if (result == 0) {
   124da:	b918      	cbnz	r0, 124e4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   124dc:	4b02      	ldr	r3, [pc, #8]	; (124e8 <k_mem_slab_alloc+0x58>)
   124de:	689b      	ldr	r3, [r3, #8]
   124e0:	695b      	ldr	r3, [r3, #20]
   124e2:	6023      	str	r3, [r4, #0]
}
   124e4:	b002      	add	sp, #8
   124e6:	bd70      	pop	{r4, r5, r6, pc}
   124e8:	20002614 	.word	0x20002614

000124ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   124ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   124f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   124f2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   124f4:	2604      	movs	r6, #4
   124f6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   124f8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   124fa:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   124fc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   12500:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   12502:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   12504:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   12508:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1250a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1250c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   12510:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   12512:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   12516:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1251a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1251c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1251e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   12520:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   12524:	9202      	str	r2, [sp, #8]
   12526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12528:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1252a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1252c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1252e:	9200      	str	r2, [sp, #0]
   12530:	4642      	mov	r2, r8
{
   12532:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   12534:	f7fa fa18 	bl	c968 <arch_new_thread>
	if (!_current) {
   12538:	4b04      	ldr	r3, [pc, #16]	; (1254c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1253a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1253c:	689b      	ldr	r3, [r3, #8]
   1253e:	b103      	cbz	r3, 12542 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   12540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   12542:	6763      	str	r3, [r4, #116]	; 0x74
}
   12544:	4640      	mov	r0, r8
   12546:	b004      	add	sp, #16
   12548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1254c:	20002614 	.word	0x20002614

00012550 <z_impl_k_thread_create>:
{
   12550:	b5f0      	push	{r4, r5, r6, r7, lr}
   12552:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12554:	2500      	movs	r5, #0
   12556:	9505      	str	r5, [sp, #20]
   12558:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1255a:	9504      	str	r5, [sp, #16]
   1255c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1255e:	9503      	str	r5, [sp, #12]
   12560:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   12562:	9502      	str	r5, [sp, #8]
{
   12564:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12568:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1256a:	9501      	str	r5, [sp, #4]
   1256c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1256e:	9500      	str	r5, [sp, #0]
{
   12570:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   12572:	f7ff ffbb 	bl	124ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   12576:	f1b6 3fff 	cmp.w	r6, #4294967295
   1257a:	bf08      	it	eq
   1257c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   12580:	d005      	beq.n	1258e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   12582:	ea56 0307 	orrs.w	r3, r6, r7
   12586:	d105      	bne.n	12594 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   12588:	4620      	mov	r0, r4
   1258a:	f000 fd0d 	bl	12fa8 <z_sched_start>
}
   1258e:	4620      	mov	r0, r4
   12590:	b007      	add	sp, #28
   12592:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   12594:	4903      	ldr	r1, [pc, #12]	; (125a4 <z_impl_k_thread_create+0x54>)
   12596:	463a      	mov	r2, r7
   12598:	4633      	mov	r3, r6
   1259a:	f104 0018 	add.w	r0, r4, #24
   1259e:	f000 feff 	bl	133a0 <z_add_timeout>
   125a2:	e7f4      	b.n	1258e <z_impl_k_thread_create+0x3e>
   125a4:	00018219 	.word	0x00018219

000125a8 <z_init_static_threads>:
{
   125a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125ac:	4c29      	ldr	r4, [pc, #164]	; (12654 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   125ae:	4d2a      	ldr	r5, [pc, #168]	; (12658 <z_init_static_threads+0xb0>)
{
   125b0:	b087      	sub	sp, #28
   125b2:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   125b4:	42ae      	cmp	r6, r5
   125b6:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   125ba:	d30f      	bcc.n	125dc <z_init_static_threads+0x34>
	k_sched_lock();
   125bc:	f000 fd44 	bl	13048 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   125c0:	4c24      	ldr	r4, [pc, #144]	; (12654 <z_init_static_threads+0xac>)
   125c2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1265c <z_init_static_threads+0xb4>
   125c6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   125ca:	f240 37e7 	movw	r7, #999	; 0x3e7
   125ce:	42ac      	cmp	r4, r5
   125d0:	d320      	bcc.n	12614 <z_init_static_threads+0x6c>
}
   125d2:	b007      	add	sp, #28
   125d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   125d8:	f000 bd4a 	b.w	13070 <k_sched_unlock>
		z_setup_new_thread(
   125dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   125e0:	9305      	str	r3, [sp, #20]
   125e2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   125e6:	9304      	str	r3, [sp, #16]
   125e8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   125ec:	9303      	str	r3, [sp, #12]
   125ee:	f854 3c14 	ldr.w	r3, [r4, #-20]
   125f2:	9302      	str	r3, [sp, #8]
   125f4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   125f8:	9301      	str	r3, [sp, #4]
   125fa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   125fe:	9300      	str	r3, [sp, #0]
   12600:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   12604:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   12608:	f7ff ff70 	bl	124ec <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1260c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   12610:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   12612:	e7ce      	b.n	125b2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   12614:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12616:	1c5a      	adds	r2, r3, #1
   12618:	d00d      	beq.n	12636 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1261a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1261e:	2100      	movs	r1, #0
   12620:	4638      	mov	r0, r7
   12622:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   12626:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1262a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1262e:	d104      	bne.n	1263a <z_init_static_threads+0x92>
	z_sched_start(thread);
   12630:	4640      	mov	r0, r8
   12632:	f000 fcb9 	bl	12fa8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   12636:	342c      	adds	r4, #44	; 0x2c
   12638:	e7c9      	b.n	125ce <z_init_static_threads+0x26>
   1263a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1263e:	2300      	movs	r3, #0
   12640:	f7ed fd5e 	bl	100 <__aeabi_uldivmod>
   12644:	4602      	mov	r2, r0
   12646:	460b      	mov	r3, r1
   12648:	f108 0018 	add.w	r0, r8, #24
   1264c:	4649      	mov	r1, r9
   1264e:	f000 fea7 	bl	133a0 <z_add_timeout>
   12652:	e7f0      	b.n	12636 <z_init_static_threads+0x8e>
   12654:	000189b4 	.word	0x000189b4
   12658:	000189e0 	.word	0x000189e0
   1265c:	00018219 	.word	0x00018219

00012660 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   12660:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   12662:	4c0b      	ldr	r4, [pc, #44]	; (12690 <idle+0x30>)
	return !z_sys_post_kernel;
   12664:	4d0b      	ldr	r5, [pc, #44]	; (12694 <idle+0x34>)
	__asm__ volatile(
   12666:	f04f 0240 	mov.w	r2, #64	; 0x40
   1266a:	f3ef 8311 	mrs	r3, BASEPRI
   1266e:	f382 8812 	msr	BASEPRI_MAX, r2
   12672:	f3bf 8f6f 	isb	sy
   12676:	f005 fe7d 	bl	18374 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1267a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1267c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1267e:	b913      	cbnz	r3, 12686 <idle+0x26>
	arch_cpu_idle();
   12680:	f7fa f826 	bl	c6d0 <arch_cpu_idle>
}
   12684:	e7ef      	b.n	12666 <idle+0x6>
   12686:	f7f9 fe63 	bl	c350 <pm_system_suspend>
   1268a:	2800      	cmp	r0, #0
   1268c:	d1eb      	bne.n	12666 <idle+0x6>
   1268e:	e7f7      	b.n	12680 <idle+0x20>
   12690:	20002614 	.word	0x20002614
   12694:	20003686 	.word	0x20003686

00012698 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   12698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1269c:	4604      	mov	r4, r0
   1269e:	4617      	mov	r7, r2
   126a0:	461e      	mov	r6, r3
   126a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   126a6:	f3ef 8811 	mrs	r8, BASEPRI
   126aa:	f383 8812 	msr	BASEPRI_MAX, r3
   126ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   126b2:	68c3      	ldr	r3, [r0, #12]
   126b4:	4a33      	ldr	r2, [pc, #204]	; (12784 <z_impl_k_mutex_lock+0xec>)
   126b6:	b17b      	cbz	r3, 126d8 <z_impl_k_mutex_lock+0x40>
   126b8:	6880      	ldr	r0, [r0, #8]
   126ba:	6891      	ldr	r1, [r2, #8]
   126bc:	4288      	cmp	r0, r1
   126be:	d019      	beq.n	126f4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   126c0:	ea57 0306 	orrs.w	r3, r7, r6
   126c4:	d118      	bne.n	126f8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   126c6:	f388 8811 	msr	BASEPRI, r8
   126ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   126ce:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   126d2:	b002      	add	sp, #8
   126d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   126d8:	6891      	ldr	r1, [r2, #8]
   126da:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   126de:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   126e0:	3301      	adds	r3, #1
   126e2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   126e4:	6893      	ldr	r3, [r2, #8]
   126e6:	60a3      	str	r3, [r4, #8]
   126e8:	f388 8811 	msr	BASEPRI, r8
   126ec:	f3bf 8f6f 	isb	sy
		return 0;
   126f0:	2000      	movs	r0, #0
   126f2:	e7ee      	b.n	126d2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   126f4:	6921      	ldr	r1, [r4, #16]
   126f6:	e7f2      	b.n	126de <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   126f8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   126fc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   12700:	4299      	cmp	r1, r3
   12702:	bfa8      	it	ge
   12704:	4619      	movge	r1, r3
   12706:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1270a:	4291      	cmp	r1, r2
   1270c:	bfb8      	it	lt
   1270e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   12710:	428b      	cmp	r3, r1
   12712:	dd2e      	ble.n	12772 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   12714:	f005 fb80 	bl	17e18 <adjust_owner_prio.isra.0>
   12718:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1271a:	e9cd 7600 	strd	r7, r6, [sp]
   1271e:	481a      	ldr	r0, [pc, #104]	; (12788 <z_impl_k_mutex_lock+0xf0>)
   12720:	4622      	mov	r2, r4
   12722:	4641      	mov	r1, r8
   12724:	f000 fbca 	bl	12ebc <z_pend_curr>
	if (got_mutex == 0) {
   12728:	2800      	cmp	r0, #0
   1272a:	d0e1      	beq.n	126f0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1272c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12730:	f3ef 8611 	mrs	r6, BASEPRI
   12734:	f383 8812 	msr	BASEPRI_MAX, r3
   12738:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1273c:	68a0      	ldr	r0, [r4, #8]
   1273e:	b1d0      	cbz	r0, 12776 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12740:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12742:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12744:	429c      	cmp	r4, r3
   12746:	d00a      	beq.n	1275e <z_impl_k_mutex_lock+0xc6>
   12748:	b14b      	cbz	r3, 1275e <z_impl_k_mutex_lock+0xc6>
   1274a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1274e:	4299      	cmp	r1, r3
   12750:	bfa8      	it	ge
   12752:	4619      	movge	r1, r3
   12754:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   12758:	4299      	cmp	r1, r3
   1275a:	bfb8      	it	lt
   1275c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1275e:	f005 fb5b 	bl	17e18 <adjust_owner_prio.isra.0>
   12762:	b140      	cbz	r0, 12776 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   12764:	4808      	ldr	r0, [pc, #32]	; (12788 <z_impl_k_mutex_lock+0xf0>)
   12766:	4631      	mov	r1, r6
   12768:	f000 fc0c 	bl	12f84 <z_reschedule>
	return -EAGAIN;
   1276c:	f06f 000a 	mvn.w	r0, #10
   12770:	e7af      	b.n	126d2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   12772:	2500      	movs	r5, #0
   12774:	e7d1      	b.n	1271a <z_impl_k_mutex_lock+0x82>
	if (resched) {
   12776:	2d00      	cmp	r5, #0
   12778:	d1f4      	bne.n	12764 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1277a:	f386 8811 	msr	BASEPRI, r6
   1277e:	f3bf 8f6f 	isb	sy
   12782:	e7f3      	b.n	1276c <z_impl_k_mutex_lock+0xd4>
   12784:	20002614 	.word	0x20002614
   12788:	20003687 	.word	0x20003687

0001278c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1278c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1278e:	6883      	ldr	r3, [r0, #8]
{
   12790:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   12792:	b36b      	cbz	r3, 127f0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   12794:	4a19      	ldr	r2, [pc, #100]	; (127fc <z_impl_k_mutex_unlock+0x70>)
   12796:	6892      	ldr	r2, [r2, #8]
   12798:	4293      	cmp	r3, r2
   1279a:	d12c      	bne.n	127f6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1279c:	68c3      	ldr	r3, [r0, #12]
   1279e:	2b01      	cmp	r3, #1
   127a0:	d903      	bls.n	127aa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   127a2:	3b01      	subs	r3, #1
   127a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   127a6:	2000      	movs	r0, #0
}
   127a8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   127aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   127ae:	f3ef 8511 	mrs	r5, BASEPRI
   127b2:	f383 8812 	msr	BASEPRI_MAX, r3
   127b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   127ba:	6901      	ldr	r1, [r0, #16]
   127bc:	6880      	ldr	r0, [r0, #8]
   127be:	f005 fb2b 	bl	17e18 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   127c2:	4620      	mov	r0, r4
   127c4:	f005 fd43 	bl	1824e <z_unpend_first_thread>
	mutex->owner = new_owner;
   127c8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   127ca:	b158      	cbz	r0, 127e4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   127cc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   127d0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   127d2:	2200      	movs	r2, #0
   127d4:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   127d6:	f005 fcdb 	bl	18190 <z_ready_thread>
		z_reschedule(&lock, key);
   127da:	4809      	ldr	r0, [pc, #36]	; (12800 <z_impl_k_mutex_unlock+0x74>)
   127dc:	4629      	mov	r1, r5
   127de:	f000 fbd1 	bl	12f84 <z_reschedule>
   127e2:	e7e0      	b.n	127a6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   127e4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   127e6:	f385 8811 	msr	BASEPRI, r5
   127ea:	f3bf 8f6f 	isb	sy
   127ee:	e7da      	b.n	127a6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   127f0:	f06f 0015 	mvn.w	r0, #21
   127f4:	e7d8      	b.n	127a8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   127f6:	f04f 30ff 	mov.w	r0, #4294967295
   127fa:	e7d5      	b.n	127a8 <z_impl_k_mutex_unlock+0x1c>
   127fc:	20002614 	.word	0x20002614
   12800:	20003687 	.word	0x20003687

00012804 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   12804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12806:	4611      	mov	r1, r2
	__asm__ volatile(
   12808:	f04f 0240 	mov.w	r2, #64	; 0x40
   1280c:	f3ef 8511 	mrs	r5, BASEPRI
   12810:	f382 8812 	msr	BASEPRI_MAX, r2
   12814:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   12818:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1281a:	b19c      	cbz	r4, 12844 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1281c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1281e:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12820:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   12824:	4294      	cmp	r4, r2
	list->head = node;
   12826:	6003      	str	r3, [r0, #0]
	list->tail = node;
   12828:	bf08      	it	eq
   1282a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1282c:	2101      	movs	r1, #1
   1282e:	4620      	mov	r0, r4
   12830:	f005 fb67 	bl	17f02 <z_queue_node_peek>
   12834:	4604      	mov	r4, r0
	__asm__ volatile(
   12836:	f385 8811 	msr	BASEPRI, r5
   1283a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1283e:	4620      	mov	r0, r4
   12840:	b003      	add	sp, #12
   12842:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12844:	ea51 0203 	orrs.w	r2, r1, r3
   12848:	d0f5      	beq.n	12836 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1284a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1284e:	e9cd 1300 	strd	r1, r3, [sp]
   12852:	4610      	mov	r0, r2
   12854:	4629      	mov	r1, r5
   12856:	f000 fb31 	bl	12ebc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1285a:	2800      	cmp	r0, #0
   1285c:	d1ef      	bne.n	1283e <z_impl_k_queue_get+0x3a>
   1285e:	4b02      	ldr	r3, [pc, #8]	; (12868 <z_impl_k_queue_get+0x64>)
   12860:	689b      	ldr	r3, [r3, #8]
   12862:	695c      	ldr	r4, [r3, #20]
   12864:	e7eb      	b.n	1283e <z_impl_k_queue_get+0x3a>
   12866:	bf00      	nop
   12868:	20002614 	.word	0x20002614

0001286c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1286c:	b538      	push	{r3, r4, r5, lr}
   1286e:	4604      	mov	r4, r0
	__asm__ volatile(
   12870:	f04f 0340 	mov.w	r3, #64	; 0x40
   12874:	f3ef 8511 	mrs	r5, BASEPRI
   12878:	f383 8812 	msr	BASEPRI_MAX, r3
   1287c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   12880:	f005 fce5 	bl	1824e <z_unpend_first_thread>

	if (thread != NULL) {
   12884:	b148      	cbz	r0, 1289a <z_impl_k_sem_give+0x2e>
   12886:	2200      	movs	r2, #0
   12888:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1288a:	f005 fc81 	bl	18190 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1288e:	4629      	mov	r1, r5
   12890:	4808      	ldr	r0, [pc, #32]	; (128b4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   12892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   12896:	f000 bb75 	b.w	12f84 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1289a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1289e:	429a      	cmp	r2, r3
   128a0:	bf18      	it	ne
   128a2:	3301      	addne	r3, #1
   128a4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   128a6:	2102      	movs	r1, #2
   128a8:	f104 0010 	add.w	r0, r4, #16
   128ac:	f005 fef8 	bl	186a0 <z_handle_obj_poll_events>
}
   128b0:	e7ed      	b.n	1288e <z_impl_k_sem_give+0x22>
   128b2:	bf00      	nop
   128b4:	20003687 	.word	0x20003687

000128b8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   128b8:	b513      	push	{r0, r1, r4, lr}
   128ba:	f04f 0440 	mov.w	r4, #64	; 0x40
   128be:	f3ef 8111 	mrs	r1, BASEPRI
   128c2:	f384 8812 	msr	BASEPRI_MAX, r4
   128c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   128ca:	6884      	ldr	r4, [r0, #8]
   128cc:	b144      	cbz	r4, 128e0 <z_impl_k_sem_take+0x28>
		sem->count--;
   128ce:	3c01      	subs	r4, #1
   128d0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   128d2:	f381 8811 	msr	BASEPRI, r1
   128d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   128da:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   128dc:	b002      	add	sp, #8
   128de:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   128e0:	ea52 0403 	orrs.w	r4, r2, r3
   128e4:	d106      	bne.n	128f4 <z_impl_k_sem_take+0x3c>
   128e6:	f381 8811 	msr	BASEPRI, r1
   128ea:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   128ee:	f06f 000f 	mvn.w	r0, #15
   128f2:	e7f3      	b.n	128dc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   128f4:	e9cd 2300 	strd	r2, r3, [sp]
   128f8:	4602      	mov	r2, r0
   128fa:	4802      	ldr	r0, [pc, #8]	; (12904 <z_impl_k_sem_take+0x4c>)
   128fc:	f000 fade 	bl	12ebc <z_pend_curr>
	return ret;
   12900:	e7ec      	b.n	128dc <z_impl_k_sem_take+0x24>
   12902:	bf00      	nop
   12904:	20003687 	.word	0x20003687

00012908 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   12908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1290c:	4e4a      	ldr	r6, [pc, #296]	; (12a38 <work_queue_main+0x130>)
   1290e:	b085      	sub	sp, #20
   12910:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   12912:	f04f 38ff 	mov.w	r8, #4294967295
   12916:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1291a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1291e:	f3ef 8711 	mrs	r7, BASEPRI
   12922:	f383 8812 	msr	BASEPRI_MAX, r3
   12926:	f3bf 8f6f 	isb	sy
   1292a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1292e:	b98d      	cbnz	r5, 12954 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   12930:	2102      	movs	r1, #2
   12932:	f104 0098 	add.w	r0, r4, #152	; 0x98
   12936:	f005 fb21 	bl	17f7c <flag_test_and_clear>
   1293a:	2800      	cmp	r0, #0
   1293c:	d143      	bne.n	129c6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1293e:	2300      	movs	r3, #0
   12940:	e9cd 8900 	strd	r8, r9, [sp]
   12944:	9302      	str	r3, [sp, #8]
   12946:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1294a:	4639      	mov	r1, r7
   1294c:	483b      	ldr	r0, [pc, #236]	; (12a3c <work_queue_main+0x134>)
   1294e:	f000 fcb5 	bl	132bc <z_sched_wait>
			continue;
   12952:	e7e2      	b.n	1291a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12954:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   12958:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1295a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1295e:	4295      	cmp	r5, r2
	list->tail = node;
   12960:	bf08      	it	eq
   12962:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   12966:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1296a:	f043 0302 	orr.w	r3, r3, #2
   1296e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   12972:	68eb      	ldr	r3, [r5, #12]
   12974:	f023 0304 	bic.w	r3, r3, #4
   12978:	f043 0301 	orr.w	r3, r3, #1
   1297c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1297e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   12980:	f387 8811 	msr	BASEPRI, r7
   12984:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   12988:	4628      	mov	r0, r5
   1298a:	4798      	blx	r3
	__asm__ volatile(
   1298c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12990:	f3ef 8b11 	mrs	fp, BASEPRI
   12994:	f383 8812 	msr	BASEPRI_MAX, r3
   12998:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1299c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1299e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   129a0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   129a4:	d419      	bmi.n	129da <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   129a6:	60ea      	str	r2, [r5, #12]
   129a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   129ac:	f023 0302 	bic.w	r3, r3, #2
   129b0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   129b4:	f38b 8811 	msr	BASEPRI, fp
   129b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   129bc:	05db      	lsls	r3, r3, #23
   129be:	d4ac      	bmi.n	1291a <work_queue_main+0x12>
	z_impl_k_yield();
   129c0:	f000 fb7a 	bl	130b8 <z_impl_k_yield>
}
   129c4:	e7a9      	b.n	1291a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   129c6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   129ca:	2200      	movs	r2, #0
   129cc:	2101      	movs	r1, #1
   129ce:	4628      	mov	r0, r5
   129d0:	f005 fc97 	bl	18302 <z_sched_wake>
   129d4:	2800      	cmp	r0, #0
   129d6:	d1f8      	bne.n	129ca <work_queue_main+0xc2>
   129d8:	e7b1      	b.n	1293e <work_queue_main+0x36>
	return list->head;
   129da:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   129dc:	f023 0303 	bic.w	r3, r3, #3
   129e0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   129e2:	2800      	cmp	r0, #0
   129e4:	d0e0      	beq.n	129a8 <work_queue_main+0xa0>
	return node->next;
   129e6:	2700      	movs	r7, #0
   129e8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   129ec:	463b      	mov	r3, r7
   129ee:	2800      	cmp	r0, #0
   129f0:	d0da      	beq.n	129a8 <work_queue_main+0xa0>
		if (wc->work == work) {
   129f2:	6842      	ldr	r2, [r0, #4]
   129f4:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   129f6:	4601      	mov	r1, r0
		if (wc->work == work) {
   129f8:	d10c      	bne.n	12a14 <work_queue_main+0x10c>
	return node->next;
   129fa:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   129fc:	b99f      	cbnz	r7, 12a26 <work_queue_main+0x11e>
   129fe:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   12a00:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   12a02:	4282      	cmp	r2, r0
   12a04:	d100      	bne.n	12a08 <work_queue_main+0x100>
	list->tail = node;
   12a06:	6071      	str	r1, [r6, #4]
	parent->next = child;
   12a08:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   12a0c:	f7ff ff2e 	bl	1286c <z_impl_k_sem_give>
}
   12a10:	4639      	mov	r1, r7
   12a12:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   12a14:	f1ba 0f00 	cmp.w	sl, #0
   12a18:	d00b      	beq.n	12a32 <work_queue_main+0x12a>
	return node->next;
   12a1a:	f8da 2000 	ldr.w	r2, [sl]
   12a1e:	4650      	mov	r0, sl
   12a20:	460f      	mov	r7, r1
   12a22:	4692      	mov	sl, r2
   12a24:	e7e3      	b.n	129ee <work_queue_main+0xe6>
	parent->next = child;
   12a26:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   12a28:	6872      	ldr	r2, [r6, #4]
   12a2a:	4282      	cmp	r2, r0
	list->tail = node;
   12a2c:	bf08      	it	eq
   12a2e:	6077      	streq	r7, [r6, #4]
}
   12a30:	e7ea      	b.n	12a08 <work_queue_main+0x100>
   12a32:	4652      	mov	r2, sl
   12a34:	e7f3      	b.n	12a1e <work_queue_main+0x116>
   12a36:	bf00      	nop
   12a38:	20002638 	.word	0x20002638
   12a3c:	20003687 	.word	0x20003687

00012a40 <submit_to_queue_locked>:
{
   12a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   12a42:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   12a44:	079a      	lsls	r2, r3, #30
{
   12a46:	4604      	mov	r4, r0
   12a48:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   12a4a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   12a4e:	d42c      	bmi.n	12aaa <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   12a50:	075b      	lsls	r3, r3, #29
   12a52:	d41a      	bmi.n	12a8a <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   12a54:	680b      	ldr	r3, [r1, #0]
   12a56:	b90b      	cbnz	r3, 12a5c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   12a58:	6883      	ldr	r3, [r0, #8]
   12a5a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   12a5c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   12a5e:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   12a60:	bf44      	itt	mi
   12a62:	68a3      	ldrmi	r3, [r4, #8]
   12a64:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   12a66:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   12a68:	bf4c      	ite	mi
   12a6a:	2602      	movmi	r6, #2
		ret = 1;
   12a6c:	2601      	movpl	r6, #1
	if (queue == NULL) {
   12a6e:	2d00      	cmp	r5, #0
   12a70:	d03a      	beq.n	12ae8 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   12a72:	4b1f      	ldr	r3, [pc, #124]	; (12af0 <submit_to_queue_locked+0xb0>)
   12a74:	689b      	ldr	r3, [r3, #8]
   12a76:	42ab      	cmp	r3, r5
   12a78:	d00a      	beq.n	12a90 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   12a7a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   12a7e:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   12a80:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   12a84:	d414      	bmi.n	12ab0 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   12a86:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   12a8a:	2300      	movs	r3, #0
   12a8c:	603b      	str	r3, [r7, #0]
	return ret;
   12a8e:	e025      	b.n	12adc <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   12a90:	f005 f9ae 	bl	17df0 <k_is_in_isr>
   12a94:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   12a98:	2800      	cmp	r0, #0
   12a9a:	d1f0      	bne.n	12a7e <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   12a9c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   12a9e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   12aa2:	d5f0      	bpl.n	12a86 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   12aa4:	b152      	cbz	r2, 12abc <submit_to_queue_locked+0x7c>
   12aa6:	075b      	lsls	r3, r3, #29
   12aa8:	d408      	bmi.n	12abc <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   12aaa:	f06f 060f 	mvn.w	r6, #15
   12aae:	e7ec      	b.n	12a8a <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   12ab0:	2a00      	cmp	r2, #0
   12ab2:	d1fa      	bne.n	12aaa <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   12ab4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d1f6      	bne.n	12aaa <submit_to_queue_locked+0x6a>
	parent->next = child;
   12abc:	2300      	movs	r3, #0
   12abe:	6023      	str	r3, [r4, #0]
	return list->tail;
   12ac0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   12ac4:	b963      	cbnz	r3, 12ae0 <submit_to_queue_locked+0xa0>
	list->head = node;
   12ac6:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   12aca:	4628      	mov	r0, r5
   12acc:	f005 fa70 	bl	17fb0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   12ad0:	68e3      	ldr	r3, [r4, #12]
   12ad2:	f043 0304 	orr.w	r3, r3, #4
   12ad6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   12ad8:	683b      	ldr	r3, [r7, #0]
   12ada:	60a3      	str	r3, [r4, #8]
}
   12adc:	4630      	mov	r0, r6
   12ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   12ae0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12ae2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   12ae6:	e7f0      	b.n	12aca <submit_to_queue_locked+0x8a>
		return -EINVAL;
   12ae8:	f06f 0615 	mvn.w	r6, #21
   12aec:	e7cd      	b.n	12a8a <submit_to_queue_locked+0x4a>
   12aee:	bf00      	nop
   12af0:	20002614 	.word	0x20002614

00012af4 <k_work_submit>:
{
   12af4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   12af6:	4801      	ldr	r0, [pc, #4]	; (12afc <k_work_submit+0x8>)
   12af8:	f005 bad0 	b.w	1809c <k_work_submit_to_queue>
   12afc:	20001dd8 	.word	0x20001dd8

00012b00 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   12b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b02:	b089      	sub	sp, #36	; 0x24
   12b04:	4604      	mov	r4, r0
	list->head = NULL;
   12b06:	2000      	movs	r0, #0
	list->tail = NULL;
   12b08:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   12b0c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   12b0e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   12b12:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   12b16:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12b1a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   12b1e:	b31d      	cbz	r5, 12b68 <k_work_queue_start+0x68>
   12b20:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   12b22:	2800      	cmp	r0, #0
   12b24:	f240 1001 	movw	r0, #257	; 0x101
   12b28:	bf08      	it	eq
   12b2a:	2001      	moveq	r0, #1
	*flagp = flags;
   12b2c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12b30:	2000      	movs	r0, #0
   12b32:	f04f 36ff 	mov.w	r6, #4294967295
   12b36:	f04f 37ff 	mov.w	r7, #4294967295
   12b3a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   12b3e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   12b42:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12b46:	4b09      	ldr	r3, [pc, #36]	; (12b6c <k_work_queue_start+0x6c>)
   12b48:	9400      	str	r4, [sp, #0]
   12b4a:	4620      	mov	r0, r4
   12b4c:	f7ff fd00 	bl	12550 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   12b50:	b125      	cbz	r5, 12b5c <k_work_queue_start+0x5c>
   12b52:	6829      	ldr	r1, [r5, #0]
   12b54:	b111      	cbz	r1, 12b5c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   12b56:	4620      	mov	r0, r4
   12b58:	f005 f950 	bl	17dfc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   12b5c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   12b5e:	b009      	add	sp, #36	; 0x24
   12b60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   12b64:	f005 b94f 	b.w	17e06 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   12b68:	2001      	movs	r0, #1
   12b6a:	e7df      	b.n	12b2c <k_work_queue_start+0x2c>
   12b6c:	00012909 	.word	0x00012909

00012b70 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   12b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12b72:	9001      	str	r0, [sp, #4]
   12b74:	4608      	mov	r0, r1
	__asm__ volatile(
   12b76:	f04f 0140 	mov.w	r1, #64	; 0x40
   12b7a:	f3ef 8411 	mrs	r4, BASEPRI
   12b7e:	f381 8812 	msr	BASEPRI_MAX, r1
   12b82:	f3bf 8f6f 	isb	sy
	return *flagp;
   12b86:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   12b88:	f011 0f0e 	tst.w	r1, #14
   12b8c:	d116      	bne.n	12bbc <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   12b8e:	ea53 0502 	orrs.w	r5, r3, r2
   12b92:	d108      	bne.n	12ba6 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   12b94:	a901      	add	r1, sp, #4
   12b96:	f7ff ff53 	bl	12a40 <submit_to_queue_locked>
	__asm__ volatile(
   12b9a:	f384 8811 	msr	BASEPRI, r4
   12b9e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   12ba2:	b003      	add	sp, #12
   12ba4:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   12ba6:	f041 0108 	orr.w	r1, r1, #8
   12baa:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   12bac:	9901      	ldr	r1, [sp, #4]
   12bae:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   12bb0:	3010      	adds	r0, #16
   12bb2:	4903      	ldr	r1, [pc, #12]	; (12bc0 <k_work_schedule_for_queue+0x50>)
   12bb4:	f000 fbf4 	bl	133a0 <z_add_timeout>
	return ret;
   12bb8:	2001      	movs	r0, #1
   12bba:	e7ee      	b.n	12b9a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   12bbc:	2000      	movs	r0, #0
   12bbe:	e7ec      	b.n	12b9a <k_work_schedule_for_queue+0x2a>
   12bc0:	00018025 	.word	0x00018025

00012bc4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   12bc4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   12bc6:	4801      	ldr	r0, [pc, #4]	; (12bcc <k_work_schedule+0x8>)
   12bc8:	f7ff bfd2 	b.w	12b70 <k_work_schedule_for_queue>
   12bcc:	20001dd8 	.word	0x20001dd8

00012bd0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   12bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bd2:	460c      	mov	r4, r1
   12bd4:	9001      	str	r0, [sp, #4]
   12bd6:	4616      	mov	r6, r2
   12bd8:	461d      	mov	r5, r3
	__asm__ volatile(
   12bda:	f04f 0340 	mov.w	r3, #64	; 0x40
   12bde:	f3ef 8711 	mrs	r7, BASEPRI
   12be2:	f383 8812 	msr	BASEPRI_MAX, r3
   12be6:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   12bea:	4608      	mov	r0, r1
   12bec:	f005 f9d1 	bl	17f92 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   12bf0:	ea55 0306 	orrs.w	r3, r5, r6
   12bf4:	d109      	bne.n	12c0a <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   12bf6:	a901      	add	r1, sp, #4
   12bf8:	4620      	mov	r0, r4
   12bfa:	f7ff ff21 	bl	12a40 <submit_to_queue_locked>
	__asm__ volatile(
   12bfe:	f387 8811 	msr	BASEPRI, r7
   12c02:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   12c06:	b003      	add	sp, #12
   12c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   12c0a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   12c0c:	4906      	ldr	r1, [pc, #24]	; (12c28 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   12c0e:	f043 0308 	orr.w	r3, r3, #8
   12c12:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   12c14:	9b01      	ldr	r3, [sp, #4]
   12c16:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   12c18:	f104 0010 	add.w	r0, r4, #16
   12c1c:	4632      	mov	r2, r6
   12c1e:	462b      	mov	r3, r5
   12c20:	f000 fbbe 	bl	133a0 <z_add_timeout>
	return ret;
   12c24:	2001      	movs	r0, #1
   12c26:	e7ea      	b.n	12bfe <k_work_reschedule_for_queue+0x2e>
   12c28:	00018025 	.word	0x00018025

00012c2c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   12c2c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   12c2e:	4801      	ldr	r0, [pc, #4]	; (12c34 <k_work_reschedule+0x8>)
   12c30:	f7ff bfce 	b.w	12bd0 <k_work_reschedule_for_queue>
   12c34:	20001dd8 	.word	0x20001dd8

00012c38 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   12c38:	89c3      	ldrh	r3, [r0, #14]
   12c3a:	2b7f      	cmp	r3, #127	; 0x7f
   12c3c:	d812      	bhi.n	12c64 <sliceable+0x2c>
	int ret = slice_ticks;
   12c3e:	4b0a      	ldr	r3, [pc, #40]	; (12c68 <sliceable+0x30>)
   12c40:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   12c42:	b163      	cbz	r3, 12c5e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   12c44:	4b09      	ldr	r3, [pc, #36]	; (12c6c <sliceable+0x34>)
   12c46:	f990 200e 	ldrsb.w	r2, [r0, #14]
   12c4a:	681b      	ldr	r3, [r3, #0]
   12c4c:	429a      	cmp	r2, r3
   12c4e:	db09      	blt.n	12c64 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   12c50:	7b43      	ldrb	r3, [r0, #13]
   12c52:	06db      	lsls	r3, r3, #27
   12c54:	d106      	bne.n	12c64 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   12c56:	4b06      	ldr	r3, [pc, #24]	; (12c70 <sliceable+0x38>)
   12c58:	1ac3      	subs	r3, r0, r3
   12c5a:	bf18      	it	ne
   12c5c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   12c5e:	f003 0001 	and.w	r0, r3, #1
   12c62:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   12c64:	2300      	movs	r3, #0
   12c66:	e7fa      	b.n	12c5e <sliceable+0x26>
   12c68:	20002648 	.word	0x20002648
   12c6c:	20002644 	.word	0x20002644
   12c70:	20001cb8 	.word	0x20001cb8

00012c74 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   12c74:	4b04      	ldr	r3, [pc, #16]	; (12c88 <slice_timeout+0x14>)
   12c76:	1ac0      	subs	r0, r0, r3
   12c78:	4b04      	ldr	r3, [pc, #16]	; (12c8c <slice_timeout+0x18>)
   12c7a:	10c0      	asrs	r0, r0, #3
   12c7c:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   12c7e:	4b04      	ldr	r3, [pc, #16]	; (12c90 <slice_timeout+0x1c>)
   12c80:	2201      	movs	r2, #1
   12c82:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   12c84:	4770      	bx	lr
   12c86:	bf00      	nop
   12c88:	20001db8 	.word	0x20001db8
   12c8c:	aaaaaaab 	.word	0xaaaaaaab
   12c90:	20003687 	.word	0x20003687

00012c94 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   12c94:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   12c96:	4b0e      	ldr	r3, [pc, #56]	; (12cd0 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   12c98:	4c0e      	ldr	r4, [pc, #56]	; (12cd4 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   12c9a:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   12c9c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   12ca0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   12ca4:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   12ca6:	4620      	mov	r0, r4
   12ca8:	f005 fb4e 	bl	18348 <z_abort_timeout>
	slice_expired[cpu] = false;
   12cac:	4b0a      	ldr	r3, [pc, #40]	; (12cd8 <z_reset_time_slice+0x44>)
   12cae:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   12cb0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   12cb2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   12cb4:	f7ff ffc0 	bl	12c38 <sliceable>
   12cb8:	b148      	cbz	r0, 12cce <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   12cba:	4b08      	ldr	r3, [pc, #32]	; (12cdc <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   12cbc:	4908      	ldr	r1, [pc, #32]	; (12ce0 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   12cbe:	681a      	ldr	r2, [r3, #0]
   12cc0:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   12cc2:	4620      	mov	r0, r4
   12cc4:	17d3      	asrs	r3, r2, #31
	}
}
   12cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   12cca:	f000 bb69 	b.w	133a0 <z_add_timeout>
}
   12cce:	bd70      	pop	{r4, r5, r6, pc}
   12cd0:	20002614 	.word	0x20002614
   12cd4:	20001db8 	.word	0x20001db8
   12cd8:	20003687 	.word	0x20003687
   12cdc:	20002648 	.word	0x20002648
   12ce0:	00012c75 	.word	0x00012c75

00012ce4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   12ce4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   12ce6:	4d0d      	ldr	r5, [pc, #52]	; (12d1c <update_cache+0x38>)
   12ce8:	462b      	mov	r3, r5
   12cea:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12cee:	429c      	cmp	r4, r3
   12cf0:	d000      	beq.n	12cf4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   12cf2:	b904      	cbnz	r4, 12cf6 <update_cache+0x12>
   12cf4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   12cf6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   12cf8:	b938      	cbnz	r0, 12d0a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   12cfa:	7b5a      	ldrb	r2, [r3, #13]
   12cfc:	06d2      	lsls	r2, r2, #27
   12cfe:	d104      	bne.n	12d0a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   12d00:	69a2      	ldr	r2, [r4, #24]
   12d02:	b912      	cbnz	r2, 12d0a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   12d04:	89da      	ldrh	r2, [r3, #14]
   12d06:	2a7f      	cmp	r2, #127	; 0x7f
   12d08:	d805      	bhi.n	12d16 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   12d0a:	429c      	cmp	r4, r3
   12d0c:	d002      	beq.n	12d14 <update_cache+0x30>
			z_reset_time_slice(thread);
   12d0e:	4620      	mov	r0, r4
   12d10:	f7ff ffc0 	bl	12c94 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   12d14:	4623      	mov	r3, r4
   12d16:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   12d18:	bd38      	pop	{r3, r4, r5, pc}
   12d1a:	bf00      	nop
   12d1c:	20002614 	.word	0x20002614

00012d20 <move_thread_to_end_of_prio_q>:
{
   12d20:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   12d22:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   12d26:	7b43      	ldrb	r3, [r0, #13]
   12d28:	2a00      	cmp	r2, #0
{
   12d2a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   12d2c:	da04      	bge.n	12d38 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   12d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12d32:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   12d34:	f005 f9e9 	bl	1810a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   12d38:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   12d3a:	4a15      	ldr	r2, [pc, #84]	; (12d90 <move_thread_to_end_of_prio_q+0x70>)
   12d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12d40:	4610      	mov	r0, r2
   12d42:	734b      	strb	r3, [r1, #13]
   12d44:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   12d48:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d4a:	4283      	cmp	r3, r0
   12d4c:	bf08      	it	eq
   12d4e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12d50:	b923      	cbnz	r3, 12d5c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   12d52:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   12d56:	6021      	str	r1, [r4, #0]
	list->tail = node;
   12d58:	6211      	str	r1, [r2, #32]
}
   12d5a:	e00c      	b.n	12d76 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   12d5c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   12d60:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   12d64:	42b5      	cmp	r5, r6
   12d66:	d00e      	beq.n	12d86 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   12d68:	42ae      	cmp	r6, r5
   12d6a:	dd0c      	ble.n	12d86 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   12d6c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   12d6e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   12d72:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   12d74:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   12d76:	6890      	ldr	r0, [r2, #8]
   12d78:	1a43      	subs	r3, r0, r1
   12d7a:	4258      	negs	r0, r3
}
   12d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   12d80:	4158      	adcs	r0, r3
   12d82:	f7ff bfaf 	b.w	12ce4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   12d86:	429c      	cmp	r4, r3
   12d88:	d0e3      	beq.n	12d52 <move_thread_to_end_of_prio_q+0x32>
   12d8a:	681b      	ldr	r3, [r3, #0]
   12d8c:	e7e0      	b.n	12d50 <move_thread_to_end_of_prio_q+0x30>
   12d8e:	bf00      	nop
   12d90:	20002614 	.word	0x20002614

00012d94 <ready_thread>:
{
   12d94:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   12d96:	f990 300d 	ldrsb.w	r3, [r0, #13]
   12d9a:	7b42      	ldrb	r2, [r0, #13]
   12d9c:	2b00      	cmp	r3, #0
   12d9e:	db29      	blt.n	12df4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   12da0:	06d3      	lsls	r3, r2, #27
   12da2:	d127      	bne.n	12df4 <ready_thread+0x60>
	return node->next != NULL;
   12da4:	6983      	ldr	r3, [r0, #24]
   12da6:	bb2b      	cbnz	r3, 12df4 <ready_thread+0x60>
	return list->head == list;
   12da8:	4913      	ldr	r1, [pc, #76]	; (12df8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   12daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   12dae:	7342      	strb	r2, [r0, #13]
   12db0:	460a      	mov	r2, r1
   12db2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12db6:	4294      	cmp	r4, r2
   12db8:	bf18      	it	ne
   12dba:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   12dbc:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12dbe:	b923      	cbnz	r3, 12dca <ready_thread+0x36>
	node->prev = tail;
   12dc0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   12dc4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   12dc6:	6208      	str	r0, [r1, #32]
}
   12dc8:	e00c      	b.n	12de4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   12dca:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   12dce:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   12dd2:	42b5      	cmp	r5, r6
   12dd4:	d00a      	beq.n	12dec <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   12dd6:	42ae      	cmp	r6, r5
   12dd8:	dd08      	ble.n	12dec <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   12dda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   12ddc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   12de0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   12de2:	6058      	str	r0, [r3, #4]
}
   12de4:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   12de6:	2000      	movs	r0, #0
   12de8:	f7ff bf7c 	b.w	12ce4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   12dec:	42a3      	cmp	r3, r4
   12dee:	d0e7      	beq.n	12dc0 <ready_thread+0x2c>
   12df0:	681b      	ldr	r3, [r3, #0]
   12df2:	e7e4      	b.n	12dbe <ready_thread+0x2a>
}
   12df4:	bc70      	pop	{r4, r5, r6}
   12df6:	4770      	bx	lr
   12df8:	20002614 	.word	0x20002614

00012dfc <unready_thread>:
{
   12dfc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   12dfe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   12e02:	7b43      	ldrb	r3, [r0, #13]
   12e04:	2a00      	cmp	r2, #0
{
   12e06:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   12e08:	da04      	bge.n	12e14 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   12e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12e0e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   12e10:	f005 f97b 	bl	1810a <sys_dlist_remove>
	update_cache(thread == _current);
   12e14:	4b04      	ldr	r3, [pc, #16]	; (12e28 <unready_thread+0x2c>)
   12e16:	6898      	ldr	r0, [r3, #8]
   12e18:	1a43      	subs	r3, r0, r1
   12e1a:	4258      	negs	r0, r3
   12e1c:	4158      	adcs	r0, r3
}
   12e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   12e22:	f7ff bf5f 	b.w	12ce4 <update_cache>
   12e26:	bf00      	nop
   12e28:	20002614 	.word	0x20002614

00012e2c <pend_locked>:
{
   12e2c:	b570      	push	{r4, r5, r6, lr}
   12e2e:	4615      	mov	r5, r2
   12e30:	461c      	mov	r4, r3
   12e32:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   12e34:	f005 f984 	bl	18140 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   12e38:	f1b4 3fff 	cmp.w	r4, #4294967295
   12e3c:	bf08      	it	eq
   12e3e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   12e42:	d008      	beq.n	12e56 <pend_locked+0x2a>
   12e44:	462a      	mov	r2, r5
   12e46:	4623      	mov	r3, r4
   12e48:	f106 0018 	add.w	r0, r6, #24
   12e4c:	4902      	ldr	r1, [pc, #8]	; (12e58 <pend_locked+0x2c>)
}
   12e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12e52:	f000 baa5 	b.w	133a0 <z_add_timeout>
   12e56:	bd70      	pop	{r4, r5, r6, pc}
   12e58:	00018219 	.word	0x00018219

00012e5c <z_time_slice>:
{
   12e5c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   12e5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   12e62:	f3ef 8511 	mrs	r5, BASEPRI
   12e66:	f383 8812 	msr	BASEPRI_MAX, r3
   12e6a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   12e6e:	4b10      	ldr	r3, [pc, #64]	; (12eb0 <z_time_slice+0x54>)
	if (pending_current == curr) {
   12e70:	4a10      	ldr	r2, [pc, #64]	; (12eb4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   12e72:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   12e74:	6810      	ldr	r0, [r2, #0]
   12e76:	42a0      	cmp	r0, r4
   12e78:	d106      	bne.n	12e88 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   12e7a:	f7ff ff0b 	bl	12c94 <z_reset_time_slice>
	__asm__ volatile(
   12e7e:	f385 8811 	msr	BASEPRI, r5
   12e82:	f3bf 8f6f 	isb	sy
}
   12e86:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   12e88:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   12e8a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   12e8c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   12e8e:	4a0a      	ldr	r2, [pc, #40]	; (12eb8 <z_time_slice+0x5c>)
   12e90:	5cd3      	ldrb	r3, [r2, r3]
   12e92:	2b00      	cmp	r3, #0
   12e94:	d0f3      	beq.n	12e7e <z_time_slice+0x22>
   12e96:	4620      	mov	r0, r4
   12e98:	f7ff fece 	bl	12c38 <sliceable>
   12e9c:	2800      	cmp	r0, #0
   12e9e:	d0ee      	beq.n	12e7e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   12ea0:	7b63      	ldrb	r3, [r4, #13]
   12ea2:	06db      	lsls	r3, r3, #27
   12ea4:	d102      	bne.n	12eac <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   12ea6:	4620      	mov	r0, r4
   12ea8:	f7ff ff3a 	bl	12d20 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   12eac:	4620      	mov	r0, r4
   12eae:	e7e4      	b.n	12e7a <z_time_slice+0x1e>
   12eb0:	20002614 	.word	0x20002614
   12eb4:	20002640 	.word	0x20002640
   12eb8:	20003687 	.word	0x20003687

00012ebc <z_pend_curr>:
{
   12ebc:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   12ebe:	480c      	ldr	r0, [pc, #48]	; (12ef0 <z_pend_curr+0x34>)
   12ec0:	4d0c      	ldr	r5, [pc, #48]	; (12ef4 <z_pend_curr+0x38>)
   12ec2:	6886      	ldr	r6, [r0, #8]
   12ec4:	602e      	str	r6, [r5, #0]
{
   12ec6:	460c      	mov	r4, r1
   12ec8:	4611      	mov	r1, r2
   12eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   12ece:	f04f 0640 	mov.w	r6, #64	; 0x40
   12ed2:	f3ef 8511 	mrs	r5, BASEPRI
   12ed6:	f386 8812 	msr	BASEPRI_MAX, r6
   12eda:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   12ede:	6880      	ldr	r0, [r0, #8]
   12ee0:	f7ff ffa4 	bl	12e2c <pend_locked>
	ret = arch_swap(key);
   12ee4:	4620      	mov	r0, r4
}
   12ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12eea:	f7f9 bce9 	b.w	c8c0 <arch_swap>
   12eee:	bf00      	nop
   12ef0:	20002614 	.word	0x20002614
   12ef4:	20002640 	.word	0x20002640

00012ef8 <z_set_prio>:
{
   12ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12efa:	4604      	mov	r4, r0
   12efc:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f00:	f3ef 8611 	mrs	r6, BASEPRI
   12f04:	f383 8812 	msr	BASEPRI_MAX, r3
   12f08:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   12f0c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   12f0e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   12f10:	b249      	sxtb	r1, r1
   12f12:	d119      	bne.n	12f48 <z_set_prio+0x50>
	return node->next != NULL;
   12f14:	6985      	ldr	r5, [r0, #24]
   12f16:	b9bd      	cbnz	r5, 12f48 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   12f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   12f1c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   12f1e:	f005 f8f4 	bl	1810a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   12f22:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   12f24:	4a16      	ldr	r2, [pc, #88]	; (12f80 <z_set_prio+0x88>)
				thread->base.prio = prio;
   12f26:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   12f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
   12f2c:	7343      	strb	r3, [r0, #13]
   12f2e:	4613      	mov	r3, r2
   12f30:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12f34:	4298      	cmp	r0, r3
   12f36:	bf18      	it	ne
   12f38:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   12f3a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12f3c:	b95d      	cbnz	r5, 12f56 <z_set_prio+0x5e>
	node->prev = tail;
   12f3e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   12f42:	6004      	str	r4, [r0, #0]
	list->tail = node;
   12f44:	6214      	str	r4, [r2, #32]
}
   12f46:	e011      	b.n	12f6c <z_set_prio+0x74>
			thread->base.prio = prio;
   12f48:	73a1      	strb	r1, [r4, #14]
   12f4a:	2000      	movs	r0, #0
	__asm__ volatile(
   12f4c:	f386 8811 	msr	BASEPRI, r6
   12f50:	f3bf 8f6f 	isb	sy
}
   12f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   12f56:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   12f5a:	42b9      	cmp	r1, r7
   12f5c:	d00b      	beq.n	12f76 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   12f5e:	428f      	cmp	r7, r1
   12f60:	dd09      	ble.n	12f76 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   12f62:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   12f64:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   12f68:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   12f6a:	606c      	str	r4, [r5, #4]
			update_cache(1);
   12f6c:	2001      	movs	r0, #1
   12f6e:	f7ff feb9 	bl	12ce4 <update_cache>
   12f72:	2001      	movs	r0, #1
   12f74:	e7ea      	b.n	12f4c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   12f76:	42a8      	cmp	r0, r5
   12f78:	d0e1      	beq.n	12f3e <z_set_prio+0x46>
   12f7a:	682d      	ldr	r5, [r5, #0]
   12f7c:	e7de      	b.n	12f3c <z_set_prio+0x44>
   12f7e:	bf00      	nop
   12f80:	20002614 	.word	0x20002614

00012f84 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   12f84:	b949      	cbnz	r1, 12f9a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12f86:	f3ef 8005 	mrs	r0, IPSR
   12f8a:	b930      	cbnz	r0, 12f9a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   12f8c:	4b05      	ldr	r3, [pc, #20]	; (12fa4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   12f8e:	699a      	ldr	r2, [r3, #24]
   12f90:	689b      	ldr	r3, [r3, #8]
   12f92:	429a      	cmp	r2, r3
   12f94:	d001      	beq.n	12f9a <z_reschedule+0x16>
   12f96:	f7f9 bc93 	b.w	c8c0 <arch_swap>
   12f9a:	f381 8811 	msr	BASEPRI, r1
   12f9e:	f3bf 8f6f 	isb	sy
}
   12fa2:	4770      	bx	lr
   12fa4:	20002614 	.word	0x20002614

00012fa8 <z_sched_start>:
{
   12fa8:	b510      	push	{r4, lr}
	__asm__ volatile(
   12faa:	f04f 0240 	mov.w	r2, #64	; 0x40
   12fae:	f3ef 8411 	mrs	r4, BASEPRI
   12fb2:	f382 8812 	msr	BASEPRI_MAX, r2
   12fb6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   12fba:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   12fbc:	0751      	lsls	r1, r2, #29
   12fbe:	d404      	bmi.n	12fca <z_sched_start+0x22>
	__asm__ volatile(
   12fc0:	f384 8811 	msr	BASEPRI, r4
   12fc4:	f3bf 8f6f 	isb	sy
}
   12fc8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12fca:	f022 0204 	bic.w	r2, r2, #4
   12fce:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   12fd0:	f7ff fee0 	bl	12d94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   12fd4:	4621      	mov	r1, r4
   12fd6:	4802      	ldr	r0, [pc, #8]	; (12fe0 <z_sched_start+0x38>)
}
   12fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   12fdc:	f7ff bfd2 	b.w	12f84 <z_reschedule>
   12fe0:	20003688 	.word	0x20003688

00012fe4 <z_impl_k_thread_suspend>:
{
   12fe4:	b570      	push	{r4, r5, r6, lr}
   12fe6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   12fe8:	3018      	adds	r0, #24
   12fea:	f005 f9ad 	bl	18348 <z_abort_timeout>
	__asm__ volatile(
   12fee:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ff2:	f3ef 8611 	mrs	r6, BASEPRI
   12ff6:	f383 8812 	msr	BASEPRI_MAX, r3
   12ffa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   12ffe:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   13002:	7b63      	ldrb	r3, [r4, #13]
   13004:	2a00      	cmp	r2, #0
   13006:	da05      	bge.n	13014 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1300c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1300e:	4620      	mov	r0, r4
   13010:	f005 f87b 	bl	1810a <sys_dlist_remove>
		update_cache(thread == _current);
   13014:	4d0b      	ldr	r5, [pc, #44]	; (13044 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13016:	7b63      	ldrb	r3, [r4, #13]
   13018:	68a8      	ldr	r0, [r5, #8]
   1301a:	f043 0310 	orr.w	r3, r3, #16
   1301e:	7363      	strb	r3, [r4, #13]
   13020:	1b03      	subs	r3, r0, r4
   13022:	4258      	negs	r0, r3
   13024:	4158      	adcs	r0, r3
   13026:	f7ff fe5d 	bl	12ce4 <update_cache>
	__asm__ volatile(
   1302a:	f386 8811 	msr	BASEPRI, r6
   1302e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   13032:	68ab      	ldr	r3, [r5, #8]
   13034:	42a3      	cmp	r3, r4
   13036:	d103      	bne.n	13040 <z_impl_k_thread_suspend+0x5c>
}
   13038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1303c:	f005 b947 	b.w	182ce <z_reschedule_unlocked>
}
   13040:	bd70      	pop	{r4, r5, r6, pc}
   13042:	bf00      	nop
   13044:	20002614 	.word	0x20002614

00013048 <k_sched_lock>:
	__asm__ volatile(
   13048:	f04f 0340 	mov.w	r3, #64	; 0x40
   1304c:	f3ef 8111 	mrs	r1, BASEPRI
   13050:	f383 8812 	msr	BASEPRI_MAX, r3
   13054:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   13058:	4b04      	ldr	r3, [pc, #16]	; (1306c <k_sched_lock+0x24>)
   1305a:	689a      	ldr	r2, [r3, #8]
   1305c:	7bd3      	ldrb	r3, [r2, #15]
   1305e:	3b01      	subs	r3, #1
   13060:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   13062:	f381 8811 	msr	BASEPRI, r1
   13066:	f3bf 8f6f 	isb	sy
}
   1306a:	4770      	bx	lr
   1306c:	20002614 	.word	0x20002614

00013070 <k_sched_unlock>:
{
   13070:	b510      	push	{r4, lr}
	__asm__ volatile(
   13072:	f04f 0340 	mov.w	r3, #64	; 0x40
   13076:	f3ef 8411 	mrs	r4, BASEPRI
   1307a:	f383 8812 	msr	BASEPRI_MAX, r3
   1307e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   13082:	4b08      	ldr	r3, [pc, #32]	; (130a4 <k_sched_unlock+0x34>)
   13084:	689a      	ldr	r2, [r3, #8]
   13086:	7bd3      	ldrb	r3, [r2, #15]
   13088:	3301      	adds	r3, #1
   1308a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1308c:	2000      	movs	r0, #0
   1308e:	f7ff fe29 	bl	12ce4 <update_cache>
	__asm__ volatile(
   13092:	f384 8811 	msr	BASEPRI, r4
   13096:	f3bf 8f6f 	isb	sy
}
   1309a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1309e:	f005 b916 	b.w	182ce <z_reschedule_unlocked>
   130a2:	bf00      	nop
   130a4:	20002614 	.word	0x20002614

000130a8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   130a8:	4b02      	ldr	r3, [pc, #8]	; (130b4 <z_sched_init+0xc>)
   130aa:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   130ae:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   130b2:	4770      	bx	lr
   130b4:	20002614 	.word	0x20002614

000130b8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   130b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   130ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   130be:	f3ef 8511 	mrs	r5, BASEPRI
   130c2:	f383 8812 	msr	BASEPRI_MAX, r3
   130c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   130ca:	4919      	ldr	r1, [pc, #100]	; (13130 <z_impl_k_yield+0x78>)
   130cc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   130ce:	7b43      	ldrb	r3, [r0, #13]
   130d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   130d4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   130d6:	f005 f818 	bl	1810a <sys_dlist_remove>
	}
	queue_thread(_current);
   130da:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   130dc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   130de:	4608      	mov	r0, r1
   130e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   130e4:	735a      	strb	r2, [r3, #13]
   130e6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   130ea:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   130ec:	4282      	cmp	r2, r0
   130ee:	bf08      	it	eq
   130f0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   130f2:	b922      	cbnz	r2, 130fe <z_impl_k_yield+0x46>
	node->prev = tail;
   130f4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   130f8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   130fa:	620b      	str	r3, [r1, #32]
}
   130fc:	e00c      	b.n	13118 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   130fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   13102:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   13106:	42be      	cmp	r6, r7
   13108:	d00e      	beq.n	13128 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1310a:	42b7      	cmp	r7, r6
   1310c:	dd0c      	ble.n	13128 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1310e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   13110:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   13114:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   13116:	6053      	str	r3, [r2, #4]
	update_cache(1);
   13118:	2001      	movs	r0, #1
   1311a:	f7ff fde3 	bl	12ce4 <update_cache>
   1311e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   13120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   13124:	f7f9 bbcc 	b.w	c8c0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   13128:	42a2      	cmp	r2, r4
   1312a:	d0e3      	beq.n	130f4 <z_impl_k_yield+0x3c>
   1312c:	6812      	ldr	r2, [r2, #0]
   1312e:	e7e0      	b.n	130f2 <z_impl_k_yield+0x3a>
   13130:	20002614 	.word	0x20002614

00013134 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   13134:	ea50 0301 	orrs.w	r3, r0, r1
{
   13138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1313c:	4605      	mov	r5, r0
   1313e:	460e      	mov	r6, r1
	if (ticks == 0) {
   13140:	d103      	bne.n	1314a <z_tick_sleep+0x16>
	z_impl_k_yield();
   13142:	f7ff ffb9 	bl	130b8 <z_impl_k_yield>
		k_yield();
		return 0;
   13146:	2000      	movs	r0, #0
   13148:	e02c      	b.n	131a4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1314a:	1c83      	adds	r3, r0, #2
   1314c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   13150:	db2a      	blt.n	131a8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   13152:	f005 f91f 	bl	18394 <sys_clock_tick_get_32>
   13156:	182c      	adds	r4, r5, r0
   13158:	f04f 0340 	mov.w	r3, #64	; 0x40
   1315c:	f3ef 8811 	mrs	r8, BASEPRI
   13160:	f383 8812 	msr	BASEPRI_MAX, r3
   13164:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   13168:	4f11      	ldr	r7, [pc, #68]	; (131b0 <z_tick_sleep+0x7c>)
   1316a:	4b12      	ldr	r3, [pc, #72]	; (131b4 <z_tick_sleep+0x80>)
   1316c:	68b8      	ldr	r0, [r7, #8]
   1316e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   13170:	f7ff fe44 	bl	12dfc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   13174:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   13176:	4910      	ldr	r1, [pc, #64]	; (131b8 <z_tick_sleep+0x84>)
   13178:	462a      	mov	r2, r5
   1317a:	4633      	mov	r3, r6
   1317c:	3018      	adds	r0, #24
   1317e:	f000 f90f 	bl	133a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   13182:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13184:	7b53      	ldrb	r3, [r2, #13]
   13186:	f043 0310 	orr.w	r3, r3, #16
   1318a:	7353      	strb	r3, [r2, #13]
   1318c:	4640      	mov	r0, r8
   1318e:	f7f9 fb97 	bl	c8c0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   13192:	f005 f8ff 	bl	18394 <sys_clock_tick_get_32>
   13196:	1a20      	subs	r0, r4, r0
   13198:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1319c:	2801      	cmp	r0, #1
   1319e:	f173 0300 	sbcs.w	r3, r3, #0
   131a2:	dbd0      	blt.n	13146 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   131a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   131a8:	f06f 0401 	mvn.w	r4, #1
   131ac:	1a24      	subs	r4, r4, r0
   131ae:	e7d3      	b.n	13158 <z_tick_sleep+0x24>
   131b0:	20002614 	.word	0x20002614
   131b4:	20002640 	.word	0x20002640
   131b8:	00018219 	.word	0x00018219

000131bc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   131bc:	f1b1 3fff 	cmp.w	r1, #4294967295
   131c0:	bf08      	it	eq
   131c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   131c6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   131c8:	d106      	bne.n	131d8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   131ca:	4b08      	ldr	r3, [pc, #32]	; (131ec <z_impl_k_sleep+0x30>)
   131cc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   131ce:	f7ff ff09 	bl	12fe4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   131d2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   131d6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   131d8:	f7ff ffac 	bl	13134 <z_tick_sleep>
   131dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   131e0:	fb80 0303 	smull	r0, r3, r0, r3
   131e4:	0bc0      	lsrs	r0, r0, #15
   131e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   131ea:	e7f4      	b.n	131d6 <z_impl_k_sleep+0x1a>
   131ec:	20002614 	.word	0x20002614

000131f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   131f0:	4b01      	ldr	r3, [pc, #4]	; (131f8 <z_impl_z_current_get+0x8>)
   131f2:	6898      	ldr	r0, [r3, #8]
   131f4:	4770      	bx	lr
   131f6:	bf00      	nop
   131f8:	20002614 	.word	0x20002614

000131fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   131fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13200:	4604      	mov	r4, r0
   13202:	f04f 0340 	mov.w	r3, #64	; 0x40
   13206:	f3ef 8611 	mrs	r6, BASEPRI
   1320a:	f383 8812 	msr	BASEPRI_MAX, r3
   1320e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   13212:	7b03      	ldrb	r3, [r0, #12]
   13214:	07d9      	lsls	r1, r3, #31
   13216:	d50b      	bpl.n	13230 <z_thread_abort+0x34>
	__asm__ volatile(
   13218:	f386 8811 	msr	BASEPRI, r6
   1321c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   13220:	4040      	eors	r0, r0
   13222:	f380 8811 	msr	BASEPRI, r0
   13226:	f04f 0004 	mov.w	r0, #4
   1322a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   13230:	7b43      	ldrb	r3, [r0, #13]
   13232:	071a      	lsls	r2, r3, #28
   13234:	d504      	bpl.n	13240 <z_thread_abort+0x44>
   13236:	f386 8811 	msr	BASEPRI, r6
   1323a:	f3bf 8f6f 	isb	sy
   1323e:	e7f5      	b.n	1322c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   13240:	f023 0220 	bic.w	r2, r3, #32
   13244:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   13248:	09d2      	lsrs	r2, r2, #7
   1324a:	d120      	bne.n	1328e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1324c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1324e:	68a3      	ldr	r3, [r4, #8]
   13250:	b113      	cbz	r3, 13258 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   13252:	4620      	mov	r0, r4
   13254:	f004 ff61 	bl	1811a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   13258:	f104 0018 	add.w	r0, r4, #24
   1325c:	f005 f874 	bl	18348 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   13260:	f104 0758 	add.w	r7, r4, #88	; 0x58
   13264:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   13268:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1326a:	42bd      	cmp	r5, r7
   1326c:	d000      	beq.n	13270 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1326e:	b9b5      	cbnz	r5, 1329e <z_thread_abort+0xa2>
		update_cache(1);
   13270:	2001      	movs	r0, #1
   13272:	f7ff fd37 	bl	12ce4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   13276:	4b10      	ldr	r3, [pc, #64]	; (132b8 <z_thread_abort+0xbc>)
   13278:	689b      	ldr	r3, [r3, #8]
   1327a:	42a3      	cmp	r3, r4
   1327c:	d1db      	bne.n	13236 <z_thread_abort+0x3a>
   1327e:	f3ef 8305 	mrs	r3, IPSR
   13282:	2b00      	cmp	r3, #0
   13284:	d1d7      	bne.n	13236 <z_thread_abort+0x3a>
   13286:	4630      	mov	r0, r6
   13288:	f7f9 fb1a 	bl	c8c0 <arch_swap>
	return ret;
   1328c:	e7d3      	b.n	13236 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1328e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   13292:	f043 0308 	orr.w	r3, r3, #8
   13296:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   13298:	f004 ff37 	bl	1810a <sys_dlist_remove>
}
   1329c:	e7d7      	b.n	1324e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1329e:	4628      	mov	r0, r5
   132a0:	f004 ff3b 	bl	1811a <unpend_thread_no_timeout>
   132a4:	f105 0018 	add.w	r0, r5, #24
   132a8:	f005 f84e 	bl	18348 <z_abort_timeout>
   132ac:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   132b0:	4628      	mov	r0, r5
   132b2:	f7ff fd6f 	bl	12d94 <ready_thread>
   132b6:	e7d7      	b.n	13268 <z_thread_abort+0x6c>
   132b8:	20002614 	.word	0x20002614

000132bc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   132bc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   132be:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   132c2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   132c4:	e9cd 6700 	strd	r6, r7, [sp]
   132c8:	f7ff fdf8 	bl	12ebc <z_pend_curr>

	if (data != NULL) {
   132cc:	b11c      	cbz	r4, 132d6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   132ce:	4b03      	ldr	r3, [pc, #12]	; (132dc <z_sched_wait+0x20>)
   132d0:	689b      	ldr	r3, [r3, #8]
   132d2:	695b      	ldr	r3, [r3, #20]
   132d4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   132d6:	b002      	add	sp, #8
   132d8:	bdd0      	pop	{r4, r6, r7, pc}
   132da:	bf00      	nop
   132dc:	20002614 	.word	0x20002614

000132e0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   132e0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   132e2:	4806      	ldr	r0, [pc, #24]	; (132fc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   132e4:	4a06      	ldr	r2, [pc, #24]	; (13300 <z_data_copy+0x20>)
   132e6:	4907      	ldr	r1, [pc, #28]	; (13304 <z_data_copy+0x24>)
   132e8:	1a12      	subs	r2, r2, r0
   132ea:	f004 fcc0 	bl	17c6e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   132ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   132f2:	4a05      	ldr	r2, [pc, #20]	; (13308 <z_data_copy+0x28>)
   132f4:	4905      	ldr	r1, [pc, #20]	; (1330c <z_data_copy+0x2c>)
   132f6:	4806      	ldr	r0, [pc, #24]	; (13310 <z_data_copy+0x30>)
   132f8:	f004 bcb9 	b.w	17c6e <z_early_memcpy>
   132fc:	20000000 	.word	0x20000000
   13300:	200006ac 	.word	0x200006ac
   13304:	0001a288 	.word	0x0001a288
   13308:	00000000 	.word	0x00000000
   1330c:	0001a288 	.word	0x0001a288
   13310:	20000000 	.word	0x20000000

00013314 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   13314:	4b03      	ldr	r3, [pc, #12]	; (13324 <elapsed+0x10>)
   13316:	681b      	ldr	r3, [r3, #0]
   13318:	b90b      	cbnz	r3, 1331e <elapsed+0xa>
   1331a:	f7fd b95b 	b.w	105d4 <sys_clock_elapsed>
}
   1331e:	2000      	movs	r0, #0
   13320:	4770      	bx	lr
   13322:	bf00      	nop
   13324:	2000264c 	.word	0x2000264c

00013328 <next_timeout>:

static int32_t next_timeout(void)
{
   13328:	b510      	push	{r4, lr}
	return list->head == list;
   1332a:	4b0e      	ldr	r3, [pc, #56]	; (13364 <next_timeout+0x3c>)
   1332c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1332e:	429c      	cmp	r4, r3
   13330:	d104      	bne.n	1333c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   13332:	f7ff ffef 	bl	13314 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   13336:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   1333a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1333c:	f7ff ffea 	bl	13314 <elapsed>
	if ((to == NULL) ||
   13340:	2c00      	cmp	r4, #0
   13342:	d0f8      	beq.n	13336 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   13344:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   13348:	1a1b      	subs	r3, r3, r0
   1334a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1334e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13352:	f172 0100 	sbcs.w	r1, r2, #0
   13356:	daee      	bge.n	13336 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   13358:	2a00      	cmp	r2, #0
   1335a:	bfac      	ite	ge
   1335c:	4618      	movge	r0, r3
   1335e:	2000      	movlt	r0, #0
	return ret;
   13360:	e7eb      	b.n	1333a <next_timeout+0x12>
   13362:	bf00      	nop
   13364:	200004a4 	.word	0x200004a4

00013368 <remove_timeout>:
{
   13368:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1336a:	b170      	cbz	r0, 1338a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1336c:	4b0b      	ldr	r3, [pc, #44]	; (1339c <remove_timeout+0x34>)
   1336e:	685b      	ldr	r3, [r3, #4]
   13370:	4298      	cmp	r0, r3
   13372:	d00a      	beq.n	1338a <remove_timeout+0x22>
   13374:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   13376:	b143      	cbz	r3, 1338a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   13378:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1337c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   13380:	1912      	adds	r2, r2, r4
   13382:	eb41 0105 	adc.w	r1, r1, r5
   13386:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1338a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1338e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13390:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13392:	2300      	movs	r3, #0
	node->prev = NULL;
   13394:	e9c0 3300 	strd	r3, r3, [r0]
}
   13398:	bd30      	pop	{r4, r5, pc}
   1339a:	bf00      	nop
   1339c:	200004a4 	.word	0x200004a4

000133a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   133a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   133a4:	bf08      	it	eq
   133a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   133aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133ac:	4604      	mov	r4, r0
   133ae:	461d      	mov	r5, r3
   133b0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   133b2:	d05c      	beq.n	1346e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   133b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   133b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   133ba:	f3ef 8711 	mrs	r7, BASEPRI
   133be:	f383 8812 	msr	BASEPRI_MAX, r3
   133c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   133c6:	3201      	adds	r2, #1
   133c8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   133cc:	da24      	bge.n	13418 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   133ce:	492d      	ldr	r1, [pc, #180]	; (13484 <z_add_timeout+0xe4>)
   133d0:	e9d1 2000 	ldrd	r2, r0, [r1]
   133d4:	f06f 0301 	mvn.w	r3, #1
   133d8:	1a9b      	subs	r3, r3, r2
   133da:	f04f 32ff 	mov.w	r2, #4294967295
   133de:	eb62 0000 	sbc.w	r0, r2, r0
   133e2:	1b9e      	subs	r6, r3, r6
   133e4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   133e8:	2e01      	cmp	r6, #1
   133ea:	f170 0300 	sbcs.w	r3, r0, #0
   133ee:	da01      	bge.n	133f4 <z_add_timeout+0x54>
   133f0:	2601      	movs	r6, #1
   133f2:	2000      	movs	r0, #0
   133f4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   133f8:	4e23      	ldr	r6, [pc, #140]	; (13488 <z_add_timeout+0xe8>)
   133fa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   133fe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13400:	45b4      	cmp	ip, r6
   13402:	bf08      	it	eq
   13404:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   13408:	f1bc 0f00 	cmp.w	ip, #0
   1340c:	d10d      	bne.n	1342a <z_add_timeout+0x8a>
	node->prev = tail;
   1340e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   13412:	602c      	str	r4, [r5, #0]
	list->tail = node;
   13414:	6074      	str	r4, [r6, #4]
}
   13416:	e01c      	b.n	13452 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   13418:	f7ff ff7c 	bl	13314 <elapsed>
   1341c:	3601      	adds	r6, #1
   1341e:	f145 0500 	adc.w	r5, r5, #0
   13422:	1836      	adds	r6, r6, r0
   13424:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   13428:	e7e4      	b.n	133f4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1342a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1342e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   13432:	4293      	cmp	r3, r2
   13434:	eb71 0e00 	sbcs.w	lr, r1, r0
   13438:	da1a      	bge.n	13470 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   1343a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1343c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   13440:	eb60 0001 	sbc.w	r0, r0, r1
   13444:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   13448:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1344c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1344e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   13452:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13454:	42b3      	cmp	r3, r6
   13456:	d006      	beq.n	13466 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   13458:	429c      	cmp	r4, r3
   1345a:	d104      	bne.n	13466 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   1345c:	f7ff ff64 	bl	13328 <next_timeout>
   13460:	2100      	movs	r1, #0
   13462:	f7fd f885 	bl	10570 <sys_clock_set_timeout>
	__asm__ volatile(
   13466:	f387 8811 	msr	BASEPRI, r7
   1346a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1346e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   13470:	1a9b      	subs	r3, r3, r2
   13472:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13476:	45ac      	cmp	ip, r5
   13478:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1347c:	d0c7      	beq.n	1340e <z_add_timeout+0x6e>
   1347e:	f8dc c000 	ldr.w	ip, [ip]
   13482:	e7c1      	b.n	13408 <z_add_timeout+0x68>
   13484:	20001dd0 	.word	0x20001dd0
   13488:	200004a4 	.word	0x200004a4

0001348c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   1348c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   13490:	f04f 0340 	mov.w	r3, #64	; 0x40
   13494:	f3ef 8c11 	mrs	ip, BASEPRI
   13498:	f383 8812 	msr	BASEPRI_MAX, r3
   1349c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   134a0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13554 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   134a4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 13558 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   134a8:	4f2c      	ldr	r7, [pc, #176]	; (1355c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   134aa:	f8c9 0000 	str.w	r0, [r9]
   134ae:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   134b2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   134b4:	4550      	cmp	r0, sl
   134b6:	bf08      	it	eq
   134b8:	2000      	moveq	r0, #0
   134ba:	2500      	movs	r5, #0
		curr_tick += dt;
   134bc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   134c0:	f8d9 3000 	ldr.w	r3, [r9]
   134c4:	46e0      	mov	r8, ip
   134c6:	b380      	cbz	r0, 1352a <sys_clock_announce+0x9e>
   134c8:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   134cc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   134d0:	42b3      	cmp	r3, r6
   134d2:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   134d6:	da05      	bge.n	134e4 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   134d8:	1af6      	subs	r6, r6, r3
   134da:	eb6c 040e 	sbc.w	r4, ip, lr
   134de:	e9c0 6404 	strd	r6, r4, [r0, #16]
   134e2:	e022      	b.n	1352a <sys_clock_announce+0x9e>
		curr_tick += dt;
   134e4:	18b2      	adds	r2, r6, r2
   134e6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   134ea:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   134ee:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   134f2:	f7ff ff39 	bl	13368 <remove_timeout>
	__asm__ volatile(
   134f6:	f388 8811 	msr	BASEPRI, r8
   134fa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   134fe:	6883      	ldr	r3, [r0, #8]
   13500:	4798      	blx	r3
	__asm__ volatile(
   13502:	f04f 0340 	mov.w	r3, #64	; 0x40
   13506:	f3ef 8811 	mrs	r8, BASEPRI
   1350a:	f383 8812 	msr	BASEPRI_MAX, r3
   1350e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   13512:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   13516:	f8da 0000 	ldr.w	r0, [sl]
   1351a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1351c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   1351e:	46c4      	mov	ip, r8
   13520:	f8c9 3000 	str.w	r3, [r9]
   13524:	d1ca      	bne.n	134bc <sys_clock_announce+0x30>
		curr_tick += dt;
   13526:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   1352a:	189a      	adds	r2, r3, r2
   1352c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   13530:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   13532:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   13536:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   1353a:	f7ff fef5 	bl	13328 <next_timeout>
   1353e:	4621      	mov	r1, r4
   13540:	f7fd f816 	bl	10570 <sys_clock_set_timeout>
	__asm__ volatile(
   13544:	f388 8811 	msr	BASEPRI, r8
   13548:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   1354c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   13550:	f7ff bc84 	b.w	12e5c <z_time_slice>
   13554:	200004a4 	.word	0x200004a4
   13558:	2000264c 	.word	0x2000264c
   1355c:	20001dd0 	.word	0x20001dd0

00013560 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   13560:	b510      	push	{r4, lr}
	__asm__ volatile(
   13562:	f04f 0340 	mov.w	r3, #64	; 0x40
   13566:	f3ef 8411 	mrs	r4, BASEPRI
   1356a:	f383 8812 	msr	BASEPRI_MAX, r3
   1356e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   13572:	f7ff fecf 	bl	13314 <elapsed>
   13576:	4a06      	ldr	r2, [pc, #24]	; (13590 <sys_clock_tick_get+0x30>)
   13578:	4603      	mov	r3, r0
   1357a:	e9d2 0100 	ldrd	r0, r1, [r2]
   1357e:	1818      	adds	r0, r3, r0
   13580:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   13584:	f384 8811 	msr	BASEPRI, r4
   13588:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1358c:	bd10      	pop	{r4, pc}
   1358e:	bf00      	nop
   13590:	20001dd0 	.word	0x20001dd0

00013594 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   13594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13596:	4604      	mov	r4, r0
	__asm__ volatile(
   13598:	f04f 0340 	mov.w	r3, #64	; 0x40
   1359c:	f3ef 8711 	mrs	r7, BASEPRI
   135a0:	f383 8812 	msr	BASEPRI_MAX, r3
   135a4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   135a8:	6802      	ldr	r2, [r0, #0]
   135aa:	b122      	cbz	r2, 135b6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   135ac:	f387 8811 	msr	BASEPRI, r7
   135b0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   135b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   135b6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   135ba:	1c58      	adds	r0, r3, #1
   135bc:	f146 0100 	adc.w	r1, r6, #0
   135c0:	2802      	cmp	r0, #2
   135c2:	f171 0100 	sbcs.w	r1, r1, #0
   135c6:	d327      	bcc.n	13618 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   135c8:	2b01      	cmp	r3, #1
   135ca:	f176 0100 	sbcs.w	r1, r6, #0
   135ce:	bfbc      	itt	lt
   135d0:	2301      	movlt	r3, #1
   135d2:	4616      	movlt	r6, r2
   135d4:	1e5d      	subs	r5, r3, #1
   135d6:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   135da:	f004 fedf 	bl	1839c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   135de:	3001      	adds	r0, #1
   135e0:	f141 0100 	adc.w	r1, r1, #0
   135e4:	1940      	adds	r0, r0, r5
   135e6:	eb46 0101 	adc.w	r1, r6, r1
   135ea:	2801      	cmp	r0, #1
   135ec:	f171 0100 	sbcs.w	r1, r1, #0
   135f0:	db3a      	blt.n	13668 <z_timer_expiration_handler+0xd4>
   135f2:	f004 fed3 	bl	1839c <z_impl_k_uptime_ticks>
   135f6:	3001      	adds	r0, #1
   135f8:	f141 0100 	adc.w	r1, r1, #0
   135fc:	f06f 0201 	mvn.w	r2, #1
   13600:	1940      	adds	r0, r0, r5
   13602:	eb46 0301 	adc.w	r3, r6, r1
   13606:	1a12      	subs	r2, r2, r0
   13608:	f04f 31ff 	mov.w	r1, #4294967295
   1360c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   13610:	4918      	ldr	r1, [pc, #96]	; (13674 <z_timer_expiration_handler+0xe0>)
   13612:	4620      	mov	r0, r4
   13614:	f7ff fec4 	bl	133a0 <z_add_timeout>
	timer->status += 1U;
   13618:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1361a:	3301      	adds	r3, #1
   1361c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   1361e:	6a23      	ldr	r3, [r4, #32]
   13620:	b173      	cbz	r3, 13640 <z_timer_expiration_handler+0xac>
   13622:	f387 8811 	msr	BASEPRI, r7
   13626:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   1362a:	6a23      	ldr	r3, [r4, #32]
   1362c:	4620      	mov	r0, r4
   1362e:	4798      	blx	r3
	__asm__ volatile(
   13630:	f04f 0340 	mov.w	r3, #64	; 0x40
   13634:	f3ef 8711 	mrs	r7, BASEPRI
   13638:	f383 8812 	msr	BASEPRI_MAX, r3
   1363c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   13640:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13644:	42a5      	cmp	r5, r4
   13646:	d0b1      	beq.n	135ac <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   13648:	2d00      	cmp	r5, #0
   1364a:	d0af      	beq.n	135ac <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   1364c:	4628      	mov	r0, r5
   1364e:	f004 fdaf 	bl	181b0 <z_unpend_thread_no_timeout>
   13652:	2300      	movs	r3, #0
   13654:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   13656:	f387 8811 	msr	BASEPRI, r7
   1365a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1365e:	4628      	mov	r0, r5
}
   13660:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   13664:	f004 bd94 	b.w	18190 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   13668:	f06f 0201 	mvn.w	r2, #1
   1366c:	f04f 33ff 	mov.w	r3, #4294967295
   13670:	e7ce      	b.n	13610 <z_timer_expiration_handler+0x7c>
   13672:	bf00      	nop
   13674:	00013595 	.word	0x00013595

00013678 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   13678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1367c:	f1b3 3fff 	cmp.w	r3, #4294967295
   13680:	bf08      	it	eq
   13682:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   13686:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1368a:	4605      	mov	r5, r0
   1368c:	461c      	mov	r4, r3
   1368e:	4691      	mov	r9, r2
   13690:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   13692:	d01c      	beq.n	136ce <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   13694:	1c53      	adds	r3, r2, #1
   13696:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   1369a:	db09      	blt.n	136b0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1369c:	2a01      	cmp	r2, #1
   1369e:	f174 0300 	sbcs.w	r3, r4, #0
   136a2:	bfbc      	itt	lt
   136a4:	2201      	movlt	r2, #1
   136a6:	2400      	movlt	r4, #0
   136a8:	f112 39ff 	adds.w	r9, r2, #4294967295
   136ac:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   136b0:	4628      	mov	r0, r5
   136b2:	f004 fe49 	bl	18348 <z_abort_timeout>
	timer->period = period;
   136b6:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   136ba:	2300      	movs	r3, #0
   136bc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   136be:	464a      	mov	r2, r9
   136c0:	4643      	mov	r3, r8
   136c2:	4628      	mov	r0, r5
   136c4:	4903      	ldr	r1, [pc, #12]	; (136d4 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   136c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   136ca:	f7ff be69 	b.w	133a0 <z_add_timeout>
}
   136ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136d2:	bf00      	nop
   136d4:	00013595 	.word	0x00013595

000136d8 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   136d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   136dc:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   136de:	4b29      	ldr	r3, [pc, #164]	; (13784 <z_impl_k_poll+0xac>)
   136e0:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   136e2:	2301      	movs	r3, #1
   136e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   136e8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   136ec:	ea52 0305 	orrs.w	r3, r2, r5
{
   136f0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   136f2:	bf0c      	ite	eq
   136f4:	2301      	moveq	r3, #1
   136f6:	2300      	movne	r3, #0
   136f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   136fc:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   136fe:	f004 fecf 	bl	184a0 <register_events>
   13702:	4681      	mov	r9, r0
	__asm__ volatile(
   13704:	f04f 0340 	mov.w	r3, #64	; 0x40
   13708:	f3ef 8a11 	mrs	sl, BASEPRI
   1370c:	f383 8812 	msr	BASEPRI_MAX, r3
   13710:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   13714:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   13718:	b964      	cbnz	r4, 13734 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1371a:	4601      	mov	r1, r0
   1371c:	4652      	mov	r2, sl
   1371e:	4640      	mov	r0, r8
   13720:	f004 ff8f 	bl	18642 <clear_event_registrations>
	__asm__ volatile(
   13724:	f38a 8811 	msr	BASEPRI, sl
   13728:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1372c:	4620      	mov	r0, r4
   1372e:	b002      	add	sp, #8
   13730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   13734:	2300      	movs	r3, #0
   13736:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1373a:	ea56 0305 	orrs.w	r3, r6, r5
   1373e:	d106      	bne.n	1374e <z_impl_k_poll+0x76>
   13740:	f38a 8811 	msr	BASEPRI, sl
   13744:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   13748:	f06f 040a 	mvn.w	r4, #10
   1374c:	e7ee      	b.n	1372c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1374e:	e9cd 6500 	strd	r6, r5, [sp]
   13752:	4a0d      	ldr	r2, [pc, #52]	; (13788 <z_impl_k_poll+0xb0>)
   13754:	480d      	ldr	r0, [pc, #52]	; (1378c <z_impl_k_poll+0xb4>)
   13756:	4651      	mov	r1, sl
   13758:	f7ff fbb0 	bl	12ebc <z_pend_curr>
   1375c:	4604      	mov	r4, r0
	__asm__ volatile(
   1375e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13762:	f3ef 8511 	mrs	r5, BASEPRI
   13766:	f383 8812 	msr	BASEPRI_MAX, r3
   1376a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1376e:	462a      	mov	r2, r5
   13770:	4649      	mov	r1, r9
   13772:	4640      	mov	r0, r8
   13774:	f004 ff65 	bl	18642 <clear_event_registrations>
	__asm__ volatile(
   13778:	f385 8811 	msr	BASEPRI, r5
   1377c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   13780:	e7d4      	b.n	1372c <z_impl_k_poll+0x54>
   13782:	bf00      	nop
   13784:	20002614 	.word	0x20002614
   13788:	200004ac 	.word	0x200004ac
   1378c:	20003688 	.word	0x20003688

00013790 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   13790:	b538      	push	{r3, r4, r5, lr}
   13792:	4603      	mov	r3, r0
	__asm__ volatile(
   13794:	f04f 0240 	mov.w	r2, #64	; 0x40
   13798:	f3ef 8511 	mrs	r5, BASEPRI
   1379c:	f382 8812 	msr	BASEPRI_MAX, r2
   137a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   137a4:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   137a6:	2101      	movs	r1, #1
   137a8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   137aa:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   137ac:	4283      	cmp	r3, r0
   137ae:	d106      	bne.n	137be <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   137b0:	f385 8811 	msr	BASEPRI, r5
   137b4:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   137b8:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   137ba:	4620      	mov	r0, r4
   137bc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   137be:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   137c2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   137c4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   137c6:	2300      	movs	r3, #0
	node->prev = NULL;
   137c8:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   137cc:	f004 fedf 	bl	1858e <signal_poll_event>
	z_reschedule(&lock, key);
   137d0:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   137d2:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   137d4:	4801      	ldr	r0, [pc, #4]	; (137dc <z_impl_k_poll_signal_raise+0x4c>)
   137d6:	f7ff fbd5 	bl	12f84 <z_reschedule>
	return rc;
   137da:	e7ee      	b.n	137ba <z_impl_k_poll_signal_raise+0x2a>
   137dc:	20003688 	.word	0x20003688

000137e0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   137e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   137e2:	4606      	mov	r6, r0
   137e4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   137e6:	f004 fb03 	bl	17df0 <k_is_in_isr>
   137ea:	b978      	cbnz	r0, 1380c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   137ec:	4b0b      	ldr	r3, [pc, #44]	; (1381c <z_thread_aligned_alloc+0x3c>)
   137ee:	689b      	ldr	r3, [r3, #8]
   137f0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   137f2:	b17c      	cbz	r4, 13814 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   137f4:	1d2a      	adds	r2, r5, #4
   137f6:	d209      	bcs.n	1380c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   137f8:	2000      	movs	r0, #0
   137fa:	2100      	movs	r1, #0
   137fc:	e9cd 0100 	strd	r0, r1, [sp]
   13800:	f046 0104 	orr.w	r1, r6, #4
   13804:	4620      	mov	r0, r4
   13806:	f004 fa3c 	bl	17c82 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1380a:	b908      	cbnz	r0, 13810 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1380c:	2400      	movs	r4, #0
	}

	return ret;
   1380e:	e001      	b.n	13814 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   13810:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   13812:	1d04      	adds	r4, r0, #4
}
   13814:	4620      	mov	r0, r4
   13816:	b002      	add	sp, #8
   13818:	bd70      	pop	{r4, r5, r6, pc}
   1381a:	bf00      	nop
   1381c:	20002614 	.word	0x20002614

00013820 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   13820:	4801      	ldr	r0, [pc, #4]	; (13828 <boot_banner+0x8>)
   13822:	f002 bcdb 	b.w	161dc <printk>
   13826:	bf00      	nop
   13828:	0001a24d 	.word	0x0001a24d

0001382c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   1382c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   1382e:	4b09      	ldr	r3, [pc, #36]	; (13854 <k_sys_work_q_init+0x28>)
   13830:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   13832:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   13834:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   13836:	9300      	str	r3, [sp, #0]
   13838:	4907      	ldr	r1, [pc, #28]	; (13858 <k_sys_work_q_init+0x2c>)
   1383a:	4808      	ldr	r0, [pc, #32]	; (1385c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1383c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   13840:	f04f 33ff 	mov.w	r3, #4294967295
   13844:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13848:	f7ff f95a 	bl	12b00 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1384c:	4620      	mov	r0, r4
   1384e:	b004      	add	sp, #16
   13850:	bd10      	pop	{r4, pc}
   13852:	bf00      	nop
   13854:	0001a27d 	.word	0x0001a27d
   13858:	20005f00 	.word	0x20005f00
   1385c:	20001dd8 	.word	0x20001dd8

00013860 <nrf_cc3xx_platform_init>:
   13860:	b510      	push	{r4, lr}
   13862:	4c0c      	ldr	r4, [pc, #48]	; (13894 <nrf_cc3xx_platform_init+0x34>)
   13864:	6823      	ldr	r3, [r4, #0]
   13866:	b113      	cbz	r3, 1386e <nrf_cc3xx_platform_init+0xe>
   13868:	4b0b      	ldr	r3, [pc, #44]	; (13898 <nrf_cc3xx_platform_init+0x38>)
   1386a:	681b      	ldr	r3, [r3, #0]
   1386c:	b92b      	cbnz	r3, 1387a <nrf_cc3xx_platform_init+0x1a>
   1386e:	f000 fe29 	bl	144c4 <CC_LibInit>
   13872:	b930      	cbnz	r0, 13882 <nrf_cc3xx_platform_init+0x22>
   13874:	4b08      	ldr	r3, [pc, #32]	; (13898 <nrf_cc3xx_platform_init+0x38>)
   13876:	2201      	movs	r2, #1
   13878:	601a      	str	r2, [r3, #0]
   1387a:	2301      	movs	r3, #1
   1387c:	6023      	str	r3, [r4, #0]
   1387e:	2000      	movs	r0, #0
   13880:	bd10      	pop	{r4, pc}
   13882:	3801      	subs	r0, #1
   13884:	2806      	cmp	r0, #6
   13886:	d901      	bls.n	1388c <nrf_cc3xx_platform_init+0x2c>
   13888:	4804      	ldr	r0, [pc, #16]	; (1389c <nrf_cc3xx_platform_init+0x3c>)
   1388a:	bd10      	pop	{r4, pc}
   1388c:	4b04      	ldr	r3, [pc, #16]	; (138a0 <nrf_cc3xx_platform_init+0x40>)
   1388e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13892:	bd10      	pop	{r4, pc}
   13894:	20002654 	.word	0x20002654
   13898:	20002650 	.word	0x20002650
   1389c:	ffff8ffe 	.word	0xffff8ffe
   138a0:	00018e7c 	.word	0x00018e7c

000138a4 <nrf_cc3xx_platform_abort>:
   138a4:	f3bf 8f4f 	dsb	sy
   138a8:	4905      	ldr	r1, [pc, #20]	; (138c0 <nrf_cc3xx_platform_abort+0x1c>)
   138aa:	4b06      	ldr	r3, [pc, #24]	; (138c4 <nrf_cc3xx_platform_abort+0x20>)
   138ac:	68ca      	ldr	r2, [r1, #12]
   138ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   138b2:	4313      	orrs	r3, r2
   138b4:	60cb      	str	r3, [r1, #12]
   138b6:	f3bf 8f4f 	dsb	sy
   138ba:	bf00      	nop
   138bc:	e7fd      	b.n	138ba <nrf_cc3xx_platform_abort+0x16>
   138be:	bf00      	nop
   138c0:	e000ed00 	.word	0xe000ed00
   138c4:	05fa0004 	.word	0x05fa0004

000138c8 <CC_PalAbort>:
   138c8:	b410      	push	{r4}
   138ca:	4b09      	ldr	r3, [pc, #36]	; (138f0 <CC_PalAbort+0x28>)
   138cc:	4909      	ldr	r1, [pc, #36]	; (138f4 <CC_PalAbort+0x2c>)
   138ce:	4c0a      	ldr	r4, [pc, #40]	; (138f8 <CC_PalAbort+0x30>)
   138d0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   138d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   138d8:	6849      	ldr	r1, [r1, #4]
   138da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   138de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   138e2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   138e6:	2300      	movs	r3, #0
   138e8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   138ec:	bc10      	pop	{r4}
   138ee:	4708      	bx	r1
   138f0:	5002b000 	.word	0x5002b000
   138f4:	200004b4 	.word	0x200004b4
   138f8:	5002a000 	.word	0x5002a000

000138fc <nrf_cc3xx_platform_set_abort>:
   138fc:	e9d0 1200 	ldrd	r1, r2, [r0]
   13900:	4b01      	ldr	r3, [pc, #4]	; (13908 <nrf_cc3xx_platform_set_abort+0xc>)
   13902:	e9c3 1200 	strd	r1, r2, [r3]
   13906:	4770      	bx	lr
   13908:	200004b4 	.word	0x200004b4

0001390c <nrf_cc3xx_platform_ctr_drbg_init>:
   1390c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13910:	4b13      	ldr	r3, [pc, #76]	; (13960 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   13912:	4e14      	ldr	r6, [pc, #80]	; (13964 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   13914:	2800      	cmp	r0, #0
   13916:	bf14      	ite	ne
   13918:	4604      	movne	r4, r0
   1391a:	461c      	moveq	r4, r3
   1391c:	b083      	sub	sp, #12
   1391e:	6823      	ldr	r3, [r4, #0]
   13920:	42b3      	cmp	r3, r6
   13922:	d019      	beq.n	13958 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   13924:	460d      	mov	r5, r1
   13926:	4620      	mov	r0, r4
   13928:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1392c:	f104 0904 	add.w	r9, r4, #4
   13930:	4617      	mov	r7, r2
   13932:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   13936:	f000 f8e9 	bl	13b0c <mbedtls_platform_zeroize>
   1393a:	4648      	mov	r0, r9
   1393c:	f000 fcac 	bl	14298 <cc_mbedtls_entropy_init>
   13940:	4640      	mov	r0, r8
   13942:	f000 fadb 	bl	13efc <cc_mbedtls_ctr_drbg_init>
   13946:	4908      	ldr	r1, [pc, #32]	; (13968 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   13948:	9700      	str	r7, [sp, #0]
   1394a:	462b      	mov	r3, r5
   1394c:	464a      	mov	r2, r9
   1394e:	4640      	mov	r0, r8
   13950:	f000 faea 	bl	13f28 <cc_mbedtls_ctr_drbg_seed>
   13954:	b908      	cbnz	r0, 1395a <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   13956:	6026      	str	r6, [r4, #0]
   13958:	2000      	movs	r0, #0
   1395a:	b003      	add	sp, #12
   1395c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13960:	20002658 	.word	0x20002658
   13964:	5ac9bca5 	.word	0x5ac9bca5
   13968:	00014321 	.word	0x00014321

0001396c <nrf_cc3xx_platform_ctr_drbg_get>:
   1396c:	b570      	push	{r4, r5, r6, lr}
   1396e:	461d      	mov	r5, r3
   13970:	4b0c      	ldr	r3, [pc, #48]	; (139a4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   13972:	2800      	cmp	r0, #0
   13974:	bf18      	it	ne
   13976:	4603      	movne	r3, r0
   13978:	480b      	ldr	r0, [pc, #44]	; (139a8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1397a:	681e      	ldr	r6, [r3, #0]
   1397c:	4286      	cmp	r6, r0
   1397e:	b082      	sub	sp, #8
   13980:	d10d      	bne.n	1399e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   13982:	2600      	movs	r6, #0
   13984:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   13988:	9600      	str	r6, [sp, #0]
   1398a:	4633      	mov	r3, r6
   1398c:	4614      	mov	r4, r2
   1398e:	f000 fb17 	bl	13fc0 <cc_mbedtls_ctr_drbg_random_with_add>
   13992:	2800      	cmp	r0, #0
   13994:	bf18      	it	ne
   13996:	4634      	movne	r4, r6
   13998:	602c      	str	r4, [r5, #0]
   1399a:	b002      	add	sp, #8
   1399c:	bd70      	pop	{r4, r5, r6, pc}
   1399e:	4803      	ldr	r0, [pc, #12]	; (139ac <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   139a0:	e7fb      	b.n	1399a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   139a2:	bf00      	nop
   139a4:	20002658 	.word	0x20002658
   139a8:	5ac9bca5 	.word	0x5ac9bca5
   139ac:	ffff8fe8 	.word	0xffff8fe8

000139b0 <mutex_free>:
   139b0:	b510      	push	{r4, lr}
   139b2:	4604      	mov	r4, r0
   139b4:	b150      	cbz	r0, 139cc <mutex_free+0x1c>
   139b6:	6863      	ldr	r3, [r4, #4]
   139b8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   139bc:	d005      	beq.n	139ca <mutex_free+0x1a>
   139be:	4a06      	ldr	r2, [pc, #24]	; (139d8 <mutex_free+0x28>)
   139c0:	4293      	cmp	r3, r2
   139c2:	d002      	beq.n	139ca <mutex_free+0x1a>
   139c4:	2300      	movs	r3, #0
   139c6:	6023      	str	r3, [r4, #0]
   139c8:	6062      	str	r2, [r4, #4]
   139ca:	bd10      	pop	{r4, pc}
   139cc:	4b03      	ldr	r3, [pc, #12]	; (139dc <mutex_free+0x2c>)
   139ce:	4804      	ldr	r0, [pc, #16]	; (139e0 <mutex_free+0x30>)
   139d0:	685b      	ldr	r3, [r3, #4]
   139d2:	4798      	blx	r3
   139d4:	e7ef      	b.n	139b6 <mutex_free+0x6>
   139d6:	bf00      	nop
   139d8:	a95c5f2c 	.word	0xa95c5f2c
   139dc:	200004b4 	.word	0x200004b4
   139e0:	00018e98 	.word	0x00018e98

000139e4 <mutex_lock>:
   139e4:	b1c8      	cbz	r0, 13a1a <mutex_lock+0x36>
   139e6:	6843      	ldr	r3, [r0, #4]
   139e8:	4a0d      	ldr	r2, [pc, #52]	; (13a20 <mutex_lock+0x3c>)
   139ea:	4293      	cmp	r3, r2
   139ec:	d013      	beq.n	13a16 <mutex_lock+0x32>
   139ee:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   139f2:	d00e      	beq.n	13a12 <mutex_lock+0x2e>
   139f4:	2301      	movs	r3, #1
   139f6:	e850 2f00 	ldrex	r2, [r0]
   139fa:	4619      	mov	r1, r3
   139fc:	e840 1c00 	strex	ip, r1, [r0]
   13a00:	f09c 0f00 	teq	ip, #0
   13a04:	d1f7      	bne.n	139f6 <mutex_lock+0x12>
   13a06:	2a01      	cmp	r2, #1
   13a08:	d0f5      	beq.n	139f6 <mutex_lock+0x12>
   13a0a:	f3bf 8f5f 	dmb	sy
   13a0e:	2000      	movs	r0, #0
   13a10:	4770      	bx	lr
   13a12:	4804      	ldr	r0, [pc, #16]	; (13a24 <mutex_lock+0x40>)
   13a14:	4770      	bx	lr
   13a16:	4804      	ldr	r0, [pc, #16]	; (13a28 <mutex_lock+0x44>)
   13a18:	4770      	bx	lr
   13a1a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13a1e:	4770      	bx	lr
   13a20:	a95c5f2c 	.word	0xa95c5f2c
   13a24:	ffff8fe9 	.word	0xffff8fe9
   13a28:	ffff8fea 	.word	0xffff8fea

00013a2c <mutex_unlock>:
   13a2c:	b180      	cbz	r0, 13a50 <mutex_unlock+0x24>
   13a2e:	6843      	ldr	r3, [r0, #4]
   13a30:	4a09      	ldr	r2, [pc, #36]	; (13a58 <mutex_unlock+0x2c>)
   13a32:	4293      	cmp	r3, r2
   13a34:	d00a      	beq.n	13a4c <mutex_unlock+0x20>
   13a36:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   13a3a:	d005      	beq.n	13a48 <mutex_unlock+0x1c>
   13a3c:	f3bf 8f5f 	dmb	sy
   13a40:	2300      	movs	r3, #0
   13a42:	6003      	str	r3, [r0, #0]
   13a44:	4618      	mov	r0, r3
   13a46:	4770      	bx	lr
   13a48:	4804      	ldr	r0, [pc, #16]	; (13a5c <mutex_unlock+0x30>)
   13a4a:	4770      	bx	lr
   13a4c:	4804      	ldr	r0, [pc, #16]	; (13a60 <mutex_unlock+0x34>)
   13a4e:	4770      	bx	lr
   13a50:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13a54:	4770      	bx	lr
   13a56:	bf00      	nop
   13a58:	a95c5f2c 	.word	0xa95c5f2c
   13a5c:	ffff8fe9 	.word	0xffff8fe9
   13a60:	ffff8fea 	.word	0xffff8fea

00013a64 <mutex_init>:
   13a64:	b510      	push	{r4, lr}
   13a66:	4604      	mov	r4, r0
   13a68:	b120      	cbz	r0, 13a74 <mutex_init+0x10>
   13a6a:	4b04      	ldr	r3, [pc, #16]	; (13a7c <mutex_init+0x18>)
   13a6c:	6063      	str	r3, [r4, #4]
   13a6e:	2200      	movs	r2, #0
   13a70:	6022      	str	r2, [r4, #0]
   13a72:	bd10      	pop	{r4, pc}
   13a74:	4802      	ldr	r0, [pc, #8]	; (13a80 <mutex_init+0x1c>)
   13a76:	f7ff ff27 	bl	138c8 <CC_PalAbort>
   13a7a:	e7f6      	b.n	13a6a <mutex_init+0x6>
   13a7c:	3a00003a 	.word	0x3a00003a
   13a80:	00018ec0 	.word	0x00018ec0

00013a84 <nrf_cc3xx_platform_set_mutexes>:
   13a84:	b570      	push	{r4, r5, r6, lr}
   13a86:	e9d0 2300 	ldrd	r2, r3, [r0]
   13a8a:	4c17      	ldr	r4, [pc, #92]	; (13ae8 <nrf_cc3xx_platform_set_mutexes+0x64>)
   13a8c:	4d17      	ldr	r5, [pc, #92]	; (13aec <nrf_cc3xx_platform_set_mutexes+0x68>)
   13a8e:	6063      	str	r3, [r4, #4]
   13a90:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   13a94:	e9c4 3002 	strd	r3, r0, [r4, #8]
   13a98:	6022      	str	r2, [r4, #0]
   13a9a:	6848      	ldr	r0, [r1, #4]
   13a9c:	f8d1 c000 	ldr.w	ip, [r1]
   13aa0:	4b13      	ldr	r3, [pc, #76]	; (13af0 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   13aa2:	e9c3 c000 	strd	ip, r0, [r3]
   13aa6:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   13aaa:	f8d1 c008 	ldr.w	ip, [r1, #8]
   13aae:	f8c3 c008 	str.w	ip, [r3, #8]
   13ab2:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   13ab6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   13aba:	6909      	ldr	r1, [r1, #16]
   13abc:	f8c3 c00c 	str.w	ip, [r3, #12]
   13ac0:	6119      	str	r1, [r3, #16]
   13ac2:	d010      	beq.n	13ae6 <nrf_cc3xx_platform_set_mutexes+0x62>
   13ac4:	490b      	ldr	r1, [pc, #44]	; (13af4 <nrf_cc3xx_platform_set_mutexes+0x70>)
   13ac6:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   13aca:	2300      	movs	r3, #0
   13acc:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   13ad0:	f505 708a 	add.w	r0, r5, #276	; 0x114
   13ad4:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   13ad8:	4790      	blx	r2
   13ada:	6823      	ldr	r3, [r4, #0]
   13adc:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   13ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13ae4:	4718      	bx	r3
   13ae6:	bd70      	pop	{r4, r5, r6, pc}
   13ae8:	200004d0 	.word	0x200004d0
   13aec:	20002658 	.word	0x20002658
   13af0:	200004bc 	.word	0x200004bc
   13af4:	a95c5f2c 	.word	0xa95c5f2c

00013af8 <mbedtls_zeroize_internal>:
   13af8:	b138      	cbz	r0, 13b0a <mbedtls_zeroize_internal+0x12>
   13afa:	b131      	cbz	r1, 13b0a <mbedtls_zeroize_internal+0x12>
   13afc:	4401      	add	r1, r0
   13afe:	2200      	movs	r2, #0
   13b00:	4603      	mov	r3, r0
   13b02:	3001      	adds	r0, #1
   13b04:	4281      	cmp	r1, r0
   13b06:	701a      	strb	r2, [r3, #0]
   13b08:	d1fa      	bne.n	13b00 <mbedtls_zeroize_internal+0x8>
   13b0a:	4770      	bx	lr

00013b0c <mbedtls_platform_zeroize>:
   13b0c:	b138      	cbz	r0, 13b1e <mbedtls_platform_zeroize+0x12>
   13b0e:	b131      	cbz	r1, 13b1e <mbedtls_platform_zeroize+0x12>
   13b10:	4401      	add	r1, r0
   13b12:	2200      	movs	r2, #0
   13b14:	4603      	mov	r3, r0
   13b16:	3001      	adds	r0, #1
   13b18:	4288      	cmp	r0, r1
   13b1a:	701a      	strb	r2, [r3, #0]
   13b1c:	d1fa      	bne.n	13b14 <mbedtls_platform_zeroize+0x8>
   13b1e:	4770      	bx	lr

00013b20 <block_cipher_df>:
   13b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b24:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   13b28:	b0b5      	sub	sp, #212	; 0xd4
   13b2a:	f200 80d7 	bhi.w	13cdc <block_cipher_df+0x1bc>
   13b2e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 13ce4 <block_cipher_df+0x1c4>
   13b32:	4614      	mov	r4, r2
   13b34:	460d      	mov	r5, r1
   13b36:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   13b3a:	2100      	movs	r1, #0
   13b3c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   13b40:	4607      	mov	r7, r0
   13b42:	4648      	mov	r0, r9
   13b44:	f003 f9ea 	bl	16f1c <memset>
   13b48:	4640      	mov	r0, r8
   13b4a:	f001 f951 	bl	14df0 <cc_mbedtls_aes_init>
   13b4e:	2300      	movs	r3, #0
   13b50:	f8a9 3010 	strh.w	r3, [r9, #16]
   13b54:	ba63      	rev16	r3, r4
   13b56:	f109 0618 	add.w	r6, r9, #24
   13b5a:	f8a9 3012 	strh.w	r3, [r9, #18]
   13b5e:	2320      	movs	r3, #32
   13b60:	4629      	mov	r1, r5
   13b62:	4622      	mov	r2, r4
   13b64:	f889 3017 	strb.w	r3, [r9, #23]
   13b68:	4630      	mov	r0, r6
   13b6a:	f003 f9cc 	bl	16f06 <memcpy>
   13b6e:	4b5e      	ldr	r3, [pc, #376]	; (13ce8 <block_cipher_df+0x1c8>)
   13b70:	9307      	str	r3, [sp, #28]
   13b72:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   13b76:	2280      	movs	r2, #128	; 0x80
   13b78:	9308      	str	r3, [sp, #32]
   13b7a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   13b7e:	9309      	str	r3, [sp, #36]	; 0x24
   13b80:	5532      	strb	r2, [r6, r4]
   13b82:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   13b86:	a907      	add	r1, sp, #28
   13b88:	4640      	mov	r0, r8
   13b8a:	930a      	str	r3, [sp, #40]	; 0x28
   13b8c:	f001 f946 	bl	14e1c <cc_mbedtls_aes_setkey_enc>
   13b90:	4682      	mov	sl, r0
   13b92:	2800      	cmp	r0, #0
   13b94:	d17f      	bne.n	13c96 <block_cipher_df+0x176>
   13b96:	f104 0319 	add.w	r3, r4, #25
   13b9a:	ae0b      	add	r6, sp, #44	; 0x2c
   13b9c:	ac0f      	add	r4, sp, #60	; 0x3c
   13b9e:	9302      	str	r3, [sp, #8]
   13ba0:	9703      	str	r7, [sp, #12]
   13ba2:	9601      	str	r6, [sp, #4]
   13ba4:	9404      	str	r4, [sp, #16]
   13ba6:	9801      	ldr	r0, [sp, #4]
   13ba8:	f8df b140 	ldr.w	fp, [pc, #320]	; 13cec <block_cipher_df+0x1cc>
   13bac:	2210      	movs	r2, #16
   13bae:	2100      	movs	r1, #0
   13bb0:	f003 f9b4 	bl	16f1c <memset>
   13bb4:	f8dd a008 	ldr.w	sl, [sp, #8]
   13bb8:	9405      	str	r4, [sp, #20]
   13bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13bbc:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   13bc0:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   13bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13bc6:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   13bca:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   13bce:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   13bd2:	405c      	eors	r4, r3
   13bd4:	9b01      	ldr	r3, [sp, #4]
   13bd6:	407e      	eors	r6, r7
   13bd8:	4055      	eors	r5, r2
   13bda:	ea81 0700 	eor.w	r7, r1, r0
   13bde:	461a      	mov	r2, r3
   13be0:	2101      	movs	r1, #1
   13be2:	4640      	mov	r0, r8
   13be4:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   13be8:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   13bec:	f001 f930 	bl	14e50 <cc_mbedtls_aes_crypt_ecb>
   13bf0:	f1ba 0f10 	cmp.w	sl, #16
   13bf4:	bf94      	ite	ls
   13bf6:	ebaa 0a0a 	subls.w	sl, sl, sl
   13bfa:	f1aa 0a10 	subhi.w	sl, sl, #16
   13bfe:	f10b 0b10 	add.w	fp, fp, #16
   13c02:	2800      	cmp	r0, #0
   13c04:	d165      	bne.n	13cd2 <block_cipher_df+0x1b2>
   13c06:	f1ba 0f00 	cmp.w	sl, #0
   13c0a:	d1d6      	bne.n	13bba <block_cipher_df+0x9a>
   13c0c:	9c05      	ldr	r4, [sp, #20]
   13c0e:	9901      	ldr	r1, [sp, #4]
   13c10:	4620      	mov	r0, r4
   13c12:	2210      	movs	r2, #16
   13c14:	f003 f977 	bl	16f06 <memcpy>
   13c18:	f899 3003 	ldrb.w	r3, [r9, #3]
   13c1c:	3410      	adds	r4, #16
   13c1e:	3301      	adds	r3, #1
   13c20:	45a0      	cmp	r8, r4
   13c22:	f889 3003 	strb.w	r3, [r9, #3]
   13c26:	d1be      	bne.n	13ba6 <block_cipher_df+0x86>
   13c28:	9c04      	ldr	r4, [sp, #16]
   13c2a:	9f03      	ldr	r7, [sp, #12]
   13c2c:	9e01      	ldr	r6, [sp, #4]
   13c2e:	2280      	movs	r2, #128	; 0x80
   13c30:	4621      	mov	r1, r4
   13c32:	4640      	mov	r0, r8
   13c34:	f001 f8f2 	bl	14e1c <cc_mbedtls_aes_setkey_enc>
   13c38:	4682      	mov	sl, r0
   13c3a:	bb70      	cbnz	r0, 13c9a <block_cipher_df+0x17a>
   13c3c:	f107 0920 	add.w	r9, r7, #32
   13c40:	463d      	mov	r5, r7
   13c42:	ab13      	add	r3, sp, #76	; 0x4c
   13c44:	461a      	mov	r2, r3
   13c46:	2101      	movs	r1, #1
   13c48:	4640      	mov	r0, r8
   13c4a:	f001 f901 	bl	14e50 <cc_mbedtls_aes_crypt_ecb>
   13c4e:	2210      	movs	r2, #16
   13c50:	4682      	mov	sl, r0
   13c52:	a913      	add	r1, sp, #76	; 0x4c
   13c54:	4628      	mov	r0, r5
   13c56:	4415      	add	r5, r2
   13c58:	f1ba 0f00 	cmp.w	sl, #0
   13c5c:	d11d      	bne.n	13c9a <block_cipher_df+0x17a>
   13c5e:	f003 f952 	bl	16f06 <memcpy>
   13c62:	454d      	cmp	r5, r9
   13c64:	d1ed      	bne.n	13c42 <block_cipher_df+0x122>
   13c66:	4640      	mov	r0, r8
   13c68:	f001 f8d2 	bl	14e10 <cc_mbedtls_aes_free>
   13c6c:	481d      	ldr	r0, [pc, #116]	; (13ce4 <block_cipher_df+0x1c4>)
   13c6e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   13c72:	f7ff ff4b 	bl	13b0c <mbedtls_platform_zeroize>
   13c76:	4620      	mov	r0, r4
   13c78:	2120      	movs	r1, #32
   13c7a:	f7ff ff47 	bl	13b0c <mbedtls_platform_zeroize>
   13c7e:	a807      	add	r0, sp, #28
   13c80:	2110      	movs	r1, #16
   13c82:	f7ff ff43 	bl	13b0c <mbedtls_platform_zeroize>
   13c86:	4630      	mov	r0, r6
   13c88:	2110      	movs	r1, #16
   13c8a:	f7ff ff3f 	bl	13b0c <mbedtls_platform_zeroize>
   13c8e:	4650      	mov	r0, sl
   13c90:	b035      	add	sp, #212	; 0xd4
   13c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c96:	ac0f      	add	r4, sp, #60	; 0x3c
   13c98:	ae0b      	add	r6, sp, #44	; 0x2c
   13c9a:	4640      	mov	r0, r8
   13c9c:	f001 f8b8 	bl	14e10 <cc_mbedtls_aes_free>
   13ca0:	4810      	ldr	r0, [pc, #64]	; (13ce4 <block_cipher_df+0x1c4>)
   13ca2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   13ca6:	f7ff ff31 	bl	13b0c <mbedtls_platform_zeroize>
   13caa:	4620      	mov	r0, r4
   13cac:	2120      	movs	r1, #32
   13cae:	f7ff ff2d 	bl	13b0c <mbedtls_platform_zeroize>
   13cb2:	a807      	add	r0, sp, #28
   13cb4:	2110      	movs	r1, #16
   13cb6:	f7ff ff29 	bl	13b0c <mbedtls_platform_zeroize>
   13cba:	2110      	movs	r1, #16
   13cbc:	4630      	mov	r0, r6
   13cbe:	f7ff ff25 	bl	13b0c <mbedtls_platform_zeroize>
   13cc2:	2120      	movs	r1, #32
   13cc4:	4638      	mov	r0, r7
   13cc6:	f7ff ff21 	bl	13b0c <mbedtls_platform_zeroize>
   13cca:	4650      	mov	r0, sl
   13ccc:	b035      	add	sp, #212	; 0xd4
   13cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd2:	9f03      	ldr	r7, [sp, #12]
   13cd4:	9e01      	ldr	r6, [sp, #4]
   13cd6:	9c04      	ldr	r4, [sp, #16]
   13cd8:	4682      	mov	sl, r0
   13cda:	e7de      	b.n	13c9a <block_cipher_df+0x17a>
   13cdc:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   13ce0:	e7f3      	b.n	13cca <block_cipher_df+0x1aa>
   13ce2:	bf00      	nop
   13ce4:	20002828 	.word	0x20002828
   13ce8:	03020100 	.word	0x03020100
   13cec:	20002838 	.word	0x20002838

00013cf0 <ctr_drbg_update_internal>:
   13cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13cf4:	b088      	sub	sp, #32
   13cf6:	4604      	mov	r4, r0
   13cf8:	460d      	mov	r5, r1
   13cfa:	2220      	movs	r2, #32
   13cfc:	2100      	movs	r1, #0
   13cfe:	4668      	mov	r0, sp
   13d00:	f003 f90c 	bl	16f1c <memset>
   13d04:	f104 0620 	add.w	r6, r4, #32
   13d08:	466f      	mov	r7, sp
   13d0a:	7be2      	ldrb	r2, [r4, #15]
   13d0c:	3201      	adds	r2, #1
   13d0e:	b2d2      	uxtb	r2, r2
   13d10:	73e2      	strb	r2, [r4, #15]
   13d12:	2a00      	cmp	r2, #0
   13d14:	d14d      	bne.n	13db2 <ctr_drbg_update_internal+0xc2>
   13d16:	7ba2      	ldrb	r2, [r4, #14]
   13d18:	3201      	adds	r2, #1
   13d1a:	b2d2      	uxtb	r2, r2
   13d1c:	73a2      	strb	r2, [r4, #14]
   13d1e:	2a00      	cmp	r2, #0
   13d20:	d147      	bne.n	13db2 <ctr_drbg_update_internal+0xc2>
   13d22:	7b63      	ldrb	r3, [r4, #13]
   13d24:	3301      	adds	r3, #1
   13d26:	b2db      	uxtb	r3, r3
   13d28:	7363      	strb	r3, [r4, #13]
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d141      	bne.n	13db2 <ctr_drbg_update_internal+0xc2>
   13d2e:	7b23      	ldrb	r3, [r4, #12]
   13d30:	3301      	adds	r3, #1
   13d32:	b2db      	uxtb	r3, r3
   13d34:	7323      	strb	r3, [r4, #12]
   13d36:	2b00      	cmp	r3, #0
   13d38:	d13b      	bne.n	13db2 <ctr_drbg_update_internal+0xc2>
   13d3a:	7ae3      	ldrb	r3, [r4, #11]
   13d3c:	3301      	adds	r3, #1
   13d3e:	b2db      	uxtb	r3, r3
   13d40:	72e3      	strb	r3, [r4, #11]
   13d42:	2b00      	cmp	r3, #0
   13d44:	d135      	bne.n	13db2 <ctr_drbg_update_internal+0xc2>
   13d46:	7aa3      	ldrb	r3, [r4, #10]
   13d48:	3301      	adds	r3, #1
   13d4a:	b2db      	uxtb	r3, r3
   13d4c:	72a3      	strb	r3, [r4, #10]
   13d4e:	2b00      	cmp	r3, #0
   13d50:	d12f      	bne.n	13db2 <ctr_drbg_update_internal+0xc2>
   13d52:	7a63      	ldrb	r3, [r4, #9]
   13d54:	3301      	adds	r3, #1
   13d56:	b2db      	uxtb	r3, r3
   13d58:	7263      	strb	r3, [r4, #9]
   13d5a:	bb53      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d5c:	7a23      	ldrb	r3, [r4, #8]
   13d5e:	3301      	adds	r3, #1
   13d60:	b2db      	uxtb	r3, r3
   13d62:	7223      	strb	r3, [r4, #8]
   13d64:	bb2b      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d66:	79e3      	ldrb	r3, [r4, #7]
   13d68:	3301      	adds	r3, #1
   13d6a:	b2db      	uxtb	r3, r3
   13d6c:	71e3      	strb	r3, [r4, #7]
   13d6e:	bb03      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d70:	79a3      	ldrb	r3, [r4, #6]
   13d72:	3301      	adds	r3, #1
   13d74:	b2db      	uxtb	r3, r3
   13d76:	71a3      	strb	r3, [r4, #6]
   13d78:	b9db      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d7a:	7963      	ldrb	r3, [r4, #5]
   13d7c:	3301      	adds	r3, #1
   13d7e:	b2db      	uxtb	r3, r3
   13d80:	7163      	strb	r3, [r4, #5]
   13d82:	b9b3      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d84:	7923      	ldrb	r3, [r4, #4]
   13d86:	3301      	adds	r3, #1
   13d88:	b2db      	uxtb	r3, r3
   13d8a:	7123      	strb	r3, [r4, #4]
   13d8c:	b98b      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d8e:	78e3      	ldrb	r3, [r4, #3]
   13d90:	3301      	adds	r3, #1
   13d92:	b2db      	uxtb	r3, r3
   13d94:	70e3      	strb	r3, [r4, #3]
   13d96:	b963      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13d98:	78a3      	ldrb	r3, [r4, #2]
   13d9a:	3301      	adds	r3, #1
   13d9c:	b2db      	uxtb	r3, r3
   13d9e:	70a3      	strb	r3, [r4, #2]
   13da0:	b93b      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13da2:	7863      	ldrb	r3, [r4, #1]
   13da4:	3301      	adds	r3, #1
   13da6:	b2db      	uxtb	r3, r3
   13da8:	7063      	strb	r3, [r4, #1]
   13daa:	b913      	cbnz	r3, 13db2 <ctr_drbg_update_internal+0xc2>
   13dac:	7823      	ldrb	r3, [r4, #0]
   13dae:	3301      	adds	r3, #1
   13db0:	7023      	strb	r3, [r4, #0]
   13db2:	463b      	mov	r3, r7
   13db4:	4622      	mov	r2, r4
   13db6:	2101      	movs	r1, #1
   13db8:	4630      	mov	r0, r6
   13dba:	f001 f849 	bl	14e50 <cc_mbedtls_aes_crypt_ecb>
   13dbe:	4680      	mov	r8, r0
   13dc0:	bb50      	cbnz	r0, 13e18 <ctr_drbg_update_internal+0x128>
   13dc2:	3710      	adds	r7, #16
   13dc4:	ab08      	add	r3, sp, #32
   13dc6:	429f      	cmp	r7, r3
   13dc8:	d19f      	bne.n	13d0a <ctr_drbg_update_internal+0x1a>
   13dca:	9a02      	ldr	r2, [sp, #8]
   13dcc:	68ab      	ldr	r3, [r5, #8]
   13dce:	9f03      	ldr	r7, [sp, #12]
   13dd0:	9907      	ldr	r1, [sp, #28]
   13dd2:	4053      	eors	r3, r2
   13dd4:	9302      	str	r3, [sp, #8]
   13dd6:	4630      	mov	r0, r6
   13dd8:	68ee      	ldr	r6, [r5, #12]
   13dda:	9b00      	ldr	r3, [sp, #0]
   13ddc:	407e      	eors	r6, r7
   13dde:	9603      	str	r6, [sp, #12]
   13de0:	9f04      	ldr	r7, [sp, #16]
   13de2:	692e      	ldr	r6, [r5, #16]
   13de4:	407e      	eors	r6, r7
   13de6:	9604      	str	r6, [sp, #16]
   13de8:	696e      	ldr	r6, [r5, #20]
   13dea:	9f05      	ldr	r7, [sp, #20]
   13dec:	407e      	eors	r6, r7
   13dee:	9605      	str	r6, [sp, #20]
   13df0:	9f06      	ldr	r7, [sp, #24]
   13df2:	69ae      	ldr	r6, [r5, #24]
   13df4:	407e      	eors	r6, r7
   13df6:	9606      	str	r6, [sp, #24]
   13df8:	69ee      	ldr	r6, [r5, #28]
   13dfa:	4071      	eors	r1, r6
   13dfc:	9107      	str	r1, [sp, #28]
   13dfe:	6829      	ldr	r1, [r5, #0]
   13e00:	404b      	eors	r3, r1
   13e02:	9300      	str	r3, [sp, #0]
   13e04:	9901      	ldr	r1, [sp, #4]
   13e06:	686b      	ldr	r3, [r5, #4]
   13e08:	2280      	movs	r2, #128	; 0x80
   13e0a:	404b      	eors	r3, r1
   13e0c:	4669      	mov	r1, sp
   13e0e:	9301      	str	r3, [sp, #4]
   13e10:	f001 f804 	bl	14e1c <cc_mbedtls_aes_setkey_enc>
   13e14:	4680      	mov	r8, r0
   13e16:	b138      	cbz	r0, 13e28 <ctr_drbg_update_internal+0x138>
   13e18:	4668      	mov	r0, sp
   13e1a:	2120      	movs	r1, #32
   13e1c:	f7ff fe76 	bl	13b0c <mbedtls_platform_zeroize>
   13e20:	4640      	mov	r0, r8
   13e22:	b008      	add	sp, #32
   13e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e28:	2210      	movs	r2, #16
   13e2a:	eb0d 0102 	add.w	r1, sp, r2
   13e2e:	4620      	mov	r0, r4
   13e30:	f003 f869 	bl	16f06 <memcpy>
   13e34:	e7f0      	b.n	13e18 <ctr_drbg_update_internal+0x128>
   13e36:	bf00      	nop

00013e38 <mbedtls_ctr_drbg_reseed_internal>:
   13e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13e3c:	4604      	mov	r4, r0
   13e3e:	6980      	ldr	r0, [r0, #24]
   13e40:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   13e44:	d852      	bhi.n	13eec <mbedtls_ctr_drbg_reseed_internal+0xb4>
   13e46:	461d      	mov	r5, r3
   13e48:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   13e4c:	42ab      	cmp	r3, r5
   13e4e:	d34d      	bcc.n	13eec <mbedtls_ctr_drbg_reseed_internal+0xb4>
   13e50:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   13e54:	1a1b      	subs	r3, r3, r0
   13e56:	4293      	cmp	r3, r2
   13e58:	4616      	mov	r6, r2
   13e5a:	d347      	bcc.n	13eec <mbedtls_ctr_drbg_reseed_internal+0xb4>
   13e5c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 13ef8 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   13e60:	f44f 72c0 	mov.w	r2, #384	; 0x180
   13e64:	460f      	mov	r7, r1
   13e66:	4648      	mov	r0, r9
   13e68:	2100      	movs	r1, #0
   13e6a:	f003 f857 	bl	16f1c <memset>
   13e6e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   13e72:	69a2      	ldr	r2, [r4, #24]
   13e74:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   13e78:	4649      	mov	r1, r9
   13e7a:	4798      	blx	r3
   13e7c:	2800      	cmp	r0, #0
   13e7e:	d138      	bne.n	13ef2 <mbedtls_ctr_drbg_reseed_internal+0xba>
   13e80:	f8d4 8018 	ldr.w	r8, [r4, #24]
   13e84:	b13d      	cbz	r5, 13e96 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   13e86:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   13e8a:	462a      	mov	r2, r5
   13e8c:	eb09 0108 	add.w	r1, r9, r8
   13e90:	4798      	blx	r3
   13e92:	bb70      	cbnz	r0, 13ef2 <mbedtls_ctr_drbg_reseed_internal+0xba>
   13e94:	44a8      	add	r8, r5
   13e96:	b107      	cbz	r7, 13e9a <mbedtls_ctr_drbg_reseed_internal+0x62>
   13e98:	b9c6      	cbnz	r6, 13ecc <mbedtls_ctr_drbg_reseed_internal+0x94>
   13e9a:	4917      	ldr	r1, [pc, #92]	; (13ef8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   13e9c:	4642      	mov	r2, r8
   13e9e:	4608      	mov	r0, r1
   13ea0:	f7ff fe3e 	bl	13b20 <block_cipher_df>
   13ea4:	4605      	mov	r5, r0
   13ea6:	b138      	cbz	r0, 13eb8 <mbedtls_ctr_drbg_reseed_internal+0x80>
   13ea8:	4813      	ldr	r0, [pc, #76]	; (13ef8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   13eaa:	f44f 71c0 	mov.w	r1, #384	; 0x180
   13eae:	f7ff fe2d 	bl	13b0c <mbedtls_platform_zeroize>
   13eb2:	4628      	mov	r0, r5
   13eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13eb8:	490f      	ldr	r1, [pc, #60]	; (13ef8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   13eba:	4620      	mov	r0, r4
   13ebc:	f7ff ff18 	bl	13cf0 <ctr_drbg_update_internal>
   13ec0:	4605      	mov	r5, r0
   13ec2:	2800      	cmp	r0, #0
   13ec4:	d1f0      	bne.n	13ea8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   13ec6:	2301      	movs	r3, #1
   13ec8:	6123      	str	r3, [r4, #16]
   13eca:	e7ed      	b.n	13ea8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   13ecc:	eb09 0008 	add.w	r0, r9, r8
   13ed0:	4639      	mov	r1, r7
   13ed2:	4632      	mov	r2, r6
   13ed4:	f003 f817 	bl	16f06 <memcpy>
   13ed8:	4907      	ldr	r1, [pc, #28]	; (13ef8 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   13eda:	44b0      	add	r8, r6
   13edc:	4642      	mov	r2, r8
   13ede:	4608      	mov	r0, r1
   13ee0:	f7ff fe1e 	bl	13b20 <block_cipher_df>
   13ee4:	4605      	mov	r5, r0
   13ee6:	2800      	cmp	r0, #0
   13ee8:	d1de      	bne.n	13ea8 <mbedtls_ctr_drbg_reseed_internal+0x70>
   13eea:	e7e5      	b.n	13eb8 <mbedtls_ctr_drbg_reseed_internal+0x80>
   13eec:	f06f 0537 	mvn.w	r5, #55	; 0x37
   13ef0:	e7df      	b.n	13eb2 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   13ef2:	f06f 0533 	mvn.w	r5, #51	; 0x33
   13ef6:	e7dc      	b.n	13eb2 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   13ef8:	200029c8 	.word	0x200029c8

00013efc <cc_mbedtls_ctr_drbg_init>:
   13efc:	b510      	push	{r4, lr}
   13efe:	22a4      	movs	r2, #164	; 0xa4
   13f00:	4604      	mov	r4, r0
   13f02:	2100      	movs	r1, #0
   13f04:	f003 f80a 	bl	16f1c <memset>
   13f08:	4b06      	ldr	r3, [pc, #24]	; (13f24 <cc_mbedtls_ctr_drbg_init+0x28>)
   13f0a:	f04f 31ff 	mov.w	r1, #4294967295
   13f0e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   13f12:	6121      	str	r1, [r4, #16]
   13f14:	61e2      	str	r2, [r4, #28]
   13f16:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   13f1a:	681b      	ldr	r3, [r3, #0]
   13f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13f20:	4718      	bx	r3
   13f22:	bf00      	nop
   13f24:	20000520 	.word	0x20000520

00013f28 <cc_mbedtls_ctr_drbg_seed>:
   13f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f2c:	b085      	sub	sp, #20
   13f2e:	4605      	mov	r5, r0
   13f30:	460f      	mov	r7, r1
   13f32:	4616      	mov	r6, r2
   13f34:	2100      	movs	r1, #0
   13f36:	2210      	movs	r2, #16
   13f38:	4668      	mov	r0, sp
   13f3a:	4699      	mov	r9, r3
   13f3c:	f002 ffee 	bl	16f1c <memset>
   13f40:	4b1d      	ldr	r3, [pc, #116]	; (13fb8 <cc_mbedtls_ctr_drbg_seed+0x90>)
   13f42:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   13f46:	681b      	ldr	r3, [r3, #0]
   13f48:	4640      	mov	r0, r8
   13f4a:	4798      	blx	r3
   13f4c:	b120      	cbz	r0, 13f58 <cc_mbedtls_ctr_drbg_seed+0x30>
   13f4e:	4604      	mov	r4, r0
   13f50:	4620      	mov	r0, r4
   13f52:	b005      	add	sp, #20
   13f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13f58:	f105 0420 	add.w	r4, r5, #32
   13f5c:	4620      	mov	r0, r4
   13f5e:	f000 ff47 	bl	14df0 <cc_mbedtls_aes_init>
   13f62:	69aa      	ldr	r2, [r5, #24]
   13f64:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   13f68:	692e      	ldr	r6, [r5, #16]
   13f6a:	b9e2      	cbnz	r2, 13fa6 <cc_mbedtls_ctr_drbg_seed+0x7e>
   13f6c:	2220      	movs	r2, #32
   13f6e:	2e00      	cmp	r6, #0
   13f70:	61aa      	str	r2, [r5, #24]
   13f72:	db1f      	blt.n	13fb4 <cc_mbedtls_ctr_drbg_seed+0x8c>
   13f74:	4620      	mov	r0, r4
   13f76:	4669      	mov	r1, sp
   13f78:	2280      	movs	r2, #128	; 0x80
   13f7a:	f000 ff4f 	bl	14e1c <cc_mbedtls_aes_setkey_enc>
   13f7e:	4604      	mov	r4, r0
   13f80:	b930      	cbnz	r0, 13f90 <cc_mbedtls_ctr_drbg_seed+0x68>
   13f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13f84:	4633      	mov	r3, r6
   13f86:	4649      	mov	r1, r9
   13f88:	4628      	mov	r0, r5
   13f8a:	f7ff ff55 	bl	13e38 <mbedtls_ctr_drbg_reseed_internal>
   13f8e:	4604      	mov	r4, r0
   13f90:	4b0a      	ldr	r3, [pc, #40]	; (13fbc <cc_mbedtls_ctr_drbg_seed+0x94>)
   13f92:	4640      	mov	r0, r8
   13f94:	681b      	ldr	r3, [r3, #0]
   13f96:	4798      	blx	r3
   13f98:	2800      	cmp	r0, #0
   13f9a:	bf18      	it	ne
   13f9c:	4604      	movne	r4, r0
   13f9e:	4620      	mov	r0, r4
   13fa0:	b005      	add	sp, #20
   13fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13fa6:	2e00      	cmp	r6, #0
   13fa8:	dae4      	bge.n	13f74 <cc_mbedtls_ctr_drbg_seed+0x4c>
   13faa:	2a17      	cmp	r2, #23
   13fac:	d802      	bhi.n	13fb4 <cc_mbedtls_ctr_drbg_seed+0x8c>
   13fae:	3201      	adds	r2, #1
   13fb0:	0856      	lsrs	r6, r2, #1
   13fb2:	e7df      	b.n	13f74 <cc_mbedtls_ctr_drbg_seed+0x4c>
   13fb4:	2600      	movs	r6, #0
   13fb6:	e7dd      	b.n	13f74 <cc_mbedtls_ctr_drbg_seed+0x4c>
   13fb8:	2000051c 	.word	0x2000051c
   13fbc:	20000518 	.word	0x20000518

00013fc0 <cc_mbedtls_ctr_drbg_random_with_add>:
   13fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc4:	b08d      	sub	sp, #52	; 0x34
   13fc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   13fca:	9f16      	ldr	r7, [sp, #88]	; 0x58
   13fcc:	f200 80e3 	bhi.w	14196 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   13fd0:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   13fd4:	f200 80dc 	bhi.w	14190 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   13fd8:	4604      	mov	r4, r0
   13fda:	4615      	mov	r5, r2
   13fdc:	460e      	mov	r6, r1
   13fde:	2220      	movs	r2, #32
   13fe0:	2100      	movs	r1, #0
   13fe2:	a804      	add	r0, sp, #16
   13fe4:	4698      	mov	r8, r3
   13fe6:	f002 ff99 	bl	16f1c <memset>
   13fea:	4b6c      	ldr	r3, [pc, #432]	; (1419c <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   13fec:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   13ff0:	681b      	ldr	r3, [r3, #0]
   13ff2:	4648      	mov	r0, r9
   13ff4:	4798      	blx	r3
   13ff6:	4683      	mov	fp, r0
   13ff8:	2800      	cmp	r0, #0
   13ffa:	f040 8092 	bne.w	14122 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   13ffe:	6922      	ldr	r2, [r4, #16]
   14000:	69e3      	ldr	r3, [r4, #28]
   14002:	429a      	cmp	r2, r3
   14004:	f300 8091 	bgt.w	1412a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   14008:	6963      	ldr	r3, [r4, #20]
   1400a:	2b00      	cmp	r3, #0
   1400c:	f040 808d 	bne.w	1412a <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   14010:	2f00      	cmp	r7, #0
   14012:	f040 80a9 	bne.w	14168 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   14016:	f8df a188 	ldr.w	sl, [pc, #392]	; 141a0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1401a:	466f      	mov	r7, sp
   1401c:	2d00      	cmp	r5, #0
   1401e:	f000 8098 	beq.w	14152 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   14022:	f104 0820 	add.w	r8, r4, #32
   14026:	466f      	mov	r7, sp
   14028:	e00e      	b.n	14048 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1402a:	2d10      	cmp	r5, #16
   1402c:	46ab      	mov	fp, r5
   1402e:	bf28      	it	cs
   14030:	f04f 0b10 	movcs.w	fp, #16
   14034:	4630      	mov	r0, r6
   14036:	465a      	mov	r2, fp
   14038:	4639      	mov	r1, r7
   1403a:	f002 ff64 	bl	16f06 <memcpy>
   1403e:	ebb5 050b 	subs.w	r5, r5, fp
   14042:	445e      	add	r6, fp
   14044:	f000 8085 	beq.w	14152 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   14048:	7be3      	ldrb	r3, [r4, #15]
   1404a:	3301      	adds	r3, #1
   1404c:	b2db      	uxtb	r3, r3
   1404e:	73e3      	strb	r3, [r4, #15]
   14050:	2b00      	cmp	r3, #0
   14052:	d14d      	bne.n	140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14054:	7ba3      	ldrb	r3, [r4, #14]
   14056:	3301      	adds	r3, #1
   14058:	b2db      	uxtb	r3, r3
   1405a:	73a3      	strb	r3, [r4, #14]
   1405c:	2b00      	cmp	r3, #0
   1405e:	d147      	bne.n	140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14060:	7b63      	ldrb	r3, [r4, #13]
   14062:	3301      	adds	r3, #1
   14064:	b2db      	uxtb	r3, r3
   14066:	7363      	strb	r3, [r4, #13]
   14068:	2b00      	cmp	r3, #0
   1406a:	d141      	bne.n	140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1406c:	7b23      	ldrb	r3, [r4, #12]
   1406e:	3301      	adds	r3, #1
   14070:	b2db      	uxtb	r3, r3
   14072:	7323      	strb	r3, [r4, #12]
   14074:	2b00      	cmp	r3, #0
   14076:	d13b      	bne.n	140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14078:	7ae3      	ldrb	r3, [r4, #11]
   1407a:	3301      	adds	r3, #1
   1407c:	b2db      	uxtb	r3, r3
   1407e:	72e3      	strb	r3, [r4, #11]
   14080:	2b00      	cmp	r3, #0
   14082:	d135      	bne.n	140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14084:	7aa3      	ldrb	r3, [r4, #10]
   14086:	3301      	adds	r3, #1
   14088:	b2db      	uxtb	r3, r3
   1408a:	72a3      	strb	r3, [r4, #10]
   1408c:	2b00      	cmp	r3, #0
   1408e:	d12f      	bne.n	140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   14090:	7a63      	ldrb	r3, [r4, #9]
   14092:	3301      	adds	r3, #1
   14094:	b2db      	uxtb	r3, r3
   14096:	7263      	strb	r3, [r4, #9]
   14098:	bb53      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1409a:	7a23      	ldrb	r3, [r4, #8]
   1409c:	3301      	adds	r3, #1
   1409e:	b2db      	uxtb	r3, r3
   140a0:	7223      	strb	r3, [r4, #8]
   140a2:	bb2b      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140a4:	79e3      	ldrb	r3, [r4, #7]
   140a6:	3301      	adds	r3, #1
   140a8:	b2db      	uxtb	r3, r3
   140aa:	71e3      	strb	r3, [r4, #7]
   140ac:	bb03      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140ae:	79a3      	ldrb	r3, [r4, #6]
   140b0:	3301      	adds	r3, #1
   140b2:	b2db      	uxtb	r3, r3
   140b4:	71a3      	strb	r3, [r4, #6]
   140b6:	b9db      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140b8:	7963      	ldrb	r3, [r4, #5]
   140ba:	3301      	adds	r3, #1
   140bc:	b2db      	uxtb	r3, r3
   140be:	7163      	strb	r3, [r4, #5]
   140c0:	b9b3      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140c2:	7923      	ldrb	r3, [r4, #4]
   140c4:	3301      	adds	r3, #1
   140c6:	b2db      	uxtb	r3, r3
   140c8:	7123      	strb	r3, [r4, #4]
   140ca:	b98b      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140cc:	78e3      	ldrb	r3, [r4, #3]
   140ce:	3301      	adds	r3, #1
   140d0:	b2db      	uxtb	r3, r3
   140d2:	70e3      	strb	r3, [r4, #3]
   140d4:	b963      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140d6:	78a3      	ldrb	r3, [r4, #2]
   140d8:	3301      	adds	r3, #1
   140da:	b2db      	uxtb	r3, r3
   140dc:	70a3      	strb	r3, [r4, #2]
   140de:	b93b      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140e0:	7863      	ldrb	r3, [r4, #1]
   140e2:	3301      	adds	r3, #1
   140e4:	b2db      	uxtb	r3, r3
   140e6:	7063      	strb	r3, [r4, #1]
   140e8:	b913      	cbnz	r3, 140f0 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   140ea:	7823      	ldrb	r3, [r4, #0]
   140ec:	3301      	adds	r3, #1
   140ee:	7023      	strb	r3, [r4, #0]
   140f0:	463b      	mov	r3, r7
   140f2:	4622      	mov	r2, r4
   140f4:	2101      	movs	r1, #1
   140f6:	4640      	mov	r0, r8
   140f8:	f000 feaa 	bl	14e50 <cc_mbedtls_aes_crypt_ecb>
   140fc:	4683      	mov	fp, r0
   140fe:	2800      	cmp	r0, #0
   14100:	d093      	beq.n	1402a <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   14102:	f8da 3000 	ldr.w	r3, [sl]
   14106:	4648      	mov	r0, r9
   14108:	4798      	blx	r3
   1410a:	2120      	movs	r1, #32
   1410c:	4603      	mov	r3, r0
   1410e:	a804      	add	r0, sp, #16
   14110:	2b00      	cmp	r3, #0
   14112:	bf18      	it	ne
   14114:	469b      	movne	fp, r3
   14116:	f7ff fcf9 	bl	13b0c <mbedtls_platform_zeroize>
   1411a:	2110      	movs	r1, #16
   1411c:	4638      	mov	r0, r7
   1411e:	f7ff fcf5 	bl	13b0c <mbedtls_platform_zeroize>
   14122:	4658      	mov	r0, fp
   14124:	b00d      	add	sp, #52	; 0x34
   14126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412a:	463a      	mov	r2, r7
   1412c:	4641      	mov	r1, r8
   1412e:	2300      	movs	r3, #0
   14130:	4620      	mov	r0, r4
   14132:	f7ff fe81 	bl	13e38 <mbedtls_ctr_drbg_reseed_internal>
   14136:	f8df a068 	ldr.w	sl, [pc, #104]	; 141a0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1413a:	2800      	cmp	r0, #0
   1413c:	f43f af6d 	beq.w	1401a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   14140:	f8da 3000 	ldr.w	r3, [sl]
   14144:	4648      	mov	r0, r9
   14146:	4798      	blx	r3
   14148:	4683      	mov	fp, r0
   1414a:	2800      	cmp	r0, #0
   1414c:	f43f af65 	beq.w	1401a <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   14150:	e7e7      	b.n	14122 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   14152:	a904      	add	r1, sp, #16
   14154:	4620      	mov	r0, r4
   14156:	f7ff fdcb 	bl	13cf0 <ctr_drbg_update_internal>
   1415a:	4683      	mov	fp, r0
   1415c:	2800      	cmp	r0, #0
   1415e:	d1d0      	bne.n	14102 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   14160:	6923      	ldr	r3, [r4, #16]
   14162:	3301      	adds	r3, #1
   14164:	6123      	str	r3, [r4, #16]
   14166:	e7cc      	b.n	14102 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   14168:	463a      	mov	r2, r7
   1416a:	4641      	mov	r1, r8
   1416c:	a804      	add	r0, sp, #16
   1416e:	f7ff fcd7 	bl	13b20 <block_cipher_df>
   14172:	4683      	mov	fp, r0
   14174:	b118      	cbz	r0, 1417e <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   14176:	f8df a028 	ldr.w	sl, [pc, #40]	; 141a0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1417a:	466f      	mov	r7, sp
   1417c:	e7c1      	b.n	14102 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1417e:	a904      	add	r1, sp, #16
   14180:	4620      	mov	r0, r4
   14182:	f7ff fdb5 	bl	13cf0 <ctr_drbg_update_internal>
   14186:	4683      	mov	fp, r0
   14188:	2800      	cmp	r0, #0
   1418a:	f43f af44 	beq.w	14016 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1418e:	e7f2      	b.n	14176 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   14190:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   14194:	e7c5      	b.n	14122 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   14196:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1419a:	e7c2      	b.n	14122 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1419c:	2000051c 	.word	0x2000051c
   141a0:	20000518 	.word	0x20000518

000141a4 <entropy_update>:
   141a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   141a8:	2b20      	cmp	r3, #32
   141aa:	b08b      	sub	sp, #44	; 0x2c
   141ac:	461d      	mov	r5, r3
   141ae:	4606      	mov	r6, r0
   141b0:	4688      	mov	r8, r1
   141b2:	4691      	mov	r9, r2
   141b4:	d826      	bhi.n	14204 <entropy_update+0x60>
   141b6:	b2db      	uxtb	r3, r3
   141b8:	af02      	add	r7, sp, #8
   141ba:	f88d 8004 	strb.w	r8, [sp, #4]
   141be:	46b0      	mov	r8, r6
   141c0:	f88d 3005 	strb.w	r3, [sp, #5]
   141c4:	f858 1b04 	ldr.w	r1, [r8], #4
   141c8:	b921      	cbnz	r1, 141d4 <entropy_update+0x30>
   141ca:	4640      	mov	r0, r8
   141cc:	f000 fe84 	bl	14ed8 <cc_mbedtls_sha256_starts>
   141d0:	4604      	mov	r4, r0
   141d2:	b940      	cbnz	r0, 141e6 <entropy_update+0x42>
   141d4:	2301      	movs	r3, #1
   141d6:	6033      	str	r3, [r6, #0]
   141d8:	2202      	movs	r2, #2
   141da:	a901      	add	r1, sp, #4
   141dc:	4640      	mov	r0, r8
   141de:	f000 fe8f 	bl	14f00 <cc_mbedtls_sha256_update>
   141e2:	4604      	mov	r4, r0
   141e4:	b138      	cbz	r0, 141f6 <entropy_update+0x52>
   141e6:	4638      	mov	r0, r7
   141e8:	2120      	movs	r1, #32
   141ea:	f7ff fc8f 	bl	13b0c <mbedtls_platform_zeroize>
   141ee:	4620      	mov	r0, r4
   141f0:	b00b      	add	sp, #44	; 0x2c
   141f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   141f6:	462a      	mov	r2, r5
   141f8:	4649      	mov	r1, r9
   141fa:	4640      	mov	r0, r8
   141fc:	f000 fe80 	bl	14f00 <cc_mbedtls_sha256_update>
   14200:	4604      	mov	r4, r0
   14202:	e7f0      	b.n	141e6 <entropy_update+0x42>
   14204:	af02      	add	r7, sp, #8
   14206:	4619      	mov	r1, r3
   14208:	4610      	mov	r0, r2
   1420a:	2300      	movs	r3, #0
   1420c:	463a      	mov	r2, r7
   1420e:	f000 fffd 	bl	1520c <cc_mbedtls_sha256>
   14212:	4604      	mov	r4, r0
   14214:	2800      	cmp	r0, #0
   14216:	d1e6      	bne.n	141e6 <entropy_update+0x42>
   14218:	2320      	movs	r3, #32
   1421a:	46b9      	mov	r9, r7
   1421c:	461d      	mov	r5, r3
   1421e:	e7cc      	b.n	141ba <entropy_update+0x16>

00014220 <entropy_gather_internal.part.0>:
   14220:	b5f0      	push	{r4, r5, r6, r7, lr}
   14222:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   14226:	b0a7      	sub	sp, #156	; 0x9c
   14228:	2b00      	cmp	r3, #0
   1422a:	bfd8      	it	le
   1422c:	ae02      	addle	r6, sp, #8
   1422e:	dd2c      	ble.n	1428a <entropy_gather_internal.part.0+0x6a>
   14230:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   14234:	4605      	mov	r5, r0
   14236:	2300      	movs	r3, #0
   14238:	ae02      	add	r6, sp, #8
   1423a:	9301      	str	r3, [sp, #4]
   1423c:	f1a4 0701 	sub.w	r7, r4, #1
   14240:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   14244:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   14248:	ab01      	add	r3, sp, #4
   1424a:	2290      	movs	r2, #144	; 0x90
   1424c:	4631      	mov	r1, r6
   1424e:	47a0      	blx	r4
   14250:	fab7 f787 	clz	r7, r7
   14254:	097f      	lsrs	r7, r7, #5
   14256:	4604      	mov	r4, r0
   14258:	b910      	cbnz	r0, 14260 <entropy_gather_internal.part.0+0x40>
   1425a:	9b01      	ldr	r3, [sp, #4]
   1425c:	b93b      	cbnz	r3, 1426e <entropy_gather_internal.part.0+0x4e>
   1425e:	b1a7      	cbz	r7, 1428a <entropy_gather_internal.part.0+0x6a>
   14260:	4630      	mov	r0, r6
   14262:	2190      	movs	r1, #144	; 0x90
   14264:	f7ff fc52 	bl	13b0c <mbedtls_platform_zeroize>
   14268:	4620      	mov	r0, r4
   1426a:	b027      	add	sp, #156	; 0x9c
   1426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1426e:	4601      	mov	r1, r0
   14270:	4632      	mov	r2, r6
   14272:	4628      	mov	r0, r5
   14274:	f7ff ff96 	bl	141a4 <entropy_update>
   14278:	b950      	cbnz	r0, 14290 <entropy_gather_internal.part.0+0x70>
   1427a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1427e:	9a01      	ldr	r2, [sp, #4]
   14280:	4413      	add	r3, r2
   14282:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   14286:	2f00      	cmp	r7, #0
   14288:	d1ea      	bne.n	14260 <entropy_gather_internal.part.0+0x40>
   1428a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1428e:	e7e7      	b.n	14260 <entropy_gather_internal.part.0+0x40>
   14290:	4604      	mov	r4, r0
   14292:	4620      	mov	r0, r4
   14294:	b027      	add	sp, #156	; 0x9c
   14296:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014298 <cc_mbedtls_entropy_init>:
   14298:	b570      	push	{r4, r5, r6, lr}
   1429a:	2500      	movs	r5, #0
   1429c:	4604      	mov	r4, r0
   1429e:	f504 7688 	add.w	r6, r4, #272	; 0x110
   142a2:	2214      	movs	r2, #20
   142a4:	4629      	mov	r1, r5
   142a6:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   142aa:	30fc      	adds	r0, #252	; 0xfc
   142ac:	f002 fe36 	bl	16f1c <memset>
   142b0:	2208      	movs	r2, #8
   142b2:	4629      	mov	r1, r5
   142b4:	4630      	mov	r0, r6
   142b6:	f002 fe31 	bl	16f1c <memset>
   142ba:	4b15      	ldr	r3, [pc, #84]	; (14310 <cc_mbedtls_entropy_init+0x78>)
   142bc:	4630      	mov	r0, r6
   142be:	681b      	ldr	r3, [r3, #0]
   142c0:	4798      	blx	r3
   142c2:	4620      	mov	r0, r4
   142c4:	f840 5b04 	str.w	r5, [r0], #4
   142c8:	f000 fdec 	bl	14ea4 <cc_mbedtls_sha256_init>
   142cc:	4b11      	ldr	r3, [pc, #68]	; (14314 <cc_mbedtls_entropy_init+0x7c>)
   142ce:	4630      	mov	r0, r6
   142d0:	681b      	ldr	r3, [r3, #0]
   142d2:	4798      	blx	r3
   142d4:	b9d8      	cbnz	r0, 1430e <cc_mbedtls_entropy_init+0x76>
   142d6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   142da:	42ab      	cmp	r3, r5
   142dc:	dc11      	bgt.n	14302 <cc_mbedtls_entropy_init+0x6a>
   142de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   142e2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   142e6:	2120      	movs	r1, #32
   142e8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   142ec:	2101      	movs	r1, #1
   142ee:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   142f2:	3301      	adds	r3, #1
   142f4:	4908      	ldr	r1, [pc, #32]	; (14318 <cc_mbedtls_entropy_init+0x80>)
   142f6:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   142fa:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   142fe:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   14302:	4b06      	ldr	r3, [pc, #24]	; (1431c <cc_mbedtls_entropy_init+0x84>)
   14304:	4630      	mov	r0, r6
   14306:	681b      	ldr	r3, [r3, #0]
   14308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1430c:	4718      	bx	r3
   1430e:	bd70      	pop	{r4, r5, r6, pc}
   14310:	20000520 	.word	0x20000520
   14314:	2000051c 	.word	0x2000051c
   14318:	00014cf5 	.word	0x00014cf5
   1431c:	20000518 	.word	0x20000518

00014320 <cc_mbedtls_entropy_func>:
   14320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14324:	2a20      	cmp	r2, #32
   14326:	b088      	sub	sp, #32
   14328:	d879      	bhi.n	1441e <cc_mbedtls_entropy_func+0xfe>
   1432a:	4b3e      	ldr	r3, [pc, #248]	; (14424 <cc_mbedtls_entropy_func+0x104>)
   1432c:	f500 7988 	add.w	r9, r0, #272	; 0x110
   14330:	681b      	ldr	r3, [r3, #0]
   14332:	4604      	mov	r4, r0
   14334:	4648      	mov	r0, r9
   14336:	4617      	mov	r7, r2
   14338:	4688      	mov	r8, r1
   1433a:	4798      	blx	r3
   1433c:	4605      	mov	r5, r0
   1433e:	b9f8      	cbnz	r0, 14380 <cc_mbedtls_entropy_func+0x60>
   14340:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   14344:	f240 1601 	movw	r6, #257	; 0x101
   14348:	2b00      	cmp	r3, #0
   1434a:	d064      	beq.n	14416 <cc_mbedtls_entropy_func+0xf6>
   1434c:	4620      	mov	r0, r4
   1434e:	f7ff ff67 	bl	14220 <entropy_gather_internal.part.0>
   14352:	4605      	mov	r5, r0
   14354:	b938      	cbnz	r0, 14366 <cc_mbedtls_entropy_func+0x46>
   14356:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1435a:	2b00      	cmp	r3, #0
   1435c:	dc14      	bgt.n	14388 <cc_mbedtls_entropy_func+0x68>
   1435e:	3e01      	subs	r6, #1
   14360:	d1f2      	bne.n	14348 <cc_mbedtls_entropy_func+0x28>
   14362:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   14366:	466e      	mov	r6, sp
   14368:	2120      	movs	r1, #32
   1436a:	4630      	mov	r0, r6
   1436c:	f7ff fbce 	bl	13b0c <mbedtls_platform_zeroize>
   14370:	4b2d      	ldr	r3, [pc, #180]	; (14428 <cc_mbedtls_entropy_func+0x108>)
   14372:	4648      	mov	r0, r9
   14374:	681b      	ldr	r3, [r3, #0]
   14376:	4798      	blx	r3
   14378:	2800      	cmp	r0, #0
   1437a:	bf18      	it	ne
   1437c:	f06f 051d 	mvnne.w	r5, #29
   14380:	4628      	mov	r0, r5
   14382:	b008      	add	sp, #32
   14384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14388:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   1438c:	4293      	cmp	r3, r2
   1438e:	d303      	bcc.n	14398 <cc_mbedtls_entropy_func+0x78>
   14390:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   14394:	2a01      	cmp	r2, #1
   14396:	d002      	beq.n	1439e <cc_mbedtls_entropy_func+0x7e>
   14398:	3e01      	subs	r6, #1
   1439a:	d1d7      	bne.n	1434c <cc_mbedtls_entropy_func+0x2c>
   1439c:	e7e1      	b.n	14362 <cc_mbedtls_entropy_func+0x42>
   1439e:	2b1f      	cmp	r3, #31
   143a0:	d9fa      	bls.n	14398 <cc_mbedtls_entropy_func+0x78>
   143a2:	466e      	mov	r6, sp
   143a4:	4601      	mov	r1, r0
   143a6:	2220      	movs	r2, #32
   143a8:	4630      	mov	r0, r6
   143aa:	f104 0a04 	add.w	sl, r4, #4
   143ae:	f002 fdb5 	bl	16f1c <memset>
   143b2:	4631      	mov	r1, r6
   143b4:	4650      	mov	r0, sl
   143b6:	f000 fdcd 	bl	14f54 <cc_mbedtls_sha256_finish>
   143ba:	4605      	mov	r5, r0
   143bc:	2800      	cmp	r0, #0
   143be:	d1d3      	bne.n	14368 <cc_mbedtls_entropy_func+0x48>
   143c0:	4650      	mov	r0, sl
   143c2:	f000 fd83 	bl	14ecc <cc_mbedtls_sha256_free>
   143c6:	4650      	mov	r0, sl
   143c8:	f000 fd6c 	bl	14ea4 <cc_mbedtls_sha256_init>
   143cc:	4629      	mov	r1, r5
   143ce:	4650      	mov	r0, sl
   143d0:	f000 fd82 	bl	14ed8 <cc_mbedtls_sha256_starts>
   143d4:	4605      	mov	r5, r0
   143d6:	2800      	cmp	r0, #0
   143d8:	d1c6      	bne.n	14368 <cc_mbedtls_entropy_func+0x48>
   143da:	4650      	mov	r0, sl
   143dc:	2220      	movs	r2, #32
   143de:	4631      	mov	r1, r6
   143e0:	f000 fd8e 	bl	14f00 <cc_mbedtls_sha256_update>
   143e4:	4605      	mov	r5, r0
   143e6:	2800      	cmp	r0, #0
   143e8:	d1be      	bne.n	14368 <cc_mbedtls_entropy_func+0x48>
   143ea:	4603      	mov	r3, r0
   143ec:	4632      	mov	r2, r6
   143ee:	2120      	movs	r1, #32
   143f0:	4630      	mov	r0, r6
   143f2:	f000 ff0b 	bl	1520c <cc_mbedtls_sha256>
   143f6:	4605      	mov	r5, r0
   143f8:	2800      	cmp	r0, #0
   143fa:	d1b5      	bne.n	14368 <cc_mbedtls_entropy_func+0x48>
   143fc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   14400:	2b00      	cmp	r3, #0
   14402:	bfc4      	itt	gt
   14404:	2300      	movgt	r3, #0
   14406:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1440a:	463a      	mov	r2, r7
   1440c:	4640      	mov	r0, r8
   1440e:	4631      	mov	r1, r6
   14410:	f002 fd79 	bl	16f06 <memcpy>
   14414:	e7a8      	b.n	14368 <cc_mbedtls_entropy_func+0x48>
   14416:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1441a:	466e      	mov	r6, sp
   1441c:	e7a4      	b.n	14368 <cc_mbedtls_entropy_func+0x48>
   1441e:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   14422:	e7ad      	b.n	14380 <cc_mbedtls_entropy_func+0x60>
   14424:	2000051c 	.word	0x2000051c
   14428:	20000518 	.word	0x20000518

0001442c <RndStartupTest.constprop.0>:
   1442c:	b530      	push	{r4, r5, lr}
   1442e:	b08d      	sub	sp, #52	; 0x34
   14430:	2100      	movs	r1, #0
   14432:	2228      	movs	r2, #40	; 0x28
   14434:	a802      	add	r0, sp, #8
   14436:	9101      	str	r1, [sp, #4]
   14438:	f002 fd70 	bl	16f1c <memset>
   1443c:	a802      	add	r0, sp, #8
   1443e:	f000 ff0d 	bl	1525c <RNG_PLAT_SetUserRngParameters>
   14442:	4604      	mov	r4, r0
   14444:	b110      	cbz	r0, 1444c <RndStartupTest.constprop.0+0x20>
   14446:	4620      	mov	r0, r4
   14448:	b00d      	add	sp, #52	; 0x34
   1444a:	bd30      	pop	{r4, r5, pc}
   1444c:	4d17      	ldr	r5, [pc, #92]	; (144ac <RndStartupTest.constprop.0+0x80>)
   1444e:	f04f 31ff 	mov.w	r1, #4294967295
   14452:	6828      	ldr	r0, [r5, #0]
   14454:	f000 f944 	bl	146e0 <CC_PalMutexLock>
   14458:	4604      	mov	r4, r0
   1445a:	b120      	cbz	r0, 14466 <RndStartupTest.constprop.0+0x3a>
   1445c:	4814      	ldr	r0, [pc, #80]	; (144b0 <RndStartupTest.constprop.0+0x84>)
   1445e:	f7ff fa33 	bl	138c8 <CC_PalAbort>
   14462:	2c01      	cmp	r4, #1
   14464:	d018      	beq.n	14498 <RndStartupTest.constprop.0+0x6c>
   14466:	2000      	movs	r0, #0
   14468:	f000 f96a 	bl	14740 <CC_PalPowerSaveModeSelect>
   1446c:	b9d0      	cbnz	r0, 144a4 <RndStartupTest.constprop.0+0x78>
   1446e:	4a11      	ldr	r2, [pc, #68]	; (144b4 <RndStartupTest.constprop.0+0x88>)
   14470:	a902      	add	r1, sp, #8
   14472:	a801      	add	r0, sp, #4
   14474:	f000 fc30 	bl	14cd8 <LLF_RND_RunTrngStartupTest>
   14478:	4604      	mov	r4, r0
   1447a:	2001      	movs	r0, #1
   1447c:	f000 f960 	bl	14740 <CC_PalPowerSaveModeSelect>
   14480:	b960      	cbnz	r0, 1449c <RndStartupTest.constprop.0+0x70>
   14482:	6828      	ldr	r0, [r5, #0]
   14484:	f000 f934 	bl	146f0 <CC_PalMutexUnlock>
   14488:	2800      	cmp	r0, #0
   1448a:	d0dc      	beq.n	14446 <RndStartupTest.constprop.0+0x1a>
   1448c:	480a      	ldr	r0, [pc, #40]	; (144b8 <RndStartupTest.constprop.0+0x8c>)
   1448e:	f7ff fa1b 	bl	138c8 <CC_PalAbort>
   14492:	4620      	mov	r0, r4
   14494:	b00d      	add	sp, #52	; 0x34
   14496:	bd30      	pop	{r4, r5, pc}
   14498:	2405      	movs	r4, #5
   1449a:	e7f2      	b.n	14482 <RndStartupTest.constprop.0+0x56>
   1449c:	4807      	ldr	r0, [pc, #28]	; (144bc <RndStartupTest.constprop.0+0x90>)
   1449e:	f7ff fa13 	bl	138c8 <CC_PalAbort>
   144a2:	e7ee      	b.n	14482 <RndStartupTest.constprop.0+0x56>
   144a4:	4806      	ldr	r0, [pc, #24]	; (144c0 <RndStartupTest.constprop.0+0x94>)
   144a6:	f7ff fa0f 	bl	138c8 <CC_PalAbort>
   144aa:	e7e0      	b.n	1446e <RndStartupTest.constprop.0+0x42>
   144ac:	20000504 	.word	0x20000504
   144b0:	00018ee4 	.word	0x00018ee4
   144b4:	20002b48 	.word	0x20002b48
   144b8:	00018f3c 	.word	0x00018f3c
   144bc:	00018f1c 	.word	0x00018f1c
   144c0:	00018efc 	.word	0x00018efc

000144c4 <CC_LibInit>:
   144c4:	b530      	push	{r4, r5, lr}
   144c6:	b083      	sub	sp, #12
   144c8:	f000 f85c 	bl	14584 <CC_HalInit>
   144cc:	b128      	cbz	r0, 144da <CC_LibInit+0x16>
   144ce:	f000 f8ab 	bl	14628 <CC_PalTerminate>
   144d2:	2403      	movs	r4, #3
   144d4:	4620      	mov	r0, r4
   144d6:	b003      	add	sp, #12
   144d8:	bd30      	pop	{r4, r5, pc}
   144da:	f000 f877 	bl	145cc <CC_PalInit>
   144de:	b9d8      	cbnz	r0, 14518 <CC_LibInit+0x54>
   144e0:	f000 f92e 	bl	14740 <CC_PalPowerSaveModeSelect>
   144e4:	b9e0      	cbnz	r0, 14520 <CC_LibInit+0x5c>
   144e6:	4c22      	ldr	r4, [pc, #136]	; (14570 <CC_LibInit+0xac>)
   144e8:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   144ec:	0e1b      	lsrs	r3, r3, #24
   144ee:	2bf0      	cmp	r3, #240	; 0xf0
   144f0:	d10a      	bne.n	14508 <CC_LibInit+0x44>
   144f2:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   144f6:	4b1f      	ldr	r3, [pc, #124]	; (14574 <CC_LibInit+0xb0>)
   144f8:	429a      	cmp	r2, r3
   144fa:	d031      	beq.n	14560 <CC_LibInit+0x9c>
   144fc:	f000 f844 	bl	14588 <CC_HalTerminate>
   14500:	2407      	movs	r4, #7
   14502:	f000 f891 	bl	14628 <CC_PalTerminate>
   14506:	e7e5      	b.n	144d4 <CC_LibInit+0x10>
   14508:	f000 f83e 	bl	14588 <CC_HalTerminate>
   1450c:	f000 f88c 	bl	14628 <CC_PalTerminate>
   14510:	2406      	movs	r4, #6
   14512:	4620      	mov	r0, r4
   14514:	b003      	add	sp, #12
   14516:	bd30      	pop	{r4, r5, pc}
   14518:	2404      	movs	r4, #4
   1451a:	4620      	mov	r0, r4
   1451c:	b003      	add	sp, #12
   1451e:	bd30      	pop	{r4, r5, pc}
   14520:	f000 f832 	bl	14588 <CC_HalTerminate>
   14524:	f000 f880 	bl	14628 <CC_PalTerminate>
   14528:	f7ff ff80 	bl	1442c <RndStartupTest.constprop.0>
   1452c:	4604      	mov	r4, r0
   1452e:	b998      	cbnz	r0, 14558 <CC_LibInit+0x94>
   14530:	4d11      	ldr	r5, [pc, #68]	; (14578 <CC_LibInit+0xb4>)
   14532:	682b      	ldr	r3, [r5, #0]
   14534:	2b00      	cmp	r3, #0
   14536:	d1cd      	bne.n	144d4 <CC_LibInit+0x10>
   14538:	4602      	mov	r2, r0
   1453a:	4601      	mov	r1, r0
   1453c:	f7ff f9e6 	bl	1390c <nrf_cc3xx_platform_ctr_drbg_init>
   14540:	b950      	cbnz	r0, 14558 <CC_LibInit+0x94>
   14542:	490e      	ldr	r1, [pc, #56]	; (1457c <CC_LibInit+0xb8>)
   14544:	ab01      	add	r3, sp, #4
   14546:	2268      	movs	r2, #104	; 0x68
   14548:	f7ff fa10 	bl	1396c <nrf_cc3xx_platform_ctr_drbg_get>
   1454c:	b920      	cbnz	r0, 14558 <CC_LibInit+0x94>
   1454e:	4b0c      	ldr	r3, [pc, #48]	; (14580 <CC_LibInit+0xbc>)
   14550:	602b      	str	r3, [r5, #0]
   14552:	4620      	mov	r0, r4
   14554:	b003      	add	sp, #12
   14556:	bd30      	pop	{r4, r5, pc}
   14558:	2405      	movs	r4, #5
   1455a:	4620      	mov	r0, r4
   1455c:	b003      	add	sp, #12
   1455e:	bd30      	pop	{r4, r5, pc}
   14560:	2001      	movs	r0, #1
   14562:	f000 f8ed 	bl	14740 <CC_PalPowerSaveModeSelect>
   14566:	2800      	cmp	r0, #0
   14568:	d1da      	bne.n	14520 <CC_LibInit+0x5c>
   1456a:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1456e:	e7db      	b.n	14528 <CC_LibInit+0x64>
   14570:	5002b000 	.word	0x5002b000
   14574:	20e00000 	.word	0x20e00000
   14578:	20002d68 	.word	0x20002d68
   1457c:	20002d6c 	.word	0x20002d6c
   14580:	5a5aea5a 	.word	0x5a5aea5a

00014584 <CC_HalInit>:
   14584:	2000      	movs	r0, #0
   14586:	4770      	bx	lr

00014588 <CC_HalTerminate>:
   14588:	2000      	movs	r0, #0
   1458a:	4770      	bx	lr

0001458c <CC_HalClearInterruptBit>:
   1458c:	0543      	lsls	r3, r0, #21
   1458e:	d504      	bpl.n	1459a <CC_HalClearInterruptBit+0xe>
   14590:	4b04      	ldr	r3, [pc, #16]	; (145a4 <CC_HalClearInterruptBit+0x18>)
   14592:	f04f 32ff 	mov.w	r2, #4294967295
   14596:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1459a:	4b02      	ldr	r3, [pc, #8]	; (145a4 <CC_HalClearInterruptBit+0x18>)
   1459c:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   145a0:	4770      	bx	lr
   145a2:	bf00      	nop
   145a4:	5002b000 	.word	0x5002b000

000145a8 <CC_HalMaskInterrupt>:
   145a8:	4b01      	ldr	r3, [pc, #4]	; (145b0 <CC_HalMaskInterrupt+0x8>)
   145aa:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   145ae:	4770      	bx	lr
   145b0:	5002b000 	.word	0x5002b000

000145b4 <CC_HalWaitInterrupt>:
   145b4:	b108      	cbz	r0, 145ba <CC_HalWaitInterrupt+0x6>
   145b6:	f000 b86b 	b.w	14690 <CC_PalWaitInterrupt>
   145ba:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   145be:	4770      	bx	lr

000145c0 <CC_HalWaitInterruptRND>:
   145c0:	b108      	cbz	r0, 145c6 <CC_HalWaitInterruptRND+0x6>
   145c2:	f000 b84f 	b.w	14664 <CC_PalWaitInterruptRND>
   145c6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   145ca:	4770      	bx	lr

000145cc <CC_PalInit>:
   145cc:	b510      	push	{r4, lr}
   145ce:	4811      	ldr	r0, [pc, #68]	; (14614 <CC_PalInit+0x48>)
   145d0:	f000 f872 	bl	146b8 <CC_PalMutexCreate>
   145d4:	b100      	cbz	r0, 145d8 <CC_PalInit+0xc>
   145d6:	bd10      	pop	{r4, pc}
   145d8:	480f      	ldr	r0, [pc, #60]	; (14618 <CC_PalInit+0x4c>)
   145da:	f000 f86d 	bl	146b8 <CC_PalMutexCreate>
   145de:	2800      	cmp	r0, #0
   145e0:	d1f9      	bne.n	145d6 <CC_PalInit+0xa>
   145e2:	4c0e      	ldr	r4, [pc, #56]	; (1461c <CC_PalInit+0x50>)
   145e4:	4620      	mov	r0, r4
   145e6:	f000 f867 	bl	146b8 <CC_PalMutexCreate>
   145ea:	2800      	cmp	r0, #0
   145ec:	d1f3      	bne.n	145d6 <CC_PalInit+0xa>
   145ee:	4b0c      	ldr	r3, [pc, #48]	; (14620 <CC_PalInit+0x54>)
   145f0:	480c      	ldr	r0, [pc, #48]	; (14624 <CC_PalInit+0x58>)
   145f2:	601c      	str	r4, [r3, #0]
   145f4:	f000 f860 	bl	146b8 <CC_PalMutexCreate>
   145f8:	4601      	mov	r1, r0
   145fa:	2800      	cmp	r0, #0
   145fc:	d1eb      	bne.n	145d6 <CC_PalInit+0xa>
   145fe:	f000 f82d 	bl	1465c <CC_PalDmaInit>
   14602:	4604      	mov	r4, r0
   14604:	b108      	cbz	r0, 1460a <CC_PalInit+0x3e>
   14606:	4620      	mov	r0, r4
   14608:	bd10      	pop	{r4, pc}
   1460a:	f000 f87b 	bl	14704 <CC_PalPowerSaveModeInit>
   1460e:	4620      	mov	r0, r4
   14610:	e7fa      	b.n	14608 <CC_PalInit+0x3c>
   14612:	bf00      	nop
   14614:	20000514 	.word	0x20000514
   14618:	20000510 	.word	0x20000510
   1461c:	2000050c 	.word	0x2000050c
   14620:	20000504 	.word	0x20000504
   14624:	20000508 	.word	0x20000508

00014628 <CC_PalTerminate>:
   14628:	b508      	push	{r3, lr}
   1462a:	4808      	ldr	r0, [pc, #32]	; (1464c <CC_PalTerminate+0x24>)
   1462c:	f000 f84e 	bl	146cc <CC_PalMutexDestroy>
   14630:	4807      	ldr	r0, [pc, #28]	; (14650 <CC_PalTerminate+0x28>)
   14632:	f000 f84b 	bl	146cc <CC_PalMutexDestroy>
   14636:	4807      	ldr	r0, [pc, #28]	; (14654 <CC_PalTerminate+0x2c>)
   14638:	f000 f848 	bl	146cc <CC_PalMutexDestroy>
   1463c:	4806      	ldr	r0, [pc, #24]	; (14658 <CC_PalTerminate+0x30>)
   1463e:	f000 f845 	bl	146cc <CC_PalMutexDestroy>
   14642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14646:	f000 b80b 	b.w	14660 <CC_PalDmaTerminate>
   1464a:	bf00      	nop
   1464c:	20000514 	.word	0x20000514
   14650:	20000510 	.word	0x20000510
   14654:	2000050c 	.word	0x2000050c
   14658:	20000508 	.word	0x20000508

0001465c <CC_PalDmaInit>:
   1465c:	2000      	movs	r0, #0
   1465e:	4770      	bx	lr

00014660 <CC_PalDmaTerminate>:
   14660:	4770      	bx	lr
   14662:	bf00      	nop

00014664 <CC_PalWaitInterruptRND>:
   14664:	b410      	push	{r4}
   14666:	4c09      	ldr	r4, [pc, #36]	; (1468c <CC_PalWaitInterruptRND+0x28>)
   14668:	4602      	mov	r2, r0
   1466a:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   1466e:	4213      	tst	r3, r2
   14670:	d0fb      	beq.n	1466a <CC_PalWaitInterruptRND+0x6>
   14672:	b121      	cbz	r1, 1467e <CC_PalWaitInterruptRND+0x1a>
   14674:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   14678:	600b      	str	r3, [r1, #0]
   1467a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1467e:	4b03      	ldr	r3, [pc, #12]	; (1468c <CC_PalWaitInterruptRND+0x28>)
   14680:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   14684:	2000      	movs	r0, #0
   14686:	bc10      	pop	{r4}
   14688:	4770      	bx	lr
   1468a:	bf00      	nop
   1468c:	5002b000 	.word	0x5002b000

00014690 <CC_PalWaitInterrupt>:
   14690:	4a04      	ldr	r2, [pc, #16]	; (146a4 <CC_PalWaitInterrupt+0x14>)
   14692:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   14696:	4218      	tst	r0, r3
   14698:	d0fb      	beq.n	14692 <CC_PalWaitInterrupt+0x2>
   1469a:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   1469e:	2000      	movs	r0, #0
   146a0:	4770      	bx	lr
   146a2:	bf00      	nop
   146a4:	5002b000 	.word	0x5002b000

000146a8 <CC_PalMemCopyPlat>:
   146a8:	f002 bc16 	b.w	16ed8 <memmove>

000146ac <CC_PalMemSetPlat>:
   146ac:	f002 bc36 	b.w	16f1c <memset>

000146b0 <CC_PalMemSetZeroPlat>:
   146b0:	460a      	mov	r2, r1
   146b2:	2100      	movs	r1, #0
   146b4:	f002 bc32 	b.w	16f1c <memset>

000146b8 <CC_PalMutexCreate>:
   146b8:	b508      	push	{r3, lr}
   146ba:	4b03      	ldr	r3, [pc, #12]	; (146c8 <CC_PalMutexCreate+0x10>)
   146bc:	6802      	ldr	r2, [r0, #0]
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	6810      	ldr	r0, [r2, #0]
   146c2:	4798      	blx	r3
   146c4:	2000      	movs	r0, #0
   146c6:	bd08      	pop	{r3, pc}
   146c8:	200004d0 	.word	0x200004d0

000146cc <CC_PalMutexDestroy>:
   146cc:	b508      	push	{r3, lr}
   146ce:	4b03      	ldr	r3, [pc, #12]	; (146dc <CC_PalMutexDestroy+0x10>)
   146d0:	6802      	ldr	r2, [r0, #0]
   146d2:	685b      	ldr	r3, [r3, #4]
   146d4:	6810      	ldr	r0, [r2, #0]
   146d6:	4798      	blx	r3
   146d8:	2000      	movs	r0, #0
   146da:	bd08      	pop	{r3, pc}
   146dc:	200004d0 	.word	0x200004d0

000146e0 <CC_PalMutexLock>:
   146e0:	4b02      	ldr	r3, [pc, #8]	; (146ec <CC_PalMutexLock+0xc>)
   146e2:	6802      	ldr	r2, [r0, #0]
   146e4:	689b      	ldr	r3, [r3, #8]
   146e6:	6810      	ldr	r0, [r2, #0]
   146e8:	4718      	bx	r3
   146ea:	bf00      	nop
   146ec:	200004d0 	.word	0x200004d0

000146f0 <CC_PalMutexUnlock>:
   146f0:	b508      	push	{r3, lr}
   146f2:	4b03      	ldr	r3, [pc, #12]	; (14700 <CC_PalMutexUnlock+0x10>)
   146f4:	6802      	ldr	r2, [r0, #0]
   146f6:	68db      	ldr	r3, [r3, #12]
   146f8:	6810      	ldr	r0, [r2, #0]
   146fa:	4798      	blx	r3
   146fc:	2000      	movs	r0, #0
   146fe:	bd08      	pop	{r3, pc}
   14700:	200004d0 	.word	0x200004d0

00014704 <CC_PalPowerSaveModeInit>:
   14704:	b570      	push	{r4, r5, r6, lr}
   14706:	4c09      	ldr	r4, [pc, #36]	; (1472c <CC_PalPowerSaveModeInit+0x28>)
   14708:	4d09      	ldr	r5, [pc, #36]	; (14730 <CC_PalPowerSaveModeInit+0x2c>)
   1470a:	6920      	ldr	r0, [r4, #16]
   1470c:	68ab      	ldr	r3, [r5, #8]
   1470e:	4798      	blx	r3
   14710:	b118      	cbz	r0, 1471a <CC_PalPowerSaveModeInit+0x16>
   14712:	4b08      	ldr	r3, [pc, #32]	; (14734 <CC_PalPowerSaveModeInit+0x30>)
   14714:	4808      	ldr	r0, [pc, #32]	; (14738 <CC_PalPowerSaveModeInit+0x34>)
   14716:	685b      	ldr	r3, [r3, #4]
   14718:	4798      	blx	r3
   1471a:	4a08      	ldr	r2, [pc, #32]	; (1473c <CC_PalPowerSaveModeInit+0x38>)
   1471c:	68eb      	ldr	r3, [r5, #12]
   1471e:	6920      	ldr	r0, [r4, #16]
   14720:	2100      	movs	r1, #0
   14722:	6011      	str	r1, [r2, #0]
   14724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14728:	4718      	bx	r3
   1472a:	bf00      	nop
   1472c:	200004bc 	.word	0x200004bc
   14730:	200004d0 	.word	0x200004d0
   14734:	200004b4 	.word	0x200004b4
   14738:	00018f54 	.word	0x00018f54
   1473c:	20002dd4 	.word	0x20002dd4

00014740 <CC_PalPowerSaveModeSelect>:
   14740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14742:	4d1a      	ldr	r5, [pc, #104]	; (147ac <CC_PalPowerSaveModeSelect+0x6c>)
   14744:	4e1a      	ldr	r6, [pc, #104]	; (147b0 <CC_PalPowerSaveModeSelect+0x70>)
   14746:	4604      	mov	r4, r0
   14748:	68b2      	ldr	r2, [r6, #8]
   1474a:	6928      	ldr	r0, [r5, #16]
   1474c:	4790      	blx	r2
   1474e:	b9e8      	cbnz	r0, 1478c <CC_PalPowerSaveModeSelect+0x4c>
   14750:	4f18      	ldr	r7, [pc, #96]	; (147b4 <CC_PalPowerSaveModeSelect+0x74>)
   14752:	683b      	ldr	r3, [r7, #0]
   14754:	b14c      	cbz	r4, 1476a <CC_PalPowerSaveModeSelect+0x2a>
   14756:	b1a3      	cbz	r3, 14782 <CC_PalPowerSaveModeSelect+0x42>
   14758:	2b01      	cmp	r3, #1
   1475a:	d019      	beq.n	14790 <CC_PalPowerSaveModeSelect+0x50>
   1475c:	3b01      	subs	r3, #1
   1475e:	603b      	str	r3, [r7, #0]
   14760:	6928      	ldr	r0, [r5, #16]
   14762:	68f3      	ldr	r3, [r6, #12]
   14764:	4798      	blx	r3
   14766:	2000      	movs	r0, #0
   14768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1476a:	b943      	cbnz	r3, 1477e <CC_PalPowerSaveModeSelect+0x3e>
   1476c:	4a12      	ldr	r2, [pc, #72]	; (147b8 <CC_PalPowerSaveModeSelect+0x78>)
   1476e:	2101      	movs	r1, #1
   14770:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   14774:	4911      	ldr	r1, [pc, #68]	; (147bc <CC_PalPowerSaveModeSelect+0x7c>)
   14776:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   1477a:	2a00      	cmp	r2, #0
   1477c:	d1fb      	bne.n	14776 <CC_PalPowerSaveModeSelect+0x36>
   1477e:	3301      	adds	r3, #1
   14780:	603b      	str	r3, [r7, #0]
   14782:	68f3      	ldr	r3, [r6, #12]
   14784:	6928      	ldr	r0, [r5, #16]
   14786:	4798      	blx	r3
   14788:	2000      	movs	r0, #0
   1478a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1478c:	480c      	ldr	r0, [pc, #48]	; (147c0 <CC_PalPowerSaveModeSelect+0x80>)
   1478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14790:	4a0a      	ldr	r2, [pc, #40]	; (147bc <CC_PalPowerSaveModeSelect+0x7c>)
   14792:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   14796:	2b00      	cmp	r3, #0
   14798:	d1fb      	bne.n	14792 <CC_PalPowerSaveModeSelect+0x52>
   1479a:	4a07      	ldr	r2, [pc, #28]	; (147b8 <CC_PalPowerSaveModeSelect+0x78>)
   1479c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   147a0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   147a4:	f7ff ff00 	bl	145a8 <CC_HalMaskInterrupt>
   147a8:	683b      	ldr	r3, [r7, #0]
   147aa:	e7d7      	b.n	1475c <CC_PalPowerSaveModeSelect+0x1c>
   147ac:	200004bc 	.word	0x200004bc
   147b0:	200004d0 	.word	0x200004d0
   147b4:	20002dd4 	.word	0x20002dd4
   147b8:	5002a000 	.word	0x5002a000
   147bc:	5002b000 	.word	0x5002b000
   147c0:	ffff8fe9 	.word	0xffff8fe9

000147c4 <mutex_init>:
   147c4:	4b01      	ldr	r3, [pc, #4]	; (147cc <mutex_init+0x8>)
   147c6:	681b      	ldr	r3, [r3, #0]
   147c8:	4718      	bx	r3
   147ca:	bf00      	nop
   147cc:	200004d0 	.word	0x200004d0

000147d0 <mutex_lock>:
   147d0:	4b01      	ldr	r3, [pc, #4]	; (147d8 <mutex_lock+0x8>)
   147d2:	689b      	ldr	r3, [r3, #8]
   147d4:	4718      	bx	r3
   147d6:	bf00      	nop
   147d8:	200004d0 	.word	0x200004d0

000147dc <mutex_unlock>:
   147dc:	4b01      	ldr	r3, [pc, #4]	; (147e4 <mutex_unlock+0x8>)
   147de:	68db      	ldr	r3, [r3, #12]
   147e0:	4718      	bx	r3
   147e2:	bf00      	nop
   147e4:	200004d0 	.word	0x200004d0

000147e8 <startTrngHW>:
   147e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   147ec:	2800      	cmp	r0, #0
   147ee:	d078      	beq.n	148e2 <startTrngHW+0xfa>
   147f0:	460c      	mov	r4, r1
   147f2:	2900      	cmp	r1, #0
   147f4:	d075      	beq.n	148e2 <startTrngHW+0xfa>
   147f6:	461d      	mov	r5, r3
   147f8:	2b00      	cmp	r3, #0
   147fa:	d072      	beq.n	148e2 <startTrngHW+0xfa>
   147fc:	4607      	mov	r7, r0
   147fe:	b11a      	cbz	r2, 14808 <startTrngHW+0x20>
   14800:	2201      	movs	r2, #1
   14802:	2300      	movs	r3, #0
   14804:	602a      	str	r2, [r5, #0]
   14806:	6003      	str	r3, [r0, #0]
   14808:	682b      	ldr	r3, [r5, #0]
   1480a:	2b00      	cmp	r3, #0
   1480c:	d064      	beq.n	148d8 <startTrngHW+0xf0>
   1480e:	4629      	mov	r1, r5
   14810:	4620      	mov	r0, r4
   14812:	f000 fddb 	bl	153cc <LLF_RND_GetFastestRosc>
   14816:	4680      	mov	r8, r0
   14818:	2800      	cmp	r0, #0
   1481a:	d15f      	bne.n	148dc <startTrngHW+0xf4>
   1481c:	6828      	ldr	r0, [r5, #0]
   1481e:	4621      	mov	r1, r4
   14820:	f000 fdba 	bl	15398 <LLF_RND_GetRoscSampleCnt>
   14824:	4680      	mov	r8, r0
   14826:	2800      	cmp	r0, #0
   14828:	d158      	bne.n	148dc <startTrngHW+0xf4>
   1482a:	682b      	ldr	r3, [r5, #0]
   1482c:	2b08      	cmp	r3, #8
   1482e:	d06c      	beq.n	1490a <startTrngHW+0x122>
   14830:	2b04      	cmp	r3, #4
   14832:	d06d      	beq.n	14910 <startTrngHW+0x128>
   14834:	f1a3 0902 	sub.w	r9, r3, #2
   14838:	fab9 f989 	clz	r9, r9
   1483c:	ea4f 1959 	mov.w	r9, r9, lsr #5
   14840:	4e35      	ldr	r6, [pc, #212]	; (14918 <startTrngHW+0x130>)
   14842:	2101      	movs	r1, #1
   14844:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   14848:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   1484c:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   14850:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14852:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   14856:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   1485a:	4293      	cmp	r3, r2
   1485c:	d1f6      	bne.n	1484c <startTrngHW+0x64>
   1485e:	f04f 0a00 	mov.w	sl, #0
   14862:	f04f 30ff 	mov.w	r0, #4294967295
   14866:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   1486a:	f7ff fe8f 	bl	1458c <CC_HalClearInterruptBit>
   1486e:	f06f 031b 	mvn.w	r3, #27
   14872:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   14876:	4650      	mov	r0, sl
   14878:	f7ff fe96 	bl	145a8 <CC_HalMaskInterrupt>
   1487c:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   14880:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   14884:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   14888:	f7ff fe8e 	bl	145a8 <CC_HalMaskInterrupt>
   1488c:	230a      	movs	r3, #10
   1488e:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   14892:	9b08      	ldr	r3, [sp, #32]
   14894:	2b01      	cmp	r3, #1
   14896:	d029      	beq.n	148ec <startTrngHW+0x104>
   14898:	6923      	ldr	r3, [r4, #16]
   1489a:	4a20      	ldr	r2, [pc, #128]	; (1491c <startTrngHW+0x134>)
   1489c:	fba2 2303 	umull	r2, r3, r2, r3
   148a0:	091b      	lsrs	r3, r3, #4
   148a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   148a4:	fb02 f303 	mul.w	r3, r2, r3
   148a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   148ac:	4a1a      	ldr	r2, [pc, #104]	; (14918 <startTrngHW+0x130>)
   148ae:	03db      	lsls	r3, r3, #15
   148b0:	099b      	lsrs	r3, r3, #6
   148b2:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   148b6:	2301      	movs	r3, #1
   148b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   148bc:	683b      	ldr	r3, [r7, #0]
   148be:	682a      	ldr	r2, [r5, #0]
   148c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   148c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   148c8:	603b      	str	r3, [r7, #0]
   148ca:	682a      	ldr	r2, [r5, #0]
   148cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   148d0:	603b      	str	r3, [r7, #0]
   148d2:	4640      	mov	r0, r8
   148d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   148d8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 14920 <startTrngHW+0x138>
   148dc:	4640      	mov	r0, r8
   148de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   148e2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 14924 <startTrngHW+0x13c>
   148e6:	4640      	mov	r0, r8
   148e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   148ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   148f0:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   148f4:	3201      	adds	r2, #1
   148f6:	d006      	beq.n	14906 <startTrngHW+0x11e>
   148f8:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   148fc:	4a07      	ldr	r2, [pc, #28]	; (1491c <startTrngHW+0x134>)
   148fe:	fba2 2303 	umull	r2, r3, r2, r3
   14902:	091b      	lsrs	r3, r3, #4
   14904:	e7cd      	b.n	148a2 <startTrngHW+0xba>
   14906:	2316      	movs	r3, #22
   14908:	e7cb      	b.n	148a2 <startTrngHW+0xba>
   1490a:	f04f 0903 	mov.w	r9, #3
   1490e:	e797      	b.n	14840 <startTrngHW+0x58>
   14910:	f04f 0902 	mov.w	r9, #2
   14914:	e794      	b.n	14840 <startTrngHW+0x58>
   14916:	bf00      	nop
   14918:	5002b000 	.word	0x5002b000
   1491c:	aaaaaaab 	.word	0xaaaaaaab
   14920:	00f10c31 	.word	0x00f10c31
   14924:	00f10c35 	.word	0x00f10c35

00014928 <LLF_RND_RepetitionCounterTest>:
   14928:	b350      	cbz	r0, 14980 <LLF_RND_RepetitionCounterTest+0x58>
   1492a:	1e4b      	subs	r3, r1, #1
   1492c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   14930:	d226      	bcs.n	14980 <LLF_RND_RepetitionCounterTest+0x58>
   14932:	f04f 0c00 	mov.w	ip, #0
   14936:	b530      	push	{r4, r5, lr}
   14938:	00cd      	lsls	r5, r1, #3
   1493a:	46e6      	mov	lr, ip
   1493c:	4664      	mov	r4, ip
   1493e:	0963      	lsrs	r3, r4, #5
   14940:	f004 011f 	and.w	r1, r4, #31
   14944:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14948:	291f      	cmp	r1, #31
   1494a:	fa23 f301 	lsr.w	r3, r3, r1
   1494e:	d006      	beq.n	1495e <LLF_RND_RepetitionCounterTest+0x36>
   14950:	f003 0301 	and.w	r3, r3, #1
   14954:	b91c      	cbnz	r4, 1495e <LLF_RND_RepetitionCounterTest+0x36>
   14956:	2401      	movs	r4, #1
   14958:	469e      	mov	lr, r3
   1495a:	46a4      	mov	ip, r4
   1495c:	e7ef      	b.n	1493e <LLF_RND_RepetitionCounterTest+0x16>
   1495e:	459e      	cmp	lr, r3
   14960:	f104 0401 	add.w	r4, r4, #1
   14964:	d006      	beq.n	14974 <LLF_RND_RepetitionCounterTest+0x4c>
   14966:	469e      	mov	lr, r3
   14968:	f04f 0c01 	mov.w	ip, #1
   1496c:	42ac      	cmp	r4, r5
   1496e:	d1e6      	bne.n	1493e <LLF_RND_RepetitionCounterTest+0x16>
   14970:	2000      	movs	r0, #0
   14972:	bd30      	pop	{r4, r5, pc}
   14974:	f10c 0c01 	add.w	ip, ip, #1
   14978:	4594      	cmp	ip, r2
   1497a:	d1f7      	bne.n	1496c <LLF_RND_RepetitionCounterTest+0x44>
   1497c:	4801      	ldr	r0, [pc, #4]	; (14984 <LLF_RND_RepetitionCounterTest+0x5c>)
   1497e:	bd30      	pop	{r4, r5, pc}
   14980:	4800      	ldr	r0, [pc, #0]	; (14984 <LLF_RND_RepetitionCounterTest+0x5c>)
   14982:	4770      	bx	lr
   14984:	00f10c36 	.word	0x00f10c36

00014988 <LLF_RND_AdaptiveProportionTest>:
   14988:	b3c8      	cbz	r0, 149fe <LLF_RND_AdaptiveProportionTest+0x76>
   1498a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1498e:	1e4c      	subs	r4, r1, #1
   14990:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   14994:	d21c      	bcs.n	149d0 <LLF_RND_AdaptiveProportionTest+0x48>
   14996:	b1db      	cbz	r3, 149d0 <LLF_RND_AdaptiveProportionTest+0x48>
   14998:	b1d2      	cbz	r2, 149d0 <LLF_RND_AdaptiveProportionTest+0x48>
   1499a:	f04f 0e00 	mov.w	lr, #0
   1499e:	00cf      	lsls	r7, r1, #3
   149a0:	4676      	mov	r6, lr
   149a2:	46f0      	mov	r8, lr
   149a4:	4675      	mov	r5, lr
   149a6:	f103 39ff 	add.w	r9, r3, #4294967295
   149aa:	096c      	lsrs	r4, r5, #5
   149ac:	f005 011f 	and.w	r1, r5, #31
   149b0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   149b4:	291f      	cmp	r1, #31
   149b6:	fa24 fc01 	lsr.w	ip, r4, r1
   149ba:	d00c      	beq.n	149d6 <LLF_RND_AdaptiveProportionTest+0x4e>
   149bc:	f00c 0c01 	and.w	ip, ip, #1
   149c0:	b94d      	cbnz	r5, 149d6 <LLF_RND_AdaptiveProportionTest+0x4e>
   149c2:	2601      	movs	r6, #1
   149c4:	46e0      	mov	r8, ip
   149c6:	4635      	mov	r5, r6
   149c8:	46b6      	mov	lr, r6
   149ca:	e7ee      	b.n	149aa <LLF_RND_AdaptiveProportionTest+0x22>
   149cc:	4296      	cmp	r6, r2
   149ce:	d918      	bls.n	14a02 <LLF_RND_AdaptiveProportionTest+0x7a>
   149d0:	480d      	ldr	r0, [pc, #52]	; (14a08 <LLF_RND_AdaptiveProportionTest+0x80>)
   149d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   149d6:	4573      	cmp	r3, lr
   149d8:	d00c      	beq.n	149f4 <LLF_RND_AdaptiveProportionTest+0x6c>
   149da:	45c4      	cmp	ip, r8
   149dc:	bf08      	it	eq
   149de:	3601      	addeq	r6, #1
   149e0:	45f1      	cmp	r9, lr
   149e2:	d0f3      	beq.n	149cc <LLF_RND_AdaptiveProportionTest+0x44>
   149e4:	f10e 0e01 	add.w	lr, lr, #1
   149e8:	3501      	adds	r5, #1
   149ea:	42bd      	cmp	r5, r7
   149ec:	d1dd      	bne.n	149aa <LLF_RND_AdaptiveProportionTest+0x22>
   149ee:	2000      	movs	r0, #0
   149f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   149f4:	f04f 0e01 	mov.w	lr, #1
   149f8:	46e0      	mov	r8, ip
   149fa:	4676      	mov	r6, lr
   149fc:	e7f4      	b.n	149e8 <LLF_RND_AdaptiveProportionTest+0x60>
   149fe:	4802      	ldr	r0, [pc, #8]	; (14a08 <LLF_RND_AdaptiveProportionTest+0x80>)
   14a00:	4770      	bx	lr
   14a02:	469e      	mov	lr, r3
   14a04:	e7f0      	b.n	149e8 <LLF_RND_AdaptiveProportionTest+0x60>
   14a06:	bf00      	nop
   14a08:	00f10c37 	.word	0x00f10c37

00014a0c <getTrngSource>:
   14a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	b091      	sub	sp, #68	; 0x44
   14a12:	460d      	mov	r5, r1
   14a14:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   14a18:	4682      	mov	sl, r0
   14a1a:	2900      	cmp	r1, #0
   14a1c:	d16e      	bne.n	14afc <getTrngSource+0xf0>
   14a1e:	6928      	ldr	r0, [r5, #16]
   14a20:	9006      	str	r0, [sp, #24]
   14a22:	981a      	ldr	r0, [sp, #104]	; 0x68
   14a24:	601c      	str	r4, [r3, #0]
   14a26:	2300      	movs	r3, #0
   14a28:	6003      	str	r3, [r0, #0]
   14a2a:	2a00      	cmp	r2, #0
   14a2c:	f000 812e 	beq.w	14c8c <getTrngSource+0x280>
   14a30:	4b9c      	ldr	r3, [pc, #624]	; (14ca4 <getTrngSource+0x298>)
   14a32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14a34:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   14a38:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14a3c:	429a      	cmp	r2, r3
   14a3e:	d169      	bne.n	14b14 <getTrngSource+0x108>
   14a40:	290a      	cmp	r1, #10
   14a42:	d167      	bne.n	14b14 <getTrngSource+0x108>
   14a44:	f89a 3003 	ldrb.w	r3, [sl, #3]
   14a48:	9308      	str	r3, [sp, #32]
   14a4a:	f104 0308 	add.w	r3, r4, #8
   14a4e:	9906      	ldr	r1, [sp, #24]
   14a50:	9307      	str	r3, [sp, #28]
   14a52:	4b95      	ldr	r3, [pc, #596]	; (14ca8 <getTrngSource+0x29c>)
   14a54:	4c93      	ldr	r4, [pc, #588]	; (14ca4 <getTrngSource+0x298>)
   14a56:	fba3 2301 	umull	r2, r3, r3, r1
   14a5a:	089b      	lsrs	r3, r3, #2
   14a5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14a60:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   14a64:	9303      	str	r3, [sp, #12]
   14a66:	2304      	movs	r3, #4
   14a68:	9305      	str	r3, [sp, #20]
   14a6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   14a6c:	9e06      	ldr	r6, [sp, #24]
   14a6e:	601e      	str	r6, [r3, #0]
   14a70:	2e00      	cmp	r6, #0
   14a72:	f000 80e9 	beq.w	14c48 <getTrngSource+0x23c>
   14a76:	2700      	movs	r7, #0
   14a78:	f000 fcb8 	bl	153ec <LLF_RND_TurnOffTrng>
   14a7c:	9709      	str	r7, [sp, #36]	; 0x24
   14a7e:	f1ba 0f00 	cmp.w	sl, #0
   14a82:	f000 80d5 	beq.w	14c30 <getTrngSource+0x224>
   14a86:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14a8a:	f04f 0901 	mov.w	r9, #1
   14a8e:	2d00      	cmp	r5, #0
   14a90:	f000 80ce 	beq.w	14c30 <getTrngSource+0x224>
   14a94:	9b08      	ldr	r3, [sp, #32]
   14a96:	2b00      	cmp	r3, #0
   14a98:	d03e      	beq.n	14b18 <getTrngSource+0x10c>
   14a9a:	a908      	add	r1, sp, #32
   14a9c:	4628      	mov	r0, r5
   14a9e:	f000 fc95 	bl	153cc <LLF_RND_GetFastestRosc>
   14aa2:	2800      	cmp	r0, #0
   14aa4:	d03a      	beq.n	14b1c <getTrngSource+0x110>
   14aa6:	4b81      	ldr	r3, [pc, #516]	; (14cac <getTrngSource+0x2a0>)
   14aa8:	4298      	cmp	r0, r3
   14aaa:	d020      	beq.n	14aee <getTrngSource+0xe2>
   14aac:	9b08      	ldr	r3, [sp, #32]
   14aae:	2b08      	cmp	r3, #8
   14ab0:	f000 80e4 	beq.w	14c7c <getTrngSource+0x270>
   14ab4:	005b      	lsls	r3, r3, #1
   14ab6:	2200      	movs	r2, #0
   14ab8:	9308      	str	r3, [sp, #32]
   14aba:	9200      	str	r2, [sp, #0]
   14abc:	ab08      	add	r3, sp, #32
   14abe:	4629      	mov	r1, r5
   14ac0:	4650      	mov	r0, sl
   14ac2:	f7ff fe91 	bl	147e8 <startTrngHW>
   14ac6:	4b7a      	ldr	r3, [pc, #488]	; (14cb0 <getTrngSource+0x2a4>)
   14ac8:	4298      	cmp	r0, r3
   14aca:	f000 80d3 	beq.w	14c74 <getTrngSource+0x268>
   14ace:	b970      	cbnz	r0, 14aee <getTrngSource+0xe2>
   14ad0:	f8da 2000 	ldr.w	r2, [sl]
   14ad4:	0a13      	lsrs	r3, r2, #8
   14ad6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   14ada:	4313      	orrs	r3, r2
   14adc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14ae0:	f8ca 3000 	str.w	r3, [sl]
   14ae4:	9b05      	ldr	r3, [sp, #20]
   14ae6:	3b01      	subs	r3, #1
   14ae8:	9305      	str	r3, [sp, #20]
   14aea:	d1be      	bne.n	14a6a <getTrngSource+0x5e>
   14aec:	2000      	movs	r0, #0
   14aee:	9003      	str	r0, [sp, #12]
   14af0:	f000 fc7c 	bl	153ec <LLF_RND_TurnOffTrng>
   14af4:	9803      	ldr	r0, [sp, #12]
   14af6:	b011      	add	sp, #68	; 0x44
   14af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14afc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   14b00:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   14b04:	3601      	adds	r6, #1
   14b06:	bf14      	ite	ne
   14b08:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   14b0c:	f44f 7004 	moveq.w	r0, #528	; 0x210
   14b10:	9006      	str	r0, [sp, #24]
   14b12:	e786      	b.n	14a22 <getTrngSource+0x16>
   14b14:	4867      	ldr	r0, [pc, #412]	; (14cb4 <getTrngSource+0x2a8>)
   14b16:	e7ea      	b.n	14aee <getTrngSource+0xe2>
   14b18:	4865      	ldr	r0, [pc, #404]	; (14cb0 <getTrngSource+0x2a4>)
   14b1a:	e7c4      	b.n	14aa6 <getTrngSource+0x9a>
   14b1c:	9808      	ldr	r0, [sp, #32]
   14b1e:	4629      	mov	r1, r5
   14b20:	f000 fc3a 	bl	15398 <LLF_RND_GetRoscSampleCnt>
   14b24:	2800      	cmp	r0, #0
   14b26:	d1be      	bne.n	14aa6 <getTrngSource+0x9a>
   14b28:	9b08      	ldr	r3, [sp, #32]
   14b2a:	2b08      	cmp	r3, #8
   14b2c:	f000 80a8 	beq.w	14c80 <getTrngSource+0x274>
   14b30:	2b04      	cmp	r3, #4
   14b32:	f000 80a8 	beq.w	14c86 <getTrngSource+0x27a>
   14b36:	f1a3 0302 	sub.w	r3, r3, #2
   14b3a:	fab3 f383 	clz	r3, r3
   14b3e:	095b      	lsrs	r3, r3, #5
   14b40:	9304      	str	r3, [sp, #16]
   14b42:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   14b46:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   14b4a:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   14b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   14b50:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   14b54:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   14b58:	4293      	cmp	r3, r2
   14b5a:	d1f6      	bne.n	14b4a <getTrngSource+0x13e>
   14b5c:	f04f 0b00 	mov.w	fp, #0
   14b60:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   14b64:	f04f 30ff 	mov.w	r0, #4294967295
   14b68:	f7ff fd10 	bl	1458c <CC_HalClearInterruptBit>
   14b6c:	f06f 031b 	mvn.w	r3, #27
   14b70:	4658      	mov	r0, fp
   14b72:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   14b76:	f7ff fd17 	bl	145a8 <CC_HalMaskInterrupt>
   14b7a:	9b04      	ldr	r3, [sp, #16]
   14b7c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   14b80:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   14b84:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   14b88:	f7ff fd0e 	bl	145a8 <CC_HalMaskInterrupt>
   14b8c:	230a      	movs	r3, #10
   14b8e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   14b92:	692b      	ldr	r3, [r5, #16]
   14b94:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   14b98:	fbab 2303 	umull	r2, r3, fp, r3
   14b9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   14b9e:	091b      	lsrs	r3, r3, #4
   14ba0:	fb02 f303 	mul.w	r3, r2, r3
   14ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14ba8:	03db      	lsls	r3, r3, #15
   14baa:	099b      	lsrs	r3, r3, #6
   14bac:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   14bb0:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   14bb4:	f8da 3000 	ldr.w	r3, [sl]
   14bb8:	9908      	ldr	r1, [sp, #32]
   14bba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   14bbe:	020b      	lsls	r3, r1, #8
   14bc0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   14bc4:	4313      	orrs	r3, r2
   14bc6:	f8ca 3000 	str.w	r3, [sl]
   14bca:	a809      	add	r0, sp, #36	; 0x24
   14bcc:	f000 fbd4 	bl	15378 <LLF_RND_WaitRngInterrupt>
   14bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14bd2:	f003 031a 	and.w	r3, r3, #26
   14bd6:	4303      	orrs	r3, r0
   14bd8:	f47f af68 	bne.w	14aac <getTrngSource+0xa0>
   14bdc:	fbab 3b06 	umull	r3, fp, fp, r6
   14be0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   14be4:	930a      	str	r3, [sp, #40]	; 0x28
   14be6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   14bea:	930b      	str	r3, [sp, #44]	; 0x2c
   14bec:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   14bf0:	930c      	str	r3, [sp, #48]	; 0x30
   14bf2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   14bf6:	930d      	str	r3, [sp, #52]	; 0x34
   14bf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   14bfc:	930e      	str	r3, [sp, #56]	; 0x38
   14bfe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   14c02:	930f      	str	r3, [sp, #60]	; 0x3c
   14c04:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   14c08:	d101      	bne.n	14c0e <getTrngSource+0x202>
   14c0a:	9b03      	ldr	r3, [sp, #12]
   14c0c:	b993      	cbnz	r3, 14c34 <getTrngSource+0x228>
   14c0e:	4640      	mov	r0, r8
   14c10:	2218      	movs	r2, #24
   14c12:	a90a      	add	r1, sp, #40	; 0x28
   14c14:	3e18      	subs	r6, #24
   14c16:	f7ff fd47 	bl	146a8 <CC_PalMemCopyPlat>
   14c1a:	f108 0818 	add.w	r8, r8, #24
   14c1e:	3701      	adds	r7, #1
   14c20:	b196      	cbz	r6, 14c48 <getTrngSource+0x23c>
   14c22:	f000 fbe3 	bl	153ec <LLF_RND_TurnOffTrng>
   14c26:	2300      	movs	r3, #0
   14c28:	9309      	str	r3, [sp, #36]	; 0x24
   14c2a:	2d00      	cmp	r5, #0
   14c2c:	f47f af32 	bne.w	14a94 <getTrngSource+0x88>
   14c30:	4821      	ldr	r0, [pc, #132]	; (14cb8 <getTrngSource+0x2ac>)
   14c32:	e738      	b.n	14aa6 <getTrngSource+0x9a>
   14c34:	4640      	mov	r0, r8
   14c36:	1af6      	subs	r6, r6, r3
   14c38:	461a      	mov	r2, r3
   14c3a:	a90a      	add	r1, sp, #40	; 0x28
   14c3c:	4498      	add	r8, r3
   14c3e:	3701      	adds	r7, #1
   14c40:	f7ff fd32 	bl	146a8 <CC_PalMemCopyPlat>
   14c44:	2e00      	cmp	r6, #0
   14c46:	d1ec      	bne.n	14c22 <getTrngSource+0x216>
   14c48:	9f06      	ldr	r7, [sp, #24]
   14c4a:	9e07      	ldr	r6, [sp, #28]
   14c4c:	696a      	ldr	r2, [r5, #20]
   14c4e:	4639      	mov	r1, r7
   14c50:	4630      	mov	r0, r6
   14c52:	f7ff fe69 	bl	14928 <LLF_RND_RepetitionCounterTest>
   14c56:	69aa      	ldr	r2, [r5, #24]
   14c58:	b940      	cbnz	r0, 14c6c <getTrngSource+0x260>
   14c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14c5e:	4639      	mov	r1, r7
   14c60:	4630      	mov	r0, r6
   14c62:	f7ff fe91 	bl	14988 <LLF_RND_AdaptiveProportionTest>
   14c66:	2800      	cmp	r0, #0
   14c68:	f43f af40 	beq.w	14aec <getTrngSource+0xe0>
   14c6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14c6e:	2300      	movs	r3, #0
   14c70:	6013      	str	r3, [r2, #0]
   14c72:	e718      	b.n	14aa6 <getTrngSource+0x9a>
   14c74:	6a2b      	ldr	r3, [r5, #32]
   14c76:	2b00      	cmp	r3, #0
   14c78:	f43f af39 	beq.w	14aee <getTrngSource+0xe2>
   14c7c:	480f      	ldr	r0, [pc, #60]	; (14cbc <getTrngSource+0x2b0>)
   14c7e:	e736      	b.n	14aee <getTrngSource+0xe2>
   14c80:	2303      	movs	r3, #3
   14c82:	9304      	str	r3, [sp, #16]
   14c84:	e75d      	b.n	14b42 <getTrngSource+0x136>
   14c86:	2302      	movs	r3, #2
   14c88:	9304      	str	r3, [sp, #16]
   14c8a:	e75a      	b.n	14b42 <getTrngSource+0x136>
   14c8c:	9100      	str	r1, [sp, #0]
   14c8e:	ab08      	add	r3, sp, #32
   14c90:	2201      	movs	r2, #1
   14c92:	4629      	mov	r1, r5
   14c94:	4650      	mov	r0, sl
   14c96:	f7ff fda7 	bl	147e8 <startTrngHW>
   14c9a:	2800      	cmp	r0, #0
   14c9c:	f43f aed5 	beq.w	14a4a <getTrngSource+0x3e>
   14ca0:	e725      	b.n	14aee <getTrngSource+0xe2>
   14ca2:	bf00      	nop
   14ca4:	5002b000 	.word	0x5002b000
   14ca8:	aaaaaaab 	.word	0xaaaaaaab
   14cac:	00f10c02 	.word	0x00f10c02
   14cb0:	00f10c31 	.word	0x00f10c31
   14cb4:	00f10c30 	.word	0x00f10c30
   14cb8:	00f10c35 	.word	0x00f10c35
   14cbc:	00f10c32 	.word	0x00f10c32

00014cc0 <LLF_RND_GetTrngSource>:
   14cc0:	b410      	push	{r4}
   14cc2:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   14cc6:	9401      	str	r4, [sp, #4]
   14cc8:	9c03      	ldr	r4, [sp, #12]
   14cca:	9402      	str	r4, [sp, #8]
   14ccc:	2400      	movs	r4, #0
   14cce:	9403      	str	r4, [sp, #12]
   14cd0:	bc10      	pop	{r4}
   14cd2:	f7ff be9b 	b.w	14a0c <getTrngSource>
   14cd6:	bf00      	nop

00014cd8 <LLF_RND_RunTrngStartupTest>:
   14cd8:	b510      	push	{r4, lr}
   14cda:	b086      	sub	sp, #24
   14cdc:	ab05      	add	r3, sp, #20
   14cde:	2401      	movs	r4, #1
   14ce0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   14ce4:	9300      	str	r3, [sp, #0]
   14ce6:	2200      	movs	r2, #0
   14ce8:	ab04      	add	r3, sp, #16
   14cea:	f7ff fe8f 	bl	14a0c <getTrngSource>
   14cee:	b006      	add	sp, #24
   14cf0:	bd10      	pop	{r4, pc}
   14cf2:	bf00      	nop

00014cf4 <mbedtls_hardware_poll>:
   14cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cf6:	b087      	sub	sp, #28
   14cf8:	2900      	cmp	r1, #0
   14cfa:	d066      	beq.n	14dca <mbedtls_hardware_poll+0xd6>
   14cfc:	461e      	mov	r6, r3
   14cfe:	2b00      	cmp	r3, #0
   14d00:	d063      	beq.n	14dca <mbedtls_hardware_poll+0xd6>
   14d02:	4614      	mov	r4, r2
   14d04:	2a00      	cmp	r2, #0
   14d06:	d060      	beq.n	14dca <mbedtls_hardware_poll+0xd6>
   14d08:	4f31      	ldr	r7, [pc, #196]	; (14dd0 <mbedtls_hardware_poll+0xdc>)
   14d0a:	460d      	mov	r5, r1
   14d0c:	6838      	ldr	r0, [r7, #0]
   14d0e:	f04f 31ff 	mov.w	r1, #4294967295
   14d12:	f7ff fce5 	bl	146e0 <CC_PalMutexLock>
   14d16:	2800      	cmp	r0, #0
   14d18:	d14d      	bne.n	14db6 <mbedtls_hardware_poll+0xc2>
   14d1a:	2000      	movs	r0, #0
   14d1c:	f7ff fd10 	bl	14740 <CC_PalPowerSaveModeSelect>
   14d20:	2800      	cmp	r0, #0
   14d22:	d144      	bne.n	14dae <mbedtls_hardware_poll+0xba>
   14d24:	482b      	ldr	r0, [pc, #172]	; (14dd4 <mbedtls_hardware_poll+0xe0>)
   14d26:	f000 fa99 	bl	1525c <RNG_PLAT_SetUserRngParameters>
   14d2a:	4603      	mov	r3, r0
   14d2c:	b1d8      	cbz	r0, 14d66 <mbedtls_hardware_poll+0x72>
   14d2e:	2001      	movs	r0, #1
   14d30:	f04f 35ff 	mov.w	r5, #4294967295
   14d34:	f7ff fd04 	bl	14740 <CC_PalPowerSaveModeSelect>
   14d38:	2800      	cmp	r0, #0
   14d3a:	d134      	bne.n	14da6 <mbedtls_hardware_poll+0xb2>
   14d3c:	4826      	ldr	r0, [pc, #152]	; (14dd8 <mbedtls_hardware_poll+0xe4>)
   14d3e:	f44f 7108 	mov.w	r1, #544	; 0x220
   14d42:	f7fe fed9 	bl	13af8 <mbedtls_zeroize_internal>
   14d46:	4825      	ldr	r0, [pc, #148]	; (14ddc <mbedtls_hardware_poll+0xe8>)
   14d48:	2104      	movs	r1, #4
   14d4a:	f7fe fed5 	bl	13af8 <mbedtls_zeroize_internal>
   14d4e:	4821      	ldr	r0, [pc, #132]	; (14dd4 <mbedtls_hardware_poll+0xe0>)
   14d50:	2128      	movs	r1, #40	; 0x28
   14d52:	f7fe fed1 	bl	13af8 <mbedtls_zeroize_internal>
   14d56:	6838      	ldr	r0, [r7, #0]
   14d58:	f7ff fcca 	bl	146f0 <CC_PalMutexUnlock>
   14d5c:	2800      	cmp	r0, #0
   14d5e:	d12e      	bne.n	14dbe <mbedtls_hardware_poll+0xca>
   14d60:	4628      	mov	r0, r5
   14d62:	b007      	add	sp, #28
   14d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d66:	4a1c      	ldr	r2, [pc, #112]	; (14dd8 <mbedtls_hardware_poll+0xe4>)
   14d68:	9202      	str	r2, [sp, #8]
   14d6a:	aa05      	add	r2, sp, #20
   14d6c:	9201      	str	r2, [sp, #4]
   14d6e:	aa04      	add	r2, sp, #16
   14d70:	9003      	str	r0, [sp, #12]
   14d72:	9200      	str	r2, [sp, #0]
   14d74:	4917      	ldr	r1, [pc, #92]	; (14dd4 <mbedtls_hardware_poll+0xe0>)
   14d76:	4819      	ldr	r0, [pc, #100]	; (14ddc <mbedtls_hardware_poll+0xe8>)
   14d78:	461a      	mov	r2, r3
   14d7a:	f7ff ffa1 	bl	14cc0 <LLF_RND_GetTrngSource>
   14d7e:	4603      	mov	r3, r0
   14d80:	2800      	cmp	r0, #0
   14d82:	d1d4      	bne.n	14d2e <mbedtls_hardware_poll+0x3a>
   14d84:	4628      	mov	r0, r5
   14d86:	461d      	mov	r5, r3
   14d88:	9b05      	ldr	r3, [sp, #20]
   14d8a:	9904      	ldr	r1, [sp, #16]
   14d8c:	429c      	cmp	r4, r3
   14d8e:	4622      	mov	r2, r4
   14d90:	bf28      	it	cs
   14d92:	461a      	movcs	r2, r3
   14d94:	6032      	str	r2, [r6, #0]
   14d96:	3108      	adds	r1, #8
   14d98:	f7ff fc86 	bl	146a8 <CC_PalMemCopyPlat>
   14d9c:	2001      	movs	r0, #1
   14d9e:	f7ff fccf 	bl	14740 <CC_PalPowerSaveModeSelect>
   14da2:	2800      	cmp	r0, #0
   14da4:	d0ca      	beq.n	14d3c <mbedtls_hardware_poll+0x48>
   14da6:	480e      	ldr	r0, [pc, #56]	; (14de0 <mbedtls_hardware_poll+0xec>)
   14da8:	f7fe fd8e 	bl	138c8 <CC_PalAbort>
   14dac:	e7c6      	b.n	14d3c <mbedtls_hardware_poll+0x48>
   14dae:	480d      	ldr	r0, [pc, #52]	; (14de4 <mbedtls_hardware_poll+0xf0>)
   14db0:	f7fe fd8a 	bl	138c8 <CC_PalAbort>
   14db4:	e7b6      	b.n	14d24 <mbedtls_hardware_poll+0x30>
   14db6:	480c      	ldr	r0, [pc, #48]	; (14de8 <mbedtls_hardware_poll+0xf4>)
   14db8:	f7fe fd86 	bl	138c8 <CC_PalAbort>
   14dbc:	e7ad      	b.n	14d1a <mbedtls_hardware_poll+0x26>
   14dbe:	480b      	ldr	r0, [pc, #44]	; (14dec <mbedtls_hardware_poll+0xf8>)
   14dc0:	f7fe fd82 	bl	138c8 <CC_PalAbort>
   14dc4:	4628      	mov	r0, r5
   14dc6:	b007      	add	sp, #28
   14dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14dca:	f04f 35ff 	mov.w	r5, #4294967295
   14dce:	e7c7      	b.n	14d60 <mbedtls_hardware_poll+0x6c>
   14dd0:	20000504 	.word	0x20000504
   14dd4:	20002ddc 	.word	0x20002ddc
   14dd8:	20002e04 	.word	0x20002e04
   14ddc:	20002dd8 	.word	0x20002dd8
   14de0:	00018f1c 	.word	0x00018f1c
   14de4:	00018efc 	.word	0x00018efc
   14de8:	00018ee4 	.word	0x00018ee4
   14dec:	00018f74 	.word	0x00018f74

00014df0 <cc_mbedtls_aes_init>:
   14df0:	b510      	push	{r4, lr}
   14df2:	4604      	mov	r4, r0
   14df4:	b130      	cbz	r0, 14e04 <cc_mbedtls_aes_init+0x14>
   14df6:	2200      	movs	r2, #0
   14df8:	2301      	movs	r3, #1
   14dfa:	6562      	str	r2, [r4, #84]	; 0x54
   14dfc:	65a2      	str	r2, [r4, #88]	; 0x58
   14dfe:	65e3      	str	r3, [r4, #92]	; 0x5c
   14e00:	6623      	str	r3, [r4, #96]	; 0x60
   14e02:	bd10      	pop	{r4, pc}
   14e04:	4801      	ldr	r0, [pc, #4]	; (14e0c <cc_mbedtls_aes_init+0x1c>)
   14e06:	f7fe fd5f 	bl	138c8 <CC_PalAbort>
   14e0a:	e7f4      	b.n	14df6 <cc_mbedtls_aes_init+0x6>
   14e0c:	00018f8c 	.word	0x00018f8c

00014e10 <cc_mbedtls_aes_free>:
   14e10:	b118      	cbz	r0, 14e1a <cc_mbedtls_aes_free+0xa>
   14e12:	2274      	movs	r2, #116	; 0x74
   14e14:	2100      	movs	r1, #0
   14e16:	f7ff bc49 	b.w	146ac <CC_PalMemSetPlat>
   14e1a:	4770      	bx	lr

00014e1c <cc_mbedtls_aes_setkey_enc>:
   14e1c:	b190      	cbz	r0, 14e44 <cc_mbedtls_aes_setkey_enc+0x28>
   14e1e:	b1a1      	cbz	r1, 14e4a <cc_mbedtls_aes_setkey_enc+0x2e>
   14e20:	b510      	push	{r4, lr}
   14e22:	2a80      	cmp	r2, #128	; 0x80
   14e24:	f04f 0400 	mov.w	r4, #0
   14e28:	6384      	str	r4, [r0, #56]	; 0x38
   14e2a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   14e2e:	d106      	bne.n	14e3e <cc_mbedtls_aes_setkey_enc+0x22>
   14e30:	2210      	movs	r2, #16
   14e32:	6304      	str	r4, [r0, #48]	; 0x30
   14e34:	4410      	add	r0, r2
   14e36:	f7ff fc37 	bl	146a8 <CC_PalMemCopyPlat>
   14e3a:	4620      	mov	r0, r4
   14e3c:	bd10      	pop	{r4, pc}
   14e3e:	f06f 001f 	mvn.w	r0, #31
   14e42:	bd10      	pop	{r4, pc}
   14e44:	f06f 0021 	mvn.w	r0, #33	; 0x21
   14e48:	4770      	bx	lr
   14e4a:	f06f 001f 	mvn.w	r0, #31
   14e4e:	4770      	bx	lr

00014e50 <cc_mbedtls_aes_crypt_ecb>:
   14e50:	b328      	cbz	r0, 14e9e <cc_mbedtls_aes_crypt_ecb+0x4e>
   14e52:	b322      	cbz	r2, 14e9e <cc_mbedtls_aes_crypt_ecb+0x4e>
   14e54:	b31b      	cbz	r3, 14e9e <cc_mbedtls_aes_crypt_ecb+0x4e>
   14e56:	2901      	cmp	r1, #1
   14e58:	d821      	bhi.n	14e9e <cc_mbedtls_aes_crypt_ecb+0x4e>
   14e5a:	b570      	push	{r4, r5, r6, lr}
   14e5c:	4604      	mov	r4, r0
   14e5e:	6b81      	ldr	r1, [r0, #56]	; 0x38
   14e60:	b086      	sub	sp, #24
   14e62:	d017      	beq.n	14e94 <cc_mbedtls_aes_crypt_ecb+0x44>
   14e64:	2901      	cmp	r1, #1
   14e66:	d117      	bne.n	14e98 <cc_mbedtls_aes_crypt_ecb+0x48>
   14e68:	2510      	movs	r5, #16
   14e6a:	2100      	movs	r1, #0
   14e6c:	eb0d 0605 	add.w	r6, sp, r5
   14e70:	6361      	str	r1, [r4, #52]	; 0x34
   14e72:	4610      	mov	r0, r2
   14e74:	9500      	str	r5, [sp, #0]
   14e76:	9601      	str	r6, [sp, #4]
   14e78:	aa02      	add	r2, sp, #8
   14e7a:	4629      	mov	r1, r5
   14e7c:	f000 fac2 	bl	15404 <SetDataBuffersInfo>
   14e80:	b950      	cbnz	r0, 14e98 <cc_mbedtls_aes_crypt_ecb+0x48>
   14e82:	462b      	mov	r3, r5
   14e84:	4632      	mov	r2, r6
   14e86:	a902      	add	r1, sp, #8
   14e88:	4620      	mov	r0, r4
   14e8a:	f000 fd43 	bl	15914 <ProcessAesDrv>
   14e8e:	b918      	cbnz	r0, 14e98 <cc_mbedtls_aes_crypt_ecb+0x48>
   14e90:	b006      	add	sp, #24
   14e92:	bd70      	pop	{r4, r5, r6, pc}
   14e94:	2900      	cmp	r1, #0
   14e96:	d0e7      	beq.n	14e68 <cc_mbedtls_aes_crypt_ecb+0x18>
   14e98:	f06f 0021 	mvn.w	r0, #33	; 0x21
   14e9c:	e7f8      	b.n	14e90 <cc_mbedtls_aes_crypt_ecb+0x40>
   14e9e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   14ea2:	4770      	bx	lr

00014ea4 <cc_mbedtls_sha256_init>:
   14ea4:	b510      	push	{r4, lr}
   14ea6:	4604      	mov	r4, r0
   14ea8:	b128      	cbz	r0, 14eb6 <cc_mbedtls_sha256_init+0x12>
   14eaa:	4620      	mov	r0, r4
   14eac:	21f4      	movs	r1, #244	; 0xf4
   14eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14eb2:	f7ff bbfd 	b.w	146b0 <CC_PalMemSetZeroPlat>
   14eb6:	4804      	ldr	r0, [pc, #16]	; (14ec8 <cc_mbedtls_sha256_init+0x24>)
   14eb8:	f7fe fd06 	bl	138c8 <CC_PalAbort>
   14ebc:	4620      	mov	r0, r4
   14ebe:	21f4      	movs	r1, #244	; 0xf4
   14ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14ec4:	f7ff bbf4 	b.w	146b0 <CC_PalMemSetZeroPlat>
   14ec8:	00018fa0 	.word	0x00018fa0

00014ecc <cc_mbedtls_sha256_free>:
   14ecc:	b110      	cbz	r0, 14ed4 <cc_mbedtls_sha256_free+0x8>
   14ece:	21f4      	movs	r1, #244	; 0xf4
   14ed0:	f7fe be12 	b.w	13af8 <mbedtls_zeroize_internal>
   14ed4:	4770      	bx	lr
   14ed6:	bf00      	nop

00014ed8 <cc_mbedtls_sha256_starts>:
   14ed8:	b508      	push	{r3, lr}
   14eda:	b121      	cbz	r1, 14ee6 <cc_mbedtls_sha256_starts+0xe>
   14edc:	2901      	cmp	r1, #1
   14ede:	d008      	beq.n	14ef2 <cc_mbedtls_sha256_starts+0x1a>
   14ee0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   14ee4:	bd08      	pop	{r3, pc}
   14ee6:	2101      	movs	r1, #1
   14ee8:	f000 f858 	bl	14f9c <mbedtls_sha_starts_internal>
   14eec:	2800      	cmp	r0, #0
   14eee:	d1f7      	bne.n	14ee0 <cc_mbedtls_sha256_starts+0x8>
   14ef0:	bd08      	pop	{r3, pc}
   14ef2:	2102      	movs	r1, #2
   14ef4:	f000 f852 	bl	14f9c <mbedtls_sha_starts_internal>
   14ef8:	2800      	cmp	r0, #0
   14efa:	d0f9      	beq.n	14ef0 <cc_mbedtls_sha256_starts+0x18>
   14efc:	e7f0      	b.n	14ee0 <cc_mbedtls_sha256_starts+0x8>
   14efe:	bf00      	nop

00014f00 <cc_mbedtls_sha256_update>:
   14f00:	b530      	push	{r4, r5, lr}
   14f02:	4605      	mov	r5, r0
   14f04:	1888      	adds	r0, r1, r2
   14f06:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   14f0a:	b0a1      	sub	sp, #132	; 0x84
   14f0c:	460b      	mov	r3, r1
   14f0e:	4614      	mov	r4, r2
   14f10:	d801      	bhi.n	14f16 <cc_mbedtls_sha256_update+0x16>
   14f12:	2a80      	cmp	r2, #128	; 0x80
   14f14:	d90c      	bls.n	14f30 <cc_mbedtls_sha256_update+0x30>
   14f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14f1a:	d917      	bls.n	14f4c <cc_mbedtls_sha256_update+0x4c>
   14f1c:	4622      	mov	r2, r4
   14f1e:	4619      	mov	r1, r3
   14f20:	4628      	mov	r0, r5
   14f22:	f000 f87d 	bl	15020 <mbedtls_sha_update_internal>
   14f26:	4604      	mov	r4, r0
   14f28:	b984      	cbnz	r4, 14f4c <cc_mbedtls_sha256_update+0x4c>
   14f2a:	4620      	mov	r0, r4
   14f2c:	b021      	add	sp, #132	; 0x84
   14f2e:	bd30      	pop	{r4, r5, pc}
   14f30:	4668      	mov	r0, sp
   14f32:	f7ff fbb9 	bl	146a8 <CC_PalMemCopyPlat>
   14f36:	4622      	mov	r2, r4
   14f38:	4669      	mov	r1, sp
   14f3a:	4628      	mov	r0, r5
   14f3c:	f000 f870 	bl	15020 <mbedtls_sha_update_internal>
   14f40:	2180      	movs	r1, #128	; 0x80
   14f42:	4604      	mov	r4, r0
   14f44:	4668      	mov	r0, sp
   14f46:	f7ff fbb3 	bl	146b0 <CC_PalMemSetZeroPlat>
   14f4a:	e7ed      	b.n	14f28 <cc_mbedtls_sha256_update+0x28>
   14f4c:	f06f 0436 	mvn.w	r4, #54	; 0x36
   14f50:	e7eb      	b.n	14f2a <cc_mbedtls_sha256_update+0x2a>
   14f52:	bf00      	nop

00014f54 <cc_mbedtls_sha256_finish>:
   14f54:	b570      	push	{r4, r5, r6, lr}
   14f56:	b1e8      	cbz	r0, 14f94 <cc_mbedtls_sha256_finish+0x40>
   14f58:	460e      	mov	r6, r1
   14f5a:	b1d9      	cbz	r1, 14f94 <cc_mbedtls_sha256_finish+0x40>
   14f5c:	4604      	mov	r4, r0
   14f5e:	f000 f831 	bl	14fc4 <mbedtls_sha_finish_internal>
   14f62:	4605      	mov	r5, r0
   14f64:	b9b0      	cbnz	r0, 14f94 <cc_mbedtls_sha256_finish+0x40>
   14f66:	6823      	ldr	r3, [r4, #0]
   14f68:	2b01      	cmp	r3, #1
   14f6a:	d00b      	beq.n	14f84 <cc_mbedtls_sha256_finish+0x30>
   14f6c:	2b02      	cmp	r3, #2
   14f6e:	d001      	beq.n	14f74 <cc_mbedtls_sha256_finish+0x20>
   14f70:	4628      	mov	r0, r5
   14f72:	bd70      	pop	{r4, r5, r6, pc}
   14f74:	221c      	movs	r2, #28
   14f76:	f104 0108 	add.w	r1, r4, #8
   14f7a:	4630      	mov	r0, r6
   14f7c:	f7ff fb94 	bl	146a8 <CC_PalMemCopyPlat>
   14f80:	4628      	mov	r0, r5
   14f82:	bd70      	pop	{r4, r5, r6, pc}
   14f84:	2220      	movs	r2, #32
   14f86:	f104 0108 	add.w	r1, r4, #8
   14f8a:	4630      	mov	r0, r6
   14f8c:	f7ff fb8c 	bl	146a8 <CC_PalMemCopyPlat>
   14f90:	4628      	mov	r0, r5
   14f92:	bd70      	pop	{r4, r5, r6, pc}
   14f94:	f06f 0536 	mvn.w	r5, #54	; 0x36
   14f98:	e7ea      	b.n	14f70 <cc_mbedtls_sha256_finish+0x1c>
   14f9a:	bf00      	nop

00014f9c <mbedtls_sha_starts_internal>:
   14f9c:	b178      	cbz	r0, 14fbe <mbedtls_sha_starts_internal+0x22>
   14f9e:	b538      	push	{r3, r4, r5, lr}
   14fa0:	4604      	mov	r4, r0
   14fa2:	460d      	mov	r5, r1
   14fa4:	21f0      	movs	r1, #240	; 0xf0
   14fa6:	f7ff fb83 	bl	146b0 <CC_PalMemSetZeroPlat>
   14faa:	2340      	movs	r3, #64	; 0x40
   14fac:	6025      	str	r5, [r4, #0]
   14fae:	65e3      	str	r3, [r4, #92]	; 0x5c
   14fb0:	4620      	mov	r0, r4
   14fb2:	f000 fa5b 	bl	1546c <InitHashDrv>
   14fb6:	3800      	subs	r0, #0
   14fb8:	bf18      	it	ne
   14fba:	2001      	movne	r0, #1
   14fbc:	bd38      	pop	{r3, r4, r5, pc}
   14fbe:	2001      	movs	r0, #1
   14fc0:	4770      	bx	lr
   14fc2:	bf00      	nop

00014fc4 <mbedtls_sha_finish_internal>:
   14fc4:	b570      	push	{r4, r5, r6, lr}
   14fc6:	6e05      	ldr	r5, [r0, #96]	; 0x60
   14fc8:	b0a4      	sub	sp, #144	; 0x90
   14fca:	4604      	mov	r4, r0
   14fcc:	ae04      	add	r6, sp, #16
   14fce:	b9e5      	cbnz	r5, 1500a <mbedtls_sha_finish_internal+0x46>
   14fd0:	2201      	movs	r2, #1
   14fd2:	2300      	movs	r3, #0
   14fd4:	6062      	str	r2, [r4, #4]
   14fd6:	4630      	mov	r0, r6
   14fd8:	e9cd 3300 	strd	r3, r3, [sp]
   14fdc:	aa02      	add	r2, sp, #8
   14fde:	4629      	mov	r1, r5
   14fe0:	f000 fa10 	bl	15404 <SetDataBuffersInfo>
   14fe4:	b110      	cbz	r0, 14fec <mbedtls_sha_finish_internal+0x28>
   14fe6:	2001      	movs	r0, #1
   14fe8:	b024      	add	sp, #144	; 0x90
   14fea:	bd70      	pop	{r4, r5, r6, pc}
   14fec:	462a      	mov	r2, r5
   14fee:	a902      	add	r1, sp, #8
   14ff0:	4620      	mov	r0, r4
   14ff2:	f000 fa63 	bl	154bc <ProcessHashDrv>
   14ff6:	2800      	cmp	r0, #0
   14ff8:	d1f5      	bne.n	14fe6 <mbedtls_sha_finish_internal+0x22>
   14ffa:	4620      	mov	r0, r4
   14ffc:	f000 fb74 	bl	156e8 <FinishHashDrv>
   15000:	2800      	cmp	r0, #0
   15002:	d1f0      	bne.n	14fe6 <mbedtls_sha_finish_internal+0x22>
   15004:	6620      	str	r0, [r4, #96]	; 0x60
   15006:	b024      	add	sp, #144	; 0x90
   15008:	bd70      	pop	{r4, r5, r6, pc}
   1500a:	2d80      	cmp	r5, #128	; 0x80
   1500c:	462a      	mov	r2, r5
   1500e:	f100 0164 	add.w	r1, r0, #100	; 0x64
   15012:	bf28      	it	cs
   15014:	2280      	movcs	r2, #128	; 0x80
   15016:	4630      	mov	r0, r6
   15018:	f7ff fb46 	bl	146a8 <CC_PalMemCopyPlat>
   1501c:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1501e:	e7d7      	b.n	14fd0 <mbedtls_sha_finish_internal+0xc>

00015020 <mbedtls_sha_update_internal>:
   15020:	2800      	cmp	r0, #0
   15022:	f000 80ae 	beq.w	15182 <mbedtls_sha_update_internal+0x162>
   15026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1502a:	4614      	mov	r4, r2
   1502c:	b0a5      	sub	sp, #148	; 0x94
   1502e:	2a00      	cmp	r2, #0
   15030:	d03d      	beq.n	150ae <mbedtls_sha_update_internal+0x8e>
   15032:	460f      	mov	r7, r1
   15034:	2900      	cmp	r1, #0
   15036:	d049      	beq.n	150cc <mbedtls_sha_update_internal+0xac>
   15038:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1503c:	4605      	mov	r5, r0
   1503e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   15040:	d320      	bcc.n	15084 <mbedtls_sha_update_internal+0x64>
   15042:	f64f 78ff 	movw	r8, #65535	; 0xffff
   15046:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   1504a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1504c:	1a1a      	subs	r2, r3, r0
   1504e:	fbb2 f1f3 	udiv	r1, r2, r3
   15052:	fb03 2211 	mls	r2, r3, r1, r2
   15056:	2a00      	cmp	r2, #0
   15058:	d165      	bne.n	15126 <mbedtls_sha_update_internal+0x106>
   1505a:	4283      	cmp	r3, r0
   1505c:	46b9      	mov	r9, r7
   1505e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   15062:	d072      	beq.n	1514a <mbedtls_sha_update_internal+0x12a>
   15064:	fbb6 fbf3 	udiv	fp, r6, r3
   15068:	fb03 fb0b 	mul.w	fp, r3, fp
   1506c:	f1bb 0f00 	cmp.w	fp, #0
   15070:	d130      	bne.n	150d4 <mbedtls_sha_update_internal+0xb4>
   15072:	2e00      	cmp	r6, #0
   15074:	d145      	bne.n	15102 <mbedtls_sha_update_internal+0xe2>
   15076:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   1507a:	3cff      	subs	r4, #255	; 0xff
   1507c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   15080:	4447      	add	r7, r8
   15082:	d2e2      	bcs.n	1504a <mbedtls_sha_update_internal+0x2a>
   15084:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   15086:	1a16      	subs	r6, r2, r0
   15088:	fbb6 f3f2 	udiv	r3, r6, r2
   1508c:	fb02 6613 	mls	r6, r2, r3, r6
   15090:	42a6      	cmp	r6, r4
   15092:	bf28      	it	cs
   15094:	4626      	movcs	r6, r4
   15096:	2e00      	cmp	r6, #0
   15098:	d175      	bne.n	15186 <mbedtls_sha_update_internal+0x166>
   1509a:	4282      	cmp	r2, r0
   1509c:	f000 808d 	beq.w	151ba <mbedtls_sha_update_internal+0x19a>
   150a0:	fbb4 f6f2 	udiv	r6, r4, r2
   150a4:	fb02 f606 	mul.w	r6, r2, r6
   150a8:	b92e      	cbnz	r6, 150b6 <mbedtls_sha_update_internal+0x96>
   150aa:	2c00      	cmp	r4, #0
   150ac:	d179      	bne.n	151a2 <mbedtls_sha_update_internal+0x182>
   150ae:	2000      	movs	r0, #0
   150b0:	b025      	add	sp, #148	; 0x94
   150b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b6:	2300      	movs	r3, #0
   150b8:	e9cd 3300 	strd	r3, r3, [sp]
   150bc:	aa02      	add	r2, sp, #8
   150be:	4631      	mov	r1, r6
   150c0:	4638      	mov	r0, r7
   150c2:	f000 f99f 	bl	15404 <SetDataBuffersInfo>
   150c6:	2800      	cmp	r0, #0
   150c8:	f000 8095 	beq.w	151f6 <mbedtls_sha_update_internal+0x1d6>
   150cc:	2001      	movs	r0, #1
   150ce:	b025      	add	sp, #148	; 0x94
   150d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d4:	2300      	movs	r3, #0
   150d6:	e9cd 3300 	strd	r3, r3, [sp]
   150da:	aa02      	add	r2, sp, #8
   150dc:	4659      	mov	r1, fp
   150de:	4648      	mov	r0, r9
   150e0:	f000 f990 	bl	15404 <SetDataBuffersInfo>
   150e4:	2800      	cmp	r0, #0
   150e6:	d1f1      	bne.n	150cc <mbedtls_sha_update_internal+0xac>
   150e8:	a902      	add	r1, sp, #8
   150ea:	465a      	mov	r2, fp
   150ec:	4628      	mov	r0, r5
   150ee:	f000 f9e5 	bl	154bc <ProcessHashDrv>
   150f2:	2800      	cmp	r0, #0
   150f4:	d1ea      	bne.n	150cc <mbedtls_sha_update_internal+0xac>
   150f6:	eba6 060b 	sub.w	r6, r6, fp
   150fa:	6e28      	ldr	r0, [r5, #96]	; 0x60
   150fc:	44d9      	add	r9, fp
   150fe:	2e00      	cmp	r6, #0
   15100:	d0b9      	beq.n	15076 <mbedtls_sha_update_internal+0x56>
   15102:	3019      	adds	r0, #25
   15104:	4649      	mov	r1, r9
   15106:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1510a:	4632      	mov	r2, r6
   1510c:	f7ff facc 	bl	146a8 <CC_PalMemCopyPlat>
   15110:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   15114:	6e28      	ldr	r0, [r5, #96]	; 0x60
   15116:	3cff      	subs	r4, #255	; 0xff
   15118:	4430      	add	r0, r6
   1511a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1511e:	4447      	add	r7, r8
   15120:	6628      	str	r0, [r5, #96]	; 0x60
   15122:	d292      	bcs.n	1504a <mbedtls_sha_update_internal+0x2a>
   15124:	e7ae      	b.n	15084 <mbedtls_sha_update_internal+0x64>
   15126:	4542      	cmp	r2, r8
   15128:	bf28      	it	cs
   1512a:	4642      	movcs	r2, r8
   1512c:	4450      	add	r0, sl
   1512e:	4639      	mov	r1, r7
   15130:	4616      	mov	r6, r2
   15132:	f7ff fab9 	bl	146a8 <CC_PalMemCopyPlat>
   15136:	6e28      	ldr	r0, [r5, #96]	; 0x60
   15138:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1513a:	4430      	add	r0, r6
   1513c:	4283      	cmp	r3, r0
   1513e:	eb07 0906 	add.w	r9, r7, r6
   15142:	6628      	str	r0, [r5, #96]	; 0x60
   15144:	eba8 0606 	sub.w	r6, r8, r6
   15148:	d18c      	bne.n	15064 <mbedtls_sha_update_internal+0x44>
   1514a:	2b80      	cmp	r3, #128	; 0x80
   1514c:	bf28      	it	cs
   1514e:	2380      	movcs	r3, #128	; 0x80
   15150:	461a      	mov	r2, r3
   15152:	4651      	mov	r1, sl
   15154:	a804      	add	r0, sp, #16
   15156:	f7ff faa7 	bl	146a8 <CC_PalMemCopyPlat>
   1515a:	2300      	movs	r3, #0
   1515c:	e9cd 3300 	strd	r3, r3, [sp]
   15160:	aa02      	add	r2, sp, #8
   15162:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   15164:	a804      	add	r0, sp, #16
   15166:	f000 f94d 	bl	15404 <SetDataBuffersInfo>
   1516a:	2800      	cmp	r0, #0
   1516c:	d1ae      	bne.n	150cc <mbedtls_sha_update_internal+0xac>
   1516e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   15170:	a902      	add	r1, sp, #8
   15172:	4628      	mov	r0, r5
   15174:	f000 f9a2 	bl	154bc <ProcessHashDrv>
   15178:	2800      	cmp	r0, #0
   1517a:	d1a7      	bne.n	150cc <mbedtls_sha_update_internal+0xac>
   1517c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1517e:	6628      	str	r0, [r5, #96]	; 0x60
   15180:	e770      	b.n	15064 <mbedtls_sha_update_internal+0x44>
   15182:	2001      	movs	r0, #1
   15184:	4770      	bx	lr
   15186:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1518a:	4639      	mov	r1, r7
   1518c:	4632      	mov	r2, r6
   1518e:	4418      	add	r0, r3
   15190:	f7ff fa8a 	bl	146a8 <CC_PalMemCopyPlat>
   15194:	6e28      	ldr	r0, [r5, #96]	; 0x60
   15196:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   15198:	4430      	add	r0, r6
   1519a:	1ba4      	subs	r4, r4, r6
   1519c:	4437      	add	r7, r6
   1519e:	6628      	str	r0, [r5, #96]	; 0x60
   151a0:	e77b      	b.n	1509a <mbedtls_sha_update_internal+0x7a>
   151a2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   151a4:	3319      	adds	r3, #25
   151a6:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   151aa:	4622      	mov	r2, r4
   151ac:	4639      	mov	r1, r7
   151ae:	f7ff fa7b 	bl	146a8 <CC_PalMemCopyPlat>
   151b2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   151b4:	4423      	add	r3, r4
   151b6:	662b      	str	r3, [r5, #96]	; 0x60
   151b8:	e779      	b.n	150ae <mbedtls_sha_update_internal+0x8e>
   151ba:	2a80      	cmp	r2, #128	; 0x80
   151bc:	bf28      	it	cs
   151be:	2280      	movcs	r2, #128	; 0x80
   151c0:	f105 0164 	add.w	r1, r5, #100	; 0x64
   151c4:	a804      	add	r0, sp, #16
   151c6:	f7ff fa6f 	bl	146a8 <CC_PalMemCopyPlat>
   151ca:	2300      	movs	r3, #0
   151cc:	e9cd 3300 	strd	r3, r3, [sp]
   151d0:	a804      	add	r0, sp, #16
   151d2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   151d4:	aa02      	add	r2, sp, #8
   151d6:	f000 f915 	bl	15404 <SetDataBuffersInfo>
   151da:	2800      	cmp	r0, #0
   151dc:	f47f af76 	bne.w	150cc <mbedtls_sha_update_internal+0xac>
   151e0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   151e2:	a902      	add	r1, sp, #8
   151e4:	4628      	mov	r0, r5
   151e6:	f000 f969 	bl	154bc <ProcessHashDrv>
   151ea:	2800      	cmp	r0, #0
   151ec:	f47f af6e 	bne.w	150cc <mbedtls_sha_update_internal+0xac>
   151f0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   151f2:	6628      	str	r0, [r5, #96]	; 0x60
   151f4:	e754      	b.n	150a0 <mbedtls_sha_update_internal+0x80>
   151f6:	a902      	add	r1, sp, #8
   151f8:	4632      	mov	r2, r6
   151fa:	4628      	mov	r0, r5
   151fc:	f000 f95e 	bl	154bc <ProcessHashDrv>
   15200:	2800      	cmp	r0, #0
   15202:	f47f af63 	bne.w	150cc <mbedtls_sha_update_internal+0xac>
   15206:	4437      	add	r7, r6
   15208:	1ba4      	subs	r4, r4, r6
   1520a:	e74e      	b.n	150aa <mbedtls_sha_update_internal+0x8a>

0001520c <cc_mbedtls_sha256>:
   1520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1520e:	461c      	mov	r4, r3
   15210:	4605      	mov	r5, r0
   15212:	4811      	ldr	r0, [pc, #68]	; (15258 <cc_mbedtls_sha256+0x4c>)
   15214:	460e      	mov	r6, r1
   15216:	4617      	mov	r7, r2
   15218:	f7ff fe44 	bl	14ea4 <cc_mbedtls_sha256_init>
   1521c:	4621      	mov	r1, r4
   1521e:	480e      	ldr	r0, [pc, #56]	; (15258 <cc_mbedtls_sha256+0x4c>)
   15220:	f7ff fe5a 	bl	14ed8 <cc_mbedtls_sha256_starts>
   15224:	4604      	mov	r4, r0
   15226:	b120      	cbz	r0, 15232 <cc_mbedtls_sha256+0x26>
   15228:	480b      	ldr	r0, [pc, #44]	; (15258 <cc_mbedtls_sha256+0x4c>)
   1522a:	f7ff fe4f 	bl	14ecc <cc_mbedtls_sha256_free>
   1522e:	4620      	mov	r0, r4
   15230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15232:	4809      	ldr	r0, [pc, #36]	; (15258 <cc_mbedtls_sha256+0x4c>)
   15234:	4632      	mov	r2, r6
   15236:	4629      	mov	r1, r5
   15238:	f7ff fe62 	bl	14f00 <cc_mbedtls_sha256_update>
   1523c:	4604      	mov	r4, r0
   1523e:	2800      	cmp	r0, #0
   15240:	d1f2      	bne.n	15228 <cc_mbedtls_sha256+0x1c>
   15242:	4639      	mov	r1, r7
   15244:	4804      	ldr	r0, [pc, #16]	; (15258 <cc_mbedtls_sha256+0x4c>)
   15246:	f7ff fe85 	bl	14f54 <cc_mbedtls_sha256_finish>
   1524a:	4604      	mov	r4, r0
   1524c:	4802      	ldr	r0, [pc, #8]	; (15258 <cc_mbedtls_sha256+0x4c>)
   1524e:	f7ff fe3d 	bl	14ecc <cc_mbedtls_sha256_free>
   15252:	4620      	mov	r0, r4
   15254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15256:	bf00      	nop
   15258:	20003024 	.word	0x20003024

0001525c <RNG_PLAT_SetUserRngParameters>:
   1525c:	b530      	push	{r4, r5, lr}
   1525e:	b083      	sub	sp, #12
   15260:	231c      	movs	r3, #28
   15262:	a901      	add	r1, sp, #4
   15264:	4605      	mov	r5, r0
   15266:	9301      	str	r3, [sp, #4]
   15268:	f000 f832 	bl	152d0 <CC_PalTrngParamGet>
   1526c:	4604      	mov	r4, r0
   1526e:	b938      	cbnz	r0, 15280 <RNG_PLAT_SetUserRngParameters+0x24>
   15270:	9b01      	ldr	r3, [sp, #4]
   15272:	2b1c      	cmp	r3, #28
   15274:	d007      	beq.n	15286 <RNG_PLAT_SetUserRngParameters+0x2a>
   15276:	4c14      	ldr	r4, [pc, #80]	; (152c8 <RNG_PLAT_SetUserRngParameters+0x6c>)
   15278:	211c      	movs	r1, #28
   1527a:	4628      	mov	r0, r5
   1527c:	f7ff fa18 	bl	146b0 <CC_PalMemSetZeroPlat>
   15280:	4620      	mov	r0, r4
   15282:	b003      	add	sp, #12
   15284:	bd30      	pop	{r4, r5, pc}
   15286:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   1528a:	1e13      	subs	r3, r2, #0
   1528c:	bf18      	it	ne
   1528e:	2301      	movne	r3, #1
   15290:	3900      	subs	r1, #0
   15292:	682a      	ldr	r2, [r5, #0]
   15294:	bf18      	it	ne
   15296:	2101      	movne	r1, #1
   15298:	009b      	lsls	r3, r3, #2
   1529a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   1529e:	2a00      	cmp	r2, #0
   152a0:	bf18      	it	ne
   152a2:	f043 0301 	orrne.w	r3, r3, #1
   152a6:	68ea      	ldr	r2, [r5, #12]
   152a8:	2001      	movs	r0, #1
   152aa:	61e8      	str	r0, [r5, #28]
   152ac:	b92a      	cbnz	r2, 152ba <RNG_PLAT_SetUserRngParameters+0x5e>
   152ae:	e9c5 3408 	strd	r3, r4, [r5, #32]
   152b2:	2b00      	cmp	r3, #0
   152b4:	d1e4      	bne.n	15280 <RNG_PLAT_SetUserRngParameters+0x24>
   152b6:	4c05      	ldr	r4, [pc, #20]	; (152cc <RNG_PLAT_SetUserRngParameters+0x70>)
   152b8:	e7de      	b.n	15278 <RNG_PLAT_SetUserRngParameters+0x1c>
   152ba:	f043 0308 	orr.w	r3, r3, #8
   152be:	4620      	mov	r0, r4
   152c0:	e9c5 3408 	strd	r3, r4, [r5, #32]
   152c4:	b003      	add	sp, #12
   152c6:	bd30      	pop	{r4, r5, pc}
   152c8:	00f00c37 	.word	0x00f00c37
   152cc:	00f00c0e 	.word	0x00f00c0e

000152d0 <CC_PalTrngParamGet>:
   152d0:	b118      	cbz	r0, 152da <CC_PalTrngParamGet+0xa>
   152d2:	b111      	cbz	r1, 152da <CC_PalTrngParamGet+0xa>
   152d4:	680b      	ldr	r3, [r1, #0]
   152d6:	2b1c      	cmp	r3, #28
   152d8:	d001      	beq.n	152de <CC_PalTrngParamGet+0xe>
   152da:	2001      	movs	r0, #1
   152dc:	4770      	bx	lr
   152de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   152e2:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   152e6:	3201      	adds	r2, #1
   152e8:	bf14      	ite	ne
   152ea:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   152ee:	f241 225c 	movweq	r2, #4700	; 0x125c
   152f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   152f6:	6002      	str	r2, [r0, #0]
   152f8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   152fc:	3201      	adds	r2, #1
   152fe:	bf14      	ite	ne
   15300:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   15304:	f641 1264 	movweq	r2, #6500	; 0x1964
   15308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1530c:	6042      	str	r2, [r0, #4]
   1530e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   15312:	3201      	adds	r2, #1
   15314:	bf14      	ite	ne
   15316:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1531a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1531e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15322:	6082      	str	r2, [r0, #8]
   15324:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   15328:	3201      	adds	r2, #1
   1532a:	bf14      	ite	ne
   1532c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   15330:	f241 3288 	movweq	r2, #5000	; 0x1388
   15334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15338:	60c2      	str	r2, [r0, #12]
   1533a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1533e:	3201      	adds	r2, #1
   15340:	bf14      	ite	ne
   15342:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   15346:	2290      	moveq	r2, #144	; 0x90
   15348:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1534c:	6102      	str	r2, [r0, #16]
   1534e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   15352:	3201      	adds	r2, #1
   15354:	bf14      	ite	ne
   15356:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1535a:	2251      	moveq	r2, #81	; 0x51
   1535c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15360:	6142      	str	r2, [r0, #20]
   15362:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   15366:	3201      	adds	r2, #1
   15368:	bf14      	ite	ne
   1536a:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1536e:	f240 3337 	movweq	r3, #823	; 0x337
   15372:	6183      	str	r3, [r0, #24]
   15374:	2000      	movs	r0, #0
   15376:	4770      	bx	lr

00015378 <LLF_RND_WaitRngInterrupt>:
   15378:	b508      	push	{r3, lr}
   1537a:	4601      	mov	r1, r0
   1537c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   15380:	f7ff f91e 	bl	145c0 <CC_HalWaitInterruptRND>
   15384:	4b03      	ldr	r3, [pc, #12]	; (15394 <LLF_RND_WaitRngInterrupt+0x1c>)
   15386:	2200      	movs	r2, #0
   15388:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   1538c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   15390:	bd08      	pop	{r3, pc}
   15392:	bf00      	nop
   15394:	5002b000 	.word	0x5002b000

00015398 <LLF_RND_GetRoscSampleCnt>:
   15398:	3801      	subs	r0, #1
   1539a:	2807      	cmp	r0, #7
   1539c:	d805      	bhi.n	153aa <LLF_RND_GetRoscSampleCnt+0x12>
   1539e:	e8df f000 	tbb	[pc, r0]
   153a2:	0e10      	.short	0x0e10
   153a4:	04040a04 	.word	0x04040a04
   153a8:	0604      	.short	0x0604
   153aa:	4807      	ldr	r0, [pc, #28]	; (153c8 <LLF_RND_GetRoscSampleCnt+0x30>)
   153ac:	4770      	bx	lr
   153ae:	68cb      	ldr	r3, [r1, #12]
   153b0:	624b      	str	r3, [r1, #36]	; 0x24
   153b2:	2000      	movs	r0, #0
   153b4:	4770      	bx	lr
   153b6:	688b      	ldr	r3, [r1, #8]
   153b8:	624b      	str	r3, [r1, #36]	; 0x24
   153ba:	2000      	movs	r0, #0
   153bc:	4770      	bx	lr
   153be:	684b      	ldr	r3, [r1, #4]
   153c0:	e7f6      	b.n	153b0 <LLF_RND_GetRoscSampleCnt+0x18>
   153c2:	680b      	ldr	r3, [r1, #0]
   153c4:	e7f4      	b.n	153b0 <LLF_RND_GetRoscSampleCnt+0x18>
   153c6:	bf00      	nop
   153c8:	00f10c31 	.word	0x00f10c31

000153cc <LLF_RND_GetFastestRosc>:
   153cc:	680b      	ldr	r3, [r1, #0]
   153ce:	e002      	b.n	153d6 <LLF_RND_GetFastestRosc+0xa>
   153d0:	2b08      	cmp	r3, #8
   153d2:	600b      	str	r3, [r1, #0]
   153d4:	d806      	bhi.n	153e4 <LLF_RND_GetFastestRosc+0x18>
   153d6:	6a02      	ldr	r2, [r0, #32]
   153d8:	4213      	tst	r3, r2
   153da:	ea4f 0343 	mov.w	r3, r3, lsl #1
   153de:	d0f7      	beq.n	153d0 <LLF_RND_GetFastestRosc+0x4>
   153e0:	2000      	movs	r0, #0
   153e2:	4770      	bx	lr
   153e4:	4800      	ldr	r0, [pc, #0]	; (153e8 <LLF_RND_GetFastestRosc+0x1c>)
   153e6:	4770      	bx	lr
   153e8:	00f10c31 	.word	0x00f10c31

000153ec <LLF_RND_TurnOffTrng>:
   153ec:	4b04      	ldr	r3, [pc, #16]	; (15400 <LLF_RND_TurnOffTrng+0x14>)
   153ee:	2200      	movs	r2, #0
   153f0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   153f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   153f8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   153fc:	f7ff b8c6 	b.w	1458c <CC_HalClearInterruptBit>
   15400:	5002b000 	.word	0x5002b000

00015404 <SetDataBuffersInfo>:
   15404:	b5f0      	push	{r4, r5, r6, r7, lr}
   15406:	b083      	sub	sp, #12
   15408:	461d      	mov	r5, r3
   1540a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1540e:	f04f 0300 	mov.w	r3, #0
   15412:	f88d 3007 	strb.w	r3, [sp, #7]
   15416:	d324      	bcc.n	15462 <SetDataBuffersInfo+0x5e>
   15418:	468c      	mov	ip, r1
   1541a:	4484      	add	ip, r0
   1541c:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   15420:	4604      	mov	r4, r0
   15422:	d81e      	bhi.n	15462 <SetDataBuffersInfo+0x5e>
   15424:	4617      	mov	r7, r2
   15426:	f10d 0307 	add.w	r3, sp, #7
   1542a:	2201      	movs	r2, #1
   1542c:	f000 fe64 	bl	160f8 <CC_PalDataBufferAttrGet>
   15430:	4606      	mov	r6, r0
   15432:	b9b0      	cbnz	r0, 15462 <SetDataBuffersInfo+0x5e>
   15434:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15436:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1543a:	603c      	str	r4, [r7, #0]
   1543c:	713b      	strb	r3, [r7, #4]
   1543e:	b192      	cbz	r2, 15466 <SetDataBuffersInfo+0x62>
   15440:	b14d      	cbz	r5, 15456 <SetDataBuffersInfo+0x52>
   15442:	4602      	mov	r2, r0
   15444:	9908      	ldr	r1, [sp, #32]
   15446:	f10d 0307 	add.w	r3, sp, #7
   1544a:	4628      	mov	r0, r5
   1544c:	f000 fe54 	bl	160f8 <CC_PalDataBufferAttrGet>
   15450:	b938      	cbnz	r0, 15462 <SetDataBuffersInfo+0x5e>
   15452:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15456:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15458:	4630      	mov	r0, r6
   1545a:	6015      	str	r5, [r2, #0]
   1545c:	7113      	strb	r3, [r2, #4]
   1545e:	b003      	add	sp, #12
   15460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15462:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   15466:	4630      	mov	r0, r6
   15468:	b003      	add	sp, #12
   1546a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001546c <InitHashDrv>:
   1546c:	b1d8      	cbz	r0, 154a6 <InitHashDrv+0x3a>
   1546e:	b508      	push	{r3, lr}
   15470:	6803      	ldr	r3, [r0, #0]
   15472:	2b01      	cmp	r3, #1
   15474:	d004      	beq.n	15480 <InitHashDrv+0x14>
   15476:	2b02      	cmp	r3, #2
   15478:	d00f      	beq.n	1549a <InitHashDrv+0x2e>
   1547a:	b143      	cbz	r3, 1548e <InitHashDrv+0x22>
   1547c:	480b      	ldr	r0, [pc, #44]	; (154ac <InitHashDrv+0x40>)
   1547e:	bd08      	pop	{r3, pc}
   15480:	490b      	ldr	r1, [pc, #44]	; (154b0 <InitHashDrv+0x44>)
   15482:	2220      	movs	r2, #32
   15484:	3008      	adds	r0, #8
   15486:	f7ff f90f 	bl	146a8 <CC_PalMemCopyPlat>
   1548a:	2000      	movs	r0, #0
   1548c:	bd08      	pop	{r3, pc}
   1548e:	4909      	ldr	r1, [pc, #36]	; (154b4 <InitHashDrv+0x48>)
   15490:	2214      	movs	r2, #20
   15492:	3008      	adds	r0, #8
   15494:	f7ff f908 	bl	146a8 <CC_PalMemCopyPlat>
   15498:	e7f7      	b.n	1548a <InitHashDrv+0x1e>
   1549a:	4907      	ldr	r1, [pc, #28]	; (154b8 <InitHashDrv+0x4c>)
   1549c:	2220      	movs	r2, #32
   1549e:	3008      	adds	r0, #8
   154a0:	f7ff f902 	bl	146a8 <CC_PalMemCopyPlat>
   154a4:	e7f1      	b.n	1548a <InitHashDrv+0x1e>
   154a6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   154aa:	4770      	bx	lr
   154ac:	00f30001 	.word	0x00f30001
   154b0:	00018fb0 	.word	0x00018fb0
   154b4:	00018ff0 	.word	0x00018ff0
   154b8:	00018fd0 	.word	0x00018fd0

000154bc <ProcessHashDrv>:
   154bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   154c0:	2900      	cmp	r1, #0
   154c2:	f000 80f9 	beq.w	156b8 <ProcessHashDrv+0x1fc>
   154c6:	4604      	mov	r4, r0
   154c8:	2800      	cmp	r0, #0
   154ca:	f000 80f9 	beq.w	156c0 <ProcessHashDrv+0x204>
   154ce:	6803      	ldr	r3, [r0, #0]
   154d0:	4690      	mov	r8, r2
   154d2:	460f      	mov	r7, r1
   154d4:	2b00      	cmp	r3, #0
   154d6:	f000 80c3 	beq.w	15660 <ProcessHashDrv+0x1a4>
   154da:	3b01      	subs	r3, #1
   154dc:	2b01      	cmp	r3, #1
   154de:	f200 80d7 	bhi.w	15690 <ProcessHashDrv+0x1d4>
   154e2:	4879      	ldr	r0, [pc, #484]	; (156c8 <ProcessHashDrv+0x20c>)
   154e4:	f04f 31ff 	mov.w	r1, #4294967295
   154e8:	f04f 0902 	mov.w	r9, #2
   154ec:	f7ff f8f8 	bl	146e0 <CC_PalMutexLock>
   154f0:	2800      	cmp	r0, #0
   154f2:	f040 80bf 	bne.w	15674 <ProcessHashDrv+0x1b8>
   154f6:	2000      	movs	r0, #0
   154f8:	f7ff f922 	bl	14740 <CC_PalPowerSaveModeSelect>
   154fc:	4606      	mov	r6, r0
   154fe:	2800      	cmp	r0, #0
   15500:	f040 80c2 	bne.w	15688 <ProcessHashDrv+0x1cc>
   15504:	4a71      	ldr	r2, [pc, #452]	; (156cc <ProcessHashDrv+0x210>)
   15506:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1550a:	2b00      	cmp	r3, #0
   1550c:	d1fb      	bne.n	15506 <ProcessHashDrv+0x4a>
   1550e:	4d6f      	ldr	r5, [pc, #444]	; (156cc <ProcessHashDrv+0x210>)
   15510:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   15514:	2b00      	cmp	r3, #0
   15516:	d1fb      	bne.n	15510 <ProcessHashDrv+0x54>
   15518:	f04f 30ff 	mov.w	r0, #4294967295
   1551c:	f7ff f836 	bl	1458c <CC_HalClearInterruptBit>
   15520:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   15524:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   15528:	f7ff f83e 	bl	145a8 <CC_HalMaskInterrupt>
   1552c:	2301      	movs	r3, #1
   1552e:	2207      	movs	r2, #7
   15530:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   15534:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   15538:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   1553c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1553e:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   15542:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15544:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   15548:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   1554c:	6823      	ldr	r3, [r4, #0]
   1554e:	b15b      	cbz	r3, 15568 <ProcessHashDrv+0xac>
   15550:	3b01      	subs	r3, #1
   15552:	2b01      	cmp	r3, #1
   15554:	d818      	bhi.n	15588 <ProcessHashDrv+0xcc>
   15556:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15558:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   1555c:	6a23      	ldr	r3, [r4, #32]
   1555e:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   15562:	69e3      	ldr	r3, [r4, #28]
   15564:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   15568:	4b58      	ldr	r3, [pc, #352]	; (156cc <ProcessHashDrv+0x210>)
   1556a:	69a2      	ldr	r2, [r4, #24]
   1556c:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   15570:	6962      	ldr	r2, [r4, #20]
   15572:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   15576:	6922      	ldr	r2, [r4, #16]
   15578:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   1557c:	68e2      	ldr	r2, [r4, #12]
   1557e:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   15582:	68a2      	ldr	r2, [r4, #8]
   15584:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   15588:	4a50      	ldr	r2, [pc, #320]	; (156cc <ProcessHashDrv+0x210>)
   1558a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1558e:	2b00      	cmp	r3, #0
   15590:	d1fb      	bne.n	1558a <ProcessHashDrv+0xce>
   15592:	f1b8 0f00 	cmp.w	r8, #0
   15596:	d05f      	beq.n	15658 <ProcessHashDrv+0x19c>
   15598:	6863      	ldr	r3, [r4, #4]
   1559a:	2b01      	cmp	r3, #1
   1559c:	bf08      	it	eq
   1559e:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   155a2:	4b4a      	ldr	r3, [pc, #296]	; (156cc <ProcessHashDrv+0x210>)
   155a4:	683a      	ldr	r2, [r7, #0]
   155a6:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   155aa:	2040      	movs	r0, #64	; 0x40
   155ac:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   155b0:	f7ff f800 	bl	145b4 <CC_HalWaitInterrupt>
   155b4:	4606      	mov	r6, r0
   155b6:	4a45      	ldr	r2, [pc, #276]	; (156cc <ProcessHashDrv+0x210>)
   155b8:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   155bc:	2b00      	cmp	r3, #0
   155be:	d1fb      	bne.n	155b8 <ProcessHashDrv+0xfc>
   155c0:	4a42      	ldr	r2, [pc, #264]	; (156cc <ProcessHashDrv+0x210>)
   155c2:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   155c6:	2b00      	cmp	r3, #0
   155c8:	d1fb      	bne.n	155c2 <ProcessHashDrv+0x106>
   155ca:	6823      	ldr	r3, [r4, #0]
   155cc:	b15b      	cbz	r3, 155e6 <ProcessHashDrv+0x12a>
   155ce:	3b01      	subs	r3, #1
   155d0:	2b01      	cmp	r3, #1
   155d2:	d818      	bhi.n	15606 <ProcessHashDrv+0x14a>
   155d4:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   155d8:	6263      	str	r3, [r4, #36]	; 0x24
   155da:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   155de:	6223      	str	r3, [r4, #32]
   155e0:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   155e4:	61e3      	str	r3, [r4, #28]
   155e6:	4b39      	ldr	r3, [pc, #228]	; (156cc <ProcessHashDrv+0x210>)
   155e8:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   155ec:	61a2      	str	r2, [r4, #24]
   155ee:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   155f2:	6162      	str	r2, [r4, #20]
   155f4:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   155f8:	6122      	str	r2, [r4, #16]
   155fa:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   155fe:	60e2      	str	r2, [r4, #12]
   15600:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   15604:	60a3      	str	r3, [r4, #8]
   15606:	4a31      	ldr	r2, [pc, #196]	; (156cc <ProcessHashDrv+0x210>)
   15608:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   1560c:	64a1      	str	r1, [r4, #72]	; 0x48
   1560e:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   15612:	64e1      	str	r1, [r4, #76]	; 0x4c
   15614:	2300      	movs	r3, #0
   15616:	2101      	movs	r1, #1
   15618:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   1561c:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   15620:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   15624:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15628:	2b00      	cmp	r3, #0
   1562a:	d1fb      	bne.n	15624 <ProcessHashDrv+0x168>
   1562c:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   15630:	2e00      	cmp	r6, #0
   15632:	d13b      	bne.n	156ac <ProcessHashDrv+0x1f0>
   15634:	4b25      	ldr	r3, [pc, #148]	; (156cc <ProcessHashDrv+0x210>)
   15636:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1563a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1563e:	f7fe ffb3 	bl	145a8 <CC_HalMaskInterrupt>
   15642:	2001      	movs	r0, #1
   15644:	f7ff f87c 	bl	14740 <CC_PalPowerSaveModeSelect>
   15648:	bb60      	cbnz	r0, 156a4 <ProcessHashDrv+0x1e8>
   1564a:	481f      	ldr	r0, [pc, #124]	; (156c8 <ProcessHashDrv+0x20c>)
   1564c:	f7ff f850 	bl	146f0 <CC_PalMutexUnlock>
   15650:	bb10      	cbnz	r0, 15698 <ProcessHashDrv+0x1dc>
   15652:	4630      	mov	r0, r6
   15654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15658:	2304      	movs	r3, #4
   1565a:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   1565e:	e7aa      	b.n	155b6 <ProcessHashDrv+0xfa>
   15660:	4819      	ldr	r0, [pc, #100]	; (156c8 <ProcessHashDrv+0x20c>)
   15662:	f04f 31ff 	mov.w	r1, #4294967295
   15666:	f04f 0901 	mov.w	r9, #1
   1566a:	f7ff f839 	bl	146e0 <CC_PalMutexLock>
   1566e:	2800      	cmp	r0, #0
   15670:	f43f af41 	beq.w	154f6 <ProcessHashDrv+0x3a>
   15674:	4816      	ldr	r0, [pc, #88]	; (156d0 <ProcessHashDrv+0x214>)
   15676:	f7fe f927 	bl	138c8 <CC_PalAbort>
   1567a:	2000      	movs	r0, #0
   1567c:	f7ff f860 	bl	14740 <CC_PalPowerSaveModeSelect>
   15680:	4606      	mov	r6, r0
   15682:	2800      	cmp	r0, #0
   15684:	f43f af3e 	beq.w	15504 <ProcessHashDrv+0x48>
   15688:	4812      	ldr	r0, [pc, #72]	; (156d4 <ProcessHashDrv+0x218>)
   1568a:	f7fe f91d 	bl	138c8 <CC_PalAbort>
   1568e:	e739      	b.n	15504 <ProcessHashDrv+0x48>
   15690:	4e11      	ldr	r6, [pc, #68]	; (156d8 <ProcessHashDrv+0x21c>)
   15692:	4630      	mov	r0, r6
   15694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15698:	4810      	ldr	r0, [pc, #64]	; (156dc <ProcessHashDrv+0x220>)
   1569a:	f7fe f915 	bl	138c8 <CC_PalAbort>
   1569e:	4630      	mov	r0, r6
   156a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   156a4:	480e      	ldr	r0, [pc, #56]	; (156e0 <ProcessHashDrv+0x224>)
   156a6:	f7fe f90f 	bl	138c8 <CC_PalAbort>
   156aa:	e7ce      	b.n	1564a <ProcessHashDrv+0x18e>
   156ac:	2110      	movs	r1, #16
   156ae:	f104 0008 	add.w	r0, r4, #8
   156b2:	f7fe fffd 	bl	146b0 <CC_PalMemSetZeroPlat>
   156b6:	e7bd      	b.n	15634 <ProcessHashDrv+0x178>
   156b8:	4e0a      	ldr	r6, [pc, #40]	; (156e4 <ProcessHashDrv+0x228>)
   156ba:	4630      	mov	r0, r6
   156bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   156c0:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   156c4:	e7c5      	b.n	15652 <ProcessHashDrv+0x196>
   156c6:	bf00      	nop
   156c8:	20000514 	.word	0x20000514
   156cc:	5002b000 	.word	0x5002b000
   156d0:	00018ee4 	.word	0x00018ee4
   156d4:	00018efc 	.word	0x00018efc
   156d8:	00f30001 	.word	0x00f30001
   156dc:	00018f3c 	.word	0x00018f3c
   156e0:	00018f1c 	.word	0x00018f1c
   156e4:	00f30003 	.word	0x00f30003

000156e8 <FinishHashDrv>:
   156e8:	b398      	cbz	r0, 15752 <FinishHashDrv+0x6a>
   156ea:	b470      	push	{r4, r5, r6}
   156ec:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   156f0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   156f4:	ba26      	rev	r6, r4
   156f6:	ba0d      	rev	r5, r1
   156f8:	ba14      	rev	r4, r2
   156fa:	ba19      	rev	r1, r3
   156fc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   15700:	ba12      	rev	r2, r2
   15702:	e9c0 4104 	strd	r4, r1, [r0, #16]
   15706:	6182      	str	r2, [r0, #24]
   15708:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   1570c:	e9c0 6502 	strd	r6, r5, [r0, #8]
   15710:	ba1b      	rev	r3, r3
   15712:	ba25      	rev	r5, r4
   15714:	e9c0 3507 	strd	r3, r5, [r0, #28]
   15718:	ba14      	rev	r4, r2
   1571a:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   1571e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   15720:	ba12      	rev	r2, r2
   15722:	ba09      	rev	r1, r1
   15724:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   15728:	62c2      	str	r2, [r0, #44]	; 0x2c
   1572a:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   1572e:	ba1b      	rev	r3, r3
   15730:	ba25      	rev	r5, r4
   15732:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   15736:	ba14      	rev	r4, r2
   15738:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   1573c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   1573e:	ba12      	rev	r2, r2
   15740:	ba09      	rev	r1, r1
   15742:	ba1b      	rev	r3, r3
   15744:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   15748:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1574c:	2000      	movs	r0, #0
   1574e:	bc70      	pop	{r4, r5, r6}
   15750:	4770      	bx	lr
   15752:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   15756:	4770      	bx	lr

00015758 <LoadAesKey>:
   15758:	2800      	cmp	r0, #0
   1575a:	d047      	beq.n	157ec <LoadAesKey+0x94>
   1575c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   15760:	2b00      	cmp	r3, #0
   15762:	d034      	beq.n	157ce <LoadAesKey+0x76>
   15764:	2b03      	cmp	r3, #3
   15766:	b510      	push	{r4, lr}
   15768:	d013      	beq.n	15792 <LoadAesKey+0x3a>
   1576a:	4822      	ldr	r0, [pc, #136]	; (157f4 <LoadAesKey+0x9c>)
   1576c:	4c22      	ldr	r4, [pc, #136]	; (157f8 <LoadAesKey+0xa0>)
   1576e:	6822      	ldr	r2, [r4, #0]
   15770:	4b22      	ldr	r3, [pc, #136]	; (157fc <LoadAesKey+0xa4>)
   15772:	6812      	ldr	r2, [r2, #0]
   15774:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   15778:	6822      	ldr	r2, [r4, #0]
   1577a:	6852      	ldr	r2, [r2, #4]
   1577c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   15780:	6822      	ldr	r2, [r4, #0]
   15782:	6892      	ldr	r2, [r2, #8]
   15784:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   15788:	6822      	ldr	r2, [r4, #0]
   1578a:	68d2      	ldr	r2, [r2, #12]
   1578c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   15790:	bd10      	pop	{r4, pc}
   15792:	6b01      	ldr	r1, [r0, #48]	; 0x30
   15794:	6c00      	ldr	r0, [r0, #64]	; 0x40
   15796:	4c18      	ldr	r4, [pc, #96]	; (157f8 <LoadAesKey+0xa0>)
   15798:	f000 fba8 	bl	15eec <kmu_validate_kdr_slot_and_size>
   1579c:	2800      	cmp	r0, #0
   1579e:	d1e6      	bne.n	1576e <LoadAesKey+0x16>
   157a0:	6822      	ldr	r2, [r4, #0]
   157a2:	4b16      	ldr	r3, [pc, #88]	; (157fc <LoadAesKey+0xa4>)
   157a4:	6812      	ldr	r2, [r2, #0]
   157a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   157aa:	6822      	ldr	r2, [r4, #0]
   157ac:	6852      	ldr	r2, [r2, #4]
   157ae:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   157b2:	6822      	ldr	r2, [r4, #0]
   157b4:	6892      	ldr	r2, [r2, #8]
   157b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   157ba:	6822      	ldr	r2, [r4, #0]
   157bc:	68d2      	ldr	r2, [r2, #12]
   157be:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   157c2:	f000 fba1 	bl	15f08 <kmu_use_kdr_key>
   157c6:	2800      	cmp	r0, #0
   157c8:	d1d1      	bne.n	1576e <LoadAesKey+0x16>
   157ca:	2000      	movs	r0, #0
   157cc:	bd10      	pop	{r4, pc}
   157ce:	4b0b      	ldr	r3, [pc, #44]	; (157fc <LoadAesKey+0xa4>)
   157d0:	6902      	ldr	r2, [r0, #16]
   157d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   157d6:	6942      	ldr	r2, [r0, #20]
   157d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   157dc:	6982      	ldr	r2, [r0, #24]
   157de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   157e2:	69c2      	ldr	r2, [r0, #28]
   157e4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   157e8:	2000      	movs	r0, #0
   157ea:	4770      	bx	lr
   157ec:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   157f0:	4770      	bx	lr
   157f2:	bf00      	nop
   157f4:	00f10009 	.word	0x00f10009
   157f8:	20000500 	.word	0x20000500
   157fc:	5002b000 	.word	0x5002b000

00015800 <InitAes.part.0>:
   15800:	4a37      	ldr	r2, [pc, #220]	; (158e0 <InitAes.part.0+0xe0>)
   15802:	b538      	push	{r3, r4, r5, lr}
   15804:	4604      	mov	r4, r0
   15806:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1580a:	2b00      	cmp	r3, #0
   1580c:	d1fb      	bne.n	15806 <InitAes.part.0+0x6>
   1580e:	4a34      	ldr	r2, [pc, #208]	; (158e0 <InitAes.part.0+0xe0>)
   15810:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   15814:	2b00      	cmp	r3, #0
   15816:	d1fb      	bne.n	15810 <InitAes.part.0+0x10>
   15818:	4a31      	ldr	r2, [pc, #196]	; (158e0 <InitAes.part.0+0xe0>)
   1581a:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   1581e:	2b00      	cmp	r3, #0
   15820:	d1fb      	bne.n	1581a <InitAes.part.0+0x1a>
   15822:	4a2f      	ldr	r2, [pc, #188]	; (158e0 <InitAes.part.0+0xe0>)
   15824:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   15828:	2b00      	cmp	r3, #0
   1582a:	d1fb      	bne.n	15824 <InitAes.part.0+0x24>
   1582c:	4a2c      	ldr	r2, [pc, #176]	; (158e0 <InitAes.part.0+0xe0>)
   1582e:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   15832:	2b00      	cmp	r3, #0
   15834:	d1fb      	bne.n	1582e <InitAes.part.0+0x2e>
   15836:	4d2a      	ldr	r5, [pc, #168]	; (158e0 <InitAes.part.0+0xe0>)
   15838:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   1583c:	2b00      	cmp	r3, #0
   1583e:	d1fb      	bne.n	15838 <InitAes.part.0+0x38>
   15840:	f04f 30ff 	mov.w	r0, #4294967295
   15844:	f7fe fea2 	bl	1458c <CC_HalClearInterruptBit>
   15848:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1584a:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   1584e:	f023 0304 	bic.w	r3, r3, #4
   15852:	2b03      	cmp	r3, #3
   15854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15856:	d039      	beq.n	158cc <InitAes.part.0+0xcc>
   15858:	2b01      	cmp	r3, #1
   1585a:	bf0c      	ite	eq
   1585c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   15860:	f020 0020 	bicne.w	r0, r0, #32
   15864:	f7fe fea0 	bl	145a8 <CC_HalMaskInterrupt>
   15868:	4a1d      	ldr	r2, [pc, #116]	; (158e0 <InitAes.part.0+0xe0>)
   1586a:	2301      	movs	r3, #1
   1586c:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   15870:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15874:	2b00      	cmp	r3, #0
   15876:	d1fb      	bne.n	15870 <InitAes.part.0+0x70>
   15878:	4a19      	ldr	r2, [pc, #100]	; (158e0 <InitAes.part.0+0xe0>)
   1587a:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1587e:	2b00      	cmp	r3, #0
   15880:	d1fb      	bne.n	1587a <InitAes.part.0+0x7a>
   15882:	4917      	ldr	r1, [pc, #92]	; (158e0 <InitAes.part.0+0xe0>)
   15884:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   15888:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   1588c:	2b00      	cmp	r3, #0
   1588e:	d1fb      	bne.n	15888 <InitAes.part.0+0x88>
   15890:	4a13      	ldr	r2, [pc, #76]	; (158e0 <InitAes.part.0+0xe0>)
   15892:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   15896:	2b00      	cmp	r3, #0
   15898:	d1fb      	bne.n	15892 <InitAes.part.0+0x92>
   1589a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1589c:	f022 0104 	bic.w	r1, r2, #4
   158a0:	2903      	cmp	r1, #3
   158a2:	bf18      	it	ne
   158a4:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   158a6:	490e      	ldr	r1, [pc, #56]	; (158e0 <InitAes.part.0+0xe0>)
   158a8:	ea4f 0282 	mov.w	r2, r2, lsl #2
   158ac:	bf18      	it	ne
   158ae:	f003 0301 	andne.w	r3, r3, #1
   158b2:	f002 021c 	and.w	r2, r2, #28
   158b6:	431a      	orrs	r2, r3
   158b8:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   158bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   158be:	2b07      	cmp	r3, #7
   158c0:	bf04      	itt	eq
   158c2:	2301      	moveq	r3, #1
   158c4:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   158c8:	2000      	movs	r0, #0
   158ca:	bd38      	pop	{r3, r4, r5, pc}
   158cc:	2b01      	cmp	r3, #1
   158ce:	bf0c      	ite	eq
   158d0:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   158d4:	f020 0010 	bicne.w	r0, r0, #16
   158d8:	f7fe fe66 	bl	145a8 <CC_HalMaskInterrupt>
   158dc:	e7c4      	b.n	15868 <InitAes.part.0+0x68>
   158de:	bf00      	nop
   158e0:	5002b000 	.word	0x5002b000

000158e4 <write_invalid_key>:
   158e4:	4a09      	ldr	r2, [pc, #36]	; (1590c <write_invalid_key+0x28>)
   158e6:	4b0a      	ldr	r3, [pc, #40]	; (15910 <write_invalid_key+0x2c>)
   158e8:	6811      	ldr	r1, [r2, #0]
   158ea:	6809      	ldr	r1, [r1, #0]
   158ec:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   158f0:	6811      	ldr	r1, [r2, #0]
   158f2:	6849      	ldr	r1, [r1, #4]
   158f4:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   158f8:	6811      	ldr	r1, [r2, #0]
   158fa:	6889      	ldr	r1, [r1, #8]
   158fc:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   15900:	6812      	ldr	r2, [r2, #0]
   15902:	68d2      	ldr	r2, [r2, #12]
   15904:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   15908:	4770      	bx	lr
   1590a:	bf00      	nop
   1590c:	20000500 	.word	0x20000500
   15910:	5002b000 	.word	0x5002b000

00015914 <ProcessAesDrv>:
   15914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15918:	b085      	sub	sp, #20
   1591a:	2900      	cmp	r1, #0
   1591c:	f000 80ec 	beq.w	15af8 <ProcessAesDrv+0x1e4>
   15920:	4690      	mov	r8, r2
   15922:	2a00      	cmp	r2, #0
   15924:	f000 80e8 	beq.w	15af8 <ProcessAesDrv+0x1e4>
   15928:	4605      	mov	r5, r0
   1592a:	2800      	cmp	r0, #0
   1592c:	f000 8129 	beq.w	15b82 <ProcessAesDrv+0x26e>
   15930:	4699      	mov	r9, r3
   15932:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15934:	460e      	mov	r6, r1
   15936:	2b00      	cmp	r3, #0
   15938:	d152      	bne.n	159e0 <ProcessAesDrv+0xcc>
   1593a:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   1593e:	d254      	bcs.n	159ea <ProcessAesDrv+0xd6>
   15940:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   15944:	2b04      	cmp	r3, #4
   15946:	f000 80ff 	beq.w	15b48 <ProcessAesDrv+0x234>
   1594a:	2700      	movs	r7, #0
   1594c:	48ad      	ldr	r0, [pc, #692]	; (15c04 <ProcessAesDrv+0x2f0>)
   1594e:	f04f 31ff 	mov.w	r1, #4294967295
   15952:	f7fe fec5 	bl	146e0 <CC_PalMutexLock>
   15956:	2800      	cmp	r0, #0
   15958:	f040 80d5 	bne.w	15b06 <ProcessAesDrv+0x1f2>
   1595c:	2000      	movs	r0, #0
   1595e:	f7fe feef 	bl	14740 <CC_PalPowerSaveModeSelect>
   15962:	2800      	cmp	r0, #0
   15964:	f040 80d8 	bne.w	15b18 <ProcessAesDrv+0x204>
   15968:	48a7      	ldr	r0, [pc, #668]	; (15c08 <ProcessAesDrv+0x2f4>)
   1596a:	2301      	movs	r3, #1
   1596c:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   15970:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   15974:	2c00      	cmp	r4, #0
   15976:	d1fb      	bne.n	15970 <ProcessAesDrv+0x5c>
   15978:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1597a:	2b03      	cmp	r3, #3
   1597c:	dc3a      	bgt.n	159f4 <ProcessAesDrv+0xe0>
   1597e:	2b00      	cmp	r3, #0
   15980:	da3b      	bge.n	159fa <ProcessAesDrv+0xe6>
   15982:	4ca2      	ldr	r4, [pc, #648]	; (15c0c <ProcessAesDrv+0x2f8>)
   15984:	4aa0      	ldr	r2, [pc, #640]	; (15c08 <ProcessAesDrv+0x2f4>)
   15986:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1598a:	2b00      	cmp	r3, #0
   1598c:	d1fb      	bne.n	15986 <ProcessAesDrv+0x72>
   1598e:	2f00      	cmp	r7, #0
   15990:	f040 80d1 	bne.w	15b36 <ProcessAesDrv+0x222>
   15994:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15996:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   15998:	f023 0304 	bic.w	r3, r3, #4
   1599c:	2b03      	cmp	r3, #3
   1599e:	4b9a      	ldr	r3, [pc, #616]	; (15c08 <ProcessAesDrv+0x2f4>)
   159a0:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   159a4:	f000 809f 	beq.w	15ae6 <ProcessAesDrv+0x1d2>
   159a8:	2a01      	cmp	r2, #1
   159aa:	bf0c      	ite	eq
   159ac:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   159b0:	f040 0020 	orrne.w	r0, r0, #32
   159b4:	f7fe fdf8 	bl	145a8 <CC_HalMaskInterrupt>
   159b8:	4b93      	ldr	r3, [pc, #588]	; (15c08 <ProcessAesDrv+0x2f4>)
   159ba:	2200      	movs	r2, #0
   159bc:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   159c0:	2001      	movs	r0, #1
   159c2:	f7fe febd 	bl	14740 <CC_PalPowerSaveModeSelect>
   159c6:	2800      	cmp	r0, #0
   159c8:	f040 80b1 	bne.w	15b2e <ProcessAesDrv+0x21a>
   159cc:	488d      	ldr	r0, [pc, #564]	; (15c04 <ProcessAesDrv+0x2f0>)
   159ce:	f7fe fe8f 	bl	146f0 <CC_PalMutexUnlock>
   159d2:	2800      	cmp	r0, #0
   159d4:	f040 80a4 	bne.w	15b20 <ProcessAesDrv+0x20c>
   159d8:	4620      	mov	r0, r4
   159da:	b005      	add	sp, #20
   159dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159e0:	2b01      	cmp	r3, #1
   159e2:	d1ad      	bne.n	15940 <ProcessAesDrv+0x2c>
   159e4:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   159e8:	d3aa      	bcc.n	15940 <ProcessAesDrv+0x2c>
   159ea:	4c89      	ldr	r4, [pc, #548]	; (15c10 <ProcessAesDrv+0x2fc>)
   159ec:	4620      	mov	r0, r4
   159ee:	b005      	add	sp, #20
   159f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159f4:	3b06      	subs	r3, #6
   159f6:	2b01      	cmp	r3, #1
   159f8:	d8c3      	bhi.n	15982 <ProcessAesDrv+0x6e>
   159fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   159fc:	2b01      	cmp	r3, #1
   159fe:	f200 80be 	bhi.w	15b7e <ProcessAesDrv+0x26a>
   15a02:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   15a04:	2b01      	cmp	r3, #1
   15a06:	d87c      	bhi.n	15b02 <ProcessAesDrv+0x1ee>
   15a08:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   15a0a:	2b01      	cmp	r3, #1
   15a0c:	f200 80e8 	bhi.w	15be0 <ProcessAesDrv+0x2cc>
   15a10:	4628      	mov	r0, r5
   15a12:	f7ff fef5 	bl	15800 <InitAes.part.0>
   15a16:	4604      	mov	r4, r0
   15a18:	2800      	cmp	r0, #0
   15a1a:	d1b3      	bne.n	15984 <ProcessAesDrv+0x70>
   15a1c:	4628      	mov	r0, r5
   15a1e:	f7ff fe9b 	bl	15758 <LoadAesKey>
   15a22:	4604      	mov	r4, r0
   15a24:	2800      	cmp	r0, #0
   15a26:	d1ad      	bne.n	15984 <ProcessAesDrv+0x70>
   15a28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15a2a:	2b07      	cmp	r3, #7
   15a2c:	d8a9      	bhi.n	15982 <ProcessAesDrv+0x6e>
   15a2e:	2201      	movs	r2, #1
   15a30:	409a      	lsls	r2, r3
   15a32:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   15a36:	f040 80d5 	bne.w	15be4 <ProcessAesDrv+0x2d0>
   15a3a:	f012 0f44 	tst.w	r2, #68	; 0x44
   15a3e:	f040 80ba 	bne.w	15bb6 <ProcessAesDrv+0x2a2>
   15a42:	07d2      	lsls	r2, r2, #31
   15a44:	d59d      	bpl.n	15982 <ProcessAesDrv+0x6e>
   15a46:	f023 0304 	bic.w	r3, r3, #4
   15a4a:	2b03      	cmp	r3, #3
   15a4c:	6832      	ldr	r2, [r6, #0]
   15a4e:	d00d      	beq.n	15a6c <ProcessAesDrv+0x158>
   15a50:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   15a52:	f8d8 1000 	ldr.w	r1, [r8]
   15a56:	2b01      	cmp	r3, #1
   15a58:	4b6b      	ldr	r3, [pc, #428]	; (15c08 <ProcessAesDrv+0x2f4>)
   15a5a:	bf0b      	itete	eq
   15a5c:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   15a60:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   15a64:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   15a68:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   15a6c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   15a6e:	2b01      	cmp	r3, #1
   15a70:	4b65      	ldr	r3, [pc, #404]	; (15c08 <ProcessAesDrv+0x2f4>)
   15a72:	bf0b      	itete	eq
   15a74:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   15a78:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   15a7c:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   15a80:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   15a84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15a86:	f023 0304 	bic.w	r3, r3, #4
   15a8a:	2b03      	cmp	r3, #3
   15a8c:	f000 80a2 	beq.w	15bd4 <ProcessAesDrv+0x2c0>
   15a90:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   15a92:	2b01      	cmp	r3, #1
   15a94:	bf14      	ite	ne
   15a96:	2020      	movne	r0, #32
   15a98:	2080      	moveq	r0, #128	; 0x80
   15a9a:	f7fe fd8b 	bl	145b4 <CC_HalWaitInterrupt>
   15a9e:	4604      	mov	r4, r0
   15aa0:	2800      	cmp	r0, #0
   15aa2:	f47f af6f 	bne.w	15984 <ProcessAesDrv+0x70>
   15aa6:	4b58      	ldr	r3, [pc, #352]	; (15c08 <ProcessAesDrv+0x2f4>)
   15aa8:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   15aac:	2c00      	cmp	r4, #0
   15aae:	d1fb      	bne.n	15aa8 <ProcessAesDrv+0x194>
   15ab0:	6b69      	ldr	r1, [r5, #52]	; 0x34
   15ab2:	2907      	cmp	r1, #7
   15ab4:	d814      	bhi.n	15ae0 <ProcessAesDrv+0x1cc>
   15ab6:	2201      	movs	r2, #1
   15ab8:	408a      	lsls	r2, r1
   15aba:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   15abe:	f040 80bb 	bne.w	15c38 <ProcessAesDrv+0x324>
   15ac2:	f012 0f44 	tst.w	r2, #68	; 0x44
   15ac6:	d00b      	beq.n	15ae0 <ProcessAesDrv+0x1cc>
   15ac8:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   15acc:	602a      	str	r2, [r5, #0]
   15ace:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   15ad2:	606a      	str	r2, [r5, #4]
   15ad4:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   15ad8:	60aa      	str	r2, [r5, #8]
   15ada:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   15ade:	60eb      	str	r3, [r5, #12]
   15ae0:	2301      	movs	r3, #1
   15ae2:	65ab      	str	r3, [r5, #88]	; 0x58
   15ae4:	e74e      	b.n	15984 <ProcessAesDrv+0x70>
   15ae6:	2a01      	cmp	r2, #1
   15ae8:	bf0c      	ite	eq
   15aea:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   15aee:	f040 0010 	orrne.w	r0, r0, #16
   15af2:	f7fe fd59 	bl	145a8 <CC_HalMaskInterrupt>
   15af6:	e75f      	b.n	159b8 <ProcessAesDrv+0xa4>
   15af8:	4c46      	ldr	r4, [pc, #280]	; (15c14 <ProcessAesDrv+0x300>)
   15afa:	4620      	mov	r0, r4
   15afc:	b005      	add	sp, #20
   15afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b02:	4c45      	ldr	r4, [pc, #276]	; (15c18 <ProcessAesDrv+0x304>)
   15b04:	e73e      	b.n	15984 <ProcessAesDrv+0x70>
   15b06:	4845      	ldr	r0, [pc, #276]	; (15c1c <ProcessAesDrv+0x308>)
   15b08:	f7fd fede 	bl	138c8 <CC_PalAbort>
   15b0c:	2000      	movs	r0, #0
   15b0e:	f7fe fe17 	bl	14740 <CC_PalPowerSaveModeSelect>
   15b12:	2800      	cmp	r0, #0
   15b14:	f43f af28 	beq.w	15968 <ProcessAesDrv+0x54>
   15b18:	4841      	ldr	r0, [pc, #260]	; (15c20 <ProcessAesDrv+0x30c>)
   15b1a:	f7fd fed5 	bl	138c8 <CC_PalAbort>
   15b1e:	e723      	b.n	15968 <ProcessAesDrv+0x54>
   15b20:	4840      	ldr	r0, [pc, #256]	; (15c24 <ProcessAesDrv+0x310>)
   15b22:	f7fd fed1 	bl	138c8 <CC_PalAbort>
   15b26:	4620      	mov	r0, r4
   15b28:	b005      	add	sp, #20
   15b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b2e:	483e      	ldr	r0, [pc, #248]	; (15c28 <ProcessAesDrv+0x314>)
   15b30:	f7fd feca 	bl	138c8 <CC_PalAbort>
   15b34:	e74a      	b.n	159cc <ProcessAesDrv+0xb8>
   15b36:	2304      	movs	r3, #4
   15b38:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   15b3c:	2120      	movs	r1, #32
   15b3e:	f105 0010 	add.w	r0, r5, #16
   15b42:	f7fe fdb5 	bl	146b0 <CC_PalMemSetZeroPlat>
   15b46:	e725      	b.n	15994 <ProcessAesDrv+0x80>
   15b48:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15b4a:	6c28      	ldr	r0, [r5, #64]	; 0x40
   15b4c:	f000 f9c0 	bl	15ed0 <kmu_validate_slot_and_size>
   15b50:	b998      	cbnz	r0, 15b7a <ProcessAesDrv+0x266>
   15b52:	4f36      	ldr	r7, [pc, #216]	; (15c2c <ProcessAesDrv+0x318>)
   15b54:	4c2c      	ldr	r4, [pc, #176]	; (15c08 <ProcessAesDrv+0x2f4>)
   15b56:	683b      	ldr	r3, [r7, #0]
   15b58:	681b      	ldr	r3, [r3, #0]
   15b5a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   15b5e:	683b      	ldr	r3, [r7, #0]
   15b60:	685b      	ldr	r3, [r3, #4]
   15b62:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   15b66:	683b      	ldr	r3, [r7, #0]
   15b68:	689b      	ldr	r3, [r3, #8]
   15b6a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   15b6e:	683b      	ldr	r3, [r7, #0]
   15b70:	68db      	ldr	r3, [r3, #12]
   15b72:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   15b76:	6b29      	ldr	r1, [r5, #48]	; 0x30
   15b78:	b131      	cbz	r1, 15b88 <ProcessAesDrv+0x274>
   15b7a:	2701      	movs	r7, #1
   15b7c:	e6e6      	b.n	1594c <ProcessAesDrv+0x38>
   15b7e:	4c2c      	ldr	r4, [pc, #176]	; (15c30 <ProcessAesDrv+0x31c>)
   15b80:	e700      	b.n	15984 <ProcessAesDrv+0x70>
   15b82:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   15b86:	e727      	b.n	159d8 <ProcessAesDrv+0xc4>
   15b88:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   15b8a:	9301      	str	r3, [sp, #4]
   15b8c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   15b8e:	9300      	str	r3, [sp, #0]
   15b90:	f105 0a10 	add.w	sl, r5, #16
   15b94:	f04f 0b10 	mov.w	fp, #16
   15b98:	f8cd a008 	str.w	sl, [sp, #8]
   15b9c:	f8cd b00c 	str.w	fp, [sp, #12]
   15ba0:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   15ba4:	6c28      	ldr	r0, [r5, #64]	; 0x40
   15ba6:	f000 f9b9 	bl	15f1c <kmu_derive_cmac>
   15baa:	2800      	cmp	r0, #0
   15bac:	d151      	bne.n	15c52 <ProcessAesDrv+0x33e>
   15bae:	2300      	movs	r3, #0
   15bb0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   15bb4:	e7e1      	b.n	15b7a <ProcessAesDrv+0x266>
   15bb6:	4b14      	ldr	r3, [pc, #80]	; (15c08 <ProcessAesDrv+0x2f4>)
   15bb8:	682a      	ldr	r2, [r5, #0]
   15bba:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   15bbe:	686a      	ldr	r2, [r5, #4]
   15bc0:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   15bc4:	68aa      	ldr	r2, [r5, #8]
   15bc6:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   15bca:	68ea      	ldr	r2, [r5, #12]
   15bcc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   15bd0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15bd2:	e738      	b.n	15a46 <ProcessAesDrv+0x132>
   15bd4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   15bd6:	2b01      	cmp	r3, #1
   15bd8:	bf14      	ite	ne
   15bda:	2010      	movne	r0, #16
   15bdc:	2040      	moveq	r0, #64	; 0x40
   15bde:	e75c      	b.n	15a9a <ProcessAesDrv+0x186>
   15be0:	4c14      	ldr	r4, [pc, #80]	; (15c34 <ProcessAesDrv+0x320>)
   15be2:	e6cf      	b.n	15984 <ProcessAesDrv+0x70>
   15be4:	4b08      	ldr	r3, [pc, #32]	; (15c08 <ProcessAesDrv+0x2f4>)
   15be6:	682a      	ldr	r2, [r5, #0]
   15be8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   15bec:	686a      	ldr	r2, [r5, #4]
   15bee:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   15bf2:	68aa      	ldr	r2, [r5, #8]
   15bf4:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   15bf8:	68ea      	ldr	r2, [r5, #12]
   15bfa:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   15bfe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   15c00:	e721      	b.n	15a46 <ProcessAesDrv+0x132>
   15c02:	bf00      	nop
   15c04:	20000514 	.word	0x20000514
   15c08:	5002b000 	.word	0x5002b000
   15c0c:	00f10001 	.word	0x00f10001
   15c10:	00f10005 	.word	0x00f10005
   15c14:	00f1000b 	.word	0x00f1000b
   15c18:	00f10003 	.word	0x00f10003
   15c1c:	00018ee4 	.word	0x00018ee4
   15c20:	00018efc 	.word	0x00018efc
   15c24:	00018f3c 	.word	0x00018f3c
   15c28:	00018f1c 	.word	0x00018f1c
   15c2c:	20000500 	.word	0x20000500
   15c30:	00f10002 	.word	0x00f10002
   15c34:	00f10004 	.word	0x00f10004
   15c38:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   15c3c:	602a      	str	r2, [r5, #0]
   15c3e:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   15c42:	606a      	str	r2, [r5, #4]
   15c44:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   15c48:	60aa      	str	r2, [r5, #8]
   15c4a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   15c4e:	60eb      	str	r3, [r5, #12]
   15c50:	e746      	b.n	15ae0 <ProcessAesDrv+0x1cc>
   15c52:	683b      	ldr	r3, [r7, #0]
   15c54:	681b      	ldr	r3, [r3, #0]
   15c56:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   15c5a:	683b      	ldr	r3, [r7, #0]
   15c5c:	685b      	ldr	r3, [r3, #4]
   15c5e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   15c62:	683b      	ldr	r3, [r7, #0]
   15c64:	689b      	ldr	r3, [r3, #8]
   15c66:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   15c6a:	683b      	ldr	r3, [r7, #0]
   15c6c:	68db      	ldr	r3, [r3, #12]
   15c6e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   15c72:	4659      	mov	r1, fp
   15c74:	4650      	mov	r0, sl
   15c76:	f7fe fd1b 	bl	146b0 <CC_PalMemSetZeroPlat>
   15c7a:	e798      	b.n	15bae <ProcessAesDrv+0x29a>

00015c7c <FinishAesDrv>:
   15c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c80:	b309      	cbz	r1, 15cc6 <FinishAesDrv+0x4a>
   15c82:	b302      	cbz	r2, 15cc6 <FinishAesDrv+0x4a>
   15c84:	4604      	mov	r4, r0
   15c86:	2800      	cmp	r0, #0
   15c88:	f000 80af 	beq.w	15dea <FinishAesDrv+0x16e>
   15c8c:	461d      	mov	r5, r3
   15c8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15c90:	2b07      	cmp	r3, #7
   15c92:	460e      	mov	r6, r1
   15c94:	d01b      	beq.n	15cce <FinishAesDrv+0x52>
   15c96:	b95d      	cbnz	r5, 15cb0 <FinishAesDrv+0x34>
   15c98:	2b03      	cmp	r3, #3
   15c9a:	d110      	bne.n	15cbe <FinishAesDrv+0x42>
   15c9c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   15c9e:	b973      	cbnz	r3, 15cbe <FinishAesDrv+0x42>
   15ca0:	f100 0364 	add.w	r3, r0, #100	; 0x64
   15ca4:	6645      	str	r5, [r0, #100]	; 0x64
   15ca6:	6685      	str	r5, [r0, #104]	; 0x68
   15ca8:	66c5      	str	r5, [r0, #108]	; 0x6c
   15caa:	6705      	str	r5, [r0, #112]	; 0x70
   15cac:	600b      	str	r3, [r1, #0]
   15cae:	2510      	movs	r5, #16
   15cb0:	462b      	mov	r3, r5
   15cb2:	4631      	mov	r1, r6
   15cb4:	4620      	mov	r0, r4
   15cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15cba:	f7ff be2b 	b.w	15914 <ProcessAesDrv>
   15cbe:	462f      	mov	r7, r5
   15cc0:	4638      	mov	r0, r7
   15cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15cc6:	4f76      	ldr	r7, [pc, #472]	; (15ea0 <FinishAesDrv+0x224>)
   15cc8:	4638      	mov	r0, r7
   15cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15cce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	f040 808d 	bne.w	15df0 <FinishAesDrv+0x174>
   15cd6:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   15cda:	f080 8090 	bcs.w	15dfe <FinishAesDrv+0x182>
   15cde:	b91d      	cbnz	r5, 15ce8 <FinishAesDrv+0x6c>
   15ce0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   15ce2:	2b00      	cmp	r3, #0
   15ce4:	f040 808b 	bne.w	15dfe <FinishAesDrv+0x182>
   15ce8:	486e      	ldr	r0, [pc, #440]	; (15ea4 <FinishAesDrv+0x228>)
   15cea:	f04f 31ff 	mov.w	r1, #4294967295
   15cee:	f7fe fcf7 	bl	146e0 <CC_PalMutexLock>
   15cf2:	2800      	cmp	r0, #0
   15cf4:	f040 808f 	bne.w	15e16 <FinishAesDrv+0x19a>
   15cf8:	2000      	movs	r0, #0
   15cfa:	f7fe fd21 	bl	14740 <CC_PalPowerSaveModeSelect>
   15cfe:	2800      	cmp	r0, #0
   15d00:	f040 8085 	bne.w	15e0e <FinishAesDrv+0x192>
   15d04:	4a68      	ldr	r2, [pc, #416]	; (15ea8 <FinishAesDrv+0x22c>)
   15d06:	2301      	movs	r3, #1
   15d08:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   15d0c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15d10:	2b00      	cmp	r3, #0
   15d12:	d1fb      	bne.n	15d0c <FinishAesDrv+0x90>
   15d14:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15d16:	2b03      	cmp	r3, #3
   15d18:	dd4f      	ble.n	15dba <FinishAesDrv+0x13e>
   15d1a:	3b06      	subs	r3, #6
   15d1c:	2b01      	cmp	r3, #1
   15d1e:	d84e      	bhi.n	15dbe <FinishAesDrv+0x142>
   15d20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15d22:	2b01      	cmp	r3, #1
   15d24:	d86d      	bhi.n	15e02 <FinishAesDrv+0x186>
   15d26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15d28:	2b01      	cmp	r3, #1
   15d2a:	d878      	bhi.n	15e1e <FinishAesDrv+0x1a2>
   15d2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   15d2e:	2b01      	cmp	r3, #1
   15d30:	d877      	bhi.n	15e22 <FinishAesDrv+0x1a6>
   15d32:	4620      	mov	r0, r4
   15d34:	f7ff fd64 	bl	15800 <InitAes.part.0>
   15d38:	4607      	mov	r7, r0
   15d3a:	2800      	cmp	r0, #0
   15d3c:	d140      	bne.n	15dc0 <FinishAesDrv+0x144>
   15d3e:	4620      	mov	r0, r4
   15d40:	f7ff fd0a 	bl	15758 <LoadAesKey>
   15d44:	4607      	mov	r7, r0
   15d46:	2800      	cmp	r0, #0
   15d48:	d13a      	bne.n	15dc0 <FinishAesDrv+0x144>
   15d4a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   15d4c:	2a07      	cmp	r2, #7
   15d4e:	d836      	bhi.n	15dbe <FinishAesDrv+0x142>
   15d50:	2301      	movs	r3, #1
   15d52:	4093      	lsls	r3, r2
   15d54:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   15d58:	f040 8081 	bne.w	15e5e <FinishAesDrv+0x1e2>
   15d5c:	f013 0f44 	tst.w	r3, #68	; 0x44
   15d60:	d16f      	bne.n	15e42 <FinishAesDrv+0x1c6>
   15d62:	07db      	lsls	r3, r3, #31
   15d64:	d52b      	bpl.n	15dbe <FinishAesDrv+0x142>
   15d66:	4b50      	ldr	r3, [pc, #320]	; (15ea8 <FinishAesDrv+0x22c>)
   15d68:	2201      	movs	r2, #1
   15d6a:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   15d6e:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   15d72:	6831      	ldr	r1, [r6, #0]
   15d74:	2d00      	cmp	r5, #0
   15d76:	d156      	bne.n	15e26 <FinishAesDrv+0x1aa>
   15d78:	6da1      	ldr	r1, [r4, #88]	; 0x58
   15d7a:	b909      	cbnz	r1, 15d80 <FinishAesDrv+0x104>
   15d7c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   15d80:	4b49      	ldr	r3, [pc, #292]	; (15ea8 <FinishAesDrv+0x22c>)
   15d82:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   15d86:	2f00      	cmp	r7, #0
   15d88:	d1fb      	bne.n	15d82 <FinishAesDrv+0x106>
   15d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   15d8c:	2907      	cmp	r1, #7
   15d8e:	d817      	bhi.n	15dc0 <FinishAesDrv+0x144>
   15d90:	2201      	movs	r2, #1
   15d92:	408a      	lsls	r2, r1
   15d94:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   15d98:	d16f      	bne.n	15e7a <FinishAesDrv+0x1fe>
   15d9a:	f012 0f44 	tst.w	r2, #68	; 0x44
   15d9e:	d00f      	beq.n	15dc0 <FinishAesDrv+0x144>
   15da0:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   15da4:	6022      	str	r2, [r4, #0]
   15da6:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   15daa:	6062      	str	r2, [r4, #4]
   15dac:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   15db0:	60a2      	str	r2, [r4, #8]
   15db2:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   15db6:	60e3      	str	r3, [r4, #12]
   15db8:	e002      	b.n	15dc0 <FinishAesDrv+0x144>
   15dba:	2b00      	cmp	r3, #0
   15dbc:	dab0      	bge.n	15d20 <FinishAesDrv+0xa4>
   15dbe:	4f3b      	ldr	r7, [pc, #236]	; (15eac <FinishAesDrv+0x230>)
   15dc0:	4a39      	ldr	r2, [pc, #228]	; (15ea8 <FinishAesDrv+0x22c>)
   15dc2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   15dc6:	2b00      	cmp	r3, #0
   15dc8:	d1fb      	bne.n	15dc2 <FinishAesDrv+0x146>
   15dca:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   15dce:	2001      	movs	r0, #1
   15dd0:	f7fe fcb6 	bl	14740 <CC_PalPowerSaveModeSelect>
   15dd4:	b9b8      	cbnz	r0, 15e06 <FinishAesDrv+0x18a>
   15dd6:	4833      	ldr	r0, [pc, #204]	; (15ea4 <FinishAesDrv+0x228>)
   15dd8:	f7fe fc8a 	bl	146f0 <CC_PalMutexUnlock>
   15ddc:	2800      	cmp	r0, #0
   15dde:	f43f af6f 	beq.w	15cc0 <FinishAesDrv+0x44>
   15de2:	4833      	ldr	r0, [pc, #204]	; (15eb0 <FinishAesDrv+0x234>)
   15de4:	f7fd fd70 	bl	138c8 <CC_PalAbort>
   15de8:	e76a      	b.n	15cc0 <FinishAesDrv+0x44>
   15dea:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   15dee:	e767      	b.n	15cc0 <FinishAesDrv+0x44>
   15df0:	2b01      	cmp	r3, #1
   15df2:	f47f af74 	bne.w	15cde <FinishAesDrv+0x62>
   15df6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   15dfa:	f4ff af70 	bcc.w	15cde <FinishAesDrv+0x62>
   15dfe:	4f2d      	ldr	r7, [pc, #180]	; (15eb4 <FinishAesDrv+0x238>)
   15e00:	e75e      	b.n	15cc0 <FinishAesDrv+0x44>
   15e02:	4f2d      	ldr	r7, [pc, #180]	; (15eb8 <FinishAesDrv+0x23c>)
   15e04:	e7dc      	b.n	15dc0 <FinishAesDrv+0x144>
   15e06:	482d      	ldr	r0, [pc, #180]	; (15ebc <FinishAesDrv+0x240>)
   15e08:	f7fd fd5e 	bl	138c8 <CC_PalAbort>
   15e0c:	e7e3      	b.n	15dd6 <FinishAesDrv+0x15a>
   15e0e:	482c      	ldr	r0, [pc, #176]	; (15ec0 <FinishAesDrv+0x244>)
   15e10:	f7fd fd5a 	bl	138c8 <CC_PalAbort>
   15e14:	e776      	b.n	15d04 <FinishAesDrv+0x88>
   15e16:	482b      	ldr	r0, [pc, #172]	; (15ec4 <FinishAesDrv+0x248>)
   15e18:	f7fd fd56 	bl	138c8 <CC_PalAbort>
   15e1c:	e76c      	b.n	15cf8 <FinishAesDrv+0x7c>
   15e1e:	4f2a      	ldr	r7, [pc, #168]	; (15ec8 <FinishAesDrv+0x24c>)
   15e20:	e7ce      	b.n	15dc0 <FinishAesDrv+0x144>
   15e22:	4f2a      	ldr	r7, [pc, #168]	; (15ecc <FinishAesDrv+0x250>)
   15e24:	e7cc      	b.n	15dc0 <FinishAesDrv+0x144>
   15e26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   15e28:	2a01      	cmp	r2, #1
   15e2a:	d033      	beq.n	15e94 <FinishAesDrv+0x218>
   15e2c:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   15e30:	2010      	movs	r0, #16
   15e32:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   15e36:	f7fe fbbd 	bl	145b4 <CC_HalWaitInterrupt>
   15e3a:	4607      	mov	r7, r0
   15e3c:	2800      	cmp	r0, #0
   15e3e:	d09f      	beq.n	15d80 <FinishAesDrv+0x104>
   15e40:	e7be      	b.n	15dc0 <FinishAesDrv+0x144>
   15e42:	4b19      	ldr	r3, [pc, #100]	; (15ea8 <FinishAesDrv+0x22c>)
   15e44:	6822      	ldr	r2, [r4, #0]
   15e46:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   15e4a:	6862      	ldr	r2, [r4, #4]
   15e4c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   15e50:	68a2      	ldr	r2, [r4, #8]
   15e52:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   15e56:	68e2      	ldr	r2, [r4, #12]
   15e58:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   15e5c:	e783      	b.n	15d66 <FinishAesDrv+0xea>
   15e5e:	4b12      	ldr	r3, [pc, #72]	; (15ea8 <FinishAesDrv+0x22c>)
   15e60:	6822      	ldr	r2, [r4, #0]
   15e62:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   15e66:	6862      	ldr	r2, [r4, #4]
   15e68:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   15e6c:	68a2      	ldr	r2, [r4, #8]
   15e6e:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   15e72:	68e2      	ldr	r2, [r4, #12]
   15e74:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   15e78:	e775      	b.n	15d66 <FinishAesDrv+0xea>
   15e7a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   15e7e:	6022      	str	r2, [r4, #0]
   15e80:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   15e84:	6062      	str	r2, [r4, #4]
   15e86:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   15e8a:	60a2      	str	r2, [r4, #8]
   15e8c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   15e90:	60e3      	str	r3, [r4, #12]
   15e92:	e795      	b.n	15dc0 <FinishAesDrv+0x144>
   15e94:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   15e98:	2040      	movs	r0, #64	; 0x40
   15e9a:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   15e9e:	e7ca      	b.n	15e36 <FinishAesDrv+0x1ba>
   15ea0:	00f1000b 	.word	0x00f1000b
   15ea4:	20000514 	.word	0x20000514
   15ea8:	5002b000 	.word	0x5002b000
   15eac:	00f10001 	.word	0x00f10001
   15eb0:	00018f3c 	.word	0x00018f3c
   15eb4:	00f10005 	.word	0x00f10005
   15eb8:	00f10002 	.word	0x00f10002
   15ebc:	00018f1c 	.word	0x00018f1c
   15ec0:	00018efc 	.word	0x00018efc
   15ec4:	00018ee4 	.word	0x00018ee4
   15ec8:	00f10003 	.word	0x00f10003
   15ecc:	00f10004 	.word	0x00f10004

00015ed0 <kmu_validate_slot_and_size>:
   15ed0:	b929      	cbnz	r1, 15ede <kmu_validate_slot_and_size+0xe>
   15ed2:	4b04      	ldr	r3, [pc, #16]	; (15ee4 <kmu_validate_slot_and_size+0x14>)
   15ed4:	2800      	cmp	r0, #0
   15ed6:	bf14      	ite	ne
   15ed8:	4618      	movne	r0, r3
   15eda:	2000      	moveq	r0, #0
   15edc:	4770      	bx	lr
   15ede:	4802      	ldr	r0, [pc, #8]	; (15ee8 <kmu_validate_slot_and_size+0x18>)
   15ee0:	4770      	bx	lr
   15ee2:	bf00      	nop
   15ee4:	00f70001 	.word	0x00f70001
   15ee8:	00f70003 	.word	0x00f70003

00015eec <kmu_validate_kdr_slot_and_size>:
   15eec:	b929      	cbnz	r1, 15efa <kmu_validate_kdr_slot_and_size+0xe>
   15eee:	4b04      	ldr	r3, [pc, #16]	; (15f00 <kmu_validate_kdr_slot_and_size+0x14>)
   15ef0:	2800      	cmp	r0, #0
   15ef2:	bf14      	ite	ne
   15ef4:	4618      	movne	r0, r3
   15ef6:	2000      	moveq	r0, #0
   15ef8:	4770      	bx	lr
   15efa:	4802      	ldr	r0, [pc, #8]	; (15f04 <kmu_validate_kdr_slot_and_size+0x18>)
   15efc:	4770      	bx	lr
   15efe:	bf00      	nop
   15f00:	00f70001 	.word	0x00f70001
   15f04:	00f70003 	.word	0x00f70003

00015f08 <kmu_use_kdr_key>:
   15f08:	4b03      	ldr	r3, [pc, #12]	; (15f18 <kmu_use_kdr_key+0x10>)
   15f0a:	2000      	movs	r0, #0
   15f0c:	2201      	movs	r2, #1
   15f0e:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   15f12:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   15f16:	4770      	bx	lr
   15f18:	5002b000 	.word	0x5002b000

00015f1c <kmu_derive_cmac>:
   15f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15f20:	b0cc      	sub	sp, #304	; 0x130
   15f22:	2400      	movs	r4, #0
   15f24:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   15f26:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   15f2a:	4682      	mov	sl, r0
   15f2c:	4689      	mov	r9, r1
   15f2e:	4616      	mov	r6, r2
   15f30:	4621      	mov	r1, r4
   15f32:	2274      	movs	r2, #116	; 0x74
   15f34:	a80e      	add	r0, sp, #56	; 0x38
   15f36:	461f      	mov	r7, r3
   15f38:	f000 fff0 	bl	16f1c <memset>
   15f3c:	2280      	movs	r2, #128	; 0x80
   15f3e:	4621      	mov	r1, r4
   15f40:	a82c      	add	r0, sp, #176	; 0xb0
   15f42:	942b      	str	r4, [sp, #172]	; 0xac
   15f44:	f000 ffea 	bl	16f1c <memset>
   15f48:	2384      	movs	r3, #132	; 0x84
   15f4a:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   15f4e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   15f52:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   15f56:	9305      	str	r3, [sp, #20]
   15f58:	d863      	bhi.n	16022 <kmu_derive_cmac+0x106>
   15f5a:	f7ff fcc3 	bl	158e4 <write_invalid_key>
   15f5e:	ab05      	add	r3, sp, #20
   15f60:	4630      	mov	r0, r6
   15f62:	ae2b      	add	r6, sp, #172	; 0xac
   15f64:	9301      	str	r3, [sp, #4]
   15f66:	9502      	str	r5, [sp, #8]
   15f68:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   15f6c:	4639      	mov	r1, r7
   15f6e:	9600      	str	r6, [sp, #0]
   15f70:	f000 f862 	bl	16038 <UtilCmacBuildDataForDerivation>
   15f74:	2800      	cmp	r0, #0
   15f76:	d14f      	bne.n	16018 <kmu_derive_cmac+0xfc>
   15f78:	2303      	movs	r3, #3
   15f7a:	f88d 3013 	strb.w	r3, [sp, #19]
   15f7e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15f82:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   15f86:	2307      	movs	r3, #7
   15f88:	2200      	movs	r2, #0
   15f8a:	901c      	str	r0, [sp, #112]	; 0x70
   15f8c:	2110      	movs	r1, #16
   15f8e:	a80e      	add	r0, sp, #56	; 0x38
   15f90:	931b      	str	r3, [sp, #108]	; 0x6c
   15f92:	2401      	movs	r4, #1
   15f94:	2301      	movs	r3, #1
   15f96:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   15f9a:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   15f9e:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   15fa2:	9426      	str	r4, [sp, #152]	; 0x98
   15fa4:	f10d 0920 	add.w	r9, sp, #32
   15fa8:	f7fe fb82 	bl	146b0 <CC_PalMemSetZeroPlat>
   15fac:	2210      	movs	r2, #16
   15fae:	9200      	str	r2, [sp, #0]
   15fb0:	9905      	ldr	r1, [sp, #20]
   15fb2:	f8cd 9004 	str.w	r9, [sp, #4]
   15fb6:	ab0a      	add	r3, sp, #40	; 0x28
   15fb8:	4630      	mov	r0, r6
   15fba:	aa06      	add	r2, sp, #24
   15fbc:	f7ff fa22 	bl	15404 <SetDataBuffersInfo>
   15fc0:	4607      	mov	r7, r0
   15fc2:	b170      	cbz	r0, 15fe2 <kmu_derive_cmac+0xc6>
   15fc4:	e01d      	b.n	16002 <kmu_derive_cmac+0xe6>
   15fc6:	a90e      	add	r1, sp, #56	; 0x38
   15fc8:	eb08 0007 	add.w	r0, r8, r7
   15fcc:	f7fe fb6c 	bl	146a8 <CC_PalMemCopyPlat>
   15fd0:	2110      	movs	r1, #16
   15fd2:	a80e      	add	r0, sp, #56	; 0x38
   15fd4:	f7fe fb6c 	bl	146b0 <CC_PalMemSetZeroPlat>
   15fd8:	3401      	adds	r4, #1
   15fda:	1bad      	subs	r5, r5, r6
   15fdc:	4437      	add	r7, r6
   15fde:	b2e4      	uxtb	r4, r4
   15fe0:	d024      	beq.n	1602c <kmu_derive_cmac+0x110>
   15fe2:	2d10      	cmp	r5, #16
   15fe4:	464a      	mov	r2, r9
   15fe6:	9b05      	ldr	r3, [sp, #20]
   15fe8:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   15fec:	a906      	add	r1, sp, #24
   15fee:	a80e      	add	r0, sp, #56	; 0x38
   15ff0:	462e      	mov	r6, r5
   15ff2:	bf28      	it	cs
   15ff4:	2610      	movcs	r6, #16
   15ff6:	f7ff fe41 	bl	15c7c <FinishAesDrv>
   15ffa:	4632      	mov	r2, r6
   15ffc:	2800      	cmp	r0, #0
   15ffe:	d0e2      	beq.n	15fc6 <kmu_derive_cmac+0xaa>
   16000:	4607      	mov	r7, r0
   16002:	a80e      	add	r0, sp, #56	; 0x38
   16004:	2274      	movs	r2, #116	; 0x74
   16006:	2100      	movs	r1, #0
   16008:	f7fe fb50 	bl	146ac <CC_PalMemSetPlat>
   1600c:	f7ff fc6a 	bl	158e4 <write_invalid_key>
   16010:	4638      	mov	r0, r7
   16012:	b04c      	add	sp, #304	; 0x130
   16014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16018:	4f05      	ldr	r7, [pc, #20]	; (16030 <kmu_derive_cmac+0x114>)
   1601a:	4638      	mov	r0, r7
   1601c:	b04c      	add	sp, #304	; 0x130
   1601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16022:	4f04      	ldr	r7, [pc, #16]	; (16034 <kmu_derive_cmac+0x118>)
   16024:	4638      	mov	r0, r7
   16026:	b04c      	add	sp, #304	; 0x130
   16028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1602c:	462f      	mov	r7, r5
   1602e:	e7e8      	b.n	16002 <kmu_derive_cmac+0xe6>
   16030:	00f1000e 	.word	0x00f1000e
   16034:	00f1000f 	.word	0x00f1000f

00016038 <UtilCmacBuildDataForDerivation>:
   16038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1603c:	b082      	sub	sp, #8
   1603e:	461e      	mov	r6, r3
   16040:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16042:	2300      	movs	r3, #0
   16044:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   16048:	9301      	str	r3, [sp, #4]
   1604a:	d83e      	bhi.n	160ca <UtilCmacBuildDataForDerivation+0x92>
   1604c:	00ed      	lsls	r5, r5, #3
   1604e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   16052:	4617      	mov	r7, r2
   16054:	f101 32ff 	add.w	r2, r1, #4294967295
   16058:	bf34      	ite	cc
   1605a:	2303      	movcc	r3, #3
   1605c:	2304      	movcs	r3, #4
   1605e:	2a3f      	cmp	r2, #63	; 0x3f
   16060:	460c      	mov	r4, r1
   16062:	9300      	str	r3, [sp, #0]
   16064:	d831      	bhi.n	160ca <UtilCmacBuildDataForDerivation+0x92>
   16066:	b380      	cbz	r0, 160ca <UtilCmacBuildDataForDerivation+0x92>
   16068:	bb66      	cbnz	r6, 160c4 <UtilCmacBuildDataForDerivation+0x8c>
   1606a:	9a08      	ldr	r2, [sp, #32]
   1606c:	b36a      	cbz	r2, 160ca <UtilCmacBuildDataForDerivation+0x92>
   1606e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16070:	6811      	ldr	r1, [r2, #0]
   16072:	b351      	cbz	r1, 160ca <UtilCmacBuildDataForDerivation+0x92>
   16074:	19a2      	adds	r2, r4, r6
   16076:	4413      	add	r3, r2
   16078:	4299      	cmp	r1, r3
   1607a:	d326      	bcc.n	160ca <UtilCmacBuildDataForDerivation+0x92>
   1607c:	9b08      	ldr	r3, [sp, #32]
   1607e:	4601      	mov	r1, r0
   16080:	4622      	mov	r2, r4
   16082:	1c58      	adds	r0, r3, #1
   16084:	f7fe fb10 	bl	146a8 <CC_PalMemCopyPlat>
   16088:	9b08      	ldr	r3, [sp, #32]
   1608a:	f104 0802 	add.w	r8, r4, #2
   1608e:	441c      	add	r4, r3
   16090:	2300      	movs	r3, #0
   16092:	7063      	strb	r3, [r4, #1]
   16094:	bb26      	cbnz	r6, 160e0 <UtilCmacBuildDataForDerivation+0xa8>
   16096:	9b08      	ldr	r3, [sp, #32]
   16098:	9500      	str	r5, [sp, #0]
   1609a:	2dff      	cmp	r5, #255	; 0xff
   1609c:	eb03 0008 	add.w	r0, r3, r8
   160a0:	d917      	bls.n	160d2 <UtilCmacBuildDataForDerivation+0x9a>
   160a2:	022b      	lsls	r3, r5, #8
   160a4:	b29b      	uxth	r3, r3
   160a6:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   160aa:	2202      	movs	r2, #2
   160ac:	a901      	add	r1, sp, #4
   160ae:	9301      	str	r3, [sp, #4]
   160b0:	f7fe fafa 	bl	146a8 <CC_PalMemCopyPlat>
   160b4:	f108 0302 	add.w	r3, r8, #2
   160b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   160ba:	2000      	movs	r0, #0
   160bc:	6013      	str	r3, [r2, #0]
   160be:	b002      	add	sp, #8
   160c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160c4:	b10f      	cbz	r7, 160ca <UtilCmacBuildDataForDerivation+0x92>
   160c6:	2e40      	cmp	r6, #64	; 0x40
   160c8:	d9cf      	bls.n	1606a <UtilCmacBuildDataForDerivation+0x32>
   160ca:	480a      	ldr	r0, [pc, #40]	; (160f4 <UtilCmacBuildDataForDerivation+0xbc>)
   160cc:	b002      	add	sp, #8
   160ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160d2:	2201      	movs	r2, #1
   160d4:	4669      	mov	r1, sp
   160d6:	f7fe fae7 	bl	146a8 <CC_PalMemCopyPlat>
   160da:	f108 0301 	add.w	r3, r8, #1
   160de:	e7eb      	b.n	160b8 <UtilCmacBuildDataForDerivation+0x80>
   160e0:	9b08      	ldr	r3, [sp, #32]
   160e2:	4632      	mov	r2, r6
   160e4:	eb03 0008 	add.w	r0, r3, r8
   160e8:	4639      	mov	r1, r7
   160ea:	f7fe fadd 	bl	146a8 <CC_PalMemCopyPlat>
   160ee:	44b0      	add	r8, r6
   160f0:	e7d1      	b.n	16096 <UtilCmacBuildDataForDerivation+0x5e>
   160f2:	bf00      	nop
   160f4:	80000006 	.word	0x80000006

000160f8 <CC_PalDataBufferAttrGet>:
   160f8:	2000      	movs	r0, #0
   160fa:	7018      	strb	r0, [r3, #0]
   160fc:	4770      	bx	lr
   160fe:	bf00      	nop

00016100 <button_changed>:
}
   16100:	4770      	bx	lr

00016102 <cbpprintf_external>:
{
   16102:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16106:	4606      	mov	r6, r0
   16108:	460d      	mov	r5, r1
   1610a:	4617      	mov	r7, r2
	if (buf == NULL) {
   1610c:	4698      	mov	r8, r3
   1610e:	b32b      	cbz	r3, 1615c <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   16110:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   16114:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   16118:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1611a:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1611c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   16120:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   16124:	441c      	add	r4, r3
   16126:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   16128:	f04f 0a00 	mov.w	sl, #0
   1612c:	45ca      	cmp	sl, r9
   1612e:	d309      	bcc.n	16144 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   16130:	f8d8 2004 	ldr.w	r2, [r8, #4]
   16134:	f108 0308 	add.w	r3, r8, #8
   16138:	4639      	mov	r1, r7
   1613a:	4630      	mov	r0, r6
   1613c:	46ac      	mov	ip, r5
}
   1613e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   16142:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   16144:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   16148:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1614c:	4620      	mov	r0, r4
   1614e:	f000 fea3 	bl	16e98 <strlen>
   16152:	3001      	adds	r0, #1
   16154:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   16156:	f10a 0a01 	add.w	sl, sl, #1
   1615a:	e7e7      	b.n	1612c <cbpprintf_external+0x2a>
}
   1615c:	f06f 0015 	mvn.w	r0, #21
   16160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016164 <is_ptr>:
{
   16164:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   16166:	2500      	movs	r5, #0
{
   16168:	4602      	mov	r2, r0
	bool mod = false;
   1616a:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   1616c:	4614      	mov	r4, r2
   1616e:	f814 3b01 	ldrb.w	r3, [r4], #1
   16172:	b90b      	cbnz	r3, 16178 <is_ptr+0x14>
					return false;
   16174:	4618      	mov	r0, r3
   16176:	e009      	b.n	1618c <is_ptr+0x28>
		if (mod) {
   16178:	b198      	cbz	r0, 161a2 <is_ptr+0x3e>
			if (cnt == n) {
   1617a:	428d      	cmp	r5, r1
   1617c:	d107      	bne.n	1618e <is_ptr+0x2a>
				if (c == 'p') {
   1617e:	2b70      	cmp	r3, #112	; 0x70
   16180:	d004      	beq.n	1618c <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   16182:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   16186:	2a3a      	cmp	r2, #58	; 0x3a
   16188:	d80b      	bhi.n	161a2 <is_ptr+0x3e>
					return false;
   1618a:	2000      	movs	r0, #0
}
   1618c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   1618e:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   16192:	2e3a      	cmp	r6, #58	; 0x3a
   16194:	d805      	bhi.n	161a2 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   16196:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   16198:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   1619a:	1c94      	adds	r4, r2, #2
   1619c:	2b00      	cmp	r3, #0
   1619e:	d0e9      	beq.n	16174 <is_ptr+0x10>
   161a0:	2000      	movs	r0, #0
		if (c == '%') {
   161a2:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   161a4:	bf08      	it	eq
   161a6:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   161aa:	4622      	mov	r2, r4
   161ac:	e7de      	b.n	1616c <is_ptr+0x8>

000161ae <arch_printk_char_out>:
}
   161ae:	2000      	movs	r0, #0
   161b0:	4770      	bx	lr

000161b2 <str_out>:
{
   161b2:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   161b4:	688a      	ldr	r2, [r1, #8]
   161b6:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   161b8:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   161ba:	b114      	cbz	r4, 161c2 <str_out+0x10>
   161bc:	684b      	ldr	r3, [r1, #4]
   161be:	4293      	cmp	r3, r2
   161c0:	dc01      	bgt.n	161c6 <str_out+0x14>
		ctx->count++;
   161c2:	608d      	str	r5, [r1, #8]
}
   161c4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   161c6:	3b01      	subs	r3, #1
   161c8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   161ca:	bf08      	it	eq
   161cc:	2200      	moveq	r2, #0
   161ce:	608d      	str	r5, [r1, #8]
   161d0:	bf0c      	ite	eq
   161d2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   161d4:	54a0      	strbne	r0, [r4, r2]
   161d6:	e7f5      	b.n	161c4 <str_out+0x12>

000161d8 <vprintk>:
		z_log_vprintk(fmt, ap);
   161d8:	f000 bdb1 	b.w	16d3e <z_log_vprintk>

000161dc <printk>:
{
   161dc:	b40f      	push	{r0, r1, r2, r3}
   161de:	b507      	push	{r0, r1, r2, lr}
   161e0:	a904      	add	r1, sp, #16
   161e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   161e6:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   161e8:	f000 fda9 	bl	16d3e <z_log_vprintk>
}
   161ec:	b003      	add	sp, #12
   161ee:	f85d eb04 	ldr.w	lr, [sp], #4
   161f2:	b004      	add	sp, #16
   161f4:	4770      	bx	lr

000161f6 <snprintk>:
{
   161f6:	b40c      	push	{r2, r3}
   161f8:	b507      	push	{r0, r1, r2, lr}
   161fa:	ab04      	add	r3, sp, #16
   161fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   16200:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   16202:	f7f4 fd43 	bl	ac8c <vsnprintk>
}
   16206:	b003      	add	sp, #12
   16208:	f85d eb04 	ldr.w	lr, [sp], #4
   1620c:	b002      	add	sp, #8
   1620e:	4770      	bx	lr

00016210 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   16210:	4604      	mov	r4, r0
   16212:	b508      	push	{r3, lr}
   16214:	4608      	mov	r0, r1
   16216:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   16218:	461a      	mov	r2, r3
   1621a:	47a0      	blx	r4
	return z_impl_z_current_get();
   1621c:	f7fc ffe8 	bl	131f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   16220:	f7f6 ff98 	bl	d154 <z_impl_k_thread_abort>

00016224 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   16224:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   16228:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1622a:	0840      	lsrs	r0, r0, #1
   1622c:	4770      	bx	lr

0001622e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1622e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16230:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   16232:	f7ff fff7 	bl	16224 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   16236:	fab0 f080 	clz	r0, r0
   1623a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1623e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   16242:	00ca      	lsls	r2, r1, #3
   16244:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   16248:	1d17      	adds	r7, r2, #4
{
   1624a:	460c      	mov	r4, r1
   1624c:	3206      	adds	r2, #6
   1624e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   16250:	b956      	cbnz	r6, 16268 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   16252:	2101      	movs	r1, #1
   16254:	fa01 f000 	lsl.w	r0, r1, r0
   16258:	68d9      	ldr	r1, [r3, #12]
   1625a:	4301      	orrs	r1, r0
   1625c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1625e:	f8cc 4010 	str.w	r4, [ip, #16]
   16262:	53dd      	strh	r5, [r3, r7]
   16264:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   16266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   16268:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1626a:	3104      	adds	r1, #4
   1626c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1626e:	53d8      	strh	r0, [r3, r7]
   16270:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16274:	529e      	strh	r6, [r3, r2]
   16276:	80c5      	strh	r5, [r0, #6]
   16278:	525d      	strh	r5, [r3, r1]
   1627a:	e7f4      	b.n	16266 <free_list_add+0x38>

0001627c <free_list_remove_bidx>:
{
   1627c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1627e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   16282:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   16284:	4299      	cmp	r1, r3
   16286:	f102 0104 	add.w	r1, r2, #4
   1628a:	d10a      	bne.n	162a2 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1628c:	2301      	movs	r3, #1
   1628e:	fa03 f202 	lsl.w	r2, r3, r2
   16292:	68c3      	ldr	r3, [r0, #12]
   16294:	ea23 0302 	bic.w	r3, r3, r2
   16298:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1629a:	2300      	movs	r3, #0
   1629c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   162a0:	bd10      	pop	{r4, pc}
   162a2:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   162a4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   162a8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   162ac:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   162b0:	80cb      	strh	r3, [r1, #6]
   162b2:	8082      	strh	r2, [r0, #4]
}
   162b4:	e7f4      	b.n	162a0 <free_list_remove_bidx+0x24>

000162b6 <free_list_remove>:
{
   162b6:	b508      	push	{r3, lr}
   162b8:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   162ba:	f7ff ffb3 	bl	16224 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   162be:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   162c2:	f1c2 021f 	rsb	r2, r2, #31
   162c6:	4618      	mov	r0, r3
}
   162c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   162cc:	f7ff bfd6 	b.w	1627c <free_list_remove_bidx>

000162d0 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   162d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   162d4:	fab1 f581 	clz	r5, r1
   162d8:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   162dc:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   162e0:	4603      	mov	r3, r0
	if (b->next) {
   162e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   162e6:	460e      	mov	r6, r1
	if (b->next) {
   162e8:	b1c2      	cbz	r2, 1631c <alloc_chunk+0x4c>
   162ea:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   162ec:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   162f0:	4618      	mov	r0, r3
   162f2:	4621      	mov	r1, r4
   162f4:	f7ff ff96 	bl	16224 <chunk_size>
   162f8:	42b0      	cmp	r0, r6
   162fa:	d306      	bcc.n	1630a <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   162fc:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   162fe:	4618      	mov	r0, r3
   16300:	f7ff ffbc 	bl	1627c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   16304:	4620      	mov	r0, r4
   16306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1630a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1630e:	3f01      	subs	r7, #1
   16310:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   16312:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   16316:	d001      	beq.n	1631c <alloc_chunk+0x4c>
   16318:	4282      	cmp	r2, r0
   1631a:	d1e7      	bne.n	162ec <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1631c:	f1c5 0220 	rsb	r2, r5, #32
   16320:	f04f 34ff 	mov.w	r4, #4294967295
   16324:	4094      	lsls	r4, r2
   16326:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   16328:	4014      	ands	r4, r2
   1632a:	d0eb      	beq.n	16304 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1632c:	fa94 f2a4 	rbit	r2, r4
   16330:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   16334:	1d11      	adds	r1, r2, #4
   16336:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1633a:	4621      	mov	r1, r4
   1633c:	e7df      	b.n	162fe <alloc_chunk+0x2e>

0001633e <merge_chunks>:
{
   1633e:	b538      	push	{r3, r4, r5, lr}
   16340:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16342:	f7ff ff6f 	bl	16224 <chunk_size>
{
   16346:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   16348:	4604      	mov	r4, r0
   1634a:	4611      	mov	r1, r2
   1634c:	4618      	mov	r0, r3
   1634e:	f7ff ff69 	bl	16224 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   16352:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   16356:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16358:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1635a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1635c:	4618      	mov	r0, r3
   1635e:	f7ff ff61 	bl	16224 <chunk_size>
	void *cmem = &buf[c];
   16362:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16364:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   16368:	bd38      	pop	{r3, r4, r5, pc}

0001636a <split_chunks>:
{
   1636a:	b538      	push	{r3, r4, r5, lr}
   1636c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1636e:	f7ff ff59 	bl	16224 <chunk_size>
{
   16372:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   16374:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   16376:	1a51      	subs	r1, r2, r1
   16378:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1637c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1637e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   16380:	8060      	strh	r0, [r4, #2]
   16382:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   16386:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   16388:	8044      	strh	r4, [r0, #2]
   1638a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1638e:	4618      	mov	r0, r3
   16390:	4611      	mov	r1, r2
   16392:	f7ff ff47 	bl	16224 <chunk_size>
	void *cmem = &buf[c];
   16396:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   16398:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1639c:	bd38      	pop	{r3, r4, r5, pc}

0001639e <free_chunk>:
{
   1639e:	b538      	push	{r3, r4, r5, lr}
   163a0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   163a2:	f7ff ff3f 	bl	16224 <chunk_size>
   163a6:	460c      	mov	r4, r1
   163a8:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   163aa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   163ae:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   163b0:	07da      	lsls	r2, r3, #31
   163b2:	d40a      	bmi.n	163ca <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   163b4:	4628      	mov	r0, r5
   163b6:	f7ff ff7e 	bl	162b6 <free_list_remove>
	return c + chunk_size(h, c);
   163ba:	4621      	mov	r1, r4
   163bc:	4628      	mov	r0, r5
   163be:	f7ff ff31 	bl	16224 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   163c2:	1822      	adds	r2, r4, r0
   163c4:	4628      	mov	r0, r5
   163c6:	f7ff ffba 	bl	1633e <merge_chunks>
		return ((uint16_t *)cmem)[f];
   163ca:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   163ce:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   163d0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   163d4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   163d6:	07db      	lsls	r3, r3, #31
   163d8:	d40c      	bmi.n	163f4 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   163da:	4628      	mov	r0, r5
   163dc:	f7ff ff6b 	bl	162b6 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   163e0:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   163e4:	4622      	mov	r2, r4
   163e6:	1a61      	subs	r1, r4, r1
   163e8:	4628      	mov	r0, r5
   163ea:	f7ff ffa8 	bl	1633e <merge_chunks>
   163ee:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   163f2:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   163f4:	4621      	mov	r1, r4
   163f6:	4628      	mov	r0, r5
}
   163f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   163fc:	f7ff bf17 	b.w	1622e <free_list_add>

00016400 <sys_heap_free>:
	if (mem == NULL) {
   16400:	b161      	cbz	r1, 1641c <sys_heap_free+0x1c>
   16402:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   16404:	3904      	subs	r1, #4
   16406:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   16408:	f021 0307 	bic.w	r3, r1, #7
   1640c:	4403      	add	r3, r0
	free_chunk(h, c);
   1640e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   16410:	885a      	ldrh	r2, [r3, #2]
   16412:	f022 0201 	bic.w	r2, r2, #1
   16416:	805a      	strh	r2, [r3, #2]
   16418:	f7ff bfc1 	b.w	1639e <free_chunk>
}
   1641c:	4770      	bx	lr

0001641e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1641e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   16420:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   16422:	b909      	cbnz	r1, 16428 <sys_heap_alloc+0xa>
		return NULL;
   16424:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16426:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   16428:	68ab      	ldr	r3, [r5, #8]
   1642a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1642e:	d9f9      	bls.n	16424 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   16430:	310b      	adds	r1, #11
   16432:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   16434:	4621      	mov	r1, r4
   16436:	4628      	mov	r0, r5
   16438:	f7ff ff4a 	bl	162d0 <alloc_chunk>
	if (c == 0U) {
   1643c:	4606      	mov	r6, r0
   1643e:	2800      	cmp	r0, #0
   16440:	d0f0      	beq.n	16424 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   16442:	4601      	mov	r1, r0
   16444:	4628      	mov	r0, r5
   16446:	f7ff feed 	bl	16224 <chunk_size>
   1644a:	42a0      	cmp	r0, r4
   1644c:	d907      	bls.n	1645e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1644e:	1932      	adds	r2, r6, r4
   16450:	4628      	mov	r0, r5
   16452:	f7ff ff8a 	bl	1636a <split_chunks>
		free_list_add(h, c + chunk_sz);
   16456:	4611      	mov	r1, r2
   16458:	4628      	mov	r0, r5
   1645a:	f7ff fee8 	bl	1622e <free_list_add>
	void *cmem = &buf[c];
   1645e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   16462:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16464:	8853      	ldrh	r3, [r2, #2]
   16466:	f043 0301 	orr.w	r3, r3, #1
   1646a:	8053      	strh	r3, [r2, #2]
   1646c:	3004      	adds	r0, #4
	return mem;
   1646e:	e7da      	b.n	16426 <sys_heap_alloc+0x8>

00016470 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   16470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16474:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   16478:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1647c:	6806      	ldr	r6, [r0, #0]
{
   1647e:	460f      	mov	r7, r1
   16480:	4614      	mov	r4, r2
	if (align != rew) {
   16482:	d00c      	beq.n	1649e <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   16484:	424b      	negs	r3, r1
   16486:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   16488:	2b04      	cmp	r3, #4
   1648a:	461a      	mov	r2, r3
   1648c:	464f      	mov	r7, r9
   1648e:	bf28      	it	cs
   16490:	2204      	movcs	r2, #4
	rew = align & -align;
   16492:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   16494:	b964      	cbnz	r4, 164b0 <sys_heap_aligned_alloc+0x40>
		return NULL;
   16496:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   16498:	4628      	mov	r0, r5
   1649a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1649e:	2904      	cmp	r1, #4
   164a0:	d804      	bhi.n	164ac <sys_heap_aligned_alloc+0x3c>
}
   164a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   164a6:	4611      	mov	r1, r2
   164a8:	f7ff bfb9 	b.w	1641e <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   164ac:	2204      	movs	r2, #4
   164ae:	e7f1      	b.n	16494 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   164b0:	68b3      	ldr	r3, [r6, #8]
   164b2:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   164b6:	d9ee      	bls.n	16496 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   164b8:	f104 010b 	add.w	r1, r4, #11
   164bc:	4439      	add	r1, r7
   164be:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   164c0:	08c9      	lsrs	r1, r1, #3
   164c2:	4630      	mov	r0, r6
   164c4:	f7ff ff04 	bl	162d0 <alloc_chunk>
	if (c0 == 0) {
   164c8:	4680      	mov	r8, r0
   164ca:	2800      	cmp	r0, #0
   164cc:	d0e3      	beq.n	16496 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   164ce:	f109 0504 	add.w	r5, r9, #4
   164d2:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   164d6:	1e7b      	subs	r3, r7, #1
   164d8:	4435      	add	r5, r6
   164da:	441d      	add	r5, r3
   164dc:	427f      	negs	r7, r7
   164de:	403d      	ands	r5, r7
   164e0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   164e4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   164e6:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   164e8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   164ea:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   164ec:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   164f0:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   164f2:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   164f6:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   164fa:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   164fe:	d208      	bcs.n	16512 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   16500:	4601      	mov	r1, r0
   16502:	463a      	mov	r2, r7
   16504:	4630      	mov	r0, r6
   16506:	f7ff ff30 	bl	1636a <split_chunks>
		free_list_add(h, c0);
   1650a:	4641      	mov	r1, r8
   1650c:	4630      	mov	r0, r6
   1650e:	f7ff fe8e 	bl	1622e <free_list_add>
	return c + chunk_size(h, c);
   16512:	4639      	mov	r1, r7
   16514:	4630      	mov	r0, r6
   16516:	f7ff fe85 	bl	16224 <chunk_size>
   1651a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1651c:	4284      	cmp	r4, r0
   1651e:	d207      	bcs.n	16530 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   16520:	4630      	mov	r0, r6
   16522:	4622      	mov	r2, r4
   16524:	f7ff ff21 	bl	1636a <split_chunks>
		free_list_add(h, c_end);
   16528:	4621      	mov	r1, r4
   1652a:	4630      	mov	r0, r6
   1652c:	f7ff fe7f 	bl	1622e <free_list_add>
	void *cmem = &buf[c];
   16530:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16534:	8873      	ldrh	r3, [r6, #2]
   16536:	f043 0301 	orr.w	r3, r3, #1
   1653a:	8073      	strh	r3, [r6, #2]
   1653c:	e7ac      	b.n	16498 <sys_heap_aligned_alloc+0x28>

0001653e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1653e:	3a04      	subs	r2, #4
{
   16540:	b4f0      	push	{r4, r5, r6, r7}
   16542:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16544:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   16546:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   16548:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1654c:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   16550:	1a0e      	subs	r6, r1, r0
   16552:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   16554:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   16556:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1655a:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1655c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   16560:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   16562:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   16564:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   16566:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1656a:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1656c:	f1c2 0220 	rsb	r2, r2, #32
   16570:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   16572:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   16576:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1657a:	4294      	cmp	r4, r2
   1657c:	d1fb      	bne.n	16576 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1657e:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   16580:	f042 0201 	orr.w	r2, r2, #1
   16584:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   16586:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1658a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1658c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1658e:	8007      	strh	r7, [r0, #0]
   16590:	8065      	strh	r5, [r4, #2]
   16592:	1984      	adds	r4, r0, r6
   16594:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   16598:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1659c:	8067      	strh	r7, [r4, #2]
   1659e:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   165a0:	885a      	ldrh	r2, [r3, #2]
   165a2:	f042 0201 	orr.w	r2, r2, #1
   165a6:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   165a8:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   165aa:	f7ff be40 	b.w	1622e <free_list_add>

000165ae <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   165ae:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   165b0:	f013 0307 	ands.w	r3, r3, #7
   165b4:	d105      	bne.n	165c2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   165b6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   165b8:	2b00      	cmp	r3, #0
   165ba:	bf0c      	ite	eq
   165bc:	2000      	moveq	r0, #0
   165be:	2003      	movne	r0, #3
   165c0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   165c2:	2b02      	cmp	r3, #2
   165c4:	d105      	bne.n	165d2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   165c6:	8b40      	ldrh	r0, [r0, #26]
   165c8:	fab0 f080 	clz	r0, r0
   165cc:	0940      	lsrs	r0, r0, #5
   165ce:	0080      	lsls	r0, r0, #2
   165d0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   165d2:	2b01      	cmp	r3, #1
   165d4:	d105      	bne.n	165e2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   165d6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   165d8:	2b00      	cmp	r3, #0
   165da:	bf0c      	ite	eq
   165dc:	2000      	moveq	r0, #0
   165de:	2005      	movne	r0, #5
   165e0:	4770      	bx	lr
	int evt = EVT_NOP;
   165e2:	2000      	movs	r0, #0
}
   165e4:	4770      	bx	lr

000165e6 <validate_args>:
{
   165e6:	b510      	push	{r4, lr}
   165e8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   165ea:	b100      	cbz	r0, 165ee <validate_args+0x8>
   165ec:	b911      	cbnz	r1, 165f4 <validate_args+0xe>
		return -EINVAL;
   165ee:	f06f 0015 	mvn.w	r0, #21
}
   165f2:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   165f4:	1d08      	adds	r0, r1, #4
   165f6:	f000 f895 	bl	16724 <sys_notify_validate>
	if ((rv == 0)
   165fa:	2800      	cmp	r0, #0
   165fc:	d1f9      	bne.n	165f2 <validate_args+0xc>
	    && ((cli->notify.flags
   165fe:	68a3      	ldr	r3, [r4, #8]
   16600:	2b03      	cmp	r3, #3
   16602:	d9f6      	bls.n	165f2 <validate_args+0xc>
   16604:	e7f3      	b.n	165ee <validate_args+0x8>

00016606 <notify_one>:
{
   16606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1660a:	460d      	mov	r5, r1
   1660c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1660e:	4619      	mov	r1, r3
   16610:	1d28      	adds	r0, r5, #4
{
   16612:	4690      	mov	r8, r2
   16614:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16616:	f000 f899 	bl	1674c <sys_notify_finalize>
	if (cb) {
   1661a:	4604      	mov	r4, r0
   1661c:	b138      	cbz	r0, 1662e <notify_one+0x28>
		cb(mgr, cli, state, res);
   1661e:	4633      	mov	r3, r6
   16620:	4642      	mov	r2, r8
   16622:	4629      	mov	r1, r5
   16624:	4638      	mov	r0, r7
   16626:	46a4      	mov	ip, r4
}
   16628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1662c:	4760      	bx	ip
}
   1662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016632 <transition_complete>:
{
   16632:	b410      	push	{r4}
	__asm__ volatile(
   16634:	f04f 0440 	mov.w	r4, #64	; 0x40
   16638:	f3ef 8211 	mrs	r2, BASEPRI
   1663c:	f384 8812 	msr	BASEPRI_MAX, r4
   16640:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   16644:	6141      	str	r1, [r0, #20]
}
   16646:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   16648:	2101      	movs	r1, #1
   1664a:	f7f4 bb35 	b.w	acb8 <process_event>

0001664e <onoff_manager_init>:
{
   1664e:	b538      	push	{r3, r4, r5, lr}
   16650:	460c      	mov	r4, r1
	if ((mgr == NULL)
   16652:	4605      	mov	r5, r0
   16654:	b158      	cbz	r0, 1666e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   16656:	b151      	cbz	r1, 1666e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   16658:	680b      	ldr	r3, [r1, #0]
   1665a:	b143      	cbz	r3, 1666e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1665c:	684b      	ldr	r3, [r1, #4]
   1665e:	b133      	cbz	r3, 1666e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   16660:	221c      	movs	r2, #28
   16662:	2100      	movs	r1, #0
   16664:	f000 fc5a 	bl	16f1c <memset>
   16668:	612c      	str	r4, [r5, #16]
	return 0;
   1666a:	2000      	movs	r0, #0
}
   1666c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1666e:	f06f 0015 	mvn.w	r0, #21
   16672:	e7fb      	b.n	1666c <onoff_manager_init+0x1e>

00016674 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   16674:	b570      	push	{r4, r5, r6, lr}
   16676:	4605      	mov	r5, r0
   16678:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1667a:	f7ff ffb4 	bl	165e6 <validate_args>

	if (rv < 0) {
   1667e:	1e04      	subs	r4, r0, #0
   16680:	db15      	blt.n	166ae <onoff_request+0x3a>
   16682:	f04f 0340 	mov.w	r3, #64	; 0x40
   16686:	f3ef 8211 	mrs	r2, BASEPRI
   1668a:	f383 8812 	msr	BASEPRI_MAX, r3
   1668e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   16692:	8b6b      	ldrh	r3, [r5, #26]
   16694:	8b2c      	ldrh	r4, [r5, #24]
   16696:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1669a:	428b      	cmp	r3, r1
   1669c:	f004 0407 	and.w	r4, r4, #7
   166a0:	d107      	bne.n	166b2 <onoff_request+0x3e>
	__asm__ volatile(
   166a2:	f382 8811 	msr	BASEPRI, r2
   166a6:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   166aa:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   166ae:	4620      	mov	r0, r4
   166b0:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   166b2:	2c02      	cmp	r4, #2
   166b4:	d10c      	bne.n	166d0 <onoff_request+0x5c>
		mgr->refs += 1U;
   166b6:	3301      	adds	r3, #1
   166b8:	836b      	strh	r3, [r5, #26]
   166ba:	f382 8811 	msr	BASEPRI, r2
   166be:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   166c2:	2300      	movs	r3, #0
   166c4:	4622      	mov	r2, r4
   166c6:	4631      	mov	r1, r6
   166c8:	4628      	mov	r0, r5
   166ca:	f7ff ff9c 	bl	16606 <notify_one>
   166ce:	e7ee      	b.n	166ae <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   166d0:	2c06      	cmp	r4, #6
   166d2:	d814      	bhi.n	166fe <onoff_request+0x8a>
   166d4:	e8df f004 	tbb	[pc, r4]
   166d8:	13131304 	.word	0x13131304
   166dc:	1a04      	.short	0x1a04
   166de:	04          	.byte	0x04
   166df:	00          	.byte	0x00
	parent->next = child;
   166e0:	2300      	movs	r3, #0
   166e2:	6033      	str	r3, [r6, #0]
	return list->tail;
   166e4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   166e6:	b93b      	cbnz	r3, 166f8 <onoff_request+0x84>
	list->head = node;
   166e8:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   166ec:	b9ac      	cbnz	r4, 1671a <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   166ee:	2102      	movs	r1, #2
   166f0:	4628      	mov	r0, r5
   166f2:	f7f4 fae1 	bl	acb8 <process_event>
   166f6:	e7da      	b.n	166ae <onoff_request+0x3a>
	parent->next = child;
   166f8:	601e      	str	r6, [r3, #0]
	list->tail = node;
   166fa:	606e      	str	r6, [r5, #4]
}
   166fc:	e7f6      	b.n	166ec <onoff_request+0x78>
   166fe:	f382 8811 	msr	BASEPRI, r2
   16702:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   16706:	f06f 0404 	mvn.w	r4, #4
   1670a:	e7d0      	b.n	166ae <onoff_request+0x3a>
   1670c:	f382 8811 	msr	BASEPRI, r2
   16710:	f3bf 8f6f 	isb	sy
   16714:	f06f 0485 	mvn.w	r4, #133	; 0x85
   16718:	e7c9      	b.n	166ae <onoff_request+0x3a>
   1671a:	f382 8811 	msr	BASEPRI, r2
   1671e:	f3bf 8f6f 	isb	sy
		if (notify) {
   16722:	e7c4      	b.n	166ae <onoff_request+0x3a>

00016724 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16724:	4603      	mov	r3, r0
   16726:	b140      	cbz	r0, 1673a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16728:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1672a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1672e:	2a02      	cmp	r2, #2
   16730:	d006      	beq.n	16740 <sys_notify_validate+0x1c>
   16732:	2a03      	cmp	r2, #3
   16734:	d004      	beq.n	16740 <sys_notify_validate+0x1c>
   16736:	2a01      	cmp	r2, #1
   16738:	d005      	beq.n	16746 <sys_notify_validate+0x22>
   1673a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1673e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   16740:	681a      	ldr	r2, [r3, #0]
   16742:	2a00      	cmp	r2, #0
   16744:	d0f9      	beq.n	1673a <sys_notify_validate+0x16>
		notify->result = 0;
   16746:	2000      	movs	r0, #0
   16748:	6098      	str	r0, [r3, #8]
   1674a:	4770      	bx	lr

0001674c <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1674c:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1674e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   16750:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   16752:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   16756:	2a02      	cmp	r2, #2
{
   16758:	4603      	mov	r3, r0
	switch (method) {
   1675a:	f04f 0400 	mov.w	r4, #0
   1675e:	d007      	beq.n	16770 <sys_notify_finalize+0x24>
   16760:	2a03      	cmp	r2, #3
   16762:	d002      	beq.n	1676a <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16764:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   16766:	2000      	movs	r0, #0
   16768:	e001      	b.n	1676e <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1676a:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1676c:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1676e:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   16770:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16772:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   16774:	2800      	cmp	r0, #0
   16776:	d0f6      	beq.n	16766 <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   16778:	f7fd f80a 	bl	13790 <z_impl_k_poll_signal_raise>
   1677c:	e7f3      	b.n	16766 <sys_notify_finalize+0x1a>

0001677e <encode_uint>:
{
   1677e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16782:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   16784:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   16786:	2b6f      	cmp	r3, #111	; 0x6f
{
   16788:	4680      	mov	r8, r0
   1678a:	460f      	mov	r7, r1
   1678c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1678e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   16792:	d029      	beq.n	167e8 <encode_uint+0x6a>
   16794:	d824      	bhi.n	167e0 <encode_uint+0x62>
		return 10;
   16796:	2b58      	cmp	r3, #88	; 0x58
   16798:	bf0c      	ite	eq
   1679a:	2610      	moveq	r6, #16
   1679c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1679e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   167a2:	4632      	mov	r2, r6
   167a4:	2300      	movs	r3, #0
   167a6:	4640      	mov	r0, r8
   167a8:	4639      	mov	r1, r7
   167aa:	f7e9 fca9 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   167ae:	2a09      	cmp	r2, #9
   167b0:	b2d4      	uxtb	r4, r2
   167b2:	d81e      	bhi.n	167f2 <encode_uint+0x74>
   167b4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   167b6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   167b8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   167ba:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   167be:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   167c2:	d301      	bcc.n	167c8 <encode_uint+0x4a>
   167c4:	45d1      	cmp	r9, sl
   167c6:	d811      	bhi.n	167ec <encode_uint+0x6e>
	if (conv->flag_hash) {
   167c8:	782b      	ldrb	r3, [r5, #0]
   167ca:	069b      	lsls	r3, r3, #26
   167cc:	d505      	bpl.n	167da <encode_uint+0x5c>
		if (radix == 8) {
   167ce:	2e08      	cmp	r6, #8
   167d0:	d115      	bne.n	167fe <encode_uint+0x80>
			conv->altform_0 = true;
   167d2:	78ab      	ldrb	r3, [r5, #2]
   167d4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   167d8:	70ab      	strb	r3, [r5, #2]
}
   167da:	4648      	mov	r0, r9
   167dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   167e0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   167e4:	2b70      	cmp	r3, #112	; 0x70
   167e6:	e7d7      	b.n	16798 <encode_uint+0x1a>
	switch (specifier) {
   167e8:	2608      	movs	r6, #8
   167ea:	e7d8      	b.n	1679e <encode_uint+0x20>
		value /= radix;
   167ec:	4680      	mov	r8, r0
   167ee:	460f      	mov	r7, r1
   167f0:	e7d7      	b.n	167a2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   167f2:	f1bb 0f19 	cmp.w	fp, #25
   167f6:	bf94      	ite	ls
   167f8:	3437      	addls	r4, #55	; 0x37
   167fa:	3457      	addhi	r4, #87	; 0x57
   167fc:	e7db      	b.n	167b6 <encode_uint+0x38>
		} else if (radix == 16) {
   167fe:	2e10      	cmp	r6, #16
   16800:	d1eb      	bne.n	167da <encode_uint+0x5c>
			conv->altform_0c = true;
   16802:	78ab      	ldrb	r3, [r5, #2]
   16804:	f043 0310 	orr.w	r3, r3, #16
   16808:	e7e6      	b.n	167d8 <encode_uint+0x5a>

0001680a <outs>:
{
   1680a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1680e:	4607      	mov	r7, r0
   16810:	4688      	mov	r8, r1
   16812:	4615      	mov	r5, r2
   16814:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16816:	4614      	mov	r4, r2
   16818:	42b4      	cmp	r4, r6
   1681a:	d305      	bcc.n	16828 <outs+0x1e>
   1681c:	b10e      	cbz	r6, 16822 <outs+0x18>
	return (int)count;
   1681e:	1b60      	subs	r0, r4, r5
   16820:	e008      	b.n	16834 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   16822:	7823      	ldrb	r3, [r4, #0]
   16824:	2b00      	cmp	r3, #0
   16826:	d0fa      	beq.n	1681e <outs+0x14>
		int rc = out((int)*sp++, ctx);
   16828:	f814 0b01 	ldrb.w	r0, [r4], #1
   1682c:	4641      	mov	r1, r8
   1682e:	47b8      	blx	r7
		if (rc < 0) {
   16830:	2800      	cmp	r0, #0
   16832:	daf1      	bge.n	16818 <outs+0xe>
}
   16834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016838 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   16838:	b40f      	push	{r0, r1, r2, r3}
   1683a:	b507      	push	{r0, r1, r2, lr}
   1683c:	a904      	add	r1, sp, #16
   1683e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   16842:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   16844:	f7ff fcc8 	bl	161d8 <vprintk>

	va_end(ap);
}
   16848:	b003      	add	sp, #12
   1684a:	f85d eb04 	ldr.w	lr, [sp], #4
   1684e:	b004      	add	sp, #16
   16850:	4770      	bx	lr

00016852 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   16852:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   16854:	6903      	ldr	r3, [r0, #16]
{
   16856:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   16858:	f013 0008 	ands.w	r0, r3, #8
   1685c:	d109      	bne.n	16872 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   1685e:	6813      	ldr	r3, [r2, #0]
   16860:	68d4      	ldr	r4, [r2, #12]
   16862:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   16864:	bf97      	itett	ls
   16866:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   16868:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   1686a:	1ad3      	subls	r3, r2, r3

	return true;
   1686c:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   1686e:	600b      	str	r3, [r1, #0]
}
   16870:	bd10      	pop	{r4, pc}
   16872:	2300      	movs	r3, #0
		return false;
   16874:	4618      	mov	r0, r3
   16876:	e7fa      	b.n	1686e <free_space+0x1c>

00016878 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   16878:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   1687a:	a901      	add	r1, sp, #4
{
   1687c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   1687e:	f7ff ffe8 	bl	16852 <free_space>
   16882:	b120      	cbz	r0, 1688e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   16884:	9b01      	ldr	r3, [sp, #4]
   16886:	68e2      	ldr	r2, [r4, #12]
   16888:	3b01      	subs	r3, #1
   1688a:	4413      	add	r3, r2
   1688c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   1688e:	6a20      	ldr	r0, [r4, #32]
   16890:	9b01      	ldr	r3, [sp, #4]
   16892:	1ac0      	subs	r0, r0, r3
}
   16894:	3801      	subs	r0, #1
   16896:	b002      	add	sp, #8
   16898:	bd10      	pop	{r4, pc}

0001689a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   1689a:	b510      	push	{r4, lr}
   1689c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   1689e:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   168a0:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   168a2:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   168a4:	07d2      	lsls	r2, r2, #31
   168a6:	d502      	bpl.n	168ae <idx_inc+0x14>
		return i & (buffer->size - 1);
   168a8:	3b01      	subs	r3, #1
   168aa:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   168ac:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   168ae:	4298      	cmp	r0, r3
   168b0:	bf28      	it	cs
   168b2:	1ac0      	subcs	r0, r0, r3
   168b4:	e7fa      	b.n	168ac <idx_inc+0x12>

000168b6 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   168b6:	b510      	push	{r4, lr}
   168b8:	4604      	mov	r4, r0
   168ba:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   168bc:	68c1      	ldr	r1, [r0, #12]
   168be:	f7ff ffec 	bl	1689a <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   168c2:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   168c4:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   168c6:	f023 0308 	bic.w	r3, r3, #8
   168ca:	6123      	str	r3, [r4, #16]
}
   168cc:	bd10      	pop	{r4, pc}

000168ce <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   168ce:	b538      	push	{r3, r4, r5, lr}
   168d0:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   168d2:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   168d4:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   168d6:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   168d8:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   168dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   168e0:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   168e2:	6801      	ldr	r1, [r0, #0]
   168e4:	462a      	mov	r2, r5
   168e6:	f7ff ffd8 	bl	1689a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   168ea:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   168ec:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   168ee:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   168f0:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   168f2:	bf02      	ittt	eq
   168f4:	6923      	ldreq	r3, [r4, #16]
   168f6:	f043 0308 	orreq.w	r3, r3, #8
   168fa:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   168fc:	462a      	mov	r2, r5
   168fe:	4620      	mov	r0, r4
   16900:	f7ff ffcb 	bl	1689a <idx_inc>
   16904:	6060      	str	r0, [r4, #4]
}
   16906:	bd38      	pop	{r3, r4, r5, pc}

00016908 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   16908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   1690c:	68c7      	ldr	r7, [r0, #12]
   1690e:	69c6      	ldr	r6, [r0, #28]
{
   16910:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   16912:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   16916:	f003 0303 	and.w	r3, r3, #3
   1691a:	2b02      	cmp	r3, #2
{
   1691c:	4604      	mov	r4, r0
   1691e:	4688      	mov	r8, r1
   16920:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   16922:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   16926:	f04f 0300 	mov.w	r3, #0
   1692a:	d009      	beq.n	16940 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   1692c:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   1692e:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   16932:	6923      	ldr	r3, [r4, #16]
   16934:	0799      	lsls	r1, r3, #30
   16936:	d410      	bmi.n	1695a <drop_item_locked+0x52>
		return false;
   16938:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   1693a:	b003      	add	sp, #12
   1693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   16940:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   16944:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   16946:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   16948:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   1694c:	d0f1      	beq.n	16932 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   1694e:	f7ff ffb2 	bl	168b6 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   16952:	68e3      	ldr	r3, [r4, #12]
   16954:	60a3      	str	r3, [r4, #8]
		return true;
   16956:	2001      	movs	r0, #1
   16958:	e7ef      	b.n	1693a <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   1695a:	69a3      	ldr	r3, [r4, #24]
   1695c:	4650      	mov	r0, sl
   1695e:	4798      	blx	r3
	return item->hdr.valid;
   16960:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   16964:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   16966:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   16968:	d5e6      	bpl.n	16938 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   1696a:	f013 0302 	ands.w	r3, r3, #2
   1696e:	d01d      	beq.n	169ac <drop_item_locked+0xa4>
		if (free_wlen) {
   16970:	f1b8 0f00 	cmp.w	r8, #0
   16974:	d003      	beq.n	1697e <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   16976:	4641      	mov	r1, r8
   16978:	4620      	mov	r0, r4
   1697a:	f7ff ffa8 	bl	168ce <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1697e:	6861      	ldr	r1, [r4, #4]
   16980:	462a      	mov	r2, r5
   16982:	4620      	mov	r0, r4
   16984:	f7ff ff89 	bl	1689a <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16988:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   1698c:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   1698e:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16990:	d104      	bne.n	1699c <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   16992:	462a      	mov	r2, r5
   16994:	4620      	mov	r0, r4
   16996:	f7ff ff80 	bl	1689a <idx_inc>
   1699a:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   1699c:	68a3      	ldr	r3, [r4, #8]
   1699e:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   169a0:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   169a2:	6923      	ldr	r3, [r4, #16]
   169a4:	f043 0308 	orr.w	r3, r3, #8
   169a8:	6123      	str	r3, [r4, #16]
   169aa:	e7d4      	b.n	16956 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   169ac:	4601      	mov	r1, r0
   169ae:	4620      	mov	r0, r4
   169b0:	9301      	str	r3, [sp, #4]
   169b2:	f7ff ff80 	bl	168b6 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   169b6:	68e2      	ldr	r2, [r4, #12]
   169b8:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   169ba:	f1b8 0f00 	cmp.w	r8, #0
   169be:	d004      	beq.n	169ca <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   169c0:	6821      	ldr	r1, [r4, #0]
   169c2:	69e2      	ldr	r2, [r4, #28]
   169c4:	9b01      	ldr	r3, [sp, #4]
   169c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   169ca:	eb05 0208 	add.w	r2, r5, r8
   169ce:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   169d2:	6821      	ldr	r1, [r4, #0]
   169d4:	4620      	mov	r0, r4
   169d6:	f7ff ff60 	bl	1689a <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   169da:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   169dc:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   169de:	f043 0308 	orr.w	r3, r3, #8
   169e2:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   169e4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   169e8:	f36f 0300 	bfc	r3, #0, #1
   169ec:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   169f0:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   169f4:	e7af      	b.n	16956 <drop_item_locked+0x4e>

000169f6 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   169f6:	b570      	push	{r4, r5, r6, lr}
   169f8:	4604      	mov	r4, r0
   169fa:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   169fc:	f7ff ff4d 	bl	1689a <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   16a00:	6823      	ldr	r3, [r4, #0]
   16a02:	4283      	cmp	r3, r0
   16a04:	d105      	bne.n	16a12 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   16a06:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   16a08:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   16a0a:	f023 0308 	bic.w	r3, r3, #8
   16a0e:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   16a10:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16a12:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   16a14:	00ab      	lsls	r3, r5, #2
   16a16:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   16a1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   16a1e:	4620      	mov	r0, r4
   16a20:	6861      	ldr	r1, [r4, #4]
   16a22:	462a      	mov	r2, r5
   16a24:	f7ff ff39 	bl	1689a <idx_inc>
   16a28:	6060      	str	r0, [r4, #4]
   16a2a:	e7f1      	b.n	16a10 <post_drop_action+0x1a>

00016a2c <max_utilization_update>:
{
   16a2c:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   16a2e:	6903      	ldr	r3, [r0, #16]
   16a30:	075b      	lsls	r3, r3, #29
{
   16a32:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   16a34:	d506      	bpl.n	16a44 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   16a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
   16a38:	f7ff ff1e 	bl	16878 <get_usage>
   16a3c:	4285      	cmp	r5, r0
   16a3e:	bf2c      	ite	cs
   16a40:	6265      	strcs	r5, [r4, #36]	; 0x24
   16a42:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   16a44:	bd38      	pop	{r3, r4, r5, pc}

00016a46 <mpsc_pbuf_init>:
{
   16a46:	b538      	push	{r3, r4, r5, lr}
   16a48:	460d      	mov	r5, r1
   16a4a:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   16a4c:	221c      	movs	r2, #28
   16a4e:	2100      	movs	r1, #0
   16a50:	f000 fa64 	bl	16f1c <memset>
	buffer->get_wlen = cfg->get_wlen;
   16a54:	68eb      	ldr	r3, [r5, #12]
   16a56:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   16a58:	68ab      	ldr	r3, [r5, #8]
   16a5a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   16a5c:	682b      	ldr	r3, [r5, #0]
   16a5e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   16a60:	686b      	ldr	r3, [r5, #4]
   16a62:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   16a64:	2200      	movs	r2, #0
   16a66:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   16a68:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   16a6a:	b123      	cbz	r3, 16a76 <mpsc_pbuf_init+0x30>
   16a6c:	1e59      	subs	r1, r3, #1
   16a6e:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   16a70:	bf08      	it	eq
   16a72:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   16a76:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16a78:	2201      	movs	r2, #1
   16a7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16a7e:	2100      	movs	r1, #0
}
   16a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16a84:	f001 ba6a 	b.w	17f5c <z_impl_k_sem_init>

00016a88 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   16a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a8c:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   16a8e:	2500      	movs	r5, #0
{
   16a90:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   16a92:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   16a94:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   16a96:	428b      	cmp	r3, r1
{
   16a98:	4604      	mov	r4, r0
   16a9a:	460e      	mov	r6, r1
   16a9c:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   16a9e:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   16aa0:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   16aa2:	d33a      	bcc.n	16b1a <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   16aa4:	f04f 0340 	mov.w	r3, #64	; 0x40
   16aa8:	f3ef 8b11 	mrs	fp, BASEPRI
   16aac:	f383 8812 	msr	BASEPRI_MAX, r3
   16ab0:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   16ab4:	9a05      	ldr	r2, [sp, #20]
   16ab6:	46d8      	mov	r8, fp
   16ab8:	b12a      	cbz	r2, 16ac6 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   16aba:	4629      	mov	r1, r5
   16abc:	4620      	mov	r0, r4
   16abe:	f7ff ff9a 	bl	169f6 <post_drop_action>
			tmp_wr_idx_shift = 0;
   16ac2:	2300      	movs	r3, #0
   16ac4:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   16ac6:	a904      	add	r1, sp, #16
   16ac8:	4620      	mov	r0, r4
   16aca:	f7ff fec2 	bl	16852 <free_space>

		if (free_wlen >= wlen) {
   16ace:	9904      	ldr	r1, [sp, #16]
   16ad0:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   16ad2:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   16ad4:	d32a      	bcc.n	16b2c <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   16ad6:	6822      	ldr	r2, [r4, #0]
			item =
   16ad8:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   16ada:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   16ade:	f021 0103 	bic.w	r1, r1, #3
   16ae2:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   16ae6:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16aea:	6821      	ldr	r1, [r4, #0]
   16aec:	4632      	mov	r2, r6
   16aee:	4620      	mov	r0, r4
   16af0:	f7ff fed3 	bl	1689a <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16af4:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   16af6:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   16af8:	4298      	cmp	r0, r3
   16afa:	d012      	beq.n	16b22 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   16afc:	2700      	movs	r7, #0
	__asm__ volatile(
   16afe:	f388 8811 	msr	BASEPRI, r8
   16b02:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   16b06:	9903      	ldr	r1, [sp, #12]
   16b08:	b129      	cbz	r1, 16b16 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   16b0a:	6962      	ldr	r2, [r4, #20]
   16b0c:	b10a      	cbz	r2, 16b12 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   16b0e:	4620      	mov	r0, r4
   16b10:	4790      	blx	r2
			}
			dropped_item = NULL;
   16b12:	2300      	movs	r3, #0
   16b14:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   16b16:	2f00      	cmp	r7, #0
   16b18:	d1c4      	bne.n	16aa4 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   16b1a:	4648      	mov	r0, r9
   16b1c:	b007      	add	sp, #28
   16b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   16b22:	6923      	ldr	r3, [r4, #16]
   16b24:	f043 0308 	orr.w	r3, r3, #8
   16b28:	6123      	str	r3, [r4, #16]
   16b2a:	e7e7      	b.n	16afc <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   16b2c:	b118      	cbz	r0, 16b36 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   16b2e:	4620      	mov	r0, r4
   16b30:	f7ff fecd 	bl	168ce <add_skip_item>
			cont = true;
   16b34:	e7e3      	b.n	16afe <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16b36:	9b00      	ldr	r3, [sp, #0]
   16b38:	ea5a 0303 	orrs.w	r3, sl, r3
   16b3c:	d01a      	beq.n	16b74 <mpsc_pbuf_alloc+0xec>
   16b3e:	9101      	str	r1, [sp, #4]
   16b40:	f001 f956 	bl	17df0 <k_is_in_isr>
   16b44:	9901      	ldr	r1, [sp, #4]
   16b46:	b9a8      	cbnz	r0, 16b74 <mpsc_pbuf_alloc+0xec>
   16b48:	f38b 8811 	msr	BASEPRI, fp
   16b4c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   16b50:	9b00      	ldr	r3, [sp, #0]
   16b52:	4652      	mov	r2, sl
   16b54:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16b58:	f7fb feae 	bl	128b8 <z_impl_k_sem_take>
	__asm__ volatile(
   16b5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16b60:	f3ef 8811 	mrs	r8, BASEPRI
   16b64:	f383 8812 	msr	BASEPRI_MAX, r3
   16b68:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   16b6c:	fab0 f780 	clz	r7, r0
   16b70:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   16b72:	e7c4      	b.n	16afe <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   16b74:	ab05      	add	r3, sp, #20
   16b76:	aa03      	add	r2, sp, #12
   16b78:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   16b7a:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   16b7c:	f7ff fec4 	bl	16908 <drop_item_locked>
   16b80:	4607      	mov	r7, r0
   16b82:	e7bc      	b.n	16afe <mpsc_pbuf_alloc+0x76>

00016b84 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   16b84:	b570      	push	{r4, r5, r6, lr}
   16b86:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   16b88:	6983      	ldr	r3, [r0, #24]
   16b8a:	4608      	mov	r0, r1
{
   16b8c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   16b8e:	4798      	blx	r3
   16b90:	4602      	mov	r2, r0
   16b92:	f04f 0340 	mov.w	r3, #64	; 0x40
   16b96:	f3ef 8611 	mrs	r6, BASEPRI
   16b9a:	f383 8812 	msr	BASEPRI_MAX, r3
   16b9e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   16ba2:	782b      	ldrb	r3, [r5, #0]
   16ba4:	f043 0301 	orr.w	r3, r3, #1
   16ba8:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   16baa:	6861      	ldr	r1, [r4, #4]
   16bac:	4620      	mov	r0, r4
   16bae:	f7ff fe74 	bl	1689a <idx_inc>
   16bb2:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   16bb4:	4620      	mov	r0, r4
   16bb6:	f7ff ff39 	bl	16a2c <max_utilization_update>
	__asm__ volatile(
   16bba:	f386 8811 	msr	BASEPRI, r6
   16bbe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   16bc2:	bd70      	pop	{r4, r5, r6, pc}

00016bc4 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   16bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bc6:	4604      	mov	r4, r0
	__asm__ volatile(
   16bc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   16bcc:	f3ef 8611 	mrs	r6, BASEPRI
   16bd0:	f383 8812 	msr	BASEPRI_MAX, r3
   16bd4:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   16bd8:	6923      	ldr	r3, [r4, #16]
   16bda:	f013 0f08 	tst.w	r3, #8
   16bde:	68a3      	ldr	r3, [r4, #8]
   16be0:	d102      	bne.n	16be8 <mpsc_pbuf_claim+0x24>
   16be2:	6862      	ldr	r2, [r4, #4]
   16be4:	4293      	cmp	r3, r2
   16be6:	d900      	bls.n	16bea <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   16be8:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   16bea:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   16bec:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   16bee:	b92a      	cbnz	r2, 16bfc <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   16bf0:	f386 8811 	msr	BASEPRI, r6
   16bf4:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   16bf8:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   16bfa:	e033      	b.n	16c64 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   16bfc:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   16c00:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   16c04:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   16c08:	d0f2      	beq.n	16bf0 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   16c0a:	2802      	cmp	r0, #2
   16c0c:	d103      	bne.n	16c16 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   16c0e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   16c12:	08ad      	lsrs	r5, r5, #2
   16c14:	d105      	bne.n	16c22 <mpsc_pbuf_claim+0x5e>
   16c16:	07d0      	lsls	r0, r2, #31
   16c18:	d412      	bmi.n	16c40 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   16c1a:	69a3      	ldr	r3, [r4, #24]
   16c1c:	4638      	mov	r0, r7
   16c1e:	4798      	blx	r3
   16c20:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   16c22:	68a1      	ldr	r1, [r4, #8]
   16c24:	462a      	mov	r2, r5
   16c26:	4620      	mov	r0, r4
   16c28:	f7ff fe37 	bl	1689a <idx_inc>
				rd_idx_inc(buffer, inc);
   16c2c:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   16c2e:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   16c30:	4620      	mov	r0, r4
   16c32:	f7ff fe40 	bl	168b6 <rd_idx_inc>
   16c36:	f386 8811 	msr	BASEPRI, r6
   16c3a:	f3bf 8f6f 	isb	sy
	} while (cont);
   16c3e:	e7c3      	b.n	16bc8 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   16c40:	f042 0202 	orr.w	r2, r2, #2
   16c44:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   16c48:	4638      	mov	r0, r7
   16c4a:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   16c4c:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   16c4e:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   16c50:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   16c52:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   16c54:	4620      	mov	r0, r4
   16c56:	f7ff fe20 	bl	1689a <idx_inc>
				buffer->tmp_rd_idx =
   16c5a:	60a0      	str	r0, [r4, #8]
   16c5c:	f386 8811 	msr	BASEPRI, r6
   16c60:	f3bf 8f6f 	isb	sy
}
   16c64:	4638      	mov	r0, r7
   16c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016c68 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   16c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c6a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   16c6c:	6983      	ldr	r3, [r0, #24]
   16c6e:	4608      	mov	r0, r1
{
   16c70:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   16c72:	4798      	blx	r3
   16c74:	4606      	mov	r6, r0
	__asm__ volatile(
   16c76:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c7a:	f3ef 8711 	mrs	r7, BASEPRI
   16c7e:	f383 8812 	msr	BASEPRI_MAX, r3
   16c82:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   16c86:	782b      	ldrb	r3, [r5, #0]
   16c88:	f36f 0300 	bfc	r3, #0, #1
   16c8c:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   16c8e:	6923      	ldr	r3, [r4, #16]
   16c90:	079b      	lsls	r3, r3, #30
   16c92:	d505      	bpl.n	16ca0 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   16c94:	68e2      	ldr	r2, [r4, #12]
   16c96:	69e3      	ldr	r3, [r4, #28]
   16c98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   16c9c:	429d      	cmp	r5, r3
   16c9e:	d11a      	bne.n	16cd6 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   16ca0:	782b      	ldrb	r3, [r5, #0]
   16ca2:	f36f 0341 	bfc	r3, #1, #1
   16ca6:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   16ca8:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   16cac:	4299      	cmp	r1, r3
   16cae:	d104      	bne.n	16cba <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   16cb0:	4632      	mov	r2, r6
   16cb2:	4620      	mov	r0, r4
   16cb4:	f7ff fdf1 	bl	1689a <idx_inc>
   16cb8:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   16cba:	4631      	mov	r1, r6
   16cbc:	4620      	mov	r0, r4
   16cbe:	f7ff fdfa 	bl	168b6 <rd_idx_inc>
	__asm__ volatile(
   16cc2:	f387 8811 	msr	BASEPRI, r7
   16cc6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16cca:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   16cce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16cd2:	f7fb bdcb 	b.w	1286c <z_impl_k_sem_give>
		witem->skip.len = wlen;
   16cd6:	682b      	ldr	r3, [r5, #0]
   16cd8:	f360 039f 	bfi	r3, r0, #2, #30
   16cdc:	602b      	str	r3, [r5, #0]
   16cde:	e7f0      	b.n	16cc2 <mpsc_pbuf_free+0x5a>

00016ce0 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   16ce0:	6902      	ldr	r2, [r0, #16]
   16ce2:	6883      	ldr	r3, [r0, #8]
   16ce4:	0712      	lsls	r2, r2, #28
   16ce6:	d402      	bmi.n	16cee <mpsc_pbuf_is_pending+0xe>
   16ce8:	6842      	ldr	r2, [r0, #4]
   16cea:	429a      	cmp	r2, r3
   16cec:	d200      	bcs.n	16cf0 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   16cee:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   16cf0:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   16cf2:	1e18      	subs	r0, r3, #0
   16cf4:	bf18      	it	ne
   16cf6:	2001      	movne	r0, #1
   16cf8:	4770      	bx	lr

00016cfa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   16cfa:	4770      	bx	lr

00016cfc <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   16cfc:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   16cfe:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   16d00:	bf5f      	itttt	pl
   16d02:	6803      	ldrpl	r3, [r0, #0]
   16d04:	8842      	ldrhpl	r2, [r0, #2]
   16d06:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   16d0a:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   16d0e:	bf5d      	ittte	pl
   16d10:	3017      	addpl	r0, #23
   16d12:	f020 0007 	bicpl.w	r0, r0, #7
   16d16:	0880      	lsrpl	r0, r0, #2
	return 0;
   16d18:	2000      	movmi	r0, #0
}
   16d1a:	4770      	bx	lr

00016d1c <dummy_timestamp>:
}
   16d1c:	2000      	movs	r0, #0
   16d1e:	4770      	bx	lr

00016d20 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   16d20:	f000 be86 	b.w	17a30 <sys_clock_cycle_get_32>

00016d24 <atomic_inc>:
{
   16d24:	4603      	mov	r3, r0
}
   16d26:	f3bf 8f5b 	dmb	ish
   16d2a:	e853 0f00 	ldrex	r0, [r3]
   16d2e:	1c42      	adds	r2, r0, #1
   16d30:	e843 2100 	strex	r1, r2, [r3]
   16d34:	2900      	cmp	r1, #0
   16d36:	d1f8      	bne.n	16d2a <atomic_inc+0x6>
   16d38:	f3bf 8f5b 	dmb	ish
   16d3c:	4770      	bx	lr

00016d3e <z_log_vprintk>:
{
   16d3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   16d40:	2300      	movs	r3, #0
   16d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16d46:	e9cd 3300 	strd	r3, r3, [sp]
   16d4a:	461a      	mov	r2, r3
   16d4c:	4619      	mov	r1, r3
   16d4e:	4618      	mov	r0, r3
   16d50:	f7f4 ffa6 	bl	bca0 <z_impl_z_log_msg_runtime_vcreate>
}
   16d54:	b005      	add	sp, #20
   16d56:	f85d fb04 	ldr.w	pc, [sp], #4

00016d5a <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   16d5a:	2001      	movs	r0, #1
   16d5c:	f7f4 bd58 	b.w	b810 <z_log_dropped>

00016d60 <z_log_get_tag>:
}
   16d60:	2000      	movs	r0, #0
   16d62:	4770      	bx	lr

00016d64 <z_cbprintf_cpy>:
{
   16d64:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   16d66:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   16d6a:	1b9b      	subs	r3, r3, r6
   16d6c:	428b      	cmp	r3, r1
{
   16d6e:	460c      	mov	r4, r1
   16d70:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   16d72:	d30a      	bcc.n	16d8a <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   16d74:	6813      	ldr	r3, [r2, #0]
   16d76:	460a      	mov	r2, r1
   16d78:	4601      	mov	r1, r0
   16d7a:	1998      	adds	r0, r3, r6
   16d7c:	f000 f8c3 	bl	16f06 <memcpy>
	desc->off += len;
   16d80:	68ab      	ldr	r3, [r5, #8]
   16d82:	4423      	add	r3, r4
   16d84:	60ab      	str	r3, [r5, #8]
	return len;
   16d86:	4620      	mov	r0, r4
}
   16d88:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   16d8a:	f06f 001b 	mvn.w	r0, #27
   16d8e:	e7fb      	b.n	16d88 <z_cbprintf_cpy+0x24>

00016d90 <z_log_msg_finalize>:
{
   16d90:	b570      	push	{r4, r5, r6, lr}
   16d92:	460e      	mov	r6, r1
   16d94:	4615      	mov	r5, r2
   16d96:	4619      	mov	r1, r3
	if (!msg) {
   16d98:	4604      	mov	r4, r0
   16d9a:	b918      	cbnz	r0, 16da4 <z_log_msg_finalize+0x14>
}
   16d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   16da0:	f7f4 bd36 	b.w	b810 <z_log_dropped>
	if (data) {
   16da4:	b133      	cbz	r3, 16db4 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   16da6:	f3c2 234a 	ubfx	r3, r2, #9, #11
   16daa:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   16dac:	0d12      	lsrs	r2, r2, #20
   16dae:	4418      	add	r0, r3
   16db0:	f000 f8a9 	bl	16f06 <memcpy>
	msg->hdr.source = source;
   16db4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   16db8:	4620      	mov	r0, r4
}
   16dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   16dbe:	f7f4 beb7 	b.w	bb30 <z_log_msg_commit>

00016dc2 <buffer_write>:
{
   16dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16dc4:	4606      	mov	r6, r0
   16dc6:	460d      	mov	r5, r1
   16dc8:	4614      	mov	r4, r2
   16dca:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   16dcc:	4621      	mov	r1, r4
   16dce:	4628      	mov	r0, r5
   16dd0:	463a      	mov	r2, r7
   16dd2:	47b0      	blx	r6
	} while (len != 0);
   16dd4:	1a24      	subs	r4, r4, r0
		buf += processed;
   16dd6:	4405      	add	r5, r0
	} while (len != 0);
   16dd8:	d1f8      	bne.n	16dcc <buffer_write+0xa>
}
   16dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016ddc <cbvprintf>:
{
   16ddc:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   16dde:	2400      	movs	r4, #0
   16de0:	9400      	str	r4, [sp, #0]
   16de2:	f7f4 f877 	bl	aed4 <z_cbvprintf_impl>
}
   16de6:	b002      	add	sp, #8
   16de8:	bd10      	pop	{r4, pc}

00016dea <log_output_flush>:
{
   16dea:	b510      	push	{r4, lr}
		     output->control_block->offset,
   16dec:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   16dee:	6881      	ldr	r1, [r0, #8]
{
   16df0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   16df2:	e9d2 2300 	ldrd	r2, r3, [r2]
   16df6:	6800      	ldr	r0, [r0, #0]
   16df8:	f7ff ffe3 	bl	16dc2 <buffer_write>
	output->control_block->offset = 0;
   16dfc:	6863      	ldr	r3, [r4, #4]
   16dfe:	2200      	movs	r2, #0
   16e00:	601a      	str	r2, [r3, #0]
}
   16e02:	bd10      	pop	{r4, pc}

00016e04 <out_func>:
{
   16e04:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   16e06:	684b      	ldr	r3, [r1, #4]
   16e08:	681a      	ldr	r2, [r3, #0]
   16e0a:	68cb      	ldr	r3, [r1, #12]
   16e0c:	429a      	cmp	r2, r3
{
   16e0e:	4605      	mov	r5, r0
   16e10:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   16e12:	d102      	bne.n	16e1a <out_func+0x16>
		log_output_flush(out_ctx);
   16e14:	4608      	mov	r0, r1
   16e16:	f7ff ffe8 	bl	16dea <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16e1a:	6863      	ldr	r3, [r4, #4]
   16e1c:	f3bf 8f5b 	dmb	ish
   16e20:	e853 2f00 	ldrex	r2, [r3]
   16e24:	1c51      	adds	r1, r2, #1
   16e26:	e843 1000 	strex	r0, r1, [r3]
   16e2a:	2800      	cmp	r0, #0
   16e2c:	d1f8      	bne.n	16e20 <out_func+0x1c>
   16e2e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   16e32:	68a3      	ldr	r3, [r4, #8]
   16e34:	549d      	strb	r5, [r3, r2]
}
   16e36:	2000      	movs	r0, #0
   16e38:	bd38      	pop	{r3, r4, r5, pc}

00016e3a <cr_out_func>:
	if (c == '\n') {
   16e3a:	280a      	cmp	r0, #10
{
   16e3c:	b538      	push	{r3, r4, r5, lr}
   16e3e:	4604      	mov	r4, r0
   16e40:	460d      	mov	r5, r1
	if (c == '\n') {
   16e42:	d102      	bne.n	16e4a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   16e44:	200d      	movs	r0, #13
   16e46:	f7ff ffdd 	bl	16e04 <out_func>
	out_func(c, ctx);
   16e4a:	4629      	mov	r1, r5
   16e4c:	4620      	mov	r0, r4
   16e4e:	f7ff ffd9 	bl	16e04 <out_func>
}
   16e52:	2000      	movs	r0, #0
   16e54:	bd38      	pop	{r3, r4, r5, pc}

00016e56 <log_backend_uart_init>:
}
   16e56:	4770      	bx	lr

00016e58 <abort_function>:
{
   16e58:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   16e5a:	2000      	movs	r0, #0
   16e5c:	f7f4 fbec 	bl	b638 <sys_reboot>

00016e60 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   16e60:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   16e62:	6800      	ldr	r0, [r0, #0]
   16e64:	f7f5 bc4e 	b.w	c704 <z_arm_fatal_error>

00016e68 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   16e68:	2100      	movs	r1, #0
   16e6a:	2001      	movs	r0, #1
   16e6c:	f7f5 bc4a 	b.w	c704 <z_arm_fatal_error>

00016e70 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   16e70:	b508      	push	{r3, lr}
	handler();
   16e72:	f7f5 fd05 	bl	c880 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   16e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   16e7a:	f7f5 bddd 	b.w	ca38 <z_arm_exc_exit>

00016e7e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   16e7e:	2300      	movs	r3, #0
   16e80:	f7f4 be8a 	b.w	bb98 <z_impl_z_log_msg_static_create>

00016e84 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   16e84:	3901      	subs	r1, #1
   16e86:	4603      	mov	r3, r0
   16e88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   16e8c:	b90a      	cbnz	r2, 16e92 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   16e8e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   16e90:	4770      	bx	lr
		*d = *s;
   16e92:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   16e96:	e7f7      	b.n	16e88 <strcpy+0x4>

00016e98 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   16e98:	4603      	mov	r3, r0
	size_t n = 0;
   16e9a:	2000      	movs	r0, #0

	while (*s != '\0') {
   16e9c:	5c1a      	ldrb	r2, [r3, r0]
   16e9e:	b902      	cbnz	r2, 16ea2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   16ea0:	4770      	bx	lr
		n++;
   16ea2:	3001      	adds	r0, #1
   16ea4:	e7fa      	b.n	16e9c <strlen+0x4>

00016ea6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   16ea6:	4603      	mov	r3, r0
	size_t n = 0;
   16ea8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   16eaa:	5c1a      	ldrb	r2, [r3, r0]
   16eac:	b10a      	cbz	r2, 16eb2 <strnlen+0xc>
   16eae:	4288      	cmp	r0, r1
   16eb0:	d100      	bne.n	16eb4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   16eb2:	4770      	bx	lr
		n++;
   16eb4:	3001      	adds	r0, #1
   16eb6:	e7f8      	b.n	16eaa <strnlen+0x4>

00016eb8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   16eb8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   16eba:	b15a      	cbz	r2, 16ed4 <memcmp+0x1c>
   16ebc:	3901      	subs	r1, #1
   16ebe:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   16ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
   16ec4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   16ec8:	42a0      	cmp	r0, r4
   16eca:	d001      	beq.n	16ed0 <memcmp+0x18>
   16ecc:	429a      	cmp	r2, r3
   16ece:	d0f7      	beq.n	16ec0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   16ed0:	1ad0      	subs	r0, r2, r3
}
   16ed2:	bd10      	pop	{r4, pc}
		return 0;
   16ed4:	4610      	mov	r0, r2
   16ed6:	e7fc      	b.n	16ed2 <memcmp+0x1a>

00016ed8 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   16ed8:	1a43      	subs	r3, r0, r1
   16eda:	4293      	cmp	r3, r2
{
   16edc:	b510      	push	{r4, lr}
   16ede:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   16ee2:	d308      	bcc.n	16ef6 <memmove+0x1e>
   16ee4:	3901      	subs	r1, #1
	char *dest = d;
   16ee6:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   16ee8:	429a      	cmp	r2, r3
   16eea:	d00b      	beq.n	16f04 <memmove+0x2c>
			*dest = *src;
   16eec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   16ef0:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   16ef4:	e7f8      	b.n	16ee8 <memmove+0x10>
   16ef6:	440a      	add	r2, r1
			dest[n] = src[n];
   16ef8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   16efc:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   16f00:	428a      	cmp	r2, r1
   16f02:	d1f9      	bne.n	16ef8 <memmove+0x20>
		}
	}

	return d;
}
   16f04:	bd10      	pop	{r4, pc}

00016f06 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   16f06:	b510      	push	{r4, lr}
   16f08:	1e43      	subs	r3, r0, #1
   16f0a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   16f0c:	4291      	cmp	r1, r2
   16f0e:	d100      	bne.n	16f12 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   16f10:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   16f12:	f811 4b01 	ldrb.w	r4, [r1], #1
   16f16:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   16f1a:	e7f7      	b.n	16f0c <memcpy+0x6>

00016f1c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   16f1c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   16f1e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   16f20:	4603      	mov	r3, r0
	while (n > 0) {
   16f22:	4293      	cmp	r3, r2
   16f24:	d100      	bne.n	16f28 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   16f26:	4770      	bx	lr
		*(d_byte++) = c_byte;
   16f28:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   16f2c:	e7f9      	b.n	16f22 <memset+0x6>

00016f2e <_stdout_hook_default>:
}
   16f2e:	f04f 30ff 	mov.w	r0, #4294967295
   16f32:	4770      	bx	lr

00016f34 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   16f34:	2806      	cmp	r0, #6
   16f36:	d108      	bne.n	16f4a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   16f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16f3c:	2201      	movs	r2, #1
   16f3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   16f42:	f3bf 8f4f 	dsb	sy
        __WFE();
   16f46:	bf20      	wfe
    while (true)
   16f48:	e7fd      	b.n	16f46 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   16f4a:	4770      	bx	lr

00016f4c <pm_state_exit_post_ops>:
   16f4c:	2300      	movs	r3, #0
   16f4e:	f383 8811 	msr	BASEPRI, r3
   16f52:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   16f56:	4770      	bx	lr

00016f58 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   16f58:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   16f5a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   16f5c:	2106      	movs	r1, #6
{
   16f5e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   16f60:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   16f64:	f7fa fb1a 	bl	1159c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   16f68:	b918      	cbnz	r0, 16f72 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   16f6a:	79a3      	ldrb	r3, [r4, #6]
   16f6c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16f70:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   16f72:	bd10      	pop	{r4, pc}

00016f74 <hci_vendor_event>:
}
   16f74:	4770      	bx	lr

00016f76 <z_log_msg_static_create.constprop.0>:
   16f76:	2300      	movs	r3, #0
   16f78:	f7f4 be0e 	b.w	bb98 <z_impl_z_log_msg_static_create>

00016f7c <bt_addr_le_eq>:
{
   16f7c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   16f7e:	2207      	movs	r2, #7
   16f80:	f7ff ff9a 	bl	16eb8 <memcmp>
}
   16f84:	fab0 f080 	clz	r0, r0
   16f88:	0940      	lsrs	r0, r0, #5
   16f8a:	bd08      	pop	{r3, pc}

00016f8c <z_log_msg_static_create.constprop.0>:
   16f8c:	2300      	movs	r3, #0
   16f8e:	f7f4 be03 	b.w	bb98 <z_impl_z_log_msg_static_create>

00016f92 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   16f92:	b118      	cbz	r0, 16f9c <bt_id_set_adv_random_addr+0xa>
   16f94:	b111      	cbz	r1, 16f9c <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   16f96:	4608      	mov	r0, r1
   16f98:	f7f7 bad0 	b.w	e53c <set_random_address>
}
   16f9c:	f06f 0015 	mvn.w	r0, #21
   16fa0:	4770      	bx	lr

00016fa2 <bt_id_set_adv_private_addr>:
{
   16fa2:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   16fa4:	4604      	mov	r4, r0
   16fa6:	b180      	cbz	r0, 16fca <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   16fa8:	2106      	movs	r1, #6
   16faa:	4668      	mov	r0, sp
   16fac:	f7fa faf6 	bl	1159c <bt_rand>
	if (err) {
   16fb0:	b948      	cbnz	r0, 16fc6 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   16fb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   16fb6:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   16fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   16fbc:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   16fbe:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   16fc2:	f7ff ffe6 	bl	16f92 <bt_id_set_adv_random_addr>
}
   16fc6:	b002      	add	sp, #8
   16fc8:	bd10      	pop	{r4, pc}
		return -EINVAL;
   16fca:	f06f 0015 	mvn.w	r0, #21
   16fce:	e7fa      	b.n	16fc6 <bt_id_set_adv_private_addr+0x24>

00016fd0 <bt_id_adv_random_addr_check>:
}
   16fd0:	3800      	subs	r0, #0
   16fd2:	bf18      	it	ne
   16fd4:	2001      	movne	r0, #1
   16fd6:	4770      	bx	lr

00016fd8 <get_adv_channel_map>:
{
   16fd8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   16fda:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   16fde:	bf0c      	ite	eq
   16fe0:	2007      	moveq	r0, #7
   16fe2:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   16fe4:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   16fe6:	bf48      	it	mi
   16fe8:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   16fec:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   16fee:	bf48      	it	mi
   16ff0:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   16ff4:	4770      	bx	lr

00016ff6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16ff6:	f3bf 8f5b 	dmb	ish
   16ffa:	6800      	ldr	r0, [r0, #0]
   16ffc:	f3bf 8f5b 	dmb	ish
}
   17000:	4770      	bx	lr

00017002 <atomic_and>:
{
   17002:	b510      	push	{r4, lr}
   17004:	4603      	mov	r3, r0
}
   17006:	f3bf 8f5b 	dmb	ish
   1700a:	e853 0f00 	ldrex	r0, [r3]
   1700e:	ea00 0201 	and.w	r2, r0, r1
   17012:	e843 2400 	strex	r4, r2, [r3]
   17016:	2c00      	cmp	r4, #0
   17018:	d1f7      	bne.n	1700a <atomic_and+0x8>
   1701a:	f3bf 8f5b 	dmb	ish
   1701e:	bd10      	pop	{r4, pc}

00017020 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   17020:	2301      	movs	r3, #1
{
   17022:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   17024:	fa03 f101 	lsl.w	r1, r3, r1
{
   17028:	4604      	mov	r4, r0
	if (val) {
   1702a:	b162      	cbz	r2, 17046 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1702c:	f3bf 8f5b 	dmb	ish
   17030:	e854 3f00 	ldrex	r3, [r4]
   17034:	430b      	orrs	r3, r1
   17036:	e844 3200 	strex	r2, r3, [r4]
   1703a:	2a00      	cmp	r2, #0
   1703c:	d1f8      	bne.n	17030 <atomic_set_bit_to+0x10>
   1703e:	f3bf 8f5b 	dmb	ish
	}
}
   17042:	bc10      	pop	{r4}
   17044:	4770      	bx	lr
   17046:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17048:	43c9      	mvns	r1, r1
   1704a:	f7ff bfda 	b.w	17002 <atomic_and>

0001704e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1704e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17052:	b087      	sub	sp, #28
   17054:	4605      	mov	r5, r0
   17056:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1705a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1705e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   17062:	460c      	mov	r4, r1
   17064:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   17066:	2100      	movs	r1, #0
   17068:	2210      	movs	r2, #16
   1706a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1706c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1706e:	f7ff ff55 	bl	16f1c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   17072:	b9ee      	cbnz	r6, 170b0 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   17074:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   17078:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1707a:	a902      	add	r1, sp, #8
   1707c:	f242 0008 	movw	r0, #8200	; 0x2008
   17080:	f7f7 fc6e 	bl	e960 <hci_set_ad>
		if (err) {
   17084:	4604      	mov	r4, r0
   17086:	b978      	cbnz	r0, 170a8 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   17088:	f1ba 0f00 	cmp.w	sl, #0
   1708c:	d13e      	bne.n	1710c <le_adv_update.constprop.0+0xbe>
   1708e:	3510      	adds	r5, #16
   17090:	f3bf 8f5b 	dmb	ish
   17094:	e855 3f00 	ldrex	r3, [r5]
   17098:	f043 0304 	orr.w	r3, r3, #4
   1709c:	e845 3200 	strex	r2, r3, [r5]
   170a0:	2a00      	cmp	r2, #0
   170a2:	d1f7      	bne.n	17094 <le_adv_update.constprop.0+0x46>
   170a4:	f3bf 8f5b 	dmb	ish
}
   170a8:	4620      	mov	r0, r4
   170aa:	b007      	add	sp, #28
   170ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   170b0:	f7f7 fa28 	bl	e504 <bt_get_name>
   170b4:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   170b6:	b9e4      	cbnz	r4, 170f2 <le_adv_update.constprop.0+0xa4>
   170b8:	bb37      	cbnz	r7, 17108 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   170ba:	4658      	mov	r0, fp
   170bc:	f7ff feec 	bl	16e98 <strlen>
   170c0:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   170c2:	2e01      	cmp	r6, #1
		d[0].data = ad;
   170c4:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   170c8:	f88d 3000 	strb.w	r3, [sp]
   170cc:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   170d0:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   170d4:	d1d0      	bne.n	17078 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   170d6:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   170da:	9605      	str	r6, [sp, #20]
			d_len = 2;
   170dc:	2202      	movs	r2, #2
   170de:	e7cc      	b.n	1707a <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   170e0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   170e4:	3a08      	subs	r2, #8
   170e6:	2a01      	cmp	r2, #1
   170e8:	d925      	bls.n	17136 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   170ea:	3301      	adds	r3, #1
   170ec:	4598      	cmp	r8, r3
   170ee:	d1f7      	bne.n	170e0 <le_adv_update.constprop.0+0x92>
   170f0:	e7e2      	b.n	170b8 <le_adv_update.constprop.0+0x6a>
   170f2:	2300      	movs	r3, #0
   170f4:	e7fa      	b.n	170ec <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   170f6:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   170fa:	3a08      	subs	r2, #8
   170fc:	2a01      	cmp	r2, #1
   170fe:	d91a      	bls.n	17136 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   17100:	3301      	adds	r3, #1
   17102:	4599      	cmp	r9, r3
   17104:	d1f7      	bne.n	170f6 <le_adv_update.constprop.0+0xa8>
   17106:	e7d8      	b.n	170ba <le_adv_update.constprop.0+0x6c>
   17108:	2300      	movs	r3, #0
   1710a:	e7fa      	b.n	17102 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1710c:	2e02      	cmp	r6, #2
   1710e:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   17112:	bf08      	it	eq
   17114:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   17116:	a902      	add	r1, sp, #8
			d_len = 2;
   17118:	bf08      	it	eq
   1711a:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1711c:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   17120:	bf08      	it	eq
   17122:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   17126:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1712a:	f7f7 fc19 	bl	e960 <hci_set_ad>
		if (err) {
   1712e:	2800      	cmp	r0, #0
   17130:	d0ad      	beq.n	1708e <le_adv_update.constprop.0+0x40>
   17132:	4604      	mov	r4, r0
   17134:	e7b8      	b.n	170a8 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   17136:	f06f 0415 	mvn.w	r4, #21
   1713a:	e7b5      	b.n	170a8 <le_adv_update.constprop.0+0x5a>

0001713c <get_adv_name_type>:
{
   1713c:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_SD)) {
   1713e:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17142:	4618      	mov	r0, r3
   17144:	f7ff ff57 	bl	16ff6 <atomic_get>
   17148:	0582      	lsls	r2, r0, #22
   1714a:	d405      	bmi.n	17158 <get_adv_name_type+0x1c>
   1714c:	4618      	mov	r0, r3
   1714e:	f7ff ff52 	bl	16ff6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME_AD)) {
   17152:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   17156:	bd08      	pop	{r3, pc}
		return ADV_NAME_TYPE_SD;
   17158:	2002      	movs	r0, #2
   1715a:	e7fc      	b.n	17156 <get_adv_name_type+0x1a>

0001715c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1715c:	6843      	ldr	r3, [r0, #4]
   1715e:	f013 0008 	ands.w	r0, r3, #8
   17162:	d00a      	beq.n	1717a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   17164:	035a      	lsls	r2, r3, #13
   17166:	d407      	bmi.n	17178 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   17168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   1716c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   17170:	bf14      	ite	ne
   17172:	2002      	movne	r0, #2
   17174:	2001      	moveq	r0, #1
   17176:	4770      	bx	lr
   17178:	2001      	movs	r0, #1
}
   1717a:	4770      	bx	lr

0001717c <bt_le_adv_set_enable_legacy>:
{
   1717c:	b570      	push	{r4, r5, r6, lr}
   1717e:	4606      	mov	r6, r0
   17180:	b086      	sub	sp, #24
   17182:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   17184:	f242 000a 	movw	r0, #8202	; 0x200a
   17188:	2101      	movs	r1, #1
   1718a:	f7f6 fbfb 	bl	d984 <bt_hci_cmd_create>
	if (!buf) {
   1718e:	4604      	mov	r4, r0
   17190:	b1b0      	cbz	r0, 171c0 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   17192:	300c      	adds	r0, #12
	if (enable) {
   17194:	b195      	cbz	r5, 171bc <bt_le_adv_set_enable_legacy+0x40>
   17196:	2101      	movs	r1, #1
   17198:	f000 f866 	bl	17268 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1719c:	f106 0210 	add.w	r2, r6, #16
   171a0:	a903      	add	r1, sp, #12
   171a2:	4620      	mov	r0, r4
   171a4:	9500      	str	r5, [sp, #0]
   171a6:	2307      	movs	r3, #7
   171a8:	f7f6 fbda 	bl	d960 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   171ac:	2200      	movs	r2, #0
   171ae:	4621      	mov	r1, r4
   171b0:	f242 000a 	movw	r0, #8202	; 0x200a
   171b4:	f7f6 fc20 	bl	d9f8 <bt_hci_cmd_send_sync>
}
   171b8:	b006      	add	sp, #24
   171ba:	bd70      	pop	{r4, r5, r6, pc}
   171bc:	4629      	mov	r1, r5
   171be:	e7eb      	b.n	17198 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   171c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   171c4:	e7f8      	b.n	171b8 <bt_le_adv_set_enable_legacy+0x3c>

000171c6 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   171c6:	3018      	adds	r0, #24
   171c8:	f000 bf8b 	b.w	180e2 <k_work_cancel_delayable>

000171cc <fixed_data_unref>:
}
   171cc:	4770      	bx	lr

000171ce <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   171ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   171d0:	6849      	ldr	r1, [r1, #4]
   171d2:	6809      	ldr	r1, [r1, #0]
   171d4:	f7f7 be4a 	b.w	ee6c <net_buf_alloc_len>

000171d8 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   171d8:	f7fb bb14 	b.w	12804 <z_impl_k_queue_get>

000171dc <net_buf_slist_put>:
	__asm__ volatile(
   171dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   171e0:	f3ef 8211 	mrs	r2, BASEPRI
   171e4:	f383 8812 	msr	BASEPRI_MAX, r3
   171e8:	f3bf 8f6f 	isb	sy
	parent->next = child;
   171ec:	2300      	movs	r3, #0
   171ee:	600b      	str	r3, [r1, #0]
	return list->tail;
   171f0:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   171f2:	b933      	cbnz	r3, 17202 <net_buf_slist_put+0x26>
	list->head = node;
   171f4:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   171f8:	f382 8811 	msr	BASEPRI, r2
   171fc:	f3bf 8f6f 	isb	sy
}
   17200:	4770      	bx	lr
	parent->next = child;
   17202:	6019      	str	r1, [r3, #0]
	list->tail = node;
   17204:	6041      	str	r1, [r0, #4]
}
   17206:	e7f7      	b.n	171f8 <net_buf_slist_put+0x1c>

00017208 <net_buf_slist_get>:
{
   17208:	b510      	push	{r4, lr}
   1720a:	4603      	mov	r3, r0
	__asm__ volatile(
   1720c:	f04f 0240 	mov.w	r2, #64	; 0x40
   17210:	f3ef 8111 	mrs	r1, BASEPRI
   17214:	f382 8812 	msr	BASEPRI_MAX, r2
   17218:	f3bf 8f6f 	isb	sy
	return list->head;
   1721c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1721e:	b128      	cbz	r0, 1722c <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17220:	685c      	ldr	r4, [r3, #4]
	return node->next;
   17222:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   17224:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17226:	42a0      	cmp	r0, r4
	list->tail = node;
   17228:	bf08      	it	eq
   1722a:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   1722c:	f381 8811 	msr	BASEPRI, r1
   17230:	f3bf 8f6f 	isb	sy
}
   17234:	bd10      	pop	{r4, pc}

00017236 <net_buf_put>:
	k_fifo_put(fifo, buf);
   17236:	f000 be7c 	b.w	17f32 <k_queue_append>

0001723a <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1723a:	7a02      	ldrb	r2, [r0, #8]
   1723c:	3201      	adds	r2, #1
   1723e:	7202      	strb	r2, [r0, #8]
	return buf;
}
   17240:	4770      	bx	lr

00017242 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   17242:	6883      	ldr	r3, [r0, #8]
   17244:	440b      	add	r3, r1
   17246:	6003      	str	r3, [r0, #0]
}
   17248:	4770      	bx	lr

0001724a <net_buf_simple_add>:
	return buf->data + buf->len;
   1724a:	8883      	ldrh	r3, [r0, #4]
   1724c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1724e:	4419      	add	r1, r3
   17250:	8081      	strh	r1, [r0, #4]
	return tail;
}
   17252:	18d0      	adds	r0, r2, r3
   17254:	4770      	bx	lr

00017256 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   17256:	b430      	push	{r4, r5}
   17258:	8884      	ldrh	r4, [r0, #4]
   1725a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1725c:	18a3      	adds	r3, r4, r2
   1725e:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17260:	1928      	adds	r0, r5, r4
}
   17262:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   17264:	f7ff be4f 	b.w	16f06 <memcpy>

00017268 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   17268:	b510      	push	{r4, lr}
   1726a:	8883      	ldrh	r3, [r0, #4]
   1726c:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   1726e:	1c5c      	adds	r4, r3, #1
   17270:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   17272:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   17274:	18d0      	adds	r0, r2, r3
   17276:	bd10      	pop	{r4, pc}

00017278 <net_buf_simple_pull_mem>:
	buf->len -= len;
	return buf->data += len;
}

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   17278:	4603      	mov	r3, r0
	void *data = buf->data;
   1727a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1727c:	889a      	ldrh	r2, [r3, #4]
   1727e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   17280:	4401      	add	r1, r0
	buf->len -= len;
   17282:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   17284:	6019      	str	r1, [r3, #0]

	return data;
}
   17286:	4770      	bx	lr

00017288 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   17288:	6802      	ldr	r2, [r0, #0]
   1728a:	6880      	ldr	r0, [r0, #8]
}
   1728c:	1a10      	subs	r0, r2, r0
   1728e:	4770      	bx	lr

00017290 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   17290:	6903      	ldr	r3, [r0, #16]
   17292:	b2c9      	uxtb	r1, r1
   17294:	220c      	movs	r2, #12
   17296:	fb01 3302 	mla	r3, r1, r2, r3
   1729a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1729c:	f000 0007 	and.w	r0, r0, #7
   172a0:	4770      	bx	lr

000172a2 <set_on_state>:
	__asm__ volatile(
   172a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   172a6:	f3ef 8211 	mrs	r2, BASEPRI
   172aa:	f383 8812 	msr	BASEPRI_MAX, r3
   172ae:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   172b2:	6803      	ldr	r3, [r0, #0]
   172b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   172b8:	f043 0302 	orr.w	r3, r3, #2
   172bc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   172be:	f382 8811 	msr	BASEPRI, r2
   172c2:	f3bf 8f6f 	isb	sy
}
   172c6:	4770      	bx	lr

000172c8 <stop>:
{
   172c8:	b570      	push	{r4, r5, r6, lr}
   172ca:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   172cc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   172ce:	f04f 0440 	mov.w	r4, #64	; 0x40
   172d2:	f3ef 8511 	mrs	r5, BASEPRI
   172d6:	f384 8812 	msr	BASEPRI_MAX, r4
   172da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   172de:	260c      	movs	r6, #12
   172e0:	fb06 3401 	mla	r4, r6, r1, r3
   172e4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   172e6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   172ea:	d008      	beq.n	172fe <stop+0x36>
   172ec:	42a2      	cmp	r2, r4
   172ee:	d006      	beq.n	172fe <stop+0x36>
	__asm__ volatile(
   172f0:	f385 8811 	msr	BASEPRI, r5
   172f4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   172f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   172fc:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   172fe:	4371      	muls	r1, r6
   17300:	440b      	add	r3, r1
   17302:	2201      	movs	r2, #1
   17304:	641a      	str	r2, [r3, #64]	; 0x40
   17306:	f385 8811 	msr	BASEPRI, r5
   1730a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1730e:	6843      	ldr	r3, [r0, #4]
   17310:	440b      	add	r3, r1
   17312:	685b      	ldr	r3, [r3, #4]
   17314:	4798      	blx	r3
	return 0;
   17316:	2000      	movs	r0, #0
   17318:	e7f0      	b.n	172fc <stop+0x34>

0001731a <api_stop>:
	return stop(dev, subsys, CTX_API);
   1731a:	2280      	movs	r2, #128	; 0x80
   1731c:	f7ff bfd4 	b.w	172c8 <stop>

00017320 <async_start>:
{
   17320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17322:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   17324:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   17326:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   17328:	f04f 0540 	mov.w	r5, #64	; 0x40
   1732c:	f3ef 8611 	mrs	r6, BASEPRI
   17330:	f385 8812 	msr	BASEPRI_MAX, r5
   17334:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   17338:	250c      	movs	r5, #12
   1733a:	4369      	muls	r1, r5
   1733c:	440c      	add	r4, r1
   1733e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   17340:	f005 0c07 	and.w	ip, r5, #7
   17344:	f1bc 0f01 	cmp.w	ip, #1
   17348:	d10b      	bne.n	17362 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1734a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   1734c:	f386 8811 	msr	BASEPRI, r6
   17350:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   17354:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   17358:	6843      	ldr	r3, [r0, #4]
   1735a:	585b      	ldr	r3, [r3, r1]
   1735c:	4798      	blx	r3
	return 0;
   1735e:	2000      	movs	r0, #0
}
   17360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   17362:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   17366:	42af      	cmp	r7, r5
   17368:	f386 8811 	msr	BASEPRI, r6
   1736c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   17370:	bf0c      	ite	eq
   17372:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   17376:	f04f 30ff 	movne.w	r0, #4294967295
   1737a:	e7f1      	b.n	17360 <async_start+0x40>

0001737c <api_start>:
{
   1737c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1737e:	2480      	movs	r4, #128	; 0x80
   17380:	9400      	str	r4, [sp, #0]
   17382:	f7ff ffcd 	bl	17320 <async_start>
}
   17386:	b002      	add	sp, #8
   17388:	bd10      	pop	{r4, pc}

0001738a <onoff_started_callback>:
{
   1738a:	b410      	push	{r4}
	return &data->mgr[type];
   1738c:	6900      	ldr	r0, [r0, #16]
   1738e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   17390:	241c      	movs	r4, #28
   17392:	fb03 0004 	mla	r0, r3, r4, r0
   17396:	2100      	movs	r1, #0
}
   17398:	bc10      	pop	{r4}
	notify(mgr, 0);
   1739a:	4710      	bx	r2

0001739c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1739c:	2000      	movs	r0, #0
   1739e:	f7fa b993 	b.w	116c8 <nrfx_clock_start>

000173a2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   173a2:	2000      	movs	r0, #0
   173a4:	f000 bbe0 	b.w	17b68 <nrfx_clock_stop>

000173a8 <blocking_start_callback>:
{
   173a8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   173aa:	f7fb ba5f 	b.w	1286c <z_impl_k_sem_give>

000173ae <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   173ae:	2000      	movs	r0, #0
   173b0:	4770      	bx	lr

000173b2 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   173b2:	b538      	push	{r3, r4, r5, lr}
   173b4:	460c      	mov	r4, r1
   173b6:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   173b8:	f7f7 f898 	bl	e4ec <bt_is_ready>
   173bc:	b128      	cbz	r0, 173ca <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   173be:	4629      	mov	r1, r5
   173c0:	4620      	mov	r0, r4
}
   173c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   173c6:	f7f6 bd7d 	b.w	dec4 <bt_hci_le_rand>
}
   173ca:	f06f 000a 	mvn.w	r0, #10
   173ce:	bd38      	pop	{r3, r4, r5, pc}

000173d0 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   173d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   173d2:	460f      	mov	r7, r1
   173d4:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   173d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   173da:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   173dc:	42a6      	cmp	r6, r4
   173de:	d803      	bhi.n	173e8 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   173e0:	d016      	beq.n	17410 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   173e2:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   173e4:	b003      	add	sp, #12
   173e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   173e8:	1b33      	subs	r3, r6, r4
   173ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   173ee:	bf38      	it	cc
   173f0:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   173f2:	462a      	mov	r2, r5
   173f4:	ab01      	add	r3, sp, #4
   173f6:	1939      	adds	r1, r7, r4
   173f8:	2000      	movs	r0, #0
   173fa:	f7fc fab7 	bl	1396c <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   173fe:	b920      	cbnz	r0, 1740a <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   17400:	9b01      	ldr	r3, [sp, #4]
   17402:	42ab      	cmp	r3, r5
   17404:	d101      	bne.n	1740a <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   17406:	442c      	add	r4, r5
   17408:	e7e8      	b.n	173dc <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   1740a:	f06f 0015 	mvn.w	r0, #21
   1740e:	e7e9      	b.n	173e4 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   17410:	2000      	movs	r0, #0
   17412:	e7e7      	b.n	173e4 <entropy_cc3xx_rng_get_entropy+0x14>

00017414 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   17414:	2200      	movs	r2, #0
{
   17416:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   17418:	4611      	mov	r1, r2
   1741a:	4610      	mov	r0, r2
   1741c:	f7fc fa76 	bl	1390c <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   17420:	2800      	cmp	r0, #0
	}

	return 0;
}
   17422:	bf18      	it	ne
   17424:	f06f 0015 	mvnne.w	r0, #21
   17428:	bd08      	pop	{r3, pc}

0001742a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1742a:	6843      	ldr	r3, [r0, #4]
   1742c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1742e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   17432:	600b      	str	r3, [r1, #0]
}
   17434:	2000      	movs	r0, #0
   17436:	4770      	bx	lr

00017438 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17438:	6843      	ldr	r3, [r0, #4]
   1743a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1743c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   17440:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   17444:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   17448:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1744c:	2000      	movs	r0, #0
   1744e:	4770      	bx	lr

00017450 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17450:	6843      	ldr	r3, [r0, #4]
   17452:	685b      	ldr	r3, [r3, #4]
}
   17454:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   17456:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1745a:	4770      	bx	lr

0001745c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1745c:	6843      	ldr	r3, [r0, #4]
   1745e:	685b      	ldr	r3, [r3, #4]
}
   17460:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   17462:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   17466:	4770      	bx	lr

00017468 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17468:	6843      	ldr	r3, [r0, #4]
   1746a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1746c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   17470:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   17474:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   17476:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1747a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1747e:	2000      	movs	r0, #0
   17480:	4770      	bx	lr

00017482 <gpio_nrfx_manage_callback>:
{
   17482:	b510      	push	{r4, lr}
	return port->data;
   17484:	6903      	ldr	r3, [r0, #16]
	return list->head;
   17486:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   17488:	b1f8      	cbz	r0, 174ca <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1748a:	4288      	cmp	r0, r1
   1748c:	d119      	bne.n	174c2 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1748e:	689c      	ldr	r4, [r3, #8]
	return node->next;
   17490:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   17492:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   17494:	42a1      	cmp	r1, r4
   17496:	d100      	bne.n	1749a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   17498:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1749a:	2000      	movs	r0, #0
   1749c:	6008      	str	r0, [r1, #0]
	if (set) {
   1749e:	b12a      	cbz	r2, 174ac <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   174a0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   174a2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   174a4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   174a6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   174a8:	b902      	cbnz	r2, 174ac <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   174aa:	6099      	str	r1, [r3, #8]
	return 0;
   174ac:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   174ae:	e010      	b.n	174d2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   174b0:	4281      	cmp	r1, r0
   174b2:	d106      	bne.n	174c2 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   174b4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   174b6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   174b8:	6898      	ldr	r0, [r3, #8]
   174ba:	4281      	cmp	r1, r0
   174bc:	d1ed      	bne.n	1749a <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   174be:	609c      	str	r4, [r3, #8]
}
   174c0:	e7eb      	b.n	1749a <gpio_nrfx_manage_callback+0x18>
	return node->next;
   174c2:	4604      	mov	r4, r0
   174c4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   174c6:	2800      	cmp	r0, #0
   174c8:	d1f2      	bne.n	174b0 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   174ca:	2a00      	cmp	r2, #0
   174cc:	d1e8      	bne.n	174a0 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   174ce:	f06f 0015 	mvn.w	r0, #21
}
   174d2:	bd10      	pop	{r4, pc}

000174d4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   174d4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   174d6:	6843      	ldr	r3, [r0, #4]
   174d8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   174da:	7a05      	ldrb	r5, [r0, #8]
   174dc:	6844      	ldr	r4, [r0, #4]
   174de:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   174e2:	42a3      	cmp	r3, r4
   174e4:	d302      	bcc.n	174ec <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   174e6:	f06f 0001 	mvn.w	r0, #1
}
   174ea:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   174ec:	795c      	ldrb	r4, [r3, #5]
   174ee:	428c      	cmp	r4, r1
   174f0:	d001      	beq.n	174f6 <pinctrl_lookup_state+0x22>
		(*state)++;
   174f2:	3308      	adds	r3, #8
   174f4:	e7f0      	b.n	174d8 <pinctrl_lookup_state+0x4>
			return 0;
   174f6:	2000      	movs	r0, #0
   174f8:	e7f7      	b.n	174ea <pinctrl_lookup_state+0x16>

000174fa <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   174fa:	6902      	ldr	r2, [r0, #16]
{
   174fc:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   174fe:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   17502:	e883 0003 	stmia.w	r3, {r0, r1}
}
   17506:	2000      	movs	r0, #0
   17508:	4770      	bx	lr

0001750a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1750a:	6843      	ldr	r3, [r0, #4]
   1750c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1750e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   17512:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   17516:	4770      	bx	lr

00017518 <tx_start>:
{
   17518:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1751a:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   1751c:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1751e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   17522:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17526:	2200      	movs	r2, #0
   17528:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1752c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   17530:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   17534:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   17538:	6862      	ldr	r2, [r4, #4]
   1753a:	06d2      	lsls	r2, r2, #27
   1753c:	d511      	bpl.n	17562 <tx_start+0x4a>
	if (data->async) {
   1753e:	6902      	ldr	r2, [r0, #16]
   17540:	68d2      	ldr	r2, [r2, #12]
   17542:	b12a      	cbz	r2, 17550 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   17544:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   17548:	f041 0101 	orr.w	r1, r1, #1
   1754c:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   17550:	6842      	ldr	r2, [r0, #4]
   17552:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   17554:	2108      	movs	r1, #8
   17556:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1755a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1755e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17562:	2201      	movs	r2, #1
   17564:	609a      	str	r2, [r3, #8]
}
   17566:	bd10      	pop	{r4, pc}

00017568 <user_callback>:
	if (data->async->user_callback) {
   17568:	6903      	ldr	r3, [r0, #16]
   1756a:	68da      	ldr	r2, [r3, #12]
   1756c:	6813      	ldr	r3, [r2, #0]
   1756e:	b10b      	cbz	r3, 17574 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   17570:	6852      	ldr	r2, [r2, #4]
   17572:	4718      	bx	r3
}
   17574:	4770      	bx	lr

00017576 <notify_uart_rx_rdy>:
{
   17576:	b570      	push	{r4, r5, r6, lr}
   17578:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   1757a:	6906      	ldr	r6, [r0, #16]
{
   1757c:	4604      	mov	r4, r0
   1757e:	460d      	mov	r5, r1
	struct uart_event evt = {
   17580:	2214      	movs	r2, #20
   17582:	2100      	movs	r1, #0
   17584:	a801      	add	r0, sp, #4
   17586:	f7ff fcc9 	bl	16f1c <memset>
   1758a:	2302      	movs	r3, #2
   1758c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   17590:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   17592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   17594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   17596:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   17598:	a901      	add	r1, sp, #4
   1759a:	4620      	mov	r0, r4
	struct uart_event evt = {
   1759c:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   175a0:	f7ff ffe2 	bl	17568 <user_callback>
}
   175a4:	b006      	add	sp, #24
   175a6:	bd70      	pop	{r4, r5, r6, pc}

000175a8 <rx_buf_release>:
{
   175a8:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   175aa:	680e      	ldr	r6, [r1, #0]
{
   175ac:	b086      	sub	sp, #24
   175ae:	4605      	mov	r5, r0
   175b0:	460c      	mov	r4, r1
	if (*buf) {
   175b2:	b17e      	cbz	r6, 175d4 <rx_buf_release+0x2c>
		struct uart_event evt = {
   175b4:	2214      	movs	r2, #20
   175b6:	2100      	movs	r1, #0
   175b8:	a801      	add	r0, sp, #4
   175ba:	f7ff fcaf 	bl	16f1c <memset>
   175be:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   175c0:	eb0d 0103 	add.w	r1, sp, r3
   175c4:	4628      	mov	r0, r5
		struct uart_event evt = {
   175c6:	f88d 3004 	strb.w	r3, [sp, #4]
   175ca:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   175cc:	f7ff ffcc 	bl	17568 <user_callback>
		*buf = NULL;
   175d0:	2300      	movs	r3, #0
   175d2:	6023      	str	r3, [r4, #0]
}
   175d4:	b006      	add	sp, #24
   175d6:	bd70      	pop	{r4, r5, r6, pc}

000175d8 <notify_rx_disable>:
{
   175d8:	b510      	push	{r4, lr}
   175da:	b086      	sub	sp, #24
   175dc:	4604      	mov	r4, r0
	struct uart_event evt = {
   175de:	2214      	movs	r2, #20
   175e0:	2100      	movs	r1, #0
   175e2:	a801      	add	r0, sp, #4
   175e4:	f7ff fc9a 	bl	16f1c <memset>
   175e8:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   175ea:	a901      	add	r1, sp, #4
   175ec:	4620      	mov	r0, r4
	struct uart_event evt = {
   175ee:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   175f2:	f7ff ffb9 	bl	17568 <user_callback>
}
   175f6:	b006      	add	sp, #24
   175f8:	bd10      	pop	{r4, pc}

000175fa <uarte_nrfx_rx_buf_rsp>:
{
   175fa:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   175fc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   175fe:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   17600:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   17602:	f04f 0040 	mov.w	r0, #64	; 0x40
   17606:	f3ef 8611 	mrs	r6, BASEPRI
   1760a:	f380 8812 	msr	BASEPRI_MAX, r0
   1760e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   17612:	68ec      	ldr	r4, [r5, #12]
   17614:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17616:	b198      	cbz	r0, 17640 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   17618:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1761a:	b9a0      	cbnz	r0, 17646 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   1761c:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   1761e:	68ec      	ldr	r4, [r5, #12]
   17620:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17622:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   17626:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   1762a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1762e:	f042 0220 	orr.w	r2, r2, #32
   17632:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   17636:	f386 8811 	msr	BASEPRI, r6
   1763a:	f3bf 8f6f 	isb	sy
}
   1763e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   17640:	f06f 000c 	mvn.w	r0, #12
   17644:	e7f7      	b.n	17636 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   17646:	f06f 000f 	mvn.w	r0, #15
   1764a:	e7f4      	b.n	17636 <uarte_nrfx_rx_buf_rsp+0x3c>

0001764c <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   1764c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   1764e:	68d8      	ldr	r0, [r3, #12]
   17650:	b120      	cbz	r0, 1765c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   17652:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   17654:	68db      	ldr	r3, [r3, #12]
	return 0;
   17656:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   17658:	605a      	str	r2, [r3, #4]
	return 0;
   1765a:	4770      	bx	lr
		return -ENOTSUP;
   1765c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   17660:	4770      	bx	lr

00017662 <uarte_nrfx_poll_in>:
{
   17662:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   17664:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   17666:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   17668:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   1766a:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   1766c:	b960      	cbnz	r0, 17688 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1766e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   17672:	b164      	cbz	r4, 1768e <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   17674:	6992      	ldr	r2, [r2, #24]
   17676:	7812      	ldrb	r2, [r2, #0]
   17678:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1767a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1767e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17682:	2201      	movs	r2, #1
   17684:	601a      	str	r2, [r3, #0]
}
   17686:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   17688:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1768c:	e7fb      	b.n	17686 <uarte_nrfx_poll_in+0x24>
		return -1;
   1768e:	f04f 30ff 	mov.w	r0, #4294967295
   17692:	e7f8      	b.n	17686 <uarte_nrfx_poll_in+0x24>

00017694 <uarte_nrfx_rx_disable>:
{
   17694:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   17696:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   17698:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   1769a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   1769c:	68eb      	ldr	r3, [r5, #12]
   1769e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   176a0:	b1d2      	cbz	r2, 176d8 <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   176a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   176a4:	b153      	cbz	r3, 176bc <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   176a6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   176aa:	f023 0320 	bic.w	r3, r3, #32
   176ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   176b2:	2300      	movs	r3, #0
   176b4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   176b8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   176bc:	68e8      	ldr	r0, [r5, #12]
   176be:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   176c0:	f000 fea0 	bl	18404 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   176c4:	68eb      	ldr	r3, [r5, #12]
   176c6:	2000      	movs	r0, #0
   176c8:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   176cc:	68ea      	ldr	r2, [r5, #12]
   176ce:	2301      	movs	r3, #1
   176d0:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   176d4:	6063      	str	r3, [r4, #4]
}
   176d6:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   176d8:	f06f 000d 	mvn.w	r0, #13
   176dc:	e7fb      	b.n	176d6 <uarte_nrfx_rx_disable+0x42>

000176de <setup_tx_cache>:
{
   176de:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   176e0:	68c3      	ldr	r3, [r0, #12]
   176e2:	68da      	ldr	r2, [r3, #12]
   176e4:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   176e6:	1a52      	subs	r2, r2, r1
   176e8:	d00f      	beq.n	1770a <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   176ea:	2a08      	cmp	r2, #8
   176ec:	bf28      	it	cs
   176ee:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   176f0:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   176f2:	68c3      	ldr	r3, [r0, #12]
   176f4:	6999      	ldr	r1, [r3, #24]
   176f6:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   176f8:	68c3      	ldr	r3, [r0, #12]
   176fa:	6898      	ldr	r0, [r3, #8]
   176fc:	69d9      	ldr	r1, [r3, #28]
   176fe:	4401      	add	r1, r0
   17700:	6998      	ldr	r0, [r3, #24]
   17702:	f7ff fc00 	bl	16f06 <memcpy>
	return true;
   17706:	2001      	movs	r0, #1
}
   17708:	bd08      	pop	{r3, pc}
		return false;
   1770a:	4610      	mov	r0, r2
   1770c:	e7fc      	b.n	17708 <setup_tx_cache+0x2a>

0001770e <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   1770e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   17710:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   17712:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   17714:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   17718:	460c      	mov	r4, r1
   1771a:	b1e9      	cbz	r1, 17758 <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   1771c:	2100      	movs	r1, #0
   1771e:	4620      	mov	r0, r4
   17720:	f7ff fbfc 	bl	16f1c <memset>
		flush_len = len;
   17724:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   17726:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1772a:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   1772c:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17730:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17732:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   17736:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1773a:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1773c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   17740:	2900      	cmp	r1, #0
   17742:	d0fb      	beq.n	1773c <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17744:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   17748:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   1774c:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   17750:	b92c      	cbnz	r4, 1775e <rx_flush.isra.0+0x50>
			return rx_amount;
   17752:	b2c0      	uxtb	r0, r0
}
   17754:	b003      	add	sp, #12
   17756:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   17758:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   1775a:	466b      	mov	r3, sp
   1775c:	e7e3      	b.n	17726 <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   1775e:	4286      	cmp	r6, r0
   17760:	d1f7      	bne.n	17752 <rx_flush.isra.0+0x44>
   17762:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   17764:	42a2      	cmp	r2, r4
   17766:	d101      	bne.n	1776c <rx_flush.isra.0+0x5e>
	return 0;
   17768:	2000      	movs	r0, #0
   1776a:	e7f3      	b.n	17754 <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   1776c:	f814 3b01 	ldrb.w	r3, [r4], #1
   17770:	2b00      	cmp	r3, #0
   17772:	d0f7      	beq.n	17764 <rx_flush.isra.0+0x56>
   17774:	e7ed      	b.n	17752 <rx_flush.isra.0+0x44>

00017776 <async_uart_release>:
{
   17776:	b570      	push	{r4, r5, r6, lr}
   17778:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1777a:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   1777c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17780:	f3ef 8611 	mrs	r6, BASEPRI
   17784:	f383 8812 	msr	BASEPRI_MAX, r3
   17788:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   1778c:	68d0      	ldr	r0, [r2, #12]
   1778e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   17792:	ea23 0301 	bic.w	r3, r3, r1
   17796:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   1779a:	68d5      	ldr	r5, [r2, #12]
   1779c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   177a0:	b973      	cbnz	r3, 177c0 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   177a2:	2902      	cmp	r1, #2
   177a4:	d107      	bne.n	177b6 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   177a6:	6860      	ldr	r0, [r4, #4]
   177a8:	2205      	movs	r2, #5
   177aa:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   177ae:	f7ff ffae 	bl	1770e <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   177b2:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   177b6:	6863      	ldr	r3, [r4, #4]
   177b8:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   177ba:	2200      	movs	r2, #0
   177bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   177c0:	f386 8811 	msr	BASEPRI, r6
   177c4:	f3bf 8f6f 	isb	sy
}
   177c8:	bd70      	pop	{r4, r5, r6, pc}

000177ca <is_tx_ready.isra.0>:
	return config->uarte_regs;
   177ca:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   177cc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   177ce:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   177d2:	b940      	cbnz	r0, 177e6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   177d4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   177d6:	079b      	lsls	r3, r3, #30
   177d8:	d406      	bmi.n	177e8 <is_tx_ready.isra.0+0x1e>
   177da:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   177de:	3800      	subs	r0, #0
   177e0:	bf18      	it	ne
   177e2:	2001      	movne	r0, #1
   177e4:	4770      	bx	lr
   177e6:	2001      	movs	r0, #1
}
   177e8:	4770      	bx	lr

000177ea <start_tx_locked>:
{
   177ea:	b510      	push	{r4, lr}
   177ec:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   177ee:	6840      	ldr	r0, [r0, #4]
   177f0:	f7ff ffeb 	bl	177ca <is_tx_ready.isra.0>
   177f4:	68cb      	ldr	r3, [r1, #12]
   177f6:	b918      	cbnz	r0, 17800 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   177f8:	2201      	movs	r2, #1
   177fa:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   177fe:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   17800:	2200      	movs	r2, #0
   17802:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   17806:	68cb      	ldr	r3, [r1, #12]
   17808:	f04f 32ff 	mov.w	r2, #4294967295
   1780c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   17810:	68cb      	ldr	r3, [r1, #12]
   17812:	4620      	mov	r0, r4
   17814:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   17818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   1781c:	f7ff be7c 	b.w	17518 <tx_start>

00017820 <uarte_nrfx_rx_enable>:
{
   17820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   17824:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   17828:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1782a:	f8da 9000 	ldr.w	r9, [sl]
{
   1782e:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   17830:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   17834:	4605      	mov	r5, r0
   17836:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   17838:	2a00      	cmp	r2, #0
   1783a:	d17a      	bne.n	17932 <uarte_nrfx_rx_enable+0x112>
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1783c:	68e2      	ldr	r2, [r4, #12]
   1783e:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   17842:	2900      	cmp	r1, #0
   17844:	d178      	bne.n	17938 <uarte_nrfx_rx_enable+0x118>
   17846:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1784a:	2900      	cmp	r1, #0
   1784c:	d174      	bne.n	17938 <uarte_nrfx_rx_enable+0x118>
	data->async->rx_timeout = timeout;
   1784e:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   17850:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   17854:	bfc4      	itt	gt
   17856:	2205      	movgt	r2, #5
   17858:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1785c:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   1785e:	bfd8      	it	le
   17860:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   17862:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   17864:	68e3      	ldr	r3, [r4, #12]
   17866:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1786a:	68e3      	ldr	r3, [r4, #12]
   1786c:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1786e:	68e2      	ldr	r2, [r4, #12]
   17870:	2300      	movs	r3, #0
   17872:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   17874:	68e2      	ldr	r2, [r4, #12]
   17876:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   17878:	68e2      	ldr	r2, [r4, #12]
   1787a:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1787c:	f8da 3004 	ldr.w	r3, [sl, #4]
   17880:	06da      	lsls	r2, r3, #27
   17882:	d523      	bpl.n	178cc <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
   17884:	68e1      	ldr	r1, [r4, #12]
   17886:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1788a:	b1fe      	cbz	r6, 178cc <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1788c:	42be      	cmp	r6, r7
   1788e:	bf28      	it	cs
   17890:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   17892:	4640      	mov	r0, r8
   17894:	4632      	mov	r2, r6
   17896:	31c4      	adds	r1, #196	; 0xc4
   17898:	f7ff fb35 	bl	16f06 <memcpy>
			if (!len) {
   1789c:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1789e:	44b0      	add	r8, r6
			if (!len) {
   178a0:	d114      	bne.n	178cc <uarte_nrfx_rx_enable+0xac>
				data->async->rx_flush_cnt -= cpy_len;
   178a2:	68e2      	ldr	r2, [r4, #12]
   178a4:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   178a8:	1b9b      	subs	r3, r3, r6
   178aa:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   178ae:	4631      	mov	r1, r6
   178b0:	4628      	mov	r0, r5
   178b2:	f7ff fe60 	bl	17576 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   178b6:	68e1      	ldr	r1, [r4, #12]
   178b8:	4628      	mov	r0, r5
   178ba:	3158      	adds	r1, #88	; 0x58
   178bc:	f7ff fe74 	bl	175a8 <rx_buf_release>
				notify_rx_disable(dev);
   178c0:	4628      	mov	r0, r5
   178c2:	f7ff fe89 	bl	175d8 <notify_rx_disable>
				return 0;
   178c6:	2000      	movs	r0, #0
}
   178c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   178cc:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   178ce:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   178d2:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   178d6:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   178da:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   178de:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   178e2:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   178e6:	68e3      	ldr	r3, [r4, #12]
   178e8:	2201      	movs	r2, #1
   178ea:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   178ee:	f8da 3004 	ldr.w	r3, [sl, #4]
   178f2:	06db      	lsls	r3, r3, #27
   178f4:	d519      	bpl.n	1792a <uarte_nrfx_rx_enable+0x10a>
	__asm__ volatile(
   178f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   178fa:	f3ef 8111 	mrs	r1, BASEPRI
   178fe:	f383 8812 	msr	BASEPRI_MAX, r3
   17902:	f3bf 8f6f 	isb	sy
	if (data->async) {
   17906:	692b      	ldr	r3, [r5, #16]
   17908:	68db      	ldr	r3, [r3, #12]
   1790a:	b12b      	cbz	r3, 17918 <uarte_nrfx_rx_enable+0xf8>
		data->async->low_power_mask |= mask;
   1790c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   17910:	f042 0202 	orr.w	r2, r2, #2
   17914:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   17918:	686b      	ldr	r3, [r5, #4]
   1791a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1791c:	2208      	movs	r2, #8
   1791e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   17922:	f381 8811 	msr	BASEPRI, r1
   17926:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1792a:	2301      	movs	r3, #1
   1792c:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   17930:	e7c9      	b.n	178c6 <uarte_nrfx_rx_enable+0xa6>
		return -ENOTSUP;
   17932:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17936:	e7c7      	b.n	178c8 <uarte_nrfx_rx_enable+0xa8>
		return -EBUSY;
   17938:	f06f 000f 	mvn.w	r0, #15
   1793c:	e7c4      	b.n	178c8 <uarte_nrfx_rx_enable+0xa8>

0001793e <rx_timeout>:
{
   1793e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   17940:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   17942:	68e3      	ldr	r3, [r4, #12]
   17944:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   17948:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   1794c:	bb13      	cbnz	r3, 17994 <rx_timeout+0x56>
	const struct device *dev = data->dev;
   1794e:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   17950:	6873      	ldr	r3, [r6, #4]
   17952:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   17954:	2210      	movs	r2, #16
   17956:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   1795a:	68e3      	ldr	r3, [r4, #12]
   1795c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   17960:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   17962:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   17964:	bf1f      	itttt	ne
   17966:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   17968:	68e3      	ldrne	r3, [r4, #12]
   1796a:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   1796c:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   1796e:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   17970:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   17974:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   17976:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   17978:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   1797a:	da0c      	bge.n	17996 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   1797c:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   17980:	68e3      	ldr	r3, [r4, #12]
   17982:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   17986:	4281      	cmp	r1, r0
   17988:	d80b      	bhi.n	179a2 <rx_timeout+0x64>
	return config->uarte_regs;
   1798a:	6873      	ldr	r3, [r6, #4]
   1798c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1798e:	2210      	movs	r2, #16
   17990:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   17994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   17996:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   1799a:	eb02 0c01 	add.w	ip, r2, r1
   1799e:	4584      	cmp	ip, r0
   179a0:	d904      	bls.n	179ac <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   179a2:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   179a4:	2d00      	cmp	r5, #0
   179a6:	ddf0      	ble.n	1798a <rx_timeout+0x4c>
		clipped = true;
   179a8:	2701      	movs	r7, #1
   179aa:	e005      	b.n	179b8 <rx_timeout+0x7a>
	if (len > 0) {
   179ac:	2a00      	cmp	r2, #0
   179ae:	d0ec      	beq.n	1798a <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   179b0:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   179b4:	428a      	cmp	r2, r1
   179b6:	da12      	bge.n	179de <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   179b8:	4629      	mov	r1, r5
   179ba:	4630      	mov	r0, r6
   179bc:	f7ff fddb 	bl	17576 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   179c0:	68e2      	ldr	r2, [r4, #12]
   179c2:	6e13      	ldr	r3, [r2, #96]	; 0x60
   179c4:	442b      	add	r3, r5
   179c6:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   179c8:	68e2      	ldr	r2, [r4, #12]
   179ca:	6f13      	ldr	r3, [r2, #112]	; 0x70
   179cc:	442b      	add	r3, r5
   179ce:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   179d0:	2f00      	cmp	r7, #0
   179d2:	d0da      	beq.n	1798a <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   179d4:	68e0      	ldr	r0, [r4, #12]
   179d6:	3080      	adds	r0, #128	; 0x80
   179d8:	f000 fd14 	bl	18404 <z_impl_k_timer_stop>
}
   179dc:	e7d5      	b.n	1798a <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   179de:	1a52      	subs	r2, r2, r1
   179e0:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   179e2:	e7d2      	b.n	1798a <rx_timeout+0x4c>

000179e4 <uarte_nrfx_tx_abort>:
{
   179e4:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   179e6:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   179e8:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   179ea:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   179ec:	68da      	ldr	r2, [r3, #12]
   179ee:	6891      	ldr	r1, [r2, #8]
   179f0:	b151      	cbz	r1, 17a08 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   179f2:	2400      	movs	r4, #0
   179f4:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   179f8:	68d8      	ldr	r0, [r3, #12]
   179fa:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   179fc:	f000 fd02 	bl	18404 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17a00:	2301      	movs	r3, #1
   17a02:	60eb      	str	r3, [r5, #12]
	return 0;
   17a04:	4620      	mov	r0, r4
}
   17a06:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   17a08:	f06f 000d 	mvn.w	r0, #13
   17a0c:	e7fb      	b.n	17a06 <uarte_nrfx_tx_abort+0x22>

00017a0e <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   17a0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17a10:	6818      	ldr	r0, [r3, #0]
   17a12:	f7ff bfe7 	b.w	179e4 <uarte_nrfx_tx_abort>

00017a16 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   17a16:	4770      	bx	lr

00017a18 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   17a18:	f100 0350 	add.w	r3, r0, #80	; 0x50
   17a1c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   17a1e:	b29b      	uxth	r3, r3
   17a20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17a24:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   17a28:	2200      	movs	r2, #0
   17a2a:	601a      	str	r2, [r3, #0]
   17a2c:	681b      	ldr	r3, [r3, #0]
}
   17a2e:	4770      	bx	lr

00017a30 <sys_clock_cycle_get_32>:
{
   17a30:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   17a32:	f7f8 fc45 	bl	102c0 <z_nrf_rtc_timer_read>
}
   17a36:	bd08      	pop	{r3, pc}

00017a38 <gpio_pin_configure_dt>:
{
   17a38:	b470      	push	{r4, r5, r6}
   17a3a:	4603      	mov	r3, r0
   17a3c:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   17a3e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   17a40:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   17a42:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   17a44:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
   17a46:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   17a48:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   17a4a:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17a4c:	2401      	movs	r4, #1
   17a4e:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   17a50:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   17a54:	bf14      	ite	ne
   17a56:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   17a58:	43a3      	biceq	r3, r4
   17a5a:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   17a5c:	6833      	ldr	r3, [r6, #0]
}
   17a5e:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   17a60:	4718      	bx	r3

00017a62 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   17a62:	2301      	movs	r3, #1
   17a64:	fa03 f101 	lsl.w	r1, r3, r1
   17a68:	6903      	ldr	r3, [r0, #16]
   17a6a:	681b      	ldr	r3, [r3, #0]
   17a6c:	4219      	tst	r1, r3
   17a6e:	d003      	beq.n	17a78 <gpio_pin_set+0x16>
	if (value != 0)	{
   17a70:	b122      	cbz	r2, 17a7c <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   17a72:	6883      	ldr	r3, [r0, #8]
   17a74:	691b      	ldr	r3, [r3, #16]
   17a76:	e003      	b.n	17a80 <gpio_pin_set+0x1e>
	if (value != 0)	{
   17a78:	2a00      	cmp	r2, #0
   17a7a:	d0fa      	beq.n	17a72 <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   17a7c:	6883      	ldr	r3, [r0, #8]
   17a7e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   17a80:	4718      	bx	r3

00017a82 <z_log_msg_static_create.constprop.0>:
   17a82:	2300      	movs	r3, #0
   17a84:	f7f4 b888 	b.w	bb98 <z_impl_z_log_msg_static_create>

00017a88 <hci_driver_close>:
{
   17a88:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   17a8a:	f04f 30ff 	mov.w	r0, #4294967295
   17a8e:	f04f 31ff 	mov.w	r1, #4294967295
   17a92:	f7f9 f85d 	bl	10b50 <multithreading_lock_acquire>
	if (err) {
   17a96:	4604      	mov	r4, r0
   17a98:	b920      	cbnz	r0, 17aa4 <hci_driver_close+0x1c>
	err = sdc_disable();
   17a9a:	f7e8 fbd5 	bl	248 <sdc_disable>
	if (err) {
   17a9e:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   17aa0:	f7f9 f85e 	bl	10b60 <multithreading_lock_release>
}
   17aa4:	4620      	mov	r0, r4
   17aa6:	bd10      	pop	{r4, pc}

00017aa8 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   17aa8:	f7f9 b89a 	b.w	10be0 <rand_prio_low_vector_get>

00017aac <hci_driver_send>:
{
   17aac:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   17aae:	8a03      	ldrh	r3, [r0, #16]
{
   17ab0:	4605      	mov	r5, r0
	if (!buf->len) {
   17ab2:	b1bb      	cbz	r3, 17ae4 <hci_driver_send+0x38>
	switch (type) {
   17ab4:	7e03      	ldrb	r3, [r0, #24]
   17ab6:	b9ab      	cbnz	r3, 17ae4 <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   17ab8:	f04f 30ff 	mov.w	r0, #4294967295
   17abc:	f04f 31ff 	mov.w	r1, #4294967295
   17ac0:	f7f9 f846 	bl	10b50 <multithreading_lock_acquire>
	if (!errcode) {
   17ac4:	4604      	mov	r4, r0
   17ac6:	b958      	cbnz	r0, 17ae0 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   17ac8:	68e8      	ldr	r0, [r5, #12]
   17aca:	f7f9 fa19 	bl	10f00 <hci_internal_cmd_put>
   17ace:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   17ad0:	f7f9 f846 	bl	10b60 <multithreading_lock_release>
	if (errcode) {
   17ad4:	b924      	cbnz	r4, 17ae0 <hci_driver_send+0x34>
	receive_signal_raise();
   17ad6:	f7f9 f897 	bl	10c08 <receive_signal_raise>
		net_buf_unref(buf);
   17ada:	4628      	mov	r0, r5
   17adc:	f7f7 fa58 	bl	ef90 <net_buf_unref>
}
   17ae0:	4620      	mov	r0, r4
   17ae2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17ae4:	f06f 0415 	mvn.w	r4, #21
   17ae8:	e7fa      	b.n	17ae0 <hci_driver_send+0x34>

00017aea <receive_work_handler>:
	hci_driver_receive_process();
   17aea:	f7f9 b98d 	b.w	10e08 <hci_driver_receive_process>

00017aee <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   17aee:	4668      	mov	r0, sp
   17af0:	f020 0107 	bic.w	r1, r0, #7
   17af4:	468d      	mov	sp, r1
   17af6:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   17af8:	f7ee fccc 	bl	6494 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   17afc:	f7f4 feb2 	bl	c864 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   17b00:	f7f4 ff9a 	bl	ca38 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   17b04:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   17b08:	4685      	mov	sp, r0
   17b0a:	4770      	bx	lr

00017b0c <mpsl_low_prio_work_handler>:
{
   17b0c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   17b0e:	f04f 31ff 	mov.w	r1, #4294967295
   17b12:	f04f 30ff 	mov.w	r0, #4294967295
   17b16:	f7f9 f81b 	bl	10b50 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   17b1a:	f7f2 f9aa 	bl	9e72 <mpsl_low_priority_process>
}
   17b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   17b22:	f7f9 b81d 	b.w	10b60 <multithreading_lock_release>

00017b26 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   17b26:	4668      	mov	r0, sp
   17b28:	f020 0107 	bic.w	r1, r0, #7
   17b2c:	468d      	mov	sp, r1
   17b2e:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   17b30:	f7ee fc66 	bl	6400 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   17b34:	f7f4 fe96 	bl	c864 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   17b38:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   17b3c:	4685      	mov	sp, r0
   17b3e:	4770      	bx	lr

00017b40 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   17b40:	4668      	mov	r0, sp
   17b42:	f020 0107 	bic.w	r1, r0, #7
   17b46:	468d      	mov	sp, r1
   17b48:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   17b4a:	f7ec f9b1 	bl	3eb0 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   17b4e:	f7f4 fe89 	bl	c864 <_arch_isr_direct_pm>
   17b52:	f7f4 ff71 	bl	ca38 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   17b56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   17b5a:	4685      	mov	sp, r0
   17b5c:	4770      	bx	lr

00017b5e <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   17b5e:	b508      	push	{r3, lr}

	mpsl_fem_init();
   17b60:	f7f2 fb5d 	bl	a21e <mpsl_fem_init>

	return 0;
}
   17b64:	2000      	movs	r0, #0
   17b66:	bd08      	pop	{r3, pc}

00017b68 <nrfx_clock_stop>:
	switch (domain) {
   17b68:	2801      	cmp	r0, #1
   17b6a:	d101      	bne.n	17b70 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   17b6c:	f7ef bb26 	b.w	71bc <mpsl_clock_hfclk_release>
}
   17b70:	4770      	bx	lr

00017b72 <nrfx_clock_enable>:
}
   17b72:	4770      	bx	lr

00017b74 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   17b74:	f7ef b92c 	b.w	6dd0 <MPSL_IRQ_CLOCK_Handler>

00017b78 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   17b78:	f7fb be72 	b.w	13860 <nrf_cc3xx_platform_init>

00017b7c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   17b7c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   17b7e:	f7f4 fcb5 	bl	c4ec <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   17b82:	f7f4 fd89 	bl	c698 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   17b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   17b8a:	f7fb be69 	b.w	13860 <nrf_cc3xx_platform_init>

00017b8e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   17b8e:	4700      	bx	r0

00017b90 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   17b90:	f000 bc06 	b.w	183a0 <z_impl_k_busy_wait>

00017b94 <nrf_gpio_reconfigure>:
{
   17b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17b96:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17b98:	a801      	add	r0, sp, #4
{
   17b9a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   17b9e:	4616      	mov	r6, r2
   17ba0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   17ba2:	f7f9 fee1 	bl	11968 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   17ba6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   17ba8:	f1b6 0c00 	subs.w	ip, r6, #0
   17bac:	bf18      	it	ne
   17bae:	f04f 0c01 	movne.w	ip, #1
   17bb2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   17bb6:	1e0b      	subs	r3, r1, #0
   17bb8:	bf18      	it	ne
   17bba:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   17bbc:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   17bbe:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   17bc2:	bf14      	ite	ne
   17bc4:	f04f 0c0c 	movne.w	ip, #12
   17bc8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   17bcc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   17bce:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   17bd2:	bf14      	ite	ne
   17bd4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   17bd8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   17bdc:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   17bde:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   17be2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   17be6:	bf14      	ite	ne
   17be8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   17bec:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   17bf0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   17bf4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   17bf8:	b101      	cbz	r1, 17bfc <nrf_gpio_reconfigure+0x68>
   17bfa:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   17bfc:	b10e      	cbz	r6, 17c02 <nrf_gpio_reconfigure+0x6e>
   17bfe:	7836      	ldrb	r6, [r6, #0]
   17c00:	0076      	lsls	r6, r6, #1
   17c02:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   17c04:	b10d      	cbz	r5, 17c0a <nrf_gpio_reconfigure+0x76>
   17c06:	782d      	ldrb	r5, [r5, #0]
   17c08:	00ad      	lsls	r5, r5, #2
   17c0a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   17c0c:	b10c      	cbz	r4, 17c12 <nrf_gpio_reconfigure+0x7e>
   17c0e:	7824      	ldrb	r4, [r4, #0]
   17c10:	0224      	lsls	r4, r4, #8
   17c12:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   17c14:	b10f      	cbz	r7, 17c1a <nrf_gpio_reconfigure+0x86>
   17c16:	783f      	ldrb	r7, [r7, #0]
   17c18:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   17c1a:	430c      	orrs	r4, r1
   17c1c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   17c1e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   17c22:	b003      	add	sp, #12
   17c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017c26 <nrf_gpio_cfg_sense_set>:
{
   17c26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   17c28:	f10d 030f 	add.w	r3, sp, #15
   17c2c:	9301      	str	r3, [sp, #4]
   17c2e:	2300      	movs	r3, #0
{
   17c30:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   17c34:	9300      	str	r3, [sp, #0]
   17c36:	461a      	mov	r2, r3
   17c38:	4619      	mov	r1, r3
   17c3a:	f7ff ffab 	bl	17b94 <nrf_gpio_reconfigure>
}
   17c3e:	b005      	add	sp, #20
   17c40:	f85d fb04 	ldr.w	pc, [sp], #4

00017c44 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   17c44:	f7fa b9fe 	b.w	12044 <_DoInit>

00017c48 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   17c48:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   17c4a:	f7ff fffb 	bl	17c44 <SEGGER_RTT_Init>

	return 0;
}
   17c4e:	2000      	movs	r0, #0
   17c50:	bd08      	pop	{r3, pc}

00017c52 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   17c52:	4770      	bx	lr

00017c54 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   17c54:	b140      	cbz	r0, 17c68 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   17c56:	68c3      	ldr	r3, [r0, #12]
   17c58:	7858      	ldrb	r0, [r3, #1]
   17c5a:	f010 0001 	ands.w	r0, r0, #1
   17c5e:	bf1e      	ittt	ne
   17c60:	7818      	ldrbne	r0, [r3, #0]
   17c62:	fab0 f080 	clzne	r0, r0
   17c66:	0940      	lsrne	r0, r0, #5
}
   17c68:	4770      	bx	lr

00017c6a <z_early_memset>:
	(void) memset(dst, c, n);
   17c6a:	f7ff b957 	b.w	16f1c <memset>

00017c6e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   17c6e:	f7ff b94a 	b.w	16f06 <memcpy>

00017c72 <k_heap_init>:
{
   17c72:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   17c74:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   17c78:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   17c7c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   17c7e:	f7fe bc5e 	b.w	1653e <sys_heap_init>

00017c82 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c86:	b085      	sub	sp, #20
   17c88:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   17c8c:	4607      	mov	r7, r0
   17c8e:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17c90:	4650      	mov	r0, sl
   17c92:	4621      	mov	r1, r4
{
   17c94:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17c96:	f000 fb87 	bl	183a8 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   17c9a:	f1b4 3fff 	cmp.w	r4, #4294967295
   17c9e:	bf08      	it	eq
   17ca0:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   17ca4:	4605      	mov	r5, r0
   17ca6:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   17ca8:	bf04      	itt	eq
   17caa:	f04f 35ff 	moveq.w	r5, #4294967295
   17cae:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17cb2:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   17cb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   17cba:	f3ef 8411 	mrs	r4, BASEPRI
   17cbe:	f383 8812 	msr	BASEPRI_MAX, r3
   17cc2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17cc6:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17cca:	464a      	mov	r2, r9
   17ccc:	4641      	mov	r1, r8
   17cce:	4638      	mov	r0, r7
   17cd0:	f7fe fbce 	bl	16470 <sys_heap_aligned_alloc>
   17cd4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   17cd6:	f7fb fc43 	bl	13560 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   17cda:	9b03      	ldr	r3, [sp, #12]
   17cdc:	b13b      	cbz	r3, 17cee <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   17cde:	f384 8811 	msr	BASEPRI, r4
   17ce2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17ce6:	4618      	mov	r0, r3
   17ce8:	b005      	add	sp, #20
   17cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   17cee:	1a28      	subs	r0, r5, r0
   17cf0:	eb66 0101 	sbc.w	r1, r6, r1
   17cf4:	2801      	cmp	r0, #1
   17cf6:	f171 0200 	sbcs.w	r2, r1, #0
   17cfa:	dbf0      	blt.n	17cde <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17cfc:	e9cd 0100 	strd	r0, r1, [sp]
   17d00:	465a      	mov	r2, fp
   17d02:	4621      	mov	r1, r4
   17d04:	4650      	mov	r0, sl
   17d06:	f7fb f8d9 	bl	12ebc <z_pend_curr>
	__asm__ volatile(
   17d0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   17d0e:	f3ef 8411 	mrs	r4, BASEPRI
   17d12:	f383 8812 	msr	BASEPRI_MAX, r3
   17d16:	f3bf 8f6f 	isb	sy
	return k;
   17d1a:	e7d6      	b.n	17cca <k_heap_aligned_alloc+0x48>

00017d1c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   17d1c:	b538      	push	{r3, r4, r5, lr}
   17d1e:	4604      	mov	r4, r0
   17d20:	f04f 0340 	mov.w	r3, #64	; 0x40
   17d24:	f3ef 8511 	mrs	r5, BASEPRI
   17d28:	f383 8812 	msr	BASEPRI_MAX, r3
   17d2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   17d30:	f7fe fb66 	bl	16400 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   17d34:	f104 000c 	add.w	r0, r4, #12
   17d38:	f000 fad3 	bl	182e2 <z_unpend_all>
   17d3c:	b130      	cbz	r0, 17d4c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   17d3e:	4629      	mov	r1, r5
   17d40:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   17d48:	f7fb b91c 	b.w	12f84 <z_reschedule>
	__asm__ volatile(
   17d4c:	f385 8811 	msr	BASEPRI, r5
   17d50:	f3bf 8f6f 	isb	sy
}
   17d54:	bd38      	pop	{r3, r4, r5, pc}

00017d56 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17d56:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   17d5a:	4313      	orrs	r3, r2
   17d5c:	f013 0303 	ands.w	r3, r3, #3
   17d60:	d10c      	bne.n	17d7c <create_free_list+0x26>
	slab->free_list = NULL;
   17d62:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17d64:	6881      	ldr	r1, [r0, #8]
   17d66:	4299      	cmp	r1, r3
   17d68:	d801      	bhi.n	17d6e <create_free_list+0x18>
	return 0;
   17d6a:	2000      	movs	r0, #0
   17d6c:	4770      	bx	lr
		*(char **)p = slab->free_list;
   17d6e:	6941      	ldr	r1, [r0, #20]
   17d70:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   17d72:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   17d74:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17d76:	3301      	adds	r3, #1
		p += slab->block_size;
   17d78:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   17d7a:	e7f3      	b.n	17d64 <create_free_list+0xe>
		return -EINVAL;
   17d7c:	f06f 0015 	mvn.w	r0, #21
}
   17d80:	4770      	bx	lr

00017d82 <k_mem_slab_init>:
{
   17d82:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   17d84:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   17d88:	2300      	movs	r3, #0
	slab->buffer = buffer;
   17d8a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   17d8c:	6183      	str	r3, [r0, #24]
{
   17d8e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   17d90:	f7ff ffe1 	bl	17d56 <create_free_list>
	if (rc < 0) {
   17d94:	2800      	cmp	r0, #0
   17d96:	bfa8      	it	ge
   17d98:	e9c4 4400 	strdge	r4, r4, [r4]
}
   17d9c:	bd10      	pop	{r4, pc}

00017d9e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17da0:	4604      	mov	r4, r0
   17da2:	460d      	mov	r5, r1
	__asm__ volatile(
   17da4:	f04f 0340 	mov.w	r3, #64	; 0x40
   17da8:	f3ef 8611 	mrs	r6, BASEPRI
   17dac:	f383 8812 	msr	BASEPRI_MAX, r3
   17db0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   17db4:	6947      	ldr	r7, [r0, #20]
   17db6:	b977      	cbnz	r7, 17dd6 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17db8:	f000 fa49 	bl	1824e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   17dbc:	b158      	cbz	r0, 17dd6 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17dbe:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17dc0:	6142      	str	r2, [r0, #20]
   17dc2:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   17dc4:	f000 f9e4 	bl	18190 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   17dc8:	4631      	mov	r1, r6
   17dca:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   17dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   17dd2:	f7fb b8d7 	b.w	12f84 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17dd6:	682b      	ldr	r3, [r5, #0]
   17dd8:	6962      	ldr	r2, [r4, #20]
   17dda:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   17ddc:	682b      	ldr	r3, [r5, #0]
   17dde:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   17de0:	69a3      	ldr	r3, [r4, #24]
   17de2:	3b01      	subs	r3, #1
   17de4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   17de6:	f386 8811 	msr	BASEPRI, r6
   17dea:	f3bf 8f6f 	isb	sy
}
   17dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017df0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17df0:	f3ef 8005 	mrs	r0, IPSR
}
   17df4:	3800      	subs	r0, #0
   17df6:	bf18      	it	ne
   17df8:	2001      	movne	r0, #1
   17dfa:	4770      	bx	lr

00017dfc <z_impl_k_thread_name_set>:
}
   17dfc:	f06f 0057 	mvn.w	r0, #87	; 0x57
   17e00:	4770      	bx	lr

00017e02 <k_thread_name_get>:
}
   17e02:	2000      	movs	r0, #0
   17e04:	4770      	bx	lr

00017e06 <z_impl_k_thread_start>:
	z_sched_start(thread);
   17e06:	f7fb b8cf 	b.w	12fa8 <z_sched_start>

00017e0a <z_pm_save_idle_exit>:
{
   17e0a:	b508      	push	{r3, lr}
	pm_system_resume();
   17e0c:	f7f4 fa64 	bl	c2d8 <pm_system_resume>
}
   17e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   17e14:	f7ff bdff 	b.w	17a16 <sys_clock_idle_exit>

00017e18 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   17e18:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17e1c:	428b      	cmp	r3, r1
   17e1e:	d001      	beq.n	17e24 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   17e20:	f7fb b86a 	b.w	12ef8 <z_set_prio>
}
   17e24:	2000      	movs	r0, #0
   17e26:	4770      	bx	lr

00017e28 <z_impl_k_mutex_init>:
{
   17e28:	4603      	mov	r3, r0
	mutex->owner = NULL;
   17e2a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   17e2c:	e9c3 0002 	strd	r0, r0, [r3, #8]
   17e30:	e9c3 3300 	strd	r3, r3, [r3]
}
   17e34:	4770      	bx	lr

00017e36 <queue_insert>:
{
   17e36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17e3a:	4699      	mov	r9, r3
   17e3c:	4604      	mov	r4, r0
   17e3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   17e42:	460d      	mov	r5, r1
   17e44:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17e46:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   17e4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   17e4e:	f3ef 8711 	mrs	r7, BASEPRI
   17e52:	f382 8812 	msr	BASEPRI_MAX, r2
   17e56:	f3bf 8f6f 	isb	sy
	if (is_append) {
   17e5a:	b103      	cbz	r3, 17e5e <queue_insert+0x28>
	return list->tail;
   17e5c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   17e5e:	4630      	mov	r0, r6
   17e60:	f000 f9f5 	bl	1824e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   17e64:	b158      	cbz	r0, 17e7e <queue_insert+0x48>
   17e66:	2300      	movs	r3, #0
   17e68:	67c3      	str	r3, [r0, #124]	; 0x7c
   17e6a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   17e6e:	f000 f98f 	bl	18190 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   17e72:	4630      	mov	r0, r6
   17e74:	4639      	mov	r1, r7
   17e76:	f7fb f885 	bl	12f84 <z_reschedule>
		return 0;
   17e7a:	2000      	movs	r0, #0
   17e7c:	e00c      	b.n	17e98 <queue_insert+0x62>
	if (alloc) {
   17e7e:	f1b9 0f00 	cmp.w	r9, #0
   17e82:	d01b      	beq.n	17ebc <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   17e84:	2108      	movs	r1, #8
   17e86:	f7fb fcab 	bl	137e0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   17e8a:	b938      	cbnz	r0, 17e9c <queue_insert+0x66>
	__asm__ volatile(
   17e8c:	f387 8811 	msr	BASEPRI, r7
   17e90:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   17e94:	f06f 000b 	mvn.w	r0, #11
}
   17e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   17e9c:	2201      	movs	r2, #1
		anode->data = data;
   17e9e:	f8c0 8004 	str.w	r8, [r0, #4]
   17ea2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17ea4:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ea6:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   17eaa:	b95d      	cbnz	r5, 17ec4 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17eac:	6822      	ldr	r2, [r4, #0]
   17eae:	430a      	orrs	r2, r1
   17eb0:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17eb2:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   17eb4:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17eb6:	b96a      	cbnz	r2, 17ed4 <queue_insert+0x9e>
	list->tail = node;
   17eb8:	6060      	str	r0, [r4, #4]
}
   17eba:	e00b      	b.n	17ed4 <queue_insert+0x9e>
	node->next_and_flags = flags;
   17ebc:	f8c8 9000 	str.w	r9, [r8]
}
   17ec0:	4640      	mov	r0, r8
   17ec2:	e7ef      	b.n	17ea4 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17ec4:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   17ec6:	2a03      	cmp	r2, #3
   17ec8:	d810      	bhi.n	17eec <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17eca:	6001      	str	r1, [r0, #0]
	return list->tail;
   17ecc:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   17ece:	b939      	cbnz	r1, 17ee0 <queue_insert+0xaa>
	list->head = node;
   17ed0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   17ed4:	2104      	movs	r1, #4
   17ed6:	f104 0010 	add.w	r0, r4, #16
   17eda:	f000 fbe1 	bl	186a0 <z_handle_obj_poll_events>
   17ede:	e7c8      	b.n	17e72 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17ee0:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ee2:	f002 0203 	and.w	r2, r2, #3
   17ee6:	4302      	orrs	r2, r0
   17ee8:	600a      	str	r2, [r1, #0]
   17eea:	e7e5      	b.n	17eb8 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17eec:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ef0:	430a      	orrs	r2, r1
   17ef2:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17ef4:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17ef6:	f002 0203 	and.w	r2, r2, #3
   17efa:	ea40 0302 	orr.w	r3, r0, r2
   17efe:	602b      	str	r3, [r5, #0]
}
   17f00:	e7e8      	b.n	17ed4 <queue_insert+0x9e>

00017f02 <z_queue_node_peek>:
{
   17f02:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   17f04:	4604      	mov	r4, r0
   17f06:	b130      	cbz	r0, 17f16 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17f08:	6802      	ldr	r2, [r0, #0]
   17f0a:	0793      	lsls	r3, r2, #30
   17f0c:	d003      	beq.n	17f16 <z_queue_node_peek+0x14>
		ret = anode->data;
   17f0e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   17f10:	b109      	cbz	r1, 17f16 <z_queue_node_peek+0x14>
			k_free(anode);
   17f12:	f000 fbd3 	bl	186bc <k_free>
}
   17f16:	4620      	mov	r0, r4
   17f18:	bd10      	pop	{r4, pc}

00017f1a <z_impl_k_queue_init>:
	list->head = NULL;
   17f1a:	2300      	movs	r3, #0
	list->tail = NULL;
   17f1c:	e9c0 3300 	strd	r3, r3, [r0]
   17f20:	f100 0308 	add.w	r3, r0, #8
   17f24:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   17f28:	f100 0310 	add.w	r3, r0, #16
   17f2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   17f30:	4770      	bx	lr

00017f32 <k_queue_append>:
{
   17f32:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   17f34:	2301      	movs	r3, #1
   17f36:	9300      	str	r3, [sp, #0]
   17f38:	2300      	movs	r3, #0
{
   17f3a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   17f3c:	4619      	mov	r1, r3
   17f3e:	f7ff ff7a 	bl	17e36 <queue_insert>
}
   17f42:	b003      	add	sp, #12
   17f44:	f85d fb04 	ldr.w	pc, [sp], #4

00017f48 <k_queue_prepend>:
{
   17f48:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   17f4a:	2300      	movs	r3, #0
{
   17f4c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   17f4e:	9300      	str	r3, [sp, #0]
   17f50:	4619      	mov	r1, r3
   17f52:	f7ff ff70 	bl	17e36 <queue_insert>
}
   17f56:	b003      	add	sp, #12
   17f58:	f85d fb04 	ldr.w	pc, [sp], #4

00017f5c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   17f5c:	b15a      	cbz	r2, 17f76 <z_impl_k_sem_init+0x1a>
   17f5e:	428a      	cmp	r2, r1
   17f60:	d309      	bcc.n	17f76 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   17f62:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   17f66:	e9c0 1202 	strd	r1, r2, [r0, #8]
   17f6a:	e9c0 0000 	strd	r0, r0, [r0]
   17f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   17f72:	2000      	movs	r0, #0
   17f74:	4770      	bx	lr
		return -EINVAL;
   17f76:	f06f 0015 	mvn.w	r0, #21
}
   17f7a:	4770      	bx	lr

00017f7c <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   17f7c:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   17f7e:	2301      	movs	r3, #1
   17f80:	408b      	lsls	r3, r1
   17f82:	ea22 0303 	bic.w	r3, r2, r3
   17f86:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   17f88:	fa22 f001 	lsr.w	r0, r2, r1
}
   17f8c:	f000 0001 	and.w	r0, r0, #1
   17f90:	4770      	bx	lr

00017f92 <unschedule_locked>:
{
   17f92:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   17f94:	2103      	movs	r1, #3
{
   17f96:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   17f98:	300c      	adds	r0, #12
   17f9a:	f7ff ffef 	bl	17f7c <flag_test_and_clear>
   17f9e:	b130      	cbz	r0, 17fae <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   17fa0:	f104 0010 	add.w	r0, r4, #16
   17fa4:	f000 f9d0 	bl	18348 <z_abort_timeout>
   17fa8:	fab0 f080 	clz	r0, r0
   17fac:	0940      	lsrs	r0, r0, #5
}
   17fae:	bd10      	pop	{r4, pc}

00017fb0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   17fb0:	b120      	cbz	r0, 17fbc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   17fb2:	2200      	movs	r2, #0
   17fb4:	4611      	mov	r1, r2
   17fb6:	3088      	adds	r0, #136	; 0x88
   17fb8:	f000 b9a3 	b.w	18302 <z_sched_wake>
}
   17fbc:	4770      	bx	lr

00017fbe <cancel_async_locked>:
{
   17fbe:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   17fc0:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17fc2:	f3c3 0640 	ubfx	r6, r3, #1, #1
   17fc6:	079b      	lsls	r3, r3, #30
{
   17fc8:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   17fca:	d416      	bmi.n	17ffa <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   17fcc:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   17fce:	2102      	movs	r1, #2
   17fd0:	300c      	adds	r0, #12
   17fd2:	f7ff ffd3 	bl	17f7c <flag_test_and_clear>
   17fd6:	b180      	cbz	r0, 17ffa <cancel_async_locked+0x3c>
	return list->head;
   17fd8:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   17fdc:	b16a      	cbz	r2, 17ffa <cancel_async_locked+0x3c>
   17fde:	4294      	cmp	r4, r2
   17fe0:	d11d      	bne.n	1801e <cancel_async_locked+0x60>
	return node->next;
   17fe2:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   17fe4:	b99e      	cbnz	r6, 1800e <cancel_async_locked+0x50>
   17fe6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   17fea:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   17fee:	429c      	cmp	r4, r3
   17ff0:	d101      	bne.n	17ff6 <cancel_async_locked+0x38>
	list->tail = node;
   17ff2:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   17ff6:	2300      	movs	r3, #0
   17ff8:	6023      	str	r3, [r4, #0]
	return *flagp;
   17ffa:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   17ffc:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   18000:	bf1e      	ittt	ne
   18002:	f043 0302 	orrne.w	r3, r3, #2
   18006:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   18008:	f040 0002 	orrne.w	r0, r0, #2
}
   1800c:	bd70      	pop	{r4, r5, r6, pc}
   1800e:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   18010:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   18014:	4294      	cmp	r4, r2
	list->tail = node;
   18016:	bf08      	it	eq
   18018:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   1801c:	e7eb      	b.n	17ff6 <cancel_async_locked+0x38>
	return node->next;
   1801e:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18020:	6812      	ldr	r2, [r2, #0]
   18022:	e7db      	b.n	17fdc <cancel_async_locked+0x1e>

00018024 <work_timeout>:
{
   18024:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18026:	4604      	mov	r4, r0
	__asm__ volatile(
   18028:	f04f 0340 	mov.w	r3, #64	; 0x40
   1802c:	f3ef 8511 	mrs	r5, BASEPRI
   18030:	f383 8812 	msr	BASEPRI_MAX, r3
   18034:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   18038:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1803a:	f1a0 0610 	sub.w	r6, r0, #16
   1803e:	2103      	movs	r1, #3
   18040:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   18042:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   18044:	f7ff ff9a 	bl	17f7c <flag_test_and_clear>
   18048:	b128      	cbz	r0, 18056 <work_timeout+0x32>
		queue = dw->queue;
   1804a:	69a3      	ldr	r3, [r4, #24]
   1804c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1804e:	a901      	add	r1, sp, #4
   18050:	4630      	mov	r0, r6
   18052:	f7fa fcf5 	bl	12a40 <submit_to_queue_locked>
	__asm__ volatile(
   18056:	f385 8811 	msr	BASEPRI, r5
   1805a:	f3bf 8f6f 	isb	sy
}
   1805e:	b002      	add	sp, #8
   18060:	bd70      	pop	{r4, r5, r6, pc}

00018062 <k_work_init>:
{
   18062:	b538      	push	{r3, r4, r5, lr}
   18064:	4604      	mov	r4, r0
   18066:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   18068:	2210      	movs	r2, #16
   1806a:	2100      	movs	r1, #0
   1806c:	f7fe ff56 	bl	16f1c <memset>
   18070:	6065      	str	r5, [r4, #4]
}
   18072:	bd38      	pop	{r3, r4, r5, pc}

00018074 <z_work_submit_to_queue>:
{
   18074:	b513      	push	{r0, r1, r4, lr}
   18076:	9001      	str	r0, [sp, #4]
   18078:	4608      	mov	r0, r1
	__asm__ volatile(
   1807a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1807e:	f3ef 8411 	mrs	r4, BASEPRI
   18082:	f383 8812 	msr	BASEPRI_MAX, r3
   18086:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1808a:	a901      	add	r1, sp, #4
   1808c:	f7fa fcd8 	bl	12a40 <submit_to_queue_locked>
	__asm__ volatile(
   18090:	f384 8811 	msr	BASEPRI, r4
   18094:	f3bf 8f6f 	isb	sy
}
   18098:	b002      	add	sp, #8
   1809a:	bd10      	pop	{r4, pc}

0001809c <k_work_submit_to_queue>:
{
   1809c:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   1809e:	f7ff ffe9 	bl	18074 <z_work_submit_to_queue>
	if (ret > 0) {
   180a2:	1e04      	subs	r4, r0, #0
   180a4:	dd09      	ble.n	180ba <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   180a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   180aa:	f3ef 8011 	mrs	r0, BASEPRI
   180ae:	f383 8812 	msr	BASEPRI_MAX, r3
   180b2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   180b6:	f000 f8fe 	bl	182b6 <z_reschedule_irqlock>
}
   180ba:	4620      	mov	r0, r4
   180bc:	bd10      	pop	{r4, pc}

000180be <k_work_queue_init>:
{
   180be:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   180c0:	22a0      	movs	r2, #160	; 0xa0
   180c2:	2100      	movs	r1, #0
   180c4:	f7fe ff2a 	bl	16f1c <memset>
}
   180c8:	bd08      	pop	{r3, pc}

000180ca <k_work_init_delayable>:
{
   180ca:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   180cc:	2230      	movs	r2, #48	; 0x30
{
   180ce:	4604      	mov	r4, r0
   180d0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   180d2:	2100      	movs	r1, #0
   180d4:	f7fe ff22 	bl	16f1c <memset>
   180d8:	f44f 7380 	mov.w	r3, #256	; 0x100
   180dc:	6065      	str	r5, [r4, #4]
   180de:	60e3      	str	r3, [r4, #12]
}
   180e0:	bd38      	pop	{r3, r4, r5, pc}

000180e2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   180e2:	b538      	push	{r3, r4, r5, lr}
   180e4:	4604      	mov	r4, r0
   180e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   180ea:	f3ef 8511 	mrs	r5, BASEPRI
   180ee:	f383 8812 	msr	BASEPRI_MAX, r3
   180f2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   180f6:	f7ff ff4c 	bl	17f92 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   180fa:	4620      	mov	r0, r4
   180fc:	f7ff ff5f 	bl	17fbe <cancel_async_locked>
	__asm__ volatile(
   18100:	f385 8811 	msr	BASEPRI, r5
   18104:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   18108:	bd38      	pop	{r3, r4, r5, pc}

0001810a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1810a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1810e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18110:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18112:	2300      	movs	r3, #0
	node->prev = NULL;
   18114:	e9c0 3300 	strd	r3, r3, [r0]
}
   18118:	4770      	bx	lr

0001811a <unpend_thread_no_timeout>:
{
   1811a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1811c:	f7ff fff5 	bl	1810a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18120:	7b43      	ldrb	r3, [r0, #13]
   18122:	f023 0302 	bic.w	r3, r3, #2
   18126:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   18128:	2300      	movs	r3, #0
   1812a:	6083      	str	r3, [r0, #8]
}
   1812c:	bd08      	pop	{r3, pc}

0001812e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1812e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   18132:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   18136:	4283      	cmp	r3, r0
		return b2 - b1;
   18138:	bf14      	ite	ne
   1813a:	1ac0      	subne	r0, r0, r3
	return 0;
   1813c:	2000      	moveq	r0, #0
}
   1813e:	4770      	bx	lr

00018140 <add_to_waitq_locked>:
{
   18140:	b538      	push	{r3, r4, r5, lr}
   18142:	4604      	mov	r4, r0
   18144:	460d      	mov	r5, r1
	unready_thread(thread);
   18146:	f7fa fe59 	bl	12dfc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1814a:	7b63      	ldrb	r3, [r4, #13]
   1814c:	f043 0302 	orr.w	r3, r3, #2
   18150:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18152:	b1e5      	cbz	r5, 1818e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   18154:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   18156:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18158:	429d      	cmp	r5, r3
   1815a:	d109      	bne.n	18170 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   1815c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1815e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   18162:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18164:	606c      	str	r4, [r5, #4]
}
   18166:	e012      	b.n	1818e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   18168:	686a      	ldr	r2, [r5, #4]
   1816a:	4293      	cmp	r3, r2
   1816c:	d0f6      	beq.n	1815c <add_to_waitq_locked+0x1c>
   1816e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18170:	2b00      	cmp	r3, #0
   18172:	d0f3      	beq.n	1815c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   18174:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   18178:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1817c:	428a      	cmp	r2, r1
   1817e:	d0f3      	beq.n	18168 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   18180:	4291      	cmp	r1, r2
   18182:	ddf1      	ble.n	18168 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   18184:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18186:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1818a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1818c:	605c      	str	r4, [r3, #4]
}
   1818e:	bd38      	pop	{r3, r4, r5, pc}

00018190 <z_ready_thread>:
{
   18190:	b510      	push	{r4, lr}
	__asm__ volatile(
   18192:	f04f 0340 	mov.w	r3, #64	; 0x40
   18196:	f3ef 8411 	mrs	r4, BASEPRI
   1819a:	f383 8812 	msr	BASEPRI_MAX, r3
   1819e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   181a2:	f7fa fdf7 	bl	12d94 <ready_thread>
	__asm__ volatile(
   181a6:	f384 8811 	msr	BASEPRI, r4
   181aa:	f3bf 8f6f 	isb	sy
}
   181ae:	bd10      	pop	{r4, pc}

000181b0 <z_unpend_thread_no_timeout>:
{
   181b0:	b508      	push	{r3, lr}
	__asm__ volatile(
   181b2:	f04f 0240 	mov.w	r2, #64	; 0x40
   181b6:	f3ef 8111 	mrs	r1, BASEPRI
   181ba:	f382 8812 	msr	BASEPRI_MAX, r2
   181be:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   181c2:	6883      	ldr	r3, [r0, #8]
   181c4:	b10b      	cbz	r3, 181ca <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   181c6:	f7ff ffa8 	bl	1811a <unpend_thread_no_timeout>
	__asm__ volatile(
   181ca:	f381 8811 	msr	BASEPRI, r1
   181ce:	f3bf 8f6f 	isb	sy
}
   181d2:	bd08      	pop	{r3, pc}

000181d4 <z_sched_wake_thread>:
{
   181d4:	b538      	push	{r3, r4, r5, lr}
   181d6:	4604      	mov	r4, r0
	__asm__ volatile(
   181d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   181dc:	f3ef 8511 	mrs	r5, BASEPRI
   181e0:	f383 8812 	msr	BASEPRI_MAX, r3
   181e4:	f3bf 8f6f 	isb	sy
		if (!killed) {
   181e8:	7b43      	ldrb	r3, [r0, #13]
   181ea:	f013 0f28 	tst.w	r3, #40	; 0x28
   181ee:	d10b      	bne.n	18208 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   181f0:	6883      	ldr	r3, [r0, #8]
   181f2:	b10b      	cbz	r3, 181f8 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   181f4:	f7ff ff91 	bl	1811a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   181f8:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   181fa:	b951      	cbnz	r1, 18212 <z_sched_wake_thread+0x3e>
   181fc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   18200:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   18202:	4620      	mov	r0, r4
   18204:	f7fa fdc6 	bl	12d94 <ready_thread>
	__asm__ volatile(
   18208:	f385 8811 	msr	BASEPRI, r5
   1820c:	f3bf 8f6f 	isb	sy
}
   18210:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18212:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   18216:	e7f3      	b.n	18200 <z_sched_wake_thread+0x2c>

00018218 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   18218:	2101      	movs	r1, #1
   1821a:	3818      	subs	r0, #24
   1821c:	f7ff bfda 	b.w	181d4 <z_sched_wake_thread>

00018220 <z_unpend1_no_timeout>:
{
   18220:	b508      	push	{r3, lr}
   18222:	4603      	mov	r3, r0
	__asm__ volatile(
   18224:	f04f 0240 	mov.w	r2, #64	; 0x40
   18228:	f3ef 8111 	mrs	r1, BASEPRI
   1822c:	f382 8812 	msr	BASEPRI_MAX, r2
   18230:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18234:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18236:	4283      	cmp	r3, r0
   18238:	d007      	beq.n	1824a <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   1823a:	b108      	cbz	r0, 18240 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   1823c:	f7ff ff6d 	bl	1811a <unpend_thread_no_timeout>
	__asm__ volatile(
   18240:	f381 8811 	msr	BASEPRI, r1
   18244:	f3bf 8f6f 	isb	sy
}
   18248:	bd08      	pop	{r3, pc}
   1824a:	2000      	movs	r0, #0
   1824c:	e7f8      	b.n	18240 <z_unpend1_no_timeout+0x20>

0001824e <z_unpend_first_thread>:
{
   1824e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18250:	f04f 0340 	mov.w	r3, #64	; 0x40
   18254:	f3ef 8511 	mrs	r5, BASEPRI
   18258:	f383 8812 	msr	BASEPRI_MAX, r3
   1825c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18260:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18262:	42a0      	cmp	r0, r4
   18264:	d00d      	beq.n	18282 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   18266:	b134      	cbz	r4, 18276 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   18268:	4620      	mov	r0, r4
   1826a:	f7ff ff56 	bl	1811a <unpend_thread_no_timeout>
   1826e:	f104 0018 	add.w	r0, r4, #24
   18272:	f000 f869 	bl	18348 <z_abort_timeout>
	__asm__ volatile(
   18276:	f385 8811 	msr	BASEPRI, r5
   1827a:	f3bf 8f6f 	isb	sy
}
   1827e:	4620      	mov	r0, r4
   18280:	bd38      	pop	{r3, r4, r5, pc}
   18282:	2400      	movs	r4, #0
   18284:	e7f7      	b.n	18276 <z_unpend_first_thread+0x28>

00018286 <z_unpend_thread>:
{
   18286:	b510      	push	{r4, lr}
   18288:	4601      	mov	r1, r0
	__asm__ volatile(
   1828a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1828e:	f3ef 8411 	mrs	r4, BASEPRI
   18292:	f383 8812 	msr	BASEPRI_MAX, r3
   18296:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1829a:	6883      	ldr	r3, [r0, #8]
   1829c:	b10b      	cbz	r3, 182a2 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   1829e:	f7ff ff3c 	bl	1811a <unpend_thread_no_timeout>
	__asm__ volatile(
   182a2:	f384 8811 	msr	BASEPRI, r4
   182a6:	f3bf 8f6f 	isb	sy
}
   182aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   182ae:	f101 0018 	add.w	r0, r1, #24
   182b2:	f000 b849 	b.w	18348 <z_abort_timeout>

000182b6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   182b6:	4603      	mov	r3, r0
   182b8:	b920      	cbnz	r0, 182c4 <z_reschedule_irqlock+0xe>
   182ba:	f3ef 8205 	mrs	r2, IPSR
   182be:	b90a      	cbnz	r2, 182c4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   182c0:	f7f4 bafe 	b.w	c8c0 <arch_swap>
   182c4:	f383 8811 	msr	BASEPRI, r3
   182c8:	f3bf 8f6f 	isb	sy
}
   182cc:	4770      	bx	lr

000182ce <z_reschedule_unlocked>:
	__asm__ volatile(
   182ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   182d2:	f3ef 8011 	mrs	r0, BASEPRI
   182d6:	f383 8812 	msr	BASEPRI_MAX, r3
   182da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   182de:	f7ff bfea 	b.w	182b6 <z_reschedule_irqlock>

000182e2 <z_unpend_all>:
{
   182e2:	b538      	push	{r3, r4, r5, lr}
   182e4:	4605      	mov	r5, r0
	int need_sched = 0;
   182e6:	2000      	movs	r0, #0
	return list->head == list;
   182e8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   182ea:	42a5      	cmp	r5, r4
   182ec:	d000      	beq.n	182f0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   182ee:	b904      	cbnz	r4, 182f2 <z_unpend_all+0x10>
}
   182f0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   182f2:	4620      	mov	r0, r4
   182f4:	f7ff ffc7 	bl	18286 <z_unpend_thread>
		z_ready_thread(thread);
   182f8:	4620      	mov	r0, r4
   182fa:	f7ff ff49 	bl	18190 <z_ready_thread>
		need_sched = 1;
   182fe:	2001      	movs	r0, #1
   18300:	e7f2      	b.n	182e8 <z_unpend_all+0x6>

00018302 <z_sched_wake>:
{
   18302:	b538      	push	{r3, r4, r5, lr}
   18304:	f04f 0340 	mov.w	r3, #64	; 0x40
   18308:	f3ef 8511 	mrs	r5, BASEPRI
   1830c:	f383 8812 	msr	BASEPRI_MAX, r3
   18310:	f3bf 8f6f 	isb	sy
	return list->head == list;
   18314:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18316:	42a0      	cmp	r0, r4
   18318:	d012      	beq.n	18340 <z_sched_wake+0x3e>
		if (thread != NULL) {
   1831a:	b19c      	cbz	r4, 18344 <z_sched_wake+0x42>
   1831c:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   1831e:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   18320:	4620      	mov	r0, r4
   18322:	f7ff fefa 	bl	1811a <unpend_thread_no_timeout>
   18326:	f104 0018 	add.w	r0, r4, #24
   1832a:	f000 f80d 	bl	18348 <z_abort_timeout>
			ready_thread(thread);
   1832e:	4620      	mov	r0, r4
   18330:	f7fa fd30 	bl	12d94 <ready_thread>
			ret = true;
   18334:	2001      	movs	r0, #1
	__asm__ volatile(
   18336:	f385 8811 	msr	BASEPRI, r5
   1833a:	f3bf 8f6f 	isb	sy
}
   1833e:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   18340:	2000      	movs	r0, #0
   18342:	e7f8      	b.n	18336 <z_sched_wake+0x34>
   18344:	4620      	mov	r0, r4
   18346:	e7f6      	b.n	18336 <z_sched_wake+0x34>

00018348 <z_abort_timeout>:
{
   18348:	b510      	push	{r4, lr}
	__asm__ volatile(
   1834a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1834e:	f3ef 8411 	mrs	r4, BASEPRI
   18352:	f382 8812 	msr	BASEPRI_MAX, r2
   18356:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1835a:	6803      	ldr	r3, [r0, #0]
   1835c:	b13b      	cbz	r3, 1836e <z_abort_timeout+0x26>
			remove_timeout(to);
   1835e:	f7fb f803 	bl	13368 <remove_timeout>
			ret = 0;
   18362:	2000      	movs	r0, #0
	__asm__ volatile(
   18364:	f384 8811 	msr	BASEPRI, r4
   18368:	f3bf 8f6f 	isb	sy
}
   1836c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1836e:	f06f 0015 	mvn.w	r0, #21
   18372:	e7f7      	b.n	18364 <z_abort_timeout+0x1c>

00018374 <z_get_next_timeout_expiry>:
{
   18374:	b510      	push	{r4, lr}
	__asm__ volatile(
   18376:	f04f 0340 	mov.w	r3, #64	; 0x40
   1837a:	f3ef 8411 	mrs	r4, BASEPRI
   1837e:	f383 8812 	msr	BASEPRI_MAX, r3
   18382:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   18386:	f7fa ffcf 	bl	13328 <next_timeout>
	__asm__ volatile(
   1838a:	f384 8811 	msr	BASEPRI, r4
   1838e:	f3bf 8f6f 	isb	sy
}
   18392:	bd10      	pop	{r4, pc}

00018394 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   18394:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   18396:	f7fb f8e3 	bl	13560 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1839a:	bd08      	pop	{r3, pc}

0001839c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1839c:	f7fb b8e0 	b.w	13560 <sys_clock_tick_get>

000183a0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   183a0:	b108      	cbz	r0, 183a6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   183a2:	f7f5 b823 	b.w	d3ec <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   183a6:	4770      	bx	lr

000183a8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   183a8:	f1b1 3fff 	cmp.w	r1, #4294967295
   183ac:	bf08      	it	eq
   183ae:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   183b2:	b538      	push	{r3, r4, r5, lr}
   183b4:	460c      	mov	r4, r1
   183b6:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   183b8:	d014      	beq.n	183e4 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   183ba:	4308      	orrs	r0, r1
   183bc:	d103      	bne.n	183c6 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   183be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   183c2:	f7fb b8cd 	b.w	13560 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   183c6:	f06f 0001 	mvn.w	r0, #1
   183ca:	1b40      	subs	r0, r0, r5
   183cc:	f04f 33ff 	mov.w	r3, #4294967295
   183d0:	eb63 0101 	sbc.w	r1, r3, r1
   183d4:	2900      	cmp	r1, #0
   183d6:	da04      	bge.n	183e2 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   183d8:	f7fb f8c2 	bl	13560 <sys_clock_tick_get>
   183dc:	1940      	adds	r0, r0, r5
   183de:	eb41 0104 	adc.w	r1, r1, r4
}
   183e2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   183e4:	f04f 30ff 	mov.w	r0, #4294967295
   183e8:	4601      	mov	r1, r0
   183ea:	e7fa      	b.n	183e2 <sys_clock_timeout_end_calc+0x3a>

000183ec <k_timer_init>:
	timer->status = 0U;
   183ec:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   183ee:	e9c0 1208 	strd	r1, r2, [r0, #32]
   183f2:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   183f6:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   183fa:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   183fe:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   18400:	6343      	str	r3, [r0, #52]	; 0x34
}
   18402:	4770      	bx	lr

00018404 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   18404:	b510      	push	{r4, lr}
   18406:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   18408:	f7ff ff9e 	bl	18348 <z_abort_timeout>

	if (inactive) {
   1840c:	b9b0      	cbnz	r0, 1843c <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   1840e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18410:	b10b      	cbz	r3, 18416 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   18412:	4620      	mov	r0, r4
   18414:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   18416:	f104 0018 	add.w	r0, r4, #24
   1841a:	f7ff ff01 	bl	18220 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   1841e:	b168      	cbz	r0, 1843c <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   18420:	f7ff feb6 	bl	18190 <z_ready_thread>
	__asm__ volatile(
   18424:	f04f 0340 	mov.w	r3, #64	; 0x40
   18428:	f3ef 8011 	mrs	r0, BASEPRI
   1842c:	f383 8812 	msr	BASEPRI_MAX, r3
   18430:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   18434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18438:	f7ff bf3d 	b.w	182b6 <z_reschedule_irqlock>
   1843c:	bd10      	pop	{r4, pc}

0001843e <add_event>:
{
   1843e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18440:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   18442:	e9d0 1300 	ldrd	r1, r3, [r0]
   18446:	4288      	cmp	r0, r1
   18448:	4604      	mov	r4, r0
   1844a:	d105      	bne.n	18458 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   1844c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1844e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   18452:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18454:	6065      	str	r5, [r4, #4]
   18456:	e01d      	b.n	18494 <add_event+0x56>
	if ((pending == NULL) ||
   18458:	2b00      	cmp	r3, #0
   1845a:	d0f7      	beq.n	1844c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1845c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1845e:	b100      	cbz	r0, 18462 <add_event+0x24>
   18460:	3860      	subs	r0, #96	; 0x60
   18462:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   18466:	4639      	mov	r1, r7
   18468:	f7ff fe61 	bl	1812e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1846c:	2800      	cmp	r0, #0
   1846e:	dced      	bgt.n	1844c <add_event+0xe>
	return list->head == list;
   18470:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18472:	42b4      	cmp	r4, r6
   18474:	d0ea      	beq.n	1844c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   18476:	2e00      	cmp	r6, #0
   18478:	d0e8      	beq.n	1844c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1847a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1847c:	b101      	cbz	r1, 18480 <add_event+0x42>
   1847e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   18480:	4638      	mov	r0, r7
   18482:	f7ff fe54 	bl	1812e <z_sched_prio_cmp>
   18486:	2800      	cmp	r0, #0
   18488:	dd05      	ble.n	18496 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   1848a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1848c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   18490:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   18492:	6075      	str	r5, [r6, #4]
}
   18494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18496:	6863      	ldr	r3, [r4, #4]
   18498:	429e      	cmp	r6, r3
   1849a:	d0d7      	beq.n	1844c <add_event+0xe>
   1849c:	6836      	ldr	r6, [r6, #0]
   1849e:	e7ea      	b.n	18476 <add_event+0x38>

000184a0 <register_events>:
{
   184a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   184a4:	2500      	movs	r5, #0
{
   184a6:	468b      	mov	fp, r1
   184a8:	4614      	mov	r4, r2
   184aa:	461f      	mov	r7, r3
   184ac:	4682      	mov	sl, r0
	int events_registered = 0;
   184ae:	462e      	mov	r6, r5
	event->poller = NULL;
   184b0:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   184b2:	455d      	cmp	r5, fp
   184b4:	db02      	blt.n	184bc <register_events+0x1c>
}
   184b6:	4630      	mov	r0, r6
   184b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   184c0:	f3ef 8911 	mrs	r9, BASEPRI
   184c4:	f383 8812 	msr	BASEPRI_MAX, r3
   184c8:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   184cc:	f89a 300d 	ldrb.w	r3, [sl, #13]
   184d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   184d4:	3b01      	subs	r3, #1
   184d6:	2b07      	cmp	r3, #7
   184d8:	d80f      	bhi.n	184fa <register_events+0x5a>
   184da:	e8df f003 	tbb	[pc, r3]
   184de:	041e      	.short	0x041e
   184e0:	0e0e0a0e 	.word	0x0e0e0a0e
   184e4:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   184e6:	f8da 3010 	ldr.w	r3, [sl, #16]
   184ea:	689b      	ldr	r3, [r3, #8]
   184ec:	b12b      	cbz	r3, 184fa <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   184ee:	2302      	movs	r3, #2
   184f0:	e020      	b.n	18534 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   184f2:	f8da 3010 	ldr.w	r3, [sl, #16]
   184f6:	681b      	ldr	r3, [r3, #0]
   184f8:	bb8b      	cbnz	r3, 1855e <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   184fa:	bb47      	cbnz	r7, 1854e <register_events+0xae>
   184fc:	7823      	ldrb	r3, [r4, #0]
   184fe:	b333      	cbz	r3, 1854e <register_events+0xae>
	switch (event->type) {
   18500:	f89a 300d 	ldrb.w	r3, [sl, #13]
   18504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18508:	3b01      	subs	r3, #1
   1850a:	2b07      	cmp	r3, #7
   1850c:	d830      	bhi.n	18570 <register_events+0xd0>
   1850e:	e8df f003 	tbb	[pc, r3]
   18512:	2833      	.short	0x2833
   18514:	2f2f282f 	.word	0x2f2f282f
   18518:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1851a:	f8da 3010 	ldr.w	r3, [sl, #16]
   1851e:	689b      	ldr	r3, [r3, #8]
   18520:	2b00      	cmp	r3, #0
   18522:	d0ea      	beq.n	184fa <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   18524:	2301      	movs	r3, #1
   18526:	e005      	b.n	18534 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   18528:	f8da 3010 	ldr.w	r3, [sl, #16]
   1852c:	6a1b      	ldr	r3, [r3, #32]
   1852e:	2b00      	cmp	r3, #0
   18530:	d0e3      	beq.n	184fa <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   18532:	2310      	movs	r3, #16
	event->state |= state;
   18534:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   18538:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1853c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   18540:	430b      	orrs	r3, r1
   18542:	f363 3294 	bfi	r2, r3, #14, #7
   18546:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1854a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1854e:	f389 8811 	msr	BASEPRI, r9
   18552:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   18556:	3501      	adds	r5, #1
   18558:	f10a 0a14 	add.w	sl, sl, #20
   1855c:	e7a9      	b.n	184b2 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1855e:	2304      	movs	r3, #4
   18560:	e7e8      	b.n	18534 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   18562:	f8da 0010 	ldr.w	r0, [sl, #16]
   18566:	4622      	mov	r2, r4
   18568:	4651      	mov	r1, sl
   1856a:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1856c:	f7ff ff67 	bl	1843e <add_event>
	event->poller = poller;
   18570:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   18574:	3601      	adds	r6, #1
   18576:	e7ea      	b.n	1854e <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   18578:	f8da 0010 	ldr.w	r0, [sl, #16]
   1857c:	4622      	mov	r2, r4
   1857e:	4651      	mov	r1, sl
   18580:	e7f4      	b.n	1856c <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   18582:	f8da 0010 	ldr.w	r0, [sl, #16]
   18586:	4622      	mov	r2, r4
   18588:	4651      	mov	r1, sl
   1858a:	3024      	adds	r0, #36	; 0x24
   1858c:	e7ee      	b.n	1856c <register_events+0xcc>

0001858e <signal_poll_event>:
{
   1858e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   18592:	6884      	ldr	r4, [r0, #8]
{
   18594:	4605      	mov	r5, r0
   18596:	460e      	mov	r6, r1
	if (poller != NULL) {
   18598:	b144      	cbz	r4, 185ac <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1859a:	7863      	ldrb	r3, [r4, #1]
   1859c:	2b01      	cmp	r3, #1
   1859e:	d12e      	bne.n	185fe <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   185a0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   185a4:	f013 0302 	ands.w	r3, r3, #2
   185a8:	d10a      	bne.n	185c0 <signal_poll_event+0x32>
		poller->is_polling = false;
   185aa:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   185ac:	68eb      	ldr	r3, [r5, #12]
   185ae:	f3c3 3286 	ubfx	r2, r3, #14, #7
   185b2:	4316      	orrs	r6, r2
	event->poller = NULL;
   185b4:	2000      	movs	r0, #0
	event->state |= state;
   185b6:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   185ba:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   185bc:	60eb      	str	r3, [r5, #12]
	return retcode;
   185be:	e03e      	b.n	1863e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   185c0:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   185c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   185c8:	bf08      	it	eq
   185ca:	f112 0f02 	cmneq.w	r2, #2
   185ce:	d032      	beq.n	18636 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   185d0:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   185d4:	4640      	mov	r0, r8
   185d6:	f7ff fe56 	bl	18286 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   185da:	2e08      	cmp	r6, #8
   185dc:	bf0c      	ite	eq
   185de:	f06f 0303 	mvneq.w	r3, #3
   185e2:	2300      	movne	r3, #0
   185e4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   185e6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   185ea:	06db      	lsls	r3, r3, #27
   185ec:	d109      	bne.n	18602 <signal_poll_event+0x74>
   185ee:	f854 7c48 	ldr.w	r7, [r4, #-72]
   185f2:	b937      	cbnz	r7, 18602 <signal_poll_event+0x74>
	z_ready_thread(thread);
   185f4:	4640      	mov	r0, r8
   185f6:	f7ff fdcb 	bl	18190 <z_ready_thread>
		poller->is_polling = false;
   185fa:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   185fc:	e7d6      	b.n	185ac <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   185fe:	2b02      	cmp	r3, #2
   18600:	d001      	beq.n	18606 <signal_poll_event+0x78>
		poller->is_polling = false;
   18602:	2300      	movs	r3, #0
   18604:	e7d1      	b.n	185aa <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   18606:	7823      	ldrb	r3, [r4, #0]
   18608:	2b00      	cmp	r3, #0
   1860a:	d0cf      	beq.n	185ac <signal_poll_event+0x1e>
   1860c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   18610:	2f00      	cmp	r7, #0
   18612:	d0f2      	beq.n	185fa <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   18614:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   18618:	f1a4 0914 	sub.w	r9, r4, #20
   1861c:	f104 0014 	add.w	r0, r4, #20
   18620:	f7ff fe92 	bl	18348 <z_abort_timeout>
		twork->poll_result = 0;
   18624:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   18628:	4649      	mov	r1, r9
   1862a:	4638      	mov	r0, r7
   1862c:	f7ff fd22 	bl	18074 <z_work_submit_to_queue>
		poller->is_polling = false;
   18630:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   18634:	e7ba      	b.n	185ac <signal_poll_event+0x1e>
		poller->is_polling = false;
   18636:	2300      	movs	r3, #0
   18638:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1863a:	f06f 000a 	mvn.w	r0, #10
}
   1863e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018642 <clear_event_registrations>:
	while (num_events--) {
   18642:	2314      	movs	r3, #20
{
   18644:	b5f0      	push	{r4, r5, r6, r7, lr}
   18646:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1864a:	2400      	movs	r4, #0
	switch (event->type) {
   1864c:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   18650:	b901      	cbnz	r1, 18654 <clear_event_registrations+0x12>
}
   18652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   18654:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   18658:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1865c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18660:	2b08      	cmp	r3, #8
   18662:	f1a0 0714 	sub.w	r7, r0, #20
   18666:	d80c      	bhi.n	18682 <clear_event_registrations+0x40>
   18668:	fa26 f303 	lsr.w	r3, r6, r3
   1866c:	07db      	lsls	r3, r3, #31
   1866e:	d508      	bpl.n	18682 <clear_event_registrations+0x40>
	return node->next != NULL;
   18670:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   18674:	b12b      	cbz	r3, 18682 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   18676:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1867a:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1867c:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1867e:	e940 4405 	strd	r4, r4, [r0, #-20]
   18682:	f382 8811 	msr	BASEPRI, r2
   18686:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1868a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1868e:	f3ef 8211 	mrs	r2, BASEPRI
   18692:	f383 8812 	msr	BASEPRI_MAX, r3
   18696:	f3bf 8f6f 	isb	sy
   1869a:	3901      	subs	r1, #1
   1869c:	4638      	mov	r0, r7
   1869e:	e7d7      	b.n	18650 <clear_event_registrations+0xe>

000186a0 <z_handle_obj_poll_events>:
{
   186a0:	4603      	mov	r3, r0
	return list->head == list;
   186a2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   186a4:	4283      	cmp	r3, r0
   186a6:	d008      	beq.n	186ba <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   186a8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   186ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   186ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   186b0:	2300      	movs	r3, #0
	node->prev = NULL;
   186b2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   186b6:	f7ff bf6a 	b.w	1858e <signal_poll_event>
}
   186ba:	4770      	bx	lr

000186bc <k_free>:
	if (ptr != NULL) {
   186bc:	b120      	cbz	r0, 186c8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   186be:	1f01      	subs	r1, r0, #4
   186c0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   186c4:	f7ff bb2a 	b.w	17d1c <k_heap_free>
}
   186c8:	4770      	bx	lr

000186ca <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   186ca:	bf00      	nop
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();

	return 0;
}
   186cc:	2000      	movs	r0, #0
   186ce:	4770      	bx	lr

000186d0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   186d0:	4770      	bx	lr
	...
