
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 59 00 20 d9 bb 00 00 cd 55 01 00 ad bb 00 00     .Y. .....U......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	ad bb 00 00 ad bb 00 00 ad bb 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	15 b8 00 00 ad bb 00 00 00 00 00 00 c1 b7 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	ad bb 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	c5 b8 00 00 81 64 01 00 c5 b8 00 00 c5 b8 00 00     .....d..........
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	2f 64 01 00 c5 b8 00 00 c5 b8 00 00 67 64 01 00     /d..........gd..
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
			switch (*fmt) {
  c0:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
  d0:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
  e0:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................
  f0:	c5 b8 00 00 c5 b8 00 00 c5 b8 00 00 c5 b8 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     120:	f007 ffcc 	bl	80bc <__udivmoddi4>
			switch (*fmt) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop
     134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     136:	4c14      	ldr	r4, [pc, #80]	; (188 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1b>)
     138:	7a20      	ldrb	r0, [r4, #8]
     13a:	f88d 0001 	strb.w	r0, [sp, #1]
     13e:	79e0      	ldrb	r0, [r4, #7]
     140:	f88d 0000 	strb.w	r0, [sp]
		buf = (void *) ROUND_UP(buf, align);
     144:	79a0      	ldrb	r0, [r4, #6]
     146:	f8ad 0004 	strh.w	r0, [sp, #4]
     14a:	7960      	ldrb	r0, [r4, #5]
     14c:	f8ad 0002 	strh.w	r0, [sp, #2]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	4668      	mov	r0, sp
     152:	f003 f839 	bl	31c8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     156:	b108      	cbz	r0, 15c <CONFIG_IDLE_STACK_SIZE+0x1c>
     158:	21ad      	movs	r1, #173	; 0xad
     15a:	e010      	b.n	17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>
     15c:	68e0      	ldr	r0, [r4, #12]
     15e:	9002      	str	r0, [sp, #8]
		if (is_str_arg) {
     160:	a802      	add	r0, sp, #8
     162:	f003 f847 	bl	31f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     166:	b108      	cbz	r0, 16c <CONFIG_IDLE_STACK_SIZE+0x2c>
			int v = va_arg(ap, int);
     168:	21b1      	movs	r1, #177	; 0xb1
     16a:	e008      	b.n	17e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11>

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	4807      	ldr	r0, [pc, #28]	; (18c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f>)
			}
			buf += sizeof(int);
     16e:	6800      	ldr	r0, [r0, #0]
     170:	9003      	str	r0, [sp, #12]
     172:	a803      	add	r0, sp, #12
				arg_idx--;
     174:	f009 fc24 	bl	99c0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     178:	2800      	cmp	r0, #0
				parsing = false;
     17a:	d003      	beq.n	184 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17>
     17c:	21b5      	movs	r1, #181	; 0xb5
				continue;
     17e:	2003      	movs	r0, #3
				if (fmt[-1] == 'l') {
     180:	f000 f91a 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     184:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     186:	0000      	.short	0x0000
					if (fmt[-2] == 'l') {
     188:	20000d88 	.word	0x20000d88
     18c:	00000444 	.word	0x00000444
				parsing = false;
     190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
						align = VA_STACK_ALIGN(long long);
     194:	4f16      	ldr	r7, [pc, #88]	; (1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>)
     196:	4604      	mov	r4, r0
				size = sizeof(void *);
     198:	4616      	mov	r6, r2
     19a:	78f8      	ldrb	r0, [r7, #3]
					v.ld = va_arg(ap, long double);
     19c:	460d      	mov	r5, r1
     19e:	b178      	cbz	r0, 1c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x53>
     1a0:	7c28      	ldrb	r0, [r5, #16]
     1a2:	b168      	cbz	r0, 1c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x53>
				buf = (void *) ROUND_UP(buf, align);
     1a4:	6820      	ldr	r0, [r4, #0]
					v.ld = va_arg(ap, long double);
     1a6:	2225      	movs	r2, #37	; 0x25
     1a8:	1cc0      	adds	r0, r0, #3
				buf = (void *) ROUND_UP(buf, align);
     1aa:	f020 0003 	bic.w	r0, r0, #3
				if (buf0 != NULL) {
     1ae:	6020      	str	r0, [r4, #0]
					if (BUF_OFFSET + size > len) {
     1b0:	7c29      	ldrb	r1, [r5, #16]
     1b2:	b106      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1b4:	2000      	movs	r0, #0
     1b6:	f000 fcbf 	bl	b38 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
						*(long double *)buf = v.ld;
     1ba:	6821      	ldr	r1, [r4, #0]
     1bc:	4408      	add	r0, r1
				buf += size;
     1be:	6020      	str	r0, [r4, #0]
				parsing = false;
     1c0:	7d28      	ldrb	r0, [r5, #20]
     1c2:	2800      	cmp	r0, #0
			switch (*fmt) {
     1c4:	d012      	beq.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     1c6:	78f8      	ldrb	r0, [r7, #3]
     1c8:	2800      	cmp	r0, #0
			if (*++fmt == '\0') {
     1ca:	d00f      	beq.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     1cc:	7c28      	ldrb	r0, [r5, #16]
     1ce:	2800      	cmp	r0, #0
     1d0:	d00c      	beq.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
			if (!parsing) {
     1d2:	6820      	ldr	r0, [r4, #0]
     1d4:	1dc0      	adds	r0, r0, #7
     1d6:	f020 0007 	bic.w	r0, r0, #7
				if (*fmt == '%') {
     1da:	6020      	str	r0, [r4, #0]
     1dc:	7d29      	ldrb	r1, [r5, #20]
					arg_idx++;
     1de:	b106      	cbz	r6, 1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     1e0:	2000      	movs	r0, #0
     1e2:	f001 f935 	bl	1450 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
					parsing = true;
     1e6:	6821      	ldr	r1, [r4, #0]
				align = VA_STACK_ALIGN(size_t);
     1e8:	4408      	add	r0, r1
     1ea:	6020      	str	r0, [r4, #0]
     1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (*fmt) {
     1f0:	20000040 	.word	0x20000040

000001f4 <sdc_build_revision_get>:
				parsing = false;
     1f4:	b510      	push	{r4, lr}
     1f6:	b128      	cbz	r0, 204 <sdc_build_revision_get+0x10>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f8:	2214      	movs	r2, #20
     1fa:	4904      	ldr	r1, [pc, #16]	; (20c <sdc_build_revision_get+0x18>)
					return -EINVAL;
     1fc:	f009 ffb2 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     200:	2000      	movs	r0, #0
			long long v = va_arg(ap, long long);
     202:	bd10      	pop	{r4, pc}
     204:	f06f 0015 	mvn.w	r0, #21
     208:	bd10      	pop	{r4, pc}
     20a:	0000      	.short	0x0000
     20c:	0000046c 	.word	0x0000046c

00000210 <sdc_cfg_set>:

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     210:	b570      	push	{r4, r5, r6, lr}
				}
			}
			buf += sizeof(long long);
     212:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     216:	bb88      	cbnz	r0, 27c <sdc_cfg_set+0x6c>
		if (is_str_arg) {
     218:	4c23      	ldr	r4, [pc, #140]	; (2a8 <sdc_cfg_set+0x98>)
		} else if (size == sizeof(int)) {
     21a:	7860      	ldrb	r0, [r4, #1]
     21c:	b108      	cbz	r0, 222 <sdc_cfg_set+0x12>
			int v = va_arg(ap, int);
     21e:	11a8      	asrs	r0, r5, #6
     220:	bd70      	pop	{r4, r5, r6, pc}
			if (buf0 != NULL) {
     222:	b1f9      	cbz	r1, 264 <sdc_cfg_set+0x54>
		} else if (size == sizeof(long long)) {
     224:	f06f 0015 	mvn.w	r0, #21
			long long v = va_arg(ap, long long);
     228:	2a00      	cmp	r2, #0
     22a:	d0f9      	beq.n	220 <sdc_cfg_set+0x10>
     22c:	4b1f      	ldr	r3, [pc, #124]	; (2ac <sdc_cfg_set+0x9c>)
     22e:	2909      	cmp	r1, #9
     230:	d234      	bcs.n	29c <sdc_cfg_set+0x8c>
     232:	e8df f001 	tbb	[pc, r1]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	0533      	.short	0x0533
     238:	33180833 	.word	0x33180833
			s = va_arg(ap, char *);
     23c:	0024331b 	.word	0x0024331b
     240:	7810      	ldrb	r0, [r2, #0]
     242:	7018      	strb	r0, [r3, #0]
			if (is_ro && !do_ro) {
     244:	e01f      	b.n	286 <sdc_cfg_set+0x76>
     246:	7891      	ldrb	r1, [r2, #2]
     248:	2900      	cmp	r1, #0
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	d0e9      	beq.n	220 <sdc_cfg_set+0x10>
     24c:	78d1      	ldrb	r1, [r2, #3]
     24e:	2900      	cmp	r1, #0
     250:	d0e6      	beq.n	220 <sdc_cfg_set+0x10>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	7811      	ldrb	r1, [r2, #0]
     254:	291b      	cmp	r1, #27
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	d3e3      	bcc.n	220 <sdc_cfg_set+0x10>
     258:	7851      	ldrb	r1, [r2, #1]
     25a:	291b      	cmp	r1, #27
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d3e0      	bcc.n	220 <sdc_cfg_set+0x10>
     25e:	6810      	ldr	r0, [r2, #0]
				if (buf0 != NULL) {
     260:	f8c3 0005 	str.w	r0, [r3, #5]
					str_ptr_pos[s_idx] = s_ptr_idx;
     264:	e00f      	b.n	286 <sdc_cfg_set+0x76>
     266:	6810      	ldr	r0, [r2, #0]
     268:	60d8      	str	r0, [r3, #12]
     26a:	e00c      	b.n	286 <sdc_cfg_set+0x76>
					str_ptr_arg[s_idx] = arg_idx;
     26c:	78e1      	ldrb	r1, [r4, #3]
					str_ptr_pos[s_idx] = s_ptr_idx;
     26e:	b111      	cbz	r1, 276 <sdc_cfg_set+0x66>
     270:	7811      	ldrb	r1, [r2, #0]
					str_ptr_arg[s_idx] = arg_idx;
     272:	2902      	cmp	r1, #2
     274:	d3d4      	bcc.n	220 <sdc_cfg_set+0x10>
					if (is_ro) {
     276:	7810      	ldrb	r0, [r2, #0]
     278:	7418      	strb	r0, [r3, #16]
     27a:	e004      	b.n	286 <sdc_cfg_set+0x76>
     27c:	e00e      	b.n	29c <sdc_cfg_set+0x8c>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	8811      	ldrh	r1, [r2, #0]
     280:	29ff      	cmp	r1, #255	; 0xff
     282:	d8cd      	bhi.n	220 <sdc_cfg_set+0x10>
     284:	7519      	strb	r1, [r3, #20]
						s_ro_cnt++;
     286:	2201      	movs	r2, #1
     288:	4908      	ldr	r1, [pc, #32]	; (2ac <sdc_cfg_set+0x9c>)
				s_idx++;
     28a:	2000      	movs	r0, #0
					if (BUF_OFFSET + size > len) {
     28c:	f008 f866 	bl	835c <__udivmoddi4+0x2a0>
			buf += sizeof(char *);
     290:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
			switch (*fmt) {
     294:	db04      	blt.n	2a0 <sdc_cfg_set+0x90>
     296:	f06f 000b 	mvn.w	r0, #11
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	bd70      	pop	{r4, r5, r6, pc}
     29c:	4628      	mov	r0, r5
     29e:	bd70      	pop	{r4, r5, r6, pc}
				} else if (is_ro) {
     2a0:	2101      	movs	r1, #1
     2a2:	70a1      	strb	r1, [r4, #2]
     2a4:	bd70      	pop	{r4, r5, r6, pc}
					len += 1;
     2a6:	0000      	.short	0x0000
     2a8:	20000040 	.word	0x20000040
					len += 2;
     2ac:	20000d88 	.word	0x20000d88

000002b0 <sdc_disable>:
				} else if (rws_pos_en) {
     2b0:	b510      	push	{r4, lr}
					len += strlen(s) + 1 + 1;
     2b2:	4c07      	ldr	r4, [pc, #28]	; (2d0 <sdc_disable+0x20>)
     2b4:	7860      	ldrb	r0, [r4, #1]
     2b6:	b120      	cbz	r0, 2c2 <sdc_disable+0x12>
     2b8:	f003 f888 	bl	33cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     2bc:	7820      	ldrb	r0, [r4, #0]
     2be:	f007 fe1d 	bl	7efc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     2c2:	f000 fc85 	bl	bd0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c6:	f000 fd5d 	bl	d84 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     2ca:	2000      	movs	r0, #0

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	7060      	strb	r0, [r4, #1]
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	bd10      	pop	{r4, pc}
     2d0:	20000040 	.word	0x20000040

000002d4 <sdc_enable>:
     2d4:	b570      	push	{r4, r5, r6, lr}
     2d6:	460c      	mov	r4, r1
     2d8:	0005      	movs	r5, r0
     2da:	d002      	beq.n	2e2 <sdc_enable+0xe>
     2dc:	b10c      	cbz	r4, 2e2 <sdc_enable+0xe>
     2de:	0760      	lsls	r0, r4, #29
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	d002      	beq.n	2e8 <sdc_enable+0x14>
	*(char **)buf0 = NULL;
     2e2:	f06f 0015 	mvn.w	r0, #21
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	bd70      	pop	{r4, r5, r6, pc}
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	f000 f8e6 	bl	4b8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
	if (rws_pos_en) {
     2ec:	b1a8      	cbz	r0, 31a <sdc_enable+0x46>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	4628      	mov	r0, r5
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	f007 fdca 	bl	7e88 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	4d0a      	ldr	r5, [pc, #40]	; (320 <sdc_enable+0x4c>)
     2f6:	2200      	movs	r2, #0
     2f8:	490a      	ldr	r1, [pc, #40]	; (324 <sdc_enable+0x50>)
     2fa:	7028      	strb	r0, [r5, #0]
		for (i = 0; i < s_idx; i++) {
     2fc:	4620      	mov	r0, r4
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	f008 f82d 	bl	835c <__udivmoddi4+0x2a0>
		for (i = 0; i < s_idx; i++) {
     302:	f009 fd05 	bl	9d10 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	2100      	movs	r1, #0
     308:	7828      	ldrb	r0, [r5, #0]
     30a:	f003 f847 	bl	339c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
			*buf++ = str_ptr_arg[i];
     30e:	f7ff ff11 	bl	134 <__aeabi_idiv0+0x4>
		if (BUF_OFFSET + 1 + size > len) {
     312:	2001      	movs	r0, #1
			*buf++ = str_ptr_arg[i];
     314:	7068      	strb	r0, [r5, #1]
     316:	2000      	movs	r0, #0
	for (i = 0; i < s_idx; i++) {
     318:	bd70      	pop	{r4, r5, r6, pc}
     31a:	f04f 30ff 	mov.w	r0, #4294967295
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	bd70      	pop	{r4, r5, r6, pc}
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	20000040 	.word	0x20000040
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	20000d88 	.word	0x20000d88

00000328 <sdc_init>:
     328:	b530      	push	{r4, r5, lr}
     32a:	b089      	sub	sp, #36	; 0x24
			if (BUF_OFFSET + 1 > len) {
     32c:	0005      	movs	r5, r0
     32e:	d00c      	beq.n	34a <sdc_init+0x22>
     330:	f007 fd52 	bl	7dd8 <mpsl_is_initialized>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     334:	f04f 34ff 	mov.w	r4, #4294967295
			if (BUF_OFFSET + 1 > len) {
     338:	b120      	cbz	r0, 344 <sdc_init+0x1c>
			*buf++ = pos;
     33a:	f007 fc03 	bl	7b44 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
		for (i = 0; i < s_idx; i++) {
     33e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	d905      	bls.n	350 <sdc_init+0x28>
     344:	4620      	mov	r0, r4
     346:	b009      	add	sp, #36	; 0x24
     348:	bd30      	pop	{r4, r5, pc}
     34a:	f06f 0015 	mvn.w	r0, #21
     34e:	e7fa      	b.n	346 <sdc_init+0x1e>
		if (rws_pos_en) {
     350:	4c14      	ldr	r4, [pc, #80]	; (3a4 <sdc_init+0x7c>)
     352:	4815      	ldr	r0, [pc, #84]	; (3a8 <sdc_init+0x80>)
			*buf++ = str_ptr_arg[i];
     354:	6065      	str	r5, [r4, #4]
     356:	f000 f9bd 	bl	6d4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     35a:	2000      	movs	r0, #0
			size = 0;
     35c:	7060      	strb	r0, [r4, #1]
		if (BUF_OFFSET + 1 + size > len) {
     35e:	70a0      	strb	r0, [r4, #2]
     360:	70e0      	strb	r0, [r4, #3]
     362:	4601      	mov	r1, r0
     364:	2224      	movs	r2, #36	; 0x24
     366:	4668      	mov	r0, sp
     368:	f009 ff76 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
		*buf++ = str_ptr_pos[i];
     36c:	2224      	movs	r2, #36	; 0x24
     36e:	490f      	ldr	r1, [pc, #60]	; (3ac <sdc_init+0x84>)
     370:	4668      	mov	r0, sp
		memcpy(buf, s, size);
     372:	f009 fef7 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     376:	2224      	movs	r2, #36	; 0x24
     378:	4669      	mov	r1, sp
     37a:	480d      	ldr	r0, [pc, #52]	; (3b0 <sdc_init+0x88>)
		buf += size;
     37c:	f009 fef2 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
	for (i = 0; i < s_idx; i++) {
     380:	f3ef 8410 	mrs	r4, PRIMASK
     384:	b672      	cpsid	i
     386:	f000 fc31 	bl	bec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	480a      	ldr	r0, [pc, #40]	; (3b4 <sdc_init+0x8c>)
     38c:	f000 fd06 	bl	d9c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     390:	b118      	cbz	r0, 39a <sdc_init+0x72>
     392:	21cb      	movs	r1, #203	; 0xcb
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	2003      	movs	r0, #3
     396:	f000 f80f 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
			size = strlen(s) + 1;
     39a:	b904      	cbnz	r4, 39e <sdc_init+0x76>
     39c:	b662      	cpsie	i
     39e:	2000      	movs	r0, #0
     3a0:	e7d1      	b.n	346 <sdc_init+0x1e>
     3a2:	0000      	.short	0x0000
		return -EFAULT;
     3a4:	20000040 	.word	0x20000040
     3a8:	00000135 	.word	0x00000135
     3ac:	00000448 	.word	0x00000448
     3b0:	20000d88 	.word	0x20000d88
     3b4:	000004e5 	.word	0x000004e5

000003b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     3b8:	b50e      	push	{r1, r2, r3, lr}
     3ba:	b672      	cpsid	i
     3bc:	4a15      	ldr	r2, [pc, #84]	; (414 <CONFIG_BT_RX_STACK_SIZE+0x14>)
     3be:	6855      	ldr	r5, [r2, #4]
     3c0:	b1dd      	cbz	r5, 3fa <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     3c2:	2200      	movs	r2, #0
     3c4:	4603      	mov	r3, r0
     3c6:	466e      	mov	r6, sp
     3c8:	240a      	movs	r4, #10
     3ca:	e003      	b.n	3d4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     3cc:	fbb0 f0f4 	udiv	r0, r0, r4
     3d0:	1c52      	adds	r2, r2, #1
     3d2:	b2d2      	uxtb	r2, r2
     3d4:	2800      	cmp	r0, #0
     3d6:	d1f9      	bne.n	3cc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     3d8:	54b0      	strb	r0, [r6, r2]
     3da:	e00a      	b.n	3f2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     3dc:	b2d8      	uxtb	r0, r3
     3de:	fbb0 f7f4 	udiv	r7, r0, r4
     3e2:	fbb3 f3f4 	udiv	r3, r3, r4
     3e6:	fb04 0017 	mls	r0, r4, r7, r0
     3ea:	1e52      	subs	r2, r2, #1
     3ec:	b2d2      	uxtb	r2, r2
     3ee:	3030      	adds	r0, #48	; 0x30
     3f0:	54b0      	strb	r0, [r6, r2]
     3f2:	2a00      	cmp	r2, #0
     3f4:	d1f2      	bne.n	3dc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     3f6:	4630      	mov	r0, r6
     3f8:	47a8      	blx	r5
     3fa:	f3bf 8f4f 	dsb	sy
     3fe:	4806      	ldr	r0, [pc, #24]	; (418 <CONFIG_BT_RX_STACK_SIZE+0x18>)
     400:	6801      	ldr	r1, [r0, #0]
     402:	4a06      	ldr	r2, [pc, #24]	; (41c <CONFIG_BT_RX_STACK_SIZE+0x1c>)
     404:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     408:	4311      	orrs	r1, r2
     40a:	6001      	str	r1, [r0, #0]
     40c:	f3bf 8f4f 	dsb	sy
     410:	bf00      	nop
     412:	e7fd      	b.n	410 <CONFIG_BT_RX_STACK_SIZE+0x10>
     414:	20000040 	.word	0x20000040
     418:	e000ed0c 	.word	0xe000ed0c
     41c:	05fa0004 	.word	0x05fa0004

00000420 <sdc_support_scan>:
     420:	4807      	ldr	r0, [pc, #28]	; (440 <sdc_support_scan+0x20>)
     422:	b510      	push	{r4, lr}
     424:	7881      	ldrb	r1, [r0, #2]
     426:	7842      	ldrb	r2, [r0, #1]
     428:	4311      	orrs	r1, r2
     42a:	d002      	beq.n	432 <sdc_support_scan+0x12>
     42c:	f04f 30ff 	mov.w	r0, #4294967295
     430:	bd10      	pop	{r4, pc}
     432:	2101      	movs	r1, #1
     434:	70c1      	strb	r1, [r0, #3]
     436:	f002 ffd9 	bl	33ec <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
     43a:	2000      	movs	r0, #0
     43c:	bd10      	pop	{r4, pc}
     43e:	0000      	.short	0x0000
     440:	20000040 	.word	0x20000040
     444:	00000001 	.word	0x00000001
     448:	00000001 	.word	0x00000001
     44c:	031b1b00 	.word	0x031b1b00
     450:	00000002 	.word	0x00000002
     454:	00001d4c 	.word	0x00001d4c
     458:	00000003 	.word	0x00000003
     45c:	00000008 	.word	0x00000008
	...
     46c:	c12e7ee0 	.word	0xc12e7ee0
     470:	2385055e 	.word	0x2385055e
     474:	fadc1546 	.word	0xfadc1546
     478:	707d298e 	.word	0x707d298e
     47c:	fca59310 	.word	0xfca59310

00000480 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     480:	4a05      	ldr	r2, [pc, #20]	; (498 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     482:	b510      	push	{r4, lr}
     484:	6852      	ldr	r2, [r2, #4]
     486:	b112      	cbz	r2, 48e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     48c:	4710      	bx	r2
     48e:	2192      	movs	r1, #146	; 0x92
     490:	2004      	movs	r0, #4
     492:	f7ff ff91 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     496:	0000      	.short	0x0000
     498:	20000dac 	.word	0x20000dac

0000049c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     49c:	4a05      	ldr	r2, [pc, #20]	; (4b4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     49e:	b510      	push	{r4, lr}
     4a0:	6892      	ldr	r2, [r2, #8]
     4a2:	b112      	cbz	r2, 4aa <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4a8:	4710      	bx	r2
     4aa:	2198      	movs	r1, #152	; 0x98
     4ac:	2004      	movs	r0, #4
     4ae:	f7ff ff83 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     4b2:	0000      	.short	0x0000
     4b4:	20000dac 	.word	0x20000dac

000004b8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     4b8:	4805      	ldr	r0, [pc, #20]	; (4d0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     4ba:	6801      	ldr	r1, [r0, #0]
     4bc:	b129      	cbz	r1, 4ca <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     4be:	6841      	ldr	r1, [r0, #4]
     4c0:	b119      	cbz	r1, 4ca <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     4c2:	6880      	ldr	r0, [r0, #8]
     4c4:	b108      	cbz	r0, 4ca <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     4c6:	2001      	movs	r0, #1
     4c8:	4770      	bx	lr
     4ca:	2000      	movs	r0, #0
     4cc:	4770      	bx	lr
     4ce:	0000      	.short	0x0000
     4d0:	20000dac 	.word	0x20000dac

000004d4 <sdc_rand_source_register>:
     4d4:	4902      	ldr	r1, [pc, #8]	; (4e0 <sdc_rand_source_register+0xc>)
     4d6:	c80d      	ldmia	r0, {r0, r2, r3}
     4d8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     4dc:	2000      	movs	r0, #0
     4de:	4770      	bx	lr
     4e0:	20000dac 	.word	0x20000dac

000004e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4e6:	4c12      	ldr	r4, [pc, #72]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4e8:	2600      	movs	r6, #0
     4ea:	6825      	ldr	r5, [r4, #0]
     4ec:	e011      	b.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     4ee:	9800      	ldr	r0, [sp, #0]
     4f0:	2802      	cmp	r0, #2
     4f2:	d002      	beq.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     4f4:	2803      	cmp	r0, #3
     4f6:	d10c      	bne.n	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     4f8:	e006      	b.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     4fa:	6820      	ldr	r0, [r4, #0]
     4fc:	b110      	cbz	r0, 504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4fe:	2000      	movs	r0, #0
     500:	6026      	str	r6, [r4, #0]
     502:	e005      	b.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     504:	2128      	movs	r1, #40	; 0x28
     506:	e00c      	b.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     508:	6820      	ldr	r0, [r4, #0]
     50a:	b168      	cbz	r0, 528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     50c:	2001      	movs	r0, #1
     50e:	6026      	str	r6, [r4, #0]
     510:	47a8      	blx	r5
     512:	4668      	mov	r0, sp
     514:	f000 fc08 	bl	d28 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     518:	2800      	cmp	r0, #0
     51a:	d0e8      	beq.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     51c:	2805      	cmp	r0, #5
     51e:	d005      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     520:	2135      	movs	r1, #53	; 0x35
     522:	2004      	movs	r0, #4
     524:	f7ff ff48 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     528:	212d      	movs	r1, #45	; 0x2d
     52a:	e7fa      	b.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     52e:	0000      	.short	0x0000
     530:	20000048 	.word	0x20000048

00000534 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     538:	4605      	mov	r5, r0
     53a:	4925      	ldr	r1, [pc, #148]	; (5d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     53c:	1d00      	adds	r0, r0, #4
     53e:	f501 7784 	add.w	r7, r1, #264	; 0x108
     542:	2600      	movs	r6, #0
     544:	6008      	str	r0, [r1, #0]
     546:	7838      	ldrb	r0, [r7, #0]
     548:	b150      	cbz	r0, 560 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     54a:	78ba      	ldrb	r2, [r7, #2]
     54c:	463c      	mov	r4, r7
     54e:	1c79      	adds	r1, r7, #1
     550:	4628      	mov	r0, r5
     552:	1c92      	adds	r2, r2, #2
     554:	f009 fe06 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     558:	7026      	strb	r6, [r4, #0]
     55a:	2004      	movs	r0, #4
     55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     560:	481b      	ldr	r0, [pc, #108]	; (5d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     562:	f000 fde3 	bl	112c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     566:	4604      	mov	r4, r0
     568:	2802      	cmp	r0, #2
     56a:	d004      	beq.n	576 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     56c:	2c04      	cmp	r4, #4
     56e:	d007      	beq.n	580 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     570:	2c08      	cmp	r4, #8
     572:	d027      	beq.n	5c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
     574:	e02a      	b.n	5cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     576:	4916      	ldr	r1, [pc, #88]	; (5d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     578:	4628      	mov	r0, r5
     57a:	f007 ff34 	bl	83e6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     57e:	e025      	b.n	5cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     580:	4913      	ldr	r1, [pc, #76]	; (5d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     582:	4628      	mov	r0, r5
     584:	f007 ff94 	bl	84b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     588:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     58c:	d303      	bcc.n	596 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x62>
     58e:	21c7      	movs	r1, #199	; 0xc7
     590:	2008      	movs	r0, #8
     592:	f7ff ff11 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     596:	2800      	cmp	r0, #0
     598:	d0d5      	beq.n	546 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     59a:	f895 9000 	ldrb.w	r9, [r5]
     59e:	f895 8002 	ldrb.w	r8, [r5, #2]
     5a2:	4648      	mov	r0, r9
     5a4:	f000 f844 	bl	630 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     5a8:	2800      	cmp	r0, #0
     5aa:	d0cc      	beq.n	546 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     5ac:	f1b9 0f3e 	cmp.w	r9, #62	; 0x3e
     5b0:	d10c      	bne.n	5cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     5b2:	4640      	mov	r0, r8
     5b4:	f1b8 0f12 	cmp.w	r8, #18
     5b8:	d0c5      	beq.n	546 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     5ba:	f000 f84b 	bl	654 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     5be:	2800      	cmp	r0, #0
     5c0:	d0c1      	beq.n	546 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     5c2:	e003      	b.n	5cc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
     5c4:	4902      	ldr	r1, [pc, #8]	; (5d0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
     5c6:	4628      	mov	r0, r5
     5c8:	f007 ff3b 	bl	8442 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     5cc:	4620      	mov	r0, r4
     5ce:	e7c5      	b.n	55c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     5d0:	20000db8 	.word	0x20000db8
     5d4:	b570      	push	{r4, r5, r6, lr}
     5d6:	780a      	ldrb	r2, [r1, #0]
     5d8:	7082      	strb	r2, [r0, #2]
     5da:	b33a      	cbz	r2, 62c <__data_size+0x1c>
     5dc:	2a01      	cmp	r2, #1
     5de:	d825      	bhi.n	62c <__data_size+0x1c>
     5e0:	2313      	movs	r3, #19
     5e2:	7003      	strb	r3, [r0, #0]
     5e4:	2300      	movs	r3, #0
     5e6:	e00a      	b.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     5e8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     5ec:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     5f0:	78a6      	ldrb	r6, [r4, #2]
     5f2:	70ee      	strb	r6, [r5, #3]
     5f4:	8864      	ldrh	r4, [r4, #2]
     5f6:	0a24      	lsrs	r4, r4, #8
     5f8:	1c5b      	adds	r3, r3, #1
     5fa:	712c      	strb	r4, [r5, #4]
     5fc:	b2db      	uxtb	r3, r3
     5fe:	4293      	cmp	r3, r2
     600:	d3f2      	bcc.n	5e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
     602:	2300      	movs	r3, #0
     604:	e00b      	b.n	61e <__data_size+0xe>
     606:	bf00      	nop
     608:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     60c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     610:	792e      	ldrb	r6, [r5, #4]
     612:	7166      	strb	r6, [r4, #5]
     614:	88ad      	ldrh	r5, [r5, #4]
     616:	0a2d      	lsrs	r5, r5, #8
     618:	1c5b      	adds	r3, r3, #1
     61a:	71a5      	strb	r5, [r4, #6]
     61c:	b2db      	uxtb	r3, r3
     61e:	4293      	cmp	r3, r2
     620:	d3f2      	bcc.n	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     622:	2101      	movs	r1, #1
     624:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     628:	b2c0      	uxtb	r0, r0
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	2000      	movs	r0, #0
     62e:	bd70      	pop	{r4, r5, r6, pc}

00000630 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     630:	2840      	cmp	r0, #64	; 0x40
     632:	d203      	bcs.n	63c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     634:	1e40      	subs	r0, r0, #1
     636:	b2c1      	uxtb	r1, r0
     638:	4805      	ldr	r0, [pc, #20]	; (650 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     63a:	e005      	b.n	648 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     63c:	28ff      	cmp	r0, #255	; 0xff
     63e:	d005      	beq.n	64c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     640:	3840      	subs	r0, #64	; 0x40
     642:	b2c1      	uxtb	r1, r0
     644:	4802      	ldr	r0, [pc, #8]	; (650 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     646:	3008      	adds	r0, #8
     648:	f008 b9c4 	b.w	89d4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     64c:	2001      	movs	r0, #1
     64e:	4770      	bx	lr
     650:	2000004c 	.word	0x2000004c

00000654 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     654:	1e40      	subs	r0, r0, #1
     656:	b2c1      	uxtb	r1, r0
     658:	4801      	ldr	r0, [pc, #4]	; (660 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     65a:	f008 b9bb 	b.w	89d4 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     65e:	0000      	.short	0x0000
     660:	2000005c 	.word	0x2000005c

00000664 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     664:	4902      	ldr	r1, [pc, #8]	; (670 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     666:	6802      	ldr	r2, [r0, #0]
     668:	610a      	str	r2, [r1, #16]
     66a:	6840      	ldr	r0, [r0, #4]
     66c:	6148      	str	r0, [r1, #20]
     66e:	4770      	bx	lr
     670:	2000004c 	.word	0x2000004c

00000674 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     674:	4905      	ldr	r1, [pc, #20]	; (68c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     676:	6802      	ldr	r2, [r0, #0]
     678:	600a      	str	r2, [r1, #0]
     67a:	6840      	ldr	r0, [r0, #4]
     67c:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     680:	600a      	str	r2, [r1, #0]
     682:	4a03      	ldr	r2, [pc, #12]	; (690 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     684:	4310      	orrs	r0, r2
     686:	6048      	str	r0, [r1, #4]
     688:	4770      	bx	lr
     68a:	0000      	.short	0x0000
     68c:	2000004c 	.word	0x2000004c
     690:	024007f8 	.word	0x024007f8

00000694 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     694:	4807      	ldr	r0, [pc, #28]	; (6b4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     696:	f04f 31ff 	mov.w	r1, #4294967295
     69a:	2200      	movs	r2, #0
     69c:	6001      	str	r1, [r0, #0]
     69e:	0cc9      	lsrs	r1, r1, #19
     6a0:	6041      	str	r1, [r0, #4]
     6a2:	f100 0108 	add.w	r1, r0, #8
     6a6:	201f      	movs	r0, #31
     6a8:	600a      	str	r2, [r1, #0]
     6aa:	604a      	str	r2, [r1, #4]
     6ac:	3108      	adds	r1, #8
     6ae:	e9c1 0200 	strd	r0, r2, [r1]
     6b2:	4770      	bx	lr
     6b4:	2000004c 	.word	0x2000004c

000006b8 <sdc_hci_cmd_cb_reset>:
     6b8:	b510      	push	{r4, lr}
     6ba:	f7ff ffeb 	bl	694 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     6be:	f009 f993 	bl	99e8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     6c2:	4604      	mov	r4, r0
     6c4:	4802      	ldr	r0, [pc, #8]	; (6d0 <sdc_hci_cmd_cb_reset+0x18>)
     6c6:	6800      	ldr	r0, [r0, #0]
     6c8:	b100      	cbz	r0, 6cc <sdc_hci_cmd_cb_reset+0x14>
     6ca:	4780      	blx	r0
     6cc:	4620      	mov	r0, r4
     6ce:	bd10      	pop	{r4, pc}
     6d0:	20000064 	.word	0x20000064

000006d4 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     6d4:	4901      	ldr	r1, [pc, #4]	; (6dc <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     6d6:	6008      	str	r0, [r1, #0]
     6d8:	4770      	bx	lr
     6da:	0000      	.short	0x0000
     6dc:	20000064 	.word	0x20000064

000006e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     6e4:	4604      	mov	r4, r0
     6e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     6ea:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     6ee:	4d1f      	ldr	r5, [pc, #124]	; (76c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     6f0:	4e1e      	ldr	r6, [pc, #120]	; (76c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     6f2:	3d10      	subs	r5, #16
     6f4:	2210      	movs	r2, #16
     6f6:	2100      	movs	r1, #0
     6f8:	4620      	mov	r0, r4
     6fa:	f009 fdad 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     6fe:	2210      	movs	r2, #16
     700:	2100      	movs	r1, #0
     702:	f104 0010 	add.w	r0, r4, #16
     706:	f009 fda7 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     70a:	6828      	ldr	r0, [r5, #0]
     70c:	1c40      	adds	r0, r0, #1
     70e:	d108      	bne.n	722 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     710:	6868      	ldr	r0, [r5, #4]
     712:	1c40      	adds	r0, r0, #1
     714:	d105      	bne.n	722 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     716:	68a8      	ldr	r0, [r5, #8]
     718:	1c40      	adds	r0, r0, #1
     71a:	d102      	bne.n	722 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     71c:	68e8      	ldr	r0, [r5, #12]
     71e:	1c40      	adds	r0, r0, #1
     720:	d007      	beq.n	732 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     722:	6828      	ldr	r0, [r5, #0]
     724:	686a      	ldr	r2, [r5, #4]
     726:	68a9      	ldr	r1, [r5, #8]
     728:	68eb      	ldr	r3, [r5, #12]
     72a:	6120      	str	r0, [r4, #16]
     72c:	6162      	str	r2, [r4, #20]
     72e:	61a1      	str	r1, [r4, #24]
     730:	61e3      	str	r3, [r4, #28]
     732:	2000      	movs	r0, #0
     734:	f000 fb86 	bl	e44 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     738:	4387      	bics	r7, r0
     73a:	07f8      	lsls	r0, r7, #31
     73c:	d113      	bne.n	766 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     73e:	6830      	ldr	r0, [r6, #0]
     740:	1c40      	adds	r0, r0, #1
     742:	d108      	bne.n	756 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     744:	6870      	ldr	r0, [r6, #4]
     746:	1c40      	adds	r0, r0, #1
     748:	d105      	bne.n	756 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     74a:	68b0      	ldr	r0, [r6, #8]
     74c:	1c40      	adds	r0, r0, #1
     74e:	d102      	bne.n	756 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     750:	68f0      	ldr	r0, [r6, #12]
     752:	1c40      	adds	r0, r0, #1
     754:	d007      	beq.n	766 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     756:	6832      	ldr	r2, [r6, #0]
     758:	6870      	ldr	r0, [r6, #4]
     75a:	68b1      	ldr	r1, [r6, #8]
     75c:	68f3      	ldr	r3, [r6, #12]
     75e:	6022      	str	r2, [r4, #0]
     760:	6060      	str	r0, [r4, #4]
     762:	60a1      	str	r1, [r4, #8]
     764:	60e3      	str	r3, [r4, #12]
     766:	2000      	movs	r0, #0
     768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     76c:	10000090 	.word	0x10000090

00000770 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     770:	b538      	push	{r3, r4, r5, lr}
     772:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     776:	4604      	mov	r4, r0
     778:	4822      	ldr	r0, [pc, #136]	; (804 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4>)
     77a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     77e:	4d21      	ldr	r5, [pc, #132]	; (804 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4>)
     780:	6802      	ldr	r2, [r0, #0]
     782:	3d14      	subs	r5, #20
     784:	1c52      	adds	r2, r2, #1
     786:	d104      	bne.n	792 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     788:	6842      	ldr	r2, [r0, #4]
     78a:	43d2      	mvns	r2, r2
     78c:	0412      	lsls	r2, r2, #16
     78e:	0c12      	lsrs	r2, r2, #16
     790:	d035      	beq.n	7fe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     792:	07c9      	lsls	r1, r1, #31
     794:	d033      	beq.n	7fe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     796:	6801      	ldr	r1, [r0, #0]
     798:	6840      	ldr	r0, [r0, #4]
     79a:	f8ad 0000 	strh.w	r0, [sp]
     79e:	f8c4 1001 	str.w	r1, [r4, #1]
     7a2:	f8bd 0000 	ldrh.w	r0, [sp]
     7a6:	f8a4 0005 	strh.w	r0, [r4, #5]
     7aa:	79a0      	ldrb	r0, [r4, #6]
     7ac:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     7b0:	71a0      	strb	r0, [r4, #6]
     7b2:	6828      	ldr	r0, [r5, #0]
     7b4:	1c40      	adds	r0, r0, #1
     7b6:	d00c      	beq.n	7d2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7b8:	6868      	ldr	r0, [r5, #4]
     7ba:	1c40      	adds	r0, r0, #1
     7bc:	d009      	beq.n	7d2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7be:	68a8      	ldr	r0, [r5, #8]
     7c0:	1c40      	adds	r0, r0, #1
     7c2:	d006      	beq.n	7d2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7c4:	68e8      	ldr	r0, [r5, #12]
     7c6:	1c40      	adds	r0, r0, #1
     7c8:	d003      	beq.n	7d2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     7ca:	2000      	movs	r0, #0
     7cc:	f000 fb3a 	bl	e44 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     7d0:	b140      	cbz	r0, 7e4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     7d2:	2210      	movs	r2, #16
     7d4:	2100      	movs	r1, #0
     7d6:	1de0      	adds	r0, r4, #7
     7d8:	f009 fd3e 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     7dc:	2001      	movs	r0, #1
     7de:	7020      	strb	r0, [r4, #0]
     7e0:	2000      	movs	r0, #0
     7e2:	bd38      	pop	{r3, r4, r5, pc}
     7e4:	682a      	ldr	r2, [r5, #0]
     7e6:	6869      	ldr	r1, [r5, #4]
     7e8:	68a8      	ldr	r0, [r5, #8]
     7ea:	68eb      	ldr	r3, [r5, #12]
     7ec:	f8c4 2007 	str.w	r2, [r4, #7]
     7f0:	f8c4 100b 	str.w	r1, [r4, #11]
     7f4:	f8c4 000f 	str.w	r0, [r4, #15]
     7f8:	f8c4 3013 	str.w	r3, [r4, #19]
     7fc:	e7ee      	b.n	7dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     7fe:	2000      	movs	r0, #0
     800:	e7ed      	b.n	7de <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     802:	0000      	.short	0x0000
     804:	100000a4 	.word	0x100000a4

00000808 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     808:	2102      	movs	r1, #2
     80a:	8001      	strh	r1, [r0, #0]
     80c:	8041      	strh	r1, [r0, #2]
     80e:	2100      	movs	r1, #0
     810:	7101      	strb	r1, [r0, #4]
     812:	21e0      	movs	r1, #224	; 0xe0
     814:	7141      	strb	r1, [r0, #5]
     816:	f642 617e 	movw	r1, #11902	; 0x2e7e
     81a:	80c1      	strh	r1, [r0, #6]
     81c:	4901      	ldr	r1, [pc, #4]	; (824 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     81e:	6081      	str	r1, [r0, #8]
     820:	2000      	movs	r0, #0
     822:	4770      	bx	lr
     824:	85055ec1 	.word	0x85055ec1
     828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     82c:	798c      	ldrb	r4, [r1, #6]
     82e:	f8dd e018 	ldr.w	lr, [sp, #24]
     832:	2c08      	cmp	r4, #8
     834:	d901      	bls.n	83a <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     836:	21db      	movs	r1, #219	; 0xdb
     838:	e02c      	b.n	894 <__z_interrupt_stack_SIZEOF+0x54>
     83a:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8e0 <__z_interrupt_stack_SIZEOF+0xa0>
     83e:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     842:	b10d      	cbz	r5, 848 <__z_interrupt_stack_SIZEOF+0x8>
     844:	21dc      	movs	r1, #220	; 0xdc
     846:	e025      	b.n	894 <__z_interrupt_stack_SIZEOF+0x54>
     848:	79cd      	ldrb	r5, [r1, #7]
     84a:	2d00      	cmp	r5, #0
     84c:	d045      	beq.n	8da <__z_interrupt_stack_SIZEOF+0x9a>
     84e:	006f      	lsls	r7, r5, #1
     850:	370a      	adds	r7, #10
     852:	681d      	ldr	r5, [r3, #0]
     854:	2c02      	cmp	r4, #2
     856:	443d      	add	r5, r7
     858:	d901      	bls.n	85e <__z_interrupt_stack_SIZEOF+0x1e>
     85a:	4626      	mov	r6, r4
     85c:	e001      	b.n	862 <__z_interrupt_stack_SIZEOF+0x22>
     85e:	f04f 0602 	mov.w	r6, #2
     862:	442e      	add	r6, r5
     864:	f1a6 0601 	sub.w	r6, r6, #1
     868:	d901      	bls.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
     86a:	4625      	mov	r5, r4
     86c:	e001      	b.n	872 <__z_interrupt_stack_SIZEOF+0x32>
     86e:	f04f 0502 	mov.w	r5, #2
     872:	f1a5 0501 	sub.w	r5, r5, #1
     876:	ea26 0605 	bic.w	r6, r6, r5
     87a:	888d      	ldrh	r5, [r1, #4]
     87c:	4425      	add	r5, r4
     87e:	f1a4 0401 	sub.w	r4, r4, #1
     882:	f1a5 0501 	sub.w	r5, r5, #1
     886:	ea25 0504 	bic.w	r5, r5, r4
     88a:	f64f 74ff 	movw	r4, #65535	; 0xffff
     88e:	42a5      	cmp	r5, r4
     890:	d303      	bcc.n	89a <__z_interrupt_stack_SIZEOF+0x5a>
     892:	21e7      	movs	r1, #231	; 0xe7
     894:	2017      	movs	r0, #23
     896:	f7ff fd8f 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     89a:	f1be 0f00 	cmp.w	lr, #0
     89e:	d118      	bne.n	8d2 <__z_interrupt_stack_SIZEOF+0x92>
     8a0:	1bf4      	subs	r4, r6, r7
     8a2:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     8a6:	8025      	strh	r5, [r4, #0]
     8a8:	79c8      	ldrb	r0, [r1, #7]
     8aa:	70a0      	strb	r0, [r4, #2]
     8ac:	2001      	movs	r0, #1
     8ae:	70e0      	strb	r0, [r4, #3]
     8b0:	7122      	strb	r2, [r4, #4]
     8b2:	6808      	ldr	r0, [r1, #0]
     8b4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     8b8:	0c00      	lsrs	r0, r0, #16
     8ba:	80e0      	strh	r0, [r4, #6]
     8bc:	8808      	ldrh	r0, [r1, #0]
     8be:	8120      	strh	r0, [r4, #8]
     8c0:	2000      	movs	r0, #0
     8c2:	e003      	b.n	8cc <__z_interrupt_stack_SIZEOF+0x8c>
     8c4:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     8c8:	1c40      	adds	r0, r0, #1
     8ca:	817a      	strh	r2, [r7, #10]
     8cc:	79cf      	ldrb	r7, [r1, #7]
     8ce:	4287      	cmp	r7, r0
     8d0:	d8f8      	bhi.n	8c4 <__z_interrupt_stack_SIZEOF+0x84>
     8d2:	79c8      	ldrb	r0, [r1, #7]
     8d4:	fb00 6005 	mla	r0, r0, r5, r6
     8d8:	6018      	str	r0, [r3, #0]
     8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8de:	0000      	.short	0x0000
     8e0:	20000068 	.word	0x20000068
     8e4:	b530      	push	{r4, r5, lr}
     8e6:	4603      	mov	r3, r0
     8e8:	ea4f 0002 	mov.w	r0, r2
     8ec:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     8f0:	8964      	ldrh	r4, [r4, #10]
     8f2:	428c      	cmp	r4, r1
     8f4:	d009      	beq.n	90a <__z_interrupt_stack_SIZEOF+0xca>
     8f6:	789c      	ldrb	r4, [r3, #2]
     8f8:	1c40      	adds	r0, r0, #1
     8fa:	fbb0 f5f4 	udiv	r5, r0, r4
     8fe:	fb04 0015 	mls	r0, r4, r5, r0
     902:	b2c0      	uxtb	r0, r0
     904:	4290      	cmp	r0, r2
     906:	d1f1      	bne.n	8ec <__z_interrupt_stack_SIZEOF+0xac>
     908:	20ff      	movs	r0, #255	; 0xff
     90a:	bd30      	pop	{r4, r5, pc}

0000090c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     90c:	4a08      	ldr	r2, [pc, #32]	; (930 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
     90e:	b510      	push	{r4, lr}
     910:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     914:	4601      	mov	r1, r0
     916:	4620      	mov	r0, r4
     918:	f008 fa70 	bl	8dfc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     91c:	4601      	mov	r1, r0
     91e:	28ff      	cmp	r0, #255	; 0xff
     920:	d004      	beq.n	92c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
     922:	4620      	mov	r0, r4
     924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     928:	f008 ba7c 	b.w	8e24 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     92c:	2000      	movs	r0, #0
     92e:	bd10      	pop	{r4, pc}
     930:	20000068 	.word	0x20000068

00000934 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     934:	b570      	push	{r4, r5, r6, lr}
     936:	4604      	mov	r4, r0
     938:	7808      	ldrb	r0, [r1, #0]
     93a:	784a      	ldrb	r2, [r1, #1]
     93c:	b086      	sub	sp, #24
     93e:	4290      	cmp	r0, r2
     940:	d902      	bls.n	948 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
     942:	f44f 7184 	mov.w	r1, #264	; 0x108
     946:	e006      	b.n	956 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     948:	9401      	str	r4, [sp, #4]
     94a:	b13c      	cbz	r4, 95c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     94c:	2300      	movs	r3, #0
     94e:	0760      	lsls	r0, r4, #29
     950:	d006      	beq.n	960 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     952:	f240 1119 	movw	r1, #281	; 0x119
     956:	2017      	movs	r0, #23
     958:	f7ff fd2e 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     95c:	2301      	movs	r3, #1
     95e:	e7f6      	b.n	94e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1a>
     960:	480b      	ldr	r0, [pc, #44]	; (990 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>)
     962:	2200      	movs	r2, #0
     964:	4e0b      	ldr	r6, [pc, #44]	; (994 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>)
     966:	6002      	str	r2, [r0, #0]
     968:	7849      	ldrb	r1, [r1, #1]
     96a:	e9d6 5000 	ldrd	r5, r0, [r6]
     96e:	68b6      	ldr	r6, [r6, #8]
     970:	f361 601f 	bfi	r0, r1, #24, #8
     974:	e9cd 5002 	strd	r5, r0, [sp, #8]
     978:	9300      	str	r3, [sp, #0]
     97a:	9604      	str	r6, [sp, #16]
     97c:	ab01      	add	r3, sp, #4
     97e:	a902      	add	r1, sp, #8
     980:	4610      	mov	r0, r2
     982:	f7ff ff51 	bl	828 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
     986:	9801      	ldr	r0, [sp, #4]
     988:	b006      	add	sp, #24
     98a:	1b00      	subs	r0, r0, r4
     98c:	bd70      	pop	{r4, r5, r6, pc}
     98e:	0000      	.short	0x0000
     990:	20000068 	.word	0x20000068
     994:	00000a28 	.word	0x00000a28

00000998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     998:	b510      	push	{r4, lr}
     99a:	4604      	mov	r4, r0
     99c:	7980      	ldrb	r0, [r0, #6]
     99e:	490e      	ldr	r1, [pc, #56]	; (9d8 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
     9a0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     9a4:	b1a8      	cbz	r0, 9d2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     9a6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
     9aa:	79e1      	ldrb	r1, [r4, #7]
     9ac:	7882      	ldrb	r2, [r0, #2]
     9ae:	4291      	cmp	r1, r2
     9b0:	d20f      	bcs.n	9d2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
     9b2:	1c4a      	adds	r2, r1, #1
     9b4:	71e2      	strb	r2, [r4, #7]
     9b6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9ba:	8952      	ldrh	r2, [r2, #10]
     9bc:	429a      	cmp	r2, r3
     9be:	d0f4      	beq.n	9aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
     9c0:	eb00 0241 	add.w	r2, r0, r1, lsl #1
     9c4:	8952      	ldrh	r2, [r2, #10]
     9c6:	80a2      	strh	r2, [r4, #4]
     9c8:	f008 fa2c 	bl	8e24 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     9cc:	6020      	str	r0, [r4, #0]
     9ce:	2000      	movs	r0, #0
     9d0:	bd10      	pop	{r4, pc}
     9d2:	2005      	movs	r0, #5
     9d4:	bd10      	pop	{r4, pc}
     9d6:	0000      	.short	0x0000
     9d8:	20000068 	.word	0x20000068

000009dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9e0:	4606      	mov	r6, r0
     9e2:	4810      	ldr	r0, [pc, #64]	; (a24 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
     9e4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
     9e8:	4631      	mov	r1, r6
     9ea:	4628      	mov	r0, r5
     9ec:	f008 fa06 	bl	8dfc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     9f0:	4604      	mov	r4, r0
     9f2:	28ff      	cmp	r0, #255	; 0xff
     9f4:	d012      	beq.n	a1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
     9f6:	f8d5 0006 	ldr.w	r0, [r5, #6]
     9fa:	4621      	mov	r1, r4
     9fc:	ea4f 4730 	mov.w	r7, r0, ror #16
     a00:	4628      	mov	r0, r5
     a02:	f008 fa0f 	bl	8e24 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
     a06:	4601      	mov	r1, r0
     a08:	4630      	mov	r0, r6
     a0a:	47b8      	blx	r7
     a0c:	eb05 0144 	add.w	r1, r5, r4, lsl #1
     a10:	f64f 70f0 	movw	r0, #65520	; 0xfff0
     a14:	8148      	strh	r0, [r1, #10]
     a16:	2000      	movs	r0, #0
     a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a1c:	f243 0002 	movw	r0, #12290	; 0x3002
     a20:	e7fa      	b.n	a18 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
     a22:	0000      	.short	0x0000
     a24:	20000068 	.word	0x20000068
     a28:	00009719 	.word	0x00009719
     a2c:	000802a8 	.word	0x000802a8
     a30:	00000000 	.word	0x00000000

00000a34 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
     a34:	b570      	push	{r4, r5, r6, lr}
     a36:	4c14      	ldr	r4, [pc, #80]	; (a88 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
     a38:	6823      	ldr	r3, [r4, #0]
     a3a:	b18b      	cbz	r3, a60 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
     a3c:	7a19      	ldrb	r1, [r3, #8]
     a3e:	4281      	cmp	r1, r0
     a40:	d912      	bls.n	a68 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     a42:	685a      	ldr	r2, [r3, #4]
     a44:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
     a48:	b171      	cbz	r1, a68 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
     a4a:	2500      	movs	r5, #0
     a4c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
     a50:	884a      	ldrh	r2, [r1, #2]
     a52:	6818      	ldr	r0, [r3, #0]
     a54:	f008 f9c5 	bl	8de2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     a58:	6821      	ldr	r1, [r4, #0]
     a5a:	2000      	movs	r0, #0
     a5c:	7a0a      	ldrb	r2, [r1, #8]
     a5e:	e00c      	b.n	a7a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
     a60:	21c6      	movs	r1, #198	; 0xc6
     a62:	2018      	movs	r0, #24
     a64:	f7ff fca8 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a68:	f243 0002 	movw	r0, #12290	; 0x3002
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	684b      	ldr	r3, [r1, #4]
     a70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     a74:	b933      	cbnz	r3, a84 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
     a76:	1c40      	adds	r0, r0, #1
     a78:	b2c0      	uxtb	r0, r0
     a7a:	4282      	cmp	r2, r0
     a7c:	d8f7      	bhi.n	a6e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
     a7e:	6808      	ldr	r0, [r1, #0]
     a80:	f008 f9a4 	bl	8dcc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
     a84:	2000      	movs	r0, #0
     a86:	bd70      	pop	{r4, r5, r6, pc}
     a88:	2000006c 	.word	0x2000006c

00000a8c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
     a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a90:	460d      	mov	r5, r1
     a92:	0004      	movs	r4, r0
     a94:	4690      	mov	r8, r2
     a96:	f04f 0600 	mov.w	r6, #0
     a9a:	d006      	beq.n	aaa <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
     a9c:	2700      	movs	r7, #0
     a9e:	07a0      	lsls	r0, r4, #30
     aa0:	d005      	beq.n	aae <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
     aa2:	2186      	movs	r1, #134	; 0x86
     aa4:	2018      	movs	r0, #24
     aa6:	f7ff fc87 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     aaa:	2701      	movs	r7, #1
     aac:	e7f7      	b.n	a9e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
     aae:	b1cd      	cbz	r5, ae4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     ab0:	4611      	mov	r1, r2
     ab2:	2000      	movs	r0, #0
     ab4:	f008 f96e 	bl	8d94 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     ab8:	300c      	adds	r0, #12
     aba:	eb00 0685 	add.w	r6, r0, r5, lsl #2
     abe:	b98f      	cbnz	r7, ae4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
     ac0:	4f0a      	ldr	r7, [pc, #40]	; (aec <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
     ac2:	f104 000c 	add.w	r0, r4, #12
     ac6:	00aa      	lsls	r2, r5, #2
     ac8:	603c      	str	r4, [r7, #0]
     aca:	7225      	strb	r5, [r4, #8]
     acc:	6060      	str	r0, [r4, #4]
     ace:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     ad2:	6020      	str	r0, [r4, #0]
     ad4:	2100      	movs	r1, #0
     ad6:	6860      	ldr	r0, [r4, #4]
     ad8:	f009 fbbe 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     adc:	4641      	mov	r1, r8
     ade:	6838      	ldr	r0, [r7, #0]
     ae0:	f008 f958 	bl	8d94 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
     ae4:	4630      	mov	r0, r6
     ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     aea:	0000      	.short	0x0000
     aec:	2000006c 	.word	0x2000006c

00000af0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
     af0:	490a      	ldr	r1, [pc, #40]	; (b1c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
     af2:	b510      	push	{r4, lr}
     af4:	4602      	mov	r2, r0
     af6:	6809      	ldr	r1, [r1, #0]
     af8:	2000      	movs	r0, #0
     afa:	b159      	cbz	r1, b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
     afc:	7a0b      	ldrb	r3, [r1, #8]
     afe:	4293      	cmp	r3, r2
     b00:	d907      	bls.n	b12 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     b02:	6849      	ldr	r1, [r1, #4]
     b04:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
     b08:	2900      	cmp	r1, #0
     b0a:	d002      	beq.n	b12 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
     b0c:	f831 0b04 	ldrh.w	r0, [r1], #4
     b10:	4408      	add	r0, r1
     b12:	bd10      	pop	{r4, pc}
     b14:	21fa      	movs	r1, #250	; 0xfa
     b16:	2018      	movs	r0, #24
     b18:	f7ff fc4e 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b1c:	2000006c 	.word	0x2000006c

00000b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
     b20:	4801      	ldr	r0, [pc, #4]	; (b28 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
     b22:	7840      	ldrb	r0, [r0, #1]
     b24:	4770      	bx	lr
     b26:	0000      	.short	0x0000
     b28:	20000070 	.word	0x20000070

00000b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
     b2c:	4801      	ldr	r0, [pc, #4]	; (b34 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
     b2e:	6840      	ldr	r0, [r0, #4]
     b30:	4770      	bx	lr
     b32:	0000      	.short	0x0000
     b34:	20000070 	.word	0x20000070

00000b38 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
     b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     b3c:	460c      	mov	r4, r1
     b3e:	4607      	mov	r7, r0
     b40:	4616      	mov	r6, r2
     b42:	2125      	movs	r1, #37	; 0x25
     b44:	4610      	mov	r0, r2
     b46:	460d      	mov	r5, r1
     b48:	4622      	mov	r2, r4
     b4a:	f008 f8e2 	bl	8d12 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
     b4e:	4680      	mov	r8, r0
     b50:	b157      	cbz	r7, b68 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
     b52:	4638      	mov	r0, r7
     b54:	4641      	mov	r1, r8
     b56:	4632      	mov	r2, r6
     b58:	462b      	mov	r3, r5
     b5a:	9400      	str	r4, [sp, #0]
     b5c:	f008 f894 	bl	8c88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
     b60:	4803      	ldr	r0, [pc, #12]	; (b70 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
     b62:	6047      	str	r7, [r0, #4]
     b64:	7004      	strb	r4, [r0, #0]
     b66:	7046      	strb	r6, [r0, #1]
     b68:	4640      	mov	r0, r8
     b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     b6e:	0000      	.short	0x0000
     b70:	20000070 	.word	0x20000070

00000b74 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
     b74:	4802      	ldr	r0, [pc, #8]	; (b80 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
     b76:	7842      	ldrb	r2, [r0, #1]
     b78:	7801      	ldrb	r1, [r0, #0]
     b7a:	6840      	ldr	r0, [r0, #4]
     b7c:	f7ff bfdc 	b.w	b38 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     b80:	20000070 	.word	0x20000070
     b84:	b530      	push	{r4, r5, lr}
     b86:	490d      	ldr	r1, [pc, #52]	; (bbc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
     b88:	2001      	movs	r0, #1
     b8a:	6048      	str	r0, [r1, #4]
     b8c:	1e82      	subs	r2, r0, #2
     b8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     b92:	490b      	ldr	r1, [pc, #44]	; (bc0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
     b94:	6088      	str	r0, [r1, #8]
     b96:	2300      	movs	r3, #0
     b98:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
     b9c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     ba0:	4c08      	ldr	r4, [pc, #32]	; (bc4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
     ba2:	6023      	str	r3, [r4, #0]
     ba4:	1d25      	adds	r5, r4, #4
     ba6:	6028      	str	r0, [r5, #0]
     ba8:	6088      	str	r0, [r1, #8]
     baa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
     bae:	6023      	str	r3, [r4, #0]
     bb0:	6028      	str	r0, [r5, #0]
     bb2:	4906      	ldr	r1, [pc, #24]	; (bcc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
     bb4:	4804      	ldr	r0, [pc, #16]	; (bc8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
     bb6:	6008      	str	r0, [r1, #0]
     bb8:	bd30      	pop	{r4, r5, pc}
     bba:	0000      	.short	0x0000
     bbc:	4000e000 	.word	0x4000e000
     bc0:	4000f000 	.word	0x4000f000
     bc4:	4000f500 	.word	0x4000f500
     bc8:	3ff60000 	.word	0x3ff60000
     bcc:	4001f508 	.word	0x4001f508

00000bd0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
     bd0:	b510      	push	{r4, lr}
     bd2:	f7ff ffd7 	bl	b84 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
     bd6:	f008 f96f 	bl	8eb8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
     bda:	4903      	ldr	r1, [pc, #12]	; (be8 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
     bdc:	4801      	ldr	r0, [pc, #4]	; (be4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
     bde:	6008      	str	r0, [r1, #0]
     be0:	bd10      	pop	{r4, pc}
     be2:	0000      	.short	0x0000
     be4:	3ff60000 	.word	0x3ff60000
     be8:	4001f508 	.word	0x4001f508

00000bec <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
     bec:	b510      	push	{r4, lr}
     bee:	f7ff ffc9 	bl	b84 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
     bf2:	f008 f961 	bl	8eb8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
     bf6:	f000 f887 	bl	d08 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
     bfa:	4905      	ldr	r1, [pc, #20]	; (c10 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
     bfc:	4803      	ldr	r0, [pc, #12]	; (c0c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
     bfe:	6008      	str	r0, [r1, #0]
     c00:	f000 f8b8 	bl	d74 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
     c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     c08:	f000 b8dc 	b.w	dc4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
     c0c:	3ff60000 	.word	0x3ff60000
     c10:	4001f508 	.word	0x4001f508
     c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c18:	4682      	mov	sl, r0
     c1a:	4838      	ldr	r0, [pc, #224]	; (cfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     c1c:	f009 f9b1 	bl	9f82 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
     c20:	f8df b0d8 	ldr.w	fp, [pc, #216]	; cfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
     c24:	b128      	cbz	r0, c32 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
     c26:	2601      	movs	r6, #1
     c28:	f10b 0001 	add.w	r0, fp, #1
     c2c:	21ff      	movs	r1, #255	; 0xff
     c2e:	7001      	strb	r1, [r0, #0]
     c30:	e000      	b.n	c34 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
     c32:	2600      	movs	r6, #0
     c34:	f44f 7580 	mov.w	r5, #256	; 0x100
     c38:	4c31      	ldr	r4, [pc, #196]	; (d00 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
     c3a:	f04f 0800 	mov.w	r8, #0
     c3e:	1d2f      	adds	r7, r5, #4
     c40:	2101      	movs	r1, #1
     c42:	6061      	str	r1, [r4, #4]
     c44:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     c48:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     c4c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
     c50:	6021      	str	r1, [r4, #0]
     c52:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d04 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
     c56:	e01c      	b.n	c92 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c58:	f8d9 0000 	ldr.w	r0, [r9]
     c5c:	06c0      	lsls	r0, r0, #27
     c5e:	d518      	bpl.n	c92 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c60:	200e      	movs	r0, #14
     c62:	f008 f938 	bl	8ed6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
     c66:	f3ef 8010 	mrs	r0, PRIMASK
     c6a:	9000      	str	r0, [sp, #0]
     c6c:	b672      	cpsid	i
     c6e:	2103      	movs	r1, #3
     c70:	4620      	mov	r0, r4
     c72:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
     c76:	4629      	mov	r1, r5
     c78:	f008 f93a 	bl	8ef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c7c:	b930      	cbnz	r0, c8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     c7e:	4639      	mov	r1, r7
     c80:	4620      	mov	r0, r4
     c82:	f008 f935 	bl	8ef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c86:	b908      	cbnz	r0, c8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
     c88:	f009 fa12 	bl	a0b0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
     c8c:	9800      	ldr	r0, [sp, #0]
     c8e:	b900      	cbnz	r0, c92 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
     c90:	b662      	cpsie	i
     c92:	4629      	mov	r1, r5
     c94:	4620      	mov	r0, r4
     c96:	f008 f92b 	bl	8ef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     c9a:	b928      	cbnz	r0, ca8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
     c9c:	4639      	mov	r1, r7
     c9e:	4620      	mov	r0, r4
     ca0:	f008 f926 	bl	8ef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     ca4:	2800      	cmp	r0, #0
     ca6:	d0d7      	beq.n	c58 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
     ca8:	4639      	mov	r1, r7
     caa:	4620      	mov	r0, r4
     cac:	f008 f920 	bl	8ef0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
     cb0:	2800      	cmp	r0, #0
     cb2:	d1c5      	bne.n	c40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
     cb4:	bb06      	cbnz	r6, cf8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     cb6:	f89b 1001 	ldrb.w	r1, [fp, #1]
     cba:	f88d 1000 	strb.w	r1, [sp]
     cbe:	9900      	ldr	r1, [sp, #0]
     cc0:	9100      	str	r1, [sp, #0]
     cc2:	f89d 1000 	ldrb.w	r1, [sp]
     cc6:	b109      	cbz	r1, ccc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
     cc8:	2501      	movs	r5, #1
     cca:	e000      	b.n	cce <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
     ccc:	2500      	movs	r5, #0
     cce:	f10b 0001 	add.w	r0, fp, #1
     cd2:	f880 8000 	strb.w	r8, [r0]
     cd6:	2003      	movs	r0, #3
     cd8:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
     cdc:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
     ce0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
     ce4:	200e      	movs	r0, #14
     ce6:	f008 f8f6 	bl	8ed6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
     cea:	4804      	ldr	r0, [pc, #16]	; (cfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
     cec:	f009 f960 	bl	9fb0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
     cf0:	b115      	cbz	r5, cf8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
     cf2:	2011      	movs	r0, #17
     cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cf8:	2000      	movs	r0, #0
     cfa:	e7fb      	b.n	cf4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
     cfc:	20000174 	.word	0x20000174
     d00:	4000e000 	.word	0x4000e000
     d04:	e000ed10 	.word	0xe000ed10

00000d08 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
     d08:	b510      	push	{r4, lr}
     d0a:	4806      	ldr	r0, [pc, #24]	; (d24 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     d0c:	f009 f94c 	bl	9fa8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
     d10:	b118      	cbz	r0, d1a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
     d12:	2130      	movs	r1, #48	; 0x30
     d14:	201d      	movs	r0, #29
     d16:	f7ff fb4f 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     d1a:	4802      	ldr	r0, [pc, #8]	; (d24 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
     d1c:	2100      	movs	r1, #0
     d1e:	7041      	strb	r1, [r0, #1]
     d20:	bd10      	pop	{r4, pc}
     d22:	0000      	.short	0x0000
     d24:	20000174 	.word	0x20000174

00000d28 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
     d28:	b570      	push	{r4, r5, r6, lr}
     d2a:	4911      	ldr	r1, [pc, #68]	; (d70 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
     d2c:	680a      	ldr	r2, [r1, #0]
     d2e:	b1ea      	cbz	r2, d6c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
     d30:	2300      	movs	r3, #0
     d32:	461d      	mov	r5, r3
     d34:	2401      	movs	r4, #1
     d36:	684a      	ldr	r2, [r1, #4]
     d38:	1c52      	adds	r2, r2, #1
     d3a:	604a      	str	r2, [r1, #4]
     d3c:	2a09      	cmp	r2, #9
     d3e:	d300      	bcc.n	d42 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
     d40:	604d      	str	r5, [r1, #4]
     d42:	790e      	ldrb	r6, [r1, #4]
     d44:	fa04 f206 	lsl.w	r2, r4, r6
     d48:	680e      	ldr	r6, [r1, #0]
     d4a:	4216      	tst	r6, r2
     d4c:	d00b      	beq.n	d66 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
     d4e:	f3ef 8310 	mrs	r3, PRIMASK
     d52:	b672      	cpsid	i
     d54:	680c      	ldr	r4, [r1, #0]
     d56:	4394      	bics	r4, r2
     d58:	600c      	str	r4, [r1, #0]
     d5a:	b903      	cbnz	r3, d5e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
     d5c:	b662      	cpsie	i
     d5e:	6849      	ldr	r1, [r1, #4]
     d60:	6001      	str	r1, [r0, #0]
     d62:	2000      	movs	r0, #0
     d64:	bd70      	pop	{r4, r5, r6, pc}
     d66:	1c5b      	adds	r3, r3, #1
     d68:	2b09      	cmp	r3, #9
     d6a:	d3e4      	bcc.n	d36 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
     d6c:	2005      	movs	r0, #5
     d6e:	bd70      	pop	{r4, r5, r6, pc}
     d70:	20000078 	.word	0x20000078

00000d74 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
     d74:	4802      	ldr	r0, [pc, #8]	; (d80 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
     d76:	2100      	movs	r1, #0
     d78:	6001      	str	r1, [r0, #0]
     d7a:	6041      	str	r1, [r0, #4]
     d7c:	4770      	bx	lr
     d7e:	0000      	.short	0x0000
     d80:	20000078 	.word	0x20000078

00000d84 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
     d84:	b510      	push	{r4, lr}
     d86:	4c04      	ldr	r4, [pc, #16]	; (d98 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
     d88:	7820      	ldrb	r0, [r4, #0]
     d8a:	28ff      	cmp	r0, #255	; 0xff
     d8c:	d003      	beq.n	d96 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
     d8e:	f007 f8b5 	bl	7efc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     d92:	20ff      	movs	r0, #255	; 0xff
     d94:	7020      	strb	r0, [r4, #0]
     d96:	bd10      	pop	{r4, pc}
     d98:	20000000 	.word	0x20000000

00000d9c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
     d9c:	b510      	push	{r4, lr}
     d9e:	4c08      	ldr	r4, [pc, #32]	; (dc0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
     da0:	7861      	ldrb	r1, [r4, #1]
     da2:	b109      	cbz	r1, da8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
     da4:	200f      	movs	r0, #15
     da6:	bd10      	pop	{r4, pc}
     da8:	f007 f86e 	bl	7e88 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     dac:	7020      	strb	r0, [r4, #0]
     dae:	28ff      	cmp	r0, #255	; 0xff
     db0:	d001      	beq.n	db6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
     db2:	2000      	movs	r0, #0
     db4:	bd10      	pop	{r4, pc}
     db6:	2173      	movs	r1, #115	; 0x73
     db8:	201f      	movs	r0, #31
     dba:	f7ff fafd 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     dbe:	0000      	.short	0x0000
     dc0:	20000000 	.word	0x20000000

00000dc4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
     dc4:	4901      	ldr	r1, [pc, #4]	; (dcc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
     dc6:	2000      	movs	r0, #0
     dc8:	7048      	strb	r0, [r1, #1]
     dca:	4770      	bx	lr
     dcc:	20000000 	.word	0x20000000
     dd0:	4905      	ldr	r1, [pc, #20]	; (de8 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x24>)
     dd2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
     dd4:	4282      	cmp	r2, r0
     dd6:	d105      	bne.n	de4 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x20>
     dd8:	2000      	movs	r0, #0
     dda:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
     dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
     de2:	8488      	strh	r0, [r1, #36]	; 0x24
     de4:	4770      	bx	lr
     de6:	0000      	.short	0x0000
     de8:	20001084 	.word	0x20001084

00000dec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
     dec:	4a0a      	ldr	r2, [pc, #40]	; (e18 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
     dee:	b110      	cbz	r0, df6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
     df0:	2801      	cmp	r0, #1
     df2:	d007      	beq.n	e04 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
     df4:	e00e      	b.n	e14 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     df6:	7850      	ldrb	r0, [r2, #1]
     df8:	b160      	cbz	r0, e14 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     dfa:	f8d2 0002 	ldr.w	r0, [r2, #2]
     dfe:	6008      	str	r0, [r1, #0]
     e00:	88d0      	ldrh	r0, [r2, #6]
     e02:	e004      	b.n	e0e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
     e04:	7810      	ldrb	r0, [r2, #0]
     e06:	b128      	cbz	r0, e14 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
     e08:	6890      	ldr	r0, [r2, #8]
     e0a:	6008      	str	r0, [r1, #0]
     e0c:	8990      	ldrh	r0, [r2, #12]
     e0e:	8088      	strh	r0, [r1, #4]
     e10:	2001      	movs	r0, #1
     e12:	4770      	bx	lr
     e14:	2000      	movs	r0, #0
     e16:	4770      	bx	lr
     e18:	20000176 	.word	0x20000176

00000e1c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
     e1c:	4a08      	ldr	r2, [pc, #32]	; (e40 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
     e1e:	2301      	movs	r3, #1
     e20:	b138      	cbz	r0, e32 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
     e22:	2801      	cmp	r0, #1
     e24:	d104      	bne.n	e30 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
     e26:	7013      	strb	r3, [r2, #0]
     e28:	6808      	ldr	r0, [r1, #0]
     e2a:	6090      	str	r0, [r2, #8]
     e2c:	8888      	ldrh	r0, [r1, #4]
     e2e:	8190      	strh	r0, [r2, #12]
     e30:	4770      	bx	lr
     e32:	7053      	strb	r3, [r2, #1]
     e34:	6808      	ldr	r0, [r1, #0]
     e36:	f8c2 0002 	str.w	r0, [r2, #2]
     e3a:	8888      	ldrh	r0, [r1, #4]
     e3c:	80d0      	strh	r0, [r2, #6]
     e3e:	4770      	bx	lr
     e40:	20000176 	.word	0x20000176

00000e44 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
     e44:	4906      	ldr	r1, [pc, #24]	; (e60 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
     e46:	b110      	cbz	r0, e4e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
     e48:	2801      	cmp	r0, #1
     e4a:	d002      	beq.n	e52 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
     e4c:	e005      	b.n	e5a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
     e4e:	7848      	ldrb	r0, [r1, #1]
     e50:	e000      	b.n	e54 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
     e52:	7808      	ldrb	r0, [r1, #0]
     e54:	b108      	cbz	r0, e5a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
     e56:	2001      	movs	r0, #1
     e58:	4770      	bx	lr
     e5a:	2000      	movs	r0, #0
     e5c:	4770      	bx	lr
     e5e:	0000      	.short	0x0000
     e60:	20000176 	.word	0x20000176

00000e64 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
     e64:	4901      	ldr	r1, [pc, #4]	; (e6c <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
     e66:	7708      	strb	r0, [r1, #28]
     e68:	4770      	bx	lr
     e6a:	0000      	.short	0x0000
     e6c:	20000792 	.word	0x20000792

00000e70 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
     e70:	4800      	ldr	r0, [pc, #0]	; (e74 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
     e72:	4770      	bx	lr
     e74:	20001234 	.word	0x20001234

00000e78 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
     e78:	4904      	ldr	r1, [pc, #16]	; (e8c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
     e7a:	784a      	ldrb	r2, [r1, #1]
     e7c:	4282      	cmp	r2, r0
     e7e:	d903      	bls.n	e88 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
     e80:	4408      	add	r0, r1
     e82:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
     e86:	4770      	bx	lr
     e88:	2000      	movs	r0, #0
     e8a:	4770      	bx	lr
     e8c:	200010aa 	.word	0x200010aa

00000e90 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
     e90:	4904      	ldr	r1, [pc, #16]	; (ea4 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
     e92:	784a      	ldrb	r2, [r1, #1]
     e94:	4282      	cmp	r2, r0
     e96:	d903      	bls.n	ea0 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
     e98:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     e9c:	3082      	adds	r0, #130	; 0x82
     e9e:	4770      	bx	lr
     ea0:	2000      	movs	r0, #0
     ea2:	4770      	bx	lr
     ea4:	200010aa 	.word	0x200010aa

00000ea8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
     ea8:	4a05      	ldr	r2, [pc, #20]	; (ec0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
     eaa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     eae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
     eb2:	6802      	ldr	r2, [r0, #0]
     eb4:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
     eb8:	8880      	ldrh	r0, [r0, #4]
     eba:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
     ebe:	4770      	bx	lr
     ec0:	200010aa 	.word	0x200010aa

00000ec4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
     ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ec8:	4607      	mov	r7, r0
     eca:	2400      	movs	r4, #0
     ecc:	4d10      	ldr	r5, [pc, #64]	; (f10 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
     ece:	e019      	b.n	f04 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
     ed0:	4620      	mov	r0, r4
     ed2:	f7ff ffdd 	bl	e90 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
     ed6:	0003      	movs	r3, r0
     ed8:	d012      	beq.n	f00 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
     eda:	1928      	adds	r0, r5, r4
     edc:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
     ee0:	b970      	cbnz	r0, f00 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
     ee2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     ee6:	eb05 0640 	add.w	r6, r5, r0, lsl #1
     eea:	f506 7685 	add.w	r6, r6, #266	; 0x10a
     eee:	463a      	mov	r2, r7
     ef0:	4631      	mov	r1, r6
     ef2:	4618      	mov	r0, r3
     ef4:	f008 f845 	bl	8f82 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
     ef8:	4630      	mov	r0, r6
     efa:	4621      	mov	r1, r4
     efc:	f7ff ffd4 	bl	ea8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
     f00:	1c64      	adds	r4, r4, #1
     f02:	b2e4      	uxtb	r4, r4
     f04:	7868      	ldrb	r0, [r5, #1]
     f06:	42a0      	cmp	r0, r4
     f08:	d8e2      	bhi.n	ed0 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
     f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f0e:	0000      	.short	0x0000
     f10:	200010aa 	.word	0x200010aa

00000f14 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
     f14:	4904      	ldr	r1, [pc, #16]	; (f28 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
     f16:	784a      	ldrb	r2, [r1, #1]
     f18:	4282      	cmp	r2, r0
     f1a:	d903      	bls.n	f24 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
     f1c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
     f20:	1c80      	adds	r0, r0, #2
     f22:	4770      	bx	lr
     f24:	2000      	movs	r0, #0
     f26:	4770      	bx	lr
     f28:	200010aa 	.word	0x200010aa

00000f2c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
     f2c:	4908      	ldr	r1, [pc, #32]	; (f50 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
     f2e:	784a      	ldrb	r2, [r1, #1]
     f30:	4282      	cmp	r2, r0
     f32:	d903      	bls.n	f3c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
     f34:	180a      	adds	r2, r1, r0
     f36:	f892 2142 	ldrb.w	r2, [r2, #322]	; 0x142
     f3a:	b10a      	cbz	r2, f40 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
     f3c:	2000      	movs	r0, #0
     f3e:	4770      	bx	lr
     f40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     f44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
     f48:	f500 7085 	add.w	r0, r0, #266	; 0x10a
     f4c:	4770      	bx	lr
     f4e:	0000      	.short	0x0000
     f50:	200010aa 	.word	0x200010aa

00000f54 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
     f54:	b510      	push	{r4, lr}
     f56:	f44f 72c5 	mov.w	r2, #394	; 0x18a
     f5a:	2100      	movs	r1, #0
     f5c:	4805      	ldr	r0, [pc, #20]	; (f74 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
     f5e:	f009 f97b 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     f62:	4805      	ldr	r0, [pc, #20]	; (f78 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
     f64:	2100      	movs	r1, #0
     f66:	7001      	strb	r1, [r0, #0]
     f68:	7041      	strb	r1, [r0, #1]
     f6a:	f44f 7161 	mov.w	r1, #900	; 0x384
     f6e:	8041      	strh	r1, [r0, #2]
     f70:	bd10      	pop	{r4, pc}
     f72:	0000      	.short	0x0000
     f74:	200010aa 	.word	0x200010aa
     f78:	2000016c 	.word	0x2000016c

00000f7c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
     f7c:	4b0b      	ldr	r3, [pc, #44]	; (fac <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
     f7e:	b510      	push	{r4, lr}
     f80:	785c      	ldrb	r4, [r3, #1]
     f82:	4284      	cmp	r4, r0
     f84:	d910      	bls.n	fa8 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
     f86:	4418      	add	r0, r3
     f88:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
     f8c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
     f90:	4418      	add	r0, r3
     f92:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
     f96:	700b      	strb	r3, [r1, #0]
     f98:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
     f9c:	6011      	str	r1, [r2, #0]
     f9e:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
     fa2:	8090      	strh	r0, [r2, #4]
     fa4:	2001      	movs	r0, #1
     fa6:	bd10      	pop	{r4, pc}
     fa8:	2000      	movs	r0, #0
     faa:	bd10      	pop	{r4, pc}
     fac:	200010aa 	.word	0x200010aa

00000fb0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
     fb0:	4801      	ldr	r0, [pc, #4]	; (fb8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
     fb2:	8840      	ldrh	r0, [r0, #2]
     fb4:	4770      	bx	lr
     fb6:	0000      	.short	0x0000
     fb8:	2000016c 	.word	0x2000016c

00000fbc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
     fbc:	b570      	push	{r4, r5, r6, lr}
     fbe:	2401      	movs	r4, #1
     fc0:	4616      	mov	r6, r2
     fc2:	4625      	mov	r5, r4
     fc4:	f000 f856 	bl	1074 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
     fc8:	2808      	cmp	r0, #8
     fca:	d019      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     fcc:	f000 f83e 	bl	104c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
     fd0:	4603      	mov	r3, r0
     fd2:	2808      	cmp	r0, #8
     fd4:	d014      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     fd6:	b106      	cbz	r6, fda <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x1e>
     fd8:	7033      	strb	r3, [r6, #0]
     fda:	4618      	mov	r0, r3
     fdc:	f7ff ff9a 	bl	f14 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
     fe0:	b170      	cbz	r0, 1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     fe2:	480a      	ldr	r0, [pc, #40]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fe4:	7841      	ldrb	r1, [r0, #1]
     fe6:	4299      	cmp	r1, r3
     fe8:	d903      	bls.n	ff2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x36>
     fea:	18c1      	adds	r1, r0, r3
     fec:	f891 514a 	ldrb.w	r5, [r1, #330]	; 0x14a
     ff0:	e000      	b.n	ff4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
     ff2:	2500      	movs	r5, #0
     ff4:	4418      	add	r0, r3
     ff6:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
     ffa:	2801      	cmp	r0, #1
     ffc:	d003      	beq.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
     ffe:	2400      	movs	r4, #0
    1000:	ea44 0005 	orr.w	r0, r4, r5
    1004:	bd70      	pop	{r4, r5, r6, pc}
    1006:	2401      	movs	r4, #1
    1008:	e7fa      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    100a:	0000      	.short	0x0000
    100c:	200010aa 	.word	0x200010aa

00001010 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    1010:	4901      	ldr	r1, [pc, #4]	; (1018 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    1012:	7048      	strb	r0, [r1, #1]
    1014:	4770      	bx	lr
    1016:	0000      	.short	0x0000
    1018:	2000016c 	.word	0x2000016c
    101c:	4602      	mov	r2, r0
    101e:	4809      	ldr	r0, [pc, #36]	; (1044 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    1020:	b510      	push	{r4, lr}
    1022:	7800      	ldrb	r0, [r0, #0]
    1024:	460b      	mov	r3, r1
    1026:	b158      	cbz	r0, 1040 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    1028:	4807      	ldr	r0, [pc, #28]	; (1048 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    102a:	7841      	ldrb	r1, [r0, #1]
    102c:	b141      	cbz	r1, 1040 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    102e:	b10b      	cbz	r3, 1034 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    1030:	1c80      	adds	r0, r0, #2
    1032:	e001      	b.n	1038 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    1034:	4804      	ldr	r0, [pc, #16]	; (1048 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    1036:	3082      	adds	r0, #130	; 0x82
    1038:	f002 fa2e 	bl	3498 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    103c:	2001      	movs	r0, #1
    103e:	bd10      	pop	{r4, pc}
    1040:	2000      	movs	r0, #0
    1042:	bd10      	pop	{r4, pc}
    1044:	2000016c 	.word	0x2000016c
    1048:	200010aa 	.word	0x200010aa
    104c:	4908      	ldr	r1, [pc, #32]	; (1070 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    104e:	b510      	push	{r4, lr}
    1050:	4603      	mov	r3, r0
    1052:	2000      	movs	r0, #0
    1054:	784a      	ldrb	r2, [r1, #1]
    1056:	e006      	b.n	1066 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    1058:	180c      	adds	r4, r1, r0
    105a:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    105e:	429c      	cmp	r4, r3
    1060:	d004      	beq.n	106c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    1062:	1c40      	adds	r0, r0, #1
    1064:	b2c0      	uxtb	r0, r0
    1066:	4282      	cmp	r2, r0
    1068:	d8f6      	bhi.n	1058 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    106a:	2008      	movs	r0, #8
    106c:	bd10      	pop	{r4, pc}
    106e:	0000      	.short	0x0000
    1070:	200010aa 	.word	0x200010aa
    1074:	b5f0      	push	{r4, r5, r6, r7, lr}
    1076:	4c1a      	ldr	r4, [pc, #104]	; (10e0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    1078:	4603      	mov	r3, r0
    107a:	2000      	movs	r0, #0
    107c:	7825      	ldrb	r5, [r4, #0]
    107e:	e02b      	b.n	10d8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    1080:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    1084:	4422      	add	r2, r4
    1086:	780f      	ldrb	r7, [r1, #0]
    1088:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    108c:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    1090:	ea87 070c 	eor.w	r7, r7, ip
    1094:	405e      	eors	r6, r3
    1096:	443e      	add	r6, r7
    1098:	784f      	ldrb	r7, [r1, #1]
    109a:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    109e:	ea87 070c 	eor.w	r7, r7, ip
    10a2:	443e      	add	r6, r7
    10a4:	788f      	ldrb	r7, [r1, #2]
    10a6:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    10aa:	ea87 070c 	eor.w	r7, r7, ip
    10ae:	443e      	add	r6, r7
    10b0:	78cf      	ldrb	r7, [r1, #3]
    10b2:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    10b6:	ea87 070c 	eor.w	r7, r7, ip
    10ba:	443e      	add	r6, r7
    10bc:	790f      	ldrb	r7, [r1, #4]
    10be:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    10c2:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    10c6:	ea87 070c 	eor.w	r7, r7, ip
    10ca:	443e      	add	r6, r7
    10cc:	794f      	ldrb	r7, [r1, #5]
    10ce:	4057      	eors	r7, r2
    10d0:	42f7      	cmn	r7, r6
    10d2:	d004      	beq.n	10de <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    10d4:	1c40      	adds	r0, r0, #1
    10d6:	b2c0      	uxtb	r0, r0
    10d8:	4285      	cmp	r5, r0
    10da:	d8d1      	bhi.n	1080 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    10dc:	2008      	movs	r0, #8
    10de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10e0:	200010aa 	.word	0x200010aa

000010e4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    10e4:	4902      	ldr	r1, [pc, #8]	; (10f0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    10e6:	f991 1000 	ldrsb.w	r1, [r1]
    10ea:	f008 b844 	b.w	9176 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    10ee:	0000      	.short	0x0000
    10f0:	20000184 	.word	0x20000184

000010f4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    10f4:	b508      	push	{r3, lr}
    10f6:	207f      	movs	r0, #127	; 0x7f
    10f8:	f88d 0000 	strb.w	r0, [sp]
    10fc:	4668      	mov	r0, sp
    10fe:	f002 fdaf 	bl	3c60 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    1102:	b140      	cbz	r0, 1116 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    1104:	4805      	ldr	r0, [pc, #20]	; (111c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    1106:	7840      	ldrb	r0, [r0, #1]
    1108:	4240      	negs	r0, r0
    110a:	b241      	sxtb	r1, r0
    110c:	f99d 0000 	ldrsb.w	r0, [sp]
    1110:	f008 f831 	bl	9176 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    1114:	bd08      	pop	{r3, pc}
    1116:	f99d 0000 	ldrsb.w	r0, [sp]
    111a:	bd08      	pop	{r3, pc}
    111c:	20000184 	.word	0x20000184

00001120 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    1120:	4a01      	ldr	r2, [pc, #4]	; (1128 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    1122:	7010      	strb	r0, [r2, #0]
    1124:	7051      	strb	r1, [r2, #1]
    1126:	4770      	bx	lr
    1128:	20000184 	.word	0x20000184

0000112c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    112c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1130:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 12d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1ac>
    1134:	4f69      	ldr	r7, [pc, #420]	; (12dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    1136:	4683      	mov	fp, r0
    1138:	f04f 0a01 	mov.w	sl, #1
    113c:	2600      	movs	r6, #0
    113e:	6878      	ldr	r0, [r7, #4]
    1140:	4635      	mov	r5, r6
    1142:	7a00      	ldrb	r0, [r0, #8]
    1144:	f88d 0000 	strb.w	r0, [sp]
    1148:	9800      	ldr	r0, [sp, #0]
    114a:	9000      	str	r0, [sp, #0]
    114c:	f89d 1000 	ldrb.w	r1, [sp]
    1150:	2910      	cmp	r1, #16
    1152:	d106      	bne.n	1162 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    1154:	f899 1013 	ldrb.w	r1, [r9, #19]
    1158:	b119      	cbz	r1, 1162 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    115a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    115e:	2800      	cmp	r0, #0
    1160:	d077      	beq.n	1252 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1162:	f88d 6000 	strb.w	r6, [sp]
    1166:	4668      	mov	r0, sp
    1168:	f000 f8c2 	bl	12f0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc>
    116c:	f89d 1000 	ldrb.w	r1, [sp]
    1170:	2900      	cmp	r1, #0
    1172:	d1f8      	bne.n	1166 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    1174:	2800      	cmp	r0, #0
    1176:	d06c      	beq.n	1252 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1178:	4604      	mov	r4, r0
    117a:	7a00      	ldrb	r0, [r0, #8]
    117c:	f88d 0000 	strb.w	r0, [sp]
    1180:	9800      	ldr	r0, [sp, #0]
    1182:	9000      	str	r0, [sp, #0]
    1184:	f89d 8000 	ldrb.w	r8, [sp]
    1188:	f104 0008 	add.w	r0, r4, #8
    118c:	2105      	movs	r1, #5
    118e:	9000      	str	r0, [sp, #0]
    1190:	7001      	strb	r1, [r0, #0]
    1192:	4640      	mov	r0, r8
    1194:	f1b8 0f06 	cmp.w	r8, #6
    1198:	d030      	beq.n	11fc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xd0>
    119a:	dc07      	bgt.n	11ac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    119c:	2802      	cmp	r0, #2
    119e:	d00f      	beq.n	11c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    11a0:	2803      	cmp	r0, #3
    11a2:	d019      	beq.n	11d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    11a4:	f1b8 0f04 	cmp.w	r8, #4
    11a8:	d107      	bne.n	11ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8e>
    11aa:	e01f      	b.n	11ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    11ac:	2808      	cmp	r0, #8
    11ae:	d035      	beq.n	121c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    11b0:	280f      	cmp	r0, #15
    11b2:	d052      	beq.n	125a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12e>
    11b4:	f1b8 0f10 	cmp.w	r8, #16
    11b8:	d059      	beq.n	126e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x142>
    11ba:	f240 214a 	movw	r1, #586	; 0x24a
    11be:	e064      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11c0:	6862      	ldr	r2, [r4, #4]
    11c2:	b132      	cbz	r2, 11d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa6>
    11c4:	4659      	mov	r1, fp
    11c6:	4620      	mov	r0, r4
    11c8:	4790      	blx	r2
    11ca:	2004      	movs	r0, #4
    11cc:	f360 0507 	bfi	r5, r0, #0, #8
    11d0:	e05e      	b.n	1290 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11d2:	f240 11c3 	movw	r1, #451	; 0x1c3
    11d6:	e058      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11d8:	6862      	ldr	r2, [r4, #4]
    11da:	b122      	cbz	r2, 11e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xba>
    11dc:	4659      	mov	r1, fp
    11de:	4620      	mov	r0, r4
    11e0:	4790      	blx	r2
    11e2:	4605      	mov	r5, r0
    11e4:	e054      	b.n	1290 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11e6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    11ea:	e04e      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11ec:	6861      	ldr	r1, [r4, #4]
    11ee:	b111      	cbz	r1, 11f6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    11f0:	4620      	mov	r0, r4
    11f2:	4788      	blx	r1
    11f4:	e04c      	b.n	1290 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    11f6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    11fa:	e046      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    11fc:	6862      	ldr	r2, [r4, #4]
    11fe:	b132      	cbz	r2, 120e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe2>
    1200:	4659      	mov	r1, fp
    1202:	4620      	mov	r0, r4
    1204:	4790      	blx	r2
    1206:	f001 fad1 	bl	27ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    120a:	b118      	cbz	r0, 1214 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xe8>
    120c:	e01f      	b.n	124e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    120e:	f240 2111 	movw	r1, #529	; 0x211
    1212:	e03a      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    1214:	f000 fac4 	bl	17a0 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    1218:	b3a0      	cbz	r0, 1284 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    121a:	e018      	b.n	124e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    121c:	4601      	mov	r1, r0
    121e:	6860      	ldr	r0, [r4, #4]
    1220:	465d      	mov	r5, fp
    1222:	b118      	cbz	r0, 122c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x100>
    1224:	8804      	ldrh	r4, [r0, #0]
    1226:	2908      	cmp	r1, #8
    1228:	d111      	bne.n	124e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    122a:	e001      	b.n	1230 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x104>
    122c:	21e5      	movs	r1, #229	; 0xe5
    122e:	e02c      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    1230:	4620      	mov	r0, r4
    1232:	f7ff fc5d 	bl	af0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    1236:	b170      	cbz	r0, 1256 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    1238:	706e      	strb	r6, [r5, #1]
    123a:	220f      	movs	r2, #15
    123c:	702a      	strb	r2, [r5, #0]
    123e:	80ec      	strh	r4, [r5, #6]
    1240:	f8a5 a008 	strh.w	sl, [r5, #8]
    1244:	4631      	mov	r1, r6
    1246:	f885 a004 	strb.w	sl, [r5, #4]
    124a:	f007 fd46 	bl	8cda <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    124e:	2004      	movs	r0, #4
    1250:	613e      	str	r6, [r7, #16]
    1252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1256:	21c5      	movs	r1, #197	; 0xc5
    1258:	e017      	b.n	128a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    125a:	f88b 6001 	strb.w	r6, [fp, #1]
    125e:	211a      	movs	r1, #26
    1260:	f88b 1000 	strb.w	r1, [fp]
    1264:	f8d4 1009 	ldr.w	r1, [r4, #9]
    1268:	f8cb 1004 	str.w	r1, [fp, #4]
    126c:	e7ad      	b.n	11ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    126e:	481c      	ldr	r0, [pc, #112]	; (12e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>)
    1270:	6802      	ldr	r2, [r0, #0]
    1272:	b122      	cbz	r2, 127e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x152>
    1274:	6860      	ldr	r0, [r4, #4]
    1276:	b130      	cbz	r0, 1286 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15a>
    1278:	8800      	ldrh	r0, [r0, #0]
    127a:	4659      	mov	r1, fp
    127c:	4790      	blx	r2
    127e:	2002      	movs	r0, #2
    1280:	613e      	str	r6, [r7, #16]
    1282:	e7e6      	b.n	1252 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    1284:	e004      	b.n	1290 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    1286:	f44f 7110 	mov.w	r1, #576	; 0x240
    128a:	2010      	movs	r0, #16
    128c:	f7ff f894 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1290:	f3c5 2007 	ubfx	r0, r5, #8, #8
    1294:	2801      	cmp	r0, #1
    1296:	d010      	beq.n	12ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    1298:	f3ef 8010 	mrs	r0, PRIMASK
    129c:	b672      	cpsid	i
    129e:	7a21      	ldrb	r1, [r4, #8]
    12a0:	f88d 1000 	strb.w	r1, [sp]
    12a4:	9900      	ldr	r1, [sp, #0]
    12a6:	9100      	str	r1, [sp, #0]
    12a8:	f89d 1000 	ldrb.w	r1, [sp]
    12ac:	2905      	cmp	r1, #5
    12ae:	d008      	beq.n	12c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    12b0:	b139      	cbz	r1, 12c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x196>
    12b2:	f366 0507 	bfi	r5, r6, #0, #8
    12b6:	b138      	cbz	r0, 12c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    12b8:	e007      	b.n	12ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    12ba:	9800      	ldr	r0, [sp, #0]
    12bc:	4641      	mov	r1, r8
    12be:	7001      	strb	r1, [r0, #0]
    12c0:	e003      	b.n	12ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    12c2:	7226      	strb	r6, [r4, #8]
    12c4:	613e      	str	r6, [r7, #16]
    12c6:	e7f6      	b.n	12b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18a>
    12c8:	b662      	cpsie	i
    12ca:	f015 0fff 	tst.w	r5, #255	; 0xff
    12ce:	f43f af36 	beq.w	113e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    12d2:	b2e8      	uxtb	r0, r5
    12d4:	e7bd      	b.n	1252 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    12d6:	0000      	.short	0x0000
    12d8:	20000fc4 	.word	0x20000fc4
    12dc:	20000ff0 	.word	0x20000ff0
    12e0:	20000080 	.word	0x20000080

000012e4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    12e4:	4901      	ldr	r1, [pc, #4]	; (12ec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    12e6:	7008      	strb	r0, [r1, #0]
    12e8:	f000 b864 	b.w	13b4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    12ec:	20000186 	.word	0x20000186
    12f0:	b538      	push	{r3, r4, r5, lr}
    12f2:	4603      	mov	r3, r0
    12f4:	4917      	ldr	r1, [pc, #92]	; (1354 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x70>)
    12f6:	2000      	movs	r0, #0
    12f8:	7018      	strb	r0, [r3, #0]
    12fa:	6908      	ldr	r0, [r1, #16]
    12fc:	2401      	movs	r4, #1
    12fe:	b140      	cbz	r0, 1312 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x2e>
    1300:	7a02      	ldrb	r2, [r0, #8]
    1302:	f88d 2000 	strb.w	r2, [sp]
    1306:	9a00      	ldr	r2, [sp, #0]
    1308:	9200      	str	r2, [sp, #0]
    130a:	f89d 5000 	ldrb.w	r5, [sp]
    130e:	2d00      	cmp	r5, #0
    1310:	d111      	bne.n	1336 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x52>
    1312:	6848      	ldr	r0, [r1, #4]
    1314:	7a02      	ldrb	r2, [r0, #8]
    1316:	f88d 2000 	strb.w	r2, [sp]
    131a:	9a00      	ldr	r2, [sp, #0]
    131c:	9200      	str	r2, [sp, #0]
    131e:	f89d 5000 	ldrb.w	r5, [sp]
    1322:	2d01      	cmp	r5, #1
    1324:	d006      	beq.n	1334 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x50>
    1326:	f3ef 8210 	mrs	r2, PRIMASK
    132a:	b672      	cpsid	i
    132c:	6805      	ldr	r5, [r0, #0]
    132e:	604d      	str	r5, [r1, #4]
    1330:	b112      	cbz	r2, 1338 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x54>
    1332:	e002      	b.n	133a <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x56>
    1334:	2000      	movs	r0, #0
    1336:	bd38      	pop	{r3, r4, r5, pc}
    1338:	b662      	cpsie	i
    133a:	7a02      	ldrb	r2, [r0, #8]
    133c:	f88d 2000 	strb.w	r2, [sp]
    1340:	9a00      	ldr	r2, [sp, #0]
    1342:	9200      	str	r2, [sp, #0]
    1344:	f89d 5000 	ldrb.w	r5, [sp]
    1348:	b10d      	cbz	r5, 134e <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x6a>
    134a:	6108      	str	r0, [r1, #16]
    134c:	bd38      	pop	{r3, r4, r5, pc}
    134e:	701c      	strb	r4, [r3, #0]
    1350:	bd38      	pop	{r3, r4, r5, pc}
    1352:	0000      	.short	0x0000
    1354:	20000ff0 	.word	0x20000ff0
    1358:	b538      	push	{r3, r4, r5, lr}
    135a:	b1d0      	cbz	r0, 1392 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xae>
    135c:	6041      	str	r1, [r0, #4]
    135e:	f100 0108 	add.w	r1, r0, #8
    1362:	700a      	strb	r2, [r1, #0]
    1364:	f3ef 8310 	mrs	r3, PRIMASK
    1368:	b672      	cpsid	i
    136a:	4c10      	ldr	r4, [pc, #64]	; (13ac <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xc8>)
    136c:	6004      	str	r4, [r0, #0]
    136e:	1f21      	subs	r1, r4, #4
    1370:	684a      	ldr	r2, [r1, #4]
    1372:	b14a      	cbz	r2, 1388 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1374:	7a12      	ldrb	r2, [r2, #8]
    1376:	f88d 2000 	strb.w	r2, [sp]
    137a:	9a00      	ldr	r2, [sp, #0]
    137c:	9200      	str	r2, [sp, #0]
    137e:	f89d 5000 	ldrb.w	r5, [sp]
    1382:	2d01      	cmp	r5, #1
    1384:	d100      	bne.n	1388 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xa4>
    1386:	600c      	str	r4, [r1, #0]
    1388:	680a      	ldr	r2, [r1, #0]
    138a:	6010      	str	r0, [r2, #0]
    138c:	6008      	str	r0, [r1, #0]
    138e:	b12b      	cbz	r3, 139c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xb8>
    1390:	e005      	b.n	139e <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xba>
    1392:	f240 2175 	movw	r1, #629	; 0x275
    1396:	2010      	movs	r0, #16
    1398:	f7ff f80e 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    139c:	b662      	cpsie	i
    139e:	4804      	ldr	r0, [pc, #16]	; (13b0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xcc>)
    13a0:	7800      	ldrb	r0, [r0, #0]
    13a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    13a6:	f006 bd8d 	b.w	7ec4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    13aa:	0000      	.short	0x0000
    13ac:	20000ff4 	.word	0x20000ff4
    13b0:	20000186 	.word	0x20000186
    13b4:	b510      	push	{r4, lr}
    13b6:	2214      	movs	r2, #20
    13b8:	2100      	movs	r1, #0
    13ba:	4808      	ldr	r0, [pc, #32]	; (13dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    13bc:	f008 ff4c 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    13c0:	4806      	ldr	r0, [pc, #24]	; (13dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    13c2:	2212      	movs	r2, #18
    13c4:	2100      	movs	r1, #0
    13c6:	3814      	subs	r0, #20
    13c8:	f008 ff46 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    13cc:	4803      	ldr	r0, [pc, #12]	; (13dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xf8>)
    13ce:	2101      	movs	r1, #1
    13d0:	7301      	strb	r1, [r0, #12]
    13d2:	1d01      	adds	r1, r0, #4
    13d4:	6041      	str	r1, [r0, #4]
    13d6:	6001      	str	r1, [r0, #0]
    13d8:	bd10      	pop	{r4, pc}
    13da:	0000      	.short	0x0000
    13dc:	20000ff0 	.word	0x20000ff0

000013e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    13e0:	b510      	push	{r4, lr}
    13e2:	4804      	ldr	r0, [pc, #16]	; (13f4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    13e4:	f007 ff46 	bl	9274 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    13e8:	4802      	ldr	r0, [pc, #8]	; (13f4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    13ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    13ee:	3008      	adds	r0, #8
    13f0:	f007 bf40 	b.w	9274 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    13f4:	20000084 	.word	0x20000084

000013f8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    13f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13fa:	f007 ff4f 	bl	929c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    13fe:	4604      	mov	r4, r0
    1400:	460d      	mov	r5, r1
    1402:	466a      	mov	r2, sp
    1404:	f000 f862 	bl	14cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1408:	b108      	cbz	r0, 140e <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    140a:	2001      	movs	r0, #1
    140c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    140e:	480f      	ldr	r0, [pc, #60]	; (144c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    1410:	7803      	ldrb	r3, [r0, #0]
    1412:	7841      	ldrb	r1, [r0, #1]
    1414:	428b      	cmp	r3, r1
    1416:	d101      	bne.n	141c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    1418:	2000      	movs	r0, #0
    141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    141c:	461a      	mov	r2, r3
    141e:	6841      	ldr	r1, [r0, #4]
    1420:	e008      	b.n	1434 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    1422:	bf00      	nop
    1424:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    1428:	1e52      	subs	r2, r2, #1
    142a:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    142e:	e9c6 7c00 	strd	r7, ip, [r6]
    1432:	b2d2      	uxtb	r2, r2
    1434:	f89d 6000 	ldrb.w	r6, [sp]
    1438:	42b2      	cmp	r2, r6
    143a:	d8f3      	bhi.n	1424 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    143c:	b2f2      	uxtb	r2, r6
    143e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    1442:	1c5b      	adds	r3, r3, #1
    1444:	e9c1 4500 	strd	r4, r5, [r1]
    1448:	7003      	strb	r3, [r0, #0]
    144a:	e7de      	b.n	140a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    144c:	20000094 	.word	0x20000094

00001450 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    1450:	b510      	push	{r4, lr}
    1452:	0742      	lsls	r2, r0, #29
    1454:	d003      	beq.n	145e <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    1456:	2163      	movs	r1, #99	; 0x63
    1458:	2048      	movs	r0, #72	; 0x48
    145a:	f7fe ffad 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    145e:	b120      	cbz	r0, 146a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    1460:	4a03      	ldr	r2, [pc, #12]	; (1470 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    1462:	7051      	strb	r1, [r2, #1]
    1464:	6050      	str	r0, [r2, #4]
    1466:	2000      	movs	r0, #0
    1468:	7010      	strb	r0, [r2, #0]
    146a:	00c8      	lsls	r0, r1, #3
    146c:	bd10      	pop	{r4, pc}
    146e:	0000      	.short	0x0000
    1470:	20000094 	.word	0x20000094

00001474 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    1474:	b538      	push	{r3, r4, r5, lr}
    1476:	f007 ff11 	bl	929c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    147a:	466a      	mov	r2, sp
    147c:	f000 f826 	bl	14cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    1480:	2800      	cmp	r0, #0
    1482:	d014      	beq.n	14ae <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    1484:	4a0a      	ldr	r2, [pc, #40]	; (14b0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    1486:	7810      	ldrb	r0, [r2, #0]
    1488:	1e40      	subs	r0, r0, #1
    148a:	b2c1      	uxtb	r1, r0
    148c:	7011      	strb	r1, [r2, #0]
    148e:	f89d 0000 	ldrb.w	r0, [sp]
    1492:	6852      	ldr	r2, [r2, #4]
    1494:	e008      	b.n	14a8 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    1496:	bf00      	nop
    1498:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    149c:	1c40      	adds	r0, r0, #1
    149e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    14a2:	e9c3 4500 	strd	r4, r5, [r3]
    14a6:	b2c0      	uxtb	r0, r0
    14a8:	4288      	cmp	r0, r1
    14aa:	d3f5      	bcc.n	1498 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    14ac:	2001      	movs	r0, #1
    14ae:	bd38      	pop	{r3, r4, r5, pc}
    14b0:	20000094 	.word	0x20000094

000014b4 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    14b4:	4901      	ldr	r1, [pc, #4]	; (14bc <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    14b6:	2000      	movs	r0, #0
    14b8:	7008      	strb	r0, [r1, #0]
    14ba:	4770      	bx	lr
    14bc:	20000094 	.word	0x20000094

000014c0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    14c0:	4801      	ldr	r0, [pc, #4]	; (14c8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    14c2:	7840      	ldrb	r0, [r0, #1]
    14c4:	4770      	bx	lr
    14c6:	0000      	.short	0x0000
    14c8:	20000094 	.word	0x20000094
    14cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ce:	4d20      	ldr	r5, [pc, #128]	; (1550 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    14d0:	2300      	movs	r3, #0
    14d2:	7013      	strb	r3, [r2, #0]
    14d4:	782b      	ldrb	r3, [r5, #0]
    14d6:	b323      	cbz	r3, 1522 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    14d8:	2400      	movs	r4, #0
    14da:	1e5b      	subs	r3, r3, #1
    14dc:	b2db      	uxtb	r3, r3
    14de:	f8d5 c004 	ldr.w	ip, [r5, #4]
    14e2:	e00b      	b.n	14fc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    14e4:	18e5      	adds	r5, r4, r3
    14e6:	086d      	lsrs	r5, r5, #1
    14e8:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    14ec:	e9d6 7600 	ldrd	r7, r6, [r6]
    14f0:	1a3f      	subs	r7, r7, r0
    14f2:	418e      	sbcs	r6, r1
    14f4:	d201      	bcs.n	14fa <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    14f6:	462c      	mov	r4, r5
    14f8:	e000      	b.n	14fc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    14fa:	462b      	mov	r3, r5
    14fc:	1b1d      	subs	r5, r3, r4
    14fe:	2d01      	cmp	r5, #1
    1500:	dcf0      	bgt.n	14e4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    1502:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    1506:	e9d6 5600 	ldrd	r5, r6, [r6]
    150a:	ea80 0705 	eor.w	r7, r0, r5
    150e:	ea81 0e06 	eor.w	lr, r1, r6
    1512:	ea57 070e 	orrs.w	r7, r7, lr
    1516:	d005      	beq.n	1524 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    1518:	1b45      	subs	r5, r0, r5
    151a:	eb71 0506 	sbcs.w	r5, r1, r6
    151e:	d203      	bcs.n	1528 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    1520:	7014      	strb	r4, [r2, #0]
    1522:	e010      	b.n	1546 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    1524:	7014      	strb	r4, [r2, #0]
    1526:	e011      	b.n	154c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    1528:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    152c:	e9d5 4500 	ldrd	r4, r5, [r5]
    1530:	ea80 0604 	eor.w	r6, r0, r4
    1534:	ea81 0705 	eor.w	r7, r1, r5
    1538:	433e      	orrs	r6, r7
    153a:	d006      	beq.n	154a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    153c:	1b00      	subs	r0, r0, r4
    153e:	41a9      	sbcs	r1, r5
    1540:	d300      	bcc.n	1544 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    1542:	1c5b      	adds	r3, r3, #1
    1544:	7013      	strb	r3, [r2, #0]
    1546:	2000      	movs	r0, #0
    1548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    154a:	7013      	strb	r3, [r2, #0]
    154c:	2001      	movs	r0, #1
    154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1550:	20000094 	.word	0x20000094

00001554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    1554:	4801      	ldr	r0, [pc, #4]	; (155c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    1556:	6840      	ldr	r0, [r0, #4]
    1558:	30a0      	adds	r0, #160	; 0xa0
    155a:	4770      	bx	lr
    155c:	2000009c 	.word	0x2000009c

00001560 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    1560:	b510      	push	{r4, lr}
    1562:	4c21      	ldr	r4, [pc, #132]	; (15e8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    1564:	6860      	ldr	r0, [r4, #4]
    1566:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    156a:	f007 fec7 	bl	92fc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    156e:	6861      	ldr	r1, [r4, #4]
    1570:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    1574:	314a      	adds	r1, #74	; 0x4a
    1576:	f7ff fc39 	bl	dec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    157a:	6860      	ldr	r0, [r4, #4]
    157c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    1580:	f007 fec3 	bl	930a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7c>
    1584:	6861      	ldr	r1, [r4, #4]
    1586:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    158a:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    158e:	314a      	adds	r1, #74	; 0x4a
    1590:	f007 fea0 	bl	92d4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    1594:	b930      	cbnz	r0, 15a4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    1596:	6861      	ldr	r1, [r4, #4]
    1598:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    159c:	314a      	adds	r1, #74	; 0x4a
    159e:	f007 fea2 	bl	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    15a2:	b108      	cbz	r0, 15a8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    15a4:	2101      	movs	r1, #1
    15a6:	e000      	b.n	15aa <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    15a8:	2100      	movs	r1, #0
    15aa:	6860      	ldr	r0, [r4, #4]
    15ac:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    15b0:	b919      	cbnz	r1, 15ba <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    15b2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    15b6:	2800      	cmp	r0, #0
    15b8:	d014      	beq.n	15e4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    15ba:	f7ff fcf9 	bl	fb0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    15be:	490b      	ldr	r1, [pc, #44]	; (15ec <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    15c0:	fba0 2301 	umull	r2, r3, r0, r1
    15c4:	6860      	ldr	r0, [r4, #4]
    15c6:	3090      	adds	r0, #144	; 0x90
    15c8:	f007 fefd 	bl	93c6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    15cc:	6860      	ldr	r0, [r4, #4]
    15ce:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    15d2:	b110      	cbz	r0, 15da <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    15d4:	2000      	movs	r0, #0
    15d6:	f7ff fc75 	bl	ec4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    15da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15de:	2000      	movs	r0, #0
    15e0:	f000 bcc0 	b.w	1f64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>
    15e4:	bd10      	pop	{r4, pc}
    15e6:	0000      	.short	0x0000
    15e8:	2000009c 	.word	0x2000009c
    15ec:	000f4240 	.word	0x000f4240

000015f0 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    15f0:	4a04      	ldr	r2, [pc, #16]	; (1604 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    15f2:	2803      	cmp	r0, #3
    15f4:	6852      	ldr	r2, [r2, #4]
    15f6:	d100      	bne.n	15fa <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    15f8:	6551      	str	r1, [r2, #84]	; 0x54
    15fa:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    15fe:	2000      	movs	r0, #0
    1600:	4770      	bx	lr
    1602:	0000      	.short	0x0000
    1604:	2000009c 	.word	0x2000009c

00001608 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    1608:	480a      	ldr	r0, [pc, #40]	; (1634 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    160a:	6841      	ldr	r1, [r0, #4]
    160c:	6e88      	ldr	r0, [r1, #104]	; 0x68
    160e:	b170      	cbz	r0, 162e <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    1610:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    1614:	22ff      	movs	r2, #255	; 0xff
    1616:	7002      	strb	r2, [r0, #0]
    1618:	2200      	movs	r2, #0
    161a:	668a      	str	r2, [r1, #104]	; 0x68
    161c:	7002      	strb	r2, [r0, #0]
    161e:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    1622:	2001      	movs	r0, #1
    1624:	4088      	lsls	r0, r1
    1626:	4904      	ldr	r1, [pc, #16]	; (1638 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    1628:	6008      	str	r0, [r1, #0]
    162a:	2000      	movs	r0, #0
    162c:	4770      	bx	lr
    162e:	200c      	movs	r0, #12
    1630:	4770      	bx	lr
    1632:	0000      	.short	0x0000
    1634:	2000009c 	.word	0x2000009c
    1638:	4001f508 	.word	0x4001f508

0000163c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    163c:	4602      	mov	r2, r0
    163e:	480c      	ldr	r0, [pc, #48]	; (1670 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    1640:	b510      	push	{r4, lr}
    1642:	6082      	str	r2, [r0, #8]
    1644:	68c0      	ldr	r0, [r0, #12]
    1646:	460c      	mov	r4, r1
    1648:	b168      	cbz	r0, 1666 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    164a:	f000 fe69 	bl	2320 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d4>
    164e:	f007 ffa0 	bl	9592 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    1652:	4620      	mov	r0, r4
    1654:	f000 f830 	bl	16b8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    1658:	2800      	cmp	r0, #0
    165a:	d007      	beq.n	166c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    165c:	f640 11bb 	movw	r1, #2491	; 0x9bb
    1660:	2032      	movs	r0, #50	; 0x32
    1662:	f7fe fea9 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1666:	f640 11b5 	movw	r1, #2485	; 0x9b5
    166a:	e7f9      	b.n	1660 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    166c:	bd10      	pop	{r4, pc}
    166e:	0000      	.short	0x0000
    1670:	2000009c 	.word	0x2000009c

00001674 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    1674:	4902      	ldr	r1, [pc, #8]	; (1680 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    1676:	4801      	ldr	r0, [pc, #4]	; (167c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    1678:	60c8      	str	r0, [r1, #12]
    167a:	4770      	bx	lr
    167c:	000024d4 	.word	0x000024d4
    1680:	2000009c 	.word	0x2000009c

00001684 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    1684:	b570      	push	{r4, r5, r6, lr}
    1686:	4605      	mov	r5, r0
    1688:	f7ff fa4a 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    168c:	4604      	mov	r4, r0
    168e:	f7ff fa4d 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    1692:	4621      	mov	r1, r4
    1694:	f007 fe95 	bl	93c2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    1698:	0001      	movs	r1, r0
    169a:	d006      	beq.n	16aa <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    169c:	4805      	ldr	r0, [pc, #20]	; (16b4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    169e:	68c0      	ldr	r0, [r0, #12]
    16a0:	6802      	ldr	r2, [r0, #0]
    16a2:	4628      	mov	r0, r5
    16a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16a8:	4710      	bx	r2
    16aa:	f640 21b1 	movw	r1, #2737	; 0xab1
    16ae:	2032      	movs	r0, #50	; 0x32
    16b0:	f7fe fe82 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16b4:	2000009c 	.word	0x2000009c

000016b8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    16b8:	b570      	push	{r4, r5, r6, lr}
    16ba:	4d19      	ldr	r5, [pc, #100]	; (1720 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    16bc:	4604      	mov	r4, r0
    16be:	6868      	ldr	r0, [r5, #4]
    16c0:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    16c4:	2901      	cmp	r1, #1
    16c6:	d004      	beq.n	16d2 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    16c8:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    16cc:	b108      	cbz	r0, 16d2 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    16ce:	200c      	movs	r0, #12
    16d0:	bd70      	pop	{r4, r5, r6, pc}
    16d2:	f7ff fa4f 	bl	b74 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    16d6:	f007 ff5c 	bl	9592 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    16da:	f000 f8b9 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    16de:	2246      	movs	r2, #70	; 0x46
    16e0:	2100      	movs	r1, #0
    16e2:	6868      	ldr	r0, [r5, #4]
    16e4:	f008 fdb8 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    16e8:	6869      	ldr	r1, [r5, #4]
    16ea:	2200      	movs	r2, #0
    16ec:	2001      	movs	r0, #1
    16ee:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    16f2:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    16f6:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    16fa:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    16fe:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    1702:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    1706:	2007      	movs	r0, #7
    1708:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    170c:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    1710:	23ff      	movs	r3, #255	; 0xff
    1712:	7003      	strb	r3, [r0, #0]
    1714:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    1718:	668a      	str	r2, [r1, #104]	; 0x68
    171a:	7002      	strb	r2, [r0, #0]
    171c:	2000      	movs	r0, #0
    171e:	bd70      	pop	{r4, r5, r6, pc}
    1720:	2000009c 	.word	0x2000009c

00001724 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    1724:	4805      	ldr	r0, [pc, #20]	; (173c <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    1726:	b510      	push	{r4, lr}
    1728:	6840      	ldr	r0, [r0, #4]
    172a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    172e:	f007 fde5 	bl	92fc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    1732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1736:	f7ff bb85 	b.w	e44 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    173a:	0000      	.short	0x0000
    173c:	2000009c 	.word	0x2000009c

00001740 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    1740:	b140      	cbz	r0, 1754 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    1742:	2802      	cmp	r0, #2
    1744:	d006      	beq.n	1754 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    1746:	2200      	movs	r2, #0
    1748:	4903      	ldr	r1, [pc, #12]	; (1758 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    174a:	6849      	ldr	r1, [r1, #4]
    174c:	f801 2f51 	strb.w	r2, [r1, #81]!
    1750:	7208      	strb	r0, [r1, #8]
    1752:	4770      	bx	lr
    1754:	2201      	movs	r2, #1
    1756:	e7f7      	b.n	1748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    1758:	2000009c 	.word	0x2000009c

0000175c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    175c:	b510      	push	{r4, lr}
    175e:	4603      	mov	r3, r0
    1760:	7800      	ldrb	r0, [r0, #0]
    1762:	07c0      	lsls	r0, r0, #31
    1764:	d005      	beq.n	1772 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    1766:	7858      	ldrb	r0, [r3, #1]
    1768:	2100      	movs	r1, #0
    176a:	f7ff ff41 	bl	15f0 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    176e:	2800      	cmp	r0, #0
    1770:	d10c      	bne.n	178c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    1772:	4c07      	ldr	r4, [pc, #28]	; (1790 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    1774:	7898      	ldrb	r0, [r3, #2]
    1776:	6861      	ldr	r1, [r4, #4]
    1778:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    177c:	78d8      	ldrb	r0, [r3, #3]
    177e:	f7ff ffdf 	bl	1740 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    1782:	6861      	ldr	r1, [r4, #4]
    1784:	7918      	ldrb	r0, [r3, #4]
    1786:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    178a:	2000      	movs	r0, #0
    178c:	bd10      	pop	{r4, pc}
    178e:	0000      	.short	0x0000
    1790:	2000009c 	.word	0x2000009c

00001794 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    1794:	4801      	ldr	r0, [pc, #4]	; (179c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    1796:	68c0      	ldr	r0, [r0, #12]
    1798:	6840      	ldr	r0, [r0, #4]
    179a:	4700      	bx	r0
    179c:	2000009c 	.word	0x2000009c

000017a0 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    17a0:	4807      	ldr	r0, [pc, #28]	; (17c0 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    17a2:	b508      	push	{r3, lr}
    17a4:	6840      	ldr	r0, [r0, #4]
    17a6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    17aa:	f88d 0000 	strb.w	r0, [sp]
    17ae:	9800      	ldr	r0, [sp, #0]
    17b0:	9000      	str	r0, [sp, #0]
    17b2:	f89d 0000 	ldrb.w	r0, [sp]
    17b6:	2800      	cmp	r0, #0
    17b8:	d000      	beq.n	17bc <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    17ba:	2001      	movs	r0, #1
    17bc:	bd08      	pop	{r3, pc}
    17be:	0000      	.short	0x0000
    17c0:	2000009c 	.word	0x2000009c

000017c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    17c4:	b510      	push	{r4, lr}
    17c6:	f000 f903 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    17ca:	4b0c      	ldr	r3, [pc, #48]	; (17fc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    17cc:	b140      	cbz	r0, 17e0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    17ce:	6858      	ldr	r0, [r3, #4]
    17d0:	2101      	movs	r1, #1
    17d2:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    17d6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    17d8:	8809      	ldrh	r1, [r1, #0]
    17da:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    17de:	e004      	b.n	17ea <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    17e0:	6859      	ldr	r1, [r3, #4]
    17e2:	2000      	movs	r0, #0
    17e4:	f801 0f42 	strb.w	r0, [r1, #66]!
    17e8:	8048      	strh	r0, [r1, #2]
    17ea:	6858      	ldr	r0, [r3, #4]
    17ec:	2202      	movs	r2, #2
    17ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17f2:	4903      	ldr	r1, [pc, #12]	; (1800 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    17f4:	3038      	adds	r0, #56	; 0x38
    17f6:	f007 bd29 	b.w	924c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    17fa:	0000      	.short	0x0000
    17fc:	2000009c 	.word	0x2000009c
    1800:	000022b9 	.word	0x000022b9

00001804 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    1804:	4802      	ldr	r0, [pc, #8]	; (1810 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    1806:	6840      	ldr	r0, [r0, #4]
    1808:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    180c:	4770      	bx	lr
    180e:	0000      	.short	0x0000
    1810:	2000009c 	.word	0x2000009c

00001814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    1814:	b510      	push	{r4, lr}
    1816:	f000 f8db 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    181a:	490c      	ldr	r1, [pc, #48]	; (184c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    181c:	b128      	cbz	r0, 182a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    181e:	6848      	ldr	r0, [r1, #4]
    1820:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    1824:	2801      	cmp	r0, #1
    1826:	d00e      	beq.n	1846 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    1828:	e00c      	b.n	1844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    182a:	6849      	ldr	r1, [r1, #4]
    182c:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    1830:	2801      	cmp	r0, #1
    1832:	d001      	beq.n	1838 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    1834:	2802      	cmp	r0, #2
    1836:	d105      	bne.n	1844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    1838:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    183c:	2801      	cmp	r0, #1
    183e:	d003      	beq.n	1848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    1840:	2803      	cmp	r0, #3
    1842:	d001      	beq.n	1848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    1844:	2000      	movs	r0, #0
    1846:	bd10      	pop	{r4, pc}
    1848:	2001      	movs	r0, #1
    184a:	bd10      	pop	{r4, pc}
    184c:	2000009c 	.word	0x2000009c
    1850:	b510      	push	{r4, lr}
    1852:	4c07      	ldr	r4, [pc, #28]	; (1870 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    1854:	6860      	ldr	r0, [r4, #4]
    1856:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    185a:	2800      	cmp	r0, #0
    185c:	d007      	beq.n	186e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    185e:	f001 ff13 	bl	3688 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    1862:	f001 fe31 	bl	34c8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    1866:	6861      	ldr	r1, [r4, #4]
    1868:	2000      	movs	r0, #0
    186a:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    186e:	bd10      	pop	{r4, pc}
    1870:	2000009c 	.word	0x2000009c
    1874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1878:	4d10      	ldr	r5, [pc, #64]	; (18bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    187a:	4606      	mov	r6, r0
    187c:	460f      	mov	r7, r1
    187e:	6868      	ldr	r0, [r5, #4]
    1880:	490f      	ldr	r1, [pc, #60]	; (18c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    1882:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    1886:	5c0c      	ldrb	r4, [r1, r0]
    1888:	4620      	mov	r0, r4
    188a:	f002 fa2f 	bl	3cec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    188e:	6868      	ldr	r0, [r5, #4]
    1890:	2101      	movs	r1, #1
    1892:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
    1896:	2025      	movs	r0, #37	; 0x25
    1898:	f002 f9fe 	bl	3c98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    189c:	4638      	mov	r0, r7
    189e:	f002 f939 	bl	3b14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    18a2:	f04f 0101 	mov.w	r1, #1
    18a6:	4608      	mov	r0, r1
    18a8:	b126      	cbz	r6, 18b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    18aa:	f001 ff99 	bl	37e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    18ae:	b918      	cbnz	r0, 18b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    18b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18b4:	f001 ff5a 	bl	376c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    18b8:	2001      	movs	r0, #1
    18ba:	e7f9      	b.n	18b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    18bc:	2000009c 	.word	0x2000009c
    18c0:	0000a3a2 	.word	0x0000a3a2
    18c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18c6:	2600      	movs	r6, #0
    18c8:	460f      	mov	r7, r1
    18ca:	4605      	mov	r5, r0
    18cc:	f88d 6000 	strb.w	r6, [sp]
    18d0:	466b      	mov	r3, sp
    18d2:	f000 f895 	bl	1a00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ec>
    18d6:	0001      	movs	r1, r0
    18d8:	4810      	ldr	r0, [pc, #64]	; (191c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>)
    18da:	d003      	beq.n	18e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    18dc:	6840      	ldr	r0, [r0, #4]
    18de:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    18e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18e4:	6840      	ldr	r0, [r0, #4]
    18e6:	f89d 1000 	ldrb.w	r1, [sp]
    18ea:	2f07      	cmp	r7, #7
    18ec:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    18f0:	d301      	bcc.n	18f6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe2>
    18f2:	4634      	mov	r4, r6
    18f4:	e002      	b.n	18fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    18f6:	0022      	movs	r2, r4
    18f8:	d100      	bne.n	18fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xe8>
    18fa:	460c      	mov	r4, r1
    18fc:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    1900:	6869      	ldr	r1, [r5, #4]
    1902:	2900      	cmp	r1, #0
    1904:	d0ed      	beq.n	18e2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xce>
    1906:	7c69      	ldrb	r1, [r5, #17]
    1908:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    190c:	6869      	ldr	r1, [r5, #4]
    190e:	680a      	ldr	r2, [r1, #0]
    1910:	f840 2f83 	str.w	r2, [r0, #131]!
    1914:	8889      	ldrh	r1, [r1, #4]
    1916:	8081      	strh	r1, [r0, #4]
    1918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    191a:	0000      	.short	0x0000
    191c:	2000009c 	.word	0x2000009c
    1920:	b510      	push	{r4, lr}
    1922:	4915      	ldr	r1, [pc, #84]	; (1978 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x164>)
    1924:	6842      	ldr	r2, [r0, #4]
    1926:	6849      	ldr	r1, [r1, #4]
    1928:	7813      	ldrb	r3, [r2, #0]
    192a:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    192e:	42a3      	cmp	r3, r4
    1930:	d11f      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1932:	7853      	ldrb	r3, [r2, #1]
    1934:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    1938:	42a3      	cmp	r3, r4
    193a:	d11a      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    193c:	7893      	ldrb	r3, [r2, #2]
    193e:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    1942:	42a3      	cmp	r3, r4
    1944:	d115      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1946:	78d3      	ldrb	r3, [r2, #3]
    1948:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    194c:	42a3      	cmp	r3, r4
    194e:	d110      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1950:	7913      	ldrb	r3, [r2, #4]
    1952:	f891 4087 	ldrb.w	r4, [r1, #135]	; 0x87
    1956:	42a3      	cmp	r3, r4
    1958:	d10b      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    195a:	7952      	ldrb	r2, [r2, #5]
    195c:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
    1960:	429a      	cmp	r2, r3
    1962:	d106      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    1964:	7c40      	ldrb	r0, [r0, #17]
    1966:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
    196a:	4288      	cmp	r0, r1
    196c:	d101      	bne.n	1972 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15e>
    196e:	2001      	movs	r0, #1
    1970:	bd10      	pop	{r4, pc}
    1972:	2000      	movs	r0, #0
    1974:	bd10      	pop	{r4, pc}
    1976:	0000      	.short	0x0000
    1978:	2000009c 	.word	0x2000009c
    197c:	b510      	push	{r4, lr}
    197e:	7801      	ldrb	r1, [r0, #0]
    1980:	b08c      	sub	sp, #48	; 0x30
    1982:	f001 040f 	and.w	r4, r1, #15
    1986:	4622      	mov	r2, r4
    1988:	a901      	add	r1, sp, #4
    198a:	f000 fe31 	bl	25f0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    198e:	f001 fe9d 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1992:	f000 fb27 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1996:	2c04      	cmp	r4, #4
    1998:	d114      	bne.n	19c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    199a:	a801      	add	r0, sp, #4
    199c:	f7ff ffc0 	bl	1920 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10c>
    19a0:	b180      	cbz	r0, 19c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b0>
    19a2:	a80b      	add	r0, sp, #44	; 0x2c
    19a4:	f000 fb26 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    19a8:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    19ac:	9000      	str	r0, [sp, #0]
    19ae:	4807      	ldr	r0, [pc, #28]	; (19cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>)
    19b0:	6840      	ldr	r0, [r0, #4]
    19b2:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
    19b6:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    19ba:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    19be:	a801      	add	r0, sp, #4
    19c0:	f007 fd9c 	bl	94fc <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    19c4:	b00c      	add	sp, #48	; 0x30
    19c6:	2005      	movs	r0, #5
    19c8:	bd10      	pop	{r4, pc}
    19ca:	0000      	.short	0x0000
    19cc:	2000009c 	.word	0x2000009c
    19d0:	4804      	ldr	r0, [pc, #16]	; (19e4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d0>)
    19d2:	6840      	ldr	r0, [r0, #4]
    19d4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    19d8:	2803      	cmp	r0, #3
    19da:	d001      	beq.n	19e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1cc>
    19dc:	2000      	movs	r0, #0
    19de:	4770      	bx	lr
    19e0:	2001      	movs	r0, #1
    19e2:	4770      	bx	lr
    19e4:	2000009c 	.word	0x2000009c
    19e8:	7c82      	ldrb	r2, [r0, #18]
    19ea:	6883      	ldr	r3, [r0, #8]
    19ec:	4803      	ldr	r0, [pc, #12]	; (19fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1e8>)
    19ee:	6841      	ldr	r1, [r0, #4]
    19f0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    19f4:	314a      	adds	r1, #74	; 0x4a
    19f6:	f007 ba94 	b.w	8f22 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    19fa:	0000      	.short	0x0000
    19fc:	2000009c 	.word	0x2000009c
    1a00:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    1a02:	6841      	ldr	r1, [r0, #4]
    1a04:	461e      	mov	r6, r3
    1a06:	4604      	mov	r4, r0
    1a08:	b301      	cbz	r1, 1a4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x238>
    1a0a:	7c60      	ldrb	r0, [r4, #17]
    1a0c:	f007 fc6b 	bl	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1a10:	4d19      	ldr	r5, [pc, #100]	; (1a78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    1a12:	6869      	ldr	r1, [r5, #4]
    1a14:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    1a18:	b141      	cbz	r1, 1a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    1a1a:	b138      	cbz	r0, 1a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x218>
    1a1c:	f007 fb17 	bl	904e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    1a20:	6869      	ldr	r1, [r5, #4]
    1a22:	f801 0f78 	strb.w	r0, [r1, #120]!
    1a26:	7048      	strb	r0, [r1, #1]
    1a28:	2001      	movs	r0, #1
    1a2a:	71c8      	strb	r0, [r1, #7]
    1a2c:	6868      	ldr	r0, [r5, #4]
    1a2e:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1a32:	28ff      	cmp	r0, #255	; 0xff
    1a34:	d00c      	beq.n	1a50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23c>
    1a36:	466a      	mov	r2, sp
    1a38:	a902      	add	r1, sp, #8
    1a3a:	f7ff fa9f 	bl	f7c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    1a3e:	b1a8      	cbz	r0, 1a6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    1a40:	4669      	mov	r1, sp
    1a42:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1a46:	f007 fc22 	bl	928e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    1a4a:	7030      	strb	r0, [r6, #0]
    1a4c:	2000      	movs	r0, #0
    1a4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a50:	7c60      	ldrb	r0, [r4, #17]
    1a52:	6861      	ldr	r1, [r4, #4]
    1a54:	f007 fc1b 	bl	928e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    1a58:	7030      	strb	r0, [r6, #0]
    1a5a:	686a      	ldr	r2, [r5, #4]
    1a5c:	7c60      	ldrb	r0, [r4, #17]
    1a5e:	6861      	ldr	r1, [r4, #4]
    1a60:	3278      	adds	r2, #120	; 0x78
    1a62:	f7ff faab 	bl	fbc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    1a66:	f080 0001 	eor.w	r0, r0, #1
    1a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a6c:	f640 5134 	movw	r1, #3380	; 0xd34
    1a70:	2032      	movs	r0, #50	; 0x32
    1a72:	f7fe fca1 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a76:	0000      	.short	0x0000
    1a78:	2000009c 	.word	0x2000009c
    1a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a80:	4c4c      	ldr	r4, [pc, #304]	; (1bb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    1a82:	4606      	mov	r6, r0
    1a84:	2100      	movs	r1, #0
    1a86:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    1a8a:	3570      	adds	r5, #112	; 0x70
    1a8c:	8001      	strh	r1, [r0, #0]
    1a8e:	2e03      	cmp	r6, #3
    1a90:	d002      	beq.n	1a98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>
    1a92:	2e05      	cmp	r6, #5
    1a94:	d004      	beq.n	1aa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x28c>
    1a96:	e051      	b.n	1b3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    1a98:	2103      	movs	r1, #3
    1a9a:	f007 fba0 	bl	91de <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1a9e:	e04d      	b.n	1b3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x328>
    1aa0:	2105      	movs	r1, #5
    1aa2:	f007 fb9c 	bl	91de <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    1aa6:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1aaa:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1aac:	6949      	ldr	r1, [r1, #20]
    1aae:	f8c7 100f 	str.w	r1, [r7, #15]
    1ab2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1ab4:	69c9      	ldr	r1, [r1, #28]
    1ab6:	74f9      	strb	r1, [r7, #19]
    1ab8:	0a0a      	lsrs	r2, r1, #8
    1aba:	753a      	strb	r2, [r7, #20]
    1abc:	0c09      	lsrs	r1, r1, #16
    1abe:	7579      	strb	r1, [r7, #21]
    1ac0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1ac2:	6901      	ldr	r1, [r0, #16]
    1ac4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    1ac6:	f007 fb4c 	bl	9162 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    1aca:	75b8      	strb	r0, [r7, #22]
    1acc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1ad0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1ad2:	6901      	ldr	r1, [r0, #16]
    1ad4:	6a00      	ldr	r0, [r0, #32]
    1ad6:	f007 fb35 	bl	9144 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    1ada:	75f8      	strb	r0, [r7, #23]
    1adc:	0a00      	lsrs	r0, r0, #8
    1ade:	7638      	strb	r0, [r7, #24]
    1ae0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1ae4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1ae6:	6900      	ldr	r0, [r0, #16]
    1ae8:	f007 fae9 	bl	90be <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    1aec:	7678      	strb	r0, [r7, #25]
    1aee:	0a00      	lsrs	r0, r0, #8
    1af0:	76b8      	strb	r0, [r7, #26]
    1af2:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    1af6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1af8:	8b09      	ldrh	r1, [r1, #24]
    1afa:	f807 1f1b 	strb.w	r1, [r7, #27]!
    1afe:	0a09      	lsrs	r1, r1, #8
    1b00:	7079      	strb	r1, [r7, #1]
    1b02:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1b04:	8b49      	ldrh	r1, [r1, #26]
    1b06:	70b9      	strb	r1, [r7, #2]
    1b08:	0a09      	lsrs	r1, r1, #8
    1b0a:	70f9      	strb	r1, [r7, #3]
    1b0c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1b0e:	f851 2fae 	ldr.w	r2, [r1, #174]!
    1b12:	607a      	str	r2, [r7, #4]
    1b14:	7909      	ldrb	r1, [r1, #4]
    1b16:	7239      	strb	r1, [r7, #8]
    1b18:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1b1a:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    1b1e:	7a78      	ldrb	r0, [r7, #9]
    1b20:	f001 011f 	and.w	r1, r1, #31
    1b24:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    1b28:	4308      	orrs	r0, r1
    1b2a:	7278      	strb	r0, [r7, #9]
    1b2c:	f001 fcac 	bl	3488 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    1b30:	7a79      	ldrb	r1, [r7, #9]
    1b32:	f001 011f 	and.w	r1, r1, #31
    1b36:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    1b3a:	7279      	strb	r1, [r7, #9]
    1b3c:	f105 0113 	add.w	r1, r5, #19
    1b40:	68a0      	ldr	r0, [r4, #8]
    1b42:	f007 fb67 	bl	9214 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    1b46:	7ea9      	ldrb	r1, [r5, #26]
    1b48:	68a0      	ldr	r0, [r4, #8]
    1b4a:	f007 fb69 	bl	9220 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    1b4e:	6860      	ldr	r0, [r4, #4]
    1b50:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    1b54:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    1b58:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1b5c:	b188      	cbz	r0, 1b82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    1b5e:	f7ff ff37 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1b62:	b130      	cbz	r0, 1b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    1b64:	6860      	ldr	r0, [r4, #4]
    1b66:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    1b6a:	b111      	cbz	r1, 1b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    1b6c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    1b70:	e002      	b.n	1b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    1b72:	6860      	ldr	r0, [r4, #4]
    1b74:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1b78:	f7ff f9d8 	bl	f2c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    1b7c:	b108      	cbz	r0, 1b82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36e>
    1b7e:	2701      	movs	r7, #1
    1b80:	4605      	mov	r5, r0
    1b82:	4629      	mov	r1, r5
    1b84:	68a0      	ldr	r0, [r4, #8]
    1b86:	f007 fb52 	bl	922e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    1b8a:	4639      	mov	r1, r7
    1b8c:	68a0      	ldr	r0, [r4, #8]
    1b8e:	f007 fb54 	bl	923a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    1b92:	68a0      	ldr	r0, [r4, #8]
    1b94:	f001 ffbe 	bl	3b14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1b98:	2e05      	cmp	r6, #5
    1b9a:	d108      	bne.n	1bae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    1b9c:	6860      	ldr	r0, [r4, #4]
    1b9e:	682a      	ldr	r2, [r5, #0]
    1ba0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    1ba2:	f8c1 200a 	str.w	r2, [r1, #10]
    1ba6:	88aa      	ldrh	r2, [r5, #4]
    1ba8:	81ca      	strh	r2, [r1, #14]
    1baa:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1bac:	7247      	strb	r7, [r0, #9]
    1bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bb2:	0000      	.short	0x0000
    1bb4:	2000009c 	.word	0x2000009c
    1bb8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1bbc:	4f65      	ldr	r7, [pc, #404]	; (1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>)
    1bbe:	4604      	mov	r4, r0
    1bc0:	6878      	ldr	r0, [r7, #4]
    1bc2:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    1bc6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    1bca:	b180      	cbz	r0, 1bee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3da>
    1bcc:	2600      	movs	r6, #0
    1bce:	2500      	movs	r5, #0
    1bd0:	7ca0      	ldrb	r0, [r4, #18]
    1bd2:	68a1      	ldr	r1, [r4, #8]
    1bd4:	f007 fb87 	bl	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1bd8:	4682      	mov	sl, r0
    1bda:	f7ff fef9 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1bde:	b140      	cbz	r0, 1bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    1be0:	6878      	ldr	r0, [r7, #4]
    1be2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    1be6:	b121      	cbz	r1, 1bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3de>
    1be8:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    1bec:	e004      	b.n	1bf8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e4>
    1bee:	2601      	movs	r6, #1
    1bf0:	e7ed      	b.n	1bce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    1bf2:	6878      	ldr	r0, [r7, #4]
    1bf4:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    1bf8:	4683      	mov	fp, r0
    1bfa:	f7ff f949 	bl	e90 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    1bfe:	ea5f 0900 	movs.w	r9, r0
    1c02:	d00c      	beq.n	1c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    1c04:	4658      	mov	r0, fp
    1c06:	f7ff f937 	bl	e78 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    1c0a:	b100      	cbz	r0, 1c0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fa>
    1c0c:	2601      	movs	r6, #1
    1c0e:	f1ba 0f00 	cmp.w	sl, #0
    1c12:	d004      	beq.n	1c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x40a>
    1c14:	4648      	mov	r0, r9
    1c16:	68a1      	ldr	r1, [r4, #8]
    1c18:	f007 f9e8 	bl	8fec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    1c1c:	4605      	mov	r5, r0
    1c1e:	6878      	ldr	r0, [r7, #4]
    1c20:	46b9      	mov	r9, r7
    1c22:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    1c26:	b10d      	cbz	r5, 1c2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x418>
    1c28:	f047 0702 	orr.w	r7, r7, #2
    1c2c:	f7ff fed0 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1c30:	b3a0      	cbz	r0, 1c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x488>
    1c32:	6860      	ldr	r0, [r4, #4]
    1c34:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1c38:	7802      	ldrb	r2, [r0, #0]
    1c3a:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    1c3e:	429a      	cmp	r2, r3
    1c40:	d11f      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c42:	7842      	ldrb	r2, [r0, #1]
    1c44:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    1c48:	429a      	cmp	r2, r3
    1c4a:	d11a      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c4c:	7882      	ldrb	r2, [r0, #2]
    1c4e:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    1c52:	429a      	cmp	r2, r3
    1c54:	d115      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c56:	78c2      	ldrb	r2, [r0, #3]
    1c58:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    1c5c:	429a      	cmp	r2, r3
    1c5e:	d110      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c60:	7902      	ldrb	r2, [r0, #4]
    1c62:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    1c66:	429a      	cmp	r2, r3
    1c68:	d10b      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c6a:	7940      	ldrb	r0, [r0, #5]
    1c6c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    1c70:	4290      	cmp	r0, r2
    1c72:	d106      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c74:	7c60      	ldrb	r0, [r4, #17]
    1c76:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    1c7a:	4288      	cmp	r0, r1
    1c7c:	d101      	bne.n	1c82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46e>
    1c7e:	2001      	movs	r0, #1
    1c80:	e000      	b.n	1c84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x470>
    1c82:	2000      	movs	r0, #0
    1c84:	4f34      	ldr	r7, [pc, #208]	; (1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>)
    1c86:	4682      	mov	sl, r0
    1c88:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    1c8c:	2808      	cmp	r0, #8
    1c8e:	d006      	beq.n	1c9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    1c90:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    1c94:	4288      	cmp	r0, r1
    1c96:	d102      	bne.n	1c9e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48a>
    1c98:	2001      	movs	r0, #1
    1c9a:	e001      	b.n	1ca0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>
    1c9c:	e021      	b.n	1ce2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    1c9e:	2000      	movs	r0, #0
    1ca0:	4681      	mov	r9, r0
    1ca2:	b925      	cbnz	r5, 1cae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49a>
    1ca4:	b12e      	cbz	r6, 1cb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    1ca6:	4620      	mov	r0, r4
    1ca8:	f7ff fe9e 	bl	19e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    1cac:	b108      	cbz	r0, 1cb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x49e>
    1cae:	2001      	movs	r0, #1
    1cb0:	e000      	b.n	1cb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a0>
    1cb2:	2000      	movs	r0, #0
    1cb4:	f1b8 0f00 	cmp.w	r8, #0
    1cb8:	d009      	beq.n	1cce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1cba:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    1cbe:	2901      	cmp	r1, #1
    1cc0:	d003      	beq.n	1cca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b6>
    1cc2:	b921      	cbnz	r1, 1cce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1cc4:	ea5a 0109 	orrs.w	r1, sl, r9
    1cc8:	d001      	beq.n	1cce <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ba>
    1cca:	2101      	movs	r1, #1
    1ccc:	e000      	b.n	1cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4bc>
    1cce:	2100      	movs	r1, #0
    1cd0:	4208      	tst	r0, r1
    1cd2:	d003      	beq.n	1cdc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    1cd4:	200c      	movs	r0, #12
    1cd6:	b004      	add	sp, #16
    1cd8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1cdc:	f001 fcf6 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1ce0:	e036      	b.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1ce2:	f001 fcf3 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1ce6:	f1b8 0f00 	cmp.w	r8, #0
    1cea:	d031      	beq.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1cec:	4620      	mov	r0, r4
    1cee:	f7ff fe7b 	bl	19e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1d4>
    1cf2:	b900      	cbnz	r0, 1cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e2>
    1cf4:	b175      	cbz	r5, 1d14 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x500>
    1cf6:	a803      	add	r0, sp, #12
    1cf8:	f000 f97c 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1cfc:	f8d9 2004 	ldr.w	r2, [r9, #4]
    1d00:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1d04:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1d08:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1d0c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1d10:	463b      	mov	r3, r7
    1d12:	e018      	b.n	1d46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x532>
    1d14:	f8d9 0004 	ldr.w	r0, [r9, #4]
    1d18:	464d      	mov	r5, r9
    1d1a:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    1d1e:	2803      	cmp	r0, #3
    1d20:	d001      	beq.n	1d26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x512>
    1d22:	2802      	cmp	r0, #2
    1d24:	d114      	bne.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d26:	f1ba 0f00 	cmp.w	sl, #0
    1d2a:	d011      	beq.n	1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1d2c:	a803      	add	r0, sp, #12
    1d2e:	f000 f961 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1d32:	686a      	ldr	r2, [r5, #4]
    1d34:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1d38:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1d3c:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1d40:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1d44:	23fe      	movs	r3, #254	; 0xfe
    1d46:	2101      	movs	r1, #1
    1d48:	4620      	mov	r0, r4
    1d4a:	324a      	adds	r2, #74	; 0x4a
    1d4c:	f007 fb5e 	bl	940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1d50:	2005      	movs	r0, #5
    1d52:	e7c0      	b.n	1cd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c2>
    1d54:	2000009c 	.word	0x2000009c
    1d58:	200007b8 	.word	0x200007b8
    1d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1d5e:	4c3f      	ldr	r4, [pc, #252]	; (1e5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x110>)
    1d60:	4605      	mov	r5, r0
    1d62:	6860      	ldr	r0, [r4, #4]
    1d64:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1d68:	2900      	cmp	r1, #0
    1d6a:	d06c      	beq.n	1e46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1d6c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1d70:	2802      	cmp	r0, #2
    1d72:	d02c      	beq.n	1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1d74:	2801      	cmp	r0, #1
    1d76:	d043      	beq.n	1e00 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>
    1d78:	f7ff fe2a 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d067      	beq.n	1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>
    1d80:	686a      	ldr	r2, [r5, #4]
    1d82:	6861      	ldr	r1, [r4, #4]
    1d84:	7810      	ldrb	r0, [r2, #0]
    1d86:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    1d8a:	4298      	cmp	r0, r3
    1d8c:	d14c      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1d8e:	7850      	ldrb	r0, [r2, #1]
    1d90:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    1d94:	4298      	cmp	r0, r3
    1d96:	d147      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1d98:	7890      	ldrb	r0, [r2, #2]
    1d9a:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    1d9e:	4298      	cmp	r0, r3
    1da0:	d142      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1da2:	78d0      	ldrb	r0, [r2, #3]
    1da4:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    1da8:	4298      	cmp	r0, r3
    1daa:	d13d      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1dac:	7910      	ldrb	r0, [r2, #4]
    1dae:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    1db2:	4298      	cmp	r0, r3
    1db4:	d138      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1db6:	7950      	ldrb	r0, [r2, #5]
    1db8:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    1dbc:	4290      	cmp	r0, r2
    1dbe:	d133      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1dc0:	7c68      	ldrb	r0, [r5, #17]
    1dc2:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    1dc6:	4290      	cmp	r0, r2
    1dc8:	d12e      	bne.n	1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1dca:	2001      	movs	r0, #1
    1dcc:	e02d      	b.n	1e2a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xde>
    1dce:	a803      	add	r0, sp, #12
    1dd0:	f000 f910 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1dd4:	6862      	ldr	r2, [r4, #4]
    1dd6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1dda:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1dde:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1de2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1de6:	23ff      	movs	r3, #255	; 0xff
    1de8:	2100      	movs	r1, #0
    1dea:	4628      	mov	r0, r5
    1dec:	324a      	adds	r2, #74	; 0x4a
    1dee:	f007 fb0d 	bl	940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1df2:	6861      	ldr	r1, [r4, #4]
    1df4:	2001      	movs	r0, #1
    1df6:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    1dfa:	200b      	movs	r0, #11
    1dfc:	b004      	add	sp, #16
    1dfe:	bd70      	pop	{r4, r5, r6, pc}
    1e00:	a803      	add	r0, sp, #12
    1e02:	f000 f8f7 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1e06:	6862      	ldr	r2, [r4, #4]
    1e08:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1e0c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1e10:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1e14:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1e18:	23ff      	movs	r3, #255	; 0xff
    1e1a:	2100      	movs	r1, #0
    1e1c:	4628      	mov	r0, r5
    1e1e:	324a      	adds	r2, #74	; 0x4a
    1e20:	f007 faf4 	bl	940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1e24:	2005      	movs	r0, #5
    1e26:	e7e9      	b.n	1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1e28:	2000      	movs	r0, #0
    1e2a:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    1e2e:	2901      	cmp	r1, #1
    1e30:	d00c      	beq.n	1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e32:	b958      	cbnz	r0, 1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e34:	490a      	ldr	r1, [pc, #40]	; (1e60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x114>)
    1e36:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    1e3a:	2808      	cmp	r0, #8
    1e3c:	d003      	beq.n	1e46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1e3e:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    1e42:	4281      	cmp	r1, r0
    1e44:	d002      	beq.n	1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e46:	f001 fc41 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1e4a:	e7eb      	b.n	1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>
    1e4c:	200c      	movs	r0, #12
    1e4e:	e7d5      	b.n	1dfc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>
    1e50:	f640 61e5 	movw	r1, #3813	; 0xee5
    1e54:	2032      	movs	r0, #50	; 0x32
    1e56:	f7fe faaf 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e5a:	0000      	.short	0x0000
    1e5c:	2000009c 	.word	0x2000009c
    1e60:	200007b8 	.word	0x200007b8
    1e64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1e66:	4c1e      	ldr	r4, [pc, #120]	; (1ee0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>)
    1e68:	4605      	mov	r5, r0
    1e6a:	6860      	ldr	r0, [r4, #4]
    1e6c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1e70:	b129      	cbz	r1, 1e7e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x132>
    1e72:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1e76:	2802      	cmp	r0, #2
    1e78:	d004      	beq.n	1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e7a:	2801      	cmp	r0, #1
    1e7c:	d01b      	beq.n	1eb6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16a>
    1e7e:	f001 fc25 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1e82:	e02a      	b.n	1eda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18e>
    1e84:	a803      	add	r0, sp, #12
    1e86:	f000 f8b5 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1e8a:	6862      	ldr	r2, [r4, #4]
    1e8c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1e90:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1e94:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1e98:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1e9c:	23ff      	movs	r3, #255	; 0xff
    1e9e:	2106      	movs	r1, #6
    1ea0:	4628      	mov	r0, r5
    1ea2:	324a      	adds	r2, #74	; 0x4a
    1ea4:	f007 fab2 	bl	940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1ea8:	6862      	ldr	r2, [r4, #4]
    1eaa:	200b      	movs	r0, #11
    1eac:	2100      	movs	r1, #0
    1eae:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    1eb2:	b004      	add	sp, #16
    1eb4:	bd70      	pop	{r4, r5, r6, pc}
    1eb6:	a803      	add	r0, sp, #12
    1eb8:	f000 f89c 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1ebc:	6862      	ldr	r2, [r4, #4]
    1ebe:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1ec2:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1ec6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1eca:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1ece:	23ff      	movs	r3, #255	; 0xff
    1ed0:	2106      	movs	r1, #6
    1ed2:	4628      	mov	r0, r5
    1ed4:	324a      	adds	r2, #74	; 0x4a
    1ed6:	f007 fa99 	bl	940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1eda:	2005      	movs	r0, #5
    1edc:	e7e9      	b.n	1eb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x166>
    1ede:	0000      	.short	0x0000
    1ee0:	2000009c 	.word	0x2000009c
    1ee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1ee6:	b389      	cbz	r1, 1f4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x200>
    1ee8:	2901      	cmp	r1, #1
    1eea:	d034      	beq.n	1f56 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1eec:	2505      	movs	r5, #5
    1eee:	2902      	cmp	r1, #2
    1ef0:	d004      	beq.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	2906      	cmp	r1, #6
    1ef4:	d025      	beq.n	1f42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f6>
    1ef6:	f001 fbe9 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1efa:	e01f      	b.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1efc:	4606      	mov	r6, r0
    1efe:	f001 fbe5 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1f02:	4c17      	ldr	r4, [pc, #92]	; (1f60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x214>)
    1f04:	6860      	ldr	r0, [r4, #4]
    1f06:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    1f0a:	b1b9      	cbz	r1, 1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1f0c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    1f10:	2801      	cmp	r0, #1
    1f12:	d001      	beq.n	1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>
    1f14:	2802      	cmp	r0, #2
    1f16:	d111      	bne.n	1f3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f0>
    1f18:	a803      	add	r0, sp, #12
    1f1a:	f000 f86b 	bl	1ff4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a8>
    1f1e:	6862      	ldr	r2, [r4, #4]
    1f20:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    1f24:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    1f28:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
    1f2c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    1f30:	23ff      	movs	r3, #255	; 0xff
    1f32:	2102      	movs	r1, #2
    1f34:	4630      	mov	r0, r6
    1f36:	324a      	adds	r2, #74	; 0x4a
    1f38:	f007 fa68 	bl	940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    1f3c:	b004      	add	sp, #16
    1f3e:	4628      	mov	r0, r5
    1f40:	bd70      	pop	{r4, r5, r6, pc}
    1f42:	b004      	add	sp, #16
    1f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f48:	f7ff bf8c 	b.w	1e64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x118>
    1f4c:	b004      	add	sp, #16
    1f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f52:	f7ff bf03 	b.w	1d5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1f56:	b004      	add	sp, #16
    1f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f5c:	f7ff be2c 	b.w	1bb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    1f60:	2000009c 	.word	0x2000009c
    1f64:	b570      	push	{r4, r5, r6, lr}
    1f66:	4c11      	ldr	r4, [pc, #68]	; (1fac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x260>)
    1f68:	4605      	mov	r5, r0
    1f6a:	6861      	ldr	r1, [r4, #4]
    1f6c:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    1f70:	2800      	cmp	r0, #0
    1f72:	d019      	beq.n	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    1f74:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    1f78:	2800      	cmp	r0, #0
    1f7a:	d015      	beq.n	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    1f7c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    1f80:	314a      	adds	r1, #74	; 0x4a
    1f82:	f007 f9b0 	bl	92e6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    1f86:	b140      	cbz	r0, 1f9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24e>
    1f88:	f7fe ff72 	bl	e70 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    1f8c:	6861      	ldr	r1, [r4, #4]
    1f8e:	462a      	mov	r2, r5
    1f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1f94:	314a      	adds	r1, #74	; 0x4a
    1f96:	f006 bff4 	b.w	8f82 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    1f9a:	6860      	ldr	r0, [r4, #4]
    1f9c:	4629      	mov	r1, r5
    1f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1fa2:	304a      	adds	r0, #74	; 0x4a
    1fa4:	f006 bfdc 	b.w	8f60 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
    1faa:	0000      	.short	0x0000
    1fac:	2000009c 	.word	0x2000009c
    1fb0:	4602      	mov	r2, r0
    1fb2:	480b      	ldr	r0, [pc, #44]	; (1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1fb4:	b082      	sub	sp, #8
    1fb6:	6840      	ldr	r0, [r0, #4]
    1fb8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    1fbc:	f88d 1000 	strb.w	r1, [sp]
    1fc0:	9900      	ldr	r1, [sp, #0]
    1fc2:	9100      	str	r1, [sp, #0]
    1fc4:	f89d 1000 	ldrb.w	r1, [sp]
    1fc8:	2900      	cmp	r1, #0
    1fca:	d107      	bne.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1fcc:	6e81      	ldr	r1, [r0, #104]	; 0x68
    1fce:	2900      	cmp	r1, #0
    1fd0:	d004      	beq.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1fd2:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    1fd6:	b002      	add	sp, #8
    1fd8:	f004 bd76 	b.w	6ac8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    1fdc:	b002      	add	sp, #8
    1fde:	4770      	bx	lr
    1fe0:	2000009c 	.word	0x2000009c
    1fe4:	b510      	push	{r4, lr}
    1fe6:	f7ff f885 	bl	10f4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    1fea:	4901      	ldr	r1, [pc, #4]	; (1ff0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a4>)
    1fec:	7008      	strb	r0, [r1, #0]
    1fee:	bd10      	pop	{r4, pc}
    1ff0:	2000009c 	.word	0x2000009c
    1ff4:	4a07      	ldr	r2, [pc, #28]	; (2014 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>)
    1ff6:	b510      	push	{r4, lr}
    1ff8:	f992 1000 	ldrsb.w	r1, [r2]
    1ffc:	297f      	cmp	r1, #127	; 0x7f
    1ffe:	d003      	beq.n	2008 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2bc>
    2000:	7001      	strb	r1, [r0, #0]
    2002:	207f      	movs	r0, #127	; 0x7f
    2004:	7010      	strb	r0, [r2, #0]
    2006:	bd10      	pop	{r4, pc}
    2008:	f240 414d 	movw	r1, #1101	; 0x44d
    200c:	2032      	movs	r0, #50	; 0x32
    200e:	f7fe f9d3 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2012:	0000      	.short	0x0000
    2014:	2000009c 	.word	0x2000009c
    2018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    201c:	4607      	mov	r7, r0
    201e:	f7fe fd7f 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2022:	4604      	mov	r4, r0
    2024:	f7fe fd82 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    2028:	4621      	mov	r1, r4
    202a:	f007 f9ca 	bl	93c2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    202e:	0005      	movs	r5, r0
    2030:	d012      	beq.n	2058 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30c>
    2032:	4c2d      	ldr	r4, [pc, #180]	; (20e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x39c>)
    2034:	6860      	ldr	r0, [r4, #4]
    2036:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    203a:	2801      	cmp	r0, #1
    203c:	d004      	beq.n	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    203e:	2802      	cmp	r0, #2
    2040:	d002      	beq.n	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    2042:	f7ff fcc5 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2046:	b150      	cbz	r0, 205e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x312>
    2048:	f06f 0613 	mvn.w	r6, #19
    204c:	b33f      	cbz	r7, 209e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x352>
    204e:	4628      	mov	r0, r5
    2050:	f007 f89c 	bl	918c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    2054:	b950      	cbnz	r0, 206c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x320>
    2056:	e005      	b.n	2064 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x318>
    2058:	f241 5157 	movw	r1, #5463	; 0x1557
    205c:	e03a      	b.n	20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    205e:	f241 515d 	movw	r1, #5469	; 0x155d
    2062:	e037      	b.n	20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    2064:	4628      	mov	r0, r5
    2066:	f007 f8ad 	bl	91c4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    206a:	b1c0      	cbz	r0, 209e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x352>
    206c:	6861      	ldr	r1, [r4, #4]
    206e:	4628      	mov	r0, r5
    2070:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    2074:	2a05      	cmp	r2, #5
    2076:	d202      	bcs.n	207e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x332>
    2078:	f241 41dc 	movw	r1, #5340	; 0x14dc
    207c:	e02a      	b.n	20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    207e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    2082:	2a0b      	cmp	r2, #11
    2084:	d302      	bcc.n	208c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x340>
    2086:	f241 41dd 	movw	r1, #5341	; 0x14dd
    208a:	e023      	b.n	20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    208c:	68e2      	ldr	r2, [r4, #12]
    208e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    2092:	6952      	ldr	r2, [r2, #20]
    2094:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    2098:	5851      	ldr	r1, [r2, r1]
    209a:	4788      	blx	r1
    209c:	e016      	b.n	20cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x380>
    209e:	6860      	ldr	r0, [r4, #4]
    20a0:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    20a4:	2905      	cmp	r1, #5
    20a6:	d202      	bcs.n	20ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x362>
    20a8:	f241 514d 	movw	r1, #5453	; 0x154d
    20ac:	e012      	b.n	20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    20ae:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    20b2:	290b      	cmp	r1, #11
    20b4:	d302      	bcc.n	20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    20b6:	f241 514e 	movw	r1, #5454	; 0x154e
    20ba:	e00b      	b.n	20d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x388>
    20bc:	68e1      	ldr	r1, [r4, #12]
    20be:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    20c2:	6989      	ldr	r1, [r1, #24]
    20c4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    20c8:	5808      	ldr	r0, [r1, r0]
    20ca:	4780      	blx	r0
    20cc:	280f      	cmp	r0, #15
    20ce:	d304      	bcc.n	20da <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38e>
    20d0:	f241 5172 	movw	r1, #5490	; 0x1572
    20d4:	2032      	movs	r0, #50	; 0x32
    20d6:	f7fe f96f 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20da:	68e1      	ldr	r1, [r4, #12]
    20dc:	6909      	ldr	r1, [r1, #16]
    20de:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    20e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    20e6:	4700      	bx	r0
    20e8:	2000009c 	.word	0x2000009c
    20ec:	b510      	push	{r4, lr}
    20ee:	b118      	cbz	r0, 20f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ac>
    20f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    20f4:	f000 b906 	b.w	2304 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>
    20f8:	2900      	cmp	r1, #0
    20fa:	d01d      	beq.n	2138 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ec>
    20fc:	480f      	ldr	r0, [pc, #60]	; (213c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f0>)
    20fe:	6841      	ldr	r1, [r0, #4]
    2100:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    2104:	2a0b      	cmp	r2, #11
    2106:	d202      	bcs.n	210e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c2>
    2108:	f241 612d 	movw	r1, #5677	; 0x162d
    210c:	e005      	b.n	211a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3ce>
    210e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    2112:	2a0f      	cmp	r2, #15
    2114:	d304      	bcc.n	2120 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d4>
    2116:	f241 612e 	movw	r1, #5678	; 0x162e
    211a:	2032      	movs	r0, #50	; 0x32
    211c:	f7fe f94c 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2120:	68c0      	ldr	r0, [r0, #12]
    2122:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    2126:	6880      	ldr	r0, [r0, #8]
    2128:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    212c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2130:	5840      	ldr	r0, [r0, r1]
    2132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2136:	4700      	bx	r0
    2138:	bd10      	pop	{r4, pc}
    213a:	0000      	.short	0x0000
    213c:	2000009c 	.word	0x2000009c
    2140:	b510      	push	{r4, lr}
    2142:	f7fe fced 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2146:	4604      	mov	r4, r0
    2148:	f7fe fcf0 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    214c:	4621      	mov	r1, r4
    214e:	f007 f938 	bl	93c2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    2152:	b150      	cbz	r0, 216a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x41e>
    2154:	f001 fcde 	bl	3b14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2158:	2000      	movs	r0, #0
    215a:	f001 fbad 	bl	38b8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    215e:	4905      	ldr	r1, [pc, #20]	; (2174 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x428>)
    2160:	2006      	movs	r0, #6
    2162:	6849      	ldr	r1, [r1, #4]
    2164:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2168:	bd10      	pop	{r4, pc}
    216a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
    216e:	2032      	movs	r0, #50	; 0x32
    2170:	f7fe f922 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2174:	2000009c 	.word	0x2000009c
    2178:	490f      	ldr	r1, [pc, #60]	; (21b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46c>)
    217a:	b510      	push	{r4, lr}
    217c:	6848      	ldr	r0, [r1, #4]
    217e:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    2182:	2a05      	cmp	r2, #5
    2184:	d202      	bcs.n	218c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    2186:	f241 6161 	movw	r1, #5729	; 0x1661
    218a:	e005      	b.n	2198 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44c>
    218c:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    2190:	2a0b      	cmp	r2, #11
    2192:	d304      	bcc.n	219e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x452>
    2194:	f241 6162 	movw	r1, #5730	; 0x1662
    2198:	2032      	movs	r0, #50	; 0x32
    219a:	f7fe f90d 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    219e:	68c9      	ldr	r1, [r1, #12]
    21a0:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    21a4:	68c9      	ldr	r1, [r1, #12]
    21a6:	f06f 0213 	mvn.w	r2, #19
    21aa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    21ae:	5808      	ldr	r0, [r1, r0]
    21b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    21b4:	4700      	bx	r0
    21b6:	0000      	.short	0x0000
    21b8:	2000009c 	.word	0x2000009c
    21bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21c0:	4c2c      	ldr	r4, [pc, #176]	; (2274 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x528>)
    21c2:	4605      	mov	r5, r0
    21c4:	460e      	mov	r6, r1
    21c6:	6860      	ldr	r0, [r4, #4]
    21c8:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    21cc:	b120      	cbz	r0, 21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    21ce:	2801      	cmp	r0, #1
    21d0:	d002      	beq.n	21d8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48c>
    21d2:	200c      	movs	r0, #12
    21d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21d8:	f001 fbf6 	bl	39c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    21dc:	f001 fa54 	bl	3688 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    21e0:	f001 f972 	bl	34c8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    21e4:	4824      	ldr	r0, [pc, #144]	; (2278 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52c>)
    21e6:	f001 fb5f 	bl	38a8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    21ea:	4824      	ldr	r0, [pc, #144]	; (227c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x530>)
    21ec:	f001 fd4e 	bl	3c8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    21f0:	4823      	ldr	r0, [pc, #140]	; (2280 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x534>)
    21f2:	f001 fd41 	bl	3c78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    21f6:	4630      	mov	r0, r6
    21f8:	f001 fc8c 	bl	3b14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    21fc:	7968      	ldrb	r0, [r5, #5]
    21fe:	b110      	cbz	r0, 2206 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    2200:	2001      	movs	r0, #1
    2202:	f7ff fed5 	bl	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    2206:	7928      	ldrb	r0, [r5, #4]
    2208:	2803      	cmp	r0, #3
    220a:	d001      	beq.n	2210 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c4>
    220c:	b118      	cbz	r0, 2216 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ca>
    220e:	e018      	b.n	2242 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f6>
    2210:	f640 2152 	movw	r1, #2642	; 0xa52
    2214:	e02a      	b.n	226c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x520>
    2216:	6861      	ldr	r1, [r4, #4]
    2218:	2000      	movs	r0, #0
    221a:	2503      	movs	r5, #3
    221c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    2220:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    2224:	1c52      	adds	r2, r2, #1
    2226:	fbb2 f7f5 	udiv	r7, r2, r5
    222a:	fb05 2217 	mls	r2, r5, r7, r2
    222e:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    2232:	fa23 f202 	lsr.w	r2, r3, r2
    2236:	07d2      	lsls	r2, r2, #31
    2238:	d103      	bne.n	2242 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f6>
    223a:	1c40      	adds	r0, r0, #1
    223c:	b2c0      	uxtb	r0, r0
    223e:	2803      	cmp	r0, #3
    2240:	d3ee      	bcc.n	2220 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d4>
    2242:	6860      	ldr	r0, [r4, #4]
    2244:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    2248:	f001 fc42 	bl	3ad0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    224c:	4631      	mov	r1, r6
    224e:	2001      	movs	r0, #1
    2250:	f7ff fb10 	bl	1874 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2254:	2800      	cmp	r0, #0
    2256:	d0bd      	beq.n	21d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x488>
    2258:	f000 f8d8 	bl	240c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c0>
    225c:	4809      	ldr	r0, [pc, #36]	; (2284 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x538>)
    225e:	6800      	ldr	r0, [r0, #0]
    2260:	2803      	cmp	r0, #3
    2262:	d001      	beq.n	2268 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x51c>
    2264:	2000      	movs	r0, #0
    2266:	e7b5      	b.n	21d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x488>
    2268:	f44f 6126 	mov.w	r1, #2656	; 0xa60
    226c:	2032      	movs	r0, #50	; 0x32
    226e:	f7fe f8a3 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2272:	0000      	.short	0x0000
    2274:	2000009c 	.word	0x2000009c
    2278:	000024f0 	.word	0x000024f0
    227c:	00555555 	.word	0x00555555
    2280:	8e89bed6 	.word	0x8e89bed6
    2284:	40001550 	.word	0x40001550
    2288:	b510      	push	{r4, lr}
    228a:	2000      	movs	r0, #0
    228c:	f7ff fe90 	bl	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    2290:	4808      	ldr	r0, [pc, #32]	; (22b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x568>)
    2292:	6840      	ldr	r0, [r0, #4]
    2294:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    2298:	b128      	cbz	r0, 22a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55a>
    229a:	2801      	cmp	r0, #1
    229c:	d003      	beq.n	22a6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55a>
    229e:	2802      	cmp	r0, #2
    22a0:	d004      	beq.n	22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    22a2:	200c      	movs	r0, #12
    22a4:	bd10      	pop	{r4, pc}
    22a6:	f000 f82d 	bl	2304 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>
    22aa:	e001      	b.n	22b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x564>
    22ac:	f000 f840 	bl	2330 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e4>
    22b0:	2000      	movs	r0, #0
    22b2:	bd10      	pop	{r4, pc}
    22b4:	2000009c 	.word	0x2000009c
    22b8:	b510      	push	{r4, lr}
    22ba:	2000      	movs	r0, #0
    22bc:	7048      	strb	r0, [r1, #1]
    22be:	2019      	movs	r0, #25
    22c0:	7008      	strb	r0, [r1, #0]
    22c2:	480f      	ldr	r0, [pc, #60]	; (2300 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b4>)
    22c4:	6840      	ldr	r0, [r0, #4]
    22c6:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    22ca:	6048      	str	r0, [r1, #4]
    22cc:	7908      	ldrb	r0, [r1, #4]
    22ce:	2801      	cmp	r0, #1
    22d0:	d114      	bne.n	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    22d2:	88cc      	ldrh	r4, [r1, #6]
    22d4:	2100      	movs	r1, #0
    22d6:	4620      	mov	r0, r4
    22d8:	f7fe fb18 	bl	90c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    22dc:	2800      	cmp	r0, #0
    22de:	d00d      	beq.n	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    22e0:	4620      	mov	r0, r4
    22e2:	f006 fe1c 	bl	8f1e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    22e6:	2100      	movs	r1, #0
    22e8:	4620      	mov	r0, r4
    22ea:	f7fe fb77 	bl	9dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    22ee:	2800      	cmp	r0, #0
    22f0:	d004      	beq.n	22fc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b0>
    22f2:	f240 4115 	movw	r1, #1045	; 0x415
    22f6:	2032      	movs	r0, #50	; 0x32
    22f8:	f7fe f85e 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22fc:	bd10      	pop	{r4, pc}
    22fe:	0000      	.short	0x0000
    2300:	2000009c 	.word	0x2000009c
    2304:	b510      	push	{r4, lr}
    2306:	f7ff faa3 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    230a:	4904      	ldr	r1, [pc, #16]	; (231c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d0>)
    230c:	2001      	movs	r0, #1
    230e:	6849      	ldr	r1, [r1, #4]
    2310:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2318:	f000 ba4e 	b.w	27b8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    231c:	2000009c 	.word	0x2000009c
    2320:	4902      	ldr	r1, [pc, #8]	; (232c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e0>)
    2322:	2000      	movs	r0, #0
    2324:	6849      	ldr	r1, [r1, #4]
    2326:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    232a:	4770      	bx	lr
    232c:	2000009c 	.word	0x2000009c
    2330:	b570      	push	{r4, r5, r6, lr}
    2332:	f7fe fbf5 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    2336:	4604      	mov	r4, r0
    2338:	f7fe fbf8 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    233c:	4621      	mov	r1, r4
    233e:	f007 f840 	bl	93c2 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa4>
    2342:	0004      	movs	r4, r0
    2344:	d020      	beq.n	2388 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x63c>
    2346:	f007 f849 	bl	93dc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    234a:	2000      	movs	r0, #0
    234c:	f000 f988 	bl	2660 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    2350:	b1f8      	cbz	r0, 2392 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x646>
    2352:	4d20      	ldr	r5, [pc, #128]	; (23d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x688>)
    2354:	6868      	ldr	r0, [r5, #4]
    2356:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    235a:	2802      	cmp	r0, #2
    235c:	d003      	beq.n	2366 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x61a>
    235e:	4621      	mov	r1, r4
    2360:	2000      	movs	r0, #0
    2362:	f7ff fa87 	bl	1874 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    2366:	1ce0      	adds	r0, r4, #3
    2368:	f006 fe6e 	bl	9048 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    236c:	6869      	ldr	r1, [r5, #4]
    236e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    2372:	b128      	cbz	r0, 2380 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x634>
    2374:	2440      	movs	r4, #64	; 0x40
    2376:	f001 f8c7 	bl	3508 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    237a:	4620      	mov	r0, r4
    237c:	f001 f992 	bl	36a4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    2380:	f7ff fb26 	bl	19d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1bc>
    2384:	b970      	cbnz	r0, 23a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x658>
    2386:	e008      	b.n	239a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64e>
    2388:	f240 511e 	movw	r1, #1310	; 0x51e
    238c:	2032      	movs	r0, #50	; 0x32
    238e:	f7fe f813 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2396:	f7ff bfb5 	b.w	2304 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>
    239a:	6868      	ldr	r0, [r5, #4]
    239c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    23a0:	2802      	cmp	r0, #2
    23a2:	d104      	bne.n	23ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x662>
    23a4:	2100      	movs	r1, #0
    23a6:	2201      	movs	r2, #1
    23a8:	4608      	mov	r0, r1
    23aa:	f001 fc3b 	bl	3c24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    23ae:	6868      	ldr	r0, [r5, #4]
    23b0:	21ff      	movs	r1, #255	; 0xff
    23b2:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    23b6:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    23ba:	2100      	movs	r1, #0
    23bc:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    23c0:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    23c4:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    23c8:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    23cc:	2105      	movs	r1, #5
    23ce:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    23d2:	bd70      	pop	{r4, r5, r6, pc}
    23d4:	2000009c 	.word	0x2000009c
    23d8:	b510      	push	{r4, lr}
    23da:	2003      	movs	r0, #3
    23dc:	f000 f940 	bl	2660 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    23e0:	b168      	cbz	r0, 23fe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6b2>
    23e2:	2003      	movs	r0, #3
    23e4:	f7ff fb4a 	bl	1a7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    23e8:	2201      	movs	r2, #1
    23ea:	4611      	mov	r1, r2
    23ec:	2000      	movs	r0, #0
    23ee:	f001 fc19 	bl	3c24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    23f2:	4905      	ldr	r1, [pc, #20]	; (2408 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6bc>)
    23f4:	200b      	movs	r0, #11
    23f6:	6849      	ldr	r1, [r1, #4]
    23f8:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    23fc:	bd10      	pop	{r4, pc}
    23fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2402:	f7ff bf7f 	b.w	2304 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>
    2406:	0000      	.short	0x0000
    2408:	2000009c 	.word	0x2000009c
    240c:	b570      	push	{r4, r5, r6, lr}
    240e:	4d19      	ldr	r5, [pc, #100]	; (2474 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x728>)
    2410:	2000      	movs	r0, #0
    2412:	686c      	ldr	r4, [r5, #4]
    2414:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    2418:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    241c:	b910      	cbnz	r0, 2424 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6d8>
    241e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    2422:	b308      	cbz	r0, 2468 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x71c>
    2424:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    2428:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    242c:	4050      	eors	r0, r2
    242e:	ea70 0101 	orns	r1, r0, r1
    2432:	d019      	beq.n	2468 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x71c>
    2434:	f007 fd04 	bl	9e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2438:	e9d4 2300 	ldrd	r2, r3, [r4]
    243c:	1a80      	subs	r0, r0, r2
    243e:	4199      	sbcs	r1, r3
    2440:	d312      	bcc.n	2468 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x71c>
    2442:	f7fe fdb5 	bl	fb0 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    2446:	490c      	ldr	r1, [pc, #48]	; (2478 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72c>)
    2448:	fba0 2301 	umull	r2, r3, r0, r1
    244c:	6868      	ldr	r0, [r5, #4]
    244e:	3090      	adds	r0, #144	; 0x90
    2450:	f006 ffb9 	bl	93c6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0xa8>
    2454:	6868      	ldr	r0, [r5, #4]
    2456:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    245a:	b110      	cbz	r0, 2462 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x716>
    245c:	2001      	movs	r0, #1
    245e:	f7fe fd31 	bl	ec4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    2462:	2001      	movs	r0, #1
    2464:	f7ff fd7e 	bl	1f64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x218>
    2468:	6869      	ldr	r1, [r5, #4]
    246a:	2002      	movs	r0, #2
    246c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    2470:	bd70      	pop	{r4, r5, r6, pc}
    2472:	0000      	.short	0x0000
    2474:	2000009c 	.word	0x2000009c
    2478:	000f4240 	.word	0x000f4240
    247c:	00002321 	.word	0x00002321
    2480:	00002305 	.word	0x00002305
    2484:	00009383 	.word	0x00009383
    2488:	00009383 	.word	0x00009383
    248c:	00009383 	.word	0x00009383
    2490:	00002331 	.word	0x00002331
    2494:	00009383 	.word	0x00009383
    2498:	00009383 	.word	0x00009383
    249c:	00009383 	.word	0x00009383
    24a0:	00009383 	.word	0x00009383
    24a4:	00009383 	.word	0x00009383
    24a8:	000023d9 	.word	0x000023d9
    24ac:	00009383 	.word	0x00009383
    24b0:	00009383 	.word	0x00009383
    24b4:	00009383 	.word	0x00009383
    24b8:	00002141 	.word	0x00002141
    24bc:	0000938d 	.word	0x0000938d
    24c0:	0000939b 	.word	0x0000939b
    24c4:	00009333 	.word	0x00009333
    24c8:	0000933d 	.word	0x0000933d
    24cc:	0000934b 	.word	0x0000934b
    24d0:	0000197d 	.word	0x0000197d
    24d4:	000021bd 	.word	0x000021bd
    24d8:	00002289 	.word	0x00002289
    24dc:	000024b8 	.word	0x000024b8
    24e0:	000024bc 	.word	0x000024bc
    24e4:	0000247c 	.word	0x0000247c
    24e8:	000024cc 	.word	0x000024cc
    24ec:	000024c4 	.word	0x000024c4
    24f0:	00002179 	.word	0x00002179
    24f4:	00002019 	.word	0x00002019
    24f8:	000020ed 	.word	0x000020ed
    24fc:	000093ad 	.word	0x000093ad
    2500:	b570      	push	{r4, r5, r6, lr}
    2502:	4604      	mov	r4, r0
    2504:	7800      	ldrb	r0, [r0, #0]
    2506:	2805      	cmp	r0, #5
    2508:	d001      	beq.n	250e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7c2>
    250a:	2148      	movs	r1, #72	; 0x48
    250c:	e058      	b.n	25c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x874>
    250e:	7ba0      	ldrb	r0, [r4, #14]
    2510:	06c0      	lsls	r0, r0, #27
    2512:	d401      	bmi.n	2518 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7cc>
    2514:	2149      	movs	r1, #73	; 0x49
    2516:	e053      	b.n	25c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x874>
    2518:	221c      	movs	r2, #28
    251a:	1d21      	adds	r1, r4, #4
    251c:	482f      	ldr	r0, [pc, #188]	; (25dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x890>)
    251e:	f007 fe21 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2522:	482e      	ldr	r0, [pc, #184]	; (25dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x890>)
    2524:	7b22      	ldrb	r2, [r4, #12]
    2526:	f104 0120 	add.w	r1, r4, #32
    252a:	301c      	adds	r0, #28
    252c:	f007 fe1a 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2530:	482a      	ldr	r0, [pc, #168]	; (25dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x890>)
    2532:	f04f 0201 	mov.w	r2, #1
    2536:	7a81      	ldrb	r1, [r0, #10]
    2538:	0749      	lsls	r1, r1, #29
    253a:	d502      	bpl.n	2542 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7f6>
    253c:	7cc1      	ldrb	r1, [r0, #19]
    253e:	29fe      	cmp	r1, #254	; 0xfe
    2540:	d00c      	beq.n	255c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x810>
    2542:	2304      	movs	r3, #4
    2544:	7023      	strb	r3, [r4, #0]
    2546:	6801      	ldr	r1, [r0, #0]
    2548:	6061      	str	r1, [r4, #4]
    254a:	6841      	ldr	r1, [r0, #4]
    254c:	60a1      	str	r1, [r4, #8]
    254e:	8901      	ldrh	r1, [r0, #8]
    2550:	81a1      	strh	r1, [r4, #12]
    2552:	7a81      	ldrb	r1, [r0, #10]
    2554:	070d      	lsls	r5, r1, #28
    2556:	d519      	bpl.n	258c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x840>
    2558:	73a3      	strb	r3, [r4, #14]
    255a:	e02d      	b.n	25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>
    255c:	2113      	movs	r1, #19
    255e:	7021      	strb	r1, [r4, #0]
    2560:	7801      	ldrb	r1, [r0, #0]
    2562:	7121      	strb	r1, [r4, #4]
    2564:	7162      	strb	r2, [r4, #5]
    2566:	7841      	ldrb	r1, [r0, #1]
    2568:	71a1      	strb	r1, [r4, #6]
    256a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    256e:	f8c4 1007 	str.w	r1, [r4, #7]
    2572:	88c1      	ldrh	r1, [r0, #6]
    2574:	f8a4 100b 	strh.w	r1, [r4, #11]
    2578:	21fe      	movs	r1, #254	; 0xfe
    257a:	7361      	strb	r1, [r4, #13]
    257c:	6941      	ldr	r1, [r0, #20]
    257e:	f8c4 100e 	str.w	r1, [r4, #14]
    2582:	8b01      	ldrh	r1, [r0, #24]
    2584:	8261      	strh	r1, [r4, #18]
    2586:	7a40      	ldrb	r0, [r0, #9]
    2588:	7520      	strb	r0, [r4, #20]
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	07cb      	lsls	r3, r1, #31
    258e:	d003      	beq.n	2598 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84c>
    2590:	078b      	lsls	r3, r1, #30
    2592:	d501      	bpl.n	2598 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84c>
    2594:	2100      	movs	r1, #0
    2596:	e00e      	b.n	25b6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86a>
    2598:	074b      	lsls	r3, r1, #29
    259a:	d501      	bpl.n	25a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x854>
    259c:	73a2      	strb	r2, [r4, #14]
    259e:	e00b      	b.n	25b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86c>
    25a0:	07ca      	lsls	r2, r1, #31
    25a2:	d110      	bne.n	25c6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87a>
    25a4:	078a      	lsls	r2, r1, #30
    25a6:	d501      	bpl.n	25ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x860>
    25a8:	2102      	movs	r1, #2
    25aa:	e004      	b.n	25b6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86a>
    25ac:	07ca      	lsls	r2, r1, #31
    25ae:	d10a      	bne.n	25c6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87a>
    25b0:	0789      	lsls	r1, r1, #30
    25b2:	d408      	bmi.n	25c6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87a>
    25b4:	2103      	movs	r1, #3
    25b6:	73a1      	strb	r1, [r4, #14]
    25b8:	7a02      	ldrb	r2, [r0, #8]
    25ba:	2a1f      	cmp	r2, #31
    25bc:	d905      	bls.n	25ca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x87e>
    25be:	218d      	movs	r1, #141	; 0x8d
    25c0:	2033      	movs	r0, #51	; 0x33
    25c2:	f7fd fef9 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25c6:	218a      	movs	r1, #138	; 0x8a
    25c8:	e7fa      	b.n	25c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x874>
    25ca:	f104 000f 	add.w	r0, r4, #15
    25ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25d2:	4902      	ldr	r1, [pc, #8]	; (25dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x890>)
    25d4:	311c      	adds	r1, #28
    25d6:	f007 bdc5 	b.w	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    25da:	0000      	.short	0x0000
    25dc:	20001244 	.word	0x20001244
    25e0:	2100      	movs	r1, #0
    25e2:	7201      	strb	r1, [r0, #8]
    25e4:	2206      	movs	r2, #6
    25e6:	4901      	ldr	r1, [pc, #4]	; (25ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8a0>)
    25e8:	f006 be30 	b.w	924c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25ec:	00009597 	.word	0x00009597

000025f0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    25f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25f4:	4616      	mov	r6, r2
    25f6:	460c      	mov	r4, r1
    25f8:	4605      	mov	r5, r0
    25fa:	f006 fddf 	bl	91bc <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    25fe:	7460      	strb	r0, [r4, #17]
    2600:	4628      	mov	r0, r5
    2602:	f006 fdd8 	bl	91b6 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    2606:	74a0      	strb	r0, [r4, #18]
    2608:	1cea      	adds	r2, r5, #3
    260a:	4b14      	ldr	r3, [pc, #80]	; (265c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    260c:	1d90      	adds	r0, r2, #6
    260e:	2100      	movs	r1, #0
    2610:	2e07      	cmp	r6, #7
    2612:	d21f      	bcs.n	2654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    2614:	e8df f006 	tbb	[pc, r6]
    2618:	1e110b04 	.word	0x1e110b04
    261c:	00041e13 	.word	0x00041e13
    2620:	781b      	ldrb	r3, [r3, #0]
    2622:	e00d      	b.n	2640 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    2624:	60e0      	str	r0, [r4, #12]
    2626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    262a:	60e1      	str	r1, [r4, #12]
    262c:	e7fb      	b.n	2626 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    262e:	785b      	ldrb	r3, [r3, #1]
    2630:	7063      	strb	r3, [r4, #1]
    2632:	e9c4 2001 	strd	r2, r0, [r4, #4]
    2636:	7421      	strb	r1, [r4, #16]
    2638:	e7f7      	b.n	262a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    263a:	789b      	ldrb	r3, [r3, #2]
    263c:	e000      	b.n	2640 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    263e:	78db      	ldrb	r3, [r3, #3]
    2640:	7063      	strb	r3, [r4, #1]
    2642:	e9c4 2101 	strd	r2, r1, [r4, #4]
    2646:	786a      	ldrb	r2, [r5, #1]
    2648:	1f92      	subs	r2, r2, #6
    264a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    264e:	7422      	strb	r2, [r4, #16]
    2650:	d0eb      	beq.n	262a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    2652:	e7e7      	b.n	2624 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    2654:	7061      	strb	r1, [r4, #1]
    2656:	6061      	str	r1, [r4, #4]
    2658:	60a1      	str	r1, [r4, #8]
    265a:	e7ec      	b.n	2636 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    265c:	0000a3a5 	.word	0x0000a3a5

00002660 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    2660:	b570      	push	{r4, r5, r6, lr}
    2662:	4605      	mov	r5, r0
    2664:	f007 fbec 	bl	9e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2668:	4c16      	ldr	r4, [pc, #88]	; (26c4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    266a:	6921      	ldr	r1, [r4, #16]
    266c:	1a46      	subs	r6, r0, r1
    266e:	b155      	cbz	r5, 2686 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    2670:	2d03      	cmp	r5, #3
    2672:	d00d      	beq.n	2690 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    2674:	2d04      	cmp	r5, #4
    2676:	d00e      	beq.n	2696 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    2678:	2d06      	cmp	r5, #6
    267a:	d01d      	beq.n	26b8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    267c:	f240 31d6 	movw	r1, #982	; 0x3d6
    2680:	2021      	movs	r0, #33	; 0x21
    2682:	f7fd fe99 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2686:	2001      	movs	r0, #1
    2688:	f007 f823 	bl	96d2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    268c:	3098      	adds	r0, #152	; 0x98
    268e:	e004      	b.n	269a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    2690:	f44f 7057 	mov.w	r0, #860	; 0x35c
    2694:	e001      	b.n	269a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    2696:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    269a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    269c:	1835      	adds	r5, r6, r0
    269e:	39f9      	subs	r1, #249	; 0xf9
    26a0:	428d      	cmp	r5, r1
    26a2:	d307      	bcc.n	26b4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    26a4:	2600      	movs	r6, #0
    26a6:	f000 fa1b 	bl	2ae0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    26aa:	b140      	cbz	r0, 26be <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    26ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    26ae:	38f9      	subs	r0, #249	; 0xf9
    26b0:	4285      	cmp	r5, r0
    26b2:	d203      	bcs.n	26bc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    26b4:	2601      	movs	r6, #1
    26b6:	e002      	b.n	26be <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    26b8:	2001      	movs	r0, #1
    26ba:	bd70      	pop	{r4, r5, r6, pc}
    26bc:	2600      	movs	r6, #0
    26be:	4630      	mov	r0, r6
    26c0:	bd70      	pop	{r4, r5, r6, pc}
    26c2:	0000      	.short	0x0000
    26c4:	20000860 	.word	0x20000860

000026c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    26c8:	b570      	push	{r4, r5, r6, lr}
    26ca:	b086      	sub	sp, #24
    26cc:	4606      	mov	r6, r0
    26ce:	b111      	cbz	r1, 26d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    26d0:	2011      	movs	r0, #17
    26d2:	b006      	add	sp, #24
    26d4:	bd70      	pop	{r4, r5, r6, pc}
    26d6:	4c17      	ldr	r4, [pc, #92]	; (2734 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    26d8:	7820      	ldrb	r0, [r4, #0]
    26da:	b108      	cbz	r0, 26e0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    26dc:	200c      	movs	r0, #12
    26de:	e7f8      	b.n	26d2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    26e0:	f7fe ff38 	bl	1554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    26e4:	4605      	mov	r5, r0
    26e6:	2000      	movs	r0, #0
    26e8:	7060      	strb	r0, [r4, #1]
    26ea:	2004      	movs	r0, #4
    26ec:	7020      	strb	r0, [r4, #0]
    26ee:	f000 fa3d 	bl	2b6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    26f2:	64a0      	str	r0, [r4, #72]	; 0x48
    26f4:	2100      	movs	r1, #0
    26f6:	4810      	ldr	r0, [pc, #64]	; (2738 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    26f8:	f004 f814 	bl	6724 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    26fc:	7028      	strb	r0, [r5, #0]
    26fe:	2820      	cmp	r0, #32
    2700:	d00d      	beq.n	271e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    2702:	4633      	mov	r3, r6
    2704:	2200      	movs	r2, #0
    2706:	2101      	movs	r1, #1
    2708:	4668      	mov	r0, sp
    270a:	f000 fa89 	bl	2c20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    270e:	b148      	cbz	r0, 2724 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    2710:	7828      	ldrb	r0, [r5, #0]
    2712:	4669      	mov	r1, sp
    2714:	f006 fff7 	bl	9706 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    2718:	b138      	cbz	r0, 272a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    271a:	2000      	movs	r0, #0
    271c:	e7d9      	b.n	26d2 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    271e:	f240 3162 	movw	r1, #866	; 0x362
    2722:	e004      	b.n	272e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    2724:	f44f 7159 	mov.w	r1, #868	; 0x364
    2728:	e001      	b.n	272e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    272a:	f240 3165 	movw	r1, #869	; 0x365
    272e:	2021      	movs	r0, #33	; 0x21
    2730:	f7fd fe42 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2734:	20000860 	.word	0x20000860
    2738:	000028a9 	.word	0x000028a9

0000273c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2740:	2700      	movs	r7, #0
    2742:	f7fe ff07 	bl	1554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2746:	4c18      	ldr	r4, [pc, #96]	; (27a8 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    2748:	4605      	mov	r5, r0
    274a:	7820      	ldrb	r0, [r4, #0]
    274c:	2804      	cmp	r0, #4
    274e:	d005      	beq.n	275c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    2750:	7820      	ldrb	r0, [r4, #0]
    2752:	2805      	cmp	r0, #5
    2754:	d002      	beq.n	275c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    2756:	200c      	movs	r0, #12
    2758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    275c:	2001      	movs	r0, #1
    275e:	7060      	strb	r0, [r4, #1]
    2760:	7b20      	ldrb	r0, [r4, #12]
    2762:	b160      	cbz	r0, 277e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    2764:	f3ef 8610 	mrs	r6, PRIMASK
    2768:	b672      	cpsid	i
    276a:	7b20      	ldrb	r0, [r4, #12]
    276c:	b128      	cbz	r0, 277a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    276e:	7b60      	ldrb	r0, [r4, #13]
    2770:	b118      	cbz	r0, 277a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    2772:	f006 fdd4 	bl	931e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2776:	f000 f887 	bl	2888 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    277a:	b126      	cbz	r6, 2786 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    277c:	e004      	b.n	2788 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    277e:	7828      	ldrb	r0, [r5, #0]
    2780:	f003 fd4e 	bl	6220 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    2784:	e000      	b.n	2788 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    2786:	b662      	cpsie	i
    2788:	7828      	ldrb	r0, [r5, #0]
    278a:	f003 feb3 	bl	64f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    278e:	f000 fb9f 	bl	2ed0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    2792:	2000      	movs	r0, #0
    2794:	7060      	strb	r0, [r4, #1]
    2796:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    279a:	b100      	cbz	r0, 279e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    279c:	270c      	movs	r7, #12
    279e:	f000 fbc3 	bl	2f28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    27a2:	4638      	mov	r0, r7
    27a4:	e7d8      	b.n	2758 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    27a6:	0000      	.short	0x0000
    27a8:	20000860 	.word	0x20000860

000027ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    27ac:	4801      	ldr	r0, [pc, #4]	; (27b4 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    27ae:	7800      	ldrb	r0, [r0, #0]
    27b0:	4770      	bx	lr
    27b2:	0000      	.short	0x0000
    27b4:	20000860 	.word	0x20000860

000027b8 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    27b8:	b510      	push	{r4, lr}
    27ba:	4c10      	ldr	r4, [pc, #64]	; (27fc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    27bc:	b086      	sub	sp, #24
    27be:	7b20      	ldrb	r0, [r4, #12]
    27c0:	b1b0      	cbz	r0, 27f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27c2:	7860      	ldrb	r0, [r4, #1]
    27c4:	b9a0      	cbnz	r0, 27f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27c6:	2300      	movs	r3, #0
    27c8:	461a      	mov	r2, r3
    27ca:	4619      	mov	r1, r3
    27cc:	4668      	mov	r0, sp
    27ce:	f000 fa27 	bl	2c20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    27d2:	b158      	cbz	r0, 27ec <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    27d4:	f7fe febe 	bl	1554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    27d8:	7800      	ldrb	r0, [r0, #0]
    27da:	4669      	mov	r1, sp
    27dc:	f006 ff93 	bl	9706 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    27e0:	b930      	cbnz	r0, 27f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    27e2:	f240 71bc 	movw	r1, #1980	; 0x7bc
    27e6:	2021      	movs	r0, #33	; 0x21
    27e8:	f7fd fde6 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27ec:	2001      	movs	r0, #1
    27ee:	70a0      	strb	r0, [r4, #2]
    27f0:	b006      	add	sp, #24
    27f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27f6:	f000 b847 	b.w	2888 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    27fa:	0000      	.short	0x0000
    27fc:	20000860 	.word	0x20000860

00002800 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    2800:	b508      	push	{r3, lr}
    2802:	2260      	movs	r2, #96	; 0x60
    2804:	2100      	movs	r1, #0
    2806:	480c      	ldr	r0, [pc, #48]	; (2838 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    2808:	f007 fd26 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    280c:	f7fe fea2 	bl	1554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2810:	2120      	movs	r1, #32
    2812:	7001      	strb	r1, [r0, #0]
    2814:	f000 f812 	bl	283c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    2818:	b120      	cbz	r0, 2824 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    281a:	f240 2135 	movw	r1, #565	; 0x235
    281e:	2021      	movs	r0, #33	; 0x21
    2820:	f7fd fdca 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2824:	f242 7010 	movw	r0, #10000	; 0x2710
    2828:	9000      	str	r0, [sp, #0]
    282a:	2201      	movs	r2, #1
    282c:	4669      	mov	r1, sp
    282e:	1080      	asrs	r0, r0, #2
    2830:	f000 f8dc 	bl	29ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    2834:	bd08      	pop	{r3, pc}
    2836:	0000      	.short	0x0000
    2838:	20000860 	.word	0x20000860

0000283c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    283c:	4803      	ldr	r0, [pc, #12]	; (284c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    283e:	b510      	push	{r4, lr}
    2840:	7800      	ldrb	r0, [r0, #0]
    2842:	b108      	cbz	r0, 2848 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    2844:	f7ff ff7a 	bl	273c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    2848:	2000      	movs	r0, #0
    284a:	bd10      	pop	{r4, pc}
    284c:	20000860 	.word	0x20000860

00002850 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    2850:	490c      	ldr	r1, [pc, #48]	; (2884 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    2852:	b508      	push	{r3, lr}
    2854:	7809      	ldrb	r1, [r1, #0]
    2856:	b121      	cbz	r1, 2862 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    2858:	f44f 7147 	mov.w	r1, #796	; 0x31c
    285c:	2021      	movs	r0, #33	; 0x21
    285e:	f7fd fdab 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2862:	2300      	movs	r3, #0
    2864:	9300      	str	r3, [sp, #0]
    2866:	7801      	ldrb	r1, [r0, #0]
    2868:	461a      	mov	r2, r3
    286a:	07c9      	lsls	r1, r1, #31
    286c:	d003      	beq.n	2876 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    286e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    2872:	2201      	movs	r2, #1
    2874:	9000      	str	r0, [sp, #0]
    2876:	4669      	mov	r1, sp
    2878:	4618      	mov	r0, r3
    287a:	f000 f8b7 	bl	29ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19c>
    287e:	2000      	movs	r0, #0
    2880:	bd08      	pop	{r3, pc}
    2882:	0000      	.short	0x0000
    2884:	20000860 	.word	0x20000860
    2888:	b510      	push	{r4, lr}
    288a:	4c06      	ldr	r4, [pc, #24]	; (28a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54>)
    288c:	7b20      	ldrb	r0, [r4, #12]
    288e:	2800      	cmp	r0, #0
    2890:	d006      	beq.n	28a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50>
    2892:	f001 f865 	bl	3960 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    2896:	f003 ff69 	bl	676c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    289a:	2000      	movs	r0, #0
    289c:	7320      	strb	r0, [r4, #12]
    289e:	7360      	strb	r0, [r4, #13]
    28a0:	bd10      	pop	{r4, pc}
    28a2:	0000      	.short	0x0000
    28a4:	20000860 	.word	0x20000860
    28a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28aa:	b087      	sub	sp, #28
    28ac:	460d      	mov	r5, r1
    28ae:	f7fe fe51 	bl	1554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    28b2:	2701      	movs	r7, #1
    28b4:	4c3f      	ldr	r4, [pc, #252]	; (29b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>)
    28b6:	2d09      	cmp	r5, #9
    28b8:	d278      	bcs.n	29ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x15c>
    28ba:	e8df f005 	tbb	[pc, r5]
    28be:	3905      	.short	0x3905
    28c0:	774a4f4f 	.word	0x774a4f4f
    28c4:	00726d64 	.word	0x00726d64
    28c8:	7327      	strb	r7, [r4, #12]
    28ca:	7861      	ldrb	r1, [r4, #1]
    28cc:	2900      	cmp	r1, #0
    28ce:	d12d      	bne.n	292c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    28d0:	7800      	ldrb	r0, [r0, #0]
    28d2:	f002 ff49 	bl	5768 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    28d6:	4605      	mov	r5, r0
    28d8:	460e      	mov	r6, r1
    28da:	e9c4 0104 	strd	r0, r1, [r4, #16]
    28de:	f000 fb3f 	bl	2f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    28e2:	b118      	cbz	r0, 28ec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>
    28e4:	2000      	movs	r0, #0
    28e6:	f88d 0004 	strb.w	r0, [sp, #4]
    28ea:	e001      	b.n	28f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    28ec:	f88d 7004 	strb.w	r7, [sp, #4]
    28f0:	f000 f950 	bl	2b94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    28f4:	4633      	mov	r3, r6
    28f6:	462a      	mov	r2, r5
    28f8:	f006 ff07 	bl	970a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    28fc:	6861      	ldr	r1, [r4, #4]
    28fe:	fbb0 f2f1 	udiv	r2, r0, r1
    2902:	fb01 0012 	mls	r0, r1, r2, r0
    2906:	b150      	cbz	r0, 291e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xce>
    2908:	f05f 0000 	movs.w	r0, #0
    290c:	f88d 0005 	strb.w	r0, [sp, #5]
    2910:	4668      	mov	r0, sp
    2912:	f7fe feb7 	bl	1684 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    2916:	b120      	cbz	r0, 2922 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xd2>
    2918:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    291c:	e043      	b.n	29a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    291e:	2001      	movs	r0, #1
    2920:	e7f4      	b.n	290c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>
    2922:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2924:	38e8      	subs	r0, #232	; 0xe8
    2926:	63a0      	str	r0, [r4, #56]	; 0x38
    2928:	f003 fffc 	bl	6924 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    292c:	b007      	add	sp, #28
    292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2930:	7860      	ldrb	r0, [r4, #1]
    2932:	b130      	cbz	r0, 2942 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf2>
    2934:	f006 fcf3 	bl	931e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    2938:	b007      	add	sp, #28
    293a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    293e:	f7ff bfa3 	b.w	2888 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    2942:	7367      	strb	r7, [r4, #13]
    2944:	f7fe ff26 	bl	1794 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    2948:	2800      	cmp	r0, #0
    294a:	d0ef      	beq.n	292c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    294c:	f240 11e1 	movw	r1, #481	; 0x1e1
    2950:	e029      	b.n	29a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    2952:	b007      	add	sp, #28
    2954:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2958:	f001 b9ce 	b.w	3cf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    295c:	7805      	ldrb	r5, [r0, #0]
    295e:	2300      	movs	r3, #0
    2960:	2201      	movs	r2, #1
    2962:	4619      	mov	r1, r3
    2964:	4668      	mov	r0, sp
    2966:	f000 f95b 	bl	2c20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>
    296a:	b140      	cbz	r0, 297e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12e>
    296c:	4669      	mov	r1, sp
    296e:	4628      	mov	r0, r5
    2970:	f006 fec9 	bl	9706 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4a>
    2974:	2800      	cmp	r0, #0
    2976:	d1d9      	bne.n	292c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2978:	f240 71d7 	movw	r1, #2007	; 0x7d7
    297c:	e013      	b.n	29a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    297e:	70a7      	strb	r7, [r4, #2]
    2980:	f000 f81a 	bl	29b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    2984:	e7d2      	b.n	292c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    2986:	f000 f8ab 	bl	2ae0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x290>
    298a:	2800      	cmp	r0, #0
    298c:	d1ce      	bne.n	292c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xdc>
    298e:	b007      	add	sp, #28
    2990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2994:	f006 bcc1 	b.w	931a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    2998:	b007      	add	sp, #28
    299a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    299e:	f000 b80b 	b.w	29b8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    29a2:	f240 2113 	movw	r1, #531	; 0x213
    29a6:	2021      	movs	r0, #33	; 0x21
    29a8:	f7fd fd06 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29ac:	f240 2117 	movw	r1, #535	; 0x217
    29b0:	e7f9      	b.n	29a6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x156>
    29b2:	0000      	.short	0x0000
    29b4:	20000860 	.word	0x20000860
    29b8:	b510      	push	{r4, lr}
    29ba:	4c0b      	ldr	r4, [pc, #44]	; (29e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x198>)
    29bc:	7820      	ldrb	r0, [r4, #0]
    29be:	b138      	cbz	r0, 29d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x180>
    29c0:	f000 fa86 	bl	2ed0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x680>
    29c4:	78a0      	ldrb	r0, [r4, #2]
    29c6:	b150      	cbz	r0, 29de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    29c8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    29cc:	b128      	cbz	r0, 29da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18a>
    29ce:	e006      	b.n	29de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x18e>
    29d0:	f240 117b 	movw	r1, #379	; 0x17b
    29d4:	2021      	movs	r0, #33	; 0x21
    29d6:	f7fd fcef 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29da:	f7fe fef3 	bl	17c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    29de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29e2:	f000 baa1 	b.w	2f28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d8>
    29e6:	0000      	.short	0x0000
    29e8:	20000860 	.word	0x20000860
    29ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29f0:	4d11      	ldr	r5, [pc, #68]	; (2a38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e8>)
    29f2:	4616      	mov	r6, r2
    29f4:	460f      	mov	r7, r1
    29f6:	2400      	movs	r4, #0
    29f8:	6068      	str	r0, [r5, #4]
    29fa:	f006 fe5f 	bl	96bc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    29fe:	f8df c03c 	ldr.w	ip, [pc, #60]	; 2a3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ec>
    2a02:	2100      	movs	r1, #0
    2a04:	f81c 2001 	ldrb.w	r2, [ip, r1]
    2a08:	4232      	tst	r2, r6
    2a0a:	d007      	beq.n	2a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    2a0c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2a10:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    2a14:	1a1b      	subs	r3, r3, r0
    2a16:	1c64      	adds	r4, r4, #1
    2a18:	b2e4      	uxtb	r4, r4
    2a1a:	6093      	str	r3, [r2, #8]
    2a1c:	1c49      	adds	r1, r1, #1
    2a1e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    2a22:	d0ef      	beq.n	2a04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1b4>
    2a24:	f016 0f0e 	tst.w	r6, #14
    2a28:	d004      	beq.n	2a34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1e4>
    2a2a:	f240 7103 	movw	r1, #1795	; 0x703
    2a2e:	2021      	movs	r0, #33	; 0x21
    2a30:	f7fd fcc2 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a38:	20000860 	.word	0x20000860
    2a3c:	0000a3a9 	.word	0x0000a3a9
    2a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a44:	b086      	sub	sp, #24
    2a46:	4692      	mov	sl, r2
    2a48:	4607      	mov	r7, r0
    2a4a:	4689      	mov	r9, r1
    2a4c:	f000 fa94 	bl	2f78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a50:	4d22      	ldr	r5, [pc, #136]	; (2adc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x28c>)
    2a52:	f04f 0800 	mov.w	r8, #0
    2a56:	686a      	ldr	r2, [r5, #4]
    2a58:	1886      	adds	r6, r0, r2
    2a5a:	eb41 0108 	adc.w	r1, r1, r8
    2a5e:	460c      	mov	r4, r1
    2a60:	460b      	mov	r3, r1
    2a62:	4632      	mov	r2, r6
    2a64:	4638      	mov	r0, r7
    2a66:	4649      	mov	r1, r9
    2a68:	f006 fe4f 	bl	970a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2a6c:	4607      	mov	r7, r0
    2a6e:	f006 fe43 	bl	96f8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    2a72:	4287      	cmp	r7, r0
    2a74:	da13      	bge.n	2a9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x24e>
    2a76:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    2a7a:	f000 fa7d 	bl	2f78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2a7e:	4632      	mov	r2, r6
    2a80:	4623      	mov	r3, r4
    2a82:	f006 fe42 	bl	970a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2a86:	6869      	ldr	r1, [r5, #4]
    2a88:	fbb0 f1f1 	udiv	r1, r0, r1
    2a8c:	f8ca 1000 	str.w	r1, [sl]
    2a90:	6868      	ldr	r0, [r5, #4]
    2a92:	1980      	adds	r0, r0, r6
    2a94:	eb48 0104 	adc.w	r1, r8, r4
    2a98:	b006      	add	sp, #24
    2a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a9e:	f88d 8000 	strb.w	r8, [sp]
    2aa2:	6b68      	ldr	r0, [r5, #52]	; 0x34
    2aa4:	9001      	str	r0, [sp, #4]
    2aa6:	f006 fdf2 	bl	968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2aaa:	f8ad 0008 	strh.w	r0, [sp, #8]
    2aae:	2001      	movs	r0, #1
    2ab0:	f88d 000b 	strb.w	r0, [sp, #11]
    2ab4:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    2ab8:	f000 fa5e 	bl	2f78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2ac0:	f000 f9ec 	bl	2e9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2ac4:	f88d 000a 	strb.w	r0, [sp, #10]
    2ac8:	4668      	mov	r0, sp
    2aca:	6869      	ldr	r1, [r5, #4]
    2acc:	f006 fafd 	bl	90ca <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    2ad0:	f8ca 0000 	str.w	r0, [sl]
    2ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2ad8:	e7de      	b.n	2a98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    2ada:	0000      	.short	0x0000
    2adc:	20000860 	.word	0x20000860
    2ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae4:	f007 f9ac 	bl	9e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2ae8:	4c1f      	ldr	r4, [pc, #124]	; (2b68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x318>)
    2aea:	4606      	mov	r6, r0
    2aec:	460d      	mov	r5, r1
    2aee:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    2af2:	f000 f9d3 	bl	2e9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2af6:	4607      	mov	r7, r0
    2af8:	f002 fdec 	bl	56d4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    2afc:	4602      	mov	r2, r0
    2afe:	2867      	cmp	r0, #103	; 0x67
    2b00:	d323      	bcc.n	2b4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    2b02:	1c50      	adds	r0, r2, #1
    2b04:	d024      	beq.n	2b50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x300>
    2b06:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2b0a:	1888      	adds	r0, r1, r2
    2b0c:	4283      	cmp	r3, r0
    2b0e:	d800      	bhi.n	2b12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2c2>
    2b10:	1a5a      	subs	r2, r3, r1
    2b12:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    2b16:	1830      	adds	r0, r6, r0
    2b18:	f145 31ff 	adc.w	r1, r5, #4294967295
    2b1c:	f000 fa42 	bl	2fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2b20:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2b22:	4408      	add	r0, r1
    2b24:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2b26:	1a45      	subs	r5, r0, r1
    2b28:	f241 3088 	movw	r0, #5000	; 0x1388
    2b2c:	4285      	cmp	r5, r0
    2b2e:	d900      	bls.n	2b32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2e2>
    2b30:	4605      	mov	r5, r0
    2b32:	f007 f985 	bl	9e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2b36:	1b80      	subs	r0, r0, r6
    2b38:	f100 00a1 	add.w	r0, r0, #161	; 0xa1
    2b3c:	4285      	cmp	r5, r0
    2b3e:	d304      	bcc.n	2b4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fa>
    2b40:	4639      	mov	r1, r7
    2b42:	4628      	mov	r0, r5
    2b44:	f002 fcd6 	bl	54f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    2b48:	b120      	cbz	r0, 2b54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x304>
    2b4a:	2000      	movs	r0, #0
    2b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b50:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b52:	e7e7      	b.n	2b24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d4>
    2b54:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2b56:	4428      	add	r0, r5
    2b58:	6320      	str	r0, [r4, #48]	; 0x30
    2b5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2b5c:	4428      	add	r0, r5
    2b5e:	63a0      	str	r0, [r4, #56]	; 0x38
    2b60:	f003 fee0 	bl	6924 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    2b64:	2001      	movs	r0, #1
    2b66:	e7f1      	b.n	2b4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2fc>
    2b68:	20000860 	.word	0x20000860
    2b6c:	b510      	push	{r4, lr}
    2b6e:	2400      	movs	r4, #0
    2b70:	f006 fda4 	bl	96bc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    2b74:	4a06      	ldr	r2, [pc, #24]	; (2b90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x340>)
    2b76:	2100      	movs	r1, #0
    2b78:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    2b7c:	4404      	add	r4, r0
    2b7e:	689b      	ldr	r3, [r3, #8]
    2b80:	1c49      	adds	r1, r1, #1
    2b82:	441c      	add	r4, r3
    2b84:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    2b88:	d0f6      	beq.n	2b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x328>
    2b8a:	4620      	mov	r0, r4
    2b8c:	bd10      	pop	{r4, pc}
    2b8e:	0000      	.short	0x0000
    2b90:	20000860 	.word	0x20000860
    2b94:	4901      	ldr	r1, [pc, #4]	; (2b9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34c>)
    2b96:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    2b9a:	4770      	bx	lr
    2b9c:	20000860 	.word	0x20000860
    2ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ba4:	4606      	mov	r6, r0
    2ba6:	481d      	ldr	r0, [pc, #116]	; (2c1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    2ba8:	4688      	mov	r8, r1
    2baa:	4615      	mov	r5, r2
    2bac:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    2bb0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    2bb4:	2701      	movs	r7, #1
    2bb6:	4050      	eors	r0, r2
    2bb8:	b086      	sub	sp, #24
    2bba:	ea70 0101 	orns	r1, r0, r1
    2bbe:	d021      	beq.n	2c04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b4>
    2bc0:	2400      	movs	r4, #0
    2bc2:	f88d 4000 	strb.w	r4, [sp]
    2bc6:	9501      	str	r5, [sp, #4]
    2bc8:	f006 fd61 	bl	968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2bcc:	f8ad 0008 	strh.w	r0, [sp, #8]
    2bd0:	f88d 700b 	strb.w	r7, [sp, #11]
    2bd4:	f006 fd90 	bl	96f8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3c>
    2bd8:	1982      	adds	r2, r0, r6
    2bda:	eb44 0008 	adc.w	r0, r4, r8
    2bde:	e9cd 2004 	strd	r2, r0, [sp, #16]
    2be2:	2002      	movs	r0, #2
    2be4:	f88d 000a 	strb.w	r0, [sp, #10]
    2be8:	4668      	mov	r0, sp
    2bea:	f003 f95f 	bl	5eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    2bee:	b168      	cbz	r0, 2c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3bc>
    2bf0:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    2bf4:	194a      	adds	r2, r1, r5
    2bf6:	4909      	ldr	r1, [pc, #36]	; (2c1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    2bf8:	4160      	adcs	r0, r4
    2bfa:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    2bfe:	1a9a      	subs	r2, r3, r2
    2c00:	4181      	sbcs	r1, r0
    2c02:	d408      	bmi.n	2c16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c6>
    2c04:	2001      	movs	r0, #1
    2c06:	b006      	add	sp, #24
    2c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c0c:	f240 5135 	movw	r1, #1333	; 0x535
    2c10:	2021      	movs	r0, #33	; 0x21
    2c12:	f7fd fbd1 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c16:	2000      	movs	r0, #0
    2c18:	e7f5      	b.n	2c06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3b6>
    2c1a:	0000      	.short	0x0000
    2c1c:	20000860 	.word	0x20000860
    2c20:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c24:	b087      	sub	sp, #28
    2c26:	4614      	mov	r4, r2
    2c28:	4606      	mov	r6, r0
    2c2a:	f007 f909 	bl	9e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    2c2e:	4d99      	ldr	r5, [pc, #612]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c30:	4680      	mov	r8, r0
    2c32:	4689      	mov	r9, r1
    2c34:	68a8      	ldr	r0, [r5, #8]
    2c36:	f04f 0a00 	mov.w	sl, #0
    2c3a:	9002      	str	r0, [sp, #8]
    2c3c:	f7ff ff96 	bl	2b6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x31c>
    2c40:	6869      	ldr	r1, [r5, #4]
    2c42:	4288      	cmp	r0, r1
    2c44:	d101      	bne.n	2c4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fa>
    2c46:	2001      	movs	r0, #1
    2c48:	e000      	b.n	2c4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3fc>
    2c4a:	2000      	movs	r0, #0
    2c4c:	9004      	str	r0, [sp, #16]
    2c4e:	4020      	ands	r0, r4
    2c50:	9003      	str	r0, [sp, #12]
    2c52:	9808      	ldr	r0, [sp, #32]
    2c54:	2800      	cmp	r0, #0
    2c56:	d07f      	beq.n	2d58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    2c58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    2c5c:	eb18 0b02 	adds.w	fp, r8, r2
    2c60:	f149 0400 	adc.w	r4, r9, #0
    2c64:	f000 fa8a 	bl	317c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    2c68:	9000      	str	r0, [sp, #0]
    2c6a:	488a      	ldr	r0, [pc, #552]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c6c:	7800      	ldrb	r0, [r0, #0]
    2c6e:	4f89      	ldr	r7, [pc, #548]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c70:	3740      	adds	r7, #64	; 0x40
    2c72:	2805      	cmp	r0, #5
    2c74:	d135      	bne.n	2ce2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    2c76:	4887      	ldr	r0, [pc, #540]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c78:	6a00      	ldr	r0, [r0, #32]
    2c7a:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2c7e:	f000 fa63 	bl	3148 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    2c82:	9900      	ldr	r1, [sp, #0]
    2c84:	4605      	mov	r5, r0
    2c86:	4288      	cmp	r0, r1
    2c88:	d009      	beq.n	2c9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44e>
    2c8a:	4882      	ldr	r0, [pc, #520]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2c8c:	4629      	mov	r1, r5
    2c8e:	6a00      	ldr	r0, [r0, #32]
    2c90:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2c94:	f000 fa0c 	bl	30b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    2c98:	2000      	movs	r0, #0
    2c9a:	61b8      	str	r0, [r7, #24]
    2c9c:	e00c      	b.n	2cb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x468>
    2c9e:	497d      	ldr	r1, [pc, #500]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2ca0:	6a08      	ldr	r0, [r1, #32]
    2ca2:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2ca6:	61b8      	str	r0, [r7, #24]
    2ca8:	6a08      	ldr	r0, [r1, #32]
    2caa:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    2cac:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2cb0:	4282      	cmp	r2, r0
    2cb2:	d300      	bcc.n	2cb6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x466>
    2cb4:	4610      	mov	r0, r2
    2cb6:	6488      	str	r0, [r1, #72]	; 0x48
    2cb8:	4876      	ldr	r0, [pc, #472]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2cba:	6a00      	ldr	r0, [r0, #32]
    2cbc:	b158      	cbz	r0, 2cd6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x486>
    2cbe:	b16d      	cbz	r5, 2cdc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48c>
    2cc0:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    2cc4:	f8d5 c000 	ldr.w	ip, [r5]
    2cc8:	eb1c 0303 	adds.w	r3, ip, r3
    2ccc:	eb41 010a 	adc.w	r1, r1, sl
    2cd0:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    2cd4:	e005      	b.n	2ce2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x492>
    2cd6:	f240 7193 	movw	r1, #1939	; 0x793
    2cda:	e01a      	b.n	2d12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    2cdc:	2100      	movs	r1, #0
    2cde:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    2ce2:	4638      	mov	r0, r7
    2ce4:	9900      	ldr	r1, [sp, #0]
    2ce6:	f000 f9e3 	bl	30b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    2cea:	486a      	ldr	r0, [pc, #424]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2cec:	9a00      	ldr	r2, [sp, #0]
    2cee:	6845      	ldr	r5, [r0, #4]
    2cf0:	b192      	cbz	r2, 2d18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c8>
    2cf2:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    2cf6:	6817      	ldr	r7, [r2, #0]
    2cf8:	e9cd b400 	strd	fp, r4, [sp]
    2cfc:	18f8      	adds	r0, r7, r3
    2cfe:	eb41 010a 	adc.w	r1, r1, sl
    2d02:	462a      	mov	r2, r5
    2d04:	f006 fd29 	bl	975a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    2d08:	4601      	mov	r1, r0
    2d0a:	42a8      	cmp	r0, r5
    2d0c:	d905      	bls.n	2d1a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4ca>
    2d0e:	f240 31f9 	movw	r1, #1017	; 0x3f9
    2d12:	2021      	movs	r0, #33	; 0x21
    2d14:	f7fd fb50 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d18:	2100      	movs	r1, #0
    2d1a:	eb1b 0501 	adds.w	r5, fp, r1
    2d1e:	495d      	ldr	r1, [pc, #372]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2d20:	4650      	mov	r0, sl
    2d22:	4144      	adcs	r4, r0
    2d24:	684a      	ldr	r2, [r1, #4]
    2d26:	1aab      	subs	r3, r5, r2
    2d28:	eb64 020a 	sbc.w	r2, r4, sl
    2d2c:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    2d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d32:	3128      	adds	r1, #40	; 0x28
    2d34:	b152      	cbz	r2, 2d4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    2d36:	f242 7310 	movw	r3, #10000	; 0x2710
    2d3a:	435a      	muls	r2, r3
    2d3c:	18aa      	adds	r2, r5, r2
    2d3e:	eb44 000a 	adc.w	r0, r4, sl
    2d42:	e9c1 2000 	strd	r2, r0, [r1]
    2d46:	2001      	movs	r0, #1
    2d48:	e051      	b.n	2dee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x59e>
    2d4a:	e005      	b.n	2d58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x508>
    2d4c:	f04f 30ff 	mov.w	r0, #4294967295
    2d50:	0842      	lsrs	r2, r0, #1
    2d52:	e9c1 0200 	strd	r0, r2, [r1]
    2d56:	e7f6      	b.n	2d46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4f6>
    2d58:	9803      	ldr	r0, [sp, #12]
    2d5a:	b1d8      	cbz	r0, 2d94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x544>
    2d5c:	2001      	movs	r0, #1
    2d5e:	f006 fcb8 	bl	96d2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2d62:	4604      	mov	r4, r0
    2d64:	2001      	movs	r0, #1
    2d66:	f000 fee5 	bl	3b34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    2d6a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    2d6e:	4401      	add	r1, r0
    2d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2d74:	fbb1 f0f0 	udiv	r0, r1, r0
    2d78:	1822      	adds	r2, r4, r0
    2d7a:	4640      	mov	r0, r8
    2d7c:	4649      	mov	r1, r9
    2d7e:	32f9      	adds	r2, #249	; 0xf9
    2d80:	f7ff ff0e 	bl	2ba0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    2d84:	b908      	cbnz	r0, 2d8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x53a>
    2d86:	2000      	movs	r0, #0
    2d88:	9002      	str	r0, [sp, #8]
    2d8a:	4645      	mov	r5, r8
    2d8c:	464c      	mov	r4, r9
    2d8e:	f8cd a014 	str.w	sl, [sp, #20]
    2d92:	e02d      	b.n	2df0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    2d94:	b13c      	cbz	r4, 2da6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x556>
    2d96:	aa05      	add	r2, sp, #20
    2d98:	4640      	mov	r0, r8
    2d9a:	4649      	mov	r1, r9
    2d9c:	f7ff fe50 	bl	2a40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f0>
    2da0:	4605      	mov	r5, r0
    2da2:	460c      	mov	r4, r1
    2da4:	e024      	b.n	2df0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a0>
    2da6:	4640      	mov	r0, r8
    2da8:	4649      	mov	r1, r9
    2daa:	f000 f8e5 	bl	2f78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>
    2dae:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>
    2db2:	4602      	mov	r2, r0
    2db4:	4608      	mov	r0, r1
    2db6:	f8db 1008 	ldr.w	r1, [fp, #8]
    2dba:	9102      	str	r1, [sp, #8]
    2dbc:	f8db 3004 	ldr.w	r3, [fp, #4]
    2dc0:	4657      	mov	r7, sl
    2dc2:	189d      	adds	r5, r3, r2
    2dc4:	eb4a 0400 	adc.w	r4, sl, r0
    2dc8:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    2dcc:	f000 f8c8 	bl	2f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    2dd0:	f8db 1004 	ldr.w	r1, [fp, #4]
    2dd4:	4348      	muls	r0, r1
    2dd6:	9000      	str	r0, [sp, #0]
    2dd8:	f7ff fedc 	bl	2b94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2ddc:	9a00      	ldr	r2, [sp, #0]
    2dde:	1880      	adds	r0, r0, r2
    2de0:	4179      	adcs	r1, r7
    2de2:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    2de6:	4621      	mov	r1, r4
    2de8:	4628      	mov	r0, r5
    2dea:	f000 f8b9 	bl	2f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    2dee:	9005      	str	r0, [sp, #20]
    2df0:	2001      	movs	r0, #1
    2df2:	f006 fc6e 	bl	96d2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    2df6:	4607      	mov	r7, r0
    2df8:	2001      	movs	r0, #1
    2dfa:	f000 fe9b 	bl	3b34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    2dfe:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    2e02:	4401      	add	r1, r0
    2e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2e08:	fbb1 f0f0 	udiv	r0, r1, r0
    2e0c:	4407      	add	r7, r0
    2e0e:	4628      	mov	r0, r5
    2e10:	4621      	mov	r1, r4
    2e12:	37f9      	adds	r7, #249	; 0xf9
    2e14:	9a02      	ldr	r2, [sp, #8]
    2e16:	f000 f8c5 	bl	2fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2e1a:	491e      	ldr	r1, [pc, #120]	; (2e94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x644>)
    2e1c:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    2e20:	6892      	ldr	r2, [r2, #8]
    2e22:	4282      	cmp	r2, r0
    2e24:	d800      	bhi.n	2e28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d8>
    2e26:	4610      	mov	r0, r2
    2e28:	6348      	str	r0, [r1, #52]	; 0x34
    2e2a:	9a08      	ldr	r2, [sp, #32]
    2e2c:	b10a      	cbz	r2, 2e32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e2>
    2e2e:	e9c1 5404 	strd	r5, r4, [r1, #16]
    2e32:	e9c1 5406 	strd	r5, r4, [r1, #24]
    2e36:	468b      	mov	fp, r1
    2e38:	9904      	ldr	r1, [sp, #16]
    2e3a:	b111      	cbz	r1, 2e42 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f2>
    2e3c:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    2e40:	e001      	b.n	2e46 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5f6>
    2e42:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    2e46:	2001      	movs	r0, #1
    2e48:	72f0      	strb	r0, [r6, #11]
    2e4a:	f006 fc20 	bl	968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    2e4e:	8130      	strh	r0, [r6, #8]
    2e50:	4628      	mov	r0, r5
    2e52:	4621      	mov	r1, r4
    2e54:	f000 f822 	bl	2e9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x64c>
    2e58:	72b0      	strb	r0, [r6, #10]
    2e5a:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    2e5e:	6070      	str	r0, [r6, #4]
    2e60:	9803      	ldr	r0, [sp, #12]
    2e62:	b148      	cbz	r0, 2e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x628>
    2e64:	2001      	movs	r0, #1
    2e66:	7030      	strb	r0, [r6, #0]
    2e68:	4a0b      	ldr	r2, [pc, #44]	; (2e98 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x648>)
    2e6a:	4640      	mov	r0, r8
    2e6c:	4649      	mov	r1, r9
    2e6e:	f000 f899 	bl	2fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x754>
    2e72:	1bc0      	subs	r0, r0, r7
    2e74:	6130      	str	r0, [r6, #16]
    2e76:	e003      	b.n	2e80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x630>
    2e78:	f886 a000 	strb.w	sl, [r6]
    2e7c:	e9c6 5404 	strd	r5, r4, [r6, #16]
    2e80:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    2e84:	42b8      	cmp	r0, r7
    2e86:	d303      	bcc.n	2e90 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x640>
    2e88:	2001      	movs	r0, #1
    2e8a:	b00b      	add	sp, #44	; 0x2c
    2e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e90:	2000      	movs	r0, #0
    2e92:	e7fa      	b.n	2e8a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x63a>
    2e94:	20000860 	.word	0x20000860
    2e98:	0f424000 	.word	0x0f424000
    2e9c:	b570      	push	{r4, r5, r6, lr}
    2e9e:	4604      	mov	r4, r0
    2ea0:	480a      	ldr	r0, [pc, #40]	; (2ecc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>)
    2ea2:	460d      	mov	r5, r1
    2ea4:	7801      	ldrb	r1, [r0, #0]
    2ea6:	2904      	cmp	r1, #4
    2ea8:	d10d      	bne.n	2ec6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    2eaa:	6840      	ldr	r0, [r0, #4]
    2eac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2eb0:	0046      	lsls	r6, r0, #1
    2eb2:	f7ff fe6f 	bl	2b94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2eb6:	4622      	mov	r2, r4
    2eb8:	462b      	mov	r3, r5
    2eba:	f006 fc26 	bl	970a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2ebe:	42b0      	cmp	r0, r6
    2ec0:	d201      	bcs.n	2ec6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x676>
    2ec2:	2002      	movs	r0, #2
    2ec4:	bd70      	pop	{r4, r5, r6, pc}
    2ec6:	2001      	movs	r0, #1
    2ec8:	bd70      	pop	{r4, r5, r6, pc}
    2eca:	0000      	.short	0x0000
    2ecc:	20000860 	.word	0x20000860
    2ed0:	b570      	push	{r4, r5, r6, lr}
    2ed2:	4d14      	ldr	r5, [pc, #80]	; (2f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6d4>)
    2ed4:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    2ed8:	f105 0440 	add.w	r4, r5, #64	; 0x40
    2edc:	2800      	cmp	r0, #0
    2ede:	7828      	ldrb	r0, [r5, #0]
    2ee0:	d00f      	beq.n	2f02 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6b2>
    2ee2:	2805      	cmp	r0, #5
    2ee4:	d004      	beq.n	2ef0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    2ee6:	f240 2157 	movw	r1, #599	; 0x257
    2eea:	2021      	movs	r0, #33	; 0x21
    2eec:	f7fd fa64 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ef0:	4620      	mov	r0, r4
    2ef2:	f006 fbe9 	bl	96c8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    2ef6:	b178      	cbz	r0, 2f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2ef8:	4620      	mov	r0, r4
    2efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2efe:	f000 b8b5 	b.w	306c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    2f02:	2805      	cmp	r0, #5
    2f04:	d108      	bne.n	2f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2f06:	4620      	mov	r0, r4
    2f08:	f006 fbde 	bl	96c8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    2f0c:	b920      	cbnz	r0, 2f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c8>
    2f0e:	6a28      	ldr	r0, [r5, #32]
    2f10:	f500 700a 	add.w	r0, r0, #552	; 0x228
    2f14:	f000 f8fa 	bl	310c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    2f18:	4620      	mov	r0, r4
    2f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2f1e:	f000 b8f5 	b.w	310c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    2f22:	0000      	.short	0x0000
    2f24:	20000860 	.word	0x20000860
    2f28:	b510      	push	{r4, lr}
    2f2a:	f7fe fb6d 	bl	1608 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    2f2e:	490b      	ldr	r1, [pc, #44]	; (2f5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    2f30:	2000      	movs	r0, #0
    2f32:	7088      	strb	r0, [r1, #2]
    2f34:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    2f38:	6208      	str	r0, [r1, #32]
    2f3a:	7008      	strb	r0, [r1, #0]
    2f3c:	f7fe fb0a 	bl	1554 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    2f40:	4604      	mov	r4, r0
    2f42:	7800      	ldrb	r0, [r0, #0]
    2f44:	f003 fab4 	bl	64b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    2f48:	b110      	cbz	r0, 2f50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>
    2f4a:	2020      	movs	r0, #32
    2f4c:	7020      	strb	r0, [r4, #0]
    2f4e:	bd10      	pop	{r4, pc}
    2f50:	f240 3192 	movw	r1, #914	; 0x392
    2f54:	2021      	movs	r0, #33	; 0x21
    2f56:	f7fd fa2f 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f5a:	0000      	.short	0x0000
    2f5c:	20000860 	.word	0x20000860
    2f60:	b510      	push	{r4, lr}
    2f62:	4604      	mov	r4, r0
    2f64:	f7ff fe16 	bl	2b94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f68:	4902      	ldr	r1, [pc, #8]	; (2f74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x724>)
    2f6a:	1a20      	subs	r0, r4, r0
    2f6c:	6849      	ldr	r1, [r1, #4]
    2f6e:	fbb0 f0f1 	udiv	r0, r0, r1
    2f72:	bd10      	pop	{r4, pc}
    2f74:	20000860 	.word	0x20000860
    2f78:	b570      	push	{r4, r5, r6, lr}
    2f7a:	4604      	mov	r4, r0
    2f7c:	460d      	mov	r5, r1
    2f7e:	f7ff fe09 	bl	2b94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f82:	4622      	mov	r2, r4
    2f84:	462b      	mov	r3, r5
    2f86:	f006 fbc0 	bl	970a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x4e>
    2f8a:	4905      	ldr	r1, [pc, #20]	; (2fa0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x750>)
    2f8c:	684c      	ldr	r4, [r1, #4]
    2f8e:	fbb0 f0f4 	udiv	r0, r0, r4
    2f92:	4344      	muls	r4, r0
    2f94:	f7ff fdfe 	bl	2b94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x344>
    2f98:	1900      	adds	r0, r0, r4
    2f9a:	f141 0100 	adc.w	r1, r1, #0
    2f9e:	bd70      	pop	{r4, r5, r6, pc}
    2fa0:	20000860 	.word	0x20000860
    2fa4:	4b0a      	ldr	r3, [pc, #40]	; (2fd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x780>)
    2fa6:	b510      	push	{r4, lr}
    2fa8:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    2fac:	1a20      	subs	r0, r4, r0
    2fae:	eb63 0301 	sbc.w	r3, r3, r1
    2fb2:	2400      	movs	r4, #0
    2fb4:	4621      	mov	r1, r4
    2fb6:	1a24      	subs	r4, r4, r0
    2fb8:	4199      	sbcs	r1, r3
    2fba:	da06      	bge.n	2fca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    2fbc:	2100      	movs	r1, #0
    2fbe:	1a14      	subs	r4, r2, r0
    2fc0:	eb71 0403 	sbcs.w	r4, r1, r3
    2fc4:	da00      	bge.n	2fc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x778>
    2fc6:	4610      	mov	r0, r2
    2fc8:	bd10      	pop	{r4, pc}
    2fca:	2000      	movs	r0, #0
    2fcc:	bd10      	pop	{r4, pc}
    2fce:	0000      	.short	0x0000
    2fd0:	20000860 	.word	0x20000860

00002fd4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    2fd4:	4902      	ldr	r1, [pc, #8]	; (2fe0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0xc>)
    2fd6:	2000      	movs	r0, #0
    2fd8:	6008      	str	r0, [r1, #0]
    2fda:	6048      	str	r0, [r1, #4]
    2fdc:	f000 b808 	b.w	2ff0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    2fe0:	200000ac 	.word	0x200000ac

00002fe4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    2fe4:	4901      	ldr	r1, [pc, #4]	; (2fec <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    2fe6:	7048      	strb	r0, [r1, #1]
    2fe8:	4770      	bx	lr
    2fea:	0000      	.short	0x0000
    2fec:	200000ac 	.word	0x200000ac
    2ff0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2ff4:	4e1c      	ldr	r6, [pc, #112]	; (3068 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x84>)
    2ff6:	2001      	movs	r0, #1
    2ff8:	7030      	strb	r0, [r6, #0]
    2ffa:	2400      	movs	r4, #0
    2ffc:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3000:	e016      	b.n	3030 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x4c>
    3002:	2100      	movs	r1, #0
    3004:	f7fd fc82 	bl	90c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    3008:	0005      	movs	r5, r0
    300a:	d014      	beq.n	3036 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x52>
    300c:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    3010:	f003 fa70 	bl	64f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    3014:	f885 4248 	strb.w	r4, [r5, #584]	; 0x248
    3018:	f895 0249 	ldrb.w	r0, [r5, #585]	; 0x249
    301c:	f003 fa48 	bl	64b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    3020:	b160      	cbz	r0, 303c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x58>
    3022:	2020      	movs	r0, #32
    3024:	f885 0249 	strb.w	r0, [r5, #585]	; 0x249
    3028:	f505 700a 	add.w	r0, r5, #552	; 0x228
    302c:	f000 f86e 	bl	310c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    3030:	9400      	str	r4, [sp, #0]
    3032:	9401      	str	r4, [sp, #4]
    3034:	e010      	b.n	3058 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3036:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
    303a:	e001      	b.n	3040 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x5c>
    303c:	f240 11bf 	movw	r1, #447	; 0x1bf
    3040:	2035      	movs	r0, #53	; 0x35
    3042:	f7fd f9b9 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3046:	9800      	ldr	r0, [sp, #0]
    3048:	b130      	cbz	r0, 3058 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    304a:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    304e:	b119      	cbz	r1, 3058 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x74>
    3050:	8800      	ldrh	r0, [r0, #0]
    3052:	42b8      	cmp	r0, r7
    3054:	d1d5      	bne.n	3002 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x1e>
    3056:	e004      	b.n	3062 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x7e>
    3058:	4668      	mov	r0, sp
    305a:	f7fd fc9d 	bl	998 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    305e:	2800      	cmp	r0, #0
    3060:	d0f1      	beq.n	3046 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x62>
    3062:	7034      	strb	r4, [r6, #0]
    3064:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3068:	200000ac 	.word	0x200000ac

0000306c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    306c:	b510      	push	{r4, lr}
    306e:	6981      	ldr	r1, [r0, #24]
    3070:	b119      	cbz	r1, 307a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    3072:	6882      	ldr	r2, [r0, #8]
    3074:	688b      	ldr	r3, [r1, #8]
    3076:	429a      	cmp	r2, r3
    3078:	d203      	bcs.n	3082 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    307a:	21c6      	movs	r1, #198	; 0xc6
    307c:	2037      	movs	r0, #55	; 0x37
    307e:	f7fd f99b 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3082:	6942      	ldr	r2, [r0, #20]
    3084:	614a      	str	r2, [r1, #20]
    3086:	6903      	ldr	r3, [r0, #16]
    3088:	610b      	str	r3, [r1, #16]
    308a:	b10a      	cbz	r2, 3090 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    308c:	6111      	str	r1, [r2, #16]
    308e:	e001      	b.n	3094 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    3090:	4a06      	ldr	r2, [pc, #24]	; (30ac <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    3092:	6011      	str	r1, [r2, #0]
    3094:	690a      	ldr	r2, [r1, #16]
    3096:	b132      	cbz	r2, 30a6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    3098:	6151      	str	r1, [r2, #20]
    309a:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    309e:	4410      	add	r0, r2
    30a0:	688a      	ldr	r2, [r1, #8]
    30a2:	1a80      	subs	r0, r0, r2
    30a4:	e000      	b.n	30a8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    30a6:	2000      	movs	r0, #0
    30a8:	60c8      	str	r0, [r1, #12]
    30aa:	bd10      	pop	{r4, pc}
    30ac:	200000b4 	.word	0x200000b4

000030b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    30b0:	b510      	push	{r4, lr}
    30b2:	2200      	movs	r2, #0
    30b4:	6141      	str	r1, [r0, #20]
    30b6:	b189      	cbz	r1, 30dc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    30b8:	690b      	ldr	r3, [r1, #16]
    30ba:	6108      	str	r0, [r1, #16]
    30bc:	6103      	str	r3, [r0, #16]
    30be:	b103      	cbz	r3, 30c2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    30c0:	6158      	str	r0, [r3, #20]
    30c2:	6941      	ldr	r1, [r0, #20]
    30c4:	60c2      	str	r2, [r0, #12]
    30c6:	2900      	cmp	r1, #0
    30c8:	d00f      	beq.n	30ea <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    30ca:	68cb      	ldr	r3, [r1, #12]
    30cc:	b163      	cbz	r3, 30e8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    30ce:	6884      	ldr	r4, [r0, #8]
    30d0:	42a3      	cmp	r3, r4
    30d2:	d207      	bcs.n	30e4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    30d4:	212b      	movs	r1, #43	; 0x2b
    30d6:	2037      	movs	r0, #55	; 0x37
    30d8:	f7fd f96e 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30dc:	4903      	ldr	r1, [pc, #12]	; (30ec <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    30de:	6102      	str	r2, [r0, #16]
    30e0:	6008      	str	r0, [r1, #0]
    30e2:	e7ee      	b.n	30c2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    30e4:	1b1b      	subs	r3, r3, r4
    30e6:	60c3      	str	r3, [r0, #12]
    30e8:	60ca      	str	r2, [r1, #12]
    30ea:	bd10      	pop	{r4, pc}
    30ec:	200000b4 	.word	0x200000b4

000030f0 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>:
    30f0:	6941      	ldr	r1, [r0, #20]
    30f2:	b929      	cbnz	r1, 3100 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    30f4:	6901      	ldr	r1, [r0, #16]
    30f6:	b919      	cbnz	r1, 3100 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x10>
    30f8:	4903      	ldr	r1, [pc, #12]	; (3108 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x18>)
    30fa:	6809      	ldr	r1, [r1, #0]
    30fc:	4281      	cmp	r1, r0
    30fe:	d101      	bne.n	3104 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI+0x14>
    3100:	2001      	movs	r0, #1
    3102:	4770      	bx	lr
    3104:	2000      	movs	r0, #0
    3106:	4770      	bx	lr
    3108:	200000b4 	.word	0x200000b4

0000310c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    310c:	6941      	ldr	r1, [r0, #20]
    310e:	b149      	cbz	r1, 3124 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    3110:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    3114:	441a      	add	r2, r3
    3116:	68cb      	ldr	r3, [r1, #12]
    3118:	441a      	add	r2, r3
    311a:	60ca      	str	r2, [r1, #12]
    311c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    3120:	6111      	str	r1, [r2, #16]
    3122:	e002      	b.n	312a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    3124:	4a07      	ldr	r2, [pc, #28]	; (3144 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x38>)
    3126:	6901      	ldr	r1, [r0, #16]
    3128:	6011      	str	r1, [r2, #0]
    312a:	6902      	ldr	r2, [r0, #16]
    312c:	2100      	movs	r1, #0
    312e:	b112      	cbz	r2, 3136 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x2a>
    3130:	6943      	ldr	r3, [r0, #20]
    3132:	6153      	str	r3, [r2, #20]
    3134:	e002      	b.n	313c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    3136:	6942      	ldr	r2, [r0, #20]
    3138:	b102      	cbz	r2, 313c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x30>
    313a:	60d1      	str	r1, [r2, #12]
    313c:	6101      	str	r1, [r0, #16]
    313e:	6141      	str	r1, [r0, #20]
    3140:	4770      	bx	lr
    3142:	0000      	.short	0x0000
    3144:	200000b4 	.word	0x200000b4

00003148 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    3148:	b510      	push	{r4, lr}
    314a:	4604      	mov	r4, r0
    314c:	490a      	ldr	r1, [pc, #40]	; (3178 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    314e:	2000      	movs	r0, #0
    3150:	4602      	mov	r2, r0
    3152:	6809      	ldr	r1, [r1, #0]
    3154:	1e43      	subs	r3, r0, #1
    3156:	e008      	b.n	316a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    3158:	68ca      	ldr	r2, [r1, #12]
    315a:	42a2      	cmp	r2, r4
    315c:	d303      	bcc.n	3166 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    315e:	429a      	cmp	r2, r3
    3160:	d201      	bcs.n	3166 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    3162:	4613      	mov	r3, r2
    3164:	4608      	mov	r0, r1
    3166:	460a      	mov	r2, r1
    3168:	6909      	ldr	r1, [r1, #16]
    316a:	2900      	cmp	r1, #0
    316c:	d1f4      	bne.n	3158 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    316e:	2800      	cmp	r0, #0
    3170:	d100      	bne.n	3174 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    3172:	4610      	mov	r0, r2
    3174:	bd10      	pop	{r4, pc}
    3176:	0000      	.short	0x0000
    3178:	200000b4 	.word	0x200000b4

0000317c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    317c:	4804      	ldr	r0, [pc, #16]	; (3190 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    317e:	6801      	ldr	r1, [r0, #0]
    3180:	2000      	movs	r0, #0
    3182:	e001      	b.n	3188 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    3184:	4608      	mov	r0, r1
    3186:	6909      	ldr	r1, [r1, #16]
    3188:	2900      	cmp	r1, #0
    318a:	d1fb      	bne.n	3184 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    318c:	4770      	bx	lr
    318e:	0000      	.short	0x0000
    3190:	200000b4 	.word	0x200000b4

00003194 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    3194:	4801      	ldr	r0, [pc, #4]	; (319c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    3196:	2100      	movs	r1, #0
    3198:	6001      	str	r1, [r0, #0]
    319a:	4770      	bx	lr
    319c:	200000b4 	.word	0x200000b4

000031a0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    31a0:	4903      	ldr	r1, [pc, #12]	; (31b0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    31a2:	2000      	movs	r0, #0
    31a4:	6809      	ldr	r1, [r1, #0]
    31a6:	2900      	cmp	r1, #0
    31a8:	d000      	beq.n	31ac <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    31aa:	200c      	movs	r0, #12
    31ac:	4770      	bx	lr
    31ae:	0000      	.short	0x0000
    31b0:	200000b4 	.word	0x200000b4

000031b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    31b4:	4903      	ldr	r1, [pc, #12]	; (31c4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    31b6:	884a      	ldrh	r2, [r1, #2]
    31b8:	8002      	strh	r2, [r0, #0]
    31ba:	7809      	ldrb	r1, [r1, #0]
    31bc:	7081      	strb	r1, [r0, #2]
    31be:	2000      	movs	r0, #0
    31c0:	4770      	bx	lr
    31c2:	0000      	.short	0x0000
    31c4:	20000fc4 	.word	0x20000fc4

000031c8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    31c8:	7801      	ldrb	r1, [r0, #0]
    31ca:	b171      	cbz	r1, 31ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31cc:	7841      	ldrb	r1, [r0, #1]
    31ce:	b161      	cbz	r1, 31ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31d0:	8841      	ldrh	r1, [r0, #2]
    31d2:	291b      	cmp	r1, #27
    31d4:	d309      	bcc.n	31ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31d6:	8881      	ldrh	r1, [r0, #4]
    31d8:	291b      	cmp	r1, #27
    31da:	d306      	bcc.n	31ea <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    31dc:	4904      	ldr	r1, [pc, #16]	; (31f0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    31de:	6802      	ldr	r2, [r0, #0]
    31e0:	600a      	str	r2, [r1, #0]
    31e2:	8880      	ldrh	r0, [r0, #4]
    31e4:	8088      	strh	r0, [r1, #4]
    31e6:	2000      	movs	r0, #0
    31e8:	4770      	bx	lr
    31ea:	2012      	movs	r0, #18
    31ec:	4770      	bx	lr
    31ee:	0000      	.short	0x0000
    31f0:	20000fc4 	.word	0x20000fc4

000031f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    31f4:	6800      	ldr	r0, [r0, #0]
    31f6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    31fa:	4288      	cmp	r0, r1
    31fc:	d303      	bcc.n	3206 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    31fe:	4903      	ldr	r1, [pc, #12]	; (320c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    3200:	6088      	str	r0, [r1, #8]
    3202:	2000      	movs	r0, #0
    3204:	4770      	bx	lr
    3206:	2012      	movs	r0, #18
    3208:	4770      	bx	lr
    320a:	0000      	.short	0x0000
    320c:	20000fc4 	.word	0x20000fc4

00003210 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    3210:	b510      	push	{r4, lr}
    3212:	b086      	sub	sp, #24
    3214:	4604      	mov	r4, r0
    3216:	f006 fc6d 	bl	9af4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xbc>
    321a:	2800      	cmp	r0, #0
    321c:	d103      	bne.n	3226 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    321e:	f006 fd0d 	bl	9c3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    3222:	b110      	cbz	r0, 322a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    3224:	200c      	movs	r0, #12
    3226:	b006      	add	sp, #24
    3228:	bd10      	pop	{r4, pc}
    322a:	2102      	movs	r1, #2
    322c:	f104 0010 	add.w	r0, r4, #16
    3230:	f000 f882 	bl	3338 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa0>
    3234:	78a0      	ldrb	r0, [r4, #2]
    3236:	f88d 0008 	strb.w	r0, [sp, #8]
    323a:	78a0      	ldrb	r0, [r4, #2]
    323c:	f88d 0000 	strb.w	r0, [sp]
    3240:	7860      	ldrb	r0, [r4, #1]
    3242:	f88d 0003 	strb.w	r0, [sp, #3]
    3246:	7820      	ldrb	r0, [r4, #0]
    3248:	f88d 0002 	strb.w	r0, [sp, #2]
    324c:	7e20      	ldrb	r0, [r4, #24]
    324e:	f88d 0004 	strb.w	r0, [sp, #4]
    3252:	78a0      	ldrb	r0, [r4, #2]
    3254:	07c0      	lsls	r0, r0, #31
    3256:	d00b      	beq.n	3270 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    3258:	78e0      	ldrb	r0, [r4, #3]
    325a:	2801      	cmp	r0, #1
    325c:	d011      	beq.n	3282 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    325e:	b190      	cbz	r0, 3286 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    3260:	f05f 0000 	movs.w	r0, #0
    3264:	f88d 0001 	strb.w	r0, [sp, #1]
    3268:	68a0      	ldr	r0, [r4, #8]
    326a:	9003      	str	r0, [sp, #12]
    326c:	6920      	ldr	r0, [r4, #16]
    326e:	9004      	str	r0, [sp, #16]
    3270:	a802      	add	r0, sp, #8
    3272:	f7ff faed 	bl	2850 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    3276:	2800      	cmp	r0, #0
    3278:	d1d5      	bne.n	3226 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    327a:	4668      	mov	r0, sp
    327c:	f7fe fa6e 	bl	175c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    3280:	e7d1      	b.n	3226 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    3282:	2002      	movs	r0, #2
    3284:	e7ee      	b.n	3264 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    3286:	2001      	movs	r0, #1
    3288:	e7ec      	b.n	3264 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000328c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    328c:	4801      	ldr	r0, [pc, #4]	; (3294 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    328e:	f990 0000 	ldrsb.w	r0, [r0]
    3292:	4770      	bx	lr
    3294:	200000b8 	.word	0x200000b8

00003298 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    3298:	4a03      	ldr	r2, [pc, #12]	; (32a8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    329a:	e9d2 1200 	ldrd	r1, r2, [r2]
    329e:	6001      	str	r1, [r0, #0]
    32a0:	6042      	str	r2, [r0, #4]
    32a2:	2000      	movs	r0, #0
    32a4:	4770      	bx	lr
    32a6:	0000      	.short	0x0000
    32a8:	0000338c 	.word	0x0000338c
    32ac:	b510      	push	{r4, lr}
    32ae:	480e      	ldr	r0, [pc, #56]	; (32e8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x50>)
    32b0:	2100      	movs	r1, #0
    32b2:	4b0e      	ldr	r3, [pc, #56]	; (32ec <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x54>)
    32b4:	74c1      	strb	r1, [r0, #19]
    32b6:	8281      	strh	r1, [r0, #20]
    32b8:	221b      	movs	r2, #27
    32ba:	801a      	strh	r2, [r3, #0]
    32bc:	f44f 74a4 	mov.w	r4, #328	; 0x148
    32c0:	805c      	strh	r4, [r3, #2]
    32c2:	809a      	strh	r2, [r3, #4]
    32c4:	80dc      	strh	r4, [r3, #6]
    32c6:	7381      	strb	r1, [r0, #14]
    32c8:	73c1      	strb	r1, [r0, #15]
    32ca:	2303      	movs	r3, #3
    32cc:	7003      	strb	r3, [r0, #0]
    32ce:	2302      	movs	r3, #2
    32d0:	7043      	strb	r3, [r0, #1]
    32d2:	8042      	strh	r2, [r0, #2]
    32d4:	8082      	strh	r2, [r0, #4]
    32d6:	f640 62a6 	movw	r2, #3750	; 0xea6
    32da:	6082      	str	r2, [r0, #8]
    32dc:	7481      	strb	r1, [r0, #18]
    32de:	7301      	strb	r1, [r0, #12]
    32e0:	4802      	ldr	r0, [pc, #8]	; (32ec <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x54>)
    32e2:	1f80      	subs	r0, r0, #6
    32e4:	7001      	strb	r1, [r0, #0]
    32e6:	bd10      	pop	{r4, pc}
    32e8:	20000fc4 	.word	0x20000fc4
    32ec:	200000c6 	.word	0x200000c6
    32f0:	4904      	ldr	r1, [pc, #16]	; (3304 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x6c>)
    32f2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    32f6:	4288      	cmp	r0, r1
    32f8:	d301      	bcc.n	32fe <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x66>
    32fa:	2000      	movs	r0, #0
    32fc:	4770      	bx	lr
    32fe:	2001      	movs	r0, #1
    3300:	4770      	bx	lr
    3302:	0000      	.short	0x0000
    3304:	0270f3cc 	.word	0x0270f3cc
    3308:	4904      	ldr	r1, [pc, #16]	; (331c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x84>)
    330a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    330e:	4288      	cmp	r0, r1
    3310:	d301      	bcc.n	3316 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x7e>
    3312:	2000      	movs	r0, #0
    3314:	4770      	bx	lr
    3316:	2001      	movs	r0, #1
    3318:	4770      	bx	lr
    331a:	0000      	.short	0x0000
    331c:	009c363d 	.word	0x009c363d
    3320:	4904      	ldr	r1, [pc, #16]	; (3334 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x9c>)
    3322:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    3326:	4288      	cmp	r0, r1
    3328:	d301      	bcc.n	332e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x96>
    332a:	2000      	movs	r0, #0
    332c:	4770      	bx	lr
    332e:	2001      	movs	r0, #1
    3330:	4770      	bx	lr
    3332:	0000      	.short	0x0000
    3334:	009c363d 	.word	0x009c363d
    3338:	b530      	push	{r4, r5, lr}
    333a:	2200      	movs	r2, #0
    333c:	4d07      	ldr	r5, [pc, #28]	; (335c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc4>)
    333e:	e009      	b.n	3354 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xbc>
    3340:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    3344:	462b      	mov	r3, r5
    3346:	429c      	cmp	r4, r3
    3348:	d800      	bhi.n	334c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xb4>
    334a:	4623      	mov	r3, r4
    334c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    3350:	1c52      	adds	r2, r2, #1
    3352:	b2d2      	uxtb	r2, r2
    3354:	428a      	cmp	r2, r1
    3356:	d3f3      	bcc.n	3340 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xa8>
    3358:	bd30      	pop	{r4, r5, pc}
    335a:	0000      	.short	0x0000
    335c:	00f42400 	.word	0x00f42400
    3360:	4a09      	ldr	r2, [pc, #36]	; (3388 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xf0>)
    3362:	4290      	cmp	r0, r2
    3364:	d80b      	bhi.n	337e <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xe6>
    3366:	2901      	cmp	r1, #1
    3368:	d002      	beq.n	3370 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xd8>
    336a:	2904      	cmp	r1, #4
    336c:	d003      	beq.n	3376 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xde>
    336e:	e008      	b.n	3382 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xea>
    3370:	f240 7153 	movw	r1, #1875	; 0x753
    3374:	e001      	b.n	337a <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xe2>
    3376:	f640 11c4 	movw	r1, #2500	; 0x9c4
    337a:	4288      	cmp	r0, r1
    337c:	d201      	bcs.n	3382 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xea>
    337e:	2000      	movs	r0, #0
    3380:	4770      	bx	lr
    3382:	2001      	movs	r0, #1
    3384:	4770      	bx	lr
    3386:	0000      	.short	0x0000
    3388:	0270fd8f 	.word	0x0270fd8f
    338c:	0d10770d 	.word	0x0d10770d
    3390:	10770059 	.word	0x10770059
	...

0000339c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    339c:	b570      	push	{r4, r5, r6, lr}
    339e:	460d      	mov	r5, r1
    33a0:	f7fd ffa0 	bl	12e4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    33a4:	4c05      	ldr	r4, [pc, #20]	; (33bc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    33a6:	6065      	str	r5, [r4, #4]
    33a8:	68a0      	ldr	r0, [r4, #8]
    33aa:	f006 fc72 	bl	9c92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33ae:	f006 fb20 	bl	99f2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    33b2:	f7fe f815 	bl	13e0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    33b6:	2001      	movs	r0, #1
    33b8:	7020      	strb	r0, [r4, #0]
    33ba:	bd70      	pop	{r4, r5, r6, pc}
    33bc:	200000d0 	.word	0x200000d0

000033c0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    33c0:	4801      	ldr	r0, [pc, #4]	; (33c8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    33c2:	7800      	ldrb	r0, [r0, #0]
    33c4:	4770      	bx	lr
    33c6:	0000      	.short	0x0000
    33c8:	200000d0 	.word	0x200000d0

000033cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    33cc:	b510      	push	{r4, lr}
    33ce:	4c06      	ldr	r4, [pc, #24]	; (33e8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    33d0:	68e0      	ldr	r0, [r4, #12]
    33d2:	f006 fc5e 	bl	9c92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33d6:	6920      	ldr	r0, [r4, #16]
    33d8:	f006 fc5b 	bl	9c92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x25a>
    33dc:	f006 fb2c 	bl	9a38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    33e0:	2000      	movs	r0, #0
    33e2:	7020      	strb	r0, [r4, #0]
    33e4:	bd10      	pop	{r4, pc}
    33e6:	0000      	.short	0x0000
    33e8:	200000d0 	.word	0x200000d0

000033ec <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    33ec:	b510      	push	{r4, lr}
    33ee:	4905      	ldr	r1, [pc, #20]	; (3404 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    33f0:	4805      	ldr	r0, [pc, #20]	; (3408 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    33f2:	f006 fc41 	bl	9c78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    33f6:	4804      	ldr	r0, [pc, #16]	; (3408 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    33f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33fc:	4903      	ldr	r1, [pc, #12]	; (340c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    33fe:	1d00      	adds	r0, r0, #4
    3400:	f006 bc3a 	b.w	9c78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x240>
    3404:	200000e4 	.word	0x200000e4
    3408:	200000d8 	.word	0x200000d8
    340c:	200000ec 	.word	0x200000ec
    3410:	b510      	push	{r4, lr}
    3412:	f7ff febf 	bl	3194 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    3416:	f7ff f9f3 	bl	2800 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    341a:	f7ff fddb 	bl	2fd4 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    341e:	f7ff ff35 	bl	328c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    3422:	4601      	mov	r1, r0
    3424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3428:	4801      	ldr	r0, [pc, #4]	; (3430 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x44>)
    342a:	f7fe b907 	b.w	163c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    342e:	0000      	.short	0x0000
    3430:	2000127f 	.word	0x2000127f

00003434 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    3434:	4806      	ldr	r0, [pc, #24]	; (3450 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    3436:	8801      	ldrh	r1, [r0, #0]
    3438:	7900      	ldrb	r0, [r0, #4]
    343a:	0602      	lsls	r2, r0, #24
    343c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    3440:	f000 0001 	and.w	r0, r0, #1
    3444:	1800      	adds	r0, r0, r0
    3446:	b2c0      	uxtb	r0, r0
    3448:	f040 0001 	orr.w	r0, r0, #1
    344c:	4770      	bx	lr
    344e:	0000      	.short	0x0000
    3450:	20000020 	.word	0x20000020

00003454 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    3454:	b510      	push	{r4, lr}
    3456:	f004 fb75 	bl	7b44 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    345a:	2200      	movs	r2, #0
    345c:	4b08      	ldr	r3, [pc, #32]	; (3480 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    345e:	4611      	mov	r1, r2
    3460:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3464:	4284      	cmp	r4, r0
    3466:	d303      	bcc.n	3470 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    3468:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    346c:	7882      	ldrb	r2, [r0, #2]
    346e:	e003      	b.n	3478 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    3470:	1c49      	adds	r1, r1, #1
    3472:	b2c9      	uxtb	r1, r1
    3474:	290c      	cmp	r1, #12
    3476:	d3f3      	bcc.n	3460 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    3478:	4802      	ldr	r0, [pc, #8]	; (3484 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    347a:	7002      	strb	r2, [r0, #0]
    347c:	bd10      	pop	{r4, pc}
    347e:	0000      	.short	0x0000
    3480:	00009ce0 	.word	0x00009ce0
    3484:	20000187 	.word	0x20000187

00003488 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    3488:	4802      	ldr	r0, [pc, #8]	; (3494 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    348a:	7800      	ldrb	r0, [r0, #0]
    348c:	f000 0007 	and.w	r0, r0, #7
    3490:	4770      	bx	lr
    3492:	0000      	.short	0x0000
    3494:	20000187 	.word	0x20000187

00003498 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    3498:	b570      	push	{r4, r5, r6, lr}
    349a:	4605      	mov	r5, r0
    349c:	4616      	mov	r6, r2
    349e:	460c      	mov	r4, r1
    34a0:	2002      	movs	r0, #2
    34a2:	f000 f8bd 	bl	3620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    34a6:	4906      	ldr	r1, [pc, #24]	; (34c0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    34a8:	2001      	movs	r0, #1
    34aa:	1ef6      	subs	r6, r6, #3
    34ac:	7008      	strb	r0, [r1, #0]
    34ae:	4805      	ldr	r0, [pc, #20]	; (34c4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    34b0:	6006      	str	r6, [r0, #0]
    34b2:	4804      	ldr	r0, [pc, #16]	; (34c4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    34b4:	3808      	subs	r0, #8
    34b6:	6005      	str	r5, [r0, #0]
    34b8:	1f00      	subs	r0, r0, #4
    34ba:	6004      	str	r4, [r0, #0]
    34bc:	bd70      	pop	{r4, r5, r6, pc}
    34be:	0000      	.short	0x0000
    34c0:	20000188 	.word	0x20000188
    34c4:	4000f510 	.word	0x4000f510

000034c8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    34c8:	b510      	push	{r4, lr}
    34ca:	4c0c      	ldr	r4, [pc, #48]	; (34fc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    34cc:	7820      	ldrb	r0, [r4, #0]
    34ce:	b180      	cbz	r0, 34f2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    34d0:	490b      	ldr	r1, [pc, #44]	; (3500 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    34d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    34d6:	6008      	str	r0, [r1, #0]
    34d8:	f000 f86a 	bl	35b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    34dc:	2100      	movs	r1, #0
    34de:	b120      	cbz	r0, 34ea <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    34e0:	2001      	movs	r0, #1
    34e2:	7060      	strb	r0, [r4, #1]
    34e4:	4807      	ldr	r0, [pc, #28]	; (3504 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    34e6:	6800      	ldr	r0, [r0, #0]
    34e8:	e001      	b.n	34ee <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    34ea:	7061      	strb	r1, [r4, #1]
    34ec:	2010      	movs	r0, #16
    34ee:	70a0      	strb	r0, [r4, #2]
    34f0:	7021      	strb	r1, [r4, #0]
    34f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34f6:	2000      	movs	r0, #0
    34f8:	f000 b892 	b.w	3620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    34fc:	20000188 	.word	0x20000188
    3500:	4001f508 	.word	0x4001f508
    3504:	4000f400 	.word	0x4000f400

00003508 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    3508:	b510      	push	{r4, lr}
    350a:	2002      	movs	r0, #2
    350c:	f000 f888 	bl	3620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    3510:	4904      	ldr	r1, [pc, #16]	; (3524 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    3512:	2001      	movs	r0, #1
    3514:	7008      	strb	r0, [r1, #0]
    3516:	f000 f859 	bl	35cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    351a:	4903      	ldr	r1, [pc, #12]	; (3528 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    351c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3520:	6008      	str	r0, [r1, #0]
    3522:	bd10      	pop	{r4, pc}
    3524:	20000188 	.word	0x20000188
    3528:	4001f504 	.word	0x4001f504

0000352c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    352c:	4803      	ldr	r0, [pc, #12]	; (353c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    352e:	2100      	movs	r1, #0
    3530:	7001      	strb	r1, [r0, #0]
    3532:	7041      	strb	r1, [r0, #1]
    3534:	2110      	movs	r1, #16
    3536:	7081      	strb	r1, [r0, #2]
    3538:	4770      	bx	lr
    353a:	0000      	.short	0x0000
    353c:	20000188 	.word	0x20000188

00003540 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    3540:	4807      	ldr	r0, [pc, #28]	; (3560 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    3542:	b510      	push	{r4, lr}
    3544:	7801      	ldrb	r1, [r0, #0]
    3546:	b141      	cbz	r1, 355a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    3548:	f000 f832 	bl	35b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    354c:	b118      	cbz	r0, 3556 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    354e:	4805      	ldr	r0, [pc, #20]	; (3564 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    3550:	6800      	ldr	r0, [r0, #0]
    3552:	b2c0      	uxtb	r0, r0
    3554:	bd10      	pop	{r4, pc}
    3556:	2010      	movs	r0, #16
    3558:	bd10      	pop	{r4, pc}
    355a:	7880      	ldrb	r0, [r0, #2]
    355c:	bd10      	pop	{r4, pc}
    355e:	0000      	.short	0x0000
    3560:	20000188 	.word	0x20000188
    3564:	4000f400 	.word	0x4000f400

00003568 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    3568:	4808      	ldr	r0, [pc, #32]	; (358c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    356a:	b510      	push	{r4, lr}
    356c:	7801      	ldrb	r1, [r0, #0]
    356e:	b159      	cbz	r1, 3588 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    3570:	4807      	ldr	r0, [pc, #28]	; (3590 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    3572:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3576:	b128      	cbz	r0, 3584 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    3578:	f000 f80c 	bl	3594 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    357c:	2800      	cmp	r0, #0
    357e:	d000      	beq.n	3582 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    3580:	2001      	movs	r0, #1
    3582:	bd10      	pop	{r4, pc}
    3584:	2002      	movs	r0, #2
    3586:	bd10      	pop	{r4, pc}
    3588:	7840      	ldrb	r0, [r0, #1]
    358a:	bd10      	pop	{r4, pc}
    358c:	20000188 	.word	0x20000188
    3590:	4000f000 	.word	0x4000f000
    3594:	4805      	ldr	r0, [pc, #20]	; (35ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    3596:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    359a:	b111      	cbz	r1, 35a2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    359c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    35a0:	b108      	cbz	r0, 35a6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    35a2:	2000      	movs	r0, #0
    35a4:	4770      	bx	lr
    35a6:	2001      	movs	r0, #1
    35a8:	4770      	bx	lr
    35aa:	0000      	.short	0x0000
    35ac:	4000f000 	.word	0x4000f000
    35b0:	4805      	ldr	r0, [pc, #20]	; (35c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    35b2:	b510      	push	{r4, lr}
    35b4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    35b8:	b120      	cbz	r0, 35c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    35ba:	f7ff ffeb 	bl	3594 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    35be:	b108      	cbz	r0, 35c4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    35c0:	2001      	movs	r0, #1
    35c2:	bd10      	pop	{r4, pc}
    35c4:	2000      	movs	r0, #0
    35c6:	bd10      	pop	{r4, pc}
    35c8:	4000f000 	.word	0x4000f000
    35cc:	4804      	ldr	r0, [pc, #16]	; (35e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    35ce:	2100      	movs	r1, #0
    35d0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    35d4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    35d8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    35dc:	4770      	bx	lr
    35de:	0000      	.short	0x0000
    35e0:	4000f000 	.word	0x4000f000

000035e4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    35e4:	b570      	push	{r4, r5, r6, lr}
    35e6:	4d05      	ldr	r5, [pc, #20]	; (35fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    35e8:	2400      	movs	r4, #0
    35ea:	7828      	ldrb	r0, [r5, #0]
    35ec:	b110      	cbz	r0, 35f4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    35ee:	f000 f80f 	bl	3610 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>
    35f2:	702c      	strb	r4, [r5, #0]
    35f4:	706c      	strb	r4, [r5, #1]
    35f6:	70ac      	strb	r4, [r5, #2]
    35f8:	bd70      	pop	{r4, r5, r6, pc}
    35fa:	0000      	.short	0x0000
    35fc:	2000018b 	.word	0x2000018b

00003600 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    3600:	4802      	ldr	r0, [pc, #8]	; (360c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    3602:	2100      	movs	r1, #0
    3604:	7001      	strb	r1, [r0, #0]
    3606:	7041      	strb	r1, [r0, #1]
    3608:	7081      	strb	r1, [r0, #2]
    360a:	4770      	bx	lr
    360c:	2000018b 	.word	0x2000018b
    3610:	4902      	ldr	r1, [pc, #8]	; (361c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x1c>)
    3612:	4801      	ldr	r0, [pc, #4]	; (3618 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x18>)
    3614:	6008      	str	r0, [r1, #0]
    3616:	4770      	bx	lr
    3618:	02020000 	.word	0x02020000
    361c:	4001f508 	.word	0x4001f508

00003620 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    3620:	b510      	push	{r4, lr}
    3622:	4604      	mov	r4, r0
    3624:	f000 f820 	bl	3668 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    3628:	2c00      	cmp	r4, #0
    362a:	d00e      	beq.n	364a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    362c:	4a0b      	ldr	r2, [pc, #44]	; (365c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    362e:	480b      	ldr	r0, [pc, #44]	; (365c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    3630:	490b      	ldr	r1, [pc, #44]	; (3660 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    3632:	3214      	adds	r2, #20
    3634:	2c01      	cmp	r4, #1
    3636:	d005      	beq.n	3644 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    3638:	2c02      	cmp	r4, #2
    363a:	d007      	beq.n	364c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    363c:	2182      	movs	r1, #130	; 0x82
    363e:	203d      	movs	r0, #61	; 0x3d
    3640:	f7fc feba 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3644:	2302      	movs	r3, #2
    3646:	6003      	str	r3, [r0, #0]
    3648:	6011      	str	r1, [r2, #0]
    364a:	bd10      	pop	{r4, pc}
    364c:	2303      	movs	r3, #3
    364e:	6003      	str	r3, [r0, #0]
    3650:	6011      	str	r1, [r2, #0]
    3652:	4904      	ldr	r1, [pc, #16]	; (3664 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    3654:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3658:	6008      	str	r0, [r1, #0]
    365a:	bd10      	pop	{r4, pc}
    365c:	4000f500 	.word	0x4000f500
    3660:	20001483 	.word	0x20001483
    3664:	4001f504 	.word	0x4001f504
    3668:	4805      	ldr	r0, [pc, #20]	; (3680 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    366a:	b510      	push	{r4, lr}
    366c:	2100      	movs	r1, #0
    366e:	6001      	str	r1, [r0, #0]
    3670:	6001      	str	r1, [r0, #0]
    3672:	f7ff ffb7 	bl	35e4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    3676:	4903      	ldr	r1, [pc, #12]	; (3684 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    3678:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    367c:	6008      	str	r0, [r1, #0]
    367e:	bd10      	pop	{r4, pc}
    3680:	4000f500 	.word	0x4000f500
    3684:	4001f508 	.word	0x4001f508

00003688 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    3688:	4805      	ldr	r0, [pc, #20]	; (36a0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    368a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    368e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    3692:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3696:	2100      	movs	r1, #0
    3698:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    369c:	4770      	bx	lr
    369e:	0000      	.short	0x0000
    36a0:	40001000 	.word	0x40001000

000036a4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    36a4:	4904      	ldr	r1, [pc, #16]	; (36b8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    36a6:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    36aa:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    36ae:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    36b2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    36b6:	4770      	bx	lr
    36b8:	40001000 	.word	0x40001000

000036bc <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    36bc:	4902      	ldr	r1, [pc, #8]	; (36c8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    36be:	5c08      	ldrb	r0, [r1, r0]
    36c0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    36c4:	4770      	bx	lr
    36c6:	0000      	.short	0x0000
    36c8:	000042b2 	.word	0x000042b2

000036cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    36cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ce:	4c24      	ldr	r4, [pc, #144]	; (3760 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    36d0:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36d4:	f010 0f10 	tst.w	r0, #16
    36d8:	d001      	beq.n	36de <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    36da:	2701      	movs	r7, #1
    36dc:	e000      	b.n	36e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    36de:	2700      	movs	r7, #0
    36e0:	2010      	movs	r0, #16
    36e2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    36e6:	2002      	movs	r0, #2
    36e8:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    36ec:	481d      	ldr	r0, [pc, #116]	; (3764 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    36ee:	2500      	movs	r5, #0
    36f0:	491d      	ldr	r1, [pc, #116]	; (3768 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    36f2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    36f6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    36fa:	6008      	str	r0, [r1, #0]
    36fc:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    3700:	f44f 7688 	mov.w	r6, #272	; 0x110
    3704:	f010 0fff 	tst.w	r0, #255	; 0xff
    3708:	d019      	beq.n	373e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    370a:	20ff      	movs	r0, #255	; 0xff
    370c:	f88d 0000 	strb.w	r0, [sp]
    3710:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3714:	2001      	movs	r0, #1
    3716:	6120      	str	r0, [r4, #16]
    3718:	e005      	b.n	3726 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    371a:	bf00      	nop
    371c:	f89d 0000 	ldrb.w	r0, [sp]
    3720:	1e40      	subs	r0, r0, #1
    3722:	f88d 0000 	strb.w	r0, [sp]
    3726:	f89d 0000 	ldrb.w	r0, [sp]
    372a:	b128      	cbz	r0, 3738 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    372c:	4631      	mov	r1, r6
    372e:	4620      	mov	r0, r4
    3730:	f006 fb35 	bl	9d9e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    3734:	2800      	cmp	r0, #0
    3736:	d0f1      	beq.n	371c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    3738:	f89d 0000 	ldrb.w	r0, [sp]
    373c:	b158      	cbz	r0, 3756 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    373e:	f000 fbcd 	bl	3edc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    3742:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    3746:	f000 fd35 	bl	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
    374a:	2f00      	cmp	r7, #0
    374c:	d002      	beq.n	3754 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    374e:	2010      	movs	r0, #16
    3750:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3756:	f640 0194 	movw	r1, #2196	; 0x894
    375a:	203e      	movs	r0, #62	; 0x3e
    375c:	f7fc fe2c 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3760:	40001000 	.word	0x40001000
    3764:	20001014 	.word	0x20001014
    3768:	4001f508 	.word	0x4001f508

0000376c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3770:	4d18      	ldr	r5, [pc, #96]	; (37d4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    3772:	4607      	mov	r7, r0
    3774:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    3778:	07c2      	lsls	r2, r0, #31
    377a:	d00f      	beq.n	379c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    377c:	4c16      	ldr	r4, [pc, #88]	; (37d8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    377e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    3782:	f042 0201 	orr.w	r2, r2, #1
    3786:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    378a:	f040 0002 	orr.w	r0, r0, #2
    378e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    3792:	2601      	movs	r6, #1
    3794:	b13f      	cbz	r7, 37a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    3796:	2f01      	cmp	r7, #1
    3798:	d00b      	beq.n	37b2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    379a:	e010      	b.n	37be <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    379c:	f240 716f 	movw	r1, #1903	; 0x76f
    37a0:	203e      	movs	r0, #62	; 0x3e
    37a2:	f7fc fe09 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    37a6:	4608      	mov	r0, r1
    37a8:	f000 fd5e 	bl	4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>
    37ac:	726e      	strb	r6, [r5, #9]
    37ae:	6026      	str	r6, [r4, #0]
    37b0:	e005      	b.n	37be <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    37b2:	4608      	mov	r0, r1
    37b4:	f000 fd3e 	bl	4234 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x234>
    37b8:	2002      	movs	r0, #2
    37ba:	7268      	strb	r0, [r5, #9]
    37bc:	6066      	str	r6, [r4, #4]
    37be:	4807      	ldr	r0, [pc, #28]	; (37dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    37c0:	64c6      	str	r6, [r0, #76]	; 0x4c
    37c2:	4806      	ldr	r0, [pc, #24]	; (37dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    37c4:	300c      	adds	r0, #12
    37c6:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    37ca:	4638      	mov	r0, r7
    37cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37d0:	f000 bcc2 	b.w	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    37d4:	20001014 	.word	0x20001014
    37d8:	40001000 	.word	0x40001000
    37dc:	40008000 	.word	0x40008000

000037e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    37e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    37e4:	4c2c      	ldr	r4, [pc, #176]	; (3898 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    37e6:	0006      	movs	r6, r0
    37e8:	4d2c      	ldr	r5, [pc, #176]	; (389c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    37ea:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    37ee:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 38a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    37f2:	f040 0002 	orr.w	r0, r0, #2
    37f6:	4689      	mov	r9, r1
    37f8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    37fc:	f04f 0700 	mov.w	r7, #0
    3800:	d002      	beq.n	3808 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    3802:	2e01      	cmp	r6, #1
    3804:	d020      	beq.n	3848 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    3806:	e036      	b.n	3876 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    3808:	4608      	mov	r0, r1
    380a:	f000 fd2d 	bl	4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>
    380e:	2001      	movs	r0, #1
    3810:	7260      	strb	r0, [r4, #9]
    3812:	79e0      	ldrb	r0, [r4, #7]
    3814:	2801      	cmp	r0, #1
    3816:	d105      	bne.n	3824 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    3818:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    381c:	f040 0008 	orr.w	r0, r0, #8
    3820:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3824:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3826:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    382a:	6260      	str	r0, [r4, #36]	; 0x24
    382c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3830:	f8c8 0000 	str.w	r0, [r8]
    3834:	491b      	ldr	r1, [pc, #108]	; (38a4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    3836:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    383a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    383e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    3842:	fbb0 f7f1 	udiv	r7, r0, r1
    3846:	e016      	b.n	3876 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    3848:	4608      	mov	r0, r1
    384a:	f000 fcf3 	bl	4234 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x234>
    384e:	2002      	movs	r0, #2
    3850:	7260      	strb	r0, [r4, #9]
    3852:	79e0      	ldrb	r0, [r4, #7]
    3854:	2801      	cmp	r0, #1
    3856:	d105      	bne.n	3864 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    3858:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    385c:	f040 0004 	orr.w	r0, r0, #4
    3860:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3864:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3866:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    386a:	6260      	str	r0, [r4, #36]	; 0x24
    386c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3870:	f8c8 0000 	str.w	r0, [r8]
    3874:	2729      	movs	r7, #41	; 0x29
    3876:	f000 fb9d 	bl	3fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    387a:	f006 fad8 	bl	9e2e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    387e:	b120      	cbz	r0, 388a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    3880:	f7ff ff24 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3884:	2000      	movs	r0, #0
    3886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    388a:	2100      	movs	r1, #0
    388c:	4630      	mov	r0, r6
    388e:	f000 fc63 	bl	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    3892:	4638      	mov	r0, r7
    3894:	e7f7      	b.n	3886 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    3896:	0000      	.short	0x0000
    3898:	20001014 	.word	0x20001014
    389c:	40001000 	.word	0x40001000
    38a0:	4001f504 	.word	0x4001f504
    38a4:	000042ac 	.word	0x000042ac

000038a8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    38a8:	b510      	push	{r4, lr}
    38aa:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    38ac:	4901      	ldr	r1, [pc, #4]	; (38b4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    38ae:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    38b2:	bd10      	pop	{r4, pc}
    38b4:	20001004 	.word	0x20001004

000038b8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    38b8:	b570      	push	{r4, r5, r6, lr}
    38ba:	4c0f      	ldr	r4, [pc, #60]	; (38f8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    38bc:	4603      	mov	r3, r0
    38be:	2002      	movs	r0, #2
    38c0:	7320      	strb	r0, [r4, #12]
    38c2:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    38c6:	2096      	movs	r0, #150	; 0x96
    38c8:	f894 1020 	ldrb.w	r1, [r4, #32]
    38cc:	7d22      	ldrb	r2, [r4, #20]
    38ce:	2d01      	cmp	r5, #1
    38d0:	d00e      	beq.n	38f0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    38d2:	f000 fd27 	bl	4324 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    38d6:	6120      	str	r0, [r4, #16]
    38d8:	4808      	ldr	r0, [pc, #32]	; (38fc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    38da:	2100      	movs	r1, #0
    38dc:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    38e0:	6921      	ldr	r1, [r4, #16]
    38e2:	69e0      	ldr	r0, [r4, #28]
    38e4:	4408      	add	r0, r1
    38e6:	4905      	ldr	r1, [pc, #20]	; (38fc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    38e8:	1d09      	adds	r1, r1, #4
    38ea:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    38ee:	bd70      	pop	{r4, r5, r6, pc}
    38f0:	f000 fd36 	bl	4360 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    38f4:	e7ef      	b.n	38d6 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    38f6:	0000      	.short	0x0000
    38f8:	20001014 	.word	0x20001014
    38fc:	40008000 	.word	0x40008000

00003900 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    3900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3904:	2234      	movs	r2, #52	; 0x34
    3906:	2100      	movs	r1, #0
    3908:	4813      	ldr	r0, [pc, #76]	; (3958 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    390a:	f006 fca5 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    390e:	f000 fc51 	bl	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
    3912:	f006 fb62 	bl	9fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3916:	4d11      	ldr	r5, [pc, #68]	; (395c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    3918:	4e10      	ldr	r6, [pc, #64]	; (395c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    391a:	2400      	movs	r4, #0
    391c:	4f0f      	ldr	r7, [pc, #60]	; (395c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    391e:	3508      	adds	r5, #8
    3920:	3610      	adds	r6, #16
    3922:	b928      	cbnz	r0, 3930 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    3924:	f006 fb70 	bl	a008 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3928:	b910      	cbnz	r0, 3930 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    392a:	f006 fb77 	bl	a01c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    392e:	b108      	cbz	r0, 3934 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    3930:	2224      	movs	r2, #36	; 0x24
    3932:	e006      	b.n	3942 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    3934:	f006 fbb2 	bl	a09c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    3938:	b910      	cbnz	r0, 3940 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    393a:	f006 fba5 	bl	a088 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    393e:	b140      	cbz	r0, 3952 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    3940:	2240      	movs	r2, #64	; 0x40
    3942:	21ff      	movs	r1, #255	; 0xff
    3944:	4638      	mov	r0, r7
    3946:	f006 fc87 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    394a:	602c      	str	r4, [r5, #0]
    394c:	6034      	str	r4, [r6, #0]
    394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3952:	2238      	movs	r2, #56	; 0x38
    3954:	e7f5      	b.n	3942 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    3956:	0000      	.short	0x0000
    3958:	20001014 	.word	0x20001014
    395c:	40000e00 	.word	0x40000e00

00003960 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    3960:	b510      	push	{r4, lr}
    3962:	f000 fbdb 	bl	411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>
    3966:	f7ff feb1 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    396a:	f004 fb67 	bl	803c <mpsl_fem_disable>
    396e:	b130      	cbz	r0, 397e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    3970:	1c40      	adds	r0, r0, #1
    3972:	d004      	beq.n	397e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    3974:	f240 5165 	movw	r1, #1381	; 0x565
    3978:	203e      	movs	r0, #62	; 0x3e
    397a:	f7fc fd1d 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    397e:	480f      	ldr	r0, [pc, #60]	; (39bc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    3980:	4a0f      	ldr	r2, [pc, #60]	; (39c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    3982:	6a41      	ldr	r1, [r0, #36]	; 0x24
    3984:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    3988:	6011      	str	r1, [r2, #0]
    398a:	2400      	movs	r4, #0
    398c:	6244      	str	r4, [r0, #36]	; 0x24
    398e:	7304      	strb	r4, [r0, #12]
    3990:	61c4      	str	r4, [r0, #28]
    3992:	6184      	str	r4, [r0, #24]
    3994:	f000 fbc2 	bl	411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>
    3998:	480a      	ldr	r0, [pc, #40]	; (39c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    399a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    399e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    39a2:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    39a6:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    39aa:	2001      	movs	r0, #1
    39ac:	f006 f9e6 	bl	9d7c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    39b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    39b4:	2001      	movs	r0, #1
    39b6:	f006 b9d4 	b.w	9d62 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    39ba:	0000      	.short	0x0000
    39bc:	20001014 	.word	0x20001014
    39c0:	4001f508 	.word	0x4001f508
    39c4:	40008000 	.word	0x40008000

000039c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    39c8:	b570      	push	{r4, r5, r6, lr}
    39ca:	2001      	movs	r0, #1
    39cc:	f006 f9d6 	bl	9d7c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    39d0:	4c37      	ldr	r4, [pc, #220]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    39d2:	2000      	movs	r0, #0
    39d4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    39d8:	2001      	movs	r0, #1
    39da:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    39de:	f006 fb33 	bl	a048 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    39e2:	4d34      	ldr	r5, [pc, #208]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    39e4:	b118      	cbz	r0, 39ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    39e6:	6828      	ldr	r0, [r5, #0]
    39e8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    39ec:	6028      	str	r0, [r5, #0]
    39ee:	f006 fb1f 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    39f2:	b128      	cbz	r0, 3a00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    39f4:	6828      	ldr	r0, [r5, #0]
    39f6:	4930      	ldr	r1, [pc, #192]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    39f8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    39fc:	4308      	orrs	r0, r1
    39fe:	6028      	str	r0, [r5, #0]
    3a00:	f006 fb32 	bl	a068 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3a04:	b138      	cbz	r0, 3a16 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    3a06:	482b      	ldr	r0, [pc, #172]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a08:	1d00      	adds	r0, r0, #4
    3a0a:	6801      	ldr	r1, [r0, #0]
    3a0c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    3a10:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    3a14:	6001      	str	r1, [r0, #0]
    3a16:	4927      	ldr	r1, [pc, #156]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a18:	4828      	ldr	r0, [pc, #160]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a1a:	313c      	adds	r1, #60	; 0x3c
    3a1c:	6008      	str	r0, [r1, #0]
    3a1e:	f004 fb47 	bl	80b0 <mpsl_fem_device_config_254_apply_get>
    3a22:	b140      	cbz	r0, 3a36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    3a24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3a28:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    3a2c:	1c41      	adds	r1, r0, #1
    3a2e:	d002      	beq.n	3a36 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    3a30:	4920      	ldr	r1, [pc, #128]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a32:	3110      	adds	r1, #16
    3a34:	6008      	str	r0, [r1, #0]
    3a36:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3a3a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    3a3c:	1c41      	adds	r1, r0, #1
    3a3e:	d004      	beq.n	3a4a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    3a40:	491f      	ldr	r1, [pc, #124]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a42:	680a      	ldr	r2, [r1, #0]
    3a44:	f360 4217 	bfi	r2, r0, #16, #8
    3a48:	600a      	str	r2, [r1, #0]
    3a4a:	f240 1103 	movw	r1, #259	; 0x103
    3a4e:	f240 605b 	movw	r0, #1627	; 0x65b
    3a52:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    3a56:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3a5a:	2001      	movs	r0, #1
    3a5c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    3a60:	f000 f842 	bl	3ae8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    3a64:	f240 2001 	movw	r0, #513	; 0x201
    3a68:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    3a6c:	2002      	movs	r0, #2
    3a6e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    3a72:	4914      	ldr	r1, [pc, #80]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a74:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    3a78:	6008      	str	r0, [r1, #0]
    3a7a:	4913      	ldr	r1, [pc, #76]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3a7c:	2000      	movs	r0, #0
    3a7e:	8608      	strh	r0, [r1, #48]	; 0x30
    3a80:	3110      	adds	r1, #16
    3a82:	61c8      	str	r0, [r1, #28]
    3a84:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    3a88:	2001      	movs	r0, #1
    3a8a:	f006 f96a 	bl	9d62 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    3a8e:	2010      	movs	r0, #16
    3a90:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3a94:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3a98:	2002      	movs	r0, #2
    3a9a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    3a9e:	480b      	ldr	r0, [pc, #44]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aa0:	6800      	ldr	r0, [r0, #0]
    3aa2:	2800      	cmp	r0, #0
    3aa4:	d002      	beq.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3aaa:	4700      	bx	r0
    3aac:	bd70      	pop	{r4, r5, r6, pc}
    3aae:	0000      	.short	0x0000
    3ab0:	40001000 	.word	0x40001000
    3ab4:	4000173c 	.word	0x4000173c
    3ab8:	80000096 	.word	0x80000096
    3abc:	8900002c 	.word	0x8900002c
    3ac0:	4000158c 	.word	0x4000158c
    3ac4:	4001f504 	.word	0x4001f504
    3ac8:	20001004 	.word	0x20001004
    3acc:	200000f4 	.word	0x200000f4

00003ad0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    3ad0:	4901      	ldr	r1, [pc, #4]	; (3ad8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    3ad2:	7548      	strb	r0, [r1, #21]
    3ad4:	4770      	bx	lr
    3ad6:	0000      	.short	0x0000
    3ad8:	20001014 	.word	0x20001014

00003adc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    3adc:	4901      	ldr	r1, [pc, #4]	; (3ae4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    3ade:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ae2:	4770      	bx	lr
    3ae4:	00004300 	.word	0x00004300

00003ae8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    3ae8:	4908      	ldr	r1, [pc, #32]	; (3b0c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    3aea:	b510      	push	{r4, lr}
    3aec:	7508      	strb	r0, [r1, #20]
    3aee:	4908      	ldr	r1, [pc, #32]	; (3b10 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    3af0:	2801      	cmp	r0, #1
    3af2:	d006      	beq.n	3b02 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    3af4:	2802      	cmp	r0, #2
    3af6:	d006      	beq.n	3b06 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    3af8:	f640 516c 	movw	r1, #3436	; 0xd6c
    3afc:	203e      	movs	r0, #62	; 0x3e
    3afe:	f7fc fc5b 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b02:	2003      	movs	r0, #3
    3b04:	e000      	b.n	3b08 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    3b06:	2004      	movs	r0, #4
    3b08:	6008      	str	r0, [r1, #0]
    3b0a:	bd10      	pop	{r4, pc}
    3b0c:	20001014 	.word	0x20001014
    3b10:	40001510 	.word	0x40001510

00003b14 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    3b14:	4905      	ldr	r1, [pc, #20]	; (3b2c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    3b16:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    3b1a:	4805      	ldr	r0, [pc, #20]	; (3b30 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    3b1c:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    3b20:	f041 0101 	orr.w	r1, r1, #1
    3b24:	7001      	strb	r1, [r0, #0]
    3b26:	f000 ba0b 	b.w	3f40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3b2a:	0000      	.short	0x0000
    3b2c:	40001000 	.word	0x40001000
    3b30:	20001014 	.word	0x20001014

00003b34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    3b34:	4901      	ldr	r1, [pc, #4]	; (3b3c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    3b36:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3b3a:	4770      	bx	lr
    3b3c:	0000430c 	.word	0x0000430c

00003b40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    3b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b44:	4e30      	ldr	r6, [pc, #192]	; (3c08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3b46:	4c31      	ldr	r4, [pc, #196]	; (3c0c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    3b48:	4688      	mov	r8, r1
    3b4a:	0007      	movs	r7, r0
    3b4c:	4615      	mov	r5, r2
    3b4e:	f04f 0901 	mov.w	r9, #1
    3b52:	d006      	beq.n	3b62 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    3b54:	2f01      	cmp	r7, #1
    3b56:	d012      	beq.n	3b7e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    3b58:	f640 0117 	movw	r1, #2071	; 0x817
    3b5c:	203e      	movs	r0, #62	; 0x3e
    3b5e:	f7fc fc2b 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b62:	4610      	mov	r0, r2
    3b64:	f000 fb80 	bl	4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>
    3b68:	4829      	ldr	r0, [pc, #164]	; (3c10 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    3b6a:	f884 9009 	strb.w	r9, [r4, #9]
    3b6e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    3b72:	4640      	mov	r0, r8
    3b74:	f000 fb26 	bl	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    3b78:	4605      	mov	r5, r0
    3b7a:	4630      	mov	r0, r6
    3b7c:	e00c      	b.n	3b98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    3b7e:	4610      	mov	r0, r2
    3b80:	f000 fb58 	bl	4234 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x234>
    3b84:	2002      	movs	r0, #2
    3b86:	7260      	strb	r0, [r4, #9]
    3b88:	f649 71ba 	movw	r1, #40890	; 0x9fba
    3b8c:	4640      	mov	r0, r8
    3b8e:	f000 fb19 	bl	41c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c4>
    3b92:	4605      	mov	r5, r0
    3b94:	481c      	ldr	r0, [pc, #112]	; (3c08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    3b96:	1d00      	adds	r0, r0, #4
    3b98:	f000 fad2 	bl	4140 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x140>
    3b9c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3c14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    3ba0:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    3ba4:	f8df a074 	ldr.w	sl, [pc, #116]	; 3c1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    3ba8:	481b      	ldr	r0, [pc, #108]	; (3c18 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    3baa:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    3bae:	2010      	movs	r0, #16
    3bb0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    3bb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3bb6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    3bba:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    3bbe:	6260      	str	r0, [r4, #36]	; 0x24
    3bc0:	4817      	ldr	r0, [pc, #92]	; (3c20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3bc2:	6006      	str	r6, [r0, #0]
    3bc4:	f000 f9f6 	bl	3fb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    3bc8:	4641      	mov	r1, r8
    3bca:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    3bce:	4811      	ldr	r0, [pc, #68]	; (3c14 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    3bd0:	300c      	adds	r0, #12
    3bd2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3bd6:	42a8      	cmp	r0, r5
    3bd8:	d310      	bcc.n	3bfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    3bda:	2000      	movs	r0, #0
    3bdc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3be0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    3be4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3be6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    3bea:	6260      	str	r0, [r4, #36]	; 0x24
    3bec:	480c      	ldr	r0, [pc, #48]	; (3c20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    3bee:	1d00      	adds	r0, r0, #4
    3bf0:	6006      	str	r6, [r0, #0]
    3bf2:	f7ff fd6b 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3bf6:	2000      	movs	r0, #0
    3bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bfc:	4629      	mov	r1, r5
    3bfe:	4638      	mov	r0, r7
    3c00:	f000 faaa 	bl	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    3c04:	2001      	movs	r0, #1
    3c06:	e7f7      	b.n	3bf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    3c08:	40001000 	.word	0x40001000
    3c0c:	20001014 	.word	0x20001014
    3c10:	000042ac 	.word	0x000042ac
    3c14:	40008000 	.word	0x40008000
    3c18:	40008140 	.word	0x40008140
    3c1c:	4001f098 	.word	0x4001f098
    3c20:	4001f504 	.word	0x4001f504

00003c24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    3c24:	4b0d      	ldr	r3, [pc, #52]	; (3c5c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    3c26:	b510      	push	{r4, lr}
    3c28:	71d8      	strb	r0, [r3, #7]
    3c2a:	729a      	strb	r2, [r3, #10]
    3c2c:	b151      	cbz	r1, 3c44 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    3c2e:	2002      	movs	r0, #2
    3c30:	7218      	strb	r0, [r3, #8]
    3c32:	2801      	cmp	r0, #1
    3c34:	d008      	beq.n	3c48 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    3c36:	2802      	cmp	r0, #2
    3c38:	d00f      	beq.n	3c5a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3c3a:	f640 2144 	movw	r1, #2628	; 0xa44
    3c3e:	203e      	movs	r0, #62	; 0x3e
    3c40:	f7fc fbba 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c44:	2001      	movs	r0, #1
    3c46:	e7f3      	b.n	3c30 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    3c48:	7a58      	ldrb	r0, [r3, #9]
    3c4a:	2802      	cmp	r0, #2
    3c4c:	d105      	bne.n	3c5a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    3c4e:	f000 f93b 	bl	3ec8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    3c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c56:	f000 ba49 	b.w	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    3c5a:	bd10      	pop	{r4, pc}
    3c5c:	20001014 	.word	0x20001014

00003c60 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    3c60:	4904      	ldr	r1, [pc, #16]	; (3c74 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    3c62:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    3c66:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    3c6a:	4249      	negs	r1, r1
    3c6c:	7001      	strb	r1, [r0, #0]
    3c6e:	2001      	movs	r0, #1
    3c70:	4770      	bx	lr
    3c72:	0000      	.short	0x0000
    3c74:	40001000 	.word	0x40001000

00003c78 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    3c78:	4903      	ldr	r1, [pc, #12]	; (3c88 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    3c7a:	0e02      	lsrs	r2, r0, #24
    3c7c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    3c80:	0200      	lsls	r0, r0, #8
    3c82:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    3c86:	4770      	bx	lr
    3c88:	40001000 	.word	0x40001000

00003c8c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    3c8c:	4901      	ldr	r1, [pc, #4]	; (3c94 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    3c8e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3c92:	4770      	bx	lr
    3c94:	40001000 	.word	0x40001000

00003c98 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    3c98:	b510      	push	{r4, lr}
    3c9a:	2200      	movs	r2, #0
    3c9c:	2901      	cmp	r1, #1
    3c9e:	d006      	beq.n	3cae <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    3ca0:	2902      	cmp	r1, #2
    3ca2:	d002      	beq.n	3caa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    3ca4:	f240 21d2 	movw	r1, #722	; 0x2d2
    3ca8:	e014      	b.n	3cd4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    3caa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3cae:	490b      	ldr	r1, [pc, #44]	; (3cdc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    3cb0:	430a      	orrs	r2, r1
    3cb2:	490b      	ldr	r1, [pc, #44]	; (3ce0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3cb4:	600a      	str	r2, [r1, #0]
    3cb6:	490b      	ldr	r1, [pc, #44]	; (3ce4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    3cb8:	4308      	orrs	r0, r1
    3cba:	4909      	ldr	r1, [pc, #36]	; (3ce0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    3cbc:	1d09      	adds	r1, r1, #4
    3cbe:	6008      	str	r0, [r1, #0]
    3cc0:	4809      	ldr	r0, [pc, #36]	; (3ce8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    3cc2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3cc6:	b2c0      	uxtb	r0, r0
    3cc8:	2803      	cmp	r0, #3
    3cca:	d001      	beq.n	3cd0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    3ccc:	280b      	cmp	r0, #11
    3cce:	d104      	bne.n	3cda <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    3cd0:	f240 21ea 	movw	r1, #746	; 0x2ea
    3cd4:	203e      	movs	r0, #62	; 0x3e
    3cd6:	f7fc fb6f 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cda:	bd10      	pop	{r4, pc}
    3cdc:	00100108 	.word	0x00100108
    3ce0:	40001514 	.word	0x40001514
    3ce4:	02030000 	.word	0x02030000
    3ce8:	40001000 	.word	0x40001000

00003cec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    3cec:	4901      	ldr	r1, [pc, #4]	; (3cf4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    3cee:	7588      	strb	r0, [r1, #22]
    3cf0:	4770      	bx	lr
    3cf2:	0000      	.short	0x0000
    3cf4:	20001014 	.word	0x20001014

00003cf8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    3cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cfc:	4851      	ldr	r0, [pc, #324]	; (3e44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3cfe:	f04f 0a01 	mov.w	sl, #1
    3d02:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    3d06:	484f      	ldr	r0, [pc, #316]	; (3e44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d08:	300c      	adds	r0, #12
    3d0a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    3d0e:	f006 f88c 	bl	9e2a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    3d12:	4c4d      	ldr	r4, [pc, #308]	; (3e48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3d14:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    3d18:	f000 f8e0 	bl	3edc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    3d1c:	494b      	ldr	r1, [pc, #300]	; (3e4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    3d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3d20:	6008      	str	r0, [r1, #0]
    3d22:	f8df 812c 	ldr.w	r8, [pc, #300]	; 3e50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    3d26:	2000      	movs	r0, #0
    3d28:	6260      	str	r0, [r4, #36]	; 0x24
    3d2a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    3d2e:	f240 131d 	movw	r3, #285	; 0x11d
    3d32:	439a      	bics	r2, r3
    3d34:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    3d38:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3d3c:	f000 f94e 	bl	3fdc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    3d40:	4605      	mov	r5, r0
    3d42:	4840      	ldr	r0, [pc, #256]	; (3e44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d44:	3008      	adds	r0, #8
    3d46:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3d4a:	4e3e      	ldr	r6, [pc, #248]	; (3e44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    3d4c:	61e0      	str	r0, [r4, #28]
    3d4e:	1d36      	adds	r6, r6, #4
    3d50:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    3d54:	61a0      	str	r0, [r4, #24]
    3d56:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3d5a:	7d21      	ldrb	r1, [r4, #20]
    3d5c:	f884 1020 	strb.w	r1, [r4, #32]
    3d60:	7a61      	ldrb	r1, [r4, #9]
    3d62:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3d66:	46a1      	mov	r9, r4
    3d68:	2400      	movs	r4, #0
    3d6a:	4639      	mov	r1, r7
    3d6c:	4628      	mov	r0, r5
    3d6e:	f000 f983 	bl	4078 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x78>
    3d72:	b910      	cbnz	r0, 3d7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    3d74:	f8c8 a010 	str.w	sl, [r8, #16]
    3d78:	2401      	movs	r4, #1
    3d7a:	4f33      	ldr	r7, [pc, #204]	; (3e48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    3d7c:	07e8      	lsls	r0, r5, #31
    3d7e:	f1a7 0710 	sub.w	r7, r7, #16
    3d82:	d120      	bne.n	3dc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    3d84:	07a8      	lsls	r0, r5, #30
    3d86:	d527      	bpl.n	3dd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    3d88:	f006 f96e 	bl	a068 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3d8c:	b9f0      	cbnz	r0, 3dcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d8e:	f006 f95b 	bl	a048 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    3d92:	b9d8      	cbnz	r0, 3dcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3d94:	482f      	ldr	r0, [pc, #188]	; (3e54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    3d96:	6800      	ldr	r0, [r0, #0]
    3d98:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    3d9c:	f3c0 6300 	ubfx	r3, r0, #24, #1
    3da0:	f000 020f 	and.w	r2, r0, #15
    3da4:	f3c0 1103 	ubfx	r1, r0, #4, #4
    3da8:	f3c0 2803 	ubfx	r8, r0, #8, #4
    3dac:	b173      	cbz	r3, 3dcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3dae:	b11a      	cbz	r2, 3db8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3db0:	b111      	cbz	r1, 3db8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    3db2:	f1b8 0f00 	cmp.w	r8, #0
    3db6:	d109      	bne.n	3dcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3db8:	f3c0 4004 	ubfx	r0, r0, #16, #5
    3dbc:	2801      	cmp	r0, #1
    3dbe:	d105      	bne.n	3dcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3dc0:	f1bc 0f03 	cmp.w	ip, #3
    3dc4:	d202      	bcs.n	3dcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    3dc6:	6838      	ldr	r0, [r7, #0]
    3dc8:	4780      	blx	r0
    3dca:	e00e      	b.n	3dea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3dcc:	f345 0080 	sbfx	r0, r5, #2, #1
    3dd0:	4621      	mov	r1, r4
    3dd2:	1c40      	adds	r0, r0, #1
    3dd4:	687a      	ldr	r2, [r7, #4]
    3dd6:	e007      	b.n	3de8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    3dd8:	f015 0f28 	tst.w	r5, #40	; 0x28
    3ddc:	d005      	beq.n	3dea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    3dde:	f345 1140 	sbfx	r1, r5, #5, #1
    3de2:	68ba      	ldr	r2, [r7, #8]
    3de4:	4620      	mov	r0, r4
    3de6:	1c49      	adds	r1, r1, #1
    3de8:	4790      	blx	r2
    3dea:	06e8      	lsls	r0, r5, #27
    3dec:	d501      	bpl.n	3df2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    3dee:	68f8      	ldr	r0, [r7, #12]
    3df0:	4780      	blx	r0
    3df2:	f899 1009 	ldrb.w	r1, [r9, #9]
    3df6:	4648      	mov	r0, r9
    3df8:	2902      	cmp	r1, #2
    3dfa:	d120      	bne.n	3e3e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3dfc:	7b01      	ldrb	r1, [r0, #12]
    3dfe:	2900      	cmp	r1, #0
    3e00:	d01d      	beq.n	3e3e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    3e02:	2902      	cmp	r1, #2
    3e04:	d004      	beq.n	3e10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    3e06:	2901      	cmp	r1, #1
    3e08:	d009      	beq.n	3e1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    3e0a:	f640 4156 	movw	r1, #3158	; 0xc56
    3e0e:	e00d      	b.n	3e2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    3e10:	69c1      	ldr	r1, [r0, #28]
    3e12:	f8d9 0010 	ldr.w	r0, [r9, #16]
    3e16:	4408      	add	r0, r1
    3e18:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    3e1c:	e00b      	b.n	3e36 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    3e1e:	6901      	ldr	r1, [r0, #16]
    3e20:	f8d9 001c 	ldr.w	r0, [r9, #28]
    3e24:	4281      	cmp	r1, r0
    3e26:	d804      	bhi.n	3e32 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    3e28:	f640 4157 	movw	r1, #3159	; 0xc57
    3e2c:	203e      	movs	r0, #62	; 0x3e
    3e2e:	f7fc fac3 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e32:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    3e36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e3a:	f000 b961 	b.w	4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>
    3e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e42:	0000      	.short	0x0000
    3e44:	40008000 	.word	0x40008000
    3e48:	20001014 	.word	0x20001014
    3e4c:	4001f508 	.word	0x4001f508
    3e50:	40001000 	.word	0x40001000
    3e54:	40001450 	.word	0x40001450
    3e58:	480b      	ldr	r0, [pc, #44]	; (3e88 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    3e5a:	7d81      	ldrb	r1, [r0, #22]
    3e5c:	480b      	ldr	r0, [pc, #44]	; (3e8c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    3e5e:	5c40      	ldrb	r0, [r0, r1]
    3e60:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    3e64:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    3e68:	d204      	bcs.n	3e74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    3e6a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    3e6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3e72:	e001      	b.n	3e78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    3e74:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    3e78:	4a05      	ldr	r2, [pc, #20]	; (3e90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    3e7a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    3e7e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    3e82:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    3e86:	4770      	bx	lr
    3e88:	20001014 	.word	0x20001014
    3e8c:	000042b2 	.word	0x000042b2
    3e90:	40001000 	.word	0x40001000
    3e94:	b508      	push	{r3, lr}
    3e96:	490b      	ldr	r1, [pc, #44]	; (3ec4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    3e98:	466b      	mov	r3, sp
    3e9a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    3e9e:	7d89      	ldrb	r1, [r1, #22]
    3ea0:	f000 faaa 	bl	43f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    3ea4:	f99d 0000 	ldrsb.w	r0, [sp]
    3ea8:	f000 fa7a 	bl	43a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    3eac:	f10d 0001 	add.w	r0, sp, #1
    3eb0:	f004 f8e8 	bl	8084 <mpsl_fem_pa_gain_set>
    3eb4:	2800      	cmp	r0, #0
    3eb6:	d004      	beq.n	3ec2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    3eb8:	f240 51e6 	movw	r1, #1510	; 0x5e6
    3ebc:	203e      	movs	r0, #62	; 0x3e
    3ebe:	f7fc fa7b 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ec2:	bd08      	pop	{r3, pc}
    3ec4:	20001014 	.word	0x20001014
    3ec8:	4803      	ldr	r0, [pc, #12]	; (3ed8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    3eca:	7a01      	ldrb	r1, [r0, #8]
    3ecc:	2901      	cmp	r1, #1
    3ece:	d102      	bne.n	3ed6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    3ed0:	7a80      	ldrb	r0, [r0, #10]
    3ed2:	f7ff bfdf 	b.w	3e94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    3ed6:	4770      	bx	lr
    3ed8:	20001014 	.word	0x20001014
    3edc:	480d      	ldr	r0, [pc, #52]	; (3f14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    3ede:	b510      	push	{r4, lr}
    3ee0:	7a40      	ldrb	r0, [r0, #9]
    3ee2:	2801      	cmp	r0, #1
    3ee4:	d00c      	beq.n	3f00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    3ee6:	2802      	cmp	r0, #2
    3ee8:	d113      	bne.n	3f12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3eea:	f004 f8ad 	bl	8048 <mpsl_fem_lna_configuration_clear>
    3eee:	2800      	cmp	r0, #0
    3ef0:	d00f      	beq.n	3f12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ef2:	1c40      	adds	r0, r0, #1
    3ef4:	d00d      	beq.n	3f12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3ef6:	f640 01ab 	movw	r1, #2219	; 0x8ab
    3efa:	203e      	movs	r0, #62	; 0x3e
    3efc:	f7fc fa5c 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f00:	f004 f8b4 	bl	806c <mpsl_fem_pa_configuration_clear>
    3f04:	2800      	cmp	r0, #0
    3f06:	d004      	beq.n	3f12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f08:	1c40      	adds	r0, r0, #1
    3f0a:	d002      	beq.n	3f12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    3f0c:	f640 01a5 	movw	r1, #2213	; 0x8a5
    3f10:	e7f3      	b.n	3efa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    3f12:	bd10      	pop	{r4, pc}
    3f14:	20001014 	.word	0x20001014
    3f18:	4808      	ldr	r0, [pc, #32]	; (3f3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    3f1a:	2100      	movs	r1, #0
    3f1c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    3f20:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    3f24:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    3f28:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    3f2c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    3f30:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    3f34:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    3f38:	4770      	bx	lr
    3f3a:	0000      	.short	0x0000
    3f3c:	40001000 	.word	0x40001000
    3f40:	4818      	ldr	r0, [pc, #96]	; (3fa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    3f42:	b510      	push	{r4, lr}
    3f44:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    3f48:	07c1      	lsls	r1, r0, #31
    3f4a:	d029      	beq.n	3fa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f4c:	0781      	lsls	r1, r0, #30
    3f4e:	d514      	bpl.n	3f7a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    3f50:	4815      	ldr	r0, [pc, #84]	; (3fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3f52:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    3f56:	f041 0101 	orr.w	r1, r1, #1
    3f5a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f5e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    3f62:	b2c0      	uxtb	r0, r0
    3f64:	280b      	cmp	r0, #11
    3f66:	d005      	beq.n	3f74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f68:	280a      	cmp	r0, #10
    3f6a:	d003      	beq.n	3f74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f6c:	2803      	cmp	r0, #3
    3f6e:	d001      	beq.n	3f74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    3f70:	2802      	cmp	r0, #2
    3f72:	d115      	bne.n	3fa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f74:	f240 610f 	movw	r1, #1551	; 0x60f
    3f78:	e00f      	b.n	3f9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    3f7a:	0740      	lsls	r0, r0, #29
    3f7c:	d510      	bpl.n	3fa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f7e:	480a      	ldr	r0, [pc, #40]	; (3fa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    3f80:	490a      	ldr	r1, [pc, #40]	; (3fac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    3f82:	3008      	adds	r0, #8
    3f84:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    3f88:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3f8c:	4808      	ldr	r0, [pc, #32]	; (3fb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    3f8e:	f005 ff0b 	bl	9da8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3f92:	2800      	cmp	r0, #0
    3f94:	d004      	beq.n	3fa0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    3f96:	f240 6117 	movw	r1, #1559	; 0x617
    3f9a:	203e      	movs	r0, #62	; 0x3e
    3f9c:	f7fc fa0c 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fa0:	bd10      	pop	{r4, pc}
    3fa2:	0000      	.short	0x0000
    3fa4:	20001014 	.word	0x20001014
    3fa8:	40001000 	.word	0x40001000
    3fac:	4001f098 	.word	0x4001f098
    3fb0:	40008000 	.word	0x40008000
    3fb4:	4808      	ldr	r0, [pc, #32]	; (3fd8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    3fb6:	4601      	mov	r1, r0
    3fb8:	79c2      	ldrb	r2, [r0, #7]
    3fba:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    3fbe:	b112      	cbz	r2, 3fc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    3fc0:	2a01      	cmp	r2, #1
    3fc2:	d003      	beq.n	3fcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    3fc4:	e006      	b.n	3fd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    3fc6:	f041 0102 	orr.w	r1, r1, #2
    3fca:	e001      	b.n	3fd0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    3fcc:	f041 0104 	orr.w	r1, r1, #4
    3fd0:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    3fd4:	f7ff bfb4 	b.w	3f40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    3fd8:	20001014 	.word	0x20001014
    3fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fe0:	4d22      	ldr	r5, [pc, #136]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    3fe2:	2400      	movs	r4, #0
    3fe4:	7b28      	ldrb	r0, [r5, #12]
    3fe6:	b138      	cbz	r0, 3ff8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3fe8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3fec:	4820      	ldr	r0, [pc, #128]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    3fee:	f005 fedb 	bl	9da8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    3ff2:	b108      	cbz	r0, 3ff8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    3ff4:	2701      	movs	r7, #1
    3ff6:	e000      	b.n	3ffa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    3ff8:	2700      	movs	r7, #0
    3ffa:	7a68      	ldrb	r0, [r5, #9]
    3ffc:	4e1d      	ldr	r6, [pc, #116]	; (4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>)
    3ffe:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4002:	2801      	cmp	r0, #1
    4004:	d002      	beq.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    4006:	2802      	cmp	r0, #2
    4008:	d006      	beq.n	4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
    400a:	e016      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    400c:	4630      	mov	r0, r6
    400e:	f005 fec6 	bl	9d9e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    4012:	b190      	cbz	r0, 403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4014:	2408      	movs	r4, #8
    4016:	e010      	b.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4018:	4630      	mov	r0, r6
    401a:	f005 fec0 	bl	9d9e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    401e:	b100      	cbz	r0, 4022 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22>
    4020:	2402      	movs	r4, #2
    4022:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    4026:	43c0      	mvns	r0, r0
    4028:	f340 0000 	sbfx	r0, r0, #0, #1
    402c:	1c40      	adds	r0, r0, #1
    402e:	d101      	bne.n	4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>
    4030:	f044 0404 	orr.w	r4, r4, #4
    4034:	b10f      	cbz	r7, 403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4036:	f044 0401 	orr.w	r4, r4, #1
    403a:	f014 0f0b 	tst.w	r4, #11
    403e:	d107      	bne.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
    4040:	f44f 7188 	mov.w	r1, #272	; 0x110
    4044:	4630      	mov	r0, r6
    4046:	f005 feaa 	bl	9d9e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    404a:	b108      	cbz	r0, 4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
    404c:	f044 0410 	orr.w	r4, r4, #16
    4050:	f7ff ff62 	bl	3f18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    4054:	06e0      	lsls	r0, r4, #27
    4056:	d506      	bpl.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    4058:	0720      	lsls	r0, r4, #28
    405a:	d404      	bmi.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    405c:	7a68      	ldrb	r0, [r5, #9]
    405e:	2801      	cmp	r0, #1
    4060:	d101      	bne.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    4062:	f044 0420 	orr.w	r4, r4, #32
    4066:	4620      	mov	r0, r4
    4068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    406c:	20001014 	.word	0x20001014
    4070:	40008000 	.word	0x40008000
    4074:	40001000 	.word	0x40001000
    4078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    407c:	4c1a      	ldr	r4, [pc, #104]	; (40e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe8>)
    407e:	460d      	mov	r5, r1
    4080:	7a21      	ldrb	r1, [r4, #8]
    4082:	b129      	cbz	r1, 4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    4084:	f010 0f11 	tst.w	r0, #17
    4088:	d007      	beq.n	409a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9a>
    408a:	f7ff fb1f 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    408e:	e024      	b.n	40da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xda>
    4090:	f000 f890 	bl	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
    4094:	2000      	movs	r0, #0
    4096:	7320      	strb	r0, [r4, #12]
    4098:	e01f      	b.n	40da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xda>
    409a:	2901      	cmp	r1, #1
    409c:	d001      	beq.n	40a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa2>
    409e:	2601      	movs	r6, #1
    40a0:	e000      	b.n	40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>
    40a2:	2600      	movs	r6, #0
    40a4:	79e0      	ldrb	r0, [r4, #7]
    40a6:	2801      	cmp	r0, #1
    40a8:	d00e      	beq.n	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
    40aa:	2700      	movs	r7, #0
    40ac:	f000 f882 	bl	41b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b4>
    40b0:	2196      	movs	r1, #150	; 0x96
    40b2:	4630      	mov	r0, r6
    40b4:	f000 f894 	bl	41e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e0>
    40b8:	4601      	mov	r1, r0
    40ba:	b14f      	cbz	r7, 40d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd0>
    40bc:	353b      	adds	r5, #59	; 0x3b
    40be:	428d      	cmp	r5, r1
    40c0:	d904      	bls.n	40cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xcc>
    40c2:	2000      	movs	r0, #0
    40c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40c8:	2701      	movs	r7, #1
    40ca:	e7ef      	b.n	40ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac>
    40cc:	2001      	movs	r0, #1
    40ce:	71e0      	strb	r0, [r4, #7]
    40d0:	7aa2      	ldrb	r2, [r4, #10]
    40d2:	4630      	mov	r0, r6
    40d4:	f7ff fd34 	bl	3b40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    40d8:	b108      	cbz	r0, 40de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xde>
    40da:	2001      	movs	r0, #1
    40dc:	e7f2      	b.n	40c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc4>
    40de:	f640 21a5 	movw	r1, #2725	; 0xaa5
    40e2:	203e      	movs	r0, #62	; 0x3e
    40e4:	f7fc f968 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40e8:	20001014 	.word	0x20001014
    40ec:	4803      	ldr	r0, [pc, #12]	; (40fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xfc>)
    40ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    40f2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    40f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    40fa:	4770      	bx	lr
    40fc:	40001000 	.word	0x40001000
    4100:	4804      	ldr	r0, [pc, #16]	; (4114 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x114>)
    4102:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4104:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    4108:	6241      	str	r1, [r0, #36]	; 0x24
    410a:	4903      	ldr	r1, [pc, #12]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    410c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    4110:	6008      	str	r0, [r1, #0]
    4112:	4770      	bx	lr
    4114:	20001014 	.word	0x20001014
    4118:	4001f504 	.word	0x4001f504
    411c:	4a07      	ldr	r2, [pc, #28]	; (413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>)
    411e:	2000      	movs	r0, #0
    4120:	3208      	adds	r2, #8
    4122:	4906      	ldr	r1, [pc, #24]	; (413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>)
    4124:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4128:	1d0a      	adds	r2, r1, #4
    412a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    412e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4132:	4902      	ldr	r1, [pc, #8]	; (413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>)
    4134:	310c      	adds	r1, #12
    4136:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    413a:	4770      	bx	lr
    413c:	40008000 	.word	0x40008000
    4140:	4903      	ldr	r1, [pc, #12]	; (4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>)
    4142:	79c9      	ldrb	r1, [r1, #7]
    4144:	2900      	cmp	r1, #0
    4146:	d102      	bne.n	414e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14e>
    4148:	4902      	ldr	r1, [pc, #8]	; (4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>)
    414a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    414e:	4770      	bx	lr
    4150:	20001014 	.word	0x20001014
    4154:	4001f098 	.word	0x4001f098
    4158:	b510      	push	{r4, lr}
    415a:	4a14      	ldr	r2, [pc, #80]	; (41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>)
    415c:	b120      	cbz	r0, 4168 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x168>
    415e:	2801      	cmp	r0, #1
    4160:	d011      	beq.n	4186 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x186>
    4162:	f240 7153 	movw	r1, #1875	; 0x753
    4166:	e01c      	b.n	41a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a2>
    4168:	f101 0028 	add.w	r0, r1, #40	; 0x28
    416c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    4170:	490f      	ldr	r1, [pc, #60]	; (41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>)
    4172:	480e      	ldr	r0, [pc, #56]	; (41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>)
    4174:	f003 ff80 	bl	8078 <mpsl_fem_pa_configuration_set>
    4178:	2800      	cmp	r0, #0
    417a:	d015      	beq.n	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    417c:	1c40      	adds	r0, r0, #1
    417e:	d013      	beq.n	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    4180:	f240 7142 	movw	r1, #1858	; 0x742
    4184:	e00d      	b.n	41a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a2>
    4186:	f101 0029 	add.w	r0, r1, #41	; 0x29
    418a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    418e:	4908      	ldr	r1, [pc, #32]	; (41b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b0>)
    4190:	4806      	ldr	r0, [pc, #24]	; (41ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ac>)
    4192:	f003 ff5f 	bl	8054 <mpsl_fem_lna_configuration_set>
    4196:	2800      	cmp	r0, #0
    4198:	d006      	beq.n	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    419a:	1c40      	adds	r0, r0, #1
    419c:	d004      	beq.n	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    419e:	f240 714f 	movw	r1, #1871	; 0x74f
    41a2:	203e      	movs	r0, #62	; 0x3e
    41a4:	f7fc f908 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41a8:	bd10      	pop	{r4, pc}
    41aa:	0000      	.short	0x0000
    41ac:	200000f8 	.word	0x200000f8
    41b0:	000042dc 	.word	0x000042dc
    41b4:	4802      	ldr	r0, [pc, #8]	; (41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>)
    41b6:	2100      	movs	r1, #0
    41b8:	71c1      	strb	r1, [r0, #7]
    41ba:	7201      	strb	r1, [r0, #8]
    41bc:	7241      	strb	r1, [r0, #9]
    41be:	4770      	bx	lr
    41c0:	20001014 	.word	0x20001014
    41c4:	4a05      	ldr	r2, [pc, #20]	; (41dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1dc>)
    41c6:	79d2      	ldrb	r2, [r2, #7]
    41c8:	2a01      	cmp	r2, #1
    41ca:	d006      	beq.n	41da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1da>
    41cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41d0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    41d4:	fbb1 f1f2 	udiv	r1, r1, r2
    41d8:	1a40      	subs	r0, r0, r1
    41da:	4770      	bx	lr
    41dc:	20001014 	.word	0x20001014
    41e0:	b570      	push	{r4, r5, r6, lr}
    41e2:	4c13      	ldr	r4, [pc, #76]	; (4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>)
    41e4:	4603      	mov	r3, r0
    41e6:	460d      	mov	r5, r1
    41e8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    41ec:	2000      	movs	r0, #0
    41ee:	b15a      	cbz	r2, 4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>
    41f0:	4621      	mov	r1, r4
    41f2:	f891 1020 	ldrb.w	r1, [r1, #32]
    41f6:	b163      	cbz	r3, 4212 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x212>
    41f8:	2b01      	cmp	r3, #1
    41fa:	d111      	bne.n	4220 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x220>
    41fc:	2a01      	cmp	r2, #1
    41fe:	4628      	mov	r0, r5
    4200:	d012      	beq.n	4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>
    4202:	f005 fdd6 	bl	9db2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    4206:	e009      	b.n	421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>
    4208:	f640 0158 	movw	r1, #2136	; 0x858
    420c:	203e      	movs	r0, #62	; 0x3e
    420e:	f7fc f8d3 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4212:	2a01      	cmp	r2, #1
    4214:	4628      	mov	r0, r5
    4216:	d004      	beq.n	4222 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x222>
    4218:	f005 fdd9 	bl	9dce <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    421c:	69e1      	ldr	r1, [r4, #28]
    421e:	4408      	add	r0, r1
    4220:	bd70      	pop	{r4, r5, r6, pc}
    4222:	f000 f8d1 	bl	43c8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    4226:	e7f9      	b.n	421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>
    4228:	f000 f8c0 	bl	43ac <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    422c:	e7f6      	b.n	421c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21c>
    422e:	0000      	.short	0x0000
    4230:	20001014 	.word	0x20001014
    4234:	b510      	push	{r4, lr}
    4236:	f7ff fc57 	bl	3ae8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    423a:	f7ff fe0d 	bl	3e58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    423e:	f7ff fe43 	bl	3ec8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    4242:	f7ff ff53 	bl	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    4246:	f005 ff0f 	bl	a068 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    424a:	2800      	cmp	r0, #0
    424c:	d108      	bne.n	4260 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x260>
    424e:	f005 fefb 	bl	a048 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    4252:	2800      	cmp	r0, #0
    4254:	d104      	bne.n	4260 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x260>
    4256:	4803      	ldr	r0, [pc, #12]	; (4264 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x264>)
    4258:	6801      	ldr	r1, [r0, #0]
    425a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    425e:	6001      	str	r1, [r0, #0]
    4260:	bd10      	pop	{r4, pc}
    4262:	0000      	.short	0x0000
    4264:	40001568 	.word	0x40001568
    4268:	b510      	push	{r4, lr}
    426a:	4604      	mov	r4, r0
    426c:	f7ff fc3c 	bl	3ae8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    4270:	f7ff fdf2 	bl	3e58 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    4274:	4620      	mov	r0, r4
    4276:	f7ff fe0d 	bl	3e94 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    427a:	f005 fef5 	bl	a068 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    427e:	2800      	cmp	r0, #0
    4280:	d00d      	beq.n	429e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29e>
    4282:	4a09      	ldr	r2, [pc, #36]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4284:	6811      	ldr	r1, [r2, #0]
    4286:	0650      	lsls	r0, r2, #25
    4288:	2c02      	cmp	r4, #2
    428a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    428e:	d007      	beq.n	42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>
    4290:	f3c0 2006 	ubfx	r0, r0, #8, #7
    4294:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    4298:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    429c:	6010      	str	r0, [r2, #0]
    429e:	bd10      	pop	{r4, pc}
    42a0:	f3c0 6006 	ubfx	r0, r0, #24, #7
    42a4:	e7f6      	b.n	4294 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x294>
    42a6:	0000      	.short	0x0000
    42a8:	40001588 	.word	0x40001588
    42ac:	a62c0000 	.word	0xa62c0000
    42b0:	0604a1e0 	.word	0x0604a1e0
    42b4:	0e0c0a08 	.word	0x0e0c0a08
    42b8:	16141210 	.word	0x16141210
    42bc:	201e1c18 	.word	0x201e1c18
    42c0:	28262422 	.word	0x28262422
    42c4:	302e2c2a 	.word	0x302e2c2a
    42c8:	38363432 	.word	0x38363432
    42cc:	403e3c3a 	.word	0x403e3c3a
    42d0:	48464442 	.word	0x48464442
    42d4:	024e4c4a 	.word	0x024e4c4a
    42d8:	0000501a 	.word	0x0000501a
    42dc:	00000001 	.word	0x00000001
    42e0:	40001110 	.word	0x40001110
	...
    42f8:	00001e14 	.word	0x00001e14
    42fc:	00001130 	.word	0x00001130
    4300:	00000000 	.word	0x00000000
    4304:	00000028 	.word	0x00000028
    4308:	00000018 	.word	0x00000018
    430c:	00000000 	.word	0x00000000
    4310:	00001e14 	.word	0x00001e14
    4314:	00001130 	.word	0x00001130
    4318:	00000000 	.word	0x00000000
    431c:	00001770 	.word	0x00001770
    4320:	00000fa0 	.word	0x00000fa0

00004324 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    4324:	b570      	push	{r4, r5, r6, lr}
    4326:	4605      	mov	r5, r0
    4328:	4614      	mov	r4, r2
    432a:	4608      	mov	r0, r1
    432c:	f7ff fc02 	bl	3b34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4330:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    4334:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    4338:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    433c:	4807      	ldr	r0, [pc, #28]	; (435c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    433e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    4342:	4408      	add	r0, r1
    4344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4348:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    434c:	fbb0 f5f1 	udiv	r5, r0, r1
    4350:	4620      	mov	r0, r4
    4352:	f7ff fbc3 	bl	3adc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4356:	4428      	add	r0, r5
    4358:	1d40      	adds	r0, r0, #5
    435a:	bd70      	pop	{r4, r5, r6, pc}
    435c:	000043ec 	.word	0x000043ec

00004360 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    4360:	b570      	push	{r4, r5, r6, lr}
    4362:	4d0e      	ldr	r5, [pc, #56]	; (439c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    4364:	461c      	mov	r4, r3
    4366:	3d08      	subs	r5, #8
    4368:	4b0c      	ldr	r3, [pc, #48]	; (439c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    436a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    436e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    4372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    4376:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    437a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    437e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    4382:	4418      	add	r0, r3
    4384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4388:	fbb0 f5f1 	udiv	r5, r0, r1
    438c:	4610      	mov	r0, r2
    438e:	f7ff fba5 	bl	3adc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4392:	4428      	add	r0, r5
    4394:	4420      	add	r0, r4
    4396:	1d40      	adds	r0, r0, #5
    4398:	bd70      	pop	{r4, r5, r6, pc}
    439a:	0000      	.short	0x0000
    439c:	000043ec 	.word	0x000043ec

000043a0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    43a0:	4901      	ldr	r1, [pc, #4]	; (43a8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    43a2:	b2c0      	uxtb	r0, r0
    43a4:	6008      	str	r0, [r1, #0]
    43a6:	4770      	bx	lr
    43a8:	4000150c 	.word	0x4000150c

000043ac <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    43ac:	4a05      	ldr	r2, [pc, #20]	; (43c4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    43ae:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    43b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43b6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    43ba:	fbb1 f1f2 	udiv	r1, r1, r2
    43be:	4408      	add	r0, r1
    43c0:	1e80      	subs	r0, r0, #2
    43c2:	4770      	bx	lr
    43c4:	000043e4 	.word	0x000043e4

000043c8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    43c8:	4a05      	ldr	r2, [pc, #20]	; (43e0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    43ca:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    43ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    43d2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    43d6:	fbb1 f1f2 	udiv	r1, r1, r2
    43da:	4408      	add	r0, r1
    43dc:	4770      	bx	lr
    43de:	0000      	.short	0x0000
    43e0:	000043e4 	.word	0x000043e4
    43e4:	05dc0000 	.word	0x05dc0000
    43e8:	000003e8 	.word	0x000003e8
    43ec:	00000000 	.word	0x00000000
    43f0:	00001e14 	.word	0x00001e14
    43f4:	00001130 	.word	0x00001130

000043f8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    43f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43fc:	461e      	mov	r6, r3
    43fe:	4617      	mov	r7, r2
    4400:	460c      	mov	r4, r1
    4402:	4605      	mov	r5, r0
    4404:	f000 f856 	bl	44b4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    4408:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 44b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    440c:	4680      	mov	r8, r0
    440e:	f899 0000 	ldrb.w	r0, [r9]
    4412:	42a8      	cmp	r0, r5
    4414:	d110      	bne.n	4438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4416:	f899 1001 	ldrb.w	r1, [r9, #1]
    441a:	4648      	mov	r0, r9
    441c:	42a1      	cmp	r1, r4
    441e:	d10b      	bne.n	4438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4420:	f990 1002 	ldrsb.w	r1, [r0, #2]
    4424:	42b9      	cmp	r1, r7
    4426:	d107      	bne.n	4438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    4428:	78c2      	ldrb	r2, [r0, #3]
    442a:	4542      	cmp	r2, r8
    442c:	d104      	bne.n	4438 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    442e:	8881      	ldrh	r1, [r0, #4]
    4430:	8031      	strh	r1, [r6, #0]
    4432:	7980      	ldrb	r0, [r0, #6]
    4434:	70b0      	strb	r0, [r6, #2]
    4436:	e037      	b.n	44a8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    4438:	463a      	mov	r2, r7
    443a:	4621      	mov	r1, r4
    443c:	2d01      	cmp	r5, #1
    443e:	d009      	beq.n	4454 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    4440:	2d02      	cmp	r5, #2
    4442:	d009      	beq.n	4458 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    4444:	2d04      	cmp	r5, #4
    4446:	d009      	beq.n	445c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    4448:	2d08      	cmp	r5, #8
    444a:	d009      	beq.n	4460 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    444c:	f240 4161 	movw	r1, #1121	; 0x461
    4450:	2006      	movs	r0, #6
    4452:	e00c      	b.n	446e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    4454:	2000      	movs	r0, #0
    4456:	e004      	b.n	4462 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4458:	2001      	movs	r0, #1
    445a:	e002      	b.n	4462 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    445c:	2003      	movs	r0, #3
    445e:	e000      	b.n	4462 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    4460:	2002      	movs	r0, #2
    4462:	466b      	mov	r3, sp
    4464:	f000 f89e 	bl	45a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    4468:	b118      	cbz	r0, 4472 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    446a:	213d      	movs	r1, #61	; 0x3d
    446c:	2075      	movs	r0, #117	; 0x75
    446e:	f7fb ffa3 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4472:	4620      	mov	r0, r4
    4474:	f7ff f922 	bl	36bc <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    4478:	4602      	mov	r2, r0
    447a:	2300      	movs	r3, #0
    447c:	4631      	mov	r1, r6
    447e:	f99d 0000 	ldrsb.w	r0, [sp]
    4482:	f003 fe0b 	bl	809c <mpsl_fem_tx_power_split>
    4486:	4601      	mov	r1, r0
    4488:	f889 1007 	strb.w	r1, [r9, #7]
    448c:	8831      	ldrh	r1, [r6, #0]
    448e:	f8a9 1004 	strh.w	r1, [r9, #4]
    4492:	78b1      	ldrb	r1, [r6, #2]
    4494:	f889 1006 	strb.w	r1, [r9, #6]
    4498:	f889 5000 	strb.w	r5, [r9]
    449c:	f889 4001 	strb.w	r4, [r9, #1]
    44a0:	f889 7002 	strb.w	r7, [r9, #2]
    44a4:	f889 8003 	strb.w	r8, [r9, #3]
    44a8:	f999 0007 	ldrsb.w	r0, [r9, #7]
    44ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44b0:	20000190 	.word	0x20000190

000044b4 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    44b4:	4801      	ldr	r0, [pc, #4]	; (44bc <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    44b6:	7800      	ldrb	r0, [r0, #0]
    44b8:	4770      	bx	lr
    44ba:	0000      	.short	0x0000
    44bc:	20000110 	.word	0x20000110

000044c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    44c0:	b570      	push	{r4, r5, r6, lr}
    44c2:	4c17      	ldr	r4, [pc, #92]	; (4520 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    44c4:	7860      	ldrb	r0, [r4, #1]
    44c6:	2800      	cmp	r0, #0
    44c8:	d123      	bne.n	4512 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    44ca:	2001      	movs	r0, #1
    44cc:	7060      	strb	r0, [r4, #1]
    44ce:	f005 fda5 	bl	a01c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    44d2:	f06f 0527 	mvn.w	r5, #39	; 0x27
    44d6:	b928      	cbnz	r0, 44e4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    44d8:	f005 fdd6 	bl	a088 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    44dc:	b910      	cbnz	r0, 44e4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    44de:	f005 fddd 	bl	a09c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    44e2:	b120      	cbz	r0, 44ee <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    44e4:	480f      	ldr	r0, [pc, #60]	; (4524 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    44e6:	6060      	str	r0, [r4, #4]
    44e8:	70a5      	strb	r5, [r4, #2]
    44ea:	2008      	movs	r0, #8
    44ec:	e010      	b.n	4510 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    44ee:	f005 fd6a 	bl	9fc6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    44f2:	b940      	cbnz	r0, 4506 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44f4:	f005 fd71 	bl	9fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    44f8:	b928      	cbnz	r0, 4506 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    44fa:	f005 fd85 	bl	a008 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    44fe:	b910      	cbnz	r0, 4506 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    4500:	f005 fd96 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4504:	b130      	cbz	r0, 4514 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    4506:	4807      	ldr	r0, [pc, #28]	; (4524 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    4508:	3031      	adds	r0, #49	; 0x31
    450a:	6060      	str	r0, [r4, #4]
    450c:	70a5      	strb	r5, [r4, #2]
    450e:	2004      	movs	r0, #4
    4510:	70e0      	strb	r0, [r4, #3]
    4512:	bd70      	pop	{r4, r5, r6, pc}
    4514:	f240 113f 	movw	r1, #319	; 0x13f
    4518:	2074      	movs	r0, #116	; 0x74
    451a:	f003 fc01 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    451e:	0000      	.short	0x0000
    4520:	20000110 	.word	0x20000110
    4524:	0000a3b8 	.word	0x0000a3b8

00004528 <mpsl_tx_power_radio_supported_power_adjust>:
    4528:	4a06      	ldr	r2, [pc, #24]	; (4544 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    452a:	b500      	push	{lr}
    452c:	f992 2003 	ldrsb.w	r2, [r2, #3]
    4530:	4290      	cmp	r0, r2
    4532:	db01      	blt.n	4538 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    4534:	4610      	mov	r0, r2
    4536:	bd00      	pop	{pc}
    4538:	f000 f808 	bl	454c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    453c:	4902      	ldr	r1, [pc, #8]	; (4548 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    453e:	5608      	ldrsb	r0, [r1, r0]
    4540:	bd00      	pop	{pc}
    4542:	0000      	.short	0x0000
    4544:	20000110 	.word	0x20000110
    4548:	0000a3aa 	.word	0x0000a3aa

0000454c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    454c:	4602      	mov	r2, r0
    454e:	4813      	ldr	r0, [pc, #76]	; (459c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    4550:	b510      	push	{r4, lr}
    4552:	f990 3003 	ldrsb.w	r3, [r0, #3]
    4556:	429a      	cmp	r2, r3
    4558:	db01      	blt.n	455e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    455a:	200d      	movs	r0, #13
    455c:	bd10      	pop	{r4, pc}
    455e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    4562:	429a      	cmp	r2, r3
    4564:	dc01      	bgt.n	456a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    4566:	2000      	movs	r0, #0
    4568:	bd10      	pop	{r4, pc}
    456a:	b101      	cbz	r1, 456e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    456c:	2101      	movs	r1, #1
    456e:	1ad4      	subs	r4, r2, r3
    4570:	6843      	ldr	r3, [r0, #4]
    4572:	5d18      	ldrb	r0, [r3, r4]
    4574:	4c0a      	ldr	r4, [pc, #40]	; (45a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    4576:	5624      	ldrsb	r4, [r4, r0]
    4578:	4294      	cmp	r4, r2
    457a:	d0f5      	beq.n	4568 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    457c:	4c08      	ldr	r4, [pc, #32]	; (45a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    457e:	4408      	add	r0, r1
    4580:	343f      	adds	r4, #63	; 0x3f
    4582:	b2c0      	uxtb	r0, r0
    4584:	b2d2      	uxtb	r2, r2
    4586:	42a3      	cmp	r3, r4
    4588:	d1ee      	bne.n	4568 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    458a:	2900      	cmp	r1, #0
    458c:	d0ec      	beq.n	4568 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    458e:	2a01      	cmp	r2, #1
    4590:	d001      	beq.n	4596 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    4592:	2a02      	cmp	r2, #2
    4594:	d1e8      	bne.n	4568 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    4596:	1c40      	adds	r0, r0, #1
    4598:	b2c0      	uxtb	r0, r0
    459a:	bd10      	pop	{r4, pc}
    459c:	20000110 	.word	0x20000110
    45a0:	0000a3aa 	.word	0x0000a3aa

000045a4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45a8:	461c      	mov	r4, r3
    45aa:	4690      	mov	r8, r2
    45ac:	460d      	mov	r5, r1
    45ae:	4606      	mov	r6, r0
    45b0:	f06f 0715 	mvn.w	r7, #21
    45b4:	2804      	cmp	r0, #4
    45b6:	d804      	bhi.n	45c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    45b8:	b11c      	cbz	r4, 45c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    45ba:	f005 fc13 	bl	9de4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    45be:	42a8      	cmp	r0, r5
    45c0:	d802      	bhi.n	45c8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    45c2:	4638      	mov	r0, r7
    45c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45c8:	4805      	ldr	r0, [pc, #20]	; (45e0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    45ca:	4642      	mov	r2, r8
    45cc:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    45d0:	b118      	cbz	r0, 45da <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    45d2:	5740      	ldrsb	r0, [r0, r5]
    45d4:	4282      	cmp	r2, r0
    45d6:	dd00      	ble.n	45da <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    45d8:	4602      	mov	r2, r0
    45da:	7022      	strb	r2, [r4, #0]
    45dc:	2000      	movs	r0, #0
    45de:	e7f1      	b.n	45c4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    45e0:	20001048 	.word	0x20001048

000045e4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    45e4:	4801      	ldr	r0, [pc, #4]	; (45ec <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    45e6:	7800      	ldrb	r0, [r0, #0]
    45e8:	4770      	bx	lr
    45ea:	0000      	.short	0x0000
    45ec:	20000118 	.word	0x20000118

000045f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    45f0:	4905      	ldr	r1, [pc, #20]	; (4608 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    45f2:	780a      	ldrb	r2, [r1, #0]
    45f4:	4290      	cmp	r0, r2
    45f6:	d301      	bcc.n	45fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    45f8:	2000      	movs	r0, #0
    45fa:	4770      	bx	lr
    45fc:	6849      	ldr	r1, [r1, #4]
    45fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4602:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    4606:	4770      	bx	lr
    4608:	20000118 	.word	0x20000118

0000460c <MPSL_IRQ_RADIO_Handler>:
    460c:	490d      	ldr	r1, [pc, #52]	; (4644 <MPSL_IRQ_RADIO_Handler+0x38>)
    460e:	b510      	push	{r4, lr}
    4610:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    4614:	2820      	cmp	r0, #32
    4616:	d00f      	beq.n	4638 <MPSL_IRQ_RADIO_Handler+0x2c>
    4618:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    461c:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    4620:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    4624:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    4628:	6840      	ldr	r0, [r0, #4]
    462a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    462e:	680a      	ldr	r2, [r1, #0]
    4630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4634:	2104      	movs	r1, #4
    4636:	4710      	bx	r2
    4638:	f640 017f 	movw	r1, #2175	; 0x87f
    463c:	2070      	movs	r0, #112	; 0x70
    463e:	f003 fb6f 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4642:	0000      	.short	0x0000
    4644:	20000d40 	.word	0x20000d40
    4648:	b570      	push	{r4, r5, r6, lr}
    464a:	4605      	mov	r5, r0
    464c:	2a20      	cmp	r2, #32
    464e:	d028      	beq.n	46a2 <MPSL_IRQ_RADIO_Handler+0x96>
    4650:	4819      	ldr	r0, [pc, #100]	; (46b8 <MPSL_IRQ_RADIO_Handler+0xac>)
    4652:	4c1a      	ldr	r4, [pc, #104]	; (46bc <MPSL_IRQ_RADIO_Handler+0xb0>)
    4654:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    4658:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    465c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    4660:	4423      	add	r3, r4
    4662:	2920      	cmp	r1, #32
    4664:	d022      	beq.n	46ac <MPSL_IRQ_RADIO_Handler+0xa0>
    4666:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    466a:	7840      	ldrb	r0, [r0, #1]
    466c:	784c      	ldrb	r4, [r1, #1]
    466e:	7048      	strb	r0, [r1, #1]
    4670:	4620      	mov	r0, r4
    4672:	4601      	mov	r1, r0
    4674:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    4678:	4291      	cmp	r1, r2
    467a:	7005      	strb	r5, [r0, #0]
    467c:	7840      	ldrb	r0, [r0, #1]
    467e:	d1f8      	bne.n	4672 <MPSL_IRQ_RADIO_Handler+0x66>
    4680:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    4684:	2a20      	cmp	r2, #32
    4686:	bf1a      	itte	ne
    4688:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    468c:	7054      	strbne	r4, [r2, #1]
    468e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    4692:	2220      	movs	r2, #32
    4694:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    4698:	f88c 2001 	strb.w	r2, [ip, #1]
    469c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    46a0:	bd70      	pop	{r4, r5, r6, pc}
    46a2:	f240 2186 	movw	r1, #646	; 0x286
    46a6:	2070      	movs	r0, #112	; 0x70
    46a8:	f003 fb3a 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    46ac:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    46b0:	7840      	ldrb	r0, [r0, #1]
    46b2:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    46b6:	e7db      	b.n	4670 <MPSL_IRQ_RADIO_Handler+0x64>
    46b8:	20000cc0 	.word	0x20000cc0
    46bc:	20000d40 	.word	0x20000d40
    46c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46c4:	b08f      	sub	sp, #60	; 0x3c
    46c6:	4615      	mov	r5, r2
    46c8:	461e      	mov	r6, r3
    46ca:	460c      	mov	r4, r1
    46cc:	f002 fa7c 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    46d0:	1828      	adds	r0, r5, r0
    46d2:	f146 0100 	adc.w	r1, r6, #0
    46d6:	e9cd 1001 	strd	r1, r0, [sp, #4]
    46da:	e9d4 2300 	ldrd	r2, r3, [r4]
    46de:	1a80      	subs	r0, r0, r2
    46e0:	eb71 0003 	sbcs.w	r0, r1, r3
    46e4:	f0c0 80e5 	bcc.w	48b2 <MPSL_IRQ_RADIO_Handler+0x2a6>
    46e8:	a808      	add	r0, sp, #32
    46ea:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    46ee:	900a      	str	r0, [sp, #40]	; 0x28
    46f0:	48bc      	ldr	r0, [pc, #752]	; (49e4 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    46f2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    46f6:	4408      	add	r0, r1
    46f8:	9009      	str	r0, [sp, #36]	; 0x24
    46fa:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    46fe:	2020      	movs	r0, #32
    4700:	f10d 091c 	add.w	r9, sp, #28
    4704:	f88d 001c 	strb.w	r0, [sp, #28]
    4708:	2d20      	cmp	r5, #32
    470a:	d036      	beq.n	477a <MPSL_IRQ_RADIO_Handler+0x16e>
    470c:	48b6      	ldr	r0, [pc, #728]	; (49e8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    470e:	2600      	movs	r6, #0
    4710:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    4714:	48b5      	ldr	r0, [pc, #724]	; (49ec <MPSL_IRQ_RADIO_Handler+0x3e0>)
    4716:	e9d4 7300 	ldrd	r7, r3, [r4]
    471a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    471e:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4722:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    4726:	eb18 0101 	adds.w	r1, r8, r1
    472a:	4172      	adcs	r2, r6
    472c:	1a79      	subs	r1, r7, r1
    472e:	eb73 0102 	sbcs.w	r1, r3, r2
    4732:	d322      	bcc.n	477a <MPSL_IRQ_RADIO_Handler+0x16e>
    4734:	89e1      	ldrh	r1, [r4, #14]
    4736:	b1c9      	cbz	r1, 476c <MPSL_IRQ_RADIO_Handler+0x160>
    4738:	89c0      	ldrh	r0, [r0, #14]
    473a:	b9b8      	cbnz	r0, 476c <MPSL_IRQ_RADIO_Handler+0x160>
    473c:	f003 f950 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4740:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4744:	bf08      	it	eq
    4746:	200d      	moveq	r0, #13
    4748:	d00b      	beq.n	4762 <MPSL_IRQ_RADIO_Handler+0x156>
    474a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    474e:	3856      	subs	r0, #86	; 0x56
    4750:	bf08      	it	eq
    4752:	201c      	moveq	r0, #28
    4754:	d005      	beq.n	4762 <MPSL_IRQ_RADIO_Handler+0x156>
    4756:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    475a:	389f      	subs	r0, #159	; 0x9f
    475c:	bf14      	ite	ne
    475e:	4630      	movne	r0, r6
    4760:	2032      	moveq	r0, #50	; 0x32
    4762:	1c40      	adds	r0, r0, #1
    4764:	ebb7 0108 	subs.w	r1, r7, r8
    4768:	4281      	cmp	r1, r0
    476a:	db06      	blt.n	477a <MPSL_IRQ_RADIO_Handler+0x16e>
    476c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    4770:	f889 5000 	strb.w	r5, [r9]
    4774:	7845      	ldrb	r5, [r0, #1]
    4776:	2d20      	cmp	r5, #32
    4778:	d1cc      	bne.n	4714 <MPSL_IRQ_RADIO_Handler+0x108>
    477a:	980a      	ldr	r0, [sp, #40]	; 0x28
    477c:	f899 1000 	ldrb.w	r1, [r9]
    4780:	2d20      	cmp	r5, #32
    4782:	7001      	strb	r1, [r0, #0]
    4784:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    4788:	f000 8128 	beq.w	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    478c:	4896      	ldr	r0, [pc, #600]	; (49e8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    478e:	4f97      	ldr	r7, [pc, #604]	; (49ec <MPSL_IRQ_RADIO_Handler+0x3e0>)
    4790:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    4794:	2600      	movs	r6, #0
    4796:	9004      	str	r0, [sp, #16]
    4798:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    479c:	f10a 0008 	add.w	r0, sl, #8
    47a0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    47a4:	f8d4 b000 	ldr.w	fp, [r4]
    47a8:	e9d0 8300 	ldrd	r8, r3, [r0]
    47ac:	eb1b 0202 	adds.w	r2, fp, r2
    47b0:	4171      	adcs	r1, r6
    47b2:	ebb8 0202 	subs.w	r2, r8, r2
    47b6:	eb73 0101 	sbcs.w	r1, r3, r1
    47ba:	d320      	bcc.n	47fe <MPSL_IRQ_RADIO_Handler+0x1f2>
    47bc:	89c0      	ldrh	r0, [r0, #14]
    47be:	2800      	cmp	r0, #0
    47c0:	f000 810c 	beq.w	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    47c4:	89e0      	ldrh	r0, [r4, #14]
    47c6:	2800      	cmp	r0, #0
    47c8:	f040 8108 	bne.w	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    47cc:	f003 f908 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    47d0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    47d4:	bf08      	it	eq
    47d6:	200d      	moveq	r0, #13
    47d8:	d00b      	beq.n	47f2 <MPSL_IRQ_RADIO_Handler+0x1e6>
    47da:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    47de:	3856      	subs	r0, #86	; 0x56
    47e0:	bf08      	it	eq
    47e2:	201c      	moveq	r0, #28
    47e4:	d005      	beq.n	47f2 <MPSL_IRQ_RADIO_Handler+0x1e6>
    47e6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    47ea:	389f      	subs	r0, #159	; 0x9f
    47ec:	bf14      	ite	ne
    47ee:	4630      	movne	r0, r6
    47f0:	2032      	moveq	r0, #50	; 0x32
    47f2:	1c41      	adds	r1, r0, #1
    47f4:	ebb8 000b 	subs.w	r0, r8, fp
    47f8:	4288      	cmp	r0, r1
    47fa:	f280 80ef 	bge.w	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    47fe:	f889 5000 	strb.w	r5, [r9]
    4802:	f89a 0018 	ldrb.w	r0, [sl, #24]
    4806:	7c21      	ldrb	r1, [r4, #16]
    4808:	4281      	cmp	r1, r0
    480a:	d207      	bcs.n	481c <MPSL_IRQ_RADIO_Handler+0x210>
    480c:	9804      	ldr	r0, [sp, #16]
    480e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    4812:	7845      	ldrb	r5, [r0, #1]
    4814:	2d20      	cmp	r5, #32
    4816:	d1bf      	bne.n	4798 <MPSL_IRQ_RADIO_Handler+0x18c>
    4818:	f000 b8e0 	b.w	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    481c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    4820:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    4824:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    4828:	f8d0 9008 	ldr.w	r9, [r0, #8]
    482c:	8ac0      	ldrh	r0, [r0, #22]
    482e:	eb19 0502 	adds.w	r5, r9, r2
    4832:	eb41 0806 	adc.w	r8, r1, r6
    4836:	bbb0      	cbnz	r0, 48a6 <MPSL_IRQ_RADIO_Handler+0x29a>
    4838:	89e0      	ldrh	r0, [r4, #14]
    483a:	b3a0      	cbz	r0, 48a6 <MPSL_IRQ_RADIO_Handler+0x29a>
    483c:	f003 f8d0 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4840:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4844:	bf08      	it	eq
    4846:	200d      	moveq	r0, #13
    4848:	d00b      	beq.n	4862 <MPSL_IRQ_RADIO_Handler+0x256>
    484a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    484e:	3856      	subs	r0, #86	; 0x56
    4850:	bf08      	it	eq
    4852:	201c      	moveq	r0, #28
    4854:	d005      	beq.n	4862 <MPSL_IRQ_RADIO_Handler+0x256>
    4856:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    485a:	389f      	subs	r0, #159	; 0x9f
    485c:	bf14      	ite	ne
    485e:	4630      	movne	r0, r6
    4860:	2032      	moveq	r0, #50	; 0x32
    4862:	1c41      	adds	r1, r0, #1
    4864:	ebb5 0009 	subs.w	r0, r5, r9
    4868:	4288      	cmp	r0, r1
    486a:	da1c      	bge.n	48a6 <MPSL_IRQ_RADIO_Handler+0x29a>
    486c:	f003 f8b8 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4870:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4874:	bf08      	it	eq
    4876:	200d      	moveq	r0, #13
    4878:	d00b      	beq.n	4892 <MPSL_IRQ_RADIO_Handler+0x286>
    487a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    487e:	3856      	subs	r0, #86	; 0x56
    4880:	bf08      	it	eq
    4882:	201c      	moveq	r0, #28
    4884:	d005      	beq.n	4892 <MPSL_IRQ_RADIO_Handler+0x286>
    4886:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    488a:	389f      	subs	r0, #159	; 0x9f
    488c:	bf14      	ite	ne
    488e:	4630      	movne	r0, r6
    4890:	2032      	moveq	r0, #50	; 0x32
    4892:	f89d 1020 	ldrb.w	r1, [sp, #32]
    4896:	1c40      	adds	r0, r0, #1
    4898:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    489c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    48a0:	1815      	adds	r5, r2, r0
    48a2:	eb43 0806 	adc.w	r8, r3, r6
    48a6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    48aa:	1b49      	subs	r1, r1, r5
    48ac:	eb70 0008 	sbcs.w	r0, r0, r8
    48b0:	d203      	bcs.n	48ba <MPSL_IRQ_RADIO_Handler+0x2ae>
    48b2:	b00f      	add	sp, #60	; 0x3c
    48b4:	2000      	movs	r0, #0
    48b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48ba:	e9c4 5800 	strd	r5, r8, [r4]
    48be:	9818      	ldr	r0, [sp, #96]	; 0x60
    48c0:	900b      	str	r0, [sp, #44]	; 0x2c
    48c2:	a808      	add	r0, sp, #32
    48c4:	900a      	str	r0, [sp, #40]	; 0x28
    48c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    48c8:	f10d 0a1c 	add.w	sl, sp, #28
    48cc:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    48d0:	2020      	movs	r0, #32
    48d2:	f88d 001c 	strb.w	r0, [sp, #28]
    48d6:	2d20      	cmp	r5, #32
    48d8:	d037      	beq.n	494a <MPSL_IRQ_RADIO_Handler+0x33e>
    48da:	4843      	ldr	r0, [pc, #268]	; (49e8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    48dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    48de:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    48e2:	bf00      	nop
    48e4:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    48e8:	e9d4 8300 	ldrd	r8, r3, [r4]
    48ec:	f850 9f08 	ldr.w	r9, [r0, #8]!
    48f0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    48f4:	eb19 0202 	adds.w	r2, r9, r2
    48f8:	4171      	adcs	r1, r6
    48fa:	ebb8 0202 	subs.w	r2, r8, r2
    48fe:	eb73 0101 	sbcs.w	r1, r3, r1
    4902:	d322      	bcc.n	494a <MPSL_IRQ_RADIO_Handler+0x33e>
    4904:	89e1      	ldrh	r1, [r4, #14]
    4906:	b1c9      	cbz	r1, 493c <MPSL_IRQ_RADIO_Handler+0x330>
    4908:	89c0      	ldrh	r0, [r0, #14]
    490a:	b9b8      	cbnz	r0, 493c <MPSL_IRQ_RADIO_Handler+0x330>
    490c:	f003 f868 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4910:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4914:	bf08      	it	eq
    4916:	200d      	moveq	r0, #13
    4918:	d00b      	beq.n	4932 <MPSL_IRQ_RADIO_Handler+0x326>
    491a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    491e:	3856      	subs	r0, #86	; 0x56
    4920:	bf08      	it	eq
    4922:	201c      	moveq	r0, #28
    4924:	d005      	beq.n	4932 <MPSL_IRQ_RADIO_Handler+0x326>
    4926:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    492a:	389f      	subs	r0, #159	; 0x9f
    492c:	bf14      	ite	ne
    492e:	4630      	movne	r0, r6
    4930:	2032      	moveq	r0, #50	; 0x32
    4932:	1c41      	adds	r1, r0, #1
    4934:	ebb8 0009 	subs.w	r0, r8, r9
    4938:	4288      	cmp	r0, r1
    493a:	db06      	blt.n	494a <MPSL_IRQ_RADIO_Handler+0x33e>
    493c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    4940:	f88a 5000 	strb.w	r5, [sl]
    4944:	7845      	ldrb	r5, [r0, #1]
    4946:	2d20      	cmp	r5, #32
    4948:	d1cc      	bne.n	48e4 <MPSL_IRQ_RADIO_Handler+0x2d8>
    494a:	980a      	ldr	r0, [sp, #40]	; 0x28
    494c:	f89a 1000 	ldrb.w	r1, [sl]
    4950:	2d20      	cmp	r5, #32
    4952:	7001      	strb	r1, [r0, #0]
    4954:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    4958:	d040      	beq.n	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    495a:	4923      	ldr	r1, [pc, #140]	; (49e8 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    495c:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4960:	f8cd 000c 	str.w	r0, [sp, #12]
    4964:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    4968:	f109 0008 	add.w	r0, r9, #8
    496c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4970:	f8d4 b000 	ldr.w	fp, [r4]
    4974:	e9d0 a300 	ldrd	sl, r3, [r0]
    4978:	eb1b 0202 	adds.w	r2, fp, r2
    497c:	4171      	adcs	r1, r6
    497e:	ebba 0202 	subs.w	r2, sl, r2
    4982:	eb73 0101 	sbcs.w	r1, r3, r1
    4986:	d31b      	bcc.n	49c0 <MPSL_IRQ_RADIO_Handler+0x3b4>
    4988:	89c0      	ldrh	r0, [r0, #14]
    498a:	b338      	cbz	r0, 49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    498c:	89e0      	ldrh	r0, [r4, #14]
    498e:	bb28      	cbnz	r0, 49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    4990:	f003 f826 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4994:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4998:	bf08      	it	eq
    499a:	200d      	moveq	r0, #13
    499c:	d00b      	beq.n	49b6 <MPSL_IRQ_RADIO_Handler+0x3aa>
    499e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    49a2:	3856      	subs	r0, #86	; 0x56
    49a4:	bf08      	it	eq
    49a6:	201c      	moveq	r0, #28
    49a8:	d005      	beq.n	49b6 <MPSL_IRQ_RADIO_Handler+0x3aa>
    49aa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    49ae:	389f      	subs	r0, #159	; 0x9f
    49b0:	bf14      	ite	ne
    49b2:	4630      	movne	r0, r6
    49b4:	2032      	moveq	r0, #50	; 0x32
    49b6:	1c41      	adds	r1, r0, #1
    49b8:	ebba 000b 	subs.w	r0, sl, fp
    49bc:	4288      	cmp	r0, r1
    49be:	da0d      	bge.n	49dc <MPSL_IRQ_RADIO_Handler+0x3d0>
    49c0:	f888 5000 	strb.w	r5, [r8]
    49c4:	f899 1018 	ldrb.w	r1, [r9, #24]
    49c8:	7c20      	ldrb	r0, [r4, #16]
    49ca:	4288      	cmp	r0, r1
    49cc:	f4bf af26 	bcs.w	481c <MPSL_IRQ_RADIO_Handler+0x210>
    49d0:	9803      	ldr	r0, [sp, #12]
    49d2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    49d6:	7845      	ldrb	r5, [r0, #1]
    49d8:	2d20      	cmp	r5, #32
    49da:	d1c3      	bne.n	4964 <MPSL_IRQ_RADIO_Handler+0x358>
    49dc:	b00f      	add	sp, #60	; 0x3c
    49de:	2001      	movs	r0, #1
    49e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    49e4:	20000d40 	.word	0x20000d40
    49e8:	20000cc0 	.word	0x20000cc0
    49ec:	200008c0 	.word	0x200008c0
    49f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    49f4:	b083      	sub	sp, #12
    49f6:	4691      	mov	r9, r2
    49f8:	4604      	mov	r4, r0
    49fa:	460d      	mov	r5, r1
    49fc:	4698      	mov	r8, r3
    49fe:	aa01      	add	r2, sp, #4
    4a00:	4669      	mov	r1, sp
    4a02:	4618      	mov	r0, r3
    4a04:	f002 f8fc 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4a08:	f002 fe12 	bl	7630 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4a0c:	f002 f8dc 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    4a10:	4607      	mov	r7, r0
    4a12:	481e      	ldr	r0, [pc, #120]	; (4a8c <MPSL_IRQ_RADIO_Handler+0x480>)
    4a14:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    4a18:	2600      	movs	r6, #0
    4a1a:	2920      	cmp	r1, #32
    4a1c:	d009      	beq.n	4a32 <MPSL_IRQ_RADIO_Handler+0x426>
    4a1e:	6882      	ldr	r2, [r0, #8]
    4a20:	68c1      	ldr	r1, [r0, #12]
    4a22:	6900      	ldr	r0, [r0, #16]
    4a24:	1d83      	adds	r3, r0, #6
    4a26:	f146 0000 	adc.w	r0, r6, #0
    4a2a:	18d4      	adds	r4, r2, r3
    4a2c:	eb41 0500 	adc.w	r5, r1, r0
    4a30:	e026      	b.n	4a80 <MPSL_IRQ_RADIO_Handler+0x474>
    4a32:	340a      	adds	r4, #10
    4a34:	f145 0500 	adc.w	r5, r5, #0
    4a38:	f1b8 0f00 	cmp.w	r8, #0
    4a3c:	d017      	beq.n	4a6e <MPSL_IRQ_RADIO_Handler+0x462>
    4a3e:	f003 f8f7 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4a42:	b9a0      	cbnz	r0, 4a6e <MPSL_IRQ_RADIO_Handler+0x462>
    4a44:	f002 ffcc 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4a48:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4a4c:	bf08      	it	eq
    4a4e:	200d      	moveq	r0, #13
    4a50:	d00b      	beq.n	4a6a <MPSL_IRQ_RADIO_Handler+0x45e>
    4a52:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4a56:	3856      	subs	r0, #86	; 0x56
    4a58:	bf08      	it	eq
    4a5a:	201c      	moveq	r0, #28
    4a5c:	d005      	beq.n	4a6a <MPSL_IRQ_RADIO_Handler+0x45e>
    4a5e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4a62:	389f      	subs	r0, #159	; 0x9f
    4a64:	bf14      	ite	ne
    4a66:	4630      	movne	r0, r6
    4a68:	2032      	moveq	r0, #50	; 0x32
    4a6a:	1904      	adds	r4, r0, r4
    4a6c:	4175      	adcs	r5, r6
    4a6e:	f1b9 0f00 	cmp.w	r9, #0
    4a72:	d105      	bne.n	4a80 <MPSL_IRQ_RADIO_Handler+0x474>
    4a74:	9800      	ldr	r0, [sp, #0]
    4a76:	4287      	cmp	r7, r0
    4a78:	d902      	bls.n	4a80 <MPSL_IRQ_RADIO_Handler+0x474>
    4a7a:	1a38      	subs	r0, r7, r0
    4a7c:	1904      	adds	r4, r0, r4
    4a7e:	4175      	adcs	r5, r6
    4a80:	b003      	add	sp, #12
    4a82:	4620      	mov	r0, r4
    4a84:	4629      	mov	r1, r5
    4a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4a8a:	0000      	.short	0x0000
    4a8c:	20000d40 	.word	0x20000d40
    4a90:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a94:	b081      	sub	sp, #4
    4a96:	4605      	mov	r5, r0
    4a98:	9802      	ldr	r0, [sp, #8]
    4a9a:	494a      	ldr	r1, [pc, #296]	; (4bc4 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    4a9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4aa0:	4408      	add	r0, r1
    4aa2:	2600      	movs	r6, #0
    4aa4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    4aa8:	2020      	movs	r0, #32
    4aaa:	4692      	mov	sl, r2
    4aac:	7010      	strb	r0, [r2, #0]
    4aae:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    4ab2:	2c20      	cmp	r4, #32
    4ab4:	d036      	beq.n	4b24 <MPSL_IRQ_RADIO_Handler+0x518>
    4ab6:	9902      	ldr	r1, [sp, #8]
    4ab8:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    4abc:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    4ac0:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    4ac4:	e9d5 7300 	ldrd	r7, r3, [r5]
    4ac8:	f850 8f08 	ldr.w	r8, [r0, #8]!
    4acc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    4ad0:	eb18 0202 	adds.w	r2, r8, r2
    4ad4:	4171      	adcs	r1, r6
    4ad6:	1aba      	subs	r2, r7, r2
    4ad8:	eb73 0101 	sbcs.w	r1, r3, r1
    4adc:	d322      	bcc.n	4b24 <MPSL_IRQ_RADIO_Handler+0x518>
    4ade:	89e9      	ldrh	r1, [r5, #14]
    4ae0:	b1c9      	cbz	r1, 4b16 <MPSL_IRQ_RADIO_Handler+0x50a>
    4ae2:	89c0      	ldrh	r0, [r0, #14]
    4ae4:	b9b8      	cbnz	r0, 4b16 <MPSL_IRQ_RADIO_Handler+0x50a>
    4ae6:	f002 ff7b 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4aea:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4aee:	bf08      	it	eq
    4af0:	200d      	moveq	r0, #13
    4af2:	d00b      	beq.n	4b0c <MPSL_IRQ_RADIO_Handler+0x500>
    4af4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4af8:	3856      	subs	r0, #86	; 0x56
    4afa:	bf08      	it	eq
    4afc:	201c      	moveq	r0, #28
    4afe:	d005      	beq.n	4b0c <MPSL_IRQ_RADIO_Handler+0x500>
    4b00:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4b04:	389f      	subs	r0, #159	; 0x9f
    4b06:	bf14      	ite	ne
    4b08:	4630      	movne	r0, r6
    4b0a:	2032      	moveq	r0, #50	; 0x32
    4b0c:	1c41      	adds	r1, r0, #1
    4b0e:	ebb7 0008 	subs.w	r0, r7, r8
    4b12:	4288      	cmp	r0, r1
    4b14:	db06      	blt.n	4b24 <MPSL_IRQ_RADIO_Handler+0x518>
    4b16:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    4b1a:	f88a 4000 	strb.w	r4, [sl]
    4b1e:	7844      	ldrb	r4, [r0, #1]
    4b20:	2c20      	cmp	r4, #32
    4b22:	d1cd      	bne.n	4ac0 <MPSL_IRQ_RADIO_Handler+0x4b4>
    4b24:	9804      	ldr	r0, [sp, #16]
    4b26:	f89a 1000 	ldrb.w	r1, [sl]
    4b2a:	2c20      	cmp	r4, #32
    4b2c:	7001      	strb	r1, [r0, #0]
    4b2e:	9f04      	ldr	r7, [sp, #16]
    4b30:	9802      	ldr	r0, [sp, #8]
    4b32:	d042      	beq.n	4bba <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b34:	4924      	ldr	r1, [pc, #144]	; (4bc8 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    4b36:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    4b3a:	9000      	str	r0, [sp, #0]
    4b3c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    4b40:	f8d5 b000 	ldr.w	fp, [r5]
    4b44:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    4b48:	f108 0008 	add.w	r0, r8, #8
    4b4c:	eb1b 0201 	adds.w	r2, fp, r1
    4b50:	eb43 0106 	adc.w	r1, r3, r6
    4b54:	e9d0 a300 	ldrd	sl, r3, [r0]
    4b58:	ebba 0202 	subs.w	r2, sl, r2
    4b5c:	eb73 0101 	sbcs.w	r1, r3, r1
    4b60:	d31b      	bcc.n	4b9a <MPSL_IRQ_RADIO_Handler+0x58e>
    4b62:	89c0      	ldrh	r0, [r0, #14]
    4b64:	b348      	cbz	r0, 4bba <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b66:	89e8      	ldrh	r0, [r5, #14]
    4b68:	bb38      	cbnz	r0, 4bba <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b6a:	f002 ff39 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4b6e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4b72:	bf08      	it	eq
    4b74:	200d      	moveq	r0, #13
    4b76:	d00b      	beq.n	4b90 <MPSL_IRQ_RADIO_Handler+0x584>
    4b78:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4b7c:	3856      	subs	r0, #86	; 0x56
    4b7e:	bf08      	it	eq
    4b80:	201c      	moveq	r0, #28
    4b82:	d005      	beq.n	4b90 <MPSL_IRQ_RADIO_Handler+0x584>
    4b84:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4b88:	389f      	subs	r0, #159	; 0x9f
    4b8a:	bf14      	ite	ne
    4b8c:	4630      	movne	r0, r6
    4b8e:	2032      	moveq	r0, #50	; 0x32
    4b90:	1c41      	adds	r1, r0, #1
    4b92:	ebba 000b 	subs.w	r0, sl, fp
    4b96:	4288      	cmp	r0, r1
    4b98:	da0f      	bge.n	4bba <MPSL_IRQ_RADIO_Handler+0x5ae>
    4b9a:	703c      	strb	r4, [r7, #0]
    4b9c:	f898 1018 	ldrb.w	r1, [r8, #24]
    4ba0:	7c28      	ldrb	r0, [r5, #16]
    4ba2:	4288      	cmp	r0, r1
    4ba4:	d303      	bcc.n	4bae <MPSL_IRQ_RADIO_Handler+0x5a2>
    4ba6:	b005      	add	sp, #20
    4ba8:	2000      	movs	r0, #0
    4baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bae:	9800      	ldr	r0, [sp, #0]
    4bb0:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4bb4:	7844      	ldrb	r4, [r0, #1]
    4bb6:	2c20      	cmp	r4, #32
    4bb8:	d1c0      	bne.n	4b3c <MPSL_IRQ_RADIO_Handler+0x530>
    4bba:	b005      	add	sp, #20
    4bbc:	2001      	movs	r0, #1
    4bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bc2:	0000      	.short	0x0000
    4bc4:	20000d40 	.word	0x20000d40
    4bc8:	20000cc0 	.word	0x20000cc0
    4bcc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4bd0:	b09c      	sub	sp, #112	; 0x70
    4bd2:	461f      	mov	r7, r3
    4bd4:	f002 fa64 	bl	70a0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    4bd8:	4604      	mov	r4, r0
    4bda:	460d      	mov	r5, r1
    4bdc:	f002 fd28 	bl	7630 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    4be0:	4606      	mov	r6, r0
    4be2:	981e      	ldr	r0, [sp, #120]	; 0x78
    4be4:	2801      	cmp	r0, #1
    4be6:	bf18      	it	ne
    4be8:	2802      	cmpne	r0, #2
    4bea:	d005      	beq.n	4bf8 <MPSL_IRQ_RADIO_Handler+0x5ec>
    4bec:	f640 1156 	movw	r1, #2390	; 0x956
    4bf0:	f04f 0070 	mov.w	r0, #112	; 0x70
    4bf4:	f003 f894 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4bf8:	49fe      	ldr	r1, [pc, #1016]	; (4ff4 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    4bfa:	2001      	movs	r0, #1
    4bfc:	6008      	str	r0, [r1, #0]
    4bfe:	49fe      	ldr	r1, [pc, #1016]	; (4ff8 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    4c00:	6889      	ldr	r1, [r1, #8]
    4c02:	6008      	str	r0, [r1, #0]
    4c04:	2000      	movs	r0, #0
    4c06:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    4c0a:	900c      	str	r0, [sp, #48]	; 0x30
    4c0c:	1e40      	subs	r0, r0, #1
    4c0e:	900d      	str	r0, [sp, #52]	; 0x34
    4c10:	48fa      	ldr	r0, [pc, #1000]	; (4ffc <MPSL_IRQ_RADIO_Handler+0x9f0>)
    4c12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    4c16:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    4c1a:	f100 0108 	add.w	r1, r0, #8
    4c1e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4c22:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c26:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    4c2a:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    4c2e:	980e      	ldr	r0, [sp, #56]	; 0x38
    4c30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4c34:	f005 f906 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4c38:	4602      	mov	r2, r0
    4c3a:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    4c3e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    4c42:	4bef      	ldr	r3, [pc, #956]	; (5000 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4c44:	4440      	add	r0, r8
    4c46:	1c41      	adds	r1, r0, #1
    4c48:	1850      	adds	r0, r2, r1
    4c4a:	429a      	cmp	r2, r3
    4c4c:	d856      	bhi.n	4cfc <MPSL_IRQ_RADIO_Handler+0x6f0>
    4c4e:	4aed      	ldr	r2, [pc, #948]	; (5004 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4c50:	4291      	cmp	r1, r2
    4c52:	dc5b      	bgt.n	4d0c <MPSL_IRQ_RADIO_Handler+0x700>
    4c54:	4252      	negs	r2, r2
    4c56:	4291      	cmp	r1, r2
    4c58:	db60      	blt.n	4d1c <MPSL_IRQ_RADIO_Handler+0x710>
    4c5a:	1c59      	adds	r1, r3, #1
    4c5c:	4281      	cmp	r1, r0
    4c5e:	bfdc      	itt	le
    4c60:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4c64:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4c68:	dd05      	ble.n	4c76 <MPSL_IRQ_RADIO_Handler+0x66a>
    4c6a:	2800      	cmp	r0, #0
    4c6c:	bfbc      	itt	lt
    4c6e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4c72:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4c76:	9017      	str	r0, [sp, #92]	; 0x5c
    4c78:	48e3      	ldr	r0, [pc, #908]	; (5008 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    4c7a:	f1b8 0f00 	cmp.w	r8, #0
    4c7e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    4c82:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    4c86:	bf14      	ite	ne
    4c88:	f04f 0a01 	movne.w	sl, #1
    4c8c:	f04f 0a00 	moveq.w	sl, #0
    4c90:	f002 ffce 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4c94:	9019      	str	r0, [sp, #100]	; 0x64
    4c96:	f1ba 0f00 	cmp.w	sl, #0
    4c9a:	d00b      	beq.n	4cb4 <MPSL_IRQ_RADIO_Handler+0x6a8>
    4c9c:	49db      	ldr	r1, [pc, #876]	; (500c <MPSL_IRQ_RADIO_Handler+0xa00>)
    4c9e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    4ca2:	ea6f 0200 	mvn.w	r2, r0
    4ca6:	ea72 0001 	orns	r0, r2, r1
    4caa:	bf02      	ittt	eq
    4cac:	9819      	ldreq	r0, [sp, #100]	; 0x64
    4cae:	2800      	cmpeq	r0, #0
    4cb0:	2701      	moveq	r7, #1
    4cb2:	d001      	beq.n	4cb8 <MPSL_IRQ_RADIO_Handler+0x6ac>
    4cb4:	f04f 0700 	mov.w	r7, #0
    4cb8:	f002 fe92 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4cbc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4cc0:	bf08      	it	eq
    4cc2:	200d      	moveq	r0, #13
    4cc4:	d00b      	beq.n	4cde <MPSL_IRQ_RADIO_Handler+0x6d2>
    4cc6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4cca:	3856      	subs	r0, #86	; 0x56
    4ccc:	bf08      	it	eq
    4cce:	201c      	moveq	r0, #28
    4cd0:	d005      	beq.n	4cde <MPSL_IRQ_RADIO_Handler+0x6d2>
    4cd2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4cd6:	389f      	subs	r0, #159	; 0x9f
    4cd8:	bf14      	ite	ne
    4cda:	2000      	movne	r0, #0
    4cdc:	2032      	moveq	r0, #50	; 0x32
    4cde:	f04f 0900 	mov.w	r9, #0
    4ce2:	46cb      	mov	fp, r9
    4ce4:	9016      	str	r0, [sp, #88]	; 0x58
    4ce6:	4546      	cmp	r6, r8
    4ce8:	d936      	bls.n	4d58 <MPSL_IRQ_RADIO_Handler+0x74c>
    4cea:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4cec:	43f3      	mvns	r3, r6
    4cee:	f8df c310 	ldr.w	ip, [pc, #784]	; 5000 <MPSL_IRQ_RADIO_Handler+0x9f4>
    4cf2:	18c8      	adds	r0, r1, r3
    4cf4:	46e9      	mov	r9, sp
    4cf6:	aa1a      	add	r2, sp, #104	; 0x68
    4cf8:	4561      	cmp	r1, ip
    4cfa:	d904      	bls.n	4d06 <MPSL_IRQ_RADIO_Handler+0x6fa>
    4cfc:	f240 517f 	movw	r1, #1407	; 0x57f
    4d00:	2070      	movs	r0, #112	; 0x70
    4d02:	f003 f80d 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d06:	49bf      	ldr	r1, [pc, #764]	; (5004 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4d08:	428b      	cmp	r3, r1
    4d0a:	dd04      	ble.n	4d16 <MPSL_IRQ_RADIO_Handler+0x70a>
    4d0c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    4d10:	2070      	movs	r0, #112	; 0x70
    4d12:	f003 f805 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d16:	49be      	ldr	r1, [pc, #760]	; (5010 <MPSL_IRQ_RADIO_Handler+0xa04>)
    4d18:	428b      	cmp	r3, r1
    4d1a:	da04      	bge.n	4d26 <MPSL_IRQ_RADIO_Handler+0x71a>
    4d1c:	f240 5181 	movw	r1, #1409	; 0x581
    4d20:	2070      	movs	r0, #112	; 0x70
    4d22:	f002 fffd 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d26:	49bb      	ldr	r1, [pc, #748]	; (5014 <MPSL_IRQ_RADIO_Handler+0xa08>)
    4d28:	4281      	cmp	r1, r0
    4d2a:	bfdc      	itt	le
    4d2c:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    4d30:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    4d34:	dd05      	ble.n	4d42 <MPSL_IRQ_RADIO_Handler+0x736>
    4d36:	2800      	cmp	r0, #0
    4d38:	bfbc      	itt	lt
    4d3a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    4d3e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    4d42:	4649      	mov	r1, r9
    4d44:	f001 ff5c 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    4d48:	9800      	ldr	r0, [sp, #0]
    4d4a:	990e      	ldr	r1, [sp, #56]	; 0x38
    4d4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4d50:	9000      	str	r0, [sp, #0]
    4d52:	1a08      	subs	r0, r1, r0
    4d54:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    4d58:	2f00      	cmp	r7, #0
    4d5a:	bf18      	it	ne
    4d5c:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    4d60:	d105      	bne.n	4d6e <MPSL_IRQ_RADIO_Handler+0x762>
    4d62:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4d66:	2800      	cmp	r0, #0
    4d68:	bf18      	it	ne
    4d6a:	f04f 0b02 	movne.w	fp, #2
    4d6e:	43e0      	mvns	r0, r4
    4d70:	ea70 0005 	orns	r0, r0, r5
    4d74:	d022      	beq.n	4dbc <MPSL_IRQ_RADIO_Handler+0x7b0>
    4d76:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    4d7a:	1a22      	subs	r2, r4, r0
    4d7c:	eb75 0201 	sbcs.w	r2, r5, r1
    4d80:	d20c      	bcs.n	4d9c <MPSL_IRQ_RADIO_Handler+0x790>
    4d82:	1b02      	subs	r2, r0, r4
    4d84:	eb61 0105 	sbc.w	r1, r1, r5
    4d88:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4d8c:	f171 0100 	sbcs.w	r1, r1, #0
    4d90:	d311      	bcc.n	4db6 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4d92:	f640 1195 	movw	r1, #2453	; 0x995
    4d96:	2070      	movs	r0, #112	; 0x70
    4d98:	f002 ffc2 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4d9c:	1a22      	subs	r2, r4, r0
    4d9e:	eb65 0101 	sbc.w	r1, r5, r1
    4da2:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    4da6:	f171 0100 	sbcs.w	r1, r1, #0
    4daa:	d304      	bcc.n	4db6 <MPSL_IRQ_RADIO_Handler+0x7aa>
    4dac:	f640 1199 	movw	r1, #2457	; 0x999
    4db0:	2070      	movs	r0, #112	; 0x70
    4db2:	f002 ffb5 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4db6:	1b00      	subs	r0, r0, r4
    4db8:	2801      	cmp	r0, #1
    4dba:	da03      	bge.n	4dc4 <MPSL_IRQ_RADIO_Handler+0x7b8>
    4dbc:	981c      	ldr	r0, [sp, #112]	; 0x70
    4dbe:	901a      	str	r0, [sp, #104]	; 0x68
    4dc0:	2003      	movs	r0, #3
    4dc2:	e00d      	b.n	4de0 <MPSL_IRQ_RADIO_Handler+0x7d4>
    4dc4:	b157      	cbz	r7, 4ddc <MPSL_IRQ_RADIO_Handler+0x7d0>
    4dc6:	4891      	ldr	r0, [pc, #580]	; (500c <MPSL_IRQ_RADIO_Handler+0xa00>)
    4dc8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    4dcc:	b130      	cbz	r0, 4ddc <MPSL_IRQ_RADIO_Handler+0x7d0>
    4dce:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4dd2:	f110 0b00 	adds.w	fp, r0, #0
    4dd6:	bf18      	it	ne
    4dd8:	f04f 0b02 	movne.w	fp, #2
    4ddc:	2000      	movs	r0, #0
    4dde:	941a      	str	r4, [sp, #104]	; 0x68
    4de0:	4483      	add	fp, r0
    4de2:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4de6:	ebb0 0009 	subs.w	r0, r0, r9
    4dea:	f162 0100 	sbc.w	r1, r2, #0
    4dee:	1e42      	subs	r2, r0, #1
    4df0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4df2:	f141 3eff 	adc.w	lr, r1, #4294967295
    4df6:	1ad3      	subs	r3, r2, r3
    4df8:	455b      	cmp	r3, fp
    4dfa:	db08      	blt.n	4e0e <MPSL_IRQ_RADIO_Handler+0x802>
    4dfc:	f1b9 0f00 	cmp.w	r9, #0
    4e00:	d032      	beq.n	4e68 <MPSL_IRQ_RADIO_Handler+0x85c>
    4e02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4e04:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    4e08:	444b      	add	r3, r9
    4e0a:	9310      	str	r3, [sp, #64]	; 0x40
    4e0c:	e02c      	b.n	4e68 <MPSL_IRQ_RADIO_Handler+0x85c>
    4e0e:	f1b9 0f00 	cmp.w	r9, #0
    4e12:	d005      	beq.n	4e20 <MPSL_IRQ_RADIO_Handler+0x814>
    4e14:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    4e18:	b920      	cbnz	r0, 4e24 <MPSL_IRQ_RADIO_Handler+0x818>
    4e1a:	f002 fbff 	bl	761c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    4e1e:	b108      	cbz	r0, 4e24 <MPSL_IRQ_RADIO_Handler+0x818>
    4e20:	b9af      	cbnz	r7, 4e4e <MPSL_IRQ_RADIO_Handler+0x842>
    4e22:	e00c      	b.n	4e3e <MPSL_IRQ_RADIO_Handler+0x832>
    4e24:	b92f      	cbnz	r7, 4e32 <MPSL_IRQ_RADIO_Handler+0x826>
    4e26:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e2a:	2800      	cmp	r0, #0
    4e2c:	bf18      	it	ne
    4e2e:	f1ab 0b02 	subne.w	fp, fp, #2
    4e32:	f04f 0900 	mov.w	r9, #0
    4e36:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    4e3a:	464e      	mov	r6, r9
    4e3c:	e007      	b.n	4e4e <MPSL_IRQ_RADIO_Handler+0x842>
    4e3e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    4e42:	b120      	cbz	r0, 4e4e <MPSL_IRQ_RADIO_Handler+0x842>
    4e44:	2000      	movs	r0, #0
    4e46:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    4e4a:	f1ab 0b02 	sub.w	fp, fp, #2
    4e4e:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    4e52:	ebb0 0009 	subs.w	r0, r0, r9
    4e56:	f162 0100 	sbc.w	r1, r2, #0
    4e5a:	1e42      	subs	r2, r0, #1
    4e5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4e5e:	f141 3eff 	adc.w	lr, r1, #4294967295
    4e62:	1ad3      	subs	r3, r2, r3
    4e64:	455b      	cmp	r3, fp
    4e66:	db7d      	blt.n	4f64 <MPSL_IRQ_RADIO_Handler+0x958>
    4e68:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4e6a:	b99b      	cbnz	r3, 4e94 <MPSL_IRQ_RADIO_Handler+0x888>
    4e6c:	4b67      	ldr	r3, [pc, #412]	; (500c <MPSL_IRQ_RADIO_Handler+0xa00>)
    4e6e:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    4e72:	ea6f 090c 	mvn.w	r9, ip
    4e76:	ea79 0903 	orns	r9, r9, r3
    4e7a:	d00b      	beq.n	4e94 <MPSL_IRQ_RADIO_Handler+0x888>
    4e7c:	ebb0 0c0c 	subs.w	ip, r0, ip
    4e80:	9816      	ldr	r0, [sp, #88]	; 0x58
    4e82:	eb61 0303 	sbc.w	r3, r1, r3
    4e86:	ebbc 0000 	subs.w	r0, ip, r0
    4e8a:	f173 0000 	sbcs.w	r0, r3, #0
    4e8e:	bf38      	it	cc
    4e90:	2000      	movcc	r0, #0
    4e92:	d300      	bcc.n	4e96 <MPSL_IRQ_RADIO_Handler+0x88a>
    4e94:	2001      	movs	r0, #1
    4e96:	ea3a 0000 	bics.w	r0, sl, r0
    4e9a:	d163      	bne.n	4f64 <MPSL_IRQ_RADIO_Handler+0x958>
    4e9c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    4ea0:	e9cd 0107 	strd	r0, r1, [sp, #28]
    4ea4:	981e      	ldr	r0, [sp, #120]	; 0x78
    4ea6:	4691      	mov	r9, r2
    4ea8:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    4eac:	46f3      	mov	fp, lr
    4eae:	2700      	movs	r7, #0
    4eb0:	f002 fd96 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4eb4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    4eb8:	bf08      	it	eq
    4eba:	200d      	moveq	r0, #13
    4ebc:	d00b      	beq.n	4ed6 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4ebe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    4ec2:	3856      	subs	r0, #86	; 0x56
    4ec4:	bf08      	it	eq
    4ec6:	201c      	moveq	r0, #28
    4ec8:	d005      	beq.n	4ed6 <MPSL_IRQ_RADIO_Handler+0x8ca>
    4eca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    4ece:	389f      	subs	r0, #159	; 0x9f
    4ed0:	bf14      	ite	ne
    4ed2:	4638      	movne	r0, r7
    4ed4:	2032      	moveq	r0, #50	; 0x32
    4ed6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    4eda:	300b      	adds	r0, #11
    4edc:	ebb9 0202 	subs.w	r2, r9, r2
    4ee0:	eb6b 0303 	sbc.w	r3, fp, r3
    4ee4:	1a10      	subs	r0, r2, r0
    4ee6:	f173 0000 	sbcs.w	r0, r3, #0
    4eea:	d22a      	bcs.n	4f42 <MPSL_IRQ_RADIO_Handler+0x936>
    4eec:	9819      	ldr	r0, [sp, #100]	; 0x64
    4eee:	2801      	cmp	r0, #1
    4ef0:	d002      	beq.n	4ef8 <MPSL_IRQ_RADIO_Handler+0x8ec>
    4ef2:	9818      	ldr	r0, [sp, #96]	; 0x60
    4ef4:	b148      	cbz	r0, 4f0a <MPSL_IRQ_RADIO_Handler+0x8fe>
    4ef6:	e017      	b.n	4f28 <MPSL_IRQ_RADIO_Handler+0x91c>
    4ef8:	43e0      	mvns	r0, r4
    4efa:	ea70 0005 	orns	r0, r0, r5
    4efe:	d127      	bne.n	4f50 <MPSL_IRQ_RADIO_Handler+0x944>
    4f00:	f640 01d7 	movw	r1, #2263	; 0x8d7
    4f04:	2070      	movs	r0, #112	; 0x70
    4f06:	f002 ff0b 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4f0a:	43e0      	mvns	r0, r4
    4f0c:	ea70 0005 	orns	r0, r0, r5
    4f10:	d00a      	beq.n	4f28 <MPSL_IRQ_RADIO_Handler+0x91c>
    4f12:	d01d      	beq.n	4f50 <MPSL_IRQ_RADIO_Handler+0x944>
    4f14:	ebb4 0009 	subs.w	r0, r4, r9
    4f18:	eb65 010b 	sbc.w	r1, r5, fp
    4f1c:	2300      	movs	r3, #0
    4f1e:	f1d0 0204 	rsbs	r2, r0, #4
    4f22:	eb73 0201 	sbcs.w	r2, r3, r1
    4f26:	da06      	bge.n	4f36 <MPSL_IRQ_RADIO_Handler+0x92a>
    4f28:	464c      	mov	r4, r9
    4f2a:	465d      	mov	r5, fp
    4f2c:	4620      	mov	r0, r4
    4f2e:	4629      	mov	r1, r5
    4f30:	f001 ff96 	bl	6e60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4f34:	e00c      	b.n	4f50 <MPSL_IRQ_RADIO_Handler+0x944>
    4f36:	2200      	movs	r2, #0
    4f38:	1a10      	subs	r0, r2, r0
    4f3a:	eb72 0001 	sbcs.w	r0, r2, r1
    4f3e:	db11      	blt.n	4f64 <MPSL_IRQ_RADIO_Handler+0x958>
    4f40:	e006      	b.n	4f50 <MPSL_IRQ_RADIO_Handler+0x944>
    4f42:	464c      	mov	r4, r9
    4f44:	465d      	mov	r5, fp
    4f46:	4620      	mov	r0, r4
    4f48:	4629      	mov	r1, r5
    4f4a:	f001 ff89 	bl	6e60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    4f4e:	4657      	mov	r7, sl
    4f50:	43e1      	mvns	r1, r4
    4f52:	ea71 0005 	orns	r0, r1, r5
    4f56:	d071      	beq.n	503c <MPSL_IRQ_RADIO_Handler+0xa30>
    4f58:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4f5c:	f04f 0b00 	mov.w	fp, #0
    4f60:	990e      	ldr	r1, [sp, #56]	; 0x38
    4f62:	e000      	b.n	4f66 <MPSL_IRQ_RADIO_Handler+0x95a>
    4f64:	e06f      	b.n	5046 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f66:	1a0b      	subs	r3, r1, r0
    4f68:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    4f6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4f70:	eb11 010c 	adds.w	r1, r1, ip
    4f74:	1a08      	subs	r0, r1, r0
    4f76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4f7a:	2b01      	cmp	r3, #1
    4f7c:	d363      	bcc.n	5046 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    4f82:	bf98      	it	ls
    4f84:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    4f88:	d85d      	bhi.n	5046 <MPSL_IRQ_RADIO_Handler+0xa3a>
    4f8a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    4f8e:	f004 ff59 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    4f92:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4f94:	4a1b      	ldr	r2, [pc, #108]	; (5004 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4f96:	1a0d      	subs	r5, r1, r0
    4f98:	1aaa      	subs	r2, r5, r2
    4f9a:	f17b 0200 	sbcs.w	r2, fp, #0
    4f9e:	d316      	bcc.n	4fce <MPSL_IRQ_RADIO_Handler+0x9c2>
    4fa0:	4b18      	ldr	r3, [pc, #96]	; (5004 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    4fa2:	1a42      	subs	r2, r0, r1
    4fa4:	1ad3      	subs	r3, r2, r3
    4fa6:	f17b 0300 	sbcs.w	r3, fp, #0
    4faa:	d310      	bcc.n	4fce <MPSL_IRQ_RADIO_Handler+0x9c2>
    4fac:	4b14      	ldr	r3, [pc, #80]	; (5000 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    4fae:	42ab      	cmp	r3, r5
    4fb0:	bf3e      	ittt	cc
    4fb2:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    4fb6:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    4fba:	1845      	addcc	r5, r0, r1
    4fbc:	d307      	bcc.n	4fce <MPSL_IRQ_RADIO_Handler+0x9c2>
    4fbe:	4293      	cmp	r3, r2
    4fc0:	d245      	bcs.n	504e <MPSL_IRQ_RADIO_Handler+0xa42>
    4fc2:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    4fc6:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    4fca:	4408      	add	r0, r1
    4fcc:	4245      	negs	r5, r0
    4fce:	f8df 903c 	ldr.w	r9, [pc, #60]	; 500c <MPSL_IRQ_RADIO_Handler+0xa00>
    4fd2:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    4fd6:	b378      	cbz	r0, 5038 <MPSL_IRQ_RADIO_Handler+0xa2c>
    4fd8:	981e      	ldr	r0, [sp, #120]	; 0x78
    4fda:	2801      	cmp	r0, #1
    4fdc:	d005      	beq.n	4fea <MPSL_IRQ_RADIO_Handler+0x9de>
    4fde:	2002      	movs	r0, #2
    4fe0:	f002 f9ca 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4fe4:	2001      	movs	r0, #1
    4fe6:	f002 f9c7 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    4fea:	45b0      	cmp	r8, r6
    4fec:	d240      	bcs.n	5070 <MPSL_IRQ_RADIO_Handler+0xa64>
    4fee:	eba5 0106 	sub.w	r1, r5, r6
    4ff2:	e011      	b.n	5018 <MPSL_IRQ_RADIO_Handler+0xa0c>
    4ff4:	40000508 	.word	0x40000508
    4ff8:	20000120 	.word	0x20000120
    4ffc:	200008c0 	.word	0x200008c0
    5000:	1e847fff 	.word	0x1e847fff
    5004:	0f424000 	.word	0x0f424000
    5008:	20000cc0 	.word	0x20000cc0
    500c:	20000d40 	.word	0x20000d40
    5010:	f0bdc000 	.word	0xf0bdc000
    5014:	1e848000 	.word	0x1e848000
    5018:	f04f 0002 	mov.w	r0, #2
    501c:	f002 f8f2 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5020:	b398      	cbz	r0, 508a <MPSL_IRQ_RADIO_Handler+0xa7e>
    5022:	f1b8 0f00 	cmp.w	r8, #0
    5026:	bf1c      	itt	ne
    5028:	eba5 0108 	subne.w	r1, r5, r8
    502c:	2001      	movne	r0, #1
    502e:	d035      	beq.n	509c <MPSL_IRQ_RADIO_Handler+0xa90>
    5030:	f002 f8e8 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5034:	b348      	cbz	r0, 508a <MPSL_IRQ_RADIO_Handler+0xa7e>
    5036:	e031      	b.n	509c <MPSL_IRQ_RADIO_Handler+0xa90>
    5038:	e00e      	b.n	5058 <MPSL_IRQ_RADIO_Handler+0xa4c>
    503a:	e7ff      	b.n	503c <MPSL_IRQ_RADIO_Handler+0xa30>
    503c:	f640 2103 	movw	r1, #2563	; 0xa03
    5040:	2070      	movs	r0, #112	; 0x70
    5042:	f002 fe6d 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5046:	b020      	add	sp, #128	; 0x80
    5048:	2000      	movs	r0, #0
    504a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    504e:	f640 21d7 	movw	r1, #2775	; 0xad7
    5052:	2070      	movs	r0, #112	; 0x70
    5054:	f002 fe64 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5058:	45b0      	cmp	r8, r6
    505a:	bf34      	ite	cc
    505c:	4630      	movcc	r0, r6
    505e:	4640      	movcs	r0, r8
    5060:	301e      	adds	r0, #30
    5062:	42a8      	cmp	r0, r5
    5064:	dbb8      	blt.n	4fd8 <MPSL_IRQ_RADIO_Handler+0x9cc>
    5066:	f640 2117 	movw	r1, #2583	; 0xa17
    506a:	2070      	movs	r0, #112	; 0x70
    506c:	f002 fe58 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5070:	d90c      	bls.n	508c <MPSL_IRQ_RADIO_Handler+0xa80>
    5072:	eba5 0108 	sub.w	r1, r5, r8
    5076:	2001      	movs	r0, #1
    5078:	f002 f8c4 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    507c:	b128      	cbz	r0, 508a <MPSL_IRQ_RADIO_Handler+0xa7e>
    507e:	2e00      	cmp	r6, #0
    5080:	bf1c      	itt	ne
    5082:	1ba9      	subne	r1, r5, r6
    5084:	2002      	movne	r0, #2
    5086:	d009      	beq.n	509c <MPSL_IRQ_RADIO_Handler+0xa90>
    5088:	e7d2      	b.n	5030 <MPSL_IRQ_RADIO_Handler+0xa24>
    508a:	e034      	b.n	50f6 <MPSL_IRQ_RADIO_Handler+0xaea>
    508c:	ea56 0008 	orrs.w	r0, r6, r8
    5090:	d004      	beq.n	509c <MPSL_IRQ_RADIO_Handler+0xa90>
    5092:	f640 113a 	movw	r1, #2362	; 0x93a
    5096:	2070      	movs	r0, #112	; 0x70
    5098:	f002 fe42 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    509c:	4629      	mov	r1, r5
    509e:	2000      	movs	r0, #0
    50a0:	f002 f8b0 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    50a4:	b338      	cbz	r0, 50f6 <MPSL_IRQ_RADIO_Handler+0xaea>
    50a6:	2601      	movs	r6, #1
    50a8:	f1ba 0f00 	cmp.w	sl, #0
    50ac:	bf04      	itt	eq
    50ae:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    50b2:	2800      	cmpeq	r0, #0
    50b4:	d000      	beq.n	50b8 <MPSL_IRQ_RADIO_Handler+0xaac>
    50b6:	b347      	cbz	r7, 510a <MPSL_IRQ_RADIO_Handler+0xafe>
    50b8:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    50bc:	ea6f 0101 	mvn.w	r1, r1
    50c0:	ea71 0000 	orns	r0, r1, r0
    50c4:	d006      	beq.n	50d4 <MPSL_IRQ_RADIO_Handler+0xac8>
    50c6:	f002 fc91 	bl	79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    50ca:	f04f 30ff 	mov.w	r0, #4294967295
    50ce:	4601      	mov	r1, r0
    50d0:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    50d4:	b1ff      	cbz	r7, 5116 <MPSL_IRQ_RADIO_Handler+0xb0a>
    50d6:	9816      	ldr	r0, [sp, #88]	; 0x58
    50d8:	1a20      	subs	r0, r4, r0
    50da:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    50de:	f04f 0005 	mov.w	r0, #5
    50e2:	f002 f88f 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    50e6:	b370      	cbz	r0, 5146 <MPSL_IRQ_RADIO_Handler+0xb3a>
    50e8:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    50ec:	2800      	cmp	r0, #0
    50ee:	bf08      	it	eq
    50f0:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    50f4:	e017      	b.n	5126 <MPSL_IRQ_RADIO_Handler+0xb1a>
    50f6:	2002      	movs	r0, #2
    50f8:	f002 f93e 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    50fc:	2001      	movs	r0, #1
    50fe:	f002 f93b 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5102:	b020      	add	sp, #128	; 0x80
    5104:	2000      	movs	r0, #0
    5106:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    510a:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    510e:	43c0      	mvns	r0, r0
    5110:	ea70 0001 	orns	r0, r0, r1
    5114:	d012      	beq.n	513c <MPSL_IRQ_RADIO_Handler+0xb30>
    5116:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    511a:	b120      	cbz	r0, 5126 <MPSL_IRQ_RADIO_Handler+0xb1a>
    511c:	2005      	movs	r0, #5
    511e:	f002 f92b 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5122:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    5126:	eba5 0008 	sub.w	r0, r5, r8
    512a:	f1a0 0119 	sub.w	r1, r0, #25
    512e:	2900      	cmp	r1, #0
    5130:	dc0f      	bgt.n	5152 <MPSL_IRQ_RADIO_Handler+0xb46>
    5132:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    5136:	2070      	movs	r0, #112	; 0x70
    5138:	f002 fdf2 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    513c:	f002 fc72 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5140:	f002 f83e 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5144:	e7c4      	b.n	50d0 <MPSL_IRQ_RADIO_Handler+0xac4>
    5146:	e7ff      	b.n	5148 <MPSL_IRQ_RADIO_Handler+0xb3c>
    5148:	f240 21e6 	movw	r1, #742	; 0x2e6
    514c:	2070      	movs	r0, #112	; 0x70
    514e:	f002 fde7 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5152:	2003      	movs	r0, #3
    5154:	f002 f856 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    5158:	b338      	cbz	r0, 51aa <MPSL_IRQ_RADIO_Handler+0xb9e>
    515a:	4816      	ldr	r0, [pc, #88]	; (51b4 <MPSL_IRQ_RADIO_Handler+0xba8>)
    515c:	6880      	ldr	r0, [r0, #8]
    515e:	f8c0 b000 	str.w	fp, [r0]
    5162:	4815      	ldr	r0, [pc, #84]	; (51b8 <MPSL_IRQ_RADIO_Handler+0xbac>)
    5164:	f8c0 b000 	str.w	fp, [r0]
    5168:	ac0c      	add	r4, sp, #48	; 0x30
    516a:	4814      	ldr	r0, [pc, #80]	; (51bc <MPSL_IRQ_RADIO_Handler+0xbb0>)
    516c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    5170:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    5174:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    5178:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    517c:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    5180:	ac10      	add	r4, sp, #64	; 0x40
    5182:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    5186:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    518a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    518e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    5192:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    5196:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    519a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    519e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    51a2:	b020      	add	sp, #128	; 0x80
    51a4:	2001      	movs	r0, #1
    51a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    51aa:	f640 2148 	movw	r1, #2632	; 0xa48
    51ae:	2070      	movs	r0, #112	; 0x70
    51b0:	f002 fdb6 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    51b4:	20000120 	.word	0x20000120
    51b8:	40000508 	.word	0x40000508
    51bc:	20000cc0 	.word	0x20000cc0
    51c0:	b570      	push	{r4, r5, r6, lr}
    51c2:	4d1d      	ldr	r5, [pc, #116]	; (5238 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    51c4:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    51c8:	2820      	cmp	r0, #32
    51ca:	bf18      	it	ne
    51cc:	bd70      	popne	{r4, r5, r6, pc}
    51ce:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    51d2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    51d6:	4428      	add	r0, r5
    51d8:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    51dc:	2c20      	cmp	r4, #32
    51de:	d026      	beq.n	522e <MPSL_IRQ_RADIO_Handler+0xc22>
    51e0:	4b16      	ldr	r3, [pc, #88]	; (523c <MPSL_IRQ_RADIO_Handler+0xc30>)
    51e2:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    51e6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    51ea:	7849      	ldrb	r1, [r1, #1]
    51ec:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    51f0:	20ff      	movs	r0, #255	; 0xff
    51f2:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    51f6:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    51fa:	4621      	mov	r1, r4
    51fc:	2002      	movs	r0, #2
    51fe:	f000 f88b 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5202:	2000      	movs	r0, #0
    5204:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    5208:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    520c:	480c      	ldr	r0, [pc, #48]	; (5240 <MPSL_IRQ_RADIO_Handler+0xc34>)
    520e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    5212:	7e00      	ldrb	r0, [r0, #24]
    5214:	2800      	cmp	r0, #0
    5216:	bf08      	it	eq
    5218:	f002 feea 	bleq	7ff0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    521c:	2000      	movs	r0, #0
    521e:	4909      	ldr	r1, [pc, #36]	; (5244 <MPSL_IRQ_RADIO_Handler+0xc38>)
    5220:	6849      	ldr	r1, [r1, #4]
    5222:	2900      	cmp	r1, #0
    5224:	bf08      	it	eq
    5226:	bd70      	popeq	{r4, r5, r6, pc}
    5228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    522c:	4708      	bx	r1
    522e:	f240 311d 	movw	r1, #797	; 0x31d
    5232:	2070      	movs	r0, #112	; 0x70
    5234:	f002 fd74 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5238:	20000d40 	.word	0x20000d40
    523c:	20000cc0 	.word	0x20000cc0
    5240:	200008c0 	.word	0x200008c0
    5244:	20000120 	.word	0x20000120
    5248:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    524c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 5308 <MPSL_IRQ_RADIO_Handler+0xcfc>
    5250:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    5254:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    5258:	4440      	add	r0, r8
    525a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    525e:	2c20      	cmp	r4, #32
    5260:	bf08      	it	eq
    5262:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5266:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 530c <MPSL_IRQ_RADIO_Handler+0xd00>
    526a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5310 <MPSL_IRQ_RADIO_Handler+0xd04>
    526e:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    5272:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    5276:	2607      	movs	r6, #7
    5278:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    527c:	2801      	cmp	r0, #1
    527e:	d00e      	beq.n	529e <MPSL_IRQ_RADIO_Handler+0xc92>
    5280:	2804      	cmp	r0, #4
    5282:	bf08      	it	eq
    5284:	2602      	moveq	r6, #2
    5286:	d00a      	beq.n	529e <MPSL_IRQ_RADIO_Handler+0xc92>
    5288:	2805      	cmp	r0, #5
    528a:	bf0c      	ite	eq
    528c:	2603      	moveq	r6, #3
    528e:	2806      	cmpne	r0, #6
    5290:	d005      	beq.n	529e <MPSL_IRQ_RADIO_Handler+0xc92>
    5292:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    5296:	f04f 0070 	mov.w	r0, #112	; 0x70
    529a:	f002 fd41 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    529e:	f1bb 0f00 	cmp.w	fp, #0
    52a2:	bf18      	it	ne
    52a4:	f3af 8000 	nopne.w
    52a8:	f3ef 8010 	mrs	r0, PRIMASK
    52ac:	b672      	cpsid	i
    52ae:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    52b2:	784a      	ldrb	r2, [r1, #1]
    52b4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    52b8:	4441      	add	r1, r8
    52ba:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    52be:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    52c2:	42a2      	cmp	r2, r4
    52c4:	bf04      	itt	eq
    52c6:	2220      	moveq	r2, #32
    52c8:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    52cc:	b1a8      	cbz	r0, 52fa <MPSL_IRQ_RADIO_Handler+0xcee>
    52ce:	462a      	mov	r2, r5
    52d0:	4621      	mov	r1, r4
    52d2:	2001      	movs	r0, #1
    52d4:	f000 f820 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    52d8:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    52dc:	e9d1 2000 	ldrd	r2, r0, [r1]
    52e0:	4631      	mov	r1, r6
    52e2:	4790      	blx	r2
    52e4:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    52e8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    52ec:	4440      	add	r0, r8
    52ee:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    52f2:	2c20      	cmp	r4, #32
    52f4:	d1bd      	bne.n	5272 <MPSL_IRQ_RADIO_Handler+0xc66>
    52f6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    52fa:	4806      	ldr	r0, [pc, #24]	; (5314 <MPSL_IRQ_RADIO_Handler+0xd08>)
    52fc:	2800      	cmp	r0, #0
    52fe:	bf18      	it	ne
    5300:	f3af 8000 	nopne.w
    5304:	b662      	cpsie	i
    5306:	e7e2      	b.n	52ce <MPSL_IRQ_RADIO_Handler+0xcc2>
    5308:	20000d40 	.word	0x20000d40
    530c:	00000000 	.word	0x00000000
    5310:	20000cc0 	.word	0x20000cc0
    5314:	00000000 	.word	0x00000000
    5318:	f8df c058 	ldr.w	ip, [pc, #88]	; 5374 <MPSL_IRQ_RADIO_Handler+0xd68>
    531c:	b510      	push	{r4, lr}
    531e:	2300      	movs	r3, #0
    5320:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    5324:	2807      	cmp	r0, #7
    5326:	d21f      	bcs.n	5368 <MPSL_IRQ_RADIO_Handler+0xd5c>
    5328:	e8df f000 	tbb	[pc, r0]
    532c:	05050505 	.word	0x05050505
    5330:	00040404 	.word	0x00040404
    5334:	2301      	movs	r3, #1
    5336:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    533a:	2b00      	cmp	r3, #0
    533c:	bf08      	it	eq
    533e:	bd10      	popeq	{r4, pc}
    5340:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5344:	480c      	ldr	r0, [pc, #48]	; (5378 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    5346:	4402      	add	r2, r0
    5348:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    534c:	2820      	cmp	r0, #32
    534e:	bf0e      	itee	eq
    5350:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    5354:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    5358:	7041      	strbne	r1, [r0, #1]
    535a:	2020      	movs	r0, #32
    535c:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    5360:	7058      	strb	r0, [r3, #1]
    5362:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    5366:	bd10      	pop	{r4, pc}
    5368:	f44f 7117 	mov.w	r1, #604	; 0x25c
    536c:	2070      	movs	r0, #112	; 0x70
    536e:	f002 fcd7 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5372:	0000      	.short	0x0000
    5374:	20000cc0 	.word	0x20000cc0
    5378:	20000d40 	.word	0x20000d40
    537c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5380:	460f      	mov	r7, r1
    5382:	4680      	mov	r8, r0
    5384:	f8df b154 	ldr.w	fp, [pc, #340]	; 54dc <MPSL_IRQ_RADIO_Handler+0xed0>
    5388:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    538c:	4458      	add	r0, fp
    538e:	f1b8 0f01 	cmp.w	r8, #1
    5392:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    5396:	4625      	mov	r5, r4
    5398:	bf18      	it	ne
    539a:	f1b8 0f02 	cmpne.w	r8, #2
    539e:	d005      	beq.n	53ac <MPSL_IRQ_RADIO_Handler+0xda0>
    53a0:	f640 217e 	movw	r1, #2686	; 0xa7e
    53a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    53a8:	f002 fcba 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    53ac:	2d20      	cmp	r5, #32
    53ae:	d041      	beq.n	5434 <MPSL_IRQ_RADIO_Handler+0xe28>
    53b0:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    53b4:	2600      	movs	r6, #0
    53b6:	2800      	cmp	r0, #0
    53b8:	bf08      	it	eq
    53ba:	2602      	moveq	r6, #2
    53bc:	f001 fd4a 	bl	6e54 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    53c0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 54e0 <MPSL_IRQ_RADIO_Handler+0xed4>
    53c4:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    53c8:	6899      	ldr	r1, [r3, #8]
    53ca:	691b      	ldr	r3, [r3, #16]
    53cc:	1a0a      	subs	r2, r1, r0
    53ce:	18c9      	adds	r1, r1, r3
    53d0:	1a09      	subs	r1, r1, r0
    53d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    53d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    53da:	4296      	cmp	r6, r2
    53dc:	bf99      	ittee	ls
    53de:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    53e2:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    53e6:	4a3f      	ldrhi	r2, [pc, #252]	; (54e4 <MPSL_IRQ_RADIO_Handler+0xed8>)
    53e8:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    53ec:	d920      	bls.n	5430 <MPSL_IRQ_RADIO_Handler+0xe24>
    53ee:	4622      	mov	r2, r4
    53f0:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    53f4:	784c      	ldrb	r4, [r1, #1]
    53f6:	2c20      	cmp	r4, #32
    53f8:	d012      	beq.n	5420 <MPSL_IRQ_RADIO_Handler+0xe14>
    53fa:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    53fe:	6899      	ldr	r1, [r3, #8]
    5400:	691b      	ldr	r3, [r3, #16]
    5402:	ebb1 0c00 	subs.w	ip, r1, r0
    5406:	18c9      	adds	r1, r1, r3
    5408:	1a09      	subs	r1, r1, r0
    540a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    540e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5412:	4566      	cmp	r6, ip
    5414:	bf9c      	itt	ls
    5416:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    541a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    541e:	d8e6      	bhi.n	53ee <MPSL_IRQ_RADIO_Handler+0xde2>
    5420:	2a20      	cmp	r2, #32
    5422:	d005      	beq.n	5430 <MPSL_IRQ_RADIO_Handler+0xe24>
    5424:	463b      	mov	r3, r7
    5426:	2120      	movs	r1, #32
    5428:	2004      	movs	r0, #4
    542a:	f7ff f90d 	bl	4648 <MPSL_IRQ_RADIO_Handler+0x3c>
    542e:	4604      	mov	r4, r0
    5430:	42ac      	cmp	r4, r5
    5432:	d113      	bne.n	545c <MPSL_IRQ_RADIO_Handler+0xe50>
    5434:	482c      	ldr	r0, [pc, #176]	; (54e8 <MPSL_IRQ_RADIO_Handler+0xedc>)
    5436:	2800      	cmp	r0, #0
    5438:	bf18      	it	ne
    543a:	f3af 8000 	nopne.w
    543e:	f001 febf 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5442:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    5446:	2a20      	cmp	r2, #32
    5448:	d00b      	beq.n	5462 <MPSL_IRQ_RADIO_Handler+0xe56>
    544a:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    544e:	1c84      	adds	r4, r0, #2
    5450:	f141 0c00 	adc.w	ip, r1, #0
    5454:	1b1b      	subs	r3, r3, r4
    5456:	eb72 020c 	sbcs.w	r2, r2, ip
    545a:	d202      	bcs.n	5462 <MPSL_IRQ_RADIO_Handler+0xe56>
    545c:	2000      	movs	r0, #0
    545e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5462:	2d20      	cmp	r5, #32
    5464:	d013      	beq.n	548e <MPSL_IRQ_RADIO_Handler+0xe82>
    5466:	462b      	mov	r3, r5
    5468:	4642      	mov	r2, r8
    546a:	f7ff fbaf 	bl	4bcc <MPSL_IRQ_RADIO_Handler+0x5c0>
    546e:	2800      	cmp	r0, #0
    5470:	bf1e      	ittt	ne
    5472:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    5476:	2002      	movne	r0, #2
    5478:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    547c:	463b      	mov	r3, r7
    547e:	462a      	mov	r2, r5
    5480:	2120      	movs	r1, #32
    5482:	2004      	movs	r0, #4
    5484:	f7ff f8e0 	bl	4648 <MPSL_IRQ_RADIO_Handler+0x3c>
    5488:	2000      	movs	r0, #0
    548a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    548e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    5492:	43c0      	mvns	r0, r0
    5494:	ea70 0001 	orns	r0, r0, r1
    5498:	d005      	beq.n	54a6 <MPSL_IRQ_RADIO_Handler+0xe9a>
    549a:	f002 faa7 	bl	79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    549e:	f04f 30ff 	mov.w	r0, #4294967295
    54a2:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    54a6:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    54aa:	b128      	cbz	r0, 54b8 <MPSL_IRQ_RADIO_Handler+0xeac>
    54ac:	2005      	movs	r0, #5
    54ae:	f001 ff63 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    54b2:	2000      	movs	r0, #0
    54b4:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    54b8:	2004      	movs	r0, #4
    54ba:	f001 ff5d 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    54be:	f001 ffc3 	bl	7448 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    54c2:	490a      	ldr	r1, [pc, #40]	; (54ec <MPSL_IRQ_RADIO_Handler+0xee0>)
    54c4:	2020      	movs	r0, #32
    54c6:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    54ca:	6889      	ldr	r1, [r1, #8]
    54cc:	2000      	movs	r0, #0
    54ce:	6008      	str	r0, [r1, #0]
    54d0:	4907      	ldr	r1, [pc, #28]	; (54f0 <MPSL_IRQ_RADIO_Handler+0xee4>)
    54d2:	6008      	str	r0, [r1, #0]
    54d4:	2001      	movs	r0, #1
    54d6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    54da:	0000      	.short	0x0000
    54dc:	20000d40 	.word	0x20000d40
    54e0:	200008c0 	.word	0x200008c0
    54e4:	20000cc0 	.word	0x20000cc0
    54e8:	00000000 	.word	0x00000000
    54ec:	20000120 	.word	0x20000120
    54f0:	40000508 	.word	0x40000508

000054f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    54f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54f8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 56c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    54fc:	4606      	mov	r6, r0
    54fe:	b08f      	sub	sp, #60	; 0x3c
    5500:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    5504:	468a      	mov	sl, r1
    5506:	2820      	cmp	r0, #32
    5508:	d061      	beq.n	55ce <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    550a:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    550e:	f10b 0408 	add.w	r4, fp, #8
    5512:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    5516:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    551a:	2120      	movs	r1, #32
    551c:	f88d 1018 	strb.w	r1, [sp, #24]
    5520:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    5524:	f8db 2008 	ldr.w	r2, [fp, #8]
    5528:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    552c:	4459      	add	r1, fp
    552e:	2700      	movs	r7, #0
    5530:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    5534:	f8db 1010 	ldr.w	r1, [fp, #16]
    5538:	1851      	adds	r1, r2, r1
    553a:	910a      	str	r1, [sp, #40]	; 0x28
    553c:	f8db 0000 	ldr.w	r0, [fp]
    5540:	aa09      	add	r2, sp, #36	; 0x24
    5542:	4430      	add	r0, r6
    5544:	a907      	add	r1, sp, #28
    5546:	f001 fb5b 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    554a:	f8d9 0010 	ldr.w	r0, [r9, #16]
    554e:	9907      	ldr	r1, [sp, #28]
    5550:	f8d9 2008 	ldr.w	r2, [r9, #8]
    5554:	1840      	adds	r0, r0, r1
    5556:	1810      	adds	r0, r2, r0
    5558:	2e67      	cmp	r6, #103	; 0x67
    555a:	d33d      	bcc.n	55d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    555c:	4959      	ldr	r1, [pc, #356]	; (56c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    555e:	2200      	movs	r2, #0
    5560:	1b89      	subs	r1, r1, r6
    5562:	eb72 0107 	sbcs.w	r1, r2, r7
    5566:	d337      	bcc.n	55d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    5568:	6821      	ldr	r1, [r4, #0]
    556a:	4694      	mov	ip, r2
    556c:	1a40      	subs	r0, r0, r1
    556e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    5572:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    5576:	eb7c 010c 	sbcs.w	r1, ip, ip
    557a:	d32d      	bcc.n	55d8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    557c:	60a0      	str	r0, [r4, #8]
    557e:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    5582:	f884 a010 	strb.w	sl, [r4, #16]
    5586:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    558a:	f10d 0b18 	add.w	fp, sp, #24
    558e:	2d20      	cmp	r5, #32
    5590:	d055      	beq.n	563e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5592:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    5596:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    559a:	9001      	str	r0, [sp, #4]
    559c:	484a      	ldr	r0, [pc, #296]	; (56c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    559e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    55a2:	f8d4 a000 	ldr.w	sl, [r4]
    55a6:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    55aa:	f108 0008 	add.w	r0, r8, #8
    55ae:	eb1a 0201 	adds.w	r2, sl, r1
    55b2:	eb43 0107 	adc.w	r1, r3, r7
    55b6:	e9d0 9300 	ldrd	r9, r3, [r0]
    55ba:	ebb9 0202 	subs.w	r2, r9, r2
    55be:	eb73 0101 	sbcs.w	r1, r3, r1
    55c2:	d325      	bcc.n	5610 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    55c4:	89c0      	ldrh	r0, [r0, #14]
    55c6:	b398      	cbz	r0, 5630 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    55c8:	89e0      	ldrh	r0, [r4, #14]
    55ca:	b148      	cbz	r0, 55e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    55cc:	e037      	b.n	563e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    55ce:	f640 3135 	movw	r1, #2869	; 0xb35
    55d2:	2070      	movs	r0, #112	; 0x70
    55d4:	f002 fba4 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    55d8:	b00f      	add	sp, #60	; 0x3c
    55da:	2001      	movs	r0, #1
    55dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55e0:	f002 f9fe 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    55e4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    55e8:	bf08      	it	eq
    55ea:	200d      	moveq	r0, #13
    55ec:	d00b      	beq.n	5606 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    55ee:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    55f2:	3856      	subs	r0, #86	; 0x56
    55f4:	bf08      	it	eq
    55f6:	201c      	moveq	r0, #28
    55f8:	d005      	beq.n	5606 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    55fa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    55fe:	389f      	subs	r0, #159	; 0x9f
    5600:	bf14      	ite	ne
    5602:	4638      	movne	r0, r7
    5604:	2032      	moveq	r0, #50	; 0x32
    5606:	1c41      	adds	r1, r0, #1
    5608:	ebb9 000a 	subs.w	r0, r9, sl
    560c:	4288      	cmp	r0, r1
    560e:	da16      	bge.n	563e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5610:	f88b 5000 	strb.w	r5, [fp]
    5614:	f898 0018 	ldrb.w	r0, [r8, #24]
    5618:	7c21      	ldrb	r1, [r4, #16]
    561a:	4281      	cmp	r1, r0
    561c:	d309      	bcc.n	5632 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    561e:	6821      	ldr	r1, [r4, #0]
    5620:	980a      	ldr	r0, [sp, #40]	; 0x28
    5622:	1a40      	subs	r0, r0, r1
    5624:	60a0      	str	r0, [r4, #8]
    5626:	b00f      	add	sp, #60	; 0x3c
    5628:	f04f 0002 	mov.w	r0, #2
    562c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5630:	e005      	b.n	563e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    5632:	9801      	ldr	r0, [sp, #4]
    5634:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    5638:	7845      	ldrb	r5, [r0, #1]
    563a:	2d20      	cmp	r5, #32
    563c:	d1ae      	bne.n	559c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    563e:	2005      	movs	r0, #5
    5640:	f001 fe9a 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    5644:	4d1e      	ldr	r5, [pc, #120]	; (56c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    5646:	f04f 30ff 	mov.w	r0, #4294967295
    564a:	6068      	str	r0, [r5, #4]
    564c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    5650:	f89d 2018 	ldrb.w	r2, [sp, #24]
    5654:	2120      	movs	r1, #32
    5656:	2a20      	cmp	r2, #32
    5658:	d003      	beq.n	5662 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    565a:	2005      	movs	r0, #5
    565c:	f7fe fff4 	bl	4648 <MPSL_IRQ_RADIO_Handler+0x3c>
    5660:	e004      	b.n	566c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    5662:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5666:	4428      	add	r0, r5
    5668:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    566c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    5670:	4916      	ldr	r1, [pc, #88]	; (56cc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    5672:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    5676:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    567a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    567e:	7048      	strb	r0, [r1, #1]
    5680:	6828      	ldr	r0, [r5, #0]
    5682:	4430      	add	r0, r6
    5684:	6028      	str	r0, [r5, #0]
    5686:	20ff      	movs	r0, #255	; 0xff
    5688:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    568c:	7e68      	ldrb	r0, [r5, #25]
    568e:	2801      	cmp	r0, #1
    5690:	d10a      	bne.n	56a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    5692:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    5696:	6823      	ldr	r3, [r4, #0]
    5698:	1818      	adds	r0, r3, r0
    569a:	f142 0100 	adc.w	r1, r2, #0
    569e:	1e40      	subs	r0, r0, #1
    56a0:	f141 31ff 	adc.w	r1, r1, #4294967295
    56a4:	f001 fc8a 	bl	6fbc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    56a8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    56ac:	2820      	cmp	r0, #32
    56ae:	d003      	beq.n	56b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    56b0:	4807      	ldr	r0, [pc, #28]	; (56d0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    56b2:	7840      	ldrb	r0, [r0, #1]
    56b4:	f002 fc06 	bl	7ec4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    56b8:	b00f      	add	sp, #60	; 0x3c
    56ba:	2000      	movs	r0, #0
    56bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56c0:	20000d40 	.word	0x20000d40
    56c4:	0f424000 	.word	0x0f424000
    56c8:	200008c0 	.word	0x200008c0
    56cc:	20000cc0 	.word	0x20000cc0
    56d0:	20000120 	.word	0x20000120

000056d4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    56d4:	b570      	push	{r4, r5, r6, lr}
    56d6:	4a23      	ldr	r2, [pc, #140]	; (5764 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    56d8:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    56dc:	2920      	cmp	r1, #32
    56de:	d039      	beq.n	5754 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    56e0:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    56e4:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    56e8:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    56ec:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    56f0:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    56f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    56f8:	4411      	add	r1, r2
    56fa:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    56fe:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    5702:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    5706:	2920      	cmp	r1, #32
    5708:	d029      	beq.n	575e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    570a:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    570e:	7e2d      	ldrb	r5, [r5, #24]
    5710:	42a8      	cmp	r0, r5
    5712:	bf3c      	itt	cc
    5714:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    5718:	7849      	ldrbcc	r1, [r1, #1]
    571a:	d3f4      	bcc.n	5706 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    571c:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    5720:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    5724:	f8dc 5008 	ldr.w	r5, [ip, #8]
    5728:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    572c:	6814      	ldr	r4, [r2, #0]
    572e:	1828      	adds	r0, r5, r0
    5730:	f146 0200 	adc.w	r2, r6, #0
    5734:	ebb1 0c00 	subs.w	ip, r1, r0
    5738:	eb73 0202 	sbcs.w	r2, r3, r2
    573c:	d308      	bcc.n	5750 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    573e:	1a08      	subs	r0, r1, r0
    5740:	f004 fb80 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5744:	f104 0167 	add.w	r1, r4, #103	; 0x67
    5748:	4281      	cmp	r1, r0
    574a:	bf9c      	itt	ls
    574c:	1b00      	subls	r0, r0, r4
    574e:	bd70      	popls	{r4, r5, r6, pc}
    5750:	2000      	movs	r0, #0
    5752:	bd70      	pop	{r4, r5, r6, pc}
    5754:	f640 3108 	movw	r1, #2824	; 0xb08
    5758:	2070      	movs	r0, #112	; 0x70
    575a:	f002 fae1 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    575e:	f04f 30ff 	mov.w	r0, #4294967295
    5762:	bd70      	pop	{r4, r5, r6, pc}
    5764:	20000d40 	.word	0x20000d40

00005768 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    5768:	490a      	ldr	r1, [pc, #40]	; (5794 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    576a:	b510      	push	{r4, lr}
    576c:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    5770:	f100 0408 	add.w	r4, r0, #8
    5774:	e9d4 0100 	ldrd	r0, r1, [r4]
    5778:	f001 f9c4 	bl	6b04 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    577c:	89e3      	ldrh	r3, [r4, #14]
    577e:	2200      	movs	r2, #0
    5780:	18c3      	adds	r3, r0, r3
    5782:	7b20      	ldrb	r0, [r4, #12]
    5784:	4151      	adcs	r1, r2
    5786:	1818      	adds	r0, r3, r0
    5788:	4151      	adcs	r1, r2
    578a:	1c40      	adds	r0, r0, #1
    578c:	f141 0100 	adc.w	r1, r1, #0
    5790:	bd10      	pop	{r4, pc}
    5792:	0000      	.short	0x0000
    5794:	200008c0 	.word	0x200008c0

00005798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    5798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    579a:	4d6f      	ldr	r5, [pc, #444]	; (5958 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    579c:	2600      	movs	r6, #0
    579e:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    57a2:	2701      	movs	r7, #1
    57a4:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    57a8:	4b6c      	ldr	r3, [pc, #432]	; (595c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    57aa:	2808      	cmp	r0, #8
    57ac:	d273      	bcs.n	5896 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    57ae:	e8df f000 	tbb	[pc, r0]
    57b2:	7804      	.short	0x7804
    57b4:	47ceb3a0 	.word	0x47ceb3a0
    57b8:	bdb8      	.short	0xbdb8
    57ba:	43c8      	mvns	r0, r1
    57bc:	ea70 0002 	orns	r0, r0, r2
    57c0:	d105      	bne.n	57ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    57c2:	f002 f92f 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    57c6:	f001 fcfb 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    57ca:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    57ce:	8ae0      	ldrh	r0, [r4, #22]
    57d0:	b110      	cbz	r0, 57d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    57d2:	f002 fa2d 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    57d6:	b180      	cbz	r0, 57fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    57d8:	f7ff fcf2 	bl	51c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    57dc:	20ff      	movs	r0, #255	; 0xff
    57de:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    57e2:	6861      	ldr	r1, [r4, #4]
    57e4:	f1b1 3fff 	cmp.w	r1, #4294967295
    57e8:	d003      	beq.n	57f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    57ea:	2005      	movs	r0, #5
    57ec:	f001 fd0a 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    57f0:	b140      	cbz	r0, 5804 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    57f2:	7e60      	ldrb	r0, [r4, #25]
    57f4:	2801      	cmp	r0, #1
    57f6:	d114      	bne.n	5822 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    57f8:	e009      	b.n	580e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    57fa:	f640 012c 	movw	r1, #2092	; 0x82c
    57fe:	2070      	movs	r0, #112	; 0x70
    5800:	f002 fa8e 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5804:	f640 0131 	movw	r1, #2097	; 0x831
    5808:	2070      	movs	r0, #112	; 0x70
    580a:	f002 fa89 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    580e:	68a2      	ldr	r2, [r4, #8]
    5810:	6920      	ldr	r0, [r4, #16]
    5812:	68e1      	ldr	r1, [r4, #12]
    5814:	1810      	adds	r0, r2, r0
    5816:	4171      	adcs	r1, r6
    5818:	1e40      	subs	r0, r0, #1
    581a:	f141 31ff 	adc.w	r1, r1, #4294967295
    581e:	f001 fbcd 	bl	6fbc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    5822:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5826:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    582a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    582e:	6840      	ldr	r0, [r0, #4]
    5830:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5834:	680a      	ldr	r2, [r1, #0]
    5836:	b001      	add	sp, #4
    5838:	2101      	movs	r1, #1
    583a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    583e:	4710      	bx	r2
    5840:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    5844:	b160      	cbz	r0, 5860 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    5846:	43c8      	mvns	r0, r1
    5848:	ea70 0002 	orns	r0, r0, r2
    584c:	d105      	bne.n	585a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    584e:	f002 f8e9 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    5852:	f001 fcb5 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5856:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    585a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    585e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5860:	f7ff fcae 	bl	51c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    5864:	f04f 30ff 	mov.w	r0, #4294967295
    5868:	6060      	str	r0, [r4, #4]
    586a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    586e:	f88d 0000 	strb.w	r0, [sp]
    5872:	f89d 0000 	ldrb.w	r0, [sp]
    5876:	b178      	cbz	r0, 5898 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    5878:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    587c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5880:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    5884:	6840      	ldr	r0, [r0, #4]
    5886:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    588a:	680a      	ldr	r2, [r1, #0]
    588c:	b001      	add	sp, #4
    588e:	2106      	movs	r1, #6
    5890:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5894:	4710      	bx	r2
    5896:	e05a      	b.n	594e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    5898:	f640 0148 	movw	r1, #2120	; 0x848
    589c:	2070      	movs	r0, #112	; 0x70
    589e:	f002 fa3f 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58a2:	f7ff fc8d 	bl	51c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    58a6:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    58aa:	f002 f9c1 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    58ae:	b130      	cbz	r0, 58be <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    58b0:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    58b4:	43c9      	mvns	r1, r1
    58b6:	ea71 0000 	orns	r0, r1, r0
    58ba:	d005      	beq.n	58c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    58bc:	e00a      	b.n	58d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    58be:	f640 0156 	movw	r1, #2134	; 0x856
    58c2:	2070      	movs	r0, #112	; 0x70
    58c4:	f002 fa2c 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    58c8:	f002 f8ac 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    58cc:	f001 fc78 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    58d0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    58d4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    58d8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    58dc:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    58e0:	6840      	ldr	r0, [r0, #4]
    58e2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    58e6:	680a      	ldr	r2, [r1, #0]
    58e8:	b001      	add	sp, #4
    58ea:	2100      	movs	r1, #0
    58ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    58f0:	4710      	bx	r2
    58f2:	f001 fe7f 	bl	75f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    58f6:	8ae0      	ldrh	r0, [r4, #22]
    58f8:	b110      	cbz	r0, 5900 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    58fa:	f002 f999 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    58fe:	b130      	cbz	r0, 590e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    5900:	f001 fe8c 	bl	761c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    5904:	2800      	cmp	r0, #0
    5906:	bf18      	it	ne
    5908:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    590e:	f44f 6106 	mov.w	r1, #2144	; 0x860
    5912:	2070      	movs	r0, #112	; 0x70
    5914:	f002 fa04 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5918:	4811      	ldr	r0, [pc, #68]	; (5960 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    591a:	6007      	str	r7, [r0, #0]
    591c:	6898      	ldr	r0, [r3, #8]
    591e:	6007      	str	r7, [r0, #0]
    5920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5922:	7818      	ldrb	r0, [r3, #0]
    5924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5928:	f002 bacc 	b.w	7ec4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    592c:	f7ff fc48 	bl	51c0 <MPSL_IRQ_RADIO_Handler+0xbb4>
    5930:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    5934:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    5938:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    593c:	6840      	ldr	r0, [r0, #4]
    593e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    5942:	680a      	ldr	r2, [r1, #0]
    5944:	b001      	add	sp, #4
    5946:	2105      	movs	r1, #5
    5948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    594c:	4710      	bx	r2
    594e:	f640 0173 	movw	r1, #2163	; 0x873
    5952:	2070      	movs	r0, #112	; 0x70
    5954:	f002 f9e4 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    5958:	200008c0 	.word	0x200008c0
    595c:	20000120 	.word	0x20000120
    5960:	40000508 	.word	0x40000508

00005964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    5964:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5968:	48f7      	ldr	r0, [pc, #988]	; (5d48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    596a:	b097      	sub	sp, #92	; 0x5c
    596c:	460c      	mov	r4, r1
    596e:	6800      	ldr	r0, [r0, #0]
    5970:	4ff6      	ldr	r7, [pc, #984]	; (5d4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    5972:	05c0      	lsls	r0, r0, #23
    5974:	0dc0      	lsrs	r0, r0, #23
    5976:	d00e      	beq.n	5996 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    5978:	3810      	subs	r0, #16
    597a:	b240      	sxtb	r0, r0
    597c:	2800      	cmp	r0, #0
    597e:	bfb8      	it	lt
    5980:	f000 000f 	andlt.w	r0, r0, #15
    5984:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5988:	bfac      	ite	ge
    598a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    598e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    5992:	0940      	lsrs	r0, r0, #5
    5994:	d00c      	beq.n	59b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    5996:	7820      	ldrb	r0, [r4, #0]
    5998:	f04f 0a00 	mov.w	sl, #0
    599c:	2800      	cmp	r0, #0
    599e:	bf18      	it	ne
    59a0:	2801      	cmpne	r0, #1
    59a2:	d017      	beq.n	59d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    59a4:	f240 61f9 	movw	r1, #1785	; 0x6f9
    59a8:	f04f 0070 	mov.w	r0, #112	; 0x70
    59ac:	f002 f9b8 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59b0:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    59b4:	f04f 0a01 	mov.w	sl, #1
    59b8:	2820      	cmp	r0, #32
    59ba:	d006      	beq.n	59ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    59bc:	7820      	ldrb	r0, [r4, #0]
    59be:	b148      	cbz	r0, 59d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    59c0:	f240 61f5 	movw	r1, #1781	; 0x6f5
    59c4:	2070      	movs	r0, #112	; 0x70
    59c6:	f002 f9ab 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59ca:	f240 61f2 	movw	r1, #1778	; 0x6f2
    59ce:	2070      	movs	r0, #112	; 0x70
    59d0:	f002 f9a6 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    59d4:	f8df b378 	ldr.w	fp, [pc, #888]	; 5d50 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    59d8:	f1bb 0f00 	cmp.w	fp, #0
    59dc:	d004      	beq.n	59e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    59de:	2100      	movs	r1, #0
    59e0:	f240 60fc 	movw	r0, #1788	; 0x6fc
    59e4:	f3af 8000 	nop.w
    59e8:	2000      	movs	r0, #0
    59ea:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    59ee:	a905      	add	r1, sp, #20
    59f0:	9112      	str	r1, [sp, #72]	; 0x48
    59f2:	49d8      	ldr	r1, [pc, #864]	; (5d54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    59f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    59f6:	f04f 0801 	mov.w	r8, #1
    59fa:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    59fe:	9001      	str	r0, [sp, #4]
    5a00:	f1bb 0f00 	cmp.w	fp, #0
    5a04:	d004      	beq.n	5a10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    5a06:	2100      	movs	r1, #0
    5a08:	f240 7007 	movw	r0, #1799	; 0x707
    5a0c:	f3af 8000 	nop.w
    5a10:	f1b8 0f00 	cmp.w	r8, #0
    5a14:	d009      	beq.n	5a2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    5a16:	bf00      	nop
    5a18:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    5a1c:	2500      	movs	r5, #0
    5a1e:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    5a22:	f1ba 0f00 	cmp.w	sl, #0
    5a26:	d007      	beq.n	5a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    5a28:	e03e      	b.n	5aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    5a2a:	48cb      	ldr	r0, [pc, #812]	; (5d58 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    5a2c:	2800      	cmp	r0, #0
    5a2e:	bf18      	it	ne
    5a30:	f3af 8000 	nopne.w
    5a34:	b662      	cpsie	i
    5a36:	e7ef      	b.n	5a18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    5a38:	46b1      	mov	r9, r6
    5a3a:	2001      	movs	r0, #1
    5a3c:	ea20 0609 	bic.w	r6, r0, r9
    5a40:	48c6      	ldr	r0, [pc, #792]	; (5d5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5a42:	2240      	movs	r2, #64	; 0x40
    5a44:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    5a48:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    5a4c:	f004 fb8a 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a50:	f1bb 0f00 	cmp.w	fp, #0
    5a54:	d004      	beq.n	5a60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    5a56:	2100      	movs	r1, #0
    5a58:	f240 503c 	movw	r0, #1340	; 0x53c
    5a5c:	f3af 8000 	nop.w
    5a60:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    5a64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    5a68:	4439      	add	r1, r7
    5a6a:	4438      	add	r0, r7
    5a6c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    5a6e:	8502      	strh	r2, [r0, #40]	; 0x28
    5a70:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    5a74:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5a78:	f1bb 0f00 	cmp.w	fp, #0
    5a7c:	d004      	beq.n	5a88 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    5a7e:	2100      	movs	r1, #0
    5a80:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5a84:	f3af 8000 	nop.w
    5a88:	f1bb 0f00 	cmp.w	fp, #0
    5a8c:	d004      	beq.n	5a98 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    5a8e:	2100      	movs	r1, #0
    5a90:	f240 7011 	movw	r0, #1809	; 0x711
    5a94:	f3af 8000 	nop.w
    5a98:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5a9c:	f88d 0020 	strb.w	r0, [sp, #32]
    5aa0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5aa4:	2800      	cmp	r0, #0
    5aa6:	d1ab      	bne.n	5a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5aa8:	f1bb 0f00 	cmp.w	fp, #0
    5aac:	d004      	beq.n	5ab8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    5aae:	2100      	movs	r1, #0
    5ab0:	f240 701b 	movw	r0, #1819	; 0x71b
    5ab4:	f3af 8000 	nop.w
    5ab8:	f001 fb82 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5abc:	4681      	mov	r9, r0
    5abe:	a802      	add	r0, sp, #8
    5ac0:	900a      	str	r0, [sp, #40]	; 0x28
    5ac2:	4688      	mov	r8, r1
    5ac4:	8921      	ldrh	r1, [r4, #8]
    5ac6:	4628      	mov	r0, r5
    5ac8:	f361 401f 	bfi	r0, r1, #16, #16
    5acc:	4601      	mov	r1, r0
    5ace:	7aa2      	ldrb	r2, [r4, #10]
    5ad0:	4628      	mov	r0, r5
    5ad2:	f362 0007 	bfi	r0, r2, #0, #8
    5ad6:	7ae2      	ldrb	r2, [r4, #11]
    5ad8:	f362 200f 	bfi	r0, r2, #8, #8
    5adc:	7822      	ldrb	r2, [r4, #0]
    5ade:	9502      	str	r5, [sp, #8]
    5ae0:	f362 4017 	bfi	r0, r2, #16, #8
    5ae4:	e9cd 5104 	strd	r5, r1, [sp, #16]
    5ae8:	e9cd 0506 	strd	r0, r5, [sp, #24]
    5aec:	9503      	str	r5, [sp, #12]
    5aee:	7820      	ldrb	r0, [r4, #0]
    5af0:	b380      	cbz	r0, 5b54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    5af2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    5af6:	499a      	ldr	r1, [pc, #616]	; (5d60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    5af8:	1a08      	subs	r0, r1, r0
    5afa:	990a      	ldr	r1, [sp, #40]	; 0x28
    5afc:	f101 020c 	add.w	r2, r1, #12
    5b00:	a914      	add	r1, sp, #80	; 0x50
    5b02:	f001 f87d 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5b06:	2200      	movs	r2, #0
    5b08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b0c:	4648      	mov	r0, r9
    5b0e:	4641      	mov	r1, r8
    5b10:	f7fe ff6e 	bl	49f0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    5b14:	468c      	mov	ip, r1
    5b16:	7ae1      	ldrb	r1, [r4, #11]
    5b18:	2900      	cmp	r1, #0
    5b1a:	bf0c      	ite	eq
    5b1c:	217a      	moveq	r1, #122	; 0x7a
    5b1e:	214a      	movne	r1, #74	; 0x4a
    5b20:	6862      	ldr	r2, [r4, #4]
    5b22:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5b26:	4411      	add	r1, r2
    5b28:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5b2c:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    5b30:	441a      	add	r2, r3
    5b32:	4411      	add	r1, r2
    5b34:	1c88      	adds	r0, r1, #2
    5b36:	f001 f847 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5b3a:	9600      	str	r6, [sp, #0]
    5b3c:	9004      	str	r0, [sp, #16]
    5b3e:	464a      	mov	r2, r9
    5b40:	4643      	mov	r3, r8
    5b42:	6920      	ldr	r0, [r4, #16]
    5b44:	990a      	ldr	r1, [sp, #40]	; 0x28
    5b46:	f7fe fdbb 	bl	46c0 <MPSL_IRQ_RADIO_Handler+0xb4>
    5b4a:	2800      	cmp	r0, #0
    5b4c:	bf08      	it	eq
    5b4e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    5b52:	e046      	b.n	5be2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    5b54:	e7ff      	b.n	5b56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    5b56:	4648      	mov	r0, r9
    5b58:	4641      	mov	r1, r8
    5b5a:	f000 ffd3 	bl	6b04 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    5b5e:	f8df c204 	ldr.w	ip, [pc, #516]	; 5d64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    5b62:	4602      	mov	r2, r0
    5b64:	eb10 0c0c 	adds.w	ip, r0, ip
    5b68:	460b      	mov	r3, r1
    5b6a:	f141 0e00 	adc.w	lr, r1, #0
    5b6e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5b72:	ebb0 0c0c 	subs.w	ip, r0, ip
    5b76:	eb71 0c0e 	sbcs.w	ip, r1, lr
    5b7a:	d229      	bcs.n	5bd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b7c:	3229      	adds	r2, #41	; 0x29
    5b7e:	f143 0300 	adc.w	r3, r3, #0
    5b82:	1a82      	subs	r2, r0, r2
    5b84:	eb71 0203 	sbcs.w	r2, r1, r3
    5b88:	d322      	bcc.n	5bd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    5b8a:	8922      	ldrh	r2, [r4, #8]
    5b8c:	ab0a      	add	r3, sp, #40	; 0x28
    5b8e:	1a80      	subs	r0, r0, r2
    5b90:	eb61 0105 	sbc.w	r1, r1, r5
    5b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5b96:	1e40      	subs	r0, r0, #1
    5b98:	9200      	str	r2, [sp, #0]
    5b9a:	f141 31ff 	adc.w	r1, r1, #4294967295
    5b9e:	aa0d      	add	r2, sp, #52	; 0x34
    5ba0:	f000 ffd4 	bl	6b4c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    5ba4:	7ae0      	ldrb	r0, [r4, #11]
    5ba6:	2800      	cmp	r0, #0
    5ba8:	bf0c      	ite	eq
    5baa:	207a      	moveq	r0, #122	; 0x7a
    5bac:	204a      	movne	r0, #74	; 0x4a
    5bae:	990d      	ldr	r1, [sp, #52]	; 0x34
    5bb0:	8922      	ldrh	r2, [r4, #8]
    5bb2:	4408      	add	r0, r1
    5bb4:	6861      	ldr	r1, [r4, #4]
    5bb6:	4411      	add	r1, r2
    5bb8:	4408      	add	r0, r1
    5bba:	1c80      	adds	r0, r0, #2
    5bbc:	f001 f804 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    5bc0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    5bc4:	e9cd 1202 	strd	r1, r2, [sp, #8]
    5bc8:	1a40      	subs	r0, r0, r1
    5bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5bce:	e007      	b.n	5be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    5bd0:	f1b9 0101 	subs.w	r1, r9, #1
    5bd4:	f148 30ff 	adc.w	r0, r8, #4294967295
    5bd8:	e9cd 1002 	strd	r1, r0, [sp, #8]
    5bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5be0:	9004      	str	r0, [sp, #16]
    5be2:	f1bb 0f00 	cmp.w	fp, #0
    5be6:	d004      	beq.n	5bf2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    5be8:	2100      	movs	r1, #0
    5bea:	f240 7022 	movw	r0, #1826	; 0x722
    5bee:	f3af 8000 	nop.w
    5bf2:	495a      	ldr	r1, [pc, #360]	; (5d5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    5bf4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    5bf8:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    5bfc:	9108      	str	r1, [sp, #32]
    5bfe:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    5c02:	a802      	add	r0, sp, #8
    5c04:	2901      	cmp	r1, #1
    5c06:	bf18      	it	ne
    5c08:	2902      	cmpne	r1, #2
    5c0a:	d141      	bne.n	5c90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5c0c:	9511      	str	r5, [sp, #68]	; 0x44
    5c0e:	9a02      	ldr	r2, [sp, #8]
    5c10:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    5c14:	1a53      	subs	r3, r2, r1
    5c16:	f8dd c010 	ldr.w	ip, [sp, #16]
    5c1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5c1e:	eb12 020c 	adds.w	r2, r2, ip
    5c22:	1a51      	subs	r1, r2, r1
    5c24:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    5c28:	2b02      	cmp	r3, #2
    5c2a:	d374      	bcc.n	5d16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5c30:	bf98      	it	ls
    5c32:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    5c36:	d86e      	bhi.n	5d16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5c38:	2501      	movs	r5, #1
    5c3a:	ab14      	add	r3, sp, #80	; 0x50
    5c3c:	aa0e      	add	r2, sp, #56	; 0x38
    5c3e:	4631      	mov	r1, r6
    5c40:	f7fe ff26 	bl	4a90 <MPSL_IRQ_RADIO_Handler+0x484>
    5c44:	2800      	cmp	r0, #0
    5c46:	d06d      	beq.n	5d24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    5c48:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    5c4c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    5c50:	4633      	mov	r3, r6
    5c52:	428a      	cmp	r2, r1
    5c54:	d06a      	beq.n	5d2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    5c56:	2005      	movs	r0, #5
    5c58:	f7fe fcf6 	bl	4648 <MPSL_IRQ_RADIO_Handler+0x3c>
    5c5c:	9908      	ldr	r1, [sp, #32]
    5c5e:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    5c62:	7048      	strb	r0, [r1, #1]
    5c64:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    5c68:	2820      	cmp	r0, #32
    5c6a:	bf01      	itttt	eq
    5c6c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5c70:	4438      	addeq	r0, r7
    5c72:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    5c76:	9511      	streq	r5, [sp, #68]	; 0x44
    5c78:	bf1e      	ittt	ne
    5c7a:	9908      	ldrne	r1, [sp, #32]
    5c7c:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    5c80:	f880 8001 	strbne.w	r8, [r0, #1]
    5c84:	4632      	mov	r2, r6
    5c86:	4641      	mov	r1, r8
    5c88:	f05f 0003 	movs.w	r0, #3
    5c8c:	f7ff fb44 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5c90:	f1bb 0f00 	cmp.w	fp, #0
    5c94:	d004      	beq.n	5ca0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    5c96:	2100      	movs	r1, #0
    5c98:	f240 7027 	movw	r0, #1831	; 0x727
    5c9c:	f3af 8000 	nop.w
    5ca0:	4831      	ldr	r0, [pc, #196]	; (5d68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    5ca2:	2800      	cmp	r0, #0
    5ca4:	bf18      	it	ne
    5ca6:	f3af 8000 	nopne.w
    5caa:	f3ef 8810 	mrs	r8, PRIMASK
    5cae:	b672      	cpsid	i
    5cb0:	f1bb 0f00 	cmp.w	fp, #0
    5cb4:	d004      	beq.n	5cc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    5cb6:	2100      	movs	r1, #0
    5cb8:	f240 702d 	movw	r0, #1837	; 0x72d
    5cbc:	f3af 8000 	nop.w
    5cc0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    5cc4:	f88d 0020 	strb.w	r0, [sp, #32]
    5cc8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    5ccc:	2800      	cmp	r0, #0
    5cce:	f47f ae97 	bne.w	5a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5cd2:	f1bb 0f00 	cmp.w	fp, #0
    5cd6:	d004      	beq.n	5ce2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    5cd8:	2100      	movs	r1, #0
    5cda:	f240 7035 	movw	r0, #1845	; 0x735
    5cde:	f3af 8000 	nop.w
    5ce2:	f10d 0e04 	add.w	lr, sp, #4
    5ce6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    5cea:	f100 0e08 	add.w	lr, r0, #8
    5cee:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    5cf2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    5cf6:	e9c0 1206 	strd	r1, r2, [r0, #24]
    5cfa:	b325      	cbz	r5, 5d46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    5cfc:	f1bb 0f00 	cmp.w	fp, #0
    5d00:	d004      	beq.n	5d0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    5d02:	2100      	movs	r1, #0
    5d04:	f240 7042 	movw	r0, #1858	; 0x742
    5d08:	f3af 8000 	nop.w
    5d0c:	f1ba 0f00 	cmp.w	sl, #0
    5d10:	d146      	bne.n	5da0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d12:	e02b      	b.n	5d6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    5d14:	e7ff      	b.n	5d16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    5d16:	4632      	mov	r2, r6
    5d18:	4641      	mov	r1, r8
    5d1a:	2004      	movs	r0, #4
    5d1c:	f7ff fafc 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5d20:	2501      	movs	r5, #1
    5d22:	e7b5      	b.n	5c90 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    5d24:	4632      	mov	r2, r6
    5d26:	4641      	mov	r1, r8
    5d28:	2004      	movs	r0, #4
    5d2a:	e7af      	b.n	5c8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    5d2c:	2920      	cmp	r1, #32
    5d2e:	bf1d      	ittte	ne
    5d30:	9808      	ldrne	r0, [sp, #32]
    5d32:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    5d36:	7840      	ldrbne	r0, [r0, #1]
    5d38:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    5d3c:	bf04      	itt	eq
    5d3e:	4438      	addeq	r0, r7
    5d40:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    5d44:	e78a      	b.n	5c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    5d46:	e03b      	b.n	5dc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5d48:	e000ed04 	.word	0xe000ed04
    5d4c:	20000d40 	.word	0x20000d40
    5d50:	00000000 	.word	0x00000000
    5d54:	200008c0 	.word	0x200008c0
    5d58:	00000000 	.word	0x00000000
    5d5c:	20000cc0 	.word	0x20000cc0
    5d60:	1e847fff 	.word	0x1e847fff
    5d64:	0f424000 	.word	0x0f424000
    5d68:	00000000 	.word	0x00000000
    5d6c:	9811      	ldr	r0, [sp, #68]	; 0x44
    5d6e:	f010 0fff 	tst.w	r0, #255	; 0xff
    5d72:	d015      	beq.n	5da0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d74:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    5d78:	2820      	cmp	r0, #32
    5d7a:	d111      	bne.n	5da0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d7c:	f1bb 0f00 	cmp.w	fp, #0
    5d80:	d004      	beq.n	5d8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    5d82:	2100      	movs	r1, #0
    5d84:	f240 7047 	movw	r0, #1863	; 0x747
    5d88:	f3af 8000 	nop.w
    5d8c:	4631      	mov	r1, r6
    5d8e:	2002      	movs	r0, #2
    5d90:	f7ff faf4 	bl	537c <MPSL_IRQ_RADIO_Handler+0xd70>
    5d94:	9010      	str	r0, [sp, #64]	; 0x40
    5d96:	b918      	cbnz	r0, 5da0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    5d98:	7820      	ldrb	r0, [r4, #0]
    5d9a:	b300      	cbz	r0, 5dde <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    5d9c:	2801      	cmp	r0, #1
    5d9e:	d02e      	beq.n	5dfe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    5da0:	f1bb 0f00 	cmp.w	fp, #0
    5da4:	d004      	beq.n	5db0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    5da6:	2100      	movs	r1, #0
    5da8:	f240 7064 	movw	r0, #1892	; 0x764
    5dac:	f3af 8000 	nop.w
    5db0:	20ff      	movs	r0, #255	; 0xff
    5db2:	f1ba 0f00 	cmp.w	sl, #0
    5db6:	bf18      	it	ne
    5db8:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    5dbc:	d029      	beq.n	5e12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    5dbe:	2501      	movs	r5, #1
    5dc0:	f1bb 0f00 	cmp.w	fp, #0
    5dc4:	d004      	beq.n	5dd0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    5dc6:	2100      	movs	r1, #0
    5dc8:	f240 7075 	movw	r0, #1909	; 0x775
    5dcc:	f3af 8000 	nop.w
    5dd0:	9810      	ldr	r0, [sp, #64]	; 0x40
    5dd2:	4c34      	ldr	r4, [pc, #208]	; (5ea4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    5dd4:	2802      	cmp	r0, #2
    5dd6:	d025      	beq.n	5e24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    5dd8:	2801      	cmp	r0, #1
    5dda:	d02b      	beq.n	5e34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    5ddc:	e02f      	b.n	5e3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5dde:	f1bb 0f00 	cmp.w	fp, #0
    5de2:	d004      	beq.n	5dee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    5de4:	2100      	movs	r1, #0
    5de6:	f240 704f 	movw	r0, #1871	; 0x74f
    5dea:	f3af 8000 	nop.w
    5dee:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5df2:	2004      	movs	r0, #4
    5df4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    5df6:	f7ff fa8f 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    5dfa:	2501      	movs	r5, #1
    5dfc:	e7e0      	b.n	5dc0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    5dfe:	f1bb 0f00 	cmp.w	fp, #0
    5e02:	f43f adfd 	beq.w	5a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5e06:	2100      	movs	r1, #0
    5e08:	f240 705a 	movw	r0, #1882	; 0x75a
    5e0c:	f3af 8000 	nop.w
    5e10:	e5f6      	b.n	5a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    5e12:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    5e16:	2101      	movs	r1, #1
    5e18:	4391      	bics	r1, r2
    5e1a:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    5e1e:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    5e22:	e7cc      	b.n	5dbe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    5e24:	68b8      	ldr	r0, [r7, #8]
    5e26:	ebb0 0009 	subs.w	r0, r0, r9
    5e2a:	f004 f80b 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    5e2e:	6861      	ldr	r1, [r4, #4]
    5e30:	b921      	cbnz	r1, 5e3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    5e32:	e004      	b.n	5e3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5e34:	6861      	ldr	r1, [r4, #4]
    5e36:	f04f 30ff 	mov.w	r0, #4294967295
    5e3a:	b101      	cbz	r1, 5e3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    5e3c:	4788      	blx	r1
    5e3e:	f1b8 0f00 	cmp.w	r8, #0
    5e42:	d028      	beq.n	5e96 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    5e44:	f1bb 0f00 	cmp.w	fp, #0
    5e48:	d004      	beq.n	5e54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    5e4a:	2100      	movs	r1, #0
    5e4c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    5e50:	f3af 8000 	nop.w
    5e54:	b19d      	cbz	r5, 5e7e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e56:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    5e5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5e5e:	4438      	add	r0, r7
    5e60:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    5e64:	2820      	cmp	r0, #32
    5e66:	d00a      	beq.n	5e7e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    5e68:	f1bb 0f00 	cmp.w	fp, #0
    5e6c:	d004      	beq.n	5e78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    5e6e:	2100      	movs	r1, #0
    5e70:	f240 708f 	movw	r0, #1935	; 0x78f
    5e74:	f3af 8000 	nop.w
    5e78:	7860      	ldrb	r0, [r4, #1]
    5e7a:	f002 f823 	bl	7ec4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    5e7e:	f1bb 0f00 	cmp.w	fp, #0
    5e82:	d004      	beq.n	5e8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    5e84:	2100      	movs	r1, #0
    5e86:	f240 7094 	movw	r0, #1940	; 0x794
    5e8a:	f3af 8000 	nop.w
    5e8e:	b019      	add	sp, #100	; 0x64
    5e90:	4628      	mov	r0, r5
    5e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e96:	4804      	ldr	r0, [pc, #16]	; (5ea8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    5e98:	2800      	cmp	r0, #0
    5e9a:	bf18      	it	ne
    5e9c:	f3af 8000 	nopne.w
    5ea0:	b662      	cpsie	i
    5ea2:	e7cf      	b.n	5e44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    5ea4:	20000120 	.word	0x20000120
    5ea8:	00000000 	.word	0x00000000

00005eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    5eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5eb0:	4604      	mov	r4, r0
    5eb2:	7800      	ldrb	r0, [r0, #0]
    5eb4:	b095      	sub	sp, #84	; 0x54
    5eb6:	b118      	cbz	r0, 5ec0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    5eb8:	b015      	add	sp, #84	; 0x54
    5eba:	2000      	movs	r0, #0
    5ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ec0:	48d1      	ldr	r0, [pc, #836]	; (6208 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    5ec2:	6800      	ldr	r0, [r0, #0]
    5ec4:	05c0      	lsls	r0, r0, #23
    5ec6:	0dc0      	lsrs	r0, r0, #23
    5ec8:	d00e      	beq.n	5ee8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    5eca:	3810      	subs	r0, #16
    5ecc:	b240      	sxtb	r0, r0
    5ece:	2800      	cmp	r0, #0
    5ed0:	bfb8      	it	lt
    5ed2:	f000 000f 	andlt.w	r0, r0, #15
    5ed6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    5eda:	bfac      	ite	ge
    5edc:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    5ee0:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    5ee4:	0940      	lsrs	r0, r0, #5
    5ee6:	d0e7      	beq.n	5eb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    5ee8:	a80d      	add	r0, sp, #52	; 0x34
    5eea:	f8df 9320 	ldr.w	r9, [pc, #800]	; 620c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    5eee:	9009      	str	r0, [sp, #36]	; 0x24
    5ef0:	f1b9 0f00 	cmp.w	r9, #0
    5ef4:	d004      	beq.n	5f00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    5ef6:	2100      	movs	r1, #0
    5ef8:	f240 50c5 	movw	r0, #1477	; 0x5c5
    5efc:	f3af 8000 	nop.w
    5f00:	f8df 830c 	ldr.w	r8, [pc, #780]	; 6210 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    5f04:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    5f08:	2500      	movs	r5, #0
    5f0a:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    5f0e:	9503      	str	r5, [sp, #12]
    5f10:	f1b9 0f00 	cmp.w	r9, #0
    5f14:	d004      	beq.n	5f20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    5f16:	2100      	movs	r1, #0
    5f18:	f240 50ca 	movw	r0, #1482	; 0x5ca
    5f1c:	f3af 8000 	nop.w
    5f20:	2001      	movs	r0, #1
    5f22:	ea20 0a06 	bic.w	sl, r0, r6
    5f26:	48bb      	ldr	r0, [pc, #748]	; (6214 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    5f28:	2240      	movs	r2, #64	; 0x40
    5f2a:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    5f2e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    5f32:	f004 f917 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f36:	f1b9 0f00 	cmp.w	r9, #0
    5f3a:	d004      	beq.n	5f46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    5f3c:	2100      	movs	r1, #0
    5f3e:	f240 503c 	movw	r0, #1340	; 0x53c
    5f42:	f3af 8000 	nop.w
    5f46:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5f4a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    5f4e:	eb01 0208 	add.w	r2, r1, r8
    5f52:	4440      	add	r0, r8
    5f54:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    5f56:	8501      	strh	r1, [r0, #40]	; 0x28
    5f58:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    5f5c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    5f60:	f1b9 0f00 	cmp.w	r9, #0
    5f64:	d004      	beq.n	5f70 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    5f66:	2100      	movs	r1, #0
    5f68:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    5f6c:	f3af 8000 	nop.w
    5f70:	f1b9 0f00 	cmp.w	r9, #0
    5f74:	d004      	beq.n	5f80 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    5f76:	2100      	movs	r1, #0
    5f78:	f240 50cf 	movw	r0, #1487	; 0x5cf
    5f7c:	f3af 8000 	nop.w
    5f80:	f001 f91e 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    5f84:	460f      	mov	r7, r1
    5f86:	4606      	mov	r6, r0
    5f88:	8921      	ldrh	r1, [r4, #8]
    5f8a:	4628      	mov	r0, r5
    5f8c:	f361 401f 	bfi	r0, r1, #16, #16
    5f90:	4601      	mov	r1, r0
    5f92:	7aa2      	ldrb	r2, [r4, #10]
    5f94:	4628      	mov	r0, r5
    5f96:	f362 0007 	bfi	r0, r2, #0, #8
    5f9a:	7ae2      	ldrb	r2, [r4, #11]
    5f9c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    5fa0:	f362 200f 	bfi	r0, r2, #8, #8
    5fa4:	7822      	ldrb	r2, [r4, #0]
    5fa6:	950a      	str	r5, [sp, #40]	; 0x28
    5fa8:	f362 4017 	bfi	r0, r2, #16, #8
    5fac:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    5fb0:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    5fb4:	950b      	str	r5, [sp, #44]	; 0x2c
    5fb6:	7820      	ldrb	r0, [r4, #0]
    5fb8:	b388      	cbz	r0, 601e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    5fba:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5fbe:	4896      	ldr	r0, [pc, #600]	; (6218 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    5fc0:	f10b 020c 	add.w	r2, fp, #12
    5fc4:	1a40      	subs	r0, r0, r1
    5fc6:	a911      	add	r1, sp, #68	; 0x44
    5fc8:	f000 fe1a 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    5fcc:	2200      	movs	r2, #0
    5fce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    5fd2:	4630      	mov	r0, r6
    5fd4:	4639      	mov	r1, r7
    5fd6:	f7fe fd0b 	bl	49f0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    5fda:	4684      	mov	ip, r0
    5fdc:	7ae0      	ldrb	r0, [r4, #11]
    5fde:	460b      	mov	r3, r1
    5fe0:	2800      	cmp	r0, #0
    5fe2:	bf0c      	ite	eq
    5fe4:	207a      	moveq	r0, #122	; 0x7a
    5fe6:	204a      	movne	r0, #74	; 0x4a
    5fe8:	6861      	ldr	r1, [r4, #4]
    5fea:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    5fee:	4408      	add	r0, r1
    5ff0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    5ff4:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    5ff8:	4411      	add	r1, r2
    5ffa:	4408      	add	r0, r1
    5ffc:	1c80      	adds	r0, r0, #2
    5ffe:	f000 fde3 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6002:	f8cd a000 	str.w	sl, [sp]
    6006:	900c      	str	r0, [sp, #48]	; 0x30
    6008:	4632      	mov	r2, r6
    600a:	463b      	mov	r3, r7
    600c:	4659      	mov	r1, fp
    600e:	6920      	ldr	r0, [r4, #16]
    6010:	f7fe fb56 	bl	46c0 <MPSL_IRQ_RADIO_Handler+0xb4>
    6014:	2800      	cmp	r0, #0
    6016:	bf08      	it	eq
    6018:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    601c:	e045      	b.n	60aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    601e:	e7ff      	b.n	6020 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    6020:	4630      	mov	r0, r6
    6022:	4639      	mov	r1, r7
    6024:	f000 fd6e 	bl	6b04 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    6028:	4b7c      	ldr	r3, [pc, #496]	; (621c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    602a:	4602      	mov	r2, r0
    602c:	eb10 0c03 	adds.w	ip, r0, r3
    6030:	468b      	mov	fp, r1
    6032:	f141 0300 	adc.w	r3, r1, #0
    6036:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    603a:	ebb0 0c0c 	subs.w	ip, r0, ip
    603e:	eb71 0303 	sbcs.w	r3, r1, r3
    6042:	d22a      	bcs.n	609a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    6044:	3229      	adds	r2, #41	; 0x29
    6046:	f14b 0300 	adc.w	r3, fp, #0
    604a:	1a82      	subs	r2, r0, r2
    604c:	eb71 0203 	sbcs.w	r2, r1, r3
    6050:	d323      	bcc.n	609a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    6052:	8922      	ldrh	r2, [r4, #8]
    6054:	ab12      	add	r3, sp, #72	; 0x48
    6056:	1a80      	subs	r0, r0, r2
    6058:	eb61 0105 	sbc.w	r1, r1, r5
    605c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    605e:	1e40      	subs	r0, r0, #1
    6060:	9200      	str	r2, [sp, #0]
    6062:	f141 31ff 	adc.w	r1, r1, #4294967295
    6066:	aa07      	add	r2, sp, #28
    6068:	f000 fd70 	bl	6b4c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    606c:	7ae0      	ldrb	r0, [r4, #11]
    606e:	2800      	cmp	r0, #0
    6070:	bf0c      	ite	eq
    6072:	207a      	moveq	r0, #122	; 0x7a
    6074:	204a      	movne	r0, #74	; 0x4a
    6076:	9907      	ldr	r1, [sp, #28]
    6078:	8922      	ldrh	r2, [r4, #8]
    607a:	4408      	add	r0, r1
    607c:	6861      	ldr	r1, [r4, #4]
    607e:	4411      	add	r1, r2
    6080:	4408      	add	r0, r1
    6082:	1c80      	adds	r0, r0, #2
    6084:	f000 fda0 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6088:	4601      	mov	r1, r0
    608a:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    608e:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    6092:	1a08      	subs	r0, r1, r0
    6094:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6098:	e006      	b.n	60a8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    609a:	1e70      	subs	r0, r6, #1
    609c:	f147 31ff 	adc.w	r1, r7, #4294967295
    60a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    60a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    60a8:	900c      	str	r0, [sp, #48]	; 0x30
    60aa:	f1b9 0f00 	cmp.w	r9, #0
    60ae:	d004      	beq.n	60ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    60b0:	2100      	movs	r1, #0
    60b2:	f240 50d5 	movw	r0, #1493	; 0x5d5
    60b6:	f3af 8000 	nop.w
    60ba:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    60be:	f8d8 1008 	ldr.w	r1, [r8, #8]
    60c2:	1808      	adds	r0, r1, r0
    60c4:	eb42 0105 	adc.w	r1, r2, r5
    60c8:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    60cc:	2a20      	cmp	r2, #32
    60ce:	d009      	beq.n	60e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    60d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    60d4:	1a12      	subs	r2, r2, r0
    60d6:	eb73 0201 	sbcs.w	r2, r3, r1
    60da:	d203      	bcs.n	60e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    60dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    60e0:	2001      	movs	r0, #1
    60e2:	9003      	str	r0, [sp, #12]
    60e4:	f1b9 0f00 	cmp.w	r9, #0
    60e8:	d004      	beq.n	60f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    60ea:	2100      	movs	r1, #0
    60ec:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    60f0:	f3af 8000 	nop.w
    60f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    60f6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    60fa:	1a0a      	subs	r2, r1, r0
    60fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    60fe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6102:	18c9      	adds	r1, r1, r3
    6104:	1a08      	subs	r0, r1, r0
    6106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    610a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    610e:	bf98      	it	ls
    6110:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    6114:	d80b      	bhi.n	612e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    6116:	4632      	mov	r2, r6
    6118:	463b      	mov	r3, r7
    611a:	a90a      	add	r1, sp, #40	; 0x28
    611c:	483f      	ldr	r0, [pc, #252]	; (621c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    611e:	f8cd a000 	str.w	sl, [sp]
    6122:	f7fe facd 	bl	46c0 <MPSL_IRQ_RADIO_Handler+0xb4>
    6126:	9903      	ldr	r1, [sp, #12]
    6128:	4308      	orrs	r0, r1
    612a:	d145      	bne.n	61b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    612c:	e05f      	b.n	61ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    612e:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    6132:	aa05      	add	r2, sp, #20
    6134:	a903      	add	r1, sp, #12
    6136:	4658      	mov	r0, fp
    6138:	f000 fd62 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    613c:	f001 fa78 	bl	7630 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    6140:	f000 fd42 	bl	6bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    6144:	4682      	mov	sl, r0
    6146:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    614a:	2820      	cmp	r0, #32
    614c:	d00a      	beq.n	6164 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    614e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    6152:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6156:	1d80      	adds	r0, r0, #6
    6158:	f145 0100 	adc.w	r1, r5, #0
    615c:	181e      	adds	r6, r3, r0
    615e:	eb42 0701 	adc.w	r7, r2, r1
    6162:	e024      	b.n	61ae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    6164:	360a      	adds	r6, #10
    6166:	f147 0700 	adc.w	r7, r7, #0
    616a:	f1bb 0f00 	cmp.w	fp, #0
    616e:	d017      	beq.n	61a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    6170:	f001 fd5e 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    6174:	b9a0      	cbnz	r0, 61a0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    6176:	f001 fc33 	bl	79e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    617a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    617e:	bf08      	it	eq
    6180:	200d      	moveq	r0, #13
    6182:	d00b      	beq.n	619c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    6184:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    6188:	3856      	subs	r0, #86	; 0x56
    618a:	bf08      	it	eq
    618c:	201c      	moveq	r0, #28
    618e:	d005      	beq.n	619c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    6190:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    6194:	389f      	subs	r0, #159	; 0x9f
    6196:	bf14      	ite	ne
    6198:	4628      	movne	r0, r5
    619a:	2032      	moveq	r0, #50	; 0x32
    619c:	1986      	adds	r6, r0, r6
    619e:	416f      	adcs	r7, r5
    61a0:	9803      	ldr	r0, [sp, #12]
    61a2:	4582      	cmp	sl, r0
    61a4:	d903      	bls.n	61ae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    61a6:	ebaa 0000 	sub.w	r0, sl, r0
    61aa:	1986      	adds	r6, r0, r6
    61ac:	416f      	adcs	r7, r5
    61ae:	201f      	movs	r0, #31
    61b0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    61b4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    61b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    61bc:	f000 fca2 	bl	6b04 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    61c0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    61c4:	1880      	adds	r0, r0, r2
    61c6:	eb41 0205 	adc.w	r2, r1, r5
    61ca:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    61ce:	1840      	adds	r0, r0, r1
    61d0:	eb42 0105 	adc.w	r1, r2, r5
    61d4:	1c40      	adds	r0, r0, #1
    61d6:	f141 0100 	adc.w	r1, r1, #0
    61da:	f1b9 0f00 	cmp.w	r9, #0
    61de:	e9c4 0104 	strd	r0, r1, [r4, #16]
    61e2:	d004      	beq.n	61ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    61e4:	2100      	movs	r1, #0
    61e6:	f240 50fa 	movw	r0, #1530	; 0x5fa
    61ea:	f3af 8000 	nop.w
    61ee:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    61f2:	f88d 0000 	strb.w	r0, [sp]
    61f6:	f89d 0000 	ldrb.w	r0, [sp]
    61fa:	2800      	cmp	r0, #0
    61fc:	f47f ae78 	bne.w	5ef0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    6200:	b015      	add	sp, #84	; 0x54
    6202:	2001      	movs	r0, #1
    6204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6208:	e000ed04 	.word	0xe000ed04
    620c:	00000000 	.word	0x00000000
    6210:	20000d40 	.word	0x20000d40
    6214:	20000cc0 	.word	0x20000cc0
    6218:	1e847fff 	.word	0x1e847fff
    621c:	0f424000 	.word	0x0f424000

00006220 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    6220:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6224:	4d9d      	ldr	r5, [pc, #628]	; (649c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    6226:	b08c      	sub	sp, #48	; 0x30
    6228:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    622c:	2000      	movs	r0, #0
    622e:	9007      	str	r0, [sp, #28]
    6230:	9008      	str	r0, [sp, #32]
    6232:	2001      	movs	r0, #1
    6234:	4c9a      	ldr	r4, [pc, #616]	; (64a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    6236:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    623a:	f04f 0800 	mov.w	r8, #0
    623e:	4607      	mov	r7, r0
    6240:	9006      	str	r0, [sp, #24]
    6242:	b124      	cbz	r4, 624e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    6244:	2100      	movs	r1, #0
    6246:	f240 70a5 	movw	r0, #1957	; 0x7a5
    624a:	f3af 8000 	nop.w
    624e:	9806      	ldr	r0, [sp, #24]
    6250:	2800      	cmp	r0, #0
    6252:	d03c      	beq.n	62ce <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    6254:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    6258:	b124      	cbz	r4, 6264 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    625a:	2100      	movs	r1, #0
    625c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    6260:	f3af 8000 	nop.w
    6264:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    6268:	2240      	movs	r2, #64	; 0x40
    626a:	ea27 060a 	bic.w	r6, r7, sl
    626e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    6272:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    6276:	4683      	mov	fp, r0
    6278:	f003 ff74 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    627c:	b124      	cbz	r4, 6288 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    627e:	2100      	movs	r1, #0
    6280:	f240 503c 	movw	r0, #1340	; 0x53c
    6284:	f3af 8000 	nop.w
    6288:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    628c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    6290:	4428      	add	r0, r5
    6292:	4429      	add	r1, r5
    6294:	9000      	str	r0, [sp, #0]
    6296:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    6298:	8502      	strh	r2, [r0, #40]	; 0x28
    629a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    629e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    62a2:	b124      	cbz	r4, 62ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    62a4:	2100      	movs	r1, #0
    62a6:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    62aa:	f3af 8000 	nop.w
    62ae:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    62b2:	f88d 0008 	strb.w	r0, [sp, #8]
    62b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    62ba:	b178      	cbz	r0, 62dc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    62bc:	2c00      	cmp	r4, #0
    62be:	bf1c      	itt	ne
    62c0:	2100      	movne	r1, #0
    62c2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    62c6:	d0bc      	beq.n	6242 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    62c8:	f3af 8000 	nop.w
    62cc:	e7b9      	b.n	6242 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    62ce:	4875      	ldr	r0, [pc, #468]	; (64a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    62d0:	2800      	cmp	r0, #0
    62d2:	bf18      	it	ne
    62d4:	f3af 8000 	nopne.w
    62d8:	b662      	cpsie	i
    62da:	e7bb      	b.n	6254 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    62dc:	b124      	cbz	r4, 62e8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    62de:	2100      	movs	r1, #0
    62e0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    62e4:	f3af 8000 	nop.w
    62e8:	980c      	ldr	r0, [sp, #48]	; 0x30
    62ea:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    62ee:	2803      	cmp	r0, #3
    62f0:	d17e      	bne.n	63f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    62f2:	9a00      	ldr	r2, [sp, #0]
    62f4:	990c      	ldr	r1, [sp, #48]	; 0x30
    62f6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    62fa:	4288      	cmp	r0, r1
    62fc:	bf14      	ite	ne
    62fe:	f04f 0a00 	movne.w	sl, #0
    6302:	f04f 0a01 	moveq.w	sl, #1
    6306:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    630a:	4683      	mov	fp, r0
    630c:	2220      	movs	r2, #32
    630e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    6312:	e003      	b.n	631c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    6314:	4602      	mov	r2, r0
    6316:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    631a:	7840      	ldrb	r0, [r0, #1]
    631c:	4288      	cmp	r0, r1
    631e:	d002      	beq.n	6326 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    6320:	2820      	cmp	r0, #32
    6322:	d00a      	beq.n	633a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    6324:	e7f6      	b.n	6314 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    6326:	2820      	cmp	r0, #32
    6328:	d007      	beq.n	633a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    632a:	4583      	cmp	fp, r0
    632c:	d107      	bne.n	633e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    632e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    6332:	7840      	ldrb	r0, [r0, #1]
    6334:	f88c 0000 	strb.w	r0, [ip]
    6338:	e007      	b.n	634a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    633a:	4640      	mov	r0, r8
    633c:	e00c      	b.n	6358 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    633e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    6342:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    6346:	7840      	ldrb	r0, [r0, #1]
    6348:	7048      	strb	r0, [r1, #1]
    634a:	b124      	cbz	r4, 6356 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    634c:	2100      	movs	r1, #0
    634e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    6352:	f3af 8000 	nop.w
    6356:	4638      	mov	r0, r7
    6358:	46c3      	mov	fp, r8
    635a:	ea10 0f0a 	tst.w	r0, sl
    635e:	bf18      	it	ne
    6360:	46bb      	movne	fp, r7
    6362:	2800      	cmp	r0, #0
    6364:	d04e      	beq.n	6404 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    6366:	b124      	cbz	r4, 6372 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    6368:	2100      	movs	r1, #0
    636a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    636e:	f3af 8000 	nop.w
    6372:	4632      	mov	r2, r6
    6374:	2001      	movs	r0, #1
    6376:	990c      	ldr	r1, [sp, #48]	; 0x30
    6378:	f7fe ffce 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    637c:	b124      	cbz	r4, 6388 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    637e:	2100      	movs	r1, #0
    6380:	f240 70c2 	movw	r0, #1986	; 0x7c2
    6384:	f3af 8000 	nop.w
    6388:	4847      	ldr	r0, [pc, #284]	; (64a8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    638a:	2800      	cmp	r0, #0
    638c:	bf18      	it	ne
    638e:	f3af 8000 	nopne.w
    6392:	f3ef 8010 	mrs	r0, PRIMASK
    6396:	b672      	cpsid	i
    6398:	9006      	str	r0, [sp, #24]
    639a:	b124      	cbz	r4, 63a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    639c:	2100      	movs	r1, #0
    639e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    63a2:	f3af 8000 	nop.w
    63a6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    63aa:	f88d 0008 	strb.w	r0, [sp, #8]
    63ae:	f89d 0008 	ldrb.w	r0, [sp, #8]
    63b2:	b138      	cbz	r0, 63c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    63b4:	2c00      	cmp	r4, #0
    63b6:	bf1c      	itt	ne
    63b8:	2100      	movne	r1, #0
    63ba:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    63be:	f43f af40 	beq.w	6242 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    63c2:	e781      	b.n	62c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    63c4:	f1bb 0f00 	cmp.w	fp, #0
    63c8:	d009      	beq.n	63de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    63ca:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    63ce:	2820      	cmp	r0, #32
    63d0:	d105      	bne.n	63de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    63d2:	4631      	mov	r1, r6
    63d4:	2002      	movs	r0, #2
    63d6:	f7fe ffd1 	bl	537c <MPSL_IRQ_RADIO_Handler+0xd70>
    63da:	9008      	str	r0, [sp, #32]
    63dc:	b1f8      	cbz	r0, 641e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    63de:	b124      	cbz	r4, 63ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    63e0:	2100      	movs	r1, #0
    63e2:	f240 70df 	movw	r0, #2015	; 0x7df
    63e6:	f3af 8000 	nop.w
    63ea:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    63ee:	e000      	b.n	63f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    63f0:	e008      	b.n	6404 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    63f2:	ea27 0000 	bic.w	r0, r7, r0
    63f6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    63fa:	20ff      	movs	r0, #255	; 0xff
    63fc:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    6400:	2001      	movs	r0, #1
    6402:	9007      	str	r0, [sp, #28]
    6404:	b124      	cbz	r4, 6410 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    6406:	2100      	movs	r1, #0
    6408:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    640c:	f3af 8000 	nop.w
    6410:	9808      	ldr	r0, [sp, #32]
    6412:	4e26      	ldr	r6, [pc, #152]	; (64ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    6414:	2802      	cmp	r0, #2
    6416:	d009      	beq.n	642c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    6418:	2801      	cmp	r0, #1
    641a:	d027      	beq.n	646c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    641c:	e02b      	b.n	6476 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    641e:	b354      	cbz	r4, 6476 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6420:	2100      	movs	r1, #0
    6422:	f240 70da 	movw	r0, #2010	; 0x7da
    6426:	f3af 8000 	nop.w
    642a:	e7ec      	b.n	6406 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    642c:	f000 fec8 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6430:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    6434:	ebb3 0c00 	subs.w	ip, r3, r0
    6438:	eb72 0c01 	sbcs.w	ip, r2, r1
    643c:	d204      	bcs.n	6448 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    643e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    6442:	2070      	movs	r0, #112	; 0x70
    6444:	f001 fc6c 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6448:	1a18      	subs	r0, r3, r0
    644a:	eb62 0101 	sbc.w	r1, r2, r1
    644e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    6452:	f171 0100 	sbcs.w	r1, r1, #0
    6456:	d304      	bcc.n	6462 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    6458:	f240 71ef 	movw	r1, #2031	; 0x7ef
    645c:	2070      	movs	r0, #112	; 0x70
    645e:	f001 fc5f 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6462:	f003 fcef 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6466:	6871      	ldr	r1, [r6, #4]
    6468:	b129      	cbz	r1, 6476 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    646a:	e003      	b.n	6474 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    646c:	6871      	ldr	r1, [r6, #4]
    646e:	f04f 30ff 	mov.w	r0, #4294967295
    6472:	b101      	cbz	r1, 6476 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    6474:	4788      	blx	r1
    6476:	9806      	ldr	r0, [sp, #24]
    6478:	b148      	cbz	r0, 648e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    647a:	b124      	cbz	r4, 6486 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    647c:	2100      	movs	r1, #0
    647e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    6482:	f3af 8000 	nop.w
    6486:	9807      	ldr	r0, [sp, #28]
    6488:	b00d      	add	sp, #52	; 0x34
    648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    648e:	4805      	ldr	r0, [pc, #20]	; (64a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    6490:	2800      	cmp	r0, #0
    6492:	bf18      	it	ne
    6494:	f3af 8000 	nopne.w
    6498:	b662      	cpsie	i
    649a:	e7ee      	b.n	647a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    649c:	20000d40 	.word	0x20000d40
	...
    64ac:	20000120 	.word	0x20000120

000064b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    64b0:	b510      	push	{r4, lr}
    64b2:	2820      	cmp	r0, #32
    64b4:	d211      	bcs.n	64da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    64b6:	490e      	ldr	r1, [pc, #56]	; (64f0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    64b8:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    64bc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    64c0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    64c4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    64c8:	b13b      	cbz	r3, 64da <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    64ca:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    64ce:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    64d2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    64d6:	2a01      	cmp	r2, #1
    64d8:	d001      	beq.n	64de <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    64da:	2000      	movs	r0, #0
    64dc:	bd10      	pop	{r4, pc}
    64de:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    64e2:	4601      	mov	r1, r0
    64e4:	2000      	movs	r0, #0
    64e6:	f7fe ff17 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    64ea:	2001      	movs	r0, #1
    64ec:	bd10      	pop	{r4, pc}
    64ee:	0000      	.short	0x0000
    64f0:	20000d40 	.word	0x20000d40

000064f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    64f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64f8:	4e86      	ldr	r6, [pc, #536]	; (6714 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    64fa:	4680      	mov	r8, r0
    64fc:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    6500:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    6504:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    6508:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    650c:	2800      	cmp	r0, #0
    650e:	d071      	beq.n	65f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    6510:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    6514:	4d80      	ldr	r5, [pc, #512]	; (6718 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    6516:	b125      	cbz	r5, 6522 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    6518:	2100      	movs	r1, #0
    651a:	f640 307b 	movw	r0, #2939	; 0xb7b
    651e:	f3af 8000 	nop.w
    6522:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    6526:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    652a:	2801      	cmp	r0, #1
    652c:	d018      	beq.n	6560 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    652e:	b2c0      	uxtb	r0, r0
    6530:	2804      	cmp	r0, #4
    6532:	bf1c      	itt	ne
    6534:	2805      	cmpne	r0, #5
    6536:	2806      	cmpne	r0, #6
    6538:	d061      	beq.n	65fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    653a:	b12d      	cbz	r5, 6548 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    653c:	f04f 0100 	mov.w	r1, #0
    6540:	f640 3087 	movw	r0, #2951	; 0xb87
    6544:	f3af 8000 	nop.w
    6548:	f003 fdb2 	bl	a0b0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    654c:	b125      	cbz	r5, 6558 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    654e:	2100      	movs	r1, #0
    6550:	f640 308b 	movw	r0, #2955	; 0xb8b
    6554:	f3af 8000 	nop.w
    6558:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    655c:	2801      	cmp	r0, #1
    655e:	d1e6      	bne.n	652e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    6560:	2401      	movs	r4, #1
    6562:	b125      	cbz	r5, 656e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    6564:	2100      	movs	r1, #0
    6566:	f640 3092 	movw	r0, #2962	; 0xb92
    656a:	f3af 8000 	nop.w
    656e:	2c00      	cmp	r4, #0
    6570:	d04b      	beq.n	660a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    6572:	2000      	movs	r0, #0
    6574:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    6578:	b125      	cbz	r5, 6584 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    657a:	2100      	movs	r1, #0
    657c:	f640 3097 	movw	r0, #2967	; 0xb97
    6580:	f3af 8000 	nop.w
    6584:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    6588:	2001      	movs	r0, #1
    658a:	ea20 090b 	bic.w	r9, r0, fp
    658e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    6592:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    6596:	2240      	movs	r2, #64	; 0x40
    6598:	f003 fde4 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    659c:	b125      	cbz	r5, 65a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    659e:	2100      	movs	r1, #0
    65a0:	f240 503c 	movw	r0, #1340	; 0x53c
    65a4:	f3af 8000 	nop.w
    65a8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    65ac:	eb00 0a06 	add.w	sl, r0, r6
    65b0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    65b4:	4430      	add	r0, r6
    65b6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    65b8:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    65bc:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    65c0:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    65c4:	b125      	cbz	r5, 65d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    65c6:	2100      	movs	r1, #0
    65c8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    65cc:	f3af 8000 	nop.w
    65d0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    65d4:	f88d 0000 	strb.w	r0, [sp]
    65d8:	f89d 0000 	ldrb.w	r0, [sp]
    65dc:	b1e0      	cbz	r0, 6618 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    65de:	2d00      	cmp	r5, #0
    65e0:	bf1c      	itt	ne
    65e2:	2100      	movne	r1, #0
    65e4:	f640 309d 	movwne	r0, #2973	; 0xb9d
    65e8:	d0bb      	beq.n	6562 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    65ea:	bf00      	nop
    65ec:	f3af 8000 	nop.w
    65f0:	e7b7      	b.n	6562 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    65f2:	e7ff      	b.n	65f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    65f4:	f640 3172 	movw	r1, #2930	; 0xb72
    65f8:	2070      	movs	r0, #112	; 0x70
    65fa:	f001 fb91 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    65fe:	464a      	mov	r2, r9
    6600:	4641      	mov	r1, r8
    6602:	2001      	movs	r0, #1
    6604:	f7fe fe88 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6608:	e7a0      	b.n	654c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    660a:	4844      	ldr	r0, [pc, #272]	; (671c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    660c:	2800      	cmp	r0, #0
    660e:	bf18      	it	ne
    6610:	f3af 8000 	nopne.w
    6614:	b662      	cpsie	i
    6616:	e7ac      	b.n	6572 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    6618:	b125      	cbz	r5, 6624 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    661a:	2100      	movs	r1, #0
    661c:	f640 30a1 	movw	r0, #2977	; 0xba1
    6620:	f3af 8000 	nop.w
    6624:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    6628:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    662c:	4640      	mov	r0, r8
    662e:	461c      	mov	r4, r3
    6630:	f04f 0b20 	mov.w	fp, #32
    6634:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    6638:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    663c:	e004      	b.n	6648 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    663e:	46a3      	mov	fp, r4
    6640:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    6644:	f89c 4001 	ldrb.w	r4, [ip, #1]
    6648:	4284      	cmp	r4, r0
    664a:	d002      	beq.n	6652 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    664c:	2c20      	cmp	r4, #32
    664e:	d02b      	beq.n	66a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    6650:	e7f5      	b.n	663e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    6652:	2c20      	cmp	r4, #32
    6654:	d028      	beq.n	66a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    6656:	42a3      	cmp	r3, r4
    6658:	d104      	bne.n	6664 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    665a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    665e:	7840      	ldrb	r0, [r0, #1]
    6660:	7008      	strb	r0, [r1, #0]
    6662:	e005      	b.n	6670 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    6664:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    6668:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    666c:	7840      	ldrb	r0, [r0, #1]
    666e:	7048      	strb	r0, [r1, #1]
    6670:	f1ba 0f00 	cmp.w	sl, #0
    6674:	d011      	beq.n	669a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    6676:	b125      	cbz	r5, 6682 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    6678:	2100      	movs	r1, #0
    667a:	f240 409c 	movw	r0, #1180	; 0x49c
    667e:	f3af 8000 	nop.w
    6682:	f89a 0000 	ldrb.w	r0, [sl]
    6686:	42a0      	cmp	r0, r4
    6688:	d107      	bne.n	669a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    668a:	b125      	cbz	r5, 6696 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    668c:	2100      	movs	r1, #0
    668e:	f240 409f 	movw	r0, #1183	; 0x49f
    6692:	f3af 8000 	nop.w
    6696:	f88a b000 	strb.w	fp, [sl]
    669a:	b15d      	cbz	r5, 66b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    669c:	2100      	movs	r1, #0
    669e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    66a2:	f3af 8000 	nop.w
    66a6:	e000      	b.n	66aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    66a8:	b125      	cbz	r5, 66b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    66aa:	2100      	movs	r1, #0
    66ac:	f640 30a5 	movw	r0, #2981	; 0xba5
    66b0:	f3af 8000 	nop.w
    66b4:	481a      	ldr	r0, [pc, #104]	; (6720 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    66b6:	2800      	cmp	r0, #0
    66b8:	bf18      	it	ne
    66ba:	f3af 8000 	nopne.w
    66be:	f3ef 8410 	mrs	r4, PRIMASK
    66c2:	b672      	cpsid	i
    66c4:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    66c8:	f88d 0000 	strb.w	r0, [sp]
    66cc:	f89d 0000 	ldrb.w	r0, [sp]
    66d0:	b138      	cbz	r0, 66e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    66d2:	2d00      	cmp	r5, #0
    66d4:	bf1c      	itt	ne
    66d6:	2100      	movne	r1, #0
    66d8:	f640 30ab 	movwne	r0, #2987	; 0xbab
    66dc:	f43f af41 	beq.w	6562 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    66e0:	e784      	b.n	65ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    66e2:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    66e6:	20ff      	movs	r0, #255	; 0xff
    66e8:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    66ec:	b154      	cbz	r4, 6704 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    66ee:	2d00      	cmp	r5, #0
    66f0:	bf08      	it	eq
    66f2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66f6:	2100      	movs	r1, #0
    66f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    66fc:	f3af 8000 	nop.w
    6700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6704:	4805      	ldr	r0, [pc, #20]	; (671c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    6706:	2800      	cmp	r0, #0
    6708:	bf18      	it	ne
    670a:	f3af 8000 	nopne.w
    670e:	b662      	cpsie	i
    6710:	e7ed      	b.n	66ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    6712:	0000      	.short	0x0000
    6714:	20000d40 	.word	0x20000d40
	...

00006724 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    6724:	b570      	push	{r4, r5, r6, lr}
    6726:	460d      	mov	r5, r1
    6728:	4606      	mov	r6, r0
    672a:	f001 fa6f 	bl	7c0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    672e:	480d      	ldr	r0, [pc, #52]	; (6764 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    6730:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    6734:	2400      	movs	r4, #0
    6736:	3880      	subs	r0, #128	; 0x80
    6738:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    673c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    6740:	b129      	cbz	r1, 674e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    6742:	1c61      	adds	r1, r4, #1
    6744:	b2cc      	uxtb	r4, r1
    6746:	2c20      	cmp	r4, #32
    6748:	d3f8      	bcc.n	673c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    674a:	2020      	movs	r0, #32
    674c:	bd70      	pop	{r4, r5, r6, pc}
    674e:	4806      	ldr	r0, [pc, #24]	; (6768 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    6750:	4621      	mov	r1, r4
    6752:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    6756:	e9c0 6500 	strd	r6, r5, [r0]
    675a:	2001      	movs	r0, #1
    675c:	f7fe fddc 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    6760:	4620      	mov	r0, r4
    6762:	bd70      	pop	{r4, r5, r6, pc}
    6764:	20000d40 	.word	0x20000d40
    6768:	200008c0 	.word	0x200008c0

0000676c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    676c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6770:	f000 fd26 	bl	71c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    6774:	4606      	mov	r6, r0
    6776:	460f      	mov	r7, r1
    6778:	f000 fe66 	bl	7448 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    677c:	4c65      	ldr	r4, [pc, #404]	; (6914 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    677e:	6860      	ldr	r0, [r4, #4]
    6780:	f1b0 3fff 	cmp.w	r0, #4294967295
    6784:	bf1c      	itt	ne
    6786:	f04f 30ff 	movne.w	r0, #4294967295
    678a:	6060      	strne	r0, [r4, #4]
    678c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    6790:	f8df b184 	ldr.w	fp, [pc, #388]	; 6918 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    6794:	2500      	movs	r5, #0
    6796:	bb10      	cbnz	r0, 67de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    6798:	f44f 710c 	mov.w	r1, #560	; 0x230
    679c:	6920      	ldr	r0, [r4, #16]
    679e:	f001 fa21 	bl	7be4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    67a2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    67a6:	68a1      	ldr	r1, [r4, #8]
    67a8:	1818      	adds	r0, r3, r0
    67aa:	eb45 0305 	adc.w	r3, r5, r5
    67ae:	1809      	adds	r1, r1, r0
    67b0:	eb42 0003 	adc.w	r0, r2, r3
    67b4:	1a71      	subs	r1, r6, r1
    67b6:	eb77 0000 	sbcs.w	r0, r7, r0
    67ba:	d310      	bcc.n	67de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    67bc:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    67c0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    67c4:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    67c8:	6840      	ldr	r0, [r0, #4]
    67ca:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    67ce:	680a      	ldr	r2, [r1, #0]
    67d0:	2108      	movs	r1, #8
    67d2:	4790      	blx	r2
    67d4:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    67d8:	2070      	movs	r0, #112	; 0x70
    67da:	f001 faa1 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    67de:	7e60      	ldrb	r0, [r4, #25]
    67e0:	b180      	cbz	r0, 6804 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    67e2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    67e6:	f88d 0000 	strb.w	r0, [sp]
    67ea:	f89d 0000 	ldrb.w	r0, [sp]
    67ee:	b148      	cbz	r0, 6804 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    67f0:	f000 fc5c 	bl	70ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    67f4:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    67f8:	b150      	cbz	r0, 6810 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    67fa:	f240 31cd 	movw	r1, #973	; 0x3cd
    67fe:	2070      	movs	r0, #112	; 0x70
    6800:	f001 fa8e 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6804:	1cf0      	adds	r0, r6, #3
    6806:	f147 0100 	adc.w	r1, r7, #0
    680a:	f000 fb29 	bl	6e60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    680e:	e7f1      	b.n	67f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    6810:	2001      	movs	r0, #1
    6812:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    6816:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    681a:	2820      	cmp	r0, #32
    681c:	d020      	beq.n	6860 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    681e:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    6822:	2020      	movs	r0, #32
    6824:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    6828:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    682c:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    6830:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    6834:	6025      	str	r5, [r4, #0]
    6836:	f000 ff01 	bl	763c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    683a:	f884 0020 	strb.w	r0, [r4, #32]
    683e:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    6842:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    6846:	eb00 0a04 	add.w	sl, r0, r4
    684a:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    684e:	2820      	cmp	r0, #32
    6850:	d01c      	beq.n	688c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6852:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    6856:	f89b 001a 	ldrb.w	r0, [fp, #26]
    685a:	2801      	cmp	r0, #1
    685c:	d005      	beq.n	686a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    685e:	e015      	b.n	688c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6860:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    6864:	2070      	movs	r0, #112	; 0x70
    6866:	f001 fa5b 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    686a:	2201      	movs	r2, #1
    686c:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    6870:	4630      	mov	r0, r6
    6872:	4639      	mov	r1, r7
    6874:	f7fe f8bc 	bl	49f0 <MPSL_IRQ_RADIO_Handler+0x3e4>
    6878:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    687c:	1a12      	subs	r2, r2, r0
    687e:	eb73 0201 	sbcs.w	r2, r3, r1
    6882:	bf24      	itt	cs
    6884:	f10b 0208 	addcs.w	r2, fp, #8
    6888:	e9c2 0100 	strdcs	r0, r1, [r2]
    688c:	4641      	mov	r1, r8
    688e:	2001      	movs	r0, #1
    6890:	f7fe fd74 	bl	537c <MPSL_IRQ_RADIO_Handler+0xd70>
    6894:	0007      	movs	r7, r0
    6896:	d0f9      	beq.n	688c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    6898:	4820      	ldr	r0, [pc, #128]	; (691c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    689a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    689e:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    68a2:	2802      	cmp	r0, #2
    68a4:	d104      	bne.n	68b0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    68a6:	4642      	mov	r2, r8
    68a8:	4649      	mov	r1, r9
    68aa:	2006      	movs	r0, #6
    68ac:	f7fe fd34 	bl	5318 <MPSL_IRQ_RADIO_Handler+0xd0c>
    68b0:	20ff      	movs	r0, #255	; 0xff
    68b2:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    68b6:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    68ba:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6920 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    68be:	2820      	cmp	r0, #32
    68c0:	bf1c      	itt	ne
    68c2:	f898 0001 	ldrbne.w	r0, [r8, #1]
    68c6:	f001 fafd 	blne	7ec4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    68ca:	f894 0020 	ldrb.w	r0, [r4, #32]
    68ce:	b128      	cbz	r0, 68dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    68d0:	f000 fe90 	bl	75f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    68d4:	f884 5020 	strb.w	r5, [r4, #32]
    68d8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    68dc:	2f02      	cmp	r7, #2
    68de:	d00f      	beq.n	6900 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    68e0:	2f01      	cmp	r7, #1
    68e2:	bf18      	it	ne
    68e4:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68e8:	f04f 30ff 	mov.w	r0, #4294967295
    68ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
    68f0:	2900      	cmp	r1, #0
    68f2:	bf08      	it	eq
    68f4:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68f8:	b001      	add	sp, #4
    68fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68fe:	4708      	bx	r1
    6900:	68a0      	ldr	r0, [r4, #8]
    6902:	1b80      	subs	r0, r0, r6
    6904:	f003 fa9e 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6908:	f8d8 1004 	ldr.w	r1, [r8, #4]
    690c:	2900      	cmp	r1, #0
    690e:	d1f3      	bne.n	68f8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    6910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6914:	20000d40 	.word	0x20000d40
    6918:	200008c0 	.word	0x200008c0
    691c:	20000cc0 	.word	0x20000cc0
    6920:	20000120 	.word	0x20000120

00006924 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    6924:	b570      	push	{r4, r5, r6, lr}
    6926:	4c42      	ldr	r4, [pc, #264]	; (6a30 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    6928:	4605      	mov	r5, r0
    692a:	b082      	sub	sp, #8
    692c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6930:	2820      	cmp	r0, #32
    6932:	d008      	beq.n	6946 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    6934:	6860      	ldr	r0, [r4, #4]
    6936:	f1b0 3fff 	cmp.w	r0, #4294967295
    693a:	d009      	beq.n	6950 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    693c:	f640 21b6 	movw	r1, #2742	; 0xab6
    6940:	2070      	movs	r0, #112	; 0x70
    6942:	f001 f9ed 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6946:	f640 21b5 	movw	r1, #2741	; 0xab5
    694a:	2070      	movs	r0, #112	; 0x70
    694c:	f001 f9e8 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6950:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    6954:	4937      	ldr	r1, [pc, #220]	; (6a34 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    6956:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    695a:	68b0      	ldr	r0, [r6, #8]
    695c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6960:	f003 fa70 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    6964:	4602      	mov	r2, r0
    6966:	8af0      	ldrh	r0, [r6, #22]
    6968:	7d31      	ldrb	r1, [r6, #20]
    696a:	4b33      	ldr	r3, [pc, #204]	; (6a38 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    696c:	4408      	add	r0, r1
    696e:	1c40      	adds	r0, r0, #1
    6970:	1811      	adds	r1, r2, r0
    6972:	429a      	cmp	r2, r3
    6974:	d817      	bhi.n	69a6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    6976:	4a31      	ldr	r2, [pc, #196]	; (6a3c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    6978:	4290      	cmp	r0, r2
    697a:	dc1b      	bgt.n	69b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    697c:	f1c2 0c00 	rsb	ip, r2, #0
    6980:	4560      	cmp	r0, ip
    6982:	db1e      	blt.n	69c2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    6984:	0056      	lsls	r6, r2, #1
    6986:	428e      	cmp	r6, r1
    6988:	bfdc      	itt	le
    698a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    698e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    6992:	dd05      	ble.n	69a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    6994:	2900      	cmp	r1, #0
    6996:	bfbc      	itt	lt
    6998:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    699c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    69a0:	1948      	adds	r0, r1, r5
    69a2:	4299      	cmp	r1, r3
    69a4:	d904      	bls.n	69b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    69a6:	f240 517f 	movw	r1, #1407	; 0x57f
    69aa:	2070      	movs	r0, #112	; 0x70
    69ac:	f001 f9b8 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69b0:	4295      	cmp	r5, r2
    69b2:	dd04      	ble.n	69be <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    69b4:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    69b8:	2070      	movs	r0, #112	; 0x70
    69ba:	f001 f9b1 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69be:	4565      	cmp	r5, ip
    69c0:	da04      	bge.n	69cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    69c2:	f240 5181 	movw	r1, #1409	; 0x581
    69c6:	2070      	movs	r0, #112	; 0x70
    69c8:	f001 f9aa 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    69cc:	4286      	cmp	r6, r0
    69ce:	bfdc      	itt	le
    69d0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    69d4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    69d8:	dd05      	ble.n	69e6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    69da:	2800      	cmp	r0, #0
    69dc:	bfbc      	itt	lt
    69de:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    69e2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    69e6:	aa01      	add	r2, sp, #4
    69e8:	4669      	mov	r1, sp
    69ea:	f000 f909 	bl	6c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    69ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
    69f2:	280f      	cmp	r0, #15
    69f4:	bf8c      	ite	hi
    69f6:	2001      	movhi	r0, #1
    69f8:	2000      	movls	r0, #0
    69fa:	9900      	ldr	r1, [sp, #0]
    69fc:	4408      	add	r0, r1
    69fe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    6a02:	6061      	str	r1, [r4, #4]
    6a04:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    6a08:	f88d 0000 	strb.w	r0, [sp]
    6a0c:	f89d 0000 	ldrb.w	r0, [sp]
    6a10:	2800      	cmp	r0, #0
    6a12:	bf04      	itt	eq
    6a14:	b002      	addeq	sp, #8
    6a16:	bd70      	popeq	{r4, r5, r6, pc}
    6a18:	2005      	movs	r0, #5
    6a1a:	f000 fbf3 	bl	7204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    6a1e:	2800      	cmp	r0, #0
    6a20:	bf1c      	itt	ne
    6a22:	b002      	addne	sp, #8
    6a24:	bd70      	popne	{r4, r5, r6, pc}
    6a26:	f640 21bd 	movw	r1, #2749	; 0xabd
    6a2a:	2070      	movs	r0, #112	; 0x70
    6a2c:	f001 f978 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6a30:	20000d40 	.word	0x20000d40
    6a34:	200008c0 	.word	0x200008c0
    6a38:	1e847fff 	.word	0x1e847fff
    6a3c:	0f424000 	.word	0x0f424000

00006a40 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    6a40:	b570      	push	{r4, r5, r6, lr}
    6a42:	4c1e      	ldr	r4, [pc, #120]	; (6abc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    6a44:	2120      	movs	r1, #32
    6a46:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    6a4a:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    6a4e:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    6a52:	2000      	movs	r0, #0
    6a54:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    6a58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    6a5c:	1e42      	subs	r2, r0, #1
    6a5e:	e9c4 0200 	strd	r0, r2, [r4]
    6a62:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    6a66:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    6a6a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    6a6e:	f884 0020 	strb.w	r0, [r4, #32]
    6a72:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    6a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    6a7a:	1e41      	subs	r1, r0, #1
    6a7c:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    6a80:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    6a84:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    6a88:	2210      	movs	r2, #16
    6a8a:	7088      	strb	r0, [r1, #2]
    6a8c:	f801 0f04 	strb.w	r0, [r1, #4]!
    6a90:	1e52      	subs	r2, r2, #1
    6a92:	d1fa      	bne.n	6a8a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    6a94:	f000 fddc 	bl	7650 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    6a98:	4d09      	ldr	r5, [pc, #36]	; (6ac0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    6a9a:	2601      	movs	r6, #1
    6a9c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    6aa0:	20ff      	movs	r0, #255	; 0xff
    6aa2:	7028      	strb	r0, [r5, #0]
    6aa4:	4807      	ldr	r0, [pc, #28]	; (6ac4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    6aa6:	f001 f9ef 	bl	7e88 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    6aaa:	7068      	strb	r0, [r5, #1]
    6aac:	f001 fa5a 	bl	7f64 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    6ab0:	60a8      	str	r0, [r5, #8]
    6ab2:	f000 fd5f 	bl	7574 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    6ab6:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    6aba:	bd70      	pop	{r4, r5, r6, pc}
    6abc:	20000d40 	.word	0x20000d40
    6ac0:	20000120 	.word	0x20000120
    6ac4:	00005249 	.word	0x00005249

00006ac8 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    6ac8:	b570      	push	{r4, r5, r6, lr}
    6aca:	4605      	mov	r5, r0
    6acc:	2001      	movs	r0, #1
    6ace:	fa00 f405 	lsl.w	r4, r0, r5
    6ad2:	460e      	mov	r6, r1
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	bf08      	it	eq
    6ad8:	4808      	ldreq	r0, [pc, #32]	; (6afc <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    6ada:	d00c      	beq.n	6af6 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    6adc:	2000      	movs	r0, #0
    6ade:	f000 fd2f 	bl	7540 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    6ae2:	00e9      	lsls	r1, r5, #3
    6ae4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6ae8:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    6aec:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    6af0:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    6af4:	4802      	ldr	r0, [pc, #8]	; (6b00 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    6af6:	6004      	str	r4, [r0, #0]
    6af8:	bd70      	pop	{r4, r5, r6, pc}
    6afa:	0000      	.short	0x0000
    6afc:	4001f508 	.word	0x4001f508
    6b00:	4001f504 	.word	0x4001f504

00006b04 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    6b04:	0e03      	lsrs	r3, r0, #24
    6b06:	b430      	push	{r4, r5}
    6b08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    6b0c:	f8df c038 	ldr.w	ip, [pc, #56]	; 6b48 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    6b10:	0e09      	lsrs	r1, r1, #24
    6b12:	fba3 250c 	umull	r2, r5, r3, ip
    6b16:	fb01 510c 	mla	r1, r1, ip, r5
    6b1a:	2400      	movs	r4, #0
    6b1c:	fb03 1104 	mla	r1, r3, r4, r1
    6b20:	f647 73ff 	movw	r3, #32767	; 0x7fff
    6b24:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    6b28:	f643 5c09 	movw	ip, #15625	; 0x3d09
    6b2c:	fb13 f30c 	smulbb	r3, r3, ip
    6b30:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6b34:	fb10 f00c 	smulbb	r0, r0, ip
    6b38:	f500 7080 	add.w	r0, r0, #256	; 0x100
    6b3c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    6b40:	1880      	adds	r0, r0, r2
    6b42:	4161      	adcs	r1, r4
    6b44:	bc30      	pop	{r4, r5}
    6b46:	4770      	bx	lr
    6b48:	1e848000 	.word	0x1e848000

00006b4c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    6b4c:	b570      	push	{r4, r5, r6, lr}
    6b4e:	b084      	sub	sp, #16
    6b50:	4615      	mov	r5, r2
    6b52:	aa01      	add	r2, sp, #4
    6b54:	461c      	mov	r4, r3
    6b56:	9200      	str	r2, [sp, #0]
    6b58:	9e08      	ldr	r6, [sp, #32]
    6b5a:	ab02      	add	r3, sp, #8
    6b5c:	4a17      	ldr	r2, [pc, #92]	; (6bbc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    6b5e:	f003 faf2 	bl	a146 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    6b62:	9801      	ldr	r0, [sp, #4]
    6b64:	f248 6237 	movw	r2, #34359	; 0x8637
    6b68:	0b41      	lsrs	r1, r0, #13
    6b6a:	4351      	muls	r1, r2
    6b6c:	0c09      	lsrs	r1, r1, #16
    6b6e:	4a14      	ldr	r2, [pc, #80]	; (6bc0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    6b70:	024b      	lsls	r3, r1, #9
    6b72:	fb01 0102 	mla	r1, r1, r2, r0
    6b76:	4813      	ldr	r0, [pc, #76]	; (6bc4 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    6b78:	4348      	muls	r0, r1
    6b7a:	0d42      	lsrs	r2, r0, #21
    6b7c:	1898      	adds	r0, r3, r2
    6b7e:	f643 5309 	movw	r3, #15625	; 0x3d09
    6b82:	fb12 f303 	smulbb	r3, r2, r3
    6b86:	f503 7280 	add.w	r2, r3, #256	; 0x100
    6b8a:	f643 5c08 	movw	ip, #15624	; 0x3d08
    6b8e:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    6b92:	4463      	add	r3, ip
    6b94:	b2d2      	uxtb	r2, r2
    6b96:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    6b9a:	bf84      	itt	hi
    6b9c:	2200      	movhi	r2, #0
    6b9e:	1c40      	addhi	r0, r0, #1
    6ba0:	7032      	strb	r2, [r6, #0]
    6ba2:	9b02      	ldr	r3, [sp, #8]
    6ba4:	0a19      	lsrs	r1, r3, #8
    6ba6:	061b      	lsls	r3, r3, #24
    6ba8:	1818      	adds	r0, r3, r0
    6baa:	f141 0100 	adc.w	r1, r1, #0
    6bae:	e9c4 0100 	strd	r0, r1, [r4]
    6bb2:	9801      	ldr	r0, [sp, #4]
    6bb4:	6028      	str	r0, [r5, #0]
    6bb6:	b004      	add	sp, #16
    6bb8:	bd70      	pop	{r4, r5, r6, pc}
    6bba:	0000      	.short	0x0000
    6bbc:	1e848000 	.word	0x1e848000
    6bc0:	ffffc2f7 	.word	0xffffc2f7
    6bc4:	00010c6f 	.word	0x00010c6f

00006bc8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    6bc8:	0b41      	lsrs	r1, r0, #13
    6bca:	f248 6237 	movw	r2, #34359	; 0x8637
    6bce:	4351      	muls	r1, r2
    6bd0:	0c0a      	lsrs	r2, r1, #16
    6bd2:	4b09      	ldr	r3, [pc, #36]	; (6bf8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    6bd4:	0251      	lsls	r1, r2, #9
    6bd6:	fb02 0203 	mla	r2, r2, r3, r0
    6bda:	4808      	ldr	r0, [pc, #32]	; (6bfc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    6bdc:	4350      	muls	r0, r2
    6bde:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    6be2:	306e      	adds	r0, #110	; 0x6e
    6be4:	0d40      	lsrs	r0, r0, #21
    6be6:	425b      	negs	r3, r3
    6be8:	fb10 f303 	smulbb	r3, r0, r3
    6bec:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    6bf0:	bf88      	it	hi
    6bf2:	1c49      	addhi	r1, r1, #1
    6bf4:	4408      	add	r0, r1
    6bf6:	4770      	bx	lr
    6bf8:	ffffc2f7 	.word	0xffffc2f7
    6bfc:	00010c6f 	.word	0x00010c6f

00006c00 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    6c00:	0b43      	lsrs	r3, r0, #13
    6c02:	f248 6c37 	movw	ip, #34359	; 0x8637
    6c06:	fb03 f30c 	mul.w	r3, r3, ip
    6c0a:	b430      	push	{r4, r5}
    6c0c:	0c1b      	lsrs	r3, r3, #16
    6c0e:	f8df c044 	ldr.w	ip, [pc, #68]	; 6c54 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    6c12:	025c      	lsls	r4, r3, #9
    6c14:	fb03 030c 	mla	r3, r3, ip, r0
    6c18:	480f      	ldr	r0, [pc, #60]	; (6c58 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    6c1a:	4358      	muls	r0, r3
    6c1c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    6c20:	eb04 000c 	add.w	r0, r4, ip
    6c24:	f643 5409 	movw	r4, #15625	; 0x3d09
    6c28:	fb1c f404 	smulbb	r4, ip, r4
    6c2c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    6c30:	f643 5508 	movw	r5, #15624	; 0x3d08
    6c34:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    6c38:	442c      	add	r4, r5
    6c3a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    6c3e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    6c42:	bf84      	itt	hi
    6c44:	f04f 0c00 	movhi.w	ip, #0
    6c48:	1c40      	addhi	r0, r0, #1
    6c4a:	6008      	str	r0, [r1, #0]
    6c4c:	f882 c000 	strb.w	ip, [r2]
    6c50:	bc30      	pop	{r4, r5}
    6c52:	4770      	bx	lr
    6c54:	ffffc2f7 	.word	0xffffc2f7
    6c58:	00010c6f 	.word	0x00010c6f

00006c5c <MPSL_IRQ_RTC0_Handler>:
    6c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c60:	2400      	movs	r4, #0
    6c62:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6ce4 <MPSL_IRQ_RTC0_Handler+0x88>
    6c66:	4d20      	ldr	r5, [pc, #128]	; (6ce8 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6c68:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    6c6c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    6c70:	ea4f 0604 	mov.w	r6, r4
    6c74:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    6c78:	fa07 f004 	lsl.w	r0, r7, r4
    6c7c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    6c80:	4202      	tst	r2, r0
    6c82:	d01a      	beq.n	6cba <MPSL_IRQ_RTC0_Handler+0x5e>
    6c84:	4a18      	ldr	r2, [pc, #96]	; (6ce8 <MPSL_IRQ_RTC0_Handler+0x8c>)
    6c86:	5852      	ldr	r2, [r2, r1]
    6c88:	b1ba      	cbz	r2, 6cba <MPSL_IRQ_RTC0_Handler+0x5e>
    6c8a:	506e      	str	r6, [r5, r1]
    6c8c:	00a1      	lsls	r1, r4, #2
    6c8e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6c92:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    6c96:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    6c9a:	f8d9 2000 	ldr.w	r2, [r9]
    6c9e:	1a89      	subs	r1, r1, r2
    6ca0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6ca4:	2902      	cmp	r1, #2
    6ca6:	d302      	bcc.n	6cae <MPSL_IRQ_RTC0_Handler+0x52>
    6ca8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    6cac:	d905      	bls.n	6cba <MPSL_IRQ_RTC0_Handler+0x5e>
    6cae:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    6cb2:	1d20      	adds	r0, r4, #4
    6cb4:	b2c0      	uxtb	r0, r0
    6cb6:	f7fe fd6f 	bl	5798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6cba:	1c60      	adds	r0, r4, #1
    6cbc:	b2c4      	uxtb	r4, r0
    6cbe:	2c03      	cmp	r4, #3
    6cc0:	d3d8      	bcc.n	6c74 <MPSL_IRQ_RTC0_Handler+0x18>
    6cc2:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    6cc6:	b128      	cbz	r0, 6cd4 <MPSL_IRQ_RTC0_Handler+0x78>
    6cc8:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    6ccc:	4807      	ldr	r0, [pc, #28]	; (6cec <MPSL_IRQ_RTC0_Handler+0x90>)
    6cce:	6881      	ldr	r1, [r0, #8]
    6cd0:	1c49      	adds	r1, r1, #1
    6cd2:	6081      	str	r1, [r0, #8]
    6cd4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    6cd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    6cdc:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    6ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ce4:	4000b504 	.word	0x4000b504
    6ce8:	4000b000 	.word	0x4000b000
    6cec:	20000028 	.word	0x20000028

00006cf0 <MPSL_IRQ_TIMER0_Handler>:
    6cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cf4:	4d38      	ldr	r5, [pc, #224]	; (6dd8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    6cf6:	7828      	ldrb	r0, [r5, #0]
    6cf8:	2804      	cmp	r0, #4
    6cfa:	d068      	beq.n	6dce <MPSL_IRQ_TIMER0_Handler+0xde>
    6cfc:	1ca8      	adds	r0, r5, #2
    6cfe:	2201      	movs	r2, #1
    6d00:	7801      	ldrb	r1, [r0, #0]
    6d02:	b159      	cbz	r1, 6d1c <MPSL_IRQ_TIMER0_Handler+0x2c>
    6d04:	2901      	cmp	r1, #1
    6d06:	bf08      	it	eq
    6d08:	706a      	strbeq	r2, [r5, #1]
    6d0a:	d002      	beq.n	6d12 <MPSL_IRQ_TIMER0_Handler+0x22>
    6d0c:	7869      	ldrb	r1, [r5, #1]
    6d0e:	2900      	cmp	r1, #0
    6d10:	d058      	beq.n	6dc4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    6d12:	2102      	movs	r1, #2
    6d14:	7001      	strb	r1, [r0, #0]
    6d16:	7840      	ldrb	r0, [r0, #1]
    6d18:	f000 fb2e 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d1c:	4c2f      	ldr	r4, [pc, #188]	; (6ddc <MPSL_IRQ_TIMER0_Handler+0xec>)
    6d1e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d22:	f04f 0800 	mov.w	r8, #0
    6d26:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    6d2a:	f44f 7780 	mov.w	r7, #256	; 0x100
    6d2e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    6d32:	d00a      	beq.n	6d4a <MPSL_IRQ_TIMER0_Handler+0x5a>
    6d34:	482a      	ldr	r0, [pc, #168]	; (6de0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    6d36:	6800      	ldr	r0, [r0, #0]
    6d38:	b138      	cbz	r0, 6d4a <MPSL_IRQ_TIMER0_Handler+0x5a>
    6d3a:	2003      	movs	r0, #3
    6d3c:	f000 fb1c 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d40:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d44:	2003      	movs	r0, #3
    6d46:	f7fe fd27 	bl	5798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d4a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d4e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    6d52:	d00a      	beq.n	6d6a <MPSL_IRQ_TIMER0_Handler+0x7a>
    6d54:	4823      	ldr	r0, [pc, #140]	; (6de4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    6d56:	6800      	ldr	r0, [r0, #0]
    6d58:	b138      	cbz	r0, 6d6a <MPSL_IRQ_TIMER0_Handler+0x7a>
    6d5a:	2002      	movs	r0, #2
    6d5c:	f000 fb0c 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d60:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d64:	2002      	movs	r0, #2
    6d66:	f7fe fd17 	bl	5798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d6a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d6e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    6d72:	d00a      	beq.n	6d8a <MPSL_IRQ_TIMER0_Handler+0x9a>
    6d74:	481c      	ldr	r0, [pc, #112]	; (6de8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    6d76:	6800      	ldr	r0, [r0, #0]
    6d78:	b138      	cbz	r0, 6d8a <MPSL_IRQ_TIMER0_Handler+0x9a>
    6d7a:	2001      	movs	r0, #1
    6d7c:	f000 fafc 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6d80:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6d84:	2001      	movs	r0, #1
    6d86:	f7fe fd07 	bl	5798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6d8a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    6d8e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    6d92:	bf08      	it	eq
    6d94:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d98:	4814      	ldr	r0, [pc, #80]	; (6dec <MPSL_IRQ_TIMER0_Handler+0xfc>)
    6d9a:	6800      	ldr	r0, [r0, #0]
    6d9c:	2800      	cmp	r0, #0
    6d9e:	bf08      	it	eq
    6da0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    6da4:	2000      	movs	r0, #0
    6da6:	f000 fae7 	bl	7378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    6daa:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    6dae:	2004      	movs	r0, #4
    6db0:	7028      	strb	r0, [r5, #0]
    6db2:	f8c5 8004 	str.w	r8, [r5, #4]
    6db6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    6dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dbe:	2000      	movs	r0, #0
    6dc0:	f7fe bcea 	b.w	5798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6dc4:	f240 5169 	movw	r1, #1385	; 0x569
    6dc8:	206c      	movs	r0, #108	; 0x6c
    6dca:	f000 ffa9 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dd2:	2007      	movs	r0, #7
    6dd4:	f7fe bce0 	b.w	5798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    6dd8:	20000028 	.word	0x20000028
    6ddc:	40008000 	.word	0x40008000
    6de0:	4000814c 	.word	0x4000814c
    6de4:	40008148 	.word	0x40008148
    6de8:	40008144 	.word	0x40008144
    6dec:	40008140 	.word	0x40008140
    6df0:	2201      	movs	r2, #1
    6df2:	0211      	lsls	r1, r2, #8
    6df4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6df8:	2000      	movs	r0, #0
    6dfa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    6dfe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    6e02:	f3bf 8f4f 	dsb	sy
    6e06:	f3bf 8f6f 	isb	sy
    6e0a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6e0e:	490e      	ldr	r1, [pc, #56]	; (6e48 <MPSL_IRQ_TIMER0_Handler+0x158>)
    6e10:	f841 2f04 	str.w	r2, [r1, #4]!
    6e14:	1e43      	subs	r3, r0, #1
    6e16:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    6e1a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    6e1e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    6e22:	4b0a      	ldr	r3, [pc, #40]	; (6e4c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    6e24:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e28:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    6e2c:	1d1b      	adds	r3, r3, #4
    6e2e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e32:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    6e36:	1d1b      	adds	r3, r3, #4
    6e38:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    6e3c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    6e40:	60ca      	str	r2, [r1, #12]
    6e42:	4903      	ldr	r1, [pc, #12]	; (6e50 <MPSL_IRQ_TIMER0_Handler+0x160>)
    6e44:	7048      	strb	r0, [r1, #1]
    6e46:	4770      	bx	lr
    6e48:	40008000 	.word	0x40008000
    6e4c:	40008004 	.word	0x40008004
    6e50:	20000028 	.word	0x20000028

00006e54 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    6e54:	4801      	ldr	r0, [pc, #4]	; (6e5c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    6e56:	6800      	ldr	r0, [r0, #0]
    6e58:	4770      	bx	lr
    6e5a:	0000      	.short	0x0000
    6e5c:	4000b504 	.word	0x4000b504

00006e60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    6e60:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6e64:	f8df 8130 	ldr.w	r8, [pc, #304]	; 6f98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    6e68:	4604      	mov	r4, r0
    6e6a:	f1a8 0702 	sub.w	r7, r8, #2
    6e6e:	460e      	mov	r6, r1
    6e70:	f898 c000 	ldrb.w	ip, [r8]
    6e74:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    6e78:	f1bc 0f01 	cmp.w	ip, #1
    6e7c:	d106      	bne.n	6e8c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    6e7e:	ea81 0204 	eor.w	r2, r1, r4
    6e82:	4070      	eors	r0, r6
    6e84:	4310      	orrs	r0, r2
    6e86:	bf08      	it	eq
    6e88:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6e8c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    6e90:	4a42      	ldr	r2, [pc, #264]	; (6f9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    6e92:	6010      	str	r0, [r2, #0]
    6e94:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    6e98:	f1bc 0f00 	cmp.w	ip, #0
    6e9c:	bf07      	ittee	eq
    6e9e:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    6ea2:	2200      	moveq	r2, #0
    6ea4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    6ea8:	2201      	movne	r2, #1
    6eaa:	483d      	ldr	r0, [pc, #244]	; (6fa0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    6eac:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    6eb0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    6eb4:	2500      	movs	r5, #0
    6eb6:	f44f 79a0 	mov.w	r9, #320	; 0x140
    6eba:	2a02      	cmp	r2, #2
    6ebc:	d207      	bcs.n	6ece <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    6ebe:	bf00      	nop
    6ec0:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    6ec4:	50c5      	str	r5, [r0, r3]
    6ec6:	1c52      	adds	r2, r2, #1
    6ec8:	b2d2      	uxtb	r2, r2
    6eca:	2a02      	cmp	r2, #2
    6ecc:	d3f8      	bcc.n	6ec0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    6ece:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    6ed2:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    6ed6:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    6eda:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    6ede:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    6ee2:	4a30      	ldr	r2, [pc, #192]	; (6fa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    6ee4:	f8d2 9000 	ldr.w	r9, [r2]
    6ee8:	eba3 0909 	sub.w	r9, r3, r9
    6eec:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    6ef0:	f04f 0901 	mov.w	r9, #1
    6ef4:	f1ba 0f02 	cmp.w	sl, #2
    6ef8:	d32e      	bcc.n	6f58 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6efa:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    6efe:	d82b      	bhi.n	6f58 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    6f00:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    6f04:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    6f08:	f1bc 0f00 	cmp.w	ip, #0
    6f0c:	d005      	beq.n	6f1a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    6f0e:	6810      	ldr	r0, [r2, #0]
    6f10:	1a08      	subs	r0, r1, r0
    6f12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6f16:	2802      	cmp	r0, #2
    6f18:	d3f9      	bcc.n	6f0e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    6f1a:	f8c7 9004 	str.w	r9, [r7, #4]
    6f1e:	703d      	strb	r5, [r7, #0]
    6f20:	f7ff ff66 	bl	6df0 <MPSL_IRQ_TIMER0_Handler+0x100>
    6f24:	4820      	ldr	r0, [pc, #128]	; (6fa8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    6f26:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    6f2a:	f365 0101 	bfi	r1, r5, #0, #2
    6f2e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    6f32:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    6f36:	2102      	movs	r1, #2
    6f38:	f361 0201 	bfi	r2, r1, #0, #2
    6f3c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    6f40:	2110      	movs	r1, #16
    6f42:	fa91 f1a1 	rbit	r1, r1
    6f46:	fab1 f181 	clz	r1, r1
    6f4a:	2909      	cmp	r1, #9
    6f4c:	d909      	bls.n	6f62 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    6f4e:	f240 3155 	movw	r1, #853	; 0x355
    6f52:	a016      	add	r0, pc, #88	; (adr r0, 6fac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    6f54:	f000 feb8 	bl	7cc8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    6f58:	f240 31b2 	movw	r1, #946	; 0x3b2
    6f5c:	206c      	movs	r0, #108	; 0x6c
    6f5e:	f000 fedf 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    6f62:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    6f66:	f8c0 900c 	str.w	r9, [r0, #12]
    6f6a:	6879      	ldr	r1, [r7, #4]
    6f6c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    6f70:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    6f74:	f44f 7180 	mov.w	r1, #256	; 0x100
    6f78:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    6f7c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    6f80:	490d      	ldr	r1, [pc, #52]	; (6fb8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    6f82:	0480      	lsls	r0, r0, #18
    6f84:	6008      	str	r0, [r1, #0]
    6f86:	e9c7 4604 	strd	r4, r6, [r7, #16]
    6f8a:	2004      	movs	r0, #4
    6f8c:	f888 0001 	strb.w	r0, [r8, #1]
    6f90:	f888 9000 	strb.w	r9, [r8]
    6f94:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6f98:	2000002a 	.word	0x2000002a
    6f9c:	4001f508 	.word	0x4001f508
    6fa0:	4000b000 	.word	0x4000b000
    6fa4:	4000b504 	.word	0x4000b504
    6fa8:	40008000 	.word	0x40008000
    6fac:	5f66726e 	.word	0x5f66726e
    6fb0:	656d6974 	.word	0x656d6974
    6fb4:	00682e72 	.word	0x00682e72
    6fb8:	4001f504 	.word	0x4001f504

00006fbc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    6fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6fc0:	4c31      	ldr	r4, [pc, #196]	; (7088 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    6fc2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    6fc6:	ea82 0c00 	eor.w	ip, r2, r0
    6fca:	404b      	eors	r3, r1
    6fcc:	ea5c 0303 	orrs.w	r3, ip, r3
    6fd0:	bf14      	ite	ne
    6fd2:	2301      	movne	r3, #1
    6fd4:	2300      	moveq	r3, #0
    6fd6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 708c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    6fda:	f89c 8000 	ldrb.w	r8, [ip]
    6fde:	f1b8 0f02 	cmp.w	r8, #2
    6fe2:	d002      	beq.n	6fea <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d03f      	beq.n	7068 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    6fe8:	e003      	b.n	6ff2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    6fea:	2b00      	cmp	r3, #0
    6fec:	bf08      	it	eq
    6fee:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ff2:	7863      	ldrb	r3, [r4, #1]
    6ff4:	b3bb      	cbz	r3, 7066 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    6ff6:	4d26      	ldr	r5, [pc, #152]	; (7090 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    6ff8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    6ffc:	602b      	str	r3, [r5, #0]
    6ffe:	4e25      	ldr	r6, [pc, #148]	; (7094 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    7000:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    7004:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    7008:	462f      	mov	r7, r5
    700a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    700e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    7012:	2500      	movs	r5, #0
    7014:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    7018:	4d1f      	ldr	r5, [pc, #124]	; (7098 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    701a:	f8d5 9000 	ldr.w	r9, [r5]
    701e:	eba3 0909 	sub.w	r9, r3, r9
    7022:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    7026:	f1b9 0f02 	cmp.w	r9, #2
    702a:	d327      	bcc.n	707c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    702c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    7030:	d824      	bhi.n	707c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    7032:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    7036:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    703a:	f1b8 0f00 	cmp.w	r8, #0
    703e:	d005      	beq.n	704c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    7040:	682b      	ldr	r3, [r5, #0]
    7042:	1ad3      	subs	r3, r2, r3
    7044:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7048:	2b02      	cmp	r3, #2
    704a:	d3f9      	bcc.n	7040 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    704c:	4d13      	ldr	r5, [pc, #76]	; (709c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    704e:	2202      	movs	r2, #2
    7050:	0753      	lsls	r3, r2, #29
    7052:	602b      	str	r3, [r5, #0]
    7054:	e9c4 0104 	strd	r0, r1, [r4, #16]
    7058:	2004      	movs	r0, #4
    705a:	f88c 0001 	strb.w	r0, [ip, #1]
    705e:	f88c 2000 	strb.w	r2, [ip]
    7062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7066:	e004      	b.n	7072 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    7068:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    706c:	206c      	movs	r0, #108	; 0x6c
    706e:	f000 fe57 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7072:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    7076:	206c      	movs	r0, #108	; 0x6c
    7078:	f000 fe52 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    707c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    7080:	206c      	movs	r0, #108	; 0x6c
    7082:	f000 fe4d 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7086:	0000      	.short	0x0000
    7088:	20000028 	.word	0x20000028
    708c:	2000002a 	.word	0x2000002a
    7090:	4001f508 	.word	0x4001f508
    7094:	4000b000 	.word	0x4000b000
    7098:	4000b504 	.word	0x4000b504
    709c:	4001f504 	.word	0x4001f504

000070a0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    70a0:	4901      	ldr	r1, [pc, #4]	; (70a8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    70a2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    70a6:	4770      	bx	lr
    70a8:	20000028 	.word	0x20000028

000070ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    70ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    70b0:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 71a8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    70b4:	f89c 4000 	ldrb.w	r4, [ip]
    70b8:	2c00      	cmp	r4, #0
    70ba:	bf07      	ittee	eq
    70bc:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    70c0:	2100      	moveq	r1, #0
    70c2:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    70c6:	2101      	movne	r1, #1
    70c8:	4838      	ldr	r0, [pc, #224]	; (71ac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    70ca:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    70ce:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    70d2:	2300      	movs	r3, #0
    70d4:	2902      	cmp	r1, #2
    70d6:	bf38      	it	cc
    70d8:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    70dc:	d207      	bcs.n	70ee <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    70de:	bf00      	nop
    70e0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    70e4:	5083      	str	r3, [r0, r2]
    70e6:	1c49      	adds	r1, r1, #1
    70e8:	b2c9      	uxtb	r1, r1
    70ea:	2902      	cmp	r1, #2
    70ec:	d3f8      	bcc.n	70e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    70ee:	2c02      	cmp	r4, #2
    70f0:	d004      	beq.n	70fc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    70f2:	f240 31db 	movw	r1, #987	; 0x3db
    70f6:	206c      	movs	r0, #108	; 0x6c
    70f8:	f000 fe12 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    70fc:	f3ef 8210 	mrs	r2, PRIMASK
    7100:	b672      	cpsid	i
    7102:	4c2b      	ldr	r4, [pc, #172]	; (71b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    7104:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    7108:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    710c:	b12d      	cbz	r5, 711a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    710e:	68a1      	ldr	r1, [r4, #8]
    7110:	1c49      	adds	r1, r1, #1
    7112:	60a1      	str	r1, [r4, #8]
    7114:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7118:	e7f4      	b.n	7104 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    711a:	68a0      	ldr	r0, [r4, #8]
    711c:	b902      	cbnz	r2, 7120 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    711e:	b662      	cpsie	i
    7120:	0a02      	lsrs	r2, r0, #8
    7122:	0600      	lsls	r0, r0, #24
    7124:	1840      	adds	r0, r0, r1
    7126:	eb42 0103 	adc.w	r1, r2, r3
    712a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    712e:	1cc0      	adds	r0, r0, #3
    7130:	f141 0100 	adc.w	r1, r1, #0
    7134:	4f1f      	ldr	r7, [pc, #124]	; (71b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    7136:	2601      	movs	r6, #1
    7138:	4d1f      	ldr	r5, [pc, #124]	; (71b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    713a:	ea80 0902 	eor.w	r9, r0, r2
    713e:	ea81 0808 	eor.w	r8, r1, r8
    7142:	ea59 0808 	orrs.w	r8, r9, r8
    7146:	d00e      	beq.n	7166 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7148:	f8d7 8000 	ldr.w	r8, [r7]
    714c:	eba2 0808 	sub.w	r8, r2, r8
    7150:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    7154:	f1b8 0f04 	cmp.w	r8, #4
    7158:	d305      	bcc.n	7166 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    715a:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    715e:	d802      	bhi.n	7166 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    7160:	f7ff fe7e 	bl	6e60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    7164:	e01b      	b.n	719e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    7166:	6838      	ldr	r0, [r7, #0]
    7168:	1a10      	subs	r0, r2, r0
    716a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    716e:	2802      	cmp	r0, #2
    7170:	d313      	bcc.n	719a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    7172:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7176:	d810      	bhi.n	719a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    7178:	4910      	ldr	r1, [pc, #64]	; (71bc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    717a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    717e:	6008      	str	r0, [r1, #0]
    7180:	6066      	str	r6, [r4, #4]
    7182:	7023      	strb	r3, [r4, #0]
    7184:	606e      	str	r6, [r5, #4]
    7186:	60ee      	str	r6, [r5, #12]
    7188:	0040      	lsls	r0, r0, #1
    718a:	1f09      	subs	r1, r1, #4
    718c:	6008      	str	r0, [r1, #0]
    718e:	2004      	movs	r0, #4
    7190:	f88c 0001 	strb.w	r0, [ip, #1]
    7194:	f88c 6000 	strb.w	r6, [ip]
    7198:	e001      	b.n	719e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    719a:	6066      	str	r6, [r4, #4]
    719c:	7023      	strb	r3, [r4, #0]
    719e:	6860      	ldr	r0, [r4, #4]
    71a0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    71a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71a8:	2000002a 	.word	0x2000002a
    71ac:	4000b000 	.word	0x4000b000
    71b0:	20000028 	.word	0x20000028
    71b4:	4000b504 	.word	0x4000b504
    71b8:	40008000 	.word	0x40008000
    71bc:	4001f508 	.word	0x4001f508

000071c0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    71c0:	b410      	push	{r4}
    71c2:	f3ef 8410 	mrs	r4, PRIMASK
    71c6:	b672      	cpsid	i
    71c8:	4a0c      	ldr	r2, [pc, #48]	; (71fc <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    71ca:	490d      	ldr	r1, [pc, #52]	; (7200 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    71cc:	f04f 0c00 	mov.w	ip, #0
    71d0:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    71d4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    71d8:	b12b      	cbz	r3, 71e6 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    71da:	6888      	ldr	r0, [r1, #8]
    71dc:	1c40      	adds	r0, r0, #1
    71de:	6088      	str	r0, [r1, #8]
    71e0:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    71e4:	e7f4      	b.n	71d0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    71e6:	6889      	ldr	r1, [r1, #8]
    71e8:	b904      	cbnz	r4, 71ec <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    71ea:	b662      	cpsie	i
    71ec:	0a0a      	lsrs	r2, r1, #8
    71ee:	0609      	lsls	r1, r1, #24
    71f0:	1808      	adds	r0, r1, r0
    71f2:	bc10      	pop	{r4}
    71f4:	eb42 010c 	adc.w	r1, r2, ip
    71f8:	4770      	bx	lr
    71fa:	0000      	.short	0x0000
    71fc:	4000b000 	.word	0x4000b000
    7200:	20000028 	.word	0x20000028

00007204 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    7204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7208:	4a56      	ldr	r2, [pc, #344]	; (7364 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    720a:	2501      	movs	r5, #1
    720c:	2400      	movs	r4, #0
    720e:	f892 c000 	ldrb.w	ip, [r2]
    7212:	7852      	ldrb	r2, [r2, #1]
    7214:	f44f 76a0 	mov.w	r6, #320	; 0x140
    7218:	2807      	cmp	r0, #7
    721a:	d27d      	bcs.n	7318 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    721c:	e8df f000 	tbb	[pc, r0]
    7220:	04040404 	.word	0x04040404
    7224:	00606060 	.word	0x00606060
    7228:	4b4f      	ldr	r3, [pc, #316]	; (7368 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    722a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    722e:	43ff      	mvns	r7, r7
    7230:	ea77 0708 	orns	r7, r7, r8
    7234:	bf04      	itt	eq
    7236:	785b      	ldrbeq	r3, [r3, #1]
    7238:	2b00      	cmpeq	r3, #0
    723a:	d003      	beq.n	7244 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    723c:	f1bc 0f02 	cmp.w	ip, #2
    7240:	d005      	beq.n	724e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    7242:	e026      	b.n	7292 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    7244:	f44f 6186 	mov.w	r1, #1072	; 0x430
    7248:	206c      	movs	r0, #108	; 0x6c
    724a:	f000 fd69 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    724e:	1f13      	subs	r3, r2, #4
    7250:	b2db      	uxtb	r3, r3
    7252:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7256:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    725a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    725e:	2300      	movs	r3, #0
    7260:	f1bc 0f01 	cmp.w	ip, #1
    7264:	d003      	beq.n	726e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    7266:	f1bc 0f02 	cmp.w	ip, #2
    726a:	d008      	beq.n	727e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    726c:	e00e      	b.n	728c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    726e:	2a04      	cmp	r2, #4
    7270:	bf24      	itt	cs
    7272:	6837      	ldrcs	r7, [r6, #0]
    7274:	2f00      	cmpcs	r7, #0
    7276:	bf08      	it	eq
    7278:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    727c:	e006      	b.n	728c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    727e:	2a04      	cmp	r2, #4
    7280:	bf24      	itt	cs
    7282:	6837      	ldrcs	r7, [r6, #0]
    7284:	2f00      	cmpcs	r7, #0
    7286:	bf08      	it	eq
    7288:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    728c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    7290:	d1e5      	bne.n	725e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    7292:	4b36      	ldr	r3, [pc, #216]	; (736c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    7294:	f100 0210 	add.w	r2, r0, #16
    7298:	fa05 f202 	lsl.w	r2, r5, r2
    729c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    72a0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    72a4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    72a8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    72ac:	449c      	add	ip, r3
    72ae:	f8cc 5000 	str.w	r5, [ip]
    72b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    72b6:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    72ba:	eba1 0c0c 	sub.w	ip, r1, ip
    72be:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    72c2:	f1bc 0f03 	cmp.w	ip, #3
    72c6:	bf3e      	ittt	cc
    72c8:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    72cc:	2000      	movcc	r0, #0
    72ce:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    72d2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    72d6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    72da:	2001      	movs	r0, #1
    72dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72e0:	f1bc 0f00 	cmp.w	ip, #0
    72e4:	d006      	beq.n	72f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    72e6:	4282      	cmp	r2, r0
    72e8:	d104      	bne.n	72f4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    72ea:	f44f 618a 	mov.w	r1, #1104	; 0x450
    72ee:	206c      	movs	r0, #108	; 0x6c
    72f0:	f000 fd16 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    72f4:	1f00      	subs	r0, r0, #4
    72f6:	b2c2      	uxtb	r2, r0
    72f8:	2a03      	cmp	r2, #3
    72fa:	d304      	bcc.n	7306 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    72fc:	f44f 7127 	mov.w	r1, #668	; 0x29c
    7300:	206c      	movs	r0, #108	; 0x6c
    7302:	f000 fd0d 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7306:	4b1a      	ldr	r3, [pc, #104]	; (7370 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    7308:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    730c:	4090      	lsls	r0, r2
    730e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    7312:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    7316:	e000      	b.n	731a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    7318:	e01f      	b.n	735a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    731a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    731e:	f843 400c 	str.w	r4, [r3, ip]
    7322:	f8df c050 	ldr.w	ip, [pc, #80]	; 7374 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    7326:	f8dc c000 	ldr.w	ip, [ip]
    732a:	eba1 0c0c 	sub.w	ip, r1, ip
    732e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    7332:	f1bc 0f02 	cmp.w	ip, #2
    7336:	d30d      	bcc.n	7354 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    7338:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    733c:	d80a      	bhi.n	7354 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    733e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7342:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    7346:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    734a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    734e:	4628      	mov	r0, r5
    7350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7354:	4620      	mov	r0, r4
    7356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    735a:	f240 4154 	movw	r1, #1108	; 0x454
    735e:	206c      	movs	r0, #108	; 0x6c
    7360:	f000 fcde 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7364:	2000002a 	.word	0x2000002a
    7368:	20000028 	.word	0x20000028
    736c:	40008000 	.word	0x40008000
    7370:	4000b000 	.word	0x4000b000
    7374:	4000b504 	.word	0x4000b504

00007378 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    7378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    737a:	2101      	movs	r1, #1
    737c:	2600      	movs	r6, #0
    737e:	f44f 77a0 	mov.w	r7, #320	; 0x140
    7382:	2807      	cmp	r0, #7
    7384:	d24a      	bcs.n	741c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    7386:	e8df f000 	tbb	[pc, r0]
    738a:	0404      	.short	0x0404
    738c:	18180404 	.word	0x18180404
    7390:	0018      	.short	0x0018
    7392:	f100 0210 	add.w	r2, r0, #16
    7396:	fa01 f202 	lsl.w	r2, r1, r2
    739a:	4923      	ldr	r1, [pc, #140]	; (7428 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    739c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    73a0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    73a4:	2200      	movs	r2, #0
    73a6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    73aa:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    73ae:	508e      	str	r6, [r1, r2]
    73b0:	491e      	ldr	r1, [pc, #120]	; (742c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    73b2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    73b6:	9000      	str	r0, [sp, #0]
    73b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73ba:	4d1d      	ldr	r5, [pc, #116]	; (7430 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    73bc:	1f01      	subs	r1, r0, #4
    73be:	b2cc      	uxtb	r4, r1
    73c0:	7829      	ldrb	r1, [r5, #0]
    73c2:	b181      	cbz	r1, 73e6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    73c4:	786a      	ldrb	r2, [r5, #1]
    73c6:	4282      	cmp	r2, r0
    73c8:	d10d      	bne.n	73e6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    73ca:	4a1a      	ldr	r2, [pc, #104]	; (7434 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    73cc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    73d0:	6010      	str	r0, [r2, #0]
    73d2:	2901      	cmp	r1, #1
    73d4:	bf08      	it	eq
    73d6:	f7ff fd0b 	bleq	6df0 <MPSL_IRQ_TIMER0_Handler+0x100>
    73da:	702e      	strb	r6, [r5, #0]
    73dc:	4a16      	ldr	r2, [pc, #88]	; (7438 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    73de:	f04f 30ff 	mov.w	r0, #4294967295
    73e2:	e9c2 0004 	strd	r0, r0, [r2, #16]
    73e6:	4915      	ldr	r1, [pc, #84]	; (743c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    73e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    73ec:	40a0      	lsls	r0, r4
    73ee:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    73f2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    73f6:	00a0      	lsls	r0, r4, #2
    73f8:	4408      	add	r0, r1
    73fa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    73fe:	4a10      	ldr	r2, [pc, #64]	; (7440 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    7400:	6812      	ldr	r2, [r2, #0]
    7402:	1a80      	subs	r0, r0, r2
    7404:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7408:	2802      	cmp	r0, #2
    740a:	bf24      	itt	cs
    740c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    7410:	500e      	strcs	r6, [r1, r0]
    7412:	480c      	ldr	r0, [pc, #48]	; (7444 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    7414:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    7418:	9000      	str	r0, [sp, #0]
    741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    741c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7420:	206c      	movs	r0, #108	; 0x6c
    7422:	f000 fc7d 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7426:	0000      	.short	0x0000
    7428:	40008000 	.word	0x40008000
    742c:	40008140 	.word	0x40008140
    7430:	2000002a 	.word	0x2000002a
    7434:	4001f508 	.word	0x4001f508
    7438:	20000028 	.word	0x20000028
    743c:	4000b000 	.word	0x4000b000
    7440:	4000b504 	.word	0x4000b504
    7444:	4000b140 	.word	0x4000b140

00007448 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    7448:	481a      	ldr	r0, [pc, #104]	; (74b4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    744a:	7800      	ldrb	r0, [r0, #0]
    744c:	2800      	cmp	r0, #0
    744e:	bf07      	ittee	eq
    7450:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    7454:	2100      	moveq	r1, #0
    7456:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    745a:	2101      	movne	r1, #1
    745c:	4a16      	ldr	r2, [pc, #88]	; (74b8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    745e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    7462:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    7466:	2000      	movs	r0, #0
    7468:	2902      	cmp	r1, #2
    746a:	bf38      	it	cc
    746c:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    7470:	d207      	bcs.n	7482 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    7472:	bf00      	nop
    7474:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    7478:	50d0      	str	r0, [r2, r3]
    747a:	1c49      	adds	r1, r1, #1
    747c:	b2c9      	uxtb	r1, r1
    747e:	2902      	cmp	r1, #2
    7480:	d3f8      	bcc.n	7474 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    7482:	490e      	ldr	r1, [pc, #56]	; (74bc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    7484:	f04f 32ff 	mov.w	r2, #4294967295
    7488:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    748c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7490:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    7494:	1d0a      	adds	r2, r1, #4
    7496:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    749a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    749e:	1d12      	adds	r2, r2, #4
    74a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    74a4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    74a8:	1d12      	adds	r2, r2, #4
    74aa:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    74ae:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    74b2:	4770      	bx	lr
    74b4:	2000002a 	.word	0x2000002a
    74b8:	4000b000 	.word	0x4000b000
    74bc:	40008000 	.word	0x40008000

000074c0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    74c0:	b570      	push	{r4, r5, r6, lr}
    74c2:	f3ef 8110 	mrs	r1, PRIMASK
    74c6:	b672      	cpsid	i
    74c8:	2400      	movs	r4, #0
    74ca:	4b0d      	ldr	r3, [pc, #52]	; (7500 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    74cc:	4a0d      	ldr	r2, [pc, #52]	; (7504 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    74ce:	bf00      	nop
    74d0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    74d4:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    74d8:	f1bc 0f00 	cmp.w	ip, #0
    74dc:	d005      	beq.n	74ea <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    74de:	6890      	ldr	r0, [r2, #8]
    74e0:	1c40      	adds	r0, r0, #1
    74e2:	6090      	str	r0, [r2, #8]
    74e4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    74e8:	e7f2      	b.n	74d0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    74ea:	6895      	ldr	r5, [r2, #8]
    74ec:	b901      	cbnz	r1, 74f0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    74ee:	b662      	cpsie	i
    74f0:	f002 fca8 	bl	9e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    74f4:	4a04      	ldr	r2, [pc, #16]	; (7508 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    74f6:	4621      	mov	r1, r4
    74f8:	fbe5 0102 	umlal	r0, r1, r5, r2
    74fc:	bd70      	pop	{r4, r5, r6, pc}
    74fe:	0000      	.short	0x0000
    7500:	4000b000 	.word	0x4000b000
    7504:	20000028 	.word	0x20000028
    7508:	1e848000 	.word	0x1e848000

0000750c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    750c:	b510      	push	{r4, lr}
    750e:	2807      	cmp	r0, #7
    7510:	d20d      	bcs.n	752e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    7512:	e8df f000 	tbb	[pc, r0]
    7516:	0404      	.short	0x0404
    7518:	06060404 	.word	0x06060404
    751c:	0006      	.short	0x0006
    751e:	4906      	ldr	r1, [pc, #24]	; (7538 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    7520:	e002      	b.n	7528 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    7522:	1f00      	subs	r0, r0, #4
    7524:	4905      	ldr	r1, [pc, #20]	; (753c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    7526:	b2c0      	uxtb	r0, r0
    7528:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    752c:	bd10      	pop	{r4, pc}
    752e:	f240 417b 	movw	r1, #1147	; 0x47b
    7532:	206c      	movs	r0, #108	; 0x6c
    7534:	f000 fbf4 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7538:	40008140 	.word	0x40008140
    753c:	4000b140 	.word	0x4000b140

00007540 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    7540:	b510      	push	{r4, lr}
    7542:	2807      	cmp	r0, #7
    7544:	d20d      	bcs.n	7562 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    7546:	e8df f000 	tbb	[pc, r0]
    754a:	0404      	.short	0x0404
    754c:	06060404 	.word	0x06060404
    7550:	0006      	.short	0x0006
    7552:	4906      	ldr	r1, [pc, #24]	; (756c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    7554:	e002      	b.n	755c <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    7556:	1f00      	subs	r0, r0, #4
    7558:	4905      	ldr	r1, [pc, #20]	; (7570 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    755a:	b2c0      	uxtb	r0, r0
    755c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7560:	bd10      	pop	{r4, pc}
    7562:	f240 417b 	movw	r1, #1147	; 0x47b
    7566:	206c      	movs	r0, #108	; 0x6c
    7568:	f000 fbda 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    756c:	40008140 	.word	0x40008140
    7570:	4000b140 	.word	0x4000b140

00007574 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    7574:	b570      	push	{r4, r5, r6, lr}
    7576:	481b      	ldr	r0, [pc, #108]	; (75e4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    7578:	2400      	movs	r4, #0
    757a:	2104      	movs	r1, #4
    757c:	7004      	strb	r4, [r0, #0]
    757e:	1e80      	subs	r0, r0, #2
    7580:	7001      	strb	r1, [r0, #0]
    7582:	1f49      	subs	r1, r1, #5
    7584:	e9c0 1104 	strd	r1, r1, [r0, #16]
    7588:	6084      	str	r4, [r0, #8]
    758a:	f7ff fc31 	bl	6df0 <MPSL_IRQ_TIMER0_Handler+0x100>
    758e:	2501      	movs	r5, #1
    7590:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    7594:	02eb      	lsls	r3, r5, #11
    7596:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    759a:	f3bf 8f4f 	dsb	sy
    759e:	f3bf 8f6f 	isb	sy
    75a2:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    75a6:	4a10      	ldr	r2, [pc, #64]	; (75e8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    75a8:	6055      	str	r5, [r2, #4]
    75aa:	6095      	str	r5, [r2, #8]
    75ac:	480f      	ldr	r0, [pc, #60]	; (75ec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    75ae:	6801      	ldr	r1, [r0, #0]
    75b0:	2900      	cmp	r1, #0
    75b2:	d1fc      	bne.n	75ae <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    75b4:	480e      	ldr	r0, [pc, #56]	; (75f0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    75b6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    75ba:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    75be:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    75c2:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    75c6:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    75ca:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    75ce:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    75d2:	6015      	str	r5, [r2, #0]
    75d4:	f44f 7082 	mov.w	r0, #260	; 0x104
    75d8:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    75dc:	2002      	movs	r0, #2
    75de:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    75e2:	bd70      	pop	{r4, r5, r6, pc}
    75e4:	2000002a 	.word	0x2000002a
    75e8:	4000b000 	.word	0x4000b000
    75ec:	4000b504 	.word	0x4000b504
    75f0:	00070002 	.word	0x00070002

000075f4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    75f4:	4808      	ldr	r0, [pc, #32]	; (7618 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    75f6:	f990 0000 	ldrsb.w	r0, [r0]
    75fa:	2800      	cmp	r0, #0
    75fc:	bfb8      	it	lt
    75fe:	4770      	bxlt	lr
    7600:	f000 011f 	and.w	r1, r0, #31
    7604:	2201      	movs	r2, #1
    7606:	fa02 f101 	lsl.w	r1, r2, r1
    760a:	0940      	lsrs	r0, r0, #5
    760c:	0080      	lsls	r0, r0, #2
    760e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7612:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7616:	4770      	bx	lr
    7618:	20000198 	.word	0x20000198

0000761c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    761c:	4803      	ldr	r0, [pc, #12]	; (762c <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    761e:	7800      	ldrb	r0, [r0, #0]
    7620:	2803      	cmp	r0, #3
    7622:	bf0c      	ite	eq
    7624:	2001      	moveq	r0, #1
    7626:	2000      	movne	r0, #0
    7628:	4770      	bx	lr
    762a:	0000      	.short	0x0000
    762c:	20000170 	.word	0x20000170

00007630 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    7630:	4801      	ldr	r0, [pc, #4]	; (7638 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    7632:	8840      	ldrh	r0, [r0, #2]
    7634:	4770      	bx	lr
    7636:	0000      	.short	0x0000
    7638:	20000170 	.word	0x20000170

0000763c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    763c:	4803      	ldr	r0, [pc, #12]	; (764c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    763e:	7800      	ldrb	r0, [r0, #0]
    7640:	2802      	cmp	r0, #2
    7642:	bf16      	itet	ne
    7644:	2803      	cmpne	r0, #3
    7646:	2001      	moveq	r0, #1
    7648:	2000      	movne	r0, #0
    764a:	4770      	bx	lr
    764c:	20000170 	.word	0x20000170

00007650 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    7650:	4802      	ldr	r0, [pc, #8]	; (765c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    7652:	2100      	movs	r1, #0
    7654:	7001      	strb	r1, [r0, #0]
    7656:	8041      	strh	r1, [r0, #2]
    7658:	4770      	bx	lr
    765a:	0000      	.short	0x0000
    765c:	20000170 	.word	0x20000170

00007660 <MPSL_IRQ_CLOCK_Handler>:
    7660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7664:	4c16      	ldr	r4, [pc, #88]	; (76c0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    7666:	7a60      	ldrb	r0, [r4, #9]
    7668:	2800      	cmp	r0, #0
    766a:	d027      	beq.n	76bc <MPSL_IRQ_CLOCK_Handler+0x5c>
    766c:	f44f 7180 	mov.w	r1, #256	; 0x100
    7670:	058d      	lsls	r5, r1, #22
    7672:	4628      	mov	r0, r5
    7674:	f002 fc11 	bl	9e9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7678:	4680      	mov	r8, r0
    767a:	f44f 7182 	mov.w	r1, #260	; 0x104
    767e:	4628      	mov	r0, r5
    7680:	f002 fc0b 	bl	9e9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7684:	2600      	movs	r6, #0
    7686:	4607      	mov	r7, r0
    7688:	f1b8 0f00 	cmp.w	r8, #0
    768c:	d009      	beq.n	76a2 <MPSL_IRQ_CLOCK_Handler+0x42>
    768e:	2001      	movs	r0, #1
    7690:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7694:	7920      	ldrb	r0, [r4, #4]
    7696:	b120      	cbz	r0, 76a2 <MPSL_IRQ_CLOCK_Handler+0x42>
    7698:	7126      	strb	r6, [r4, #4]
    769a:	69e0      	ldr	r0, [r4, #28]
    769c:	b108      	cbz	r0, 76a2 <MPSL_IRQ_CLOCK_Handler+0x42>
    769e:	4780      	blx	r0
    76a0:	61e6      	str	r6, [r4, #28]
    76a2:	b137      	cbz	r7, 76b2 <MPSL_IRQ_CLOCK_Handler+0x52>
    76a4:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    76a8:	2002      	movs	r0, #2
    76aa:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    76ae:	f000 fa57 	bl	7b60 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    76b2:	4640      	mov	r0, r8
    76b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76b8:	f000 b858 	b.w	776c <MPSL_IRQ_CLOCK_Handler+0x10c>
    76bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76c0:	2000012c 	.word	0x2000012c
    76c4:	b510      	push	{r4, lr}
    76c6:	f002 fc92 	bl	9fee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    76ca:	b930      	cbnz	r0, 76da <MPSL_IRQ_CLOCK_Handler+0x7a>
    76cc:	f002 fcb0 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76d0:	b918      	cbnz	r0, 76da <MPSL_IRQ_CLOCK_Handler+0x7a>
    76d2:	f002 fce3 	bl	a09c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    76d6:	2800      	cmp	r0, #0
    76d8:	d002      	beq.n	76e0 <MPSL_IRQ_CLOCK_Handler+0x80>
    76da:	4902      	ldr	r1, [pc, #8]	; (76e4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    76dc:	2002      	movs	r0, #2
    76de:	6008      	str	r0, [r1, #0]
    76e0:	bd10      	pop	{r4, pc}
    76e2:	0000      	.short	0x0000
    76e4:	40000c34 	.word	0x40000c34
    76e8:	b570      	push	{r4, r5, r6, lr}
    76ea:	f000 f99b 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    76ee:	f000 fa9f 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    76f2:	4c09      	ldr	r4, [pc, #36]	; (7718 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    76f4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    76f8:	b130      	cbz	r0, 7708 <MPSL_IRQ_CLOCK_Handler+0xa8>
    76fa:	f7ff ffe3 	bl	76c4 <MPSL_IRQ_CLOCK_Handler+0x64>
    76fe:	2001      	movs	r0, #1
    7700:	6128      	str	r0, [r5, #16]
    7702:	2004      	movs	r0, #4
    7704:	72a0      	strb	r0, [r4, #10]
    7706:	e004      	b.n	7712 <MPSL_IRQ_CLOCK_Handler+0xb2>
    7708:	2003      	movs	r0, #3
    770a:	72a0      	strb	r0, [r4, #10]
    770c:	2001      	movs	r0, #1
    770e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7712:	2000      	movs	r0, #0
    7714:	71e0      	strb	r0, [r4, #7]
    7716:	bd70      	pop	{r4, r5, r6, pc}
    7718:	2000012c 	.word	0x2000012c
    771c:	b570      	push	{r4, r5, r6, lr}
    771e:	4c12      	ldr	r4, [pc, #72]	; (7768 <MPSL_IRQ_CLOCK_Handler+0x108>)
    7720:	79a0      	ldrb	r0, [r4, #6]
    7722:	b1e0      	cbz	r0, 775e <MPSL_IRQ_CLOCK_Handler+0xfe>
    7724:	79e1      	ldrb	r1, [r4, #7]
    7726:	1e40      	subs	r0, r0, #1
    7728:	4281      	cmp	r1, r0
    772a:	da18      	bge.n	775e <MPSL_IRQ_CLOCK_Handler+0xfe>
    772c:	f000 fa80 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7730:	4605      	mov	r5, r0
    7732:	f000 fb69 	bl	7e08 <mpsl_temperature_get>
    7736:	79a1      	ldrb	r1, [r4, #6]
    7738:	2901      	cmp	r1, #1
    773a:	d902      	bls.n	7742 <MPSL_IRQ_CLOCK_Handler+0xe2>
    773c:	79e1      	ldrb	r1, [r4, #7]
    773e:	1c49      	adds	r1, r1, #1
    7740:	71e1      	strb	r1, [r4, #7]
    7742:	b10d      	cbz	r5, 7748 <MPSL_IRQ_CLOCK_Handler+0xe8>
    7744:	6961      	ldr	r1, [r4, #20]
    7746:	e000      	b.n	774a <MPSL_IRQ_CLOCK_Handler+0xea>
    7748:	6921      	ldr	r1, [r4, #16]
    774a:	1a41      	subs	r1, r0, r1
    774c:	2902      	cmp	r1, #2
    774e:	da02      	bge.n	7756 <MPSL_IRQ_CLOCK_Handler+0xf6>
    7750:	f111 0f02 	cmn.w	r1, #2
    7754:	dc07      	bgt.n	7766 <MPSL_IRQ_CLOCK_Handler+0x106>
    7756:	b10d      	cbz	r5, 775c <MPSL_IRQ_CLOCK_Handler+0xfc>
    7758:	6160      	str	r0, [r4, #20]
    775a:	e000      	b.n	775e <MPSL_IRQ_CLOCK_Handler+0xfe>
    775c:	6120      	str	r0, [r4, #16]
    775e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7762:	f7ff bfc1 	b.w	76e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    7766:	bd70      	pop	{r4, r5, r6, pc}
    7768:	2000012c 	.word	0x2000012c
    776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7770:	4606      	mov	r6, r0
    7772:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7776:	f44f 7186 	mov.w	r1, #268	; 0x10c
    777a:	4628      	mov	r0, r5
    777c:	f002 fb8d 	bl	9e9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    7780:	4680      	mov	r8, r0
    7782:	f44f 7188 	mov.w	r1, #272	; 0x110
    7786:	4628      	mov	r0, r5
    7788:	f002 fb87 	bl	9e9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    778c:	4c27      	ldr	r4, [pc, #156]	; (782c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    778e:	4682      	mov	sl, r0
    7790:	7827      	ldrb	r7, [r4, #0]
    7792:	f104 0008 	add.w	r0, r4, #8
    7796:	f002 fbf4 	bl	9f82 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    779a:	b110      	cbz	r0, 77a2 <MPSL_IRQ_CLOCK_Handler+0x142>
    779c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    77a0:	e016      	b.n	77d0 <MPSL_IRQ_CLOCK_Handler+0x170>
    77a2:	f04f 0901 	mov.w	r9, #1
    77a6:	b146      	cbz	r6, 77ba <MPSL_IRQ_CLOCK_Handler+0x15a>
    77a8:	7aa0      	ldrb	r0, [r4, #10]
    77aa:	2803      	cmp	r0, #3
    77ac:	d105      	bne.n	77ba <MPSL_IRQ_CLOCK_Handler+0x15a>
    77ae:	2004      	movs	r0, #4
    77b0:	72a0      	strb	r0, [r4, #10]
    77b2:	f7ff ff87 	bl	76c4 <MPSL_IRQ_CLOCK_Handler+0x64>
    77b6:	f8c5 9010 	str.w	r9, [r5, #16]
    77ba:	2600      	movs	r6, #0
    77bc:	f1b8 0f00 	cmp.w	r8, #0
    77c0:	d018      	beq.n	77f4 <MPSL_IRQ_CLOCK_Handler+0x194>
    77c2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    77c6:	7aa0      	ldrb	r0, [r4, #10]
    77c8:	2804      	cmp	r0, #4
    77ca:	d004      	beq.n	77d6 <MPSL_IRQ_CLOCK_Handler+0x176>
    77cc:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    77d0:	206d      	movs	r0, #109	; 0x6d
    77d2:	f000 faa5 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    77d6:	f002 fc0a 	bl	9fee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    77da:	b928      	cbnz	r0, 77e8 <MPSL_IRQ_CLOCK_Handler+0x188>
    77dc:	f002 fc28 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    77e0:	b910      	cbnz	r0, 77e8 <MPSL_IRQ_CLOCK_Handler+0x188>
    77e2:	f002 fc5b 	bl	a09c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    77e6:	b108      	cbz	r0, 77ec <MPSL_IRQ_CLOCK_Handler+0x18c>
    77e8:	4811      	ldr	r0, [pc, #68]	; (7830 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    77ea:	6006      	str	r6, [r0, #0]
    77ec:	2002      	movs	r0, #2
    77ee:	72a0      	strb	r0, [r4, #10]
    77f0:	f000 f8fc 	bl	79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    77f4:	f1ba 0f00 	cmp.w	sl, #0
    77f8:	d008      	beq.n	780c <MPSL_IRQ_CLOCK_Handler+0x1ac>
    77fa:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    77fe:	7aa0      	ldrb	r0, [r4, #10]
    7800:	2802      	cmp	r0, #2
    7802:	d101      	bne.n	7808 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    7804:	f7ff ff8a 	bl	771c <MPSL_IRQ_CLOCK_Handler+0xbc>
    7808:	f8c5 9014 	str.w	r9, [r5, #20]
    780c:	b13f      	cbz	r7, 781e <MPSL_IRQ_CLOCK_Handler+0x1be>
    780e:	7026      	strb	r6, [r4, #0]
    7810:	7aa0      	ldrb	r0, [r4, #10]
    7812:	2802      	cmp	r0, #2
    7814:	d101      	bne.n	781a <MPSL_IRQ_CLOCK_Handler+0x1ba>
    7816:	f7ff ff67 	bl	76e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    781a:	f000 f8e7 	bl	79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    781e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7822:	4802      	ldr	r0, [pc, #8]	; (782c <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    7824:	3008      	adds	r0, #8
    7826:	f002 bbc3 	b.w	9fb0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    782a:	0000      	.short	0x0000
    782c:	2000012c 	.word	0x2000012c
    7830:	40000c34 	.word	0x40000c34
    7834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7838:	4c49      	ldr	r4, [pc, #292]	; (7960 <MPSL_IRQ_CLOCK_Handler+0x300>)
    783a:	2700      	movs	r7, #0
    783c:	4606      	mov	r6, r0
    783e:	61a7      	str	r7, [r4, #24]
    7840:	7842      	ldrb	r2, [r0, #1]
    7842:	7881      	ldrb	r1, [r0, #2]
    7844:	7800      	ldrb	r0, [r0, #0]
    7846:	72e0      	strb	r0, [r4, #11]
    7848:	7162      	strb	r2, [r4, #5]
    784a:	71a1      	strb	r1, [r4, #6]
    784c:	71e7      	strb	r7, [r4, #7]
    784e:	f04f 0801 	mov.w	r8, #1
    7852:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7856:	2805      	cmp	r0, #5
    7858:	d225      	bcs.n	78a6 <MPSL_IRQ_CLOCK_Handler+0x246>
    785a:	e8df f000 	tbb	[pc, r0]
    785e:	0310      	.short	0x0310
    7860:	00222006 	.word	0x00222006
    7864:	f8c4 8018 	str.w	r8, [r4, #24]
    7868:	e009      	b.n	787e <MPSL_IRQ_CLOCK_Handler+0x21e>
    786a:	f000 f8db 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    786e:	2101      	movs	r1, #1
    7870:	4628      	mov	r0, r5
    7872:	f002 fb17 	bl	9ea4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7876:	2800      	cmp	r0, #0
    7878:	d0f9      	beq.n	786e <MPSL_IRQ_CLOCK_Handler+0x20e>
    787a:	2002      	movs	r0, #2
    787c:	61a0      	str	r0, [r4, #24]
    787e:	f002 fb3d 	bl	9efc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    7882:	b1c0      	cbz	r0, 78b6 <MPSL_IRQ_CLOCK_Handler+0x256>
    7884:	f000 f9ee 	bl	7c64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    7888:	7e21      	ldrb	r1, [r4, #24]
    788a:	f001 0103 	and.w	r1, r1, #3
    788e:	4288      	cmp	r0, r1
    7890:	d111      	bne.n	78b6 <MPSL_IRQ_CLOCK_Handler+0x256>
    7892:	79b0      	ldrb	r0, [r6, #6]
    7894:	b160      	cbz	r0, 78b0 <MPSL_IRQ_CLOCK_Handler+0x250>
    7896:	2002      	movs	r0, #2
    7898:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    789c:	e044      	b.n	7928 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    789e:	4831      	ldr	r0, [pc, #196]	; (7964 <MPSL_IRQ_CLOCK_Handler+0x304>)
    78a0:	e7ec      	b.n	787c <MPSL_IRQ_CLOCK_Handler+0x21c>
    78a2:	4831      	ldr	r0, [pc, #196]	; (7968 <MPSL_IRQ_CLOCK_Handler+0x308>)
    78a4:	e7ea      	b.n	787c <MPSL_IRQ_CLOCK_Handler+0x21c>
    78a6:	f240 313d 	movw	r1, #829	; 0x33d
    78aa:	206d      	movs	r0, #109	; 0x6d
    78ac:	f000 fa38 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    78b0:	f000 f9ac 	bl	7c0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    78b4:	e038      	b.n	7928 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    78b6:	f8c5 800c 	str.w	r8, [r5, #12]
    78ba:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    78be:	69a0      	ldr	r0, [r4, #24]
    78c0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    78c4:	f002 fb7f 	bl	9fc6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    78c8:	b940      	cbnz	r0, 78dc <MPSL_IRQ_CLOCK_Handler+0x27c>
    78ca:	f002 fb86 	bl	9fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    78ce:	b928      	cbnz	r0, 78dc <MPSL_IRQ_CLOCK_Handler+0x27c>
    78d0:	f002 fb9a 	bl	a008 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    78d4:	b910      	cbnz	r0, 78dc <MPSL_IRQ_CLOCK_Handler+0x27c>
    78d6:	f002 fbab 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    78da:	b138      	cbz	r0, 78ec <MPSL_IRQ_CLOCK_Handler+0x28c>
    78dc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    78e0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    78e4:	4921      	ldr	r1, [pc, #132]	; (796c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    78e6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    78ea:	6008      	str	r0, [r1, #0]
    78ec:	f002 fb6b 	bl	9fc6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    78f0:	b940      	cbnz	r0, 7904 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78f2:	f002 fb72 	bl	9fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    78f6:	b928      	cbnz	r0, 7904 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78f8:	f002 fb86 	bl	a008 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    78fc:	b910      	cbnz	r0, 7904 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    78fe:	f002 fb97 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7902:	b118      	cbz	r0, 790c <MPSL_IRQ_CLOCK_Handler+0x2ac>
    7904:	4919      	ldr	r1, [pc, #100]	; (796c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    7906:	3110      	adds	r1, #16
    7908:	f8c1 8000 	str.w	r8, [r1]
    790c:	f8c5 8008 	str.w	r8, [r5, #8]
    7910:	2002      	movs	r0, #2
    7912:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    7916:	79b0      	ldrb	r0, [r6, #6]
    7918:	b930      	cbnz	r0, 7928 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    791a:	f000 f829 	bl	7970 <MPSL_IRQ_CLOCK_Handler+0x310>
    791e:	2002      	movs	r0, #2
    7920:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    7924:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    7928:	79a0      	ldrb	r0, [r4, #6]
    792a:	b170      	cbz	r0, 794a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    792c:	7830      	ldrb	r0, [r6, #0]
    792e:	b960      	cbnz	r0, 794a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7930:	f000 f97e 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7934:	4606      	mov	r6, r0
    7936:	f000 fa67 	bl	7e08 <mpsl_temperature_get>
    793a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    793e:	b116      	cbz	r6, 7946 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    7940:	e9c4 1004 	strd	r1, r0, [r4, #16]
    7944:	e001      	b.n	794a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    7946:	e9c4 0104 	strd	r0, r1, [r4, #16]
    794a:	2101      	movs	r1, #1
    794c:	4628      	mov	r0, r5
    794e:	f002 faa9 	bl	9ea4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7952:	b108      	cbz	r0, 7958 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    7954:	f000 f966 	bl	7c24 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7958:	72a7      	strb	r7, [r4, #10]
    795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    795e:	0000      	.short	0x0000
    7960:	2000012c 	.word	0x2000012c
    7964:	00020001 	.word	0x00020001
    7968:	00030001 	.word	0x00030001
    796c:	4000053c 	.word	0x4000053c
    7970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7974:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    7978:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    797c:	f010 0f02 	tst.w	r0, #2
    7980:	d011      	beq.n	79a6 <MPSL_IRQ_CLOCK_Handler+0x346>
    7982:	4c16      	ldr	r4, [pc, #88]	; (79dc <MPSL_IRQ_CLOCK_Handler+0x37c>)
    7984:	6820      	ldr	r0, [r4, #0]
    7986:	43c0      	mvns	r0, r0
    7988:	f340 1600 	sbfx	r6, r0, #4, #1
    798c:	6820      	ldr	r0, [r4, #0]
    798e:	f040 0010 	orr.w	r0, r0, #16
    7992:	6020      	str	r0, [r4, #0]
    7994:	f44f 7782 	mov.w	r7, #260	; 0x104
    7998:	4639      	mov	r1, r7
    799a:	4628      	mov	r0, r5
    799c:	1c76      	adds	r6, r6, #1
    799e:	f002 fa7c 	bl	9e9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    79a2:	b128      	cbz	r0, 79b0 <MPSL_IRQ_CLOCK_Handler+0x350>
    79a4:	e00a      	b.n	79bc <MPSL_IRQ_CLOCK_Handler+0x35c>
    79a6:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    79aa:	206d      	movs	r0, #109	; 0x6d
    79ac:	f000 f9b8 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    79b0:	f002 fb80 	bl	a0b4 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    79b4:	e002      	b.n	79bc <MPSL_IRQ_CLOCK_Handler+0x35c>
    79b6:	bf00      	nop
    79b8:	f002 fb7a 	bl	a0b0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    79bc:	4639      	mov	r1, r7
    79be:	4628      	mov	r0, r5
    79c0:	f002 fa6b 	bl	9e9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    79c4:	2800      	cmp	r0, #0
    79c6:	d0f7      	beq.n	79b8 <MPSL_IRQ_CLOCK_Handler+0x358>
    79c8:	f000 f920 	bl	7c0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    79cc:	2e00      	cmp	r6, #0
    79ce:	d103      	bne.n	79d8 <MPSL_IRQ_CLOCK_Handler+0x378>
    79d0:	6820      	ldr	r0, [r4, #0]
    79d2:	f020 0010 	bic.w	r0, r0, #16
    79d6:	6020      	str	r0, [r4, #0]
    79d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79dc:	e000ed10 	.word	0xe000ed10

000079e0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    79e0:	4801      	ldr	r0, [pc, #4]	; (79e8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    79e2:	89c0      	ldrh	r0, [r0, #14]
    79e4:	4770      	bx	lr
    79e6:	0000      	.short	0x0000
    79e8:	2000012c 	.word	0x2000012c

000079ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    79ec:	b510      	push	{r4, lr}
    79ee:	f3ef 8410 	mrs	r4, PRIMASK
    79f2:	b672      	cpsid	i
    79f4:	480a      	ldr	r0, [pc, #40]	; (7a20 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    79f6:	7841      	ldrb	r1, [r0, #1]
    79f8:	b129      	cbz	r1, 7a06 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    79fa:	7841      	ldrb	r1, [r0, #1]
    79fc:	1e49      	subs	r1, r1, #1
    79fe:	7041      	strb	r1, [r0, #1]
    7a00:	7841      	ldrb	r1, [r0, #1]
    7a02:	b129      	cbz	r1, 7a10 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    7a04:	e008      	b.n	7a18 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    7a06:	f240 1119 	movw	r1, #281	; 0x119
    7a0a:	206d      	movs	r0, #109	; 0x6d
    7a0c:	f000 f988 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7a10:	7880      	ldrb	r0, [r0, #2]
    7a12:	b908      	cbnz	r0, 7a18 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    7a14:	f000 f91a 	bl	7c4c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    7a18:	2c00      	cmp	r4, #0
    7a1a:	d100      	bne.n	7a1e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    7a1c:	b662      	cpsie	i
    7a1e:	bd10      	pop	{r4, pc}
    7a20:	2000012c 	.word	0x2000012c

00007a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    7a24:	b510      	push	{r4, lr}
    7a26:	f3ef 8410 	mrs	r4, PRIMASK
    7a2a:	b672      	cpsid	i
    7a2c:	4806      	ldr	r0, [pc, #24]	; (7a48 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    7a2e:	7841      	ldrb	r1, [r0, #1]
    7a30:	1c49      	adds	r1, r1, #1
    7a32:	7041      	strb	r1, [r0, #1]
    7a34:	7840      	ldrb	r0, [r0, #1]
    7a36:	2801      	cmp	r0, #1
    7a38:	d101      	bne.n	7a3e <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    7a3a:	f002 fa4a 	bl	9ed2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    7a3e:	2c00      	cmp	r4, #0
    7a40:	d100      	bne.n	7a44 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    7a42:	b662      	cpsie	i
    7a44:	bd10      	pop	{r4, pc}
    7a46:	0000      	.short	0x0000
    7a48:	2000012c 	.word	0x2000012c

00007a4c <mpsl_clock_hfclk_release>:
    7a4c:	4805      	ldr	r0, [pc, #20]	; (7a64 <mpsl_clock_hfclk_release+0x18>)
    7a4e:	b510      	push	{r4, lr}
    7a50:	78c1      	ldrb	r1, [r0, #3]
    7a52:	b121      	cbz	r1, 7a5e <mpsl_clock_hfclk_release+0x12>
    7a54:	2100      	movs	r1, #0
    7a56:	7101      	strb	r1, [r0, #4]
    7a58:	70c1      	strb	r1, [r0, #3]
    7a5a:	f7ff ffc7 	bl	79ec <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    7a5e:	2000      	movs	r0, #0
    7a60:	bd10      	pop	{r4, pc}
    7a62:	0000      	.short	0x0000
    7a64:	2000012c 	.word	0x2000012c

00007a68 <mpsl_clock_hfclk_request>:
    7a68:	b570      	push	{r4, r5, r6, lr}
    7a6a:	4c0c      	ldr	r4, [pc, #48]	; (7a9c <mpsl_clock_hfclk_request+0x34>)
    7a6c:	78e1      	ldrb	r1, [r4, #3]
    7a6e:	b961      	cbnz	r1, 7a8a <mpsl_clock_hfclk_request+0x22>
    7a70:	2501      	movs	r5, #1
    7a72:	70e5      	strb	r5, [r4, #3]
    7a74:	61e0      	str	r0, [r4, #28]
    7a76:	f7ff ffd5 	bl	7a24 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    7a7a:	f000 f8d9 	bl	7c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    7a7e:	b130      	cbz	r0, 7a8e <mpsl_clock_hfclk_request+0x26>
    7a80:	69e0      	ldr	r0, [r4, #28]
    7a82:	b110      	cbz	r0, 7a8a <mpsl_clock_hfclk_request+0x22>
    7a84:	4780      	blx	r0
    7a86:	2000      	movs	r0, #0
    7a88:	61e0      	str	r0, [r4, #28]
    7a8a:	2000      	movs	r0, #0
    7a8c:	bd70      	pop	{r4, r5, r6, pc}
    7a8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7a92:	7125      	strb	r5, [r4, #4]
    7a94:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    7a98:	e7f7      	b.n	7a8a <mpsl_clock_hfclk_request+0x22>
    7a9a:	0000      	.short	0x0000
    7a9c:	2000012c 	.word	0x2000012c

00007aa0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    7aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7aa4:	0005      	movs	r5, r0
    7aa6:	f06f 0015 	mvn.w	r0, #21
    7aaa:	d03f      	beq.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7aac:	7829      	ldrb	r1, [r5, #0]
    7aae:	2904      	cmp	r1, #4
    7ab0:	d83c      	bhi.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7ab2:	2900      	cmp	r1, #0
    7ab4:	7869      	ldrb	r1, [r5, #1]
    7ab6:	d03b      	beq.n	7b30 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    7ab8:	2900      	cmp	r1, #0
    7aba:	d137      	bne.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7abc:	78a9      	ldrb	r1, [r5, #2]
    7abe:	2900      	cmp	r1, #0
    7ac0:	d134      	bne.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7ac2:	2000      	movs	r0, #0
    7ac4:	f002 f9d8 	bl	9e78 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    7ac8:	2000      	movs	r0, #0
    7aca:	f002 f9c8 	bl	9e5e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7ace:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7ad2:	f04f 31ff 	mov.w	r1, #4294967295
    7ad6:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    7ada:	2600      	movs	r6, #0
    7adc:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    7ae0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    7ae4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    7ae8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    7aec:	4c14      	ldr	r4, [pc, #80]	; (7b40 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    7aee:	7066      	strb	r6, [r4, #1]
    7af0:	88a8      	ldrh	r0, [r5, #4]
    7af2:	81a0      	strh	r0, [r4, #12]
    7af4:	f002 f9e4 	bl	9ec0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    7af8:	2701      	movs	r7, #1
    7afa:	b108      	cbz	r0, 7b00 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    7afc:	70e7      	strb	r7, [r4, #3]
    7afe:	7067      	strb	r7, [r4, #1]
    7b00:	2101      	movs	r1, #1
    7b02:	4640      	mov	r0, r8
    7b04:	f002 f9ce 	bl	9ea4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    7b08:	b108      	cbz	r0, 7b0e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    7b0a:	f000 f88b 	bl	7c24 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    7b0e:	f240 50f5 	movw	r0, #1525	; 0x5f5
    7b12:	81e0      	strh	r0, [r4, #14]
    7b14:	4628      	mov	r0, r5
    7b16:	f7ff fe8d 	bl	7834 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    7b1a:	7267      	strb	r7, [r4, #9]
    7b1c:	2000      	movs	r0, #0
    7b1e:	f002 f99e 	bl	9e5e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    7b22:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7b26:	4630      	mov	r0, r6
    7b28:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    7b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b30:	2900      	cmp	r1, #0
    7b32:	d0fb      	beq.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b34:	2920      	cmp	r1, #32
    7b36:	d8f9      	bhi.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b38:	78a9      	ldrb	r1, [r5, #2]
    7b3a:	2921      	cmp	r1, #33	; 0x21
    7b3c:	d9c1      	bls.n	7ac2 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    7b3e:	e7f5      	b.n	7b2c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    7b40:	2000012c 	.word	0x2000012c

00007b44 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    7b44:	4801      	ldr	r0, [pc, #4]	; (7b4c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    7b46:	8980      	ldrh	r0, [r0, #12]
    7b48:	4770      	bx	lr
    7b4a:	0000      	.short	0x0000
    7b4c:	2000012c 	.word	0x2000012c

00007b50 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    7b50:	4802      	ldr	r0, [pc, #8]	; (7b5c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    7b52:	7a80      	ldrb	r0, [r0, #10]
    7b54:	2800      	cmp	r0, #0
    7b56:	d000      	beq.n	7b5a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    7b58:	2001      	movs	r0, #1
    7b5a:	4770      	bx	lr
    7b5c:	2000012c 	.word	0x2000012c

00007b60 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    7b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b62:	4d1f      	ldr	r5, [pc, #124]	; (7be0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7b64:	7ae8      	ldrb	r0, [r5, #11]
    7b66:	2800      	cmp	r0, #0
    7b68:	d10f      	bne.n	7b8a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b6a:	7e28      	ldrb	r0, [r5, #24]
    7b6c:	f000 0003 	and.w	r0, r0, #3
    7b70:	f002 f9b4 	bl	9edc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7b74:	2800      	cmp	r0, #0
    7b76:	d008      	beq.n	7b8a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b78:	f3ef 8110 	mrs	r1, PRIMASK
    7b7c:	b672      	cpsid	i
    7b7e:	f7ff ffe7 	bl	7b50 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7b82:	b118      	cbz	r0, 7b8c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    7b84:	2900      	cmp	r1, #0
    7b86:	d100      	bne.n	7b8a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    7b88:	b662      	cpsie	i
    7b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b8c:	2601      	movs	r6, #1
    7b8e:	72ae      	strb	r6, [r5, #10]
    7b90:	b901      	cbnz	r1, 7b94 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    7b92:	b662      	cpsie	i
    7b94:	2018      	movs	r0, #24
    7b96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    7b9a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7b9e:	61a6      	str	r6, [r4, #24]
    7ba0:	f44f 7020 	mov.w	r0, #640	; 0x280
    7ba4:	f8ad 0000 	strh.w	r0, [sp]
    7ba8:	f8bd 0000 	ldrh.w	r0, [sp]
    7bac:	1e41      	subs	r1, r0, #1
    7bae:	f8ad 1000 	strh.w	r1, [sp]
    7bb2:	d2f9      	bcs.n	7ba8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    7bb4:	2700      	movs	r7, #0
    7bb6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    7bba:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    7bbe:	4808      	ldr	r0, [pc, #32]	; (7be0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    7bc0:	3008      	adds	r0, #8
    7bc2:	f002 f9f1 	bl	9fa8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    7bc6:	702f      	strb	r7, [r5, #0]
    7bc8:	f7ff fd8e 	bl	76e8 <MPSL_IRQ_CLOCK_Handler+0x88>
    7bcc:	6166      	str	r6, [r4, #20]
    7bce:	7968      	ldrb	r0, [r5, #5]
    7bd0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    7bd4:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7bd8:	2018      	movs	r0, #24
    7bda:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7be0:	2000012c 	.word	0x2000012c

00007be4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    7be4:	4602      	mov	r2, r0
    7be6:	b510      	push	{r4, lr}
    7be8:	2000      	movs	r0, #0
    7bea:	2900      	cmp	r1, #0
    7bec:	d00a      	beq.n	7c04 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7bee:	2a00      	cmp	r2, #0
    7bf0:	d008      	beq.n	7c04 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    7bf2:	fba2 0101 	umull	r0, r1, r2, r1
    7bf6:	1e40      	subs	r0, r0, #1
    7bf8:	4a03      	ldr	r2, [pc, #12]	; (7c08 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    7bfa:	f141 31ff 	adc.w	r1, r1, #4294967295
    7bfe:	f002 fa5b 	bl	a0b8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    7c02:	1c40      	adds	r0, r0, #1
    7c04:	bd10      	pop	{r4, pc}
    7c06:	0000      	.short	0x0000
    7c08:	000f4240 	.word	0x000f4240

00007c0c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    7c0c:	b510      	push	{r4, lr}
    7c0e:	4c04      	ldr	r4, [pc, #16]	; (7c20 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    7c10:	7e20      	ldrb	r0, [r4, #24]
    7c12:	f000 0003 	and.w	r0, r0, #3
    7c16:	f002 f961 	bl	9edc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    7c1a:	2800      	cmp	r0, #0
    7c1c:	d0f8      	beq.n	7c10 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    7c1e:	bd10      	pop	{r4, pc}
    7c20:	2000012c 	.word	0x2000012c

00007c24 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    7c24:	4901      	ldr	r1, [pc, #4]	; (7c2c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    7c26:	2001      	movs	r0, #1
    7c28:	7008      	strb	r0, [r1, #0]
    7c2a:	4770      	bx	lr
    7c2c:	20000199 	.word	0x20000199

00007c30 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    7c30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7c34:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c38:	b918      	cbnz	r0, 7c42 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    7c3a:	4803      	ldr	r0, [pc, #12]	; (7c48 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    7c3c:	7800      	ldrb	r0, [r0, #0]
    7c3e:	2800      	cmp	r0, #0
    7c40:	d000      	beq.n	7c44 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    7c42:	2001      	movs	r0, #1
    7c44:	4770      	bx	lr
    7c46:	0000      	.short	0x0000
    7c48:	20000199 	.word	0x20000199

00007c4c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    7c4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7c50:	2101      	movs	r1, #1
    7c52:	6041      	str	r1, [r0, #4]
    7c54:	2100      	movs	r1, #0
    7c56:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c5a:	4801      	ldr	r0, [pc, #4]	; (7c60 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    7c5c:	7001      	strb	r1, [r0, #0]
    7c5e:	4770      	bx	lr
    7c60:	20000199 	.word	0x20000199

00007c64 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    7c64:	4802      	ldr	r0, [pc, #8]	; (7c70 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    7c66:	6800      	ldr	r0, [r0, #0]
    7c68:	f000 0003 	and.w	r0, r0, #3
    7c6c:	4770      	bx	lr
    7c6e:	0000      	.short	0x0000
    7c70:	4000041c 	.word	0x4000041c
    7c74:	b510      	push	{r4, lr}
    7c76:	b131      	cbz	r1, 7c86 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    7c78:	2901      	cmp	r1, #1
    7c7a:	d007      	beq.n	7c8c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    7c7c:	f240 3102 	movw	r1, #770	; 0x302
    7c80:	a005      	add	r0, pc, #20	; (adr r0, 7c98 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    7c82:	f000 f821 	bl	7cc8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    7c86:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    7c8a:	e001      	b.n	7c90 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    7c8c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    7c90:	f000 0001 	and.w	r0, r0, #1
    7c94:	bd10      	pop	{r4, pc}
    7c96:	0000      	.short	0x0000
    7c98:	5f66726e 	.word	0x5f66726e
    7c9c:	636f6c63 	.word	0x636f6c63
    7ca0:	00682e6b 	.word	0x00682e6b
    7ca4:	f3bf 8f4f 	dsb	sy
    7ca8:	4805      	ldr	r0, [pc, #20]	; (7cc0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    7caa:	6801      	ldr	r1, [r0, #0]
    7cac:	4a05      	ldr	r2, [pc, #20]	; (7cc4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    7cae:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    7cb2:	4311      	orrs	r1, r2
    7cb4:	6001      	str	r1, [r0, #0]
    7cb6:	f3bf 8f4f 	dsb	sy
    7cba:	bf00      	nop
    7cbc:	e7fd      	b.n	7cba <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    7cbe:	0000      	.short	0x0000
    7cc0:	e000ed0c 	.word	0xe000ed0c
    7cc4:	05fa0004 	.word	0x05fa0004

00007cc8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    7cc8:	b672      	cpsid	i
    7cca:	4a03      	ldr	r2, [pc, #12]	; (7cd8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    7ccc:	6852      	ldr	r2, [r2, #4]
    7cce:	b102      	cbz	r2, 7cd2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    7cd0:	4790      	blx	r2
    7cd2:	f7ff ffe7 	bl	7ca4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7cd6:	0000      	.short	0x0000
    7cd8:	2000014c 	.word	0x2000014c
    7cdc:	4806      	ldr	r0, [pc, #24]	; (7cf8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    7cde:	b510      	push	{r4, lr}
    7ce0:	2100      	movs	r1, #0
    7ce2:	6001      	str	r1, [r0, #0]
    7ce4:	2101      	movs	r1, #1
    7ce6:	6001      	str	r1, [r0, #0]
    7ce8:	4608      	mov	r0, r1
    7cea:	f002 f91e 	bl	9f2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7cf2:	2001      	movs	r0, #1
    7cf4:	f002 b90c 	b.w	9f10 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7cf8:	40001ffc 	.word	0x40001ffc
    7cfc:	4807      	ldr	r0, [pc, #28]	; (7d1c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    7cfe:	b510      	push	{r4, lr}
    7d00:	2101      	movs	r1, #1
    7d02:	6041      	str	r1, [r0, #4]
    7d04:	1e89      	subs	r1, r1, #2
    7d06:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    7d0a:	200c      	movs	r0, #12
    7d0c:	f002 f90d 	bl	9f2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    7d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d14:	200c      	movs	r0, #12
    7d16:	f002 b8fb 	b.w	9f10 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7d1a:	0000      	.short	0x0000
    7d1c:	4000c000 	.word	0x4000c000

00007d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    7d20:	b50e      	push	{r1, r2, r3, lr}
    7d22:	b672      	cpsid	i
    7d24:	4a0f      	ldr	r2, [pc, #60]	; (7d64 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    7d26:	6855      	ldr	r5, [r2, #4]
    7d28:	b1d5      	cbz	r5, 7d60 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    7d2a:	2200      	movs	r2, #0
    7d2c:	4603      	mov	r3, r0
    7d2e:	466e      	mov	r6, sp
    7d30:	240a      	movs	r4, #10
    7d32:	e003      	b.n	7d3c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    7d34:	fbb0 f0f4 	udiv	r0, r0, r4
    7d38:	1c52      	adds	r2, r2, #1
    7d3a:	b2d2      	uxtb	r2, r2
    7d3c:	2800      	cmp	r0, #0
    7d3e:	d1f9      	bne.n	7d34 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    7d40:	54b0      	strb	r0, [r6, r2]
    7d42:	e009      	b.n	7d58 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    7d44:	fbb3 f0f4 	udiv	r0, r3, r4
    7d48:	fb04 3010 	mls	r0, r4, r0, r3
    7d4c:	fbb3 f3f4 	udiv	r3, r3, r4
    7d50:	1e52      	subs	r2, r2, #1
    7d52:	b2d2      	uxtb	r2, r2
    7d54:	3030      	adds	r0, #48	; 0x30
    7d56:	54b0      	strb	r0, [r6, r2]
    7d58:	2a00      	cmp	r2, #0
    7d5a:	d1f3      	bne.n	7d44 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    7d5c:	4630      	mov	r0, r6
    7d5e:	47a8      	blx	r5
    7d60:	f7ff ffa0 	bl	7ca4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    7d64:	2000014c 	.word	0x2000014c

00007d68 <mpsl_init>:
    7d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d6c:	4c18      	ldr	r4, [pc, #96]	; (7dd0 <mpsl_init+0x68>)
    7d6e:	4606      	mov	r6, r0
    7d70:	4617      	mov	r7, r2
    7d72:	7860      	ldrb	r0, [r4, #1]
    7d74:	460d      	mov	r5, r1
    7d76:	b118      	cbz	r0, 7d80 <mpsl_init+0x18>
    7d78:	f04f 30ff 	mov.w	r0, #4294967295
    7d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d80:	f7fc fb9e 	bl	44c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    7d84:	b906      	cbnz	r6, 7d88 <mpsl_init+0x20>
    7d86:	4e13      	ldr	r6, [pc, #76]	; (7dd4 <mpsl_init+0x6c>)
    7d88:	6067      	str	r7, [r4, #4]
    7d8a:	7025      	strb	r5, [r4, #0]
    7d8c:	f7ff ffa6 	bl	7cdc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    7d90:	f7ff ffb4 	bl	7cfc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    7d94:	4630      	mov	r0, r6
    7d96:	f7ff fe83 	bl	7aa0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    7d9a:	0006      	movs	r6, r0
    7d9c:	d1ee      	bne.n	7d7c <mpsl_init+0x14>
    7d9e:	f7fe fe4f 	bl	6a40 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    7da2:	f7ff fedd 	bl	7b60 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    7da6:	f002 f830 	bl	9e0a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    7daa:	4628      	mov	r0, r5
    7dac:	f002 f8b0 	bl	9f10 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    7db0:	2001      	movs	r0, #1
    7db2:	2d00      	cmp	r5, #0
    7db4:	db09      	blt.n	7dca <mpsl_init+0x62>
    7db6:	f005 011f 	and.w	r1, r5, #31
    7dba:	fa00 f101 	lsl.w	r1, r0, r1
    7dbe:	096a      	lsrs	r2, r5, #5
    7dc0:	0092      	lsls	r2, r2, #2
    7dc2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    7dc6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    7dca:	7060      	strb	r0, [r4, #1]
    7dcc:	4630      	mov	r0, r6
    7dce:	e7d5      	b.n	7d7c <mpsl_init+0x14>
    7dd0:	2000014c 	.word	0x2000014c
    7dd4:	00009f4c 	.word	0x00009f4c

00007dd8 <mpsl_is_initialized>:
    7dd8:	4801      	ldr	r0, [pc, #4]	; (7de0 <mpsl_is_initialized+0x8>)
    7dda:	7840      	ldrb	r0, [r0, #1]
    7ddc:	4770      	bx	lr
    7dde:	0000      	.short	0x0000
    7de0:	2000014c 	.word	0x2000014c

00007de4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    7de4:	4807      	ldr	r0, [pc, #28]	; (7e04 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    7de6:	f990 0000 	ldrsb.w	r0, [r0]
    7dea:	2800      	cmp	r0, #0
    7dec:	db09      	blt.n	7e02 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    7dee:	f000 021f 	and.w	r2, r0, #31
    7df2:	2101      	movs	r1, #1
    7df4:	4091      	lsls	r1, r2
    7df6:	0940      	lsrs	r0, r0, #5
    7df8:	0080      	lsls	r0, r0, #2
    7dfa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    7dfe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7e02:	4770      	bx	lr
    7e04:	2000014c 	.word	0x2000014c

00007e08 <mpsl_temperature_get>:
    7e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e0c:	2501      	movs	r5, #1
    7e0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7e12:	0329      	lsls	r1, r5, #12
    7e14:	f04f 0800 	mov.w	r8, #0
    7e18:	4640      	mov	r0, r8
    7e1a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    7e1e:	f3bf 8f4f 	dsb	sy
    7e22:	f3bf 8f6f 	isb	sy
    7e26:	4c16      	ldr	r4, [pc, #88]	; (7e80 <mpsl_temperature_get+0x78>)
    7e28:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    7e2c:	200c      	movs	r0, #12
    7e2e:	f002 f89b 	bl	9f68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7e32:	4e14      	ldr	r6, [pc, #80]	; (7e84 <mpsl_temperature_get+0x7c>)
    7e34:	6830      	ldr	r0, [r6, #0]
    7e36:	43c0      	mvns	r0, r0
    7e38:	f340 1700 	sbfx	r7, r0, #4, #1
    7e3c:	6830      	ldr	r0, [r6, #0]
    7e3e:	f040 0010 	orr.w	r0, r0, #16
    7e42:	6030      	str	r0, [r6, #0]
    7e44:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    7e48:	6025      	str	r5, [r4, #0]
    7e4a:	1c7f      	adds	r7, r7, #1
    7e4c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    7e50:	b108      	cbz	r0, 7e56 <mpsl_temperature_get+0x4e>
    7e52:	b11f      	cbz	r7, 7e5c <mpsl_temperature_get+0x54>
    7e54:	e006      	b.n	7e64 <mpsl_temperature_get+0x5c>
    7e56:	f002 f92b 	bl	a0b0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e5a:	e7f7      	b.n	7e4c <mpsl_temperature_get+0x44>
    7e5c:	6830      	ldr	r0, [r6, #0]
    7e5e:	f020 0010 	bic.w	r0, r0, #16
    7e62:	6030      	str	r0, [r6, #0]
    7e64:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    7e68:	6065      	str	r5, [r4, #4]
    7e6a:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    7e6e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    7e72:	200c      	movs	r0, #12
    7e74:	f002 f878 	bl	9f68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    7e78:	4630      	mov	r0, r6
    7e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e7e:	0000      	.short	0x0000
    7e80:	4000c000 	.word	0x4000c000
    7e84:	e000ed10 	.word	0xe000ed10

00007e88 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    7e88:	b510      	push	{r4, lr}
    7e8a:	4602      	mov	r2, r0
    7e8c:	2005      	movs	r0, #5
    7e8e:	490c      	ldr	r1, [pc, #48]	; (7ec0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    7e90:	e004      	b.n	7e9c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    7e92:	bf00      	nop
    7e94:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    7e98:	791b      	ldrb	r3, [r3, #4]
    7e9a:	b133      	cbz	r3, 7eaa <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    7e9c:	1e40      	subs	r0, r0, #1
    7e9e:	b2c0      	uxtb	r0, r0
    7ea0:	d2f8      	bcs.n	7e94 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    7ea2:	2148      	movs	r1, #72	; 0x48
    7ea4:	2069      	movs	r0, #105	; 0x69
    7ea6:	f7ff ff3b 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7eaa:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    7eae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7eb2:	2200      	movs	r2, #0
    7eb4:	714a      	strb	r2, [r1, #5]
    7eb6:	718a      	strb	r2, [r1, #6]
    7eb8:	2201      	movs	r2, #1
    7eba:	710a      	strb	r2, [r1, #4]
    7ebc:	bd10      	pop	{r4, pc}
    7ebe:	0000      	.short	0x0000
    7ec0:	2000105c 	.word	0x2000105c

00007ec4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    7ec4:	b510      	push	{r4, lr}
    7ec6:	2805      	cmp	r0, #5
    7ec8:	d301      	bcc.n	7ece <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    7eca:	2158      	movs	r1, #88	; 0x58
    7ecc:	e006      	b.n	7edc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    7ece:	490a      	ldr	r1, [pc, #40]	; (7ef8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    7ed0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    7ed4:	7901      	ldrb	r1, [r0, #4]
    7ed6:	2901      	cmp	r1, #1
    7ed8:	d003      	beq.n	7ee2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    7eda:	2159      	movs	r1, #89	; 0x59
    7edc:	2069      	movs	r0, #105	; 0x69
    7ede:	f7ff ff1f 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7ee2:	7941      	ldrb	r1, [r0, #5]
    7ee4:	7982      	ldrb	r2, [r0, #6]
    7ee6:	1c49      	adds	r1, r1, #1
    7ee8:	b2c9      	uxtb	r1, r1
    7eea:	428a      	cmp	r2, r1
    7eec:	d000      	beq.n	7ef0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    7eee:	7141      	strb	r1, [r0, #5]
    7ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ef4:	f7ff bf76 	b.w	7de4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    7ef8:	2000105c 	.word	0x2000105c

00007efc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    7efc:	b510      	push	{r4, lr}
    7efe:	2805      	cmp	r0, #5
    7f00:	d303      	bcc.n	7f0a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    7f02:	214f      	movs	r1, #79	; 0x4f
    7f04:	2069      	movs	r0, #105	; 0x69
    7f06:	f7ff ff0b 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    7f0a:	4a03      	ldr	r2, [pc, #12]	; (7f18 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    7f0c:	2100      	movs	r1, #0
    7f0e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    7f12:	7101      	strb	r1, [r0, #4]
    7f14:	bd10      	pop	{r4, pc}
    7f16:	0000      	.short	0x0000
    7f18:	2000105c 	.word	0x2000105c

00007f1c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    7f1c:	b570      	push	{r4, r5, r6, lr}
    7f1e:	2505      	movs	r5, #5
    7f20:	4e0e      	ldr	r6, [pc, #56]	; (7f5c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    7f22:	4c0f      	ldr	r4, [pc, #60]	; (7f60 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    7f24:	e016      	b.n	7f54 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7f26:	7821      	ldrb	r1, [r4, #0]
    7f28:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    7f2c:	7902      	ldrb	r2, [r0, #4]
    7f2e:	2a01      	cmp	r2, #1
    7f30:	d108      	bne.n	7f44 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7f32:	7942      	ldrb	r2, [r0, #5]
    7f34:	7983      	ldrb	r3, [r0, #6]
    7f36:	429a      	cmp	r2, r3
    7f38:	d004      	beq.n	7f44 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    7f3a:	7942      	ldrb	r2, [r0, #5]
    7f3c:	7182      	strb	r2, [r0, #6]
    7f3e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    7f42:	4780      	blx	r0
    7f44:	7820      	ldrb	r0, [r4, #0]
    7f46:	1c40      	adds	r0, r0, #1
    7f48:	b2c0      	uxtb	r0, r0
    7f4a:	7020      	strb	r0, [r4, #0]
    7f4c:	2805      	cmp	r0, #5
    7f4e:	d301      	bcc.n	7f54 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    7f50:	2000      	movs	r0, #0
    7f52:	7020      	strb	r0, [r4, #0]
    7f54:	1e6d      	subs	r5, r5, #1
    7f56:	b2ed      	uxtb	r5, r5
    7f58:	d2e5      	bcs.n	7f26 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    7f5a:	bd70      	pop	{r4, r5, r6, pc}
    7f5c:	2000105c 	.word	0x2000105c
    7f60:	2000019a 	.word	0x2000019a

00007f64 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    7f64:	b500      	push	{lr}
    7f66:	f002 f82e 	bl	9fc6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    7f6a:	b940      	cbnz	r0, 7f7e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f6c:	f002 f835 	bl	9fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7f70:	b928      	cbnz	r0, 7f7e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f72:	f002 f849 	bl	a008 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f76:	b910      	cbnz	r0, 7f7e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    7f78:	f002 f85a 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7f7c:	b108      	cbz	r0, 7f82 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    7f7e:	4802      	ldr	r0, [pc, #8]	; (7f88 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    7f80:	bd00      	pop	{pc}
    7f82:	4802      	ldr	r0, [pc, #8]	; (7f8c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    7f84:	bd00      	pop	{pc}
    7f86:	0000      	.short	0x0000
    7f88:	4000050c 	.word	0x4000050c
    7f8c:	4001e700 	.word	0x4001e700
    7f90:	b510      	push	{r4, lr}
    7f92:	f002 f84d 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7f96:	b330      	cbz	r0, 7fe6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    7f98:	f3ef 8010 	mrs	r0, PRIMASK
    7f9c:	b1c8      	cbz	r0, 7fd2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    7f9e:	2100      	movs	r1, #0
    7fa0:	b672      	cpsid	i
    7fa2:	4812      	ldr	r0, [pc, #72]	; (7fec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    7fa4:	6802      	ldr	r2, [r0, #0]
    7fa6:	6803      	ldr	r3, [r0, #0]
    7fa8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    7fac:	f043 0310 	orr.w	r3, r3, #16
    7fb0:	6003      	str	r3, [r0, #0]
    7fb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7fb6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7fba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    7fbe:	431c      	orrs	r4, r3
    7fc0:	d000      	beq.n	7fc4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    7fc2:	bf40      	sev
    7fc4:	bf20      	wfe
    7fc6:	bf00      	nop
    7fc8:	bf00      	nop
    7fca:	bf00      	nop
    7fcc:	bf00      	nop
    7fce:	b112      	cbz	r2, 7fd6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    7fd0:	e005      	b.n	7fde <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    7fd2:	2101      	movs	r1, #1
    7fd4:	e7e4      	b.n	7fa0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    7fd6:	6802      	ldr	r2, [r0, #0]
    7fd8:	f022 0210 	bic.w	r2, r2, #16
    7fdc:	6002      	str	r2, [r0, #0]
    7fde:	2900      	cmp	r1, #0
    7fe0:	d000      	beq.n	7fe4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    7fe2:	b662      	cpsie	i
    7fe4:	bd10      	pop	{r4, pc}
    7fe6:	bf20      	wfe
    7fe8:	bd10      	pop	{r4, pc}
    7fea:	0000      	.short	0x0000
    7fec:	e000ed10 	.word	0xe000ed10

00007ff0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    7ff0:	4901      	ldr	r1, [pc, #4]	; (7ff8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    7ff2:	2001      	movs	r0, #1
    7ff4:	7088      	strb	r0, [r1, #2]
    7ff6:	4770      	bx	lr
    7ff8:	20000154 	.word	0x20000154

00007ffc <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    7ffc:	0000a331 0000a369 0000a353 0000a341     1...i...S...A...
    800c:	0000a34d 0000a33b 0000a32f 0000a32d     M...;.../...-...
    801c:	0000a365 0000a359 0000a347 0000a335     e...Y...G...5...
    802c:	0000a327 0000a31f 0000a323 0000a319     '.......#.......

0000803c <mpsl_fem_disable>:
    803c:	4801      	ldr	r0, [pc, #4]	; (8044 <mpsl_fem_disable+0x8>)
    803e:	6800      	ldr	r0, [r0, #0]
    8040:	6800      	ldr	r0, [r0, #0]
    8042:	4700      	bx	r0
    8044:	20000168 	.word	0x20000168

00008048 <mpsl_fem_lna_configuration_clear>:
    8048:	4801      	ldr	r0, [pc, #4]	; (8050 <mpsl_fem_lna_configuration_clear+0x8>)
    804a:	6800      	ldr	r0, [r0, #0]
    804c:	6940      	ldr	r0, [r0, #20]
    804e:	4700      	bx	r0
    8050:	20000168 	.word	0x20000168

00008054 <mpsl_fem_lna_configuration_set>:
    8054:	4a01      	ldr	r2, [pc, #4]	; (805c <mpsl_fem_lna_configuration_set+0x8>)
    8056:	6812      	ldr	r2, [r2, #0]
    8058:	68d2      	ldr	r2, [r2, #12]
    805a:	4710      	bx	r2
    805c:	20000168 	.word	0x20000168

00008060 <mpsl_fem_lna_is_configured>:
    8060:	4901      	ldr	r1, [pc, #4]	; (8068 <mpsl_fem_lna_is_configured+0x8>)
    8062:	6809      	ldr	r1, [r1, #0]
    8064:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    8066:	4708      	bx	r1
    8068:	20000168 	.word	0x20000168

0000806c <mpsl_fem_pa_configuration_clear>:
    806c:	4801      	ldr	r0, [pc, #4]	; (8074 <mpsl_fem_pa_configuration_clear+0x8>)
    806e:	6800      	ldr	r0, [r0, #0]
    8070:	6900      	ldr	r0, [r0, #16]
    8072:	4700      	bx	r0
    8074:	20000168 	.word	0x20000168

00008078 <mpsl_fem_pa_configuration_set>:
    8078:	4a01      	ldr	r2, [pc, #4]	; (8080 <mpsl_fem_pa_configuration_set+0x8>)
    807a:	6812      	ldr	r2, [r2, #0]
    807c:	6892      	ldr	r2, [r2, #8]
    807e:	4710      	bx	r2
    8080:	20000168 	.word	0x20000168

00008084 <mpsl_fem_pa_gain_set>:
    8084:	4901      	ldr	r1, [pc, #4]	; (808c <mpsl_fem_pa_gain_set+0x8>)
    8086:	6809      	ldr	r1, [r1, #0]
    8088:	6a49      	ldr	r1, [r1, #36]	; 0x24
    808a:	4708      	bx	r1
    808c:	20000168 	.word	0x20000168

00008090 <mpsl_fem_pa_is_configured>:
    8090:	4901      	ldr	r1, [pc, #4]	; (8098 <mpsl_fem_pa_is_configured+0x8>)
    8092:	6809      	ldr	r1, [r1, #0]
    8094:	6a89      	ldr	r1, [r1, #40]	; 0x28
    8096:	4708      	bx	r1
    8098:	20000168 	.word	0x20000168

0000809c <mpsl_fem_tx_power_split>:
    809c:	b430      	push	{r4, r5}
    809e:	4c03      	ldr	r4, [pc, #12]	; (80ac <mpsl_fem_tx_power_split+0x10>)
    80a0:	6824      	ldr	r4, [r4, #0]
    80a2:	6864      	ldr	r4, [r4, #4]
    80a4:	46a4      	mov	ip, r4
    80a6:	bc30      	pop	{r4, r5}
    80a8:	4760      	bx	ip
    80aa:	0000      	.short	0x0000
    80ac:	20000168 	.word	0x20000168

000080b0 <mpsl_fem_device_config_254_apply_get>:
    80b0:	4801      	ldr	r0, [pc, #4]	; (80b8 <mpsl_fem_device_config_254_apply_get+0x8>)
    80b2:	7800      	ldrb	r0, [r0, #0]
    80b4:	4770      	bx	lr
    80b6:	0000      	.short	0x0000
    80b8:	2000019b 	.word	0x2000019b

000080bc <__udivmoddi4>:
    80bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80c0:	4686      	mov	lr, r0
    80c2:	468c      	mov	ip, r1
    80c4:	4608      	mov	r0, r1
    80c6:	9e08      	ldr	r6, [sp, #32]
    80c8:	4615      	mov	r5, r2
    80ca:	4674      	mov	r4, lr
    80cc:	4619      	mov	r1, r3
    80ce:	2b00      	cmp	r3, #0
    80d0:	f040 80c2 	bne.w	8258 <__udivmoddi4+0x19c>
    80d4:	4285      	cmp	r5, r0
    80d6:	fab2 f282 	clz	r2, r2
    80da:	d945      	bls.n	8168 <__udivmoddi4+0xac>
    80dc:	b14a      	cbz	r2, 80f2 <__udivmoddi4+0x36>
    80de:	f1c2 0320 	rsb	r3, r2, #32
    80e2:	fa00 fc02 	lsl.w	ip, r0, r2
    80e6:	fa2e f303 	lsr.w	r3, lr, r3
    80ea:	4095      	lsls	r5, r2
    80ec:	ea43 0c0c 	orr.w	ip, r3, ip
    80f0:	4094      	lsls	r4, r2
    80f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    80f6:	b2a8      	uxth	r0, r5
    80f8:	fbbc f8fe 	udiv	r8, ip, lr
    80fc:	0c23      	lsrs	r3, r4, #16
    80fe:	fb0e cc18 	mls	ip, lr, r8, ip
    8102:	fb08 f900 	mul.w	r9, r8, r0
    8106:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    810a:	4599      	cmp	r9, r3
    810c:	d928      	bls.n	8160 <__udivmoddi4+0xa4>
    810e:	18eb      	adds	r3, r5, r3
    8110:	f108 37ff 	add.w	r7, r8, #4294967295
    8114:	d204      	bcs.n	8120 <__udivmoddi4+0x64>
    8116:	4599      	cmp	r9, r3
    8118:	d902      	bls.n	8120 <__udivmoddi4+0x64>
    811a:	f1a8 0702 	sub.w	r7, r8, #2
    811e:	442b      	add	r3, r5
    8120:	eba3 0309 	sub.w	r3, r3, r9
    8124:	b2a4      	uxth	r4, r4
    8126:	fbb3 fcfe 	udiv	ip, r3, lr
    812a:	fb0e 331c 	mls	r3, lr, ip, r3
    812e:	fb0c f000 	mul.w	r0, ip, r0
    8132:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    8136:	42a0      	cmp	r0, r4
    8138:	d914      	bls.n	8164 <__udivmoddi4+0xa8>
    813a:	192c      	adds	r4, r5, r4
    813c:	f10c 33ff 	add.w	r3, ip, #4294967295
    8140:	d204      	bcs.n	814c <__udivmoddi4+0x90>
    8142:	42a0      	cmp	r0, r4
    8144:	d902      	bls.n	814c <__udivmoddi4+0x90>
    8146:	f1ac 0302 	sub.w	r3, ip, #2
    814a:	442c      	add	r4, r5
    814c:	1a24      	subs	r4, r4, r0
    814e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    8152:	b11e      	cbz	r6, 815c <__udivmoddi4+0xa0>
    8154:	40d4      	lsrs	r4, r2
    8156:	2300      	movs	r3, #0
    8158:	6034      	str	r4, [r6, #0]
    815a:	6073      	str	r3, [r6, #4]
    815c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8160:	4647      	mov	r7, r8
    8162:	e7dd      	b.n	8120 <__udivmoddi4+0x64>
    8164:	4663      	mov	r3, ip
    8166:	e7f1      	b.n	814c <__udivmoddi4+0x90>
    8168:	bb92      	cbnz	r2, 81d0 <__udivmoddi4+0x114>
    816a:	1b43      	subs	r3, r0, r5
    816c:	2101      	movs	r1, #1
    816e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    8172:	b2af      	uxth	r7, r5
    8174:	fbb3 fcfe 	udiv	ip, r3, lr
    8178:	0c20      	lsrs	r0, r4, #16
    817a:	fb0e 331c 	mls	r3, lr, ip, r3
    817e:	fb0c f807 	mul.w	r8, ip, r7
    8182:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8186:	4598      	cmp	r8, r3
    8188:	d962      	bls.n	8250 <__udivmoddi4+0x194>
    818a:	18eb      	adds	r3, r5, r3
    818c:	f10c 30ff 	add.w	r0, ip, #4294967295
    8190:	d204      	bcs.n	819c <__udivmoddi4+0xe0>
    8192:	4598      	cmp	r8, r3
    8194:	d902      	bls.n	819c <__udivmoddi4+0xe0>
    8196:	f1ac 0002 	sub.w	r0, ip, #2
    819a:	442b      	add	r3, r5
    819c:	eba3 0308 	sub.w	r3, r3, r8
    81a0:	b2a4      	uxth	r4, r4
    81a2:	fbb3 fcfe 	udiv	ip, r3, lr
    81a6:	fb0e 331c 	mls	r3, lr, ip, r3
    81aa:	fb0c f707 	mul.w	r7, ip, r7
    81ae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81b2:	42a7      	cmp	r7, r4
    81b4:	d94e      	bls.n	8254 <__udivmoddi4+0x198>
    81b6:	192c      	adds	r4, r5, r4
    81b8:	f10c 33ff 	add.w	r3, ip, #4294967295
    81bc:	d204      	bcs.n	81c8 <__udivmoddi4+0x10c>
    81be:	42a7      	cmp	r7, r4
    81c0:	d902      	bls.n	81c8 <__udivmoddi4+0x10c>
    81c2:	f1ac 0302 	sub.w	r3, ip, #2
    81c6:	442c      	add	r4, r5
    81c8:	1be4      	subs	r4, r4, r7
    81ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    81ce:	e7c0      	b.n	8152 <__udivmoddi4+0x96>
    81d0:	f1c2 0320 	rsb	r3, r2, #32
    81d4:	fa20 f103 	lsr.w	r1, r0, r3
    81d8:	4095      	lsls	r5, r2
    81da:	4090      	lsls	r0, r2
    81dc:	fa2e f303 	lsr.w	r3, lr, r3
    81e0:	4303      	orrs	r3, r0
    81e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81e6:	b2af      	uxth	r7, r5
    81e8:	fbb1 fcfe 	udiv	ip, r1, lr
    81ec:	fb0e 101c 	mls	r0, lr, ip, r1
    81f0:	0c19      	lsrs	r1, r3, #16
    81f2:	fb0c f807 	mul.w	r8, ip, r7
    81f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    81fa:	4588      	cmp	r8, r1
    81fc:	fa04 f402 	lsl.w	r4, r4, r2
    8200:	d922      	bls.n	8248 <__udivmoddi4+0x18c>
    8202:	1869      	adds	r1, r5, r1
    8204:	f10c 30ff 	add.w	r0, ip, #4294967295
    8208:	d204      	bcs.n	8214 <__udivmoddi4+0x158>
    820a:	4588      	cmp	r8, r1
    820c:	d902      	bls.n	8214 <__udivmoddi4+0x158>
    820e:	f1ac 0002 	sub.w	r0, ip, #2
    8212:	4429      	add	r1, r5
    8214:	eba1 0108 	sub.w	r1, r1, r8
    8218:	b29b      	uxth	r3, r3
    821a:	fbb1 fcfe 	udiv	ip, r1, lr
    821e:	fb0e 111c 	mls	r1, lr, ip, r1
    8222:	fb0c f707 	mul.w	r7, ip, r7
    8226:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    822a:	429f      	cmp	r7, r3
    822c:	d90e      	bls.n	824c <__udivmoddi4+0x190>
    822e:	18eb      	adds	r3, r5, r3
    8230:	f10c 31ff 	add.w	r1, ip, #4294967295
    8234:	d204      	bcs.n	8240 <__udivmoddi4+0x184>
    8236:	429f      	cmp	r7, r3
    8238:	d902      	bls.n	8240 <__udivmoddi4+0x184>
    823a:	f1ac 0102 	sub.w	r1, ip, #2
    823e:	442b      	add	r3, r5
    8240:	1bdb      	subs	r3, r3, r7
    8242:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8246:	e792      	b.n	816e <__udivmoddi4+0xb2>
    8248:	4660      	mov	r0, ip
    824a:	e7e3      	b.n	8214 <__udivmoddi4+0x158>
    824c:	4661      	mov	r1, ip
    824e:	e7f7      	b.n	8240 <__udivmoddi4+0x184>
    8250:	4660      	mov	r0, ip
    8252:	e7a3      	b.n	819c <__udivmoddi4+0xe0>
    8254:	4663      	mov	r3, ip
    8256:	e7b7      	b.n	81c8 <__udivmoddi4+0x10c>
    8258:	4283      	cmp	r3, r0
    825a:	d906      	bls.n	826a <__udivmoddi4+0x1ae>
    825c:	b916      	cbnz	r6, 8264 <__udivmoddi4+0x1a8>
    825e:	2100      	movs	r1, #0
    8260:	4608      	mov	r0, r1
    8262:	e77b      	b.n	815c <__udivmoddi4+0xa0>
    8264:	e9c6 e000 	strd	lr, r0, [r6]
    8268:	e7f9      	b.n	825e <__udivmoddi4+0x1a2>
    826a:	fab3 f783 	clz	r7, r3
    826e:	b98f      	cbnz	r7, 8294 <__udivmoddi4+0x1d8>
    8270:	4283      	cmp	r3, r0
    8272:	d301      	bcc.n	8278 <__udivmoddi4+0x1bc>
    8274:	4572      	cmp	r2, lr
    8276:	d808      	bhi.n	828a <__udivmoddi4+0x1ce>
    8278:	ebbe 0402 	subs.w	r4, lr, r2
    827c:	eb60 0303 	sbc.w	r3, r0, r3
    8280:	2001      	movs	r0, #1
    8282:	469c      	mov	ip, r3
    8284:	b91e      	cbnz	r6, 828e <__udivmoddi4+0x1d2>
    8286:	2100      	movs	r1, #0
    8288:	e768      	b.n	815c <__udivmoddi4+0xa0>
    828a:	4638      	mov	r0, r7
    828c:	e7fa      	b.n	8284 <__udivmoddi4+0x1c8>
    828e:	e9c6 4c00 	strd	r4, ip, [r6]
    8292:	e7f8      	b.n	8286 <__udivmoddi4+0x1ca>
    8294:	f1c7 0c20 	rsb	ip, r7, #32
    8298:	40bb      	lsls	r3, r7
    829a:	fa22 f40c 	lsr.w	r4, r2, ip
    829e:	431c      	orrs	r4, r3
    82a0:	fa2e f10c 	lsr.w	r1, lr, ip
    82a4:	fa20 f30c 	lsr.w	r3, r0, ip
    82a8:	40b8      	lsls	r0, r7
    82aa:	4301      	orrs	r1, r0
    82ac:	ea4f 4914 	mov.w	r9, r4, lsr #16
    82b0:	fa0e f507 	lsl.w	r5, lr, r7
    82b4:	fbb3 f8f9 	udiv	r8, r3, r9
    82b8:	fa1f fe84 	uxth.w	lr, r4
    82bc:	fb09 3018 	mls	r0, r9, r8, r3
    82c0:	0c0b      	lsrs	r3, r1, #16
    82c2:	fb08 fa0e 	mul.w	sl, r8, lr
    82c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    82ca:	459a      	cmp	sl, r3
    82cc:	fa02 f207 	lsl.w	r2, r2, r7
    82d0:	d940      	bls.n	8354 <__udivmoddi4+0x298>
    82d2:	18e3      	adds	r3, r4, r3
    82d4:	f108 30ff 	add.w	r0, r8, #4294967295
    82d8:	d204      	bcs.n	82e4 <__udivmoddi4+0x228>
    82da:	459a      	cmp	sl, r3
    82dc:	d902      	bls.n	82e4 <__udivmoddi4+0x228>
    82de:	f1a8 0002 	sub.w	r0, r8, #2
    82e2:	4423      	add	r3, r4
    82e4:	eba3 030a 	sub.w	r3, r3, sl
    82e8:	b289      	uxth	r1, r1
    82ea:	fbb3 f8f9 	udiv	r8, r3, r9
    82ee:	fb09 3318 	mls	r3, r9, r8, r3
    82f2:	fb08 fe0e 	mul.w	lr, r8, lr
    82f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    82fa:	458e      	cmp	lr, r1
    82fc:	d92c      	bls.n	8358 <__udivmoddi4+0x29c>
    82fe:	1861      	adds	r1, r4, r1
    8300:	f108 33ff 	add.w	r3, r8, #4294967295
    8304:	d204      	bcs.n	8310 <__udivmoddi4+0x254>
    8306:	458e      	cmp	lr, r1
    8308:	d902      	bls.n	8310 <__udivmoddi4+0x254>
    830a:	f1a8 0302 	sub.w	r3, r8, #2
    830e:	4421      	add	r1, r4
    8310:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8314:	fba0 9802 	umull	r9, r8, r0, r2
    8318:	eba1 010e 	sub.w	r1, r1, lr
    831c:	4541      	cmp	r1, r8
    831e:	46ce      	mov	lr, r9
    8320:	4643      	mov	r3, r8
    8322:	d302      	bcc.n	832a <__udivmoddi4+0x26e>
    8324:	d106      	bne.n	8334 <__udivmoddi4+0x278>
    8326:	454d      	cmp	r5, r9
    8328:	d204      	bcs.n	8334 <__udivmoddi4+0x278>
    832a:	ebb9 0e02 	subs.w	lr, r9, r2
    832e:	eb68 0304 	sbc.w	r3, r8, r4
    8332:	3801      	subs	r0, #1
    8334:	2e00      	cmp	r6, #0
    8336:	d0a6      	beq.n	8286 <__udivmoddi4+0x1ca>
    8338:	ebb5 020e 	subs.w	r2, r5, lr
    833c:	eb61 0103 	sbc.w	r1, r1, r3
    8340:	fa01 fc0c 	lsl.w	ip, r1, ip
    8344:	fa22 f307 	lsr.w	r3, r2, r7
    8348:	ea4c 0303 	orr.w	r3, ip, r3
    834c:	40f9      	lsrs	r1, r7
    834e:	e9c6 3100 	strd	r3, r1, [r6]
    8352:	e798      	b.n	8286 <__udivmoddi4+0x1ca>
    8354:	4640      	mov	r0, r8
    8356:	e7c5      	b.n	82e4 <__udivmoddi4+0x228>
    8358:	4643      	mov	r3, r8
    835a:	e7d9      	b.n	8310 <__udivmoddi4+0x254>
    835c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    8360:	4681      	mov	r9, r0
    8362:	ea5f 0802 	movs.w	r8, r2
    8366:	f100 0007 	add.w	r0, r0, #7
    836a:	f020 0007 	bic.w	r0, r0, #7
    836e:	f04f 0200 	mov.w	r2, #0
    8372:	e9cd 0200 	strd	r0, r2, [sp]
    8376:	780a      	ldrb	r2, [r1, #0]
    8378:	460c      	mov	r4, r1
    837a:	f88d 2005 	strb.w	r2, [sp, #5]
    837e:	d000      	beq.n	8382 <__udivmoddi4+0x2c6>
    8380:	2000      	movs	r0, #0
    8382:	a901      	add	r1, sp, #4
    8384:	f7f8 fad6 	bl	934 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    8388:	9900      	ldr	r1, [sp, #0]
    838a:	2600      	movs	r6, #0
    838c:	4408      	add	r0, r1
    838e:	9000      	str	r0, [sp, #0]
    8390:	7820      	ldrb	r0, [r4, #0]
    8392:	7861      	ldrb	r1, [r4, #1]
    8394:	4635      	mov	r5, r6
    8396:	4408      	add	r0, r1
    8398:	b2c7      	uxtb	r7, r0
    839a:	e008      	b.n	83ae <__udivmoddi4+0x2f2>
    839c:	7a23      	ldrb	r3, [r4, #8]
    839e:	79e2      	ldrb	r2, [r4, #7]
    83a0:	79a1      	ldrb	r1, [r4, #6]
    83a2:	7960      	ldrb	r0, [r4, #5]
    83a4:	f000 fd47 	bl	8e36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    83a8:	1c6d      	adds	r5, r5, #1
    83aa:	4406      	add	r6, r0
    83ac:	b2ed      	uxtb	r5, r5
    83ae:	42bd      	cmp	r5, r7
    83b0:	d3f4      	bcc.n	839c <__udivmoddi4+0x2e0>
    83b2:	9800      	ldr	r0, [sp, #0]
    83b4:	1cc0      	adds	r0, r0, #3
    83b6:	f020 0003 	bic.w	r0, r0, #3
    83ba:	9000      	str	r0, [sp, #0]
    83bc:	f1b8 0f00 	cmp.w	r8, #0
    83c0:	d000      	beq.n	83c4 <__udivmoddi4+0x308>
    83c2:	2000      	movs	r0, #0
    83c4:	4632      	mov	r2, r6
    83c6:	4639      	mov	r1, r7
    83c8:	f7f8 fb60 	bl	a8c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    83cc:	9900      	ldr	r1, [sp, #0]
    83ce:	4642      	mov	r2, r8
    83d0:	4408      	add	r0, r1
    83d2:	9000      	str	r0, [sp, #0]
    83d4:	4621      	mov	r1, r4
    83d6:	4668      	mov	r0, sp
    83d8:	f7f7 feda 	bl	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
    83dc:	9900      	ldr	r1, [sp, #0]
    83de:	eba1 0009 	sub.w	r0, r1, r9
    83e2:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

000083e6 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    83e6:	b510      	push	{r4, lr}
    83e8:	460c      	mov	r4, r1
    83ea:	7909      	ldrb	r1, [r1, #4]
    83ec:	7001      	strb	r1, [r0, #0]
    83ee:	7841      	ldrb	r1, [r0, #1]
    83f0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    83f4:	7041      	strb	r1, [r0, #1]
    83f6:	88a2      	ldrh	r2, [r4, #4]
    83f8:	f3c2 2203 	ubfx	r2, r2, #8, #4
    83fc:	4311      	orrs	r1, r2
    83fe:	7041      	strb	r1, [r0, #1]
    8400:	79a2      	ldrb	r2, [r4, #6]
    8402:	7082      	strb	r2, [r0, #2]
    8404:	88e2      	ldrh	r2, [r4, #6]
    8406:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    840a:	0a12      	lsrs	r2, r2, #8
    840c:	70c2      	strb	r2, [r0, #3]
    840e:	7041      	strb	r1, [r0, #1]
    8410:	7a22      	ldrb	r2, [r4, #8]
    8412:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    8416:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    841a:	7041      	strb	r1, [r0, #1]
    841c:	7a62      	ldrb	r2, [r4, #9]
    841e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    8422:	7041      	strb	r1, [r0, #1]
    8424:	6821      	ldr	r1, [r4, #0]
    8426:	1d02      	adds	r2, r0, #4
    8428:	4291      	cmp	r1, r2
    842a:	d006      	beq.n	843a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    842c:	88e2      	ldrh	r2, [r4, #6]
    842e:	2afb      	cmp	r2, #251	; 0xfb
    8430:	d300      	bcc.n	8434 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    8432:	22fb      	movs	r2, #251	; 0xfb
    8434:	1d00      	adds	r0, r0, #4
    8436:	f001 fe95 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    843a:	79a0      	ldrb	r0, [r4, #6]
    843c:	1d00      	adds	r0, r0, #4
    843e:	b2c0      	uxtb	r0, r0
    8440:	bd10      	pop	{r4, pc}

00008442 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    8442:	b430      	push	{r4, r5}
    8444:	790a      	ldrb	r2, [r1, #4]
    8446:	7002      	strb	r2, [r0, #0]
    8448:	7842      	ldrb	r2, [r0, #1]
    844a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    844e:	7042      	strb	r2, [r0, #1]
    8450:	888b      	ldrh	r3, [r1, #4]
    8452:	f3c3 2303 	ubfx	r3, r3, #8, #4
    8456:	431a      	orrs	r2, r3
    8458:	7042      	strb	r2, [r0, #1]
    845a:	798b      	ldrb	r3, [r1, #6]
    845c:	7083      	strb	r3, [r0, #2]
    845e:	78c3      	ldrb	r3, [r0, #3]
    8460:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    8464:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8468:	70c3      	strb	r3, [r0, #3]
    846a:	88cc      	ldrh	r4, [r1, #6]
    846c:	f3c4 2405 	ubfx	r4, r4, #8, #6
    8470:	4323      	orrs	r3, r4
    8472:	70c3      	strb	r3, [r0, #3]
    8474:	7042      	strb	r2, [r0, #1]
    8476:	7a0c      	ldrb	r4, [r1, #8]
    8478:	f004 0403 	and.w	r4, r4, #3
    847c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    8480:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    8484:	7042      	strb	r2, [r0, #1]
    8486:	7a4c      	ldrb	r4, [r1, #9]
    8488:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    848c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8490:	7042      	strb	r2, [r0, #1]
    8492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    8496:	70c2      	strb	r2, [r0, #3]
    8498:	680b      	ldr	r3, [r1, #0]
    849a:	1d02      	adds	r2, r0, #4
    849c:	4293      	cmp	r3, r2
    849e:	d005      	beq.n	84ac <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    84a0:	88ca      	ldrh	r2, [r1, #6]
    84a2:	bc30      	pop	{r4, r5}
    84a4:	4619      	mov	r1, r3
    84a6:	1d00      	adds	r0, r0, #4
    84a8:	f001 be5c 	b.w	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    84ac:	bc30      	pop	{r4, r5}
    84ae:	4770      	bx	lr

000084b0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    84b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84b4:	4604      	mov	r4, r0
    84b6:	f891 c000 	ldrb.w	ip, [r1]
    84ba:	460d      	mov	r5, r1
    84bc:	2000      	movs	r0, #0
    84be:	2711      	movs	r7, #17
    84c0:	263e      	movs	r6, #62	; 0x3e
    84c2:	2312      	movs	r3, #18
    84c4:	22ff      	movs	r2, #255	; 0xff
    84c6:	f04f 0b0c 	mov.w	fp, #12
    84ca:	f04f 0905 	mov.w	r9, #5
    84ce:	f04f 0a03 	mov.w	sl, #3
    84d2:	f104 010d 	add.w	r1, r4, #13
    84d6:	f04f 0e14 	mov.w	lr, #20
    84da:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    84de:	d26f      	bcs.n	85c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x110>
    84e0:	e8df f00c 	tbb	[pc, ip]
    84e4:	47452d6e 	.word	0x47452d6e
    84e8:	a76eef4c 	.word	0xa76eef4c
    84ec:	edf0c2b1 	.word	0xedf0c2b1
    84f0:	e9eaebec 	.word	0xe9eaebec
    84f4:	6f6e12e8 	.word	0x6f6e12e8
    84f8:	e6e78c6e 	.word	0xe6e78c6e
    84fc:	e2e3e4e5 	.word	0xe2e3e4e5
    8500:	dedfe0e1 	.word	0xdedfe0e1
    8504:	00dc6edd 	.word	0x00dc6edd
    8508:	200e      	movs	r0, #14
    850a:	7020      	strb	r0, [r4, #0]
    850c:	7968      	ldrb	r0, [r5, #5]
    850e:	70e0      	strb	r0, [r4, #3]
    8510:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8514:	0a00      	lsrs	r0, r0, #8
    8516:	7120      	strb	r0, [r4, #4]
    8518:	7928      	ldrb	r0, [r5, #4]
    851a:	70a0      	strb	r0, [r4, #2]
    851c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8520:	3883      	subs	r0, #131	; 0x83
    8522:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    8526:	d003      	beq.n	8530 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x80>
    8528:	2136      	movs	r1, #54	; 0x36
    852a:	20c7      	movs	r0, #199	; 0xc7
    852c:	f7f7 ff44 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8530:	4652      	mov	r2, sl
    8532:	1de9      	adds	r1, r5, #7
    8534:	1d60      	adds	r0, r4, #5
    8536:	f001 fe15 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    853a:	2007      	movs	r0, #7
    853c:	e151      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    853e:	f884 b000 	strb.w	fp, [r4]
    8542:	7928      	ldrb	r0, [r5, #4]
    8544:	70a0      	strb	r0, [r4, #2]
    8546:	7968      	ldrb	r0, [r5, #5]
    8548:	70e0      	strb	r0, [r4, #3]
    854a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    854e:	0a00      	lsrs	r0, r0, #8
    8550:	7120      	strb	r0, [r4, #4]
    8552:	79e8      	ldrb	r0, [r5, #7]
    8554:	7160      	strb	r0, [r4, #5]
    8556:	7a28      	ldrb	r0, [r5, #8]
    8558:	71a0      	strb	r0, [r4, #6]
    855a:	8928      	ldrh	r0, [r5, #8]
    855c:	0a00      	lsrs	r0, r0, #8
    855e:	71e0      	strb	r0, [r4, #7]
    8560:	7aa8      	ldrb	r0, [r5, #10]
    8562:	7220      	strb	r0, [r4, #8]
    8564:	8968      	ldrh	r0, [r5, #10]
    8566:	0a00      	lsrs	r0, r0, #8
    8568:	7260      	strb	r0, [r4, #9]
    856a:	2008      	movs	r0, #8
    856c:	e139      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    856e:	2010      	movs	r0, #16
    8570:	e000      	b.n	8574 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc4>
    8572:	201a      	movs	r0, #26
    8574:	7020      	strb	r0, [r4, #0]
    8576:	7928      	ldrb	r0, [r5, #4]
    8578:	70a0      	strb	r0, [r4, #2]
    857a:	e138      	b.n	87ee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33e>
    857c:	7026      	strb	r6, [r4, #0]
    857e:	2002      	movs	r0, #2
    8580:	70a0      	strb	r0, [r4, #2]
    8582:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    8586:	70e0      	strb	r0, [r4, #3]
    8588:	7aa8      	ldrb	r0, [r5, #10]
    858a:	7120      	strb	r0, [r4, #4]
    858c:	7868      	ldrb	r0, [r5, #1]
    858e:	7160      	strb	r0, [r4, #5]
    8590:	f8d5 0002 	ldr.w	r0, [r5, #2]
    8594:	f8c4 0006 	str.w	r0, [r4, #6]
    8598:	88e8      	ldrh	r0, [r5, #6]
    859a:	8160      	strh	r0, [r4, #10]
    859c:	7a28      	ldrb	r0, [r5, #8]
    859e:	7320      	strb	r0, [r4, #12]
    85a0:	7a2e      	ldrb	r6, [r5, #8]
    85a2:	2e1f      	cmp	r6, #31
    85a4:	d300      	bcc.n	85a8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xf8>
    85a6:	261f      	movs	r6, #31
    85a8:	4608      	mov	r0, r1
    85aa:	4632      	mov	r2, r6
    85ac:	f105 010b 	add.w	r1, r5, #11
    85b0:	f001 fdd8 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    85b4:	360d      	adds	r6, #13
    85b6:	7a69      	ldrb	r1, [r5, #9]
    85b8:	55a1      	strb	r1, [r4, r6]
    85ba:	1e76      	subs	r6, r6, #1
    85bc:	b2f0      	uxtb	r0, r6
    85be:	e10e      	b.n	87de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    85c0:	e111      	b.n	87e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    85c2:	7026      	strb	r6, [r4, #0]
    85c4:	200b      	movs	r0, #11
    85c6:	70a0      	strb	r0, [r4, #2]
    85c8:	7928      	ldrb	r0, [r5, #4]
    85ca:	70e0      	strb	r0, [r4, #3]
    85cc:	7968      	ldrb	r0, [r5, #5]
    85ce:	7120      	strb	r0, [r4, #4]
    85d0:	79a8      	ldrb	r0, [r5, #6]
    85d2:	7160      	strb	r0, [r4, #5]
    85d4:	f8d5 0007 	ldr.w	r0, [r5, #7]
    85d8:	f8c4 0006 	str.w	r0, [r4, #6]
    85dc:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    85e0:	8160      	strh	r0, [r4, #10]
    85e2:	7b68      	ldrb	r0, [r5, #13]
    85e4:	7320      	strb	r0, [r4, #12]
    85e6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    85ea:	f8c4 000d 	str.w	r0, [r4, #13]
    85ee:	8a68      	ldrh	r0, [r5, #18]
    85f0:	f8a4 0011 	strh.w	r0, [r4, #17]
    85f4:	7d28      	ldrb	r0, [r5, #20]
    85f6:	74e0      	strb	r0, [r4, #19]
    85f8:	4618      	mov	r0, r3
    85fa:	e0f2      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    85fc:	2029      	movs	r0, #41	; 0x29
    85fe:	f7f8 f829 	bl	654 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    8602:	b148      	cbz	r0, 8618 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x168>
    8604:	7026      	strb	r6, [r4, #0]
    8606:	2029      	movs	r0, #41	; 0x29
    8608:	70a0      	strb	r0, [r4, #2]
    860a:	2221      	movs	r2, #33	; 0x21
    860c:	1d29      	adds	r1, r5, #4
    860e:	1ce0      	adds	r0, r4, #3
    8610:	f001 fda8 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8614:	2022      	movs	r0, #34	; 0x22
    8616:	e0e4      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8618:	200a      	movs	r0, #10
    861a:	f7f8 f81b 	bl	654 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    861e:	2800      	cmp	r0, #0
    8620:	4629      	mov	r1, r5
    8622:	4620      	mov	r0, r4
    8624:	d002      	beq.n	862c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x17c>
    8626:	f000 f9a1 	bl	896c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    862a:	e0d8      	b.n	87de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    862c:	f000 f975 	bl	891a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    8630:	e0d5      	b.n	87de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8632:	7026      	strb	r6, [r4, #0]
    8634:	f884 e002 	strb.w	lr, [r4, #2]
    8638:	7928      	ldrb	r0, [r5, #4]
    863a:	70e0      	strb	r0, [r4, #3]
    863c:	88a8      	ldrh	r0, [r5, #4]
    863e:	0a00      	lsrs	r0, r0, #8
    8640:	7120      	strb	r0, [r4, #4]
    8642:	79a8      	ldrb	r0, [r5, #6]
    8644:	e106      	b.n	8854 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8646:	223e      	movs	r2, #62	; 0x3e
    8648:	7022      	strb	r2, [r4, #0]
    864a:	2204      	movs	r2, #4
    864c:	70a2      	strb	r2, [r4, #2]
    864e:	6868      	ldr	r0, [r5, #4]
    8650:	f8c4 0003 	str.w	r0, [r4, #3]
    8654:	68a8      	ldr	r0, [r5, #8]
    8656:	f8c4 0007 	str.w	r0, [r4, #7]
    865a:	89a8      	ldrh	r0, [r5, #12]
    865c:	f8a4 000b 	strh.w	r0, [r4, #11]
    8660:	7ba8      	ldrb	r0, [r5, #14]
    8662:	7360      	strb	r0, [r4, #13]
    8664:	200c      	movs	r0, #12
    8666:	e0bc      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8668:	7026      	strb	r6, [r4, #0]
    866a:	f884 a002 	strb.w	sl, [r4, #2]
    866e:	7928      	ldrb	r0, [r5, #4]
    8670:	70e0      	strb	r0, [r4, #3]
    8672:	79a8      	ldrb	r0, [r5, #6]
    8674:	7120      	strb	r0, [r4, #4]
    8676:	88e8      	ldrh	r0, [r5, #6]
    8678:	0a00      	lsrs	r0, r0, #8
    867a:	7160      	strb	r0, [r4, #5]
    867c:	7a28      	ldrb	r0, [r5, #8]
    867e:	71a0      	strb	r0, [r4, #6]
    8680:	8928      	ldrh	r0, [r5, #8]
    8682:	0a00      	lsrs	r0, r0, #8
    8684:	71e0      	strb	r0, [r4, #7]
    8686:	7aa8      	ldrb	r0, [r5, #10]
    8688:	7220      	strb	r0, [r4, #8]
    868a:	8968      	ldrh	r0, [r5, #10]
    868c:	0a00      	lsrs	r0, r0, #8
    868e:	7260      	strb	r0, [r4, #9]
    8690:	7b28      	ldrb	r0, [r5, #12]
    8692:	72a0      	strb	r0, [r4, #10]
    8694:	89a8      	ldrh	r0, [r5, #12]
    8696:	0a00      	lsrs	r0, r0, #8
    8698:	72e0      	strb	r0, [r4, #11]
    869a:	e118      	b.n	88ce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x41e>
    869c:	e126      	b.n	88ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x43c>
    869e:	e0fa      	b.n	8896 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    86a0:	e0db      	b.n	885a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3aa>
    86a2:	e106      	b.n	88b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    86a4:	e115      	b.n	88d2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x422>
    86a6:	e0cd      	b.n	8844 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x394>
    86a8:	e0b5      	b.n	8816 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x366>
    86aa:	e0b1      	b.n	8810 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x360>
    86ac:	e09d      	b.n	87ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33a>
    86ae:	e0a0      	b.n	87f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x342>
    86b0:	e043      	b.n	873a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x28a>
    86b2:	e03f      	b.n	8734 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    86b4:	e054      	b.n	8760 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b0>
    86b6:	e04e      	b.n	8756 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a6>
    86b8:	e031      	b.n	871e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    86ba:	e025      	b.n	8708 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x258>
    86bc:	e018      	b.n	86f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    86be:	e015      	b.n	86ec <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    86c0:	e000      	b.n	86c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    86c2:	e056      	b.n	8772 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    86c4:	7026      	strb	r6, [r4, #0]
    86c6:	f884 9002 	strb.w	r9, [r4, #2]
    86ca:	7928      	ldrb	r0, [r5, #4]
    86cc:	70e0      	strb	r0, [r4, #3]
    86ce:	88a8      	ldrh	r0, [r5, #4]
    86d0:	0a00      	lsrs	r0, r0, #8
    86d2:	7120      	strb	r0, [r4, #4]
    86d4:	f8d5 0006 	ldr.w	r0, [r5, #6]
    86d8:	f8c4 0005 	str.w	r0, [r4, #5]
    86dc:	f8d5 000a 	ldr.w	r0, [r5, #10]
    86e0:	f8c4 0009 	str.w	r0, [r4, #9]
    86e4:	89e8      	ldrh	r0, [r5, #14]
    86e6:	f8a4 000d 	strh.w	r0, [r4, #13]
    86ea:	e114      	b.n	8916 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x466>
    86ec:	7027      	strb	r7, [r4, #0]
    86ee:	e039      	b.n	8764 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b4>
    86f0:	f884 9000 	strb.w	r9, [r4]
    86f4:	7928      	ldrb	r0, [r5, #4]
    86f6:	70a0      	strb	r0, [r4, #2]
    86f8:	7968      	ldrb	r0, [r5, #5]
    86fa:	70e0      	strb	r0, [r4, #3]
    86fc:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8700:	0a00      	lsrs	r0, r0, #8
    8702:	7120      	strb	r0, [r4, #4]
    8704:	79e8      	ldrb	r0, [r5, #7]
    8706:	e0a5      	b.n	8854 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    8708:	2008      	movs	r0, #8
    870a:	7020      	strb	r0, [r4, #0]
    870c:	7928      	ldrb	r0, [r5, #4]
    870e:	70a0      	strb	r0, [r4, #2]
    8710:	79a8      	ldrb	r0, [r5, #6]
    8712:	70e0      	strb	r0, [r4, #3]
    8714:	88e8      	ldrh	r0, [r5, #6]
    8716:	0a00      	lsrs	r0, r0, #8
    8718:	7120      	strb	r0, [r4, #4]
    871a:	7a28      	ldrb	r0, [r5, #8]
    871c:	e09a      	b.n	8854 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3a4>
    871e:	2030      	movs	r0, #48	; 0x30
    8720:	7020      	strb	r0, [r4, #0]
    8722:	7928      	ldrb	r0, [r5, #4]
    8724:	70a0      	strb	r0, [r4, #2]
    8726:	79a8      	ldrb	r0, [r5, #6]
    8728:	70e0      	strb	r0, [r4, #3]
    872a:	88e8      	ldrh	r0, [r5, #6]
    872c:	0a00      	lsrs	r0, r0, #8
    872e:	7120      	strb	r0, [r4, #4]
    8730:	2003      	movs	r0, #3
    8732:	e056      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8734:	7026      	strb	r6, [r4, #0]
    8736:	2007      	movs	r0, #7
    8738:	e091      	b.n	885e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ae>
    873a:	7026      	strb	r6, [r4, #0]
    873c:	f884 b002 	strb.w	fp, [r4, #2]
    8740:	7928      	ldrb	r0, [r5, #4]
    8742:	70e0      	strb	r0, [r4, #3]
    8744:	79a8      	ldrb	r0, [r5, #6]
    8746:	7120      	strb	r0, [r4, #4]
    8748:	88e8      	ldrh	r0, [r5, #6]
    874a:	0a00      	lsrs	r0, r0, #8
    874c:	7160      	strb	r0, [r4, #5]
    874e:	7a28      	ldrb	r0, [r5, #8]
    8750:	71a0      	strb	r0, [r4, #6]
    8752:	7a68      	ldrb	r0, [r5, #9]
    8754:	e059      	b.n	880a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    8756:	1d29      	adds	r1, r5, #4
    8758:	4620      	mov	r0, r4
    875a:	f7f7 ff3b 	bl	5d4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    875e:	e03e      	b.n	87de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    8760:	2057      	movs	r0, #87	; 0x57
    8762:	7020      	strb	r0, [r4, #0]
    8764:	7928      	ldrb	r0, [r5, #4]
    8766:	70a0      	strb	r0, [r4, #2]
    8768:	88a8      	ldrh	r0, [r5, #4]
    876a:	0a00      	lsrs	r0, r0, #8
    876c:	70e0      	strb	r0, [r4, #3]
    876e:	2002      	movs	r0, #2
    8770:	e037      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8772:	7026      	strb	r6, [r4, #0]
    8774:	220d      	movs	r2, #13
    8776:	70a2      	strb	r2, [r4, #2]
    8778:	792a      	ldrb	r2, [r5, #4]
    877a:	70e2      	strb	r2, [r4, #3]
    877c:	89ea      	ldrh	r2, [r5, #14]
    877e:	80a2      	strh	r2, [r4, #4]
    8780:	796a      	ldrb	r2, [r5, #5]
    8782:	71a2      	strb	r2, [r4, #6]
    8784:	f8d5 2006 	ldr.w	r2, [r5, #6]
    8788:	f8c4 2007 	str.w	r2, [r4, #7]
    878c:	896a      	ldrh	r2, [r5, #10]
    878e:	f8a4 200b 	strh.w	r2, [r4, #11]
    8792:	7c2a      	ldrb	r2, [r5, #16]
    8794:	4620      	mov	r0, r4
    8796:	7362      	strb	r2, [r4, #13]
    8798:	1d29      	adds	r1, r5, #4
    879a:	7c6a      	ldrb	r2, [r5, #17]
    879c:	7382      	strb	r2, [r0, #14]
    879e:	7b8a      	ldrb	r2, [r1, #14]
    87a0:	73c2      	strb	r2, [r0, #15]
    87a2:	7e8a      	ldrb	r2, [r1, #26]
    87a4:	7402      	strb	r2, [r0, #16]
    87a6:	7a4a      	ldrb	r2, [r1, #9]
    87a8:	7442      	strb	r2, [r0, #17]
    87aa:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    87ae:	f8ad 2000 	strh.w	r2, [sp]
    87b2:	8242      	strh	r2, [r0, #18]
    87b4:	7cca      	ldrb	r2, [r1, #19]
    87b6:	7502      	strb	r2, [r0, #20]
    87b8:	694a      	ldr	r2, [r1, #20]
    87ba:	f8c0 2015 	str.w	r2, [r0, #21]
    87be:	8b0a      	ldrh	r2, [r1, #24]
    87c0:	f8a0 2019 	strh.w	r2, [r0, #25]
    87c4:	7a0a      	ldrb	r2, [r1, #8]
    87c6:	76c2      	strb	r2, [r0, #27]
    87c8:	7a0d      	ldrb	r5, [r1, #8]
    87ca:	2de5      	cmp	r5, #229	; 0xe5
    87cc:	d300      	bcc.n	87d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    87ce:	25e5      	movs	r5, #229	; 0xe5
    87d0:	462a      	mov	r2, r5
    87d2:	301c      	adds	r0, #28
    87d4:	311c      	adds	r1, #28
    87d6:	f001 fcc5 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    87da:	351a      	adds	r5, #26
    87dc:	b2e8      	uxtb	r0, r5
    87de:	2800      	cmp	r0, #0
    87e0:	d001      	beq.n	87e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x336>
    87e2:	7060      	strb	r0, [r4, #1]
    87e4:	1c80      	adds	r0, r0, #2
    87e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87ea:	7026      	strb	r6, [r4, #0]
    87ec:	70a7      	strb	r7, [r4, #2]
    87ee:	2001      	movs	r0, #1
    87f0:	e7f7      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    87f2:	7026      	strb	r6, [r4, #0]
    87f4:	70a3      	strb	r3, [r4, #2]
    87f6:	7928      	ldrb	r0, [r5, #4]
    87f8:	70e0      	strb	r0, [r4, #3]
    87fa:	7968      	ldrb	r0, [r5, #5]
    87fc:	7120      	strb	r0, [r4, #4]
    87fe:	79a8      	ldrb	r0, [r5, #6]
    8800:	7160      	strb	r0, [r4, #5]
    8802:	88e8      	ldrh	r0, [r5, #6]
    8804:	0a00      	lsrs	r0, r0, #8
    8806:	71a0      	strb	r0, [r4, #6]
    8808:	7a28      	ldrb	r0, [r5, #8]
    880a:	71e0      	strb	r0, [r4, #7]
    880c:	2006      	movs	r0, #6
    880e:	e7e8      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8810:	7026      	strb	r6, [r4, #0]
    8812:	2020      	movs	r0, #32
    8814:	e041      	b.n	889a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ea>
    8816:	7026      	strb	r6, [r4, #0]
    8818:	2021      	movs	r0, #33	; 0x21
    881a:	70a0      	strb	r0, [r4, #2]
    881c:	7928      	ldrb	r0, [r5, #4]
    881e:	70e0      	strb	r0, [r4, #3]
    8820:	7968      	ldrb	r0, [r5, #5]
    8822:	7120      	strb	r0, [r4, #4]
    8824:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    8828:	0a00      	lsrs	r0, r0, #8
    882a:	7160      	strb	r0, [r4, #5]
    882c:	79e8      	ldrb	r0, [r5, #7]
    882e:	71a0      	strb	r0, [r4, #6]
    8830:	7a28      	ldrb	r0, [r5, #8]
    8832:	71e0      	strb	r0, [r4, #7]
    8834:	7a68      	ldrb	r0, [r5, #9]
    8836:	7220      	strb	r0, [r4, #8]
    8838:	7aa8      	ldrb	r0, [r5, #10]
    883a:	7260      	strb	r0, [r4, #9]
    883c:	7ae8      	ldrb	r0, [r5, #11]
    883e:	72a0      	strb	r0, [r4, #10]
    8840:	2009      	movs	r0, #9
    8842:	e7ce      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8844:	7022      	strb	r2, [r4, #0]
    8846:	20a1      	movs	r0, #161	; 0xa1
    8848:	70a0      	strb	r0, [r4, #2]
    884a:	7928      	ldrb	r0, [r5, #4]
    884c:	70e0      	strb	r0, [r4, #3]
    884e:	7968      	ldrb	r0, [r5, #5]
    8850:	7120      	strb	r0, [r4, #4]
    8852:	2000      	movs	r0, #0
    8854:	7160      	strb	r0, [r4, #5]
    8856:	2004      	movs	r0, #4
    8858:	e7c3      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    885a:	7022      	strb	r2, [r4, #0]
    885c:	20a2      	movs	r0, #162	; 0xa2
    885e:	70a0      	strb	r0, [r4, #2]
    8860:	7928      	ldrb	r0, [r5, #4]
    8862:	70e0      	strb	r0, [r4, #3]
    8864:	88a8      	ldrh	r0, [r5, #4]
    8866:	0a00      	lsrs	r0, r0, #8
    8868:	7120      	strb	r0, [r4, #4]
    886a:	79a8      	ldrb	r0, [r5, #6]
    886c:	7160      	strb	r0, [r4, #5]
    886e:	88e8      	ldrh	r0, [r5, #6]
    8870:	0a00      	lsrs	r0, r0, #8
    8872:	71a0      	strb	r0, [r4, #6]
    8874:	7a28      	ldrb	r0, [r5, #8]
    8876:	71e0      	strb	r0, [r4, #7]
    8878:	8928      	ldrh	r0, [r5, #8]
    887a:	0a00      	lsrs	r0, r0, #8
    887c:	7220      	strb	r0, [r4, #8]
    887e:	7aa8      	ldrb	r0, [r5, #10]
    8880:	7260      	strb	r0, [r4, #9]
    8882:	8968      	ldrh	r0, [r5, #10]
    8884:	0a00      	lsrs	r0, r0, #8
    8886:	72a0      	strb	r0, [r4, #10]
    8888:	7b28      	ldrb	r0, [r5, #12]
    888a:	72e0      	strb	r0, [r4, #11]
    888c:	89a8      	ldrh	r0, [r5, #12]
    888e:	0a00      	lsrs	r0, r0, #8
    8890:	7320      	strb	r0, [r4, #12]
    8892:	200b      	movs	r0, #11
    8894:	e7a5      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    8896:	7022      	strb	r2, [r4, #0]
    8898:	20a3      	movs	r0, #163	; 0xa3
    889a:	70a0      	strb	r0, [r4, #2]
    889c:	7928      	ldrb	r0, [r5, #4]
    889e:	70e0      	strb	r0, [r4, #3]
    88a0:	88a8      	ldrh	r0, [r5, #4]
    88a2:	0a00      	lsrs	r0, r0, #8
    88a4:	7120      	strb	r0, [r4, #4]
    88a6:	79a8      	ldrb	r0, [r5, #6]
    88a8:	7160      	strb	r0, [r4, #5]
    88aa:	79e8      	ldrb	r0, [r5, #7]
    88ac:	71a0      	strb	r0, [r4, #6]
    88ae:	2005      	movs	r0, #5
    88b0:	e797      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    88b2:	7026      	strb	r6, [r4, #0]
    88b4:	2013      	movs	r0, #19
    88b6:	70a0      	strb	r0, [r4, #2]
    88b8:	7928      	ldrb	r0, [r5, #4]
    88ba:	70e0      	strb	r0, [r4, #3]
    88bc:	7968      	ldrb	r0, [r5, #5]
    88be:	7120      	strb	r0, [r4, #4]
    88c0:	f8d5 0006 	ldr.w	r0, [r5, #6]
    88c4:	f8c4 0005 	str.w	r0, [r4, #5]
    88c8:	8968      	ldrh	r0, [r5, #10]
    88ca:	f8a4 0009 	strh.w	r0, [r4, #9]
    88ce:	200a      	movs	r0, #10
    88d0:	e787      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    88d2:	7022      	strb	r2, [r4, #0]
    88d4:	20a4      	movs	r0, #164	; 0xa4
    88d6:	70a0      	strb	r0, [r4, #2]
    88d8:	7928      	ldrb	r0, [r5, #4]
    88da:	70e0      	strb	r0, [r4, #3]
    88dc:	88a8      	ldrh	r0, [r5, #4]
    88de:	0a00      	lsrs	r0, r0, #8
    88e0:	7120      	strb	r0, [r4, #4]
    88e2:	79a8      	ldrb	r0, [r5, #6]
    88e4:	7160      	strb	r0, [r4, #5]
    88e6:	79e8      	ldrb	r0, [r5, #7]
    88e8:	71a0      	strb	r0, [r4, #6]
    88ea:	e626      	b.n	853a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x8a>
    88ec:	7022      	strb	r2, [r4, #0]
    88ee:	2080      	movs	r0, #128	; 0x80
    88f0:	70a0      	strb	r0, [r4, #2]
    88f2:	88a9      	ldrh	r1, [r5, #4]
    88f4:	f8a4 1003 	strh.w	r1, [r4, #3]
    88f8:	88e9      	ldrh	r1, [r5, #6]
    88fa:	f8a4 1005 	strh.w	r1, [r4, #5]
    88fe:	7a29      	ldrb	r1, [r5, #8]
    8900:	71e1      	strb	r1, [r4, #7]
    8902:	8969      	ldrh	r1, [r5, #10]
    8904:	8121      	strh	r1, [r4, #8]
    8906:	89a9      	ldrh	r1, [r5, #12]
    8908:	8161      	strh	r1, [r4, #10]
    890a:	89e9      	ldrh	r1, [r5, #14]
    890c:	81a1      	strh	r1, [r4, #12]
    890e:	7c29      	ldrb	r1, [r5, #16]
    8910:	f001 0101 	and.w	r1, r1, #1
    8914:	73a1      	strb	r1, [r4, #14]
    8916:	200d      	movs	r0, #13
    8918:	e763      	b.n	87e2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>

0000891a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    891a:	223e      	movs	r2, #62	; 0x3e
    891c:	7002      	strb	r2, [r0, #0]
    891e:	2201      	movs	r2, #1
    8920:	7082      	strb	r2, [r0, #2]
    8922:	790a      	ldrb	r2, [r1, #4]
    8924:	70c2      	strb	r2, [r0, #3]
    8926:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    892a:	7102      	strb	r2, [r0, #4]
    892c:	880a      	ldrh	r2, [r1, #0]
    892e:	0a12      	lsrs	r2, r2, #8
    8930:	7142      	strb	r2, [r0, #5]
    8932:	788a      	ldrb	r2, [r1, #2]
    8934:	7182      	strb	r2, [r0, #6]
    8936:	78ca      	ldrb	r2, [r1, #3]
    8938:	71c2      	strb	r2, [r0, #7]
    893a:	684a      	ldr	r2, [r1, #4]
    893c:	6082      	str	r2, [r0, #8]
    893e:	890a      	ldrh	r2, [r1, #8]
    8940:	8182      	strh	r2, [r0, #12]
    8942:	7d8a      	ldrb	r2, [r1, #22]
    8944:	7382      	strb	r2, [r0, #14]
    8946:	8aca      	ldrh	r2, [r1, #22]
    8948:	0a12      	lsrs	r2, r2, #8
    894a:	73c2      	strb	r2, [r0, #15]
    894c:	7e0a      	ldrb	r2, [r1, #24]
    894e:	7402      	strb	r2, [r0, #16]
    8950:	8b0a      	ldrh	r2, [r1, #24]
    8952:	0a12      	lsrs	r2, r2, #8
    8954:	7442      	strb	r2, [r0, #17]
    8956:	7e8a      	ldrb	r2, [r1, #26]
    8958:	7482      	strb	r2, [r0, #18]
    895a:	8b4a      	ldrh	r2, [r1, #26]
    895c:	0a12      	lsrs	r2, r2, #8
    895e:	74c2      	strb	r2, [r0, #19]
    8960:	7f09      	ldrb	r1, [r1, #28]
    8962:	7501      	strb	r1, [r0, #20]
    8964:	2113      	movs	r1, #19
    8966:	7041      	strb	r1, [r0, #1]
    8968:	4608      	mov	r0, r1
    896a:	4770      	bx	lr
    896c:	223e      	movs	r2, #62	; 0x3e
    896e:	7002      	strb	r2, [r0, #0]
    8970:	220a      	movs	r2, #10
    8972:	7082      	strb	r2, [r0, #2]
    8974:	790a      	ldrb	r2, [r1, #4]
    8976:	70c2      	strb	r2, [r0, #3]
    8978:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    897c:	7102      	strb	r2, [r0, #4]
    897e:	880a      	ldrh	r2, [r1, #0]
    8980:	0a12      	lsrs	r2, r2, #8
    8982:	7142      	strb	r2, [r0, #5]
    8984:	788a      	ldrb	r2, [r1, #2]
    8986:	7182      	strb	r2, [r0, #6]
    8988:	78ca      	ldrb	r2, [r1, #3]
    898a:	71c2      	strb	r2, [r0, #7]
    898c:	684a      	ldr	r2, [r1, #4]
    898e:	6082      	str	r2, [r0, #8]
    8990:	890a      	ldrh	r2, [r1, #8]
    8992:	8182      	strh	r2, [r0, #12]
    8994:	f8d1 200a 	ldr.w	r2, [r1, #10]
    8998:	f8c0 200e 	str.w	r2, [r0, #14]
    899c:	89ca      	ldrh	r2, [r1, #14]
    899e:	8242      	strh	r2, [r0, #18]
    89a0:	690a      	ldr	r2, [r1, #16]
    89a2:	6142      	str	r2, [r0, #20]
    89a4:	8a8a      	ldrh	r2, [r1, #20]
    89a6:	8302      	strh	r2, [r0, #24]
    89a8:	7d8a      	ldrb	r2, [r1, #22]
    89aa:	7682      	strb	r2, [r0, #26]
    89ac:	8aca      	ldrh	r2, [r1, #22]
    89ae:	0a12      	lsrs	r2, r2, #8
    89b0:	76c2      	strb	r2, [r0, #27]
    89b2:	7e0a      	ldrb	r2, [r1, #24]
    89b4:	7702      	strb	r2, [r0, #28]
    89b6:	8b0a      	ldrh	r2, [r1, #24]
    89b8:	0a12      	lsrs	r2, r2, #8
    89ba:	7742      	strb	r2, [r0, #29]
    89bc:	7e8a      	ldrb	r2, [r1, #26]
    89be:	7782      	strb	r2, [r0, #30]
    89c0:	8b4a      	ldrh	r2, [r1, #26]
    89c2:	0a12      	lsrs	r2, r2, #8
    89c4:	77c2      	strb	r2, [r0, #31]
    89c6:	7f09      	ldrb	r1, [r1, #28]
    89c8:	f880 1020 	strb.w	r1, [r0, #32]
    89cc:	211f      	movs	r1, #31
    89ce:	7041      	strb	r1, [r0, #1]
    89d0:	4608      	mov	r0, r1
    89d2:	4770      	bx	lr
    89d4:	094a      	lsrs	r2, r1, #5
    89d6:	f001 011f 	and.w	r1, r1, #31
    89da:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    89de:	40c8      	lsrs	r0, r1
    89e0:	f000 0001 	and.w	r0, r0, #1
    89e4:	4770      	bx	lr

000089e6 <sdc_hci_get>:
    89e6:	b510      	push	{r4, lr}
    89e8:	460c      	mov	r4, r1
    89ea:	b130      	cbz	r0, 89fa <sdc_hci_get+0x14>
    89ec:	b12c      	cbz	r4, 89fa <sdc_hci_get+0x14>
    89ee:	f7f7 fda1 	bl	534 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    89f2:	b128      	cbz	r0, 8a00 <sdc_hci_get+0x1a>
    89f4:	7020      	strb	r0, [r4, #0]
    89f6:	2000      	movs	r0, #0
    89f8:	bd10      	pop	{r4, pc}
    89fa:	f06f 0015 	mvn.w	r0, #21
    89fe:	bd10      	pop	{r4, pc}
    8a00:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8a04:	bd10      	pop	{r4, pc}

00008a06 <sdc_hci_cmd_cb_set_event_mask>:
    8a06:	b510      	push	{r4, lr}
    8a08:	f7f7 fe34 	bl	674 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    8a0c:	2000      	movs	r0, #0
    8a0e:	bd10      	pop	{r4, pc}

00008a10 <sdc_hci_cmd_vs_conn_event_extend>:
    8a10:	b508      	push	{r3, lr}
    8a12:	7800      	ldrb	r0, [r0, #0]
    8a14:	f88d 0000 	strb.w	r0, [sp]
    8a18:	4668      	mov	r0, sp
    8a1a:	f000 ffd1 	bl	99c0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    8a1e:	bd08      	pop	{r3, pc}

00008a20 <sdc_hci_cmd_vs_conn_update>:
    8a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8a22:	2100      	movs	r1, #0
    8a24:	9100      	str	r1, [sp, #0]
    8a26:	9101      	str	r1, [sp, #4]
    8a28:	9102      	str	r1, [sp, #8]
    8a2a:	9103      	str	r1, [sp, #12]
    8a2c:	f8d0 1002 	ldr.w	r1, [r0, #2]
    8a30:	f641 524c 	movw	r2, #7500	; 0x1d4c
    8a34:	4291      	cmp	r1, r2
    8a36:	d304      	bcc.n	8a42 <sdc_hci_cmd_vs_conn_update+0x22>
    8a38:	f240 42e2 	movw	r2, #1250	; 0x4e2
    8a3c:	fbb1 f1f2 	udiv	r1, r1, r2
    8a40:	e005      	b.n	8a4e <sdc_hci_cmd_vs_conn_update+0x2e>
    8a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a46:	fbb1 f1f2 	udiv	r1, r1, r2
    8a4a:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    8a4e:	8802      	ldrh	r2, [r0, #0]
    8a50:	b289      	uxth	r1, r1
    8a52:	f8ad 2000 	strh.w	r2, [sp]
    8a56:	f8ad 1002 	strh.w	r1, [sp, #2]
    8a5a:	f8ad 1004 	strh.w	r1, [sp, #4]
    8a5e:	88c1      	ldrh	r1, [r0, #6]
    8a60:	f8ad 1006 	strh.w	r1, [sp, #6]
    8a64:	8900      	ldrh	r0, [r0, #8]
    8a66:	f8ad 0008 	strh.w	r0, [sp, #8]
    8a6a:	4668      	mov	r0, sp
    8a6c:	f000 fec3 	bl	97f6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    8a70:	b004      	add	sp, #16
    8a72:	bd10      	pop	{r4, pc}

00008a74 <sdc_hci_cmd_vs_event_length_set>:
    8a74:	f7fa bbbe 	b.w	31f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

00008a78 <sdc_hci_cmd_vs_llpm_mode_set>:
    8a78:	2001      	movs	r0, #1
    8a7a:	4770      	bx	lr

00008a7c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    8a7c:	7800      	ldrb	r0, [r0, #0]
    8a7e:	b100      	cbz	r0, 8a82 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    8a80:	2001      	movs	r0, #1
    8a82:	f000 bf87 	b.w	9994 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

00008a86 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    8a86:	b510      	push	{r4, lr}
    8a88:	4604      	mov	r4, r0
    8a8a:	f7ff f9bd 	bl	7e08 <mpsl_temperature_get>
    8a8e:	17c1      	asrs	r1, r0, #31
    8a90:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    8a94:	1080      	asrs	r0, r0, #2
    8a96:	287f      	cmp	r0, #127	; 0x7f
    8a98:	dd01      	ble.n	8a9e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    8a9a:	207f      	movs	r0, #127	; 0x7f
    8a9c:	e004      	b.n	8aa8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8a9e:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    8aa2:	4288      	cmp	r0, r1
    8aa4:	da00      	bge.n	8aa8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    8aa6:	4608      	mov	r0, r1
    8aa8:	7020      	strb	r0, [r4, #0]
    8aaa:	2000      	movs	r0, #0
    8aac:	bd10      	pop	{r4, pc}

00008aae <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    8aae:	f000 bf76 	b.w	999e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

00008ab2 <sdc_hci_cmd_ip_read_bd_addr>:
    8ab2:	f000 bf8d 	b.w	99d0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

00008ab6 <sdc_hci_cmd_ip_read_local_version_information>:
    8ab6:	f7fa bbef 	b.w	3298 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

00008aba <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    8aba:	f000 be78 	b.w	97ae <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

00008abe <sdc_hci_cmd_le_clear_filter_accept_list>:
    8abe:	f000 be8d 	b.w	97dc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

00008ac2 <sdc_hci_cmd_le_encrypt>:
    8ac2:	f000 bedb 	b.w	987c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

00008ac6 <sdc_hci_cmd_le_rand>:
    8ac6:	f000 bee2 	b.w	988e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

00008aca <sdc_hci_cmd_le_read_buffer_size>:
    8aca:	f7fa bb73 	b.w	31b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

00008ace <sdc_hci_cmd_le_read_filter_accept_list_size>:
    8ace:	f000 bef4 	b.w	98ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

00008ad2 <sdc_hci_cmd_le_read_transmit_power>:
    8ad2:	f000 bee2 	b.w	989a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

00008ad6 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    8ad6:	f000 bef7 	b.w	98c8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

00008ada <sdc_hci_cmd_le_set_event_mask>:
    8ada:	b510      	push	{r4, lr}
    8adc:	f7f7 fdc2 	bl	664 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    8ae0:	2000      	movs	r0, #0
    8ae2:	bd10      	pop	{r4, pc}

00008ae4 <sdc_hci_cmd_le_set_random_address>:
    8ae4:	f000 bf05 	b.w	98f2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

00008ae8 <sdc_hci_cmd_le_set_scan_enable>:
    8ae8:	f000 bf11 	b.w	990e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

00008aec <sdc_hci_cmd_le_set_scan_params>:
    8aec:	f000 bf25 	b.w	993a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>
    8af0:	b570      	push	{r4, r5, r6, lr}
    8af2:	880b      	ldrh	r3, [r1, #0]
    8af4:	7cc4      	ldrb	r4, [r0, #19]
    8af6:	f100 0518 	add.w	r5, r0, #24
    8afa:	f3c3 060e 	ubfx	r6, r3, #0, #15
    8afe:	8802      	ldrh	r2, [r0, #0]
    8b00:	4435      	add	r5, r6
    8b02:	1d64      	adds	r4, r4, #5
    8b04:	882d      	ldrh	r5, [r5, #0]
    8b06:	4422      	add	r2, r4
    8b08:	b292      	uxth	r2, r2
    8b0a:	4425      	add	r5, r4
    8b0c:	1e54      	subs	r4, r2, #1
    8b0e:	442c      	add	r4, r5
    8b10:	fb94 f4f2 	sdiv	r4, r4, r2
    8b14:	fb02 6204 	mla	r2, r2, r4, r6
    8b18:	8840      	ldrh	r0, [r0, #2]
    8b1a:	b292      	uxth	r2, r2
    8b1c:	4290      	cmp	r0, r2
    8b1e:	d903      	bls.n	8b28 <sdc_hci_cmd_le_set_scan_params+0x3c>
    8b20:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    8b24:	4310      	orrs	r0, r2
    8b26:	e002      	b.n	8b2e <sdc_hci_cmd_le_set_scan_params+0x42>
    8b28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8b2c:	4398      	bics	r0, r3
    8b2e:	8008      	strh	r0, [r1, #0]
    8b30:	bd70      	pop	{r4, r5, r6, pc}
    8b32:	0442      	lsls	r2, r0, #17
    8b34:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    8b38:	d107      	bne.n	8b4a <sdc_hci_cmd_le_set_scan_params+0x5e>
    8b3a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    8b3e:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    8b42:	4288      	cmp	r0, r1
    8b44:	d001      	beq.n	8b4a <sdc_hci_cmd_le_set_scan_params+0x5e>
    8b46:	2001      	movs	r0, #1
    8b48:	4770      	bx	lr
    8b4a:	2000      	movs	r0, #0
    8b4c:	4770      	bx	lr

00008b4e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    8b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b52:	4604      	mov	r4, r0
    8b54:	f100 0318 	add.w	r3, r0, #24
    8b58:	88c0      	ldrh	r0, [r0, #6]
    8b5a:	460e      	mov	r6, r1
    8b5c:	f3c0 070e 	ubfx	r7, r0, #0, #15
    8b60:	8a20      	ldrh	r0, [r4, #16]
    8b62:	19d9      	adds	r1, r3, r7
    8b64:	b108      	cbz	r0, 8b6a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    8b66:	42b0      	cmp	r0, r6
    8b68:	d202      	bcs.n	8b70 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    8b6a:	2000      	movs	r0, #0
    8b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b70:	89a0      	ldrh	r0, [r4, #12]
    8b72:	2500      	movs	r5, #0
    8b74:	b140      	cbz	r0, 8b88 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    8b76:	f8b1 c000 	ldrh.w	ip, [r1]
    8b7a:	4560      	cmp	r0, ip
    8b7c:	d006      	beq.n	8b8c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    8b7e:	f44f 7101 	mov.w	r1, #516	; 0x204
    8b82:	2014      	movs	r0, #20
    8b84:	f7f7 fc18 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b88:	800d      	strh	r5, [r1, #0]
    8b8a:	e00e      	b.n	8baa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    8b8c:	f894 c013 	ldrb.w	ip, [r4, #19]
    8b90:	4418      	add	r0, r3
    8b92:	f10c 0c05 	add.w	ip, ip, #5
    8b96:	44bc      	add	ip, r7
    8b98:	4460      	add	r0, ip
    8b9a:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    8b9e:	f820 cc03 	strh.w	ip, [r0, #-3]
    8ba2:	f894 c016 	ldrb.w	ip, [r4, #22]
    8ba6:	f800 cc01 	strb.w	ip, [r0, #-1]
    8baa:	89a0      	ldrh	r0, [r4, #12]
    8bac:	4430      	add	r0, r6
    8bae:	81a0      	strh	r0, [r4, #12]
    8bb0:	8808      	ldrh	r0, [r1, #0]
    8bb2:	4430      	add	r0, r6
    8bb4:	8008      	strh	r0, [r1, #0]
    8bb6:	b12a      	cbz	r2, 8bc4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    8bb8:	1da1      	adds	r1, r4, #6
    8bba:	4620      	mov	r0, r4
    8bbc:	f7ff ff98 	bl	8af0 <sdc_hci_cmd_le_set_scan_params+0x4>
    8bc0:	81a5      	strh	r5, [r4, #12]
    8bc2:	e00a      	b.n	8bda <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    8bc4:	7ce0      	ldrb	r0, [r4, #19]
    8bc6:	89a1      	ldrh	r1, [r4, #12]
    8bc8:	1d40      	adds	r0, r0, #5
    8bca:	4438      	add	r0, r7
    8bcc:	4419      	add	r1, r3
    8bce:	4408      	add	r0, r1
    8bd0:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    8bd4:	82a1      	strh	r1, [r4, #20]
    8bd6:	7880      	ldrb	r0, [r0, #2]
    8bd8:	75a0      	strb	r0, [r4, #22]
    8bda:	8225      	strh	r5, [r4, #16]
    8bdc:	2001      	movs	r0, #1
    8bde:	e7c5      	b.n	8b6c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

00008be0 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    8be0:	1c80      	adds	r0, r0, #2
    8be2:	4770      	bx	lr

00008be4 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    8be4:	b510      	push	{r4, lr}
    8be6:	88c2      	ldrh	r2, [r0, #6]
    8be8:	8903      	ldrh	r3, [r0, #8]
    8bea:	f3c2 010e 	ubfx	r1, r2, #0, #15
    8bee:	f3c3 040e 	ubfx	r4, r3, #0, #15
    8bf2:	1a61      	subs	r1, r4, r1
    8bf4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    8bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    8bfc:	429a      	cmp	r2, r3
    8bfe:	d101      	bne.n	8c04 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    8c00:	8842      	ldrh	r2, [r0, #2]
    8c02:	4411      	add	r1, r2
    8c04:	7cc2      	ldrb	r2, [r0, #19]
    8c06:	8800      	ldrh	r0, [r0, #0]
    8c08:	4410      	add	r0, r2
    8c0a:	1d40      	adds	r0, r0, #5
    8c0c:	b280      	uxth	r0, r0
    8c0e:	fb91 f0f0 	sdiv	r0, r1, r0
    8c12:	b280      	uxth	r0, r0
    8c14:	bd10      	pop	{r4, pc}

00008c16 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    8c16:	b510      	push	{r4, lr}
    8c18:	4604      	mov	r4, r0
    8c1a:	88c0      	ldrh	r0, [r0, #6]
    8c1c:	88a1      	ldrh	r1, [r4, #4]
    8c1e:	4281      	cmp	r1, r0
    8c20:	d003      	beq.n	8c2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    8c22:	8960      	ldrh	r0, [r4, #10]
    8c24:	b908      	cbnz	r0, 8c2a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    8c26:	89e0      	ldrh	r0, [r4, #14]
    8c28:	b108      	cbz	r0, 8c2e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    8c2a:	2000      	movs	r0, #0
    8c2c:	bd10      	pop	{r4, pc}
    8c2e:	1d21      	adds	r1, r4, #4
    8c30:	4620      	mov	r0, r4
    8c32:	f7ff ff5d 	bl	8af0 <sdc_hci_cmd_le_set_scan_params+0x4>
    8c36:	2000      	movs	r0, #0
    8c38:	81e0      	strh	r0, [r4, #14]
    8c3a:	2001      	movs	r0, #1
    8c3c:	bd10      	pop	{r4, pc}

00008c3e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    8c3e:	b510      	push	{r4, lr}
    8c40:	88c4      	ldrh	r4, [r0, #6]
    8c42:	8883      	ldrh	r3, [r0, #4]
    8c44:	4601      	mov	r1, r0
    8c46:	f100 0218 	add.w	r2, r0, #24
    8c4a:	f3c3 000e 	ubfx	r0, r3, #0, #15
    8c4e:	4410      	add	r0, r2
    8c50:	42a3      	cmp	r3, r4
    8c52:	d002      	beq.n	8c5a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    8c54:	8949      	ldrh	r1, [r1, #10]
    8c56:	2900      	cmp	r1, #0
    8c58:	d000      	beq.n	8c5c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    8c5a:	2000      	movs	r0, #0
    8c5c:	bd10      	pop	{r4, pc}

00008c5e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    8c5e:	8803      	ldrh	r3, [r0, #0]
    8c60:	2b45      	cmp	r3, #69	; 0x45
    8c62:	d200      	bcs.n	8c66 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    8c64:	2345      	movs	r3, #69	; 0x45
    8c66:	8013      	strh	r3, [r2, #0]
    8c68:	88c2      	ldrh	r2, [r0, #6]
    8c6a:	f3c2 030e 	ubfx	r3, r2, #0, #15
    8c6e:	f100 0218 	add.w	r2, r0, #24
    8c72:	441a      	add	r2, r3
    8c74:	600a      	str	r2, [r1, #0]
    8c76:	8980      	ldrh	r0, [r0, #12]
    8c78:	4770      	bx	lr

00008c7a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    8c7a:	7cc0      	ldrb	r0, [r0, #19]
    8c7c:	1d40      	adds	r0, r0, #5
    8c7e:	4408      	add	r0, r1
    8c80:	1ec0      	subs	r0, r0, #3
    8c82:	6010      	str	r0, [r2, #0]
    8c84:	8808      	ldrh	r0, [r1, #0]
    8c86:	4770      	bx	lr

00008c88 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    8c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c8c:	461d      	mov	r5, r3
    8c8e:	4616      	mov	r6, r2
    8c90:	9f06      	ldr	r7, [sp, #24]
    8c92:	460b      	mov	r3, r1
    8c94:	4604      	mov	r4, r0
    8c96:	463a      	mov	r2, r7
    8c98:	4629      	mov	r1, r5
    8c9a:	4630      	mov	r0, r6
    8c9c:	f000 f839 	bl	8d12 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8ca0:	4283      	cmp	r3, r0
    8ca2:	d201      	bcs.n	8ca8 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    8ca4:	219e      	movs	r1, #158	; 0x9e
    8ca6:	e012      	b.n	8cce <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8ca8:	07a0      	lsls	r0, r4, #30
    8caa:	d001      	beq.n	8cb0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    8cac:	219f      	movs	r1, #159	; 0x9f
    8cae:	e00e      	b.n	8cce <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    8cb0:	2218      	movs	r2, #24
    8cb2:	2100      	movs	r1, #0
    8cb4:	4620      	mov	r0, r4
    8cb6:	f001 facf 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8cba:	19a8      	adds	r0, r5, r6
    8cbc:	1d40      	adds	r0, r0, #5
    8cbe:	4378      	muls	r0, r7
    8cc0:	b280      	uxth	r0, r0
    8cc2:	74e5      	strb	r5, [r4, #19]
    8cc4:	8060      	strh	r0, [r4, #2]
    8cc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    8cca:	d903      	bls.n	8cd4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    8ccc:	21a4      	movs	r1, #164	; 0xa4
    8cce:	2014      	movs	r0, #20
    8cd0:	f7f7 fb72 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cd4:	8026      	strh	r6, [r4, #0]
    8cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008cda <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    8cda:	b570      	push	{r4, r5, r6, lr}
    8cdc:	460b      	mov	r3, r1
    8cde:	4604      	mov	r4, r0
    8ce0:	f100 0118 	add.w	r1, r0, #24
    8ce4:	8902      	ldrh	r2, [r0, #8]
    8ce6:	8880      	ldrh	r0, [r0, #4]
    8ce8:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8cec:	440d      	add	r5, r1
    8cee:	4282      	cmp	r2, r0
    8cf0:	d101      	bne.n	8cf6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    8cf2:	2000      	movs	r0, #0
    8cf4:	bd70      	pop	{r4, r5, r6, pc}
    8cf6:	b123      	cbz	r3, 8d02 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    8cf8:	7ce2      	ldrb	r2, [r4, #19]
    8cfa:	1ca9      	adds	r1, r5, #2
    8cfc:	4618      	mov	r0, r3
    8cfe:	f001 fa31 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8d02:	882d      	ldrh	r5, [r5, #0]
    8d04:	f104 0108 	add.w	r1, r4, #8
    8d08:	4620      	mov	r0, r4
    8d0a:	f7ff fef1 	bl	8af0 <sdc_hci_cmd_le_set_scan_params+0x4>
    8d0e:	4628      	mov	r0, r5
    8d10:	bd70      	pop	{r4, r5, r6, pc}

00008d12 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    8d12:	4401      	add	r1, r0
    8d14:	1d49      	adds	r1, r1, #5
    8d16:	4351      	muls	r1, r2
    8d18:	b28a      	uxth	r2, r1
    8d1a:	2100      	movs	r1, #0
    8d1c:	2845      	cmp	r0, #69	; 0x45
    8d1e:	d202      	bcs.n	8d26 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    8d20:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    8d24:	b281      	uxth	r1, r0
    8d26:	3218      	adds	r2, #24
    8d28:	1850      	adds	r0, r2, r1
    8d2a:	b280      	uxth	r0, r0
    8d2c:	4770      	bx	lr

00008d2e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    8d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8d32:	4688      	mov	r8, r1
    8d34:	88c1      	ldrh	r1, [r0, #6]
    8d36:	4604      	mov	r4, r0
    8d38:	8900      	ldrh	r0, [r0, #8]
    8d3a:	f3c1 060e 	ubfx	r6, r1, #0, #15
    8d3e:	f104 0518 	add.w	r5, r4, #24
    8d42:	f3c0 070e 	ubfx	r7, r0, #0, #15
    8d46:	eb05 0906 	add.w	r9, r5, r6
    8d4a:	f7ff fef2 	bl	8b32 <sdc_hci_cmd_le_set_scan_params+0x46>
    8d4e:	2200      	movs	r2, #0
    8d50:	b998      	cbnz	r0, 8d7a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    8d52:	8820      	ldrh	r0, [r4, #0]
    8d54:	2845      	cmp	r0, #69	; 0x45
    8d56:	d200      	bcs.n	8d5a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    8d58:	2045      	movs	r0, #69	; 0x45
    8d5a:	42b7      	cmp	r7, r6
    8d5c:	d906      	bls.n	8d6c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    8d5e:	7ce3      	ldrb	r3, [r4, #19]
    8d60:	1bb9      	subs	r1, r7, r6
    8d62:	1ac9      	subs	r1, r1, r3
    8d64:	1f49      	subs	r1, r1, #5
    8d66:	4281      	cmp	r1, r0
    8d68:	da00      	bge.n	8d6c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    8d6a:	4608      	mov	r0, r1
    8d6c:	89a1      	ldrh	r1, [r4, #12]
    8d6e:	b111      	cbz	r1, 8d76 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    8d70:	f8b9 3000 	ldrh.w	r3, [r9]
    8d74:	1ac0      	subs	r0, r0, r3
    8d76:	4540      	cmp	r0, r8
    8d78:	da03      	bge.n	8d82 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    8d7a:	8222      	strh	r2, [r4, #16]
    8d7c:	2000      	movs	r0, #0
    8d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8d82:	7ce0      	ldrb	r0, [r4, #19]
    8d84:	4429      	add	r1, r5
    8d86:	1d40      	adds	r0, r0, #5
    8d88:	4430      	add	r0, r6
    8d8a:	4408      	add	r0, r1
    8d8c:	f8a4 8010 	strh.w	r8, [r4, #16]
    8d90:	1ec0      	subs	r0, r0, #3
    8d92:	e7f4      	b.n	8d7e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

00008d94 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    8d94:	b510      	push	{r4, lr}
    8d96:	000c      	movs	r4, r1
    8d98:	d004      	beq.n	8da4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    8d9a:	2c08      	cmp	r4, #8
    8d9c:	d207      	bcs.n	8dae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    8d9e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    8da2:	e00a      	b.n	8dba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    8da4:	b108      	cbz	r0, 8daa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    8da6:	2100      	movs	r1, #0
    8da8:	6001      	str	r1, [r0, #0]
    8daa:	2000      	movs	r0, #0
    8dac:	bd10      	pop	{r4, pc}
    8dae:	b158      	cbz	r0, 8dc8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    8db0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    8db4:	d304      	bcc.n	8dc0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    8db6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    8dba:	2015      	movs	r0, #21
    8dbc:	f7f7 fafc 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8dc0:	b2a1      	uxth	r1, r4
    8dc2:	6800      	ldr	r0, [r0, #0]
    8dc4:	f000 f814 	bl	8df0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    8dc8:	1d20      	adds	r0, r4, #4
    8dca:	bd10      	pop	{r4, pc}

00008dcc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    8dcc:	2100      	movs	r1, #0
    8dce:	6802      	ldr	r2, [r0, #0]
    8dd0:	e003      	b.n	8dda <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    8dd2:	8893      	ldrh	r3, [r2, #4]
    8dd4:	6812      	ldr	r2, [r2, #0]
    8dd6:	4419      	add	r1, r3
    8dd8:	b289      	uxth	r1, r1
    8dda:	2a00      	cmp	r2, #0
    8ddc:	d1f9      	bne.n	8dd2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    8dde:	f000 b807 	b.w	8df0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

00008de2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    8de2:	2300      	movs	r3, #0
    8de4:	600b      	str	r3, [r1, #0]
    8de6:	808a      	strh	r2, [r1, #4]
    8de8:	6802      	ldr	r2, [r0, #0]
    8dea:	600a      	str	r2, [r1, #0]
    8dec:	6001      	str	r1, [r0, #0]
    8dee:	4770      	bx	lr
    8df0:	2300      	movs	r3, #0
    8df2:	6043      	str	r3, [r0, #4]
    8df4:	1d02      	adds	r2, r0, #4
    8df6:	8101      	strh	r1, [r0, #8]
    8df8:	6002      	str	r2, [r0, #0]
    8dfa:	4770      	bx	lr
    8dfc:	b170      	cbz	r0, 8e1c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3a>
    8dfe:	7882      	ldrb	r2, [r0, #2]
    8e00:	fbb1 f3f2 	udiv	r3, r1, r2
    8e04:	fb02 1213 	mls	r2, r2, r3, r1
    8e08:	b2d2      	uxtb	r2, r2
    8e0a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    8e0e:	895b      	ldrh	r3, [r3, #10]
    8e10:	428b      	cmp	r3, r1
    8e12:	d101      	bne.n	8e18 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x36>
    8e14:	4610      	mov	r0, r2
    8e16:	4770      	bx	lr
    8e18:	78c3      	ldrb	r3, [r0, #3]
    8e1a:	b10b      	cbz	r3, 8e20 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x3e>
    8e1c:	20ff      	movs	r0, #255	; 0xff
    8e1e:	4770      	bx	lr
    8e20:	f7f7 bd60 	b.w	8e4 <__z_interrupt_stack_SIZEOF+0xa4>
    8e24:	8802      	ldrh	r2, [r0, #0]
    8e26:	fb01 0102 	mla	r1, r1, r2, r0
    8e2a:	7880      	ldrb	r0, [r0, #2]
    8e2c:	220a      	movs	r2, #10
    8e2e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    8e32:	4408      	add	r0, r1
    8e34:	4770      	bx	lr

00008e36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    8e36:	b570      	push	{r4, r5, r6, lr}
    8e38:	460e      	mov	r6, r1
    8e3a:	461d      	mov	r5, r3
    8e3c:	4611      	mov	r1, r2
    8e3e:	f000 f813 	bl	8e68 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    8e42:	4604      	mov	r4, r0
    8e44:	4629      	mov	r1, r5
    8e46:	4630      	mov	r0, r6
    8e48:	f000 f804 	bl	8e54 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    8e4c:	4420      	add	r0, r4
    8e4e:	1d00      	adds	r0, r0, #4
    8e50:	b280      	uxth	r0, r0
    8e52:	bd70      	pop	{r4, r5, r6, pc}
    8e54:	b510      	push	{r4, lr}
    8e56:	460a      	mov	r2, r1
    8e58:	2109      	movs	r1, #9
    8e5a:	f7ff ff5a 	bl	8d12 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e5e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8e62:	1cc0      	adds	r0, r0, #3
    8e64:	4008      	ands	r0, r1
    8e66:	bd10      	pop	{r4, pc}
    8e68:	b510      	push	{r4, lr}
    8e6a:	460a      	mov	r2, r1
    8e6c:	210a      	movs	r1, #10
    8e6e:	f7ff ff50 	bl	8d12 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    8e72:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    8e76:	1cc0      	adds	r0, r0, #3
    8e78:	4008      	ands	r0, r1
    8e7a:	bd10      	pop	{r4, pc}
    8e7c:	2800      	cmp	r0, #0
    8e7e:	db09      	blt.n	8e94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    8e80:	f000 021f 	and.w	r2, r0, #31
    8e84:	2101      	movs	r1, #1
    8e86:	4091      	lsls	r1, r2
    8e88:	0940      	lsrs	r0, r0, #5
    8e8a:	0080      	lsls	r0, r0, #2
    8e8c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8e90:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8e94:	4770      	bx	lr
    8e96:	2800      	cmp	r0, #0
    8e98:	db0d      	blt.n	8eb6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    8e9a:	f000 021f 	and.w	r2, r0, #31
    8e9e:	2101      	movs	r1, #1
    8ea0:	4091      	lsls	r1, r2
    8ea2:	0940      	lsrs	r0, r0, #5
    8ea4:	0080      	lsls	r0, r0, #2
    8ea6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8eaa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    8eae:	f3bf 8f4f 	dsb	sy
    8eb2:	f3bf 8f6f 	isb	sy
    8eb6:	4770      	bx	lr
    8eb8:	b510      	push	{r4, lr}
    8eba:	200e      	movs	r0, #14
    8ebc:	f7ff ffeb 	bl	8e96 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    8ec0:	200e      	movs	r0, #14
    8ec2:	f7ff ffdb 	bl	8e7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8ec6:	200f      	movs	r0, #15
    8ec8:	f7ff ffe5 	bl	8e96 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    8ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ed0:	200f      	movs	r0, #15
    8ed2:	f7ff bfd3 	b.w	8e7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    8ed6:	2800      	cmp	r0, #0
    8ed8:	db09      	blt.n	8eee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    8eda:	f000 021f 	and.w	r2, r0, #31
    8ede:	2101      	movs	r1, #1
    8ee0:	4091      	lsls	r1, r2
    8ee2:	0940      	lsrs	r0, r0, #5
    8ee4:	0080      	lsls	r0, r0, #2
    8ee6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    8eea:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    8eee:	4770      	bx	lr
    8ef0:	5840      	ldr	r0, [r0, r1]
    8ef2:	2800      	cmp	r0, #0
    8ef4:	d000      	beq.n	8ef8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    8ef6:	2001      	movs	r0, #1
    8ef8:	4770      	bx	lr

00008efa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    8efa:	b510      	push	{r4, lr}
    8efc:	4604      	mov	r4, r0
    8efe:	4620      	mov	r0, r4
    8f00:	f7f7 fe88 	bl	c14 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    8f04:	2811      	cmp	r0, #17
    8f06:	d0fa      	beq.n	8efe <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    8f08:	bd10      	pop	{r4, pc}

00008f0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    8f0a:	b510      	push	{r4, lr}
    8f0c:	f7ff fff5 	bl	8efa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    8f10:	2800      	cmp	r0, #0
    8f12:	d003      	beq.n	8f1c <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    8f14:	21a9      	movs	r1, #169	; 0xa9
    8f16:	201d      	movs	r0, #29
    8f18:	f7f7 fa4e 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f1c:	bd10      	pop	{r4, pc}

00008f1e <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    8f1e:	f7f7 bf57 	b.w	dd0 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0xc>

00008f22 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    8f22:	b510      	push	{r4, lr}
    8f24:	4050      	eors	r0, r2
    8f26:	780a      	ldrb	r2, [r1, #0]
    8f28:	781c      	ldrb	r4, [r3, #0]
    8f2a:	4062      	eors	r2, r4
    8f2c:	4410      	add	r0, r2
    8f2e:	784a      	ldrb	r2, [r1, #1]
    8f30:	785c      	ldrb	r4, [r3, #1]
    8f32:	4062      	eors	r2, r4
    8f34:	4410      	add	r0, r2
    8f36:	788a      	ldrb	r2, [r1, #2]
    8f38:	789c      	ldrb	r4, [r3, #2]
    8f3a:	4062      	eors	r2, r4
    8f3c:	4410      	add	r0, r2
    8f3e:	78ca      	ldrb	r2, [r1, #3]
    8f40:	78dc      	ldrb	r4, [r3, #3]
    8f42:	4062      	eors	r2, r4
    8f44:	4410      	add	r0, r2
    8f46:	790a      	ldrb	r2, [r1, #4]
    8f48:	791c      	ldrb	r4, [r3, #4]
    8f4a:	7949      	ldrb	r1, [r1, #5]
    8f4c:	4062      	eors	r2, r4
    8f4e:	4410      	add	r0, r2
    8f50:	795a      	ldrb	r2, [r3, #5]
    8f52:	4051      	eors	r1, r2
    8f54:	42c1      	cmn	r1, r0
    8f56:	d101      	bne.n	8f5c <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    8f58:	2001      	movs	r0, #1
    8f5a:	bd10      	pop	{r4, pc}
    8f5c:	2000      	movs	r0, #0
    8f5e:	bd10      	pop	{r4, pc}

00008f60 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    8f60:	b510      	push	{r4, lr}
    8f62:	2900      	cmp	r1, #0
    8f64:	4604      	mov	r4, r0
    8f66:	f04f 0106 	mov.w	r1, #6
    8f6a:	d002      	beq.n	8f72 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    8f6c:	f7f7 fa88 	bl	480 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f70:	e001      	b.n	8f76 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    8f72:	f7f7 fa93 	bl	49c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f76:	7960      	ldrb	r0, [r4, #5]
    8f78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8f7c:	7160      	strb	r0, [r4, #5]
    8f7e:	bd10      	pop	{r4, pc}

00008f80 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    8f80:	4770      	bx	lr

00008f82 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    8f82:	b530      	push	{r4, r5, lr}
    8f84:	460c      	mov	r4, r1
    8f86:	4605      	mov	r5, r0
    8f88:	b08d      	sub	sp, #52	; 0x34
    8f8a:	f04f 0103 	mov.w	r1, #3
    8f8e:	f104 0003 	add.w	r0, r4, #3
    8f92:	b112      	cbz	r2, 8f9a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    8f94:	f7f7 fa74 	bl	480 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    8f98:	e001      	b.n	8f9e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    8f9a:	f7f7 fa7f 	bl	49c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8f9e:	7960      	ldrb	r0, [r4, #5]
    8fa0:	220d      	movs	r2, #13
    8fa2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    8fa6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    8faa:	7160      	strb	r0, [r4, #5]
    8fac:	2100      	movs	r1, #0
    8fae:	a804      	add	r0, sp, #16
    8fb0:	f001 f952 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8fb4:	78e0      	ldrb	r0, [r4, #3]
    8fb6:	f88d 001f 	strb.w	r0, [sp, #31]
    8fba:	7920      	ldrb	r0, [r4, #4]
    8fbc:	f88d 001e 	strb.w	r0, [sp, #30]
    8fc0:	7960      	ldrb	r0, [r4, #5]
    8fc2:	f88d 001d 	strb.w	r0, [sp, #29]
    8fc6:	2210      	movs	r2, #16
    8fc8:	4629      	mov	r1, r5
    8fca:	4668      	mov	r0, sp
    8fcc:	f001 f8ca 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8fd0:	4668      	mov	r0, sp
    8fd2:	f7ff ff9a 	bl	8f0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    8fd6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    8fda:	7020      	strb	r0, [r4, #0]
    8fdc:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    8fe0:	7060      	strb	r0, [r4, #1]
    8fe2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    8fe6:	70a0      	strb	r0, [r4, #2]
    8fe8:	b00d      	add	sp, #52	; 0x34
    8fea:	bd30      	pop	{r4, r5, pc}

00008fec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    8fec:	b530      	push	{r4, r5, lr}
    8fee:	b08d      	sub	sp, #52	; 0x34
    8ff0:	460c      	mov	r4, r1
    8ff2:	4605      	mov	r5, r0
    8ff4:	220d      	movs	r2, #13
    8ff6:	2100      	movs	r1, #0
    8ff8:	a804      	add	r0, sp, #16
    8ffa:	f001 f92d 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8ffe:	78e0      	ldrb	r0, [r4, #3]
    9000:	f88d 001f 	strb.w	r0, [sp, #31]
    9004:	7920      	ldrb	r0, [r4, #4]
    9006:	f88d 001e 	strb.w	r0, [sp, #30]
    900a:	7960      	ldrb	r0, [r4, #5]
    900c:	f88d 001d 	strb.w	r0, [sp, #29]
    9010:	2210      	movs	r2, #16
    9012:	4629      	mov	r1, r5
    9014:	4668      	mov	r0, sp
    9016:	f001 f8a5 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    901a:	4668      	mov	r0, sp
    901c:	f7ff ff75 	bl	8f0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    9020:	7820      	ldrb	r0, [r4, #0]
    9022:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9026:	4288      	cmp	r0, r1
    9028:	d10c      	bne.n	9044 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    902a:	7860      	ldrb	r0, [r4, #1]
    902c:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    9030:	4288      	cmp	r0, r1
    9032:	d107      	bne.n	9044 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    9034:	78a0      	ldrb	r0, [r4, #2]
    9036:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    903a:	4288      	cmp	r0, r1
    903c:	d102      	bne.n	9044 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    903e:	2001      	movs	r0, #1
    9040:	b00d      	add	sp, #52	; 0x34
    9042:	bd30      	pop	{r4, r5, pc}
    9044:	2000      	movs	r0, #0
    9046:	e7fb      	b.n	9040 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

00009048 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    9048:	2101      	movs	r1, #1
    904a:	f7f7 bfe7 	b.w	101c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000904e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    904e:	b510      	push	{r4, lr}
    9050:	f000 fe69 	bl	9d26 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    9054:	b118      	cbz	r0, 905e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    9056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    905a:	f7fa ba71 	b.w	3540 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    905e:	20ff      	movs	r0, #255	; 0xff
    9060:	bd10      	pop	{r4, pc}

00009062 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    9062:	b570      	push	{r4, r5, r6, lr}
    9064:	460e      	mov	r6, r1
    9066:	b08c      	sub	sp, #48	; 0x30
    9068:	4614      	mov	r4, r2
    906a:	4601      	mov	r1, r0
    906c:	461d      	mov	r5, r3
    906e:	2210      	movs	r2, #16
    9070:	4668      	mov	r0, sp
    9072:	f000 f85a 	bl	912a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9076:	2210      	movs	r2, #16
    9078:	4631      	mov	r1, r6
    907a:	a804      	add	r0, sp, #16
    907c:	f000 f855 	bl	912a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9080:	4668      	mov	r0, sp
    9082:	f7ff ff42 	bl	8f0a <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    9086:	a908      	add	r1, sp, #32
    9088:	f04f 0210 	mov.w	r2, #16
    908c:	4628      	mov	r0, r5
    908e:	b11c      	cbz	r4, 9098 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    9090:	f000 f84b 	bl	912a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    9094:	b00c      	add	sp, #48	; 0x30
    9096:	bd70      	pop	{r4, r5, r6, pc}
    9098:	f001 f864 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    909c:	e7fa      	b.n	9094 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000909e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    909e:	b510      	push	{r4, lr}
    90a0:	460c      	mov	r4, r1
    90a2:	2100      	movs	r1, #0
    90a4:	f7f7 fc32 	bl	90c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    90a8:	6060      	str	r0, [r4, #4]
    90aa:	b110      	cbz	r0, 90b2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    90ac:	2000      	movs	r0, #0
    90ae:	7020      	strb	r0, [r4, #0]
    90b0:	bd10      	pop	{r4, pc}
    90b2:	2002      	movs	r0, #2
    90b4:	bd10      	pop	{r4, pc}

000090b6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    90b6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    90ba:	4348      	muls	r0, r1
    90bc:	4770      	bx	lr

000090be <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    90be:	f240 41e2 	movw	r1, #1250	; 0x4e2
    90c2:	fbb0 f0f1 	udiv	r0, r0, r1
    90c6:	b280      	uxth	r0, r0
    90c8:	4770      	bx	lr

000090ca <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    90ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90ce:	4607      	mov	r7, r0
    90d0:	460e      	mov	r6, r1
    90d2:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    90d6:	f7fc fee9 	bl	5eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    90da:	b198      	cbz	r0, 9104 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    90dc:	b31e      	cbz	r6, 9126 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    90de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    90e2:	1b40      	subs	r0, r0, r5
    90e4:	2300      	movs	r3, #0
    90e6:	eb61 0104 	sbc.w	r1, r1, r4
    90ea:	461a      	mov	r2, r3
    90ec:	1a1b      	subs	r3, r3, r0
    90ee:	418a      	sbcs	r2, r1
    90f0:	da19      	bge.n	9126 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    90f2:	1c42      	adds	r2, r0, #1
    90f4:	f171 0100 	sbcs.w	r1, r1, #0
    90f8:	db07      	blt.n	910a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    90fa:	f240 211a 	movw	r1, #538	; 0x21a
    90fe:	2029      	movs	r0, #41	; 0x29
    9100:	f7f7 f95a 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9104:	f44f 7104 	mov.w	r1, #528	; 0x210
    9108:	e7f9      	b.n	90fe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    910a:	4430      	add	r0, r6
    910c:	1e40      	subs	r0, r0, #1
    910e:	fbb0 f1f6 	udiv	r1, r0, r6
    9112:	fb01 f006 	mul.w	r0, r1, r6
    9116:	1828      	adds	r0, r5, r0
    9118:	f144 0400 	adc.w	r4, r4, #0
    911c:	e9c7 0404 	strd	r0, r4, [r7, #16]
    9120:	4608      	mov	r0, r1
    9122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9126:	2000      	movs	r0, #0
    9128:	e7fb      	b.n	9122 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000912a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    912a:	b530      	push	{r4, r5, lr}
    912c:	4613      	mov	r3, r2
    912e:	e006      	b.n	913e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    9130:	18cc      	adds	r4, r1, r3
    9132:	1ad5      	subs	r5, r2, r3
    9134:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    9138:	1e5b      	subs	r3, r3, #1
    913a:	5544      	strb	r4, [r0, r5]
    913c:	b2db      	uxtb	r3, r3
    913e:	2b00      	cmp	r3, #0
    9140:	d1f6      	bne.n	9130 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    9142:	bd30      	pop	{r4, r5, pc}

00009144 <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    9144:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9148:	fbb0 f0f1 	udiv	r0, r0, r1
    914c:	b280      	uxth	r0, r0
    914e:	4770      	bx	lr

00009150 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    9150:	f240 2171 	movw	r1, #625	; 0x271
    9154:	fb10 f001 	smulbb	r0, r0, r1
    9158:	f64f 71ff 	movw	r1, #65535	; 0xffff
    915c:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    9160:	4770      	bx	lr

00009162 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    9162:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9166:	fbb0 f0f1 	udiv	r0, r0, r1
    916a:	b2c0      	uxtb	r0, r0
    916c:	4770      	bx	lr

0000916e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    916e:	2100      	movs	r1, #0
    9170:	4608      	mov	r0, r1
    9172:	f7f7 bfd5 	b.w	1120 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    9176:	4401      	add	r1, r0
    9178:	2914      	cmp	r1, #20
    917a:	dd01      	ble.n	9180 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    917c:	2014      	movs	r0, #20
    917e:	4770      	bx	lr
    9180:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    9184:	4281      	cmp	r1, r0
    9186:	dbfa      	blt.n	917e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    9188:	b248      	sxtb	r0, r1
    918a:	4770      	bx	lr

0000918c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    918c:	7841      	ldrb	r1, [r0, #1]
    918e:	7800      	ldrb	r0, [r0, #0]
    9190:	f010 000f 	ands.w	r0, r0, #15
    9194:	d005      	beq.n	91a2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    9196:	2801      	cmp	r0, #1
    9198:	d007      	beq.n	91aa <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    919a:	2802      	cmp	r0, #2
    919c:	d001      	beq.n	91a2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    919e:	2806      	cmp	r0, #6
    91a0:	d105      	bne.n	91ae <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    91a2:	1f89      	subs	r1, r1, #6
    91a4:	291f      	cmp	r1, #31
    91a6:	d904      	bls.n	91b2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    91a8:	e001      	b.n	91ae <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    91aa:	290c      	cmp	r1, #12
    91ac:	d001      	beq.n	91b2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    91ae:	2000      	movs	r0, #0
    91b0:	4770      	bx	lr
    91b2:	2001      	movs	r0, #1
    91b4:	4770      	bx	lr

000091b6 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    91b6:	7800      	ldrb	r0, [r0, #0]
    91b8:	09c0      	lsrs	r0, r0, #7
    91ba:	4770      	bx	lr

000091bc <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    91bc:	7800      	ldrb	r0, [r0, #0]
    91be:	f3c0 1080 	ubfx	r0, r0, #6, #1
    91c2:	4770      	bx	lr

000091c4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    91c4:	7801      	ldrb	r1, [r0, #0]
    91c6:	f001 010f 	and.w	r1, r1, #15
    91ca:	2904      	cmp	r1, #4
    91cc:	d105      	bne.n	91da <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    91ce:	7840      	ldrb	r0, [r0, #1]
    91d0:	1f80      	subs	r0, r0, #6
    91d2:	281f      	cmp	r0, #31
    91d4:	d801      	bhi.n	91da <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    91d6:	2001      	movs	r0, #1
    91d8:	4770      	bx	lr
    91da:	2000      	movs	r0, #0
    91dc:	4770      	bx	lr

000091de <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    91de:	b510      	push	{r4, lr}
    91e0:	7802      	ldrb	r2, [r0, #0]
    91e2:	f001 030f 	and.w	r3, r1, #15
    91e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    91ea:	431a      	orrs	r2, r3
    91ec:	7002      	strb	r2, [r0, #0]
    91ee:	2907      	cmp	r1, #7
    91f0:	d20c      	bcs.n	920c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    91f2:	e8df f001 	tbb	[pc, r1]
    91f6:	0604      	.short	0x0604
    91f8:	08040604 	.word	0x08040604
    91fc:	0004      	.short	0x0004
    91fe:	2106      	movs	r1, #6
    9200:	e002      	b.n	9208 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    9202:	210c      	movs	r1, #12
    9204:	e000      	b.n	9208 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    9206:	2122      	movs	r1, #34	; 0x22
    9208:	7041      	strb	r1, [r0, #1]
    920a:	bd10      	pop	{r4, pc}
    920c:	21a8      	movs	r1, #168	; 0xa8
    920e:	202a      	movs	r0, #42	; 0x2a
    9210:	f7f7 f8d2 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009214 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    9214:	680a      	ldr	r2, [r1, #0]
    9216:	f840 2f09 	str.w	r2, [r0, #9]!
    921a:	8889      	ldrh	r1, [r1, #4]
    921c:	8081      	strh	r1, [r0, #4]
    921e:	4770      	bx	lr

00009220 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    9220:	7802      	ldrb	r2, [r0, #0]
    9222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    9226:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    922a:	7002      	strb	r2, [r0, #0]
    922c:	4770      	bx	lr

0000922e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    922e:	680a      	ldr	r2, [r1, #0]
    9230:	f840 2f03 	str.w	r2, [r0, #3]!
    9234:	8889      	ldrh	r1, [r1, #4]
    9236:	8081      	strh	r1, [r0, #4]
    9238:	4770      	bx	lr

0000923a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    923a:	7802      	ldrb	r2, [r0, #0]
    923c:	2340      	movs	r3, #64	; 0x40
    923e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    9242:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    9246:	430a      	orrs	r2, r1
    9248:	7002      	strb	r2, [r0, #0]
    924a:	4770      	bx	lr

0000924c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    924c:	b508      	push	{r3, lr}
    924e:	7a03      	ldrb	r3, [r0, #8]
    9250:	f88d 3000 	strb.w	r3, [sp]
    9254:	9b00      	ldr	r3, [sp, #0]
    9256:	9300      	str	r3, [sp, #0]
    9258:	f89d 3000 	ldrb.w	r3, [sp]
    925c:	b123      	cbz	r3, 9268 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    925e:	f240 21c2 	movw	r1, #706	; 0x2c2
    9262:	2010      	movs	r0, #16
    9264:	f7f7 f8a8 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    926c:	f7f8 b874 	b.w	1358 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x74>

00009270 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    9270:	f7f8 b8a0 	b.w	13b4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0xd0>
    9274:	b510      	push	{r4, lr}
    9276:	4604      	mov	r4, r0
    9278:	2108      	movs	r1, #8
    927a:	4620      	mov	r0, r4
    927c:	f7f7 f90e 	bl	49c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9280:	6820      	ldr	r0, [r4, #0]
    9282:	2800      	cmp	r0, #0
    9284:	d102      	bne.n	928c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    9286:	6860      	ldr	r0, [r4, #4]
    9288:	2800      	cmp	r0, #0
    928a:	d0f5      	beq.n	9278 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x8>
    928c:	bd10      	pop	{r4, pc}

0000928e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    928e:	b508      	push	{r3, lr}
    9290:	f000 f804 	bl	929c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    9294:	466a      	mov	r2, sp
    9296:	f7f8 f919 	bl	14cc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    929a:	bd08      	pop	{r3, pc}
    929c:	b530      	push	{r4, r5, lr}
    929e:	784c      	ldrb	r4, [r1, #1]
    92a0:	4603      	mov	r3, r0
    92a2:	7808      	ldrb	r0, [r1, #0]
    92a4:	788d      	ldrb	r5, [r1, #2]
    92a6:	0e22      	lsrs	r2, r4, #24
    92a8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    92ac:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    92b0:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    92b4:	78cd      	ldrb	r5, [r1, #3]
    92b6:	790c      	ldrb	r4, [r1, #4]
    92b8:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    92bc:	4322      	orrs	r2, r4
    92be:	7949      	ldrb	r1, [r1, #5]
    92c0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    92c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    92c8:	4611      	mov	r1, r2
    92ca:	2b01      	cmp	r3, #1
    92cc:	d101      	bne.n	92d2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    92ce:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    92d2:	bd30      	pop	{r4, r5, pc}
    92d4:	2801      	cmp	r0, #1
    92d6:	d102      	bne.n	92de <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    92d8:	7948      	ldrb	r0, [r1, #5]
    92da:	0980      	lsrs	r0, r0, #6
    92dc:	d001      	beq.n	92e2 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    92de:	2000      	movs	r0, #0
    92e0:	4770      	bx	lr
    92e2:	2001      	movs	r0, #1
    92e4:	4770      	bx	lr
    92e6:	2801      	cmp	r0, #1
    92e8:	d106      	bne.n	92f8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92ea:	7948      	ldrb	r0, [r1, #5]
    92ec:	2101      	movs	r1, #1
    92ee:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    92f2:	d101      	bne.n	92f8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    92f4:	2001      	movs	r0, #1
    92f6:	4770      	bx	lr
    92f8:	2000      	movs	r0, #0
    92fa:	4770      	bx	lr
    92fc:	b118      	cbz	r0, 9306 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    92fe:	2802      	cmp	r0, #2
    9300:	d001      	beq.n	9306 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x78>
    9302:	2001      	movs	r0, #1
    9304:	4770      	bx	lr
    9306:	2000      	movs	r0, #0
    9308:	4770      	bx	lr
    930a:	2802      	cmp	r0, #2
    930c:	d003      	beq.n	9316 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    930e:	2803      	cmp	r0, #3
    9310:	d001      	beq.n	9316 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x88>
    9312:	2000      	movs	r0, #0
    9314:	4770      	bx	lr
    9316:	2001      	movs	r0, #1
    9318:	4770      	bx	lr

0000931a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    931a:	f7f8 bff3 	b.w	2304 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>

0000931e <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    931e:	b510      	push	{r4, lr}
    9320:	2000      	movs	r0, #0
    9322:	f7f8 fe45 	bl	1fb0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x264>
    9326:	f7f8 fa93 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    932a:	f7f8 fff9 	bl	2320 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d4>
    932e:	2000      	movs	r0, #0
    9330:	bd10      	pop	{r4, pc}
    9332:	b510      	push	{r4, lr}
    9334:	f000 f83c 	bl	93b0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    9338:	2005      	movs	r0, #5
    933a:	bd10      	pop	{r4, pc}
    933c:	b510      	push	{r4, lr}
    933e:	f7f8 fe51 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    9342:	f7fa f9c3 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    9346:	2005      	movs	r0, #5
    9348:	bd10      	pop	{r4, pc}
    934a:	b530      	push	{r4, r5, lr}
    934c:	b08b      	sub	sp, #44	; 0x2c
    934e:	4605      	mov	r5, r0
    9350:	f7f8 fe48 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    9354:	7828      	ldrb	r0, [r5, #0]
    9356:	4669      	mov	r1, sp
    9358:	f000 040f 	and.w	r4, r0, #15
    935c:	4622      	mov	r2, r4
    935e:	4628      	mov	r0, r5
    9360:	f7f9 f946 	bl	25f0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    9364:	2200      	movs	r2, #0
    9366:	4621      	mov	r1, r4
    9368:	4668      	mov	r0, sp
    936a:	f7f8 faab 	bl	18c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    936e:	4621      	mov	r1, r4
    9370:	4668      	mov	r0, sp
    9372:	f7f8 fdb7 	bl	1ee4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    9376:	4604      	mov	r4, r0
    9378:	f7f8 fa6a 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    937c:	b00b      	add	sp, #44	; 0x2c
    937e:	4620      	mov	r0, r4
    9380:	bd30      	pop	{r4, r5, pc}
    9382:	f240 31af 	movw	r1, #943	; 0x3af
    9386:	2032      	movs	r0, #50	; 0x32
    9388:	f7f7 f816 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    938c:	b510      	push	{r4, lr}
    938e:	f000 f80f 	bl	93b0 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x92>
    9392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9396:	f7f8 bfcb 	b.w	2330 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e4>
    939a:	b510      	push	{r4, lr}
    939c:	f7f8 fe22 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    93a0:	f7fa f994 	bl	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    93a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93a8:	f7f8 bfc2 	b.w	2330 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e4>
    93ac:	f7f8 bfaa 	b.w	2304 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>
    93b0:	b510      	push	{r4, lr}
    93b2:	f7f8 fe17 	bl	1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    93b6:	f7f8 fa4b 	bl	1850 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    93ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93be:	f7fa b985 	b.w	36cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    93c2:	f7ff bcb4 	b.w	8d2e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    93c6:	b570      	push	{r4, r5, r6, lr}
    93c8:	4614      	mov	r4, r2
    93ca:	461d      	mov	r5, r3
    93cc:	4606      	mov	r6, r0
    93ce:	f000 fd37 	bl	9e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    93d2:	1900      	adds	r0, r0, r4
    93d4:	4169      	adcs	r1, r5
    93d6:	e9c6 0100 	strd	r0, r1, [r6]
    93da:	bd70      	pop	{r4, r5, r6, pc}

000093dc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    93dc:	b510      	push	{r4, lr}
    93de:	f7f7 fba5 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    93e2:	f000 f944 	bl	966e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    93e6:	4604      	mov	r4, r0
    93e8:	221c      	movs	r2, #28
    93ea:	2100      	movs	r1, #0
    93ec:	3009      	adds	r0, #9
    93ee:	f000 ff33 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    93f2:	207f      	movs	r0, #127	; 0x7f
    93f4:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    93f8:	21ff      	movs	r1, #255	; 0xff
    93fa:	75e1      	strb	r1, [r4, #23]
    93fc:	72a1      	strb	r1, [r4, #10]
    93fe:	7721      	strb	r1, [r4, #28]
    9400:	7ce0      	ldrb	r0, [r4, #19]
    9402:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    9406:	3020      	adds	r0, #32
    9408:	74e0      	strb	r0, [r4, #19]
    940a:	bd10      	pop	{r4, pc}

0000940c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    940c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9410:	461d      	mov	r5, r3
    9412:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    9416:	4616      	mov	r6, r2
    9418:	4688      	mov	r8, r1
    941a:	4681      	mov	r9, r0
    941c:	f7f7 fb86 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9420:	4604      	mov	r4, r0
    9422:	f7ff fbdf 	bl	8be4 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9426:	2801      	cmp	r0, #1
    9428:	d066      	beq.n	94f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    942a:	4620      	mov	r0, r4
    942c:	f000 f91f 	bl	966e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    9430:	4604      	mov	r4, r0
    9432:	221c      	movs	r2, #28
    9434:	2100      	movs	r1, #0
    9436:	3009      	adds	r0, #9
    9438:	f000 ff0e 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    943c:	2701      	movs	r7, #1
    943e:	7267      	strb	r7, [r4, #9]
    9440:	ea5f 0008 	movs.w	r0, r8
    9444:	d009      	beq.n	945a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    9446:	2801      	cmp	r0, #1
    9448:	d00b      	beq.n	9462 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    944a:	2802      	cmp	r0, #2
    944c:	d02d      	beq.n	94aa <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    944e:	f1b8 0f06 	cmp.w	r8, #6
    9452:	d02c      	beq.n	94ae <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    9454:	f240 310b 	movw	r1, #779	; 0x30b
    9458:	e04b      	b.n	94f2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    945a:	7ce0      	ldrb	r0, [r4, #19]
    945c:	f040 0001 	orr.w	r0, r0, #1
    9460:	e026      	b.n	94b0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    9462:	7ce0      	ldrb	r0, [r4, #19]
    9464:	f040 0005 	orr.w	r0, r0, #5
    9468:	f040 0010 	orr.w	r0, r0, #16
    946c:	74e0      	strb	r0, [r4, #19]
    946e:	f104 030a 	add.w	r3, r4, #10
    9472:	1c5a      	adds	r2, r3, #1
    9474:	4648      	mov	r0, r9
    9476:	990a      	ldr	r1, [sp, #40]	; 0x28
    9478:	f000 f8de 	bl	9638 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    947c:	f884 a012 	strb.w	sl, [r4, #18]
    9480:	7567      	strb	r7, [r4, #21]
    9482:	2000      	movs	r0, #0
    9484:	75a0      	strb	r0, [r4, #22]
    9486:	20ff      	movs	r0, #255	; 0xff
    9488:	75e0      	strb	r0, [r4, #23]
    948a:	7ce1      	ldrb	r1, [r4, #19]
    948c:	0749      	lsls	r1, r1, #29
    948e:	d518      	bpl.n	94c2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    9490:	f104 001d 	add.w	r0, r4, #29
    9494:	1e41      	subs	r1, r0, #1
    9496:	2d02      	cmp	r5, #2
    9498:	d00d      	beq.n	94b6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    949a:	2d03      	cmp	r5, #3
    949c:	d00b      	beq.n	94b6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    949e:	f8d9 2008 	ldr.w	r2, [r9, #8]
    94a2:	6813      	ldr	r3, [r2, #0]
    94a4:	6003      	str	r3, [r0, #0]
    94a6:	8892      	ldrh	r2, [r2, #4]
    94a8:	e008      	b.n	94bc <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    94aa:	7ce0      	ldrb	r0, [r4, #19]
    94ac:	e7dc      	b.n	9468 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    94ae:	7ce0      	ldrb	r0, [r4, #19]
    94b0:	f040 0002 	orr.w	r0, r0, #2
    94b4:	e7d8      	b.n	9468 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    94b6:	6832      	ldr	r2, [r6, #0]
    94b8:	6002      	str	r2, [r0, #0]
    94ba:	88b2      	ldrh	r2, [r6, #4]
    94bc:	8082      	strh	r2, [r0, #4]
    94be:	700d      	strb	r5, [r1, #0]
    94c0:	e000      	b.n	94c4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    94c2:	7720      	strb	r0, [r4, #28]
    94c4:	207f      	movs	r0, #127	; 0x7f
    94c6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    94ca:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    94ce:	f7f7 fb27 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    94d2:	4605      	mov	r5, r0
    94d4:	f7f7 fb2a 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    94d8:	2201      	movs	r2, #1
    94da:	4629      	mov	r1, r5
    94dc:	f000 f8d0 	bl	9680 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    94e0:	b128      	cbz	r0, 94ee <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    94e2:	4620      	mov	r0, r4
    94e4:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94e8:	2100      	movs	r1, #0
    94ea:	f7f9 b879 	b.w	25e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x894>
    94ee:	f240 312b 	movw	r1, #811	; 0x32b
    94f2:	2033      	movs	r0, #51	; 0x33
    94f4:	f7f6 ff60 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94f8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

000094fc <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    94fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9500:	461e      	mov	r6, r3
    9502:	4617      	mov	r7, r2
    9504:	4689      	mov	r9, r1
    9506:	4682      	mov	sl, r0
    9508:	f8dd 8020 	ldr.w	r8, [sp, #32]
    950c:	f7f7 fb0e 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    9510:	4604      	mov	r4, r0
    9512:	f7ff fb67 	bl	8be4 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    9516:	2801      	cmp	r0, #1
    9518:	d039      	beq.n	958e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    951a:	4620      	mov	r0, r4
    951c:	f000 f8a7 	bl	966e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    9520:	4604      	mov	r4, r0
    9522:	221c      	movs	r2, #28
    9524:	2100      	movs	r1, #0
    9526:	3009      	adds	r0, #9
    9528:	f000 fe96 	bl	a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    952c:	2501      	movs	r5, #1
    952e:	f104 030a 	add.w	r3, r4, #10
    9532:	7265      	strb	r5, [r4, #9]
    9534:	1c5a      	adds	r2, r3, #1
    9536:	4649      	mov	r1, r9
    9538:	4650      	mov	r0, sl
    953a:	f000 f87d 	bl	9638 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    953e:	f884 8012 	strb.w	r8, [r4, #18]
    9542:	7ce0      	ldrb	r0, [r4, #19]
    9544:	21ff      	movs	r1, #255	; 0xff
    9546:	f367 0000 	bfi	r0, r7, #0, #1
    954a:	f040 001a 	orr.w	r0, r0, #26
    954e:	74e0      	strb	r0, [r4, #19]
    9550:	7565      	strb	r5, [r4, #21]
    9552:	2000      	movs	r0, #0
    9554:	75a0      	strb	r0, [r4, #22]
    9556:	75e1      	strb	r1, [r4, #23]
    9558:	7721      	strb	r1, [r4, #28]
    955a:	207f      	movs	r0, #127	; 0x7f
    955c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    9560:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    9564:	f7f7 fadc 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    9568:	4605      	mov	r5, r0
    956a:	f7f7 fadf 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    956e:	2201      	movs	r2, #1
    9570:	4629      	mov	r1, r5
    9572:	f000 f885 	bl	9680 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    9576:	b128      	cbz	r0, 9584 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    9578:	4620      	mov	r0, r4
    957a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    957e:	2100      	movs	r1, #0
    9580:	f7f9 b82e 	b.w	25e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x894>
    9584:	f44f 7156 	mov.w	r1, #856	; 0x358
    9588:	2033      	movs	r0, #51	; 0x33
    958a:	f7f6 ff15 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    958e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009592 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    9592:	f7ff bf23 	b.w	93dc <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    9596:	b5f0      	push	{r4, r5, r6, r7, lr}
    9598:	b08b      	sub	sp, #44	; 0x2c
    959a:	460f      	mov	r7, r1
    959c:	f7f7 fac6 	bl	b2c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    95a0:	4604      	mov	r4, r0
    95a2:	f7ff fb4c 	bl	8c3e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    95a6:	0005      	movs	r5, r0
    95a8:	d00c      	beq.n	95c4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    95aa:	4620      	mov	r0, r4
    95ac:	4629      	mov	r1, r5
    95ae:	aa0a      	add	r2, sp, #40	; 0x28
    95b0:	f7ff fb63 	bl	8c7a <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    95b4:	4606      	mov	r6, r0
    95b6:	f7f7 fab3 	bl	b20 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    95ba:	42b0      	cmp	r0, r6
    95bc:	d005      	beq.n	95ca <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    95be:	f240 11ab 	movw	r1, #427	; 0x1ab
    95c2:	e036      	b.n	9632 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    95c4:	f240 11a1 	movw	r1, #417	; 0x1a1
    95c8:	e033      	b.n	9632 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    95ca:	4669      	mov	r1, sp
    95cc:	980a      	ldr	r0, [sp, #40]	; 0x28
    95ce:	f000 f859 	bl	9684 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    95d2:	1d3e      	adds	r6, r7, #4
    95d4:	4628      	mov	r0, r5
    95d6:	f7ff fb03 	bl	8be0 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    95da:	4605      	mov	r5, r0
    95dc:	f100 0109 	add.w	r1, r0, #9
    95e0:	221c      	movs	r2, #28
    95e2:	4630      	mov	r0, r6
    95e4:	f000 fdbe 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    95e8:	7ce8      	ldrb	r0, [r5, #19]
    95ea:	f04f 0500 	mov.w	r5, #0
    95ee:	06c1      	lsls	r1, r0, #27
    95f0:	d50d      	bpl.n	960e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    95f2:	0740      	lsls	r0, r0, #29
    95f4:	d40a      	bmi.n	960c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    95f6:	f89d 2010 	ldrb.w	r2, [sp, #16]
    95fa:	f106 001c 	add.w	r0, r6, #28
    95fe:	9903      	ldr	r1, [sp, #12]
    9600:	f000 fdb0 	bl	a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9604:	f89d 0010 	ldrb.w	r0, [sp, #16]
    9608:	7230      	strb	r0, [r6, #8]
    960a:	e000      	b.n	960e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    960c:	7235      	strb	r5, [r6, #8]
    960e:	707d      	strb	r5, [r7, #1]
    9610:	2005      	movs	r0, #5
    9612:	7038      	strb	r0, [r7, #0]
    9614:	4638      	mov	r0, r7
    9616:	f7f8 ff73 	bl	2500 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7b4>
    961a:	4620      	mov	r0, r4
    961c:	f7ff fafb 	bl	8c16 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    9620:	b128      	cbz	r0, 962e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    9622:	4620      	mov	r0, r4
    9624:	2100      	movs	r1, #0
    9626:	f7ff fb58 	bl	8cda <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    962a:	b00b      	add	sp, #44	; 0x2c
    962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    962e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    9632:	2033      	movs	r0, #51	; 0x33
    9634:	f7f6 fec0 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9638:	b510      	push	{r4, lr}
    963a:	461c      	mov	r4, r3
    963c:	460b      	mov	r3, r1
    963e:	29ff      	cmp	r1, #255	; 0xff
    9640:	d00d      	beq.n	965e <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    9642:	4621      	mov	r1, r4
    9644:	4618      	mov	r0, r3
    9646:	f7f7 fc99 	bl	f7c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    964a:	b120      	cbz	r0, 9656 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    964c:	7820      	ldrb	r0, [r4, #0]
    964e:	f040 0002 	orr.w	r0, r0, #2
    9652:	7020      	strb	r0, [r4, #0]
    9654:	bd10      	pop	{r4, pc}
    9656:	21dc      	movs	r1, #220	; 0xdc
    9658:	2033      	movs	r0, #51	; 0x33
    965a:	f7f6 fead 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    965e:	7c41      	ldrb	r1, [r0, #17]
    9660:	7021      	strb	r1, [r4, #0]
    9662:	6840      	ldr	r0, [r0, #4]
    9664:	6801      	ldr	r1, [r0, #0]
    9666:	6011      	str	r1, [r2, #0]
    9668:	8880      	ldrh	r0, [r0, #4]
    966a:	8090      	strh	r0, [r2, #4]
    966c:	bd10      	pop	{r4, pc}
    966e:	b51c      	push	{r2, r3, r4, lr}
    9670:	4669      	mov	r1, sp
    9672:	aa01      	add	r2, sp, #4
    9674:	f7ff faf3 	bl	8c5e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    9678:	9800      	ldr	r0, [sp, #0]
    967a:	f7ff fab1 	bl	8be0 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    967e:	bd1c      	pop	{r2, r3, r4, pc}
    9680:	f7ff ba65 	b.w	8b4e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

00009684 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    9684:	7802      	ldrb	r2, [r0, #0]
    9686:	f002 020f 	and.w	r2, r2, #15
    968a:	f7f8 bfb1 	b.w	25f0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    968e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9690:	256e      	movs	r5, #110	; 0x6e
    9692:	4668      	mov	r0, sp
    9694:	f7fe fcfc 	bl	8090 <mpsl_fem_pa_is_configured>
    9698:	f89d 0000 	ldrb.w	r0, [sp]
    969c:	b108      	cbz	r0, 96a2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    969e:	2401      	movs	r4, #1
    96a0:	e000      	b.n	96a4 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    96a2:	2400      	movs	r4, #0
    96a4:	a801      	add	r0, sp, #4
    96a6:	f7fe fcdb 	bl	8060 <mpsl_fem_lna_is_configured>
    96aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    96ae:	b100      	cbz	r0, 96b2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    96b0:	2001      	movs	r0, #1
    96b2:	4304      	orrs	r4, r0
    96b4:	d000      	beq.n	96b8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    96b6:	2578      	movs	r5, #120	; 0x78
    96b8:	4628      	mov	r0, r5
    96ba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000096bc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    96bc:	b510      	push	{r4, lr}
    96be:	f7ff ffe6 	bl	968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    96c2:	306b      	adds	r0, #107	; 0x6b
    96c4:	b280      	uxth	r0, r0
    96c6:	bd10      	pop	{r4, pc}
    96c8:	6980      	ldr	r0, [r0, #24]
    96ca:	2800      	cmp	r0, #0
    96cc:	d000      	beq.n	96d0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    96ce:	2001      	movs	r0, #1
    96d0:	4770      	bx	lr
    96d2:	b510      	push	{r4, lr}
    96d4:	2802      	cmp	r0, #2
    96d6:	d007      	beq.n	96e8 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2c>
    96d8:	2108      	movs	r1, #8
    96da:	2801      	cmp	r0, #1
    96dc:	d006      	beq.n	96ec <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x30>
    96de:	f44f 7182 	mov.w	r1, #260	; 0x104
    96e2:	2005      	movs	r0, #5
    96e4:	f7f6 fe68 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96e8:	2104      	movs	r1, #4
    96ea:	e7f6      	b.n	96da <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    96ec:	202a      	movs	r0, #42	; 0x2a
    96ee:	2228      	movs	r2, #40	; 0x28
    96f0:	fb11 2000 	smlabb	r0, r1, r0, r2
    96f4:	b280      	uxth	r0, r0
    96f6:	bd10      	pop	{r4, pc}
    96f8:	b510      	push	{r4, lr}
    96fa:	f7ff ffc8 	bl	968e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    96fe:	f500 7083 	add.w	r0, r0, #262	; 0x106
    9702:	b280      	uxth	r0, r0
    9704:	bd10      	pop	{r4, pc}
    9706:	f7fc b92d 	b.w	5964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    970a:	1a10      	subs	r0, r2, r0
    970c:	4770      	bx	lr

0000970e <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    970e:	b510      	push	{r4, lr}
    9710:	f7f9 fc6e 	bl	2ff0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0xc>
    9714:	2000      	movs	r0, #0
    9716:	bd10      	pop	{r4, pc}

00009718 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    9718:	b510      	push	{r4, lr}
    971a:	460c      	mov	r4, r1
    971c:	f7f7 f98a 	bl	a34 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    9720:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    9724:	2820      	cmp	r0, #32
    9726:	d006      	beq.n	9736 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x1e>
    9728:	f7fc fee4 	bl	64f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    972c:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    9730:	f7fc febe 	bl	64b0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9734:	b158      	cbz	r0, 974e <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x36>
    9736:	f504 700a 	add.w	r0, r4, #552	; 0x228
    973a:	4604      	mov	r4, r0
    973c:	f7f9 fcd8 	bl	30f0 <sym_WQEYNQYPTFH4BI2WPULDBBECIY2RT3HWWUCSKNI>
    9740:	2800      	cmp	r0, #0
    9742:	d009      	beq.n	9758 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI+0x40>
    9744:	4620      	mov	r0, r4
    9746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    974a:	f7f9 bcdf 	b.w	310c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    974e:	f640 318a 	movw	r1, #2954	; 0xb8a
    9752:	2036      	movs	r0, #54	; 0x36
    9754:	f7f6 fe30 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9758:	bd10      	pop	{r4, pc}

0000975a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    975a:	b510      	push	{r4, lr}
    975c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    9760:	1ac3      	subs	r3, r0, r3
    9762:	eb61 0104 	sbc.w	r1, r1, r4
    9766:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    976a:	17e0      	asrs	r0, r4, #31
    976c:	1ae4      	subs	r4, r4, r3
    976e:	4188      	sbcs	r0, r1
    9770:	da05      	bge.n	977e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    9772:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    9776:	1a18      	subs	r0, r3, r0
    9778:	f171 0000 	sbcs.w	r0, r1, #0
    977c:	db03      	blt.n	9786 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    977e:	21b6      	movs	r1, #182	; 0xb6
    9780:	2037      	movs	r0, #55	; 0x37
    9782:	f7f6 fe19 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9786:	2900      	cmp	r1, #0
    9788:	da00      	bge.n	978c <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    978a:	425b      	negs	r3, r3
    978c:	fbb3 f0f2 	udiv	r0, r3, r2
    9790:	fb02 3010 	mls	r0, r2, r0, r3
    9794:	2900      	cmp	r1, #0
    9796:	da02      	bge.n	979e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    9798:	2800      	cmp	r0, #0
    979a:	d000      	beq.n	979e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    979c:	1a10      	subs	r0, r2, r0
    979e:	bd10      	pop	{r4, pc}
    97a0:	b118      	cbz	r0, 97aa <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    97a2:	2802      	cmp	r0, #2
    97a4:	d001      	beq.n	97aa <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x50>
    97a6:	2001      	movs	r0, #1
    97a8:	4770      	bx	lr
    97aa:	2000      	movs	r0, #0
    97ac:	4770      	bx	lr

000097ae <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    97ae:	b510      	push	{r4, lr}
    97b0:	4604      	mov	r4, r0
    97b2:	f000 fa56 	bl	9c62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    97b6:	b108      	cbz	r0, 97bc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    97b8:	200c      	movs	r0, #12
    97ba:	bd10      	pop	{r4, pc}
    97bc:	7820      	ldrb	r0, [r4, #0]
    97be:	b118      	cbz	r0, 97c8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    97c0:	2801      	cmp	r0, #1
    97c2:	d001      	beq.n	97c8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    97c4:	2012      	movs	r0, #18
    97c6:	bd10      	pop	{r4, pc}
    97c8:	f7ff ffea 	bl	97a0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    97cc:	1c61      	adds	r1, r4, #1
    97ce:	f7f7 fe13 	bl	13f8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    97d2:	b108      	cbz	r0, 97d8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    97d4:	2000      	movs	r0, #0
    97d6:	bd10      	pop	{r4, pc}
    97d8:	2007      	movs	r0, #7
    97da:	bd10      	pop	{r4, pc}

000097dc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    97dc:	b510      	push	{r4, lr}
    97de:	f000 fa40 	bl	9c62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    97e2:	b108      	cbz	r0, 97e8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    97e4:	200c      	movs	r0, #12
    97e6:	bd10      	pop	{r4, pc}
    97e8:	f7f7 fe64 	bl	14b4 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    97ec:	2000      	movs	r0, #0
    97ee:	f7f7 fc0f 	bl	1010 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    97f2:	2000      	movs	r0, #0
    97f4:	bd10      	pop	{r4, pc}

000097f6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    97f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97fa:	4605      	mov	r5, r0
    97fc:	f000 f8fb 	bl	99f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    9800:	2800      	cmp	r0, #0
    9802:	d112      	bne.n	982a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    9804:	8828      	ldrh	r0, [r5, #0]
    9806:	2100      	movs	r1, #0
    9808:	f7f7 f880 	bl	90c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    980c:	0004      	movs	r4, r0
    980e:	d00e      	beq.n	982e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    9810:	f000 f9fe 	bl	9c10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>
    9814:	b158      	cbz	r0, 982e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    9816:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    981a:	f88d 0000 	strb.w	r0, [sp]
    981e:	9800      	ldr	r0, [sp, #0]
    9820:	9000      	str	r0, [sp, #0]
    9822:	f89d 0000 	ldrb.w	r0, [sp]
    9826:	b120      	cbz	r0, 9832 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    9828:	203a      	movs	r0, #58	; 0x3a
    982a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    982e:	2002      	movs	r0, #2
    9830:	e7fb      	b.n	982a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    9832:	f04f 0800 	mov.w	r8, #0
    9836:	88a8      	ldrh	r0, [r5, #4]
    9838:	f7ff fc3d 	bl	90b6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    983c:	4607      	mov	r7, r0
    983e:	4601      	mov	r1, r0
    9840:	2005      	movs	r0, #5
    9842:	f7ff fc85 	bl	9150 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9846:	4606      	mov	r6, r0
    9848:	4639      	mov	r1, r7
    984a:	2008      	movs	r0, #8
    984c:	f7ff fc80 	bl	9150 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9850:	42b0      	cmp	r0, r6
    9852:	d301      	bcc.n	9858 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    9854:	42be      	cmp	r6, r7
    9856:	d301      	bcc.n	985c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    9858:	2012      	movs	r0, #18
    985a:	e7e6      	b.n	982a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    985c:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    9860:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    9864:	88e8      	ldrh	r0, [r5, #6]
    9866:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    986a:	8928      	ldrh	r0, [r5, #8]
    986c:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    9870:	f504 7419 	add.w	r4, r4, #612	; 0x264
    9874:	20ff      	movs	r0, #255	; 0xff
    9876:	7020      	strb	r0, [r4, #0]
    9878:	2000      	movs	r0, #0
    987a:	e7d6      	b.n	982a <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000987c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    987c:	b510      	push	{r4, lr}
    987e:	460b      	mov	r3, r1
    9880:	2201      	movs	r2, #1
    9882:	f100 0110 	add.w	r1, r0, #16
    9886:	f7ff fbec 	bl	9062 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    988a:	2000      	movs	r0, #0
    988c:	bd10      	pop	{r4, pc}

0000988e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    988e:	b510      	push	{r4, lr}
    9890:	2108      	movs	r1, #8
    9892:	f7f6 fe03 	bl	49c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    9896:	2000      	movs	r0, #0
    9898:	bd10      	pop	{r4, pc}

0000989a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    989a:	b510      	push	{r4, lr}
    989c:	4604      	mov	r4, r0
    989e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    98a2:	f000 f9d6 	bl	9c52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    98a6:	f7f7 fc1d 	bl	10e4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    98aa:	7020      	strb	r0, [r4, #0]
    98ac:	f000 f9ad 	bl	9c0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    98b0:	f7f7 fc18 	bl	10e4 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    98b4:	7060      	strb	r0, [r4, #1]
    98b6:	2000      	movs	r0, #0
    98b8:	bd10      	pop	{r4, pc}

000098ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    98ba:	b510      	push	{r4, lr}
    98bc:	4604      	mov	r4, r0
    98be:	f7f7 fdff 	bl	14c0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    98c2:	7020      	strb	r0, [r4, #0]
    98c4:	2000      	movs	r0, #0
    98c6:	bd10      	pop	{r4, pc}

000098c8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    98c8:	b510      	push	{r4, lr}
    98ca:	4604      	mov	r4, r0
    98cc:	f000 f9c9 	bl	9c62 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22a>
    98d0:	b108      	cbz	r0, 98d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    98d2:	200c      	movs	r0, #12
    98d4:	bd10      	pop	{r4, pc}
    98d6:	7820      	ldrb	r0, [r4, #0]
    98d8:	b108      	cbz	r0, 98de <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    98da:	2801      	cmp	r0, #1
    98dc:	d107      	bne.n	98ee <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    98de:	f7ff ff5f 	bl	97a0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    98e2:	1c61      	adds	r1, r4, #1
    98e4:	f7f7 fdc6 	bl	1474 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    98e8:	b108      	cbz	r0, 98ee <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    98ea:	2000      	movs	r0, #0
    98ec:	bd10      	pop	{r4, pc}
    98ee:	2012      	movs	r0, #18
    98f0:	bd10      	pop	{r4, pc}

000098f2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    98f2:	b510      	push	{r4, lr}
    98f4:	4604      	mov	r4, r0
    98f6:	2001      	movs	r0, #1
    98f8:	f000 f8af 	bl	9a5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    98fc:	b128      	cbz	r0, 990a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    98fe:	4621      	mov	r1, r4
    9900:	2001      	movs	r0, #1
    9902:	f7f7 fa8b 	bl	e1c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    9906:	2000      	movs	r0, #0
    9908:	bd10      	pop	{r4, pc}
    990a:	200c      	movs	r0, #12
    990c:	bd10      	pop	{r4, pc}

0000990e <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    990e:	b51c      	push	{r2, r3, r4, lr}
    9910:	7801      	ldrb	r1, [r0, #0]
    9912:	f88d 1000 	strb.w	r1, [sp]
    9916:	7840      	ldrb	r0, [r0, #1]
    9918:	f88d 0001 	strb.w	r0, [sp, #1]
    991c:	2000      	movs	r0, #0
    991e:	f8ad 0002 	strh.w	r0, [sp, #2]
    9922:	f8ad 0004 	strh.w	r0, [sp, #4]
    9926:	4601      	mov	r1, r0
    9928:	4668      	mov	r0, sp
    992a:	f000 f8c3 	bl	9ab4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x7c>
    992e:	2800      	cmp	r0, #0
    9930:	d102      	bne.n	9938 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    9932:	4668      	mov	r0, sp
    9934:	f000 f89d 	bl	9a72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a>
    9938:	bd1c      	pop	{r2, r3, r4, pc}

0000993a <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    993a:	b500      	push	{lr}
    993c:	b087      	sub	sp, #28
    993e:	7941      	ldrb	r1, [r0, #5]
    9940:	f88d 1000 	strb.w	r1, [sp]
    9944:	7981      	ldrb	r1, [r0, #6]
    9946:	f88d 1001 	strb.w	r1, [sp, #1]
    994a:	2101      	movs	r1, #1
    994c:	f88d 1002 	strb.w	r1, [sp, #2]
    9950:	7801      	ldrb	r1, [r0, #0]
    9952:	f88d 1003 	strb.w	r1, [sp, #3]
    9956:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    995a:	f240 2271 	movw	r2, #625	; 0x271
    995e:	4351      	muls	r1, r2
    9960:	9102      	str	r1, [sp, #8]
    9962:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    9966:	4350      	muls	r0, r2
    9968:	9004      	str	r0, [sp, #16]
    996a:	2007      	movs	r0, #7
    996c:	f88d 0018 	strb.w	r0, [sp, #24]
    9970:	2000      	movs	r0, #0
    9972:	f88d 0019 	strb.w	r0, [sp, #25]
    9976:	9804      	ldr	r0, [sp, #16]
    9978:	f7f9 fcd2 	bl	3320 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x88>
    997c:	b140      	cbz	r0, 9990 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    997e:	9802      	ldr	r0, [sp, #8]
    9980:	f7f9 fcc2 	bl	3308 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x70>
    9984:	b120      	cbz	r0, 9990 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    9986:	4668      	mov	r0, sp
    9988:	f7f9 fc42 	bl	3210 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    998c:	b007      	add	sp, #28
    998e:	bd00      	pop	{pc}
    9990:	2030      	movs	r0, #48	; 0x30
    9992:	e7fb      	b.n	998c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

00009994 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    9994:	b510      	push	{r4, lr}
    9996:	f7f7 fa65 	bl	e64 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    999a:	2000      	movs	r0, #0
    999c:	bd10      	pop	{r4, pc}

0000999e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    999e:	b510      	push	{r4, lr}
    99a0:	4604      	mov	r4, r0
    99a2:	f7f9 fd0d 	bl	33c0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    99a6:	b118      	cbz	r0, 99b0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    99a8:	2000      	movs	r0, #0
    99aa:	f000 f856 	bl	9a5a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x22>
    99ae:	b128      	cbz	r0, 99bc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    99b0:	4621      	mov	r1, r4
    99b2:	2000      	movs	r0, #0
    99b4:	f7f7 fa32 	bl	e1c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    99b8:	2000      	movs	r0, #0
    99ba:	bd10      	pop	{r4, pc}
    99bc:	200c      	movs	r0, #12
    99be:	bd10      	pop	{r4, pc}

000099c0 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    99c0:	b510      	push	{r4, lr}
    99c2:	7800      	ldrb	r0, [r0, #0]
    99c4:	b100      	cbz	r0, 99c8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    99c6:	2001      	movs	r0, #1
    99c8:	f7f9 fb0c 	bl	2fe4 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    99cc:	2000      	movs	r0, #0
    99ce:	bd10      	pop	{r4, pc}

000099d0 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    99d0:	b510      	push	{r4, lr}
    99d2:	4604      	mov	r4, r0
    99d4:	4601      	mov	r1, r0
    99d6:	2000      	movs	r0, #0
    99d8:	f7f7 fa08 	bl	dec <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    99dc:	b910      	cbnz	r0, 99e4 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    99de:	2000      	movs	r0, #0
    99e0:	6020      	str	r0, [r4, #0]
    99e2:	80a0      	strh	r0, [r4, #4]
    99e4:	2000      	movs	r0, #0
    99e6:	bd10      	pop	{r4, pc}

000099e8 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    99e8:	b510      	push	{r4, lr}
    99ea:	f7f9 fcef 	bl	33cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    99ee:	2000      	movs	r0, #0
    99f0:	bd10      	pop	{r4, pc}

000099f2 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    99f2:	f000 b821 	b.w	9a38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000099f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    99f6:	b510      	push	{r4, lr}
    99f8:	4604      	mov	r4, r0
    99fa:	2000      	movs	r0, #0
    99fc:	8822      	ldrh	r2, [r4, #0]
    99fe:	b086      	sub	sp, #24
    9a00:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    9a04:	39ff      	subs	r1, #255	; 0xff
    9a06:	d008      	beq.n	9a1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    9a08:	a903      	add	r1, sp, #12
    9a0a:	4610      	mov	r0, r2
    9a0c:	f7ff fb47 	bl	909e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9a10:	b110      	cbz	r0, 9a18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    9a12:	2002      	movs	r0, #2
    9a14:	b006      	add	sp, #24
    9a16:	bd10      	pop	{r4, pc}
    9a18:	9804      	ldr	r0, [sp, #16]
    9a1a:	8921      	ldrh	r1, [r4, #8]
    9a1c:	89a3      	ldrh	r3, [r4, #12]
    9a1e:	8962      	ldrh	r2, [r4, #10]
    9a20:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    9a24:	88e3      	ldrh	r3, [r4, #6]
    9a26:	88a2      	ldrh	r2, [r4, #4]
    9a28:	8861      	ldrh	r1, [r4, #2]
    9a2a:	f000 f8c3 	bl	9bb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    9a2e:	b108      	cbz	r0, 9a34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    9a30:	2000      	movs	r0, #0
    9a32:	e7ef      	b.n	9a14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    9a34:	2030      	movs	r0, #48	; 0x30
    9a36:	e7ed      	b.n	9a14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

00009a38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9a38:	b510      	push	{r4, lr}
    9a3a:	f7ff faa1 	bl	8f80 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9a3e:	f7f7 fa89 	bl	f54 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9a42:	f7f9 fd07 	bl	3454 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9a46:	f7ff fc13 	bl	9270 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    9a4a:	f7ff fb90 	bl	916e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
    9a4e:	f7f7 fd31 	bl	14b4 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    9a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a56:	f7f9 bc29 	b.w	32ac <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x14>
    9a5a:	b510      	push	{r4, lr}
    9a5c:	f000 f8ee 	bl	9c3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    9a60:	b128      	cbz	r0, 9a6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9a62:	f7f7 fecf 	bl	1804 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    9a66:	2801      	cmp	r0, #1
    9a68:	d001      	beq.n	9a6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x36>
    9a6a:	2000      	movs	r0, #0
    9a6c:	bd10      	pop	{r4, pc}
    9a6e:	2001      	movs	r0, #1
    9a70:	bd10      	pop	{r4, pc}
    9a72:	b510      	push	{r4, lr}
    9a74:	4604      	mov	r4, r0
    9a76:	7800      	ldrb	r0, [r0, #0]
    9a78:	2801      	cmp	r0, #1
    9a7a:	d009      	beq.n	9a90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    9a7c:	f7f8 fe96 	bl	27ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    9a80:	2805      	cmp	r0, #5
    9a82:	d003      	beq.n	9a8c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>
    9a84:	f7f8 fe5a 	bl	273c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    9a88:	2800      	cmp	r0, #0
    9a8a:	d000      	beq.n	9a8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x56>
    9a8c:	200c      	movs	r0, #12
    9a8e:	bd10      	pop	{r4, pc}
    9a90:	f7f7 fe86 	bl	17a0 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    9a94:	b108      	cbz	r0, 9a9a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x62>
    9a96:	203a      	movs	r0, #58	; 0x3a
    9a98:	bd10      	pop	{r4, pc}
    9a9a:	f7f7 fe43 	bl	1724 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    9a9e:	b138      	cbz	r0, 9ab0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    9aa0:	f7f7 fd5e 	bl	1560 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    9aa4:	88a1      	ldrh	r1, [r4, #4]
    9aa6:	8860      	ldrh	r0, [r4, #2]
    9aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9aac:	f7f8 be0c 	b.w	26c8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    9ab0:	2012      	movs	r0, #18
    9ab2:	bd10      	pop	{r4, pc}
    9ab4:	7802      	ldrb	r2, [r0, #0]
    9ab6:	2a01      	cmp	r2, #1
    9ab8:	d001      	beq.n	9abe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x86>
    9aba:	b1ba      	cbz	r2, 9aec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9abc:	e018      	b.n	9af0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9abe:	7842      	ldrb	r2, [r0, #1]
    9ac0:	b13a      	cbz	r2, 9ad2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9ac2:	2a01      	cmp	r2, #1
    9ac4:	d005      	beq.n	9ad2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9a>
    9ac6:	2a02      	cmp	r2, #2
    9ac8:	d112      	bne.n	9af0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aca:	b189      	cbz	r1, 9af0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9acc:	8881      	ldrh	r1, [r0, #4]
    9ace:	b179      	cbz	r1, 9af0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9ad0:	e000      	b.n	9ad4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    9ad2:	b159      	cbz	r1, 9aec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ad4:	8841      	ldrh	r1, [r0, #2]
    9ad6:	b149      	cbz	r1, 9aec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9ad8:	8880      	ldrh	r0, [r0, #4]
    9ada:	b138      	cbz	r0, 9aec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    9adc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9ae0:	0049      	lsls	r1, r1, #1
    9ae2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9ae6:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    9aea:	d201      	bcs.n	9af0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    9aec:	2000      	movs	r0, #0
    9aee:	4770      	bx	lr
    9af0:	2012      	movs	r0, #18
    9af2:	4770      	bx	lr
    9af4:	b570      	push	{r4, r5, r6, lr}
    9af6:	4604      	mov	r4, r0
    9af8:	7800      	ldrb	r0, [r0, #0]
    9afa:	2500      	movs	r5, #0
    9afc:	2801      	cmp	r0, #1
    9afe:	d004      	beq.n	9b0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9b00:	b118      	cbz	r0, 9b0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9b02:	2802      	cmp	r0, #2
    9b04:	d001      	beq.n	9b0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    9b06:	2803      	cmp	r0, #3
    9b08:	d139      	bne.n	9b7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b0a:	7860      	ldrb	r0, [r4, #1]
    9b0c:	b128      	cbz	r0, 9b1a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9b0e:	2801      	cmp	r0, #1
    9b10:	d003      	beq.n	9b1a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9b12:	2802      	cmp	r0, #2
    9b14:	d001      	beq.n	9b1a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe2>
    9b16:	2803      	cmp	r0, #3
    9b18:	d131      	bne.n	9b7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b1a:	7e60      	ldrb	r0, [r4, #25]
    9b1c:	b948      	cbnz	r0, 9b32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    9b1e:	78a0      	ldrb	r0, [r4, #2]
    9b20:	2801      	cmp	r0, #1
    9b22:	d12c      	bne.n	9b7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b24:	f7f9 fc86 	bl	3434 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    9b28:	4601      	mov	r1, r0
    9b2a:	78a0      	ldrb	r0, [r4, #2]
    9b2c:	ea30 0101 	bics.w	r1, r0, r1
    9b30:	d001      	beq.n	9b36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    9b32:	2011      	movs	r0, #17
    9b34:	bd70      	pop	{r4, r5, r6, pc}
    9b36:	07c0      	lsls	r0, r0, #31
    9b38:	d006      	beq.n	9b48 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x110>
    9b3a:	78e0      	ldrb	r0, [r4, #3]
    9b3c:	2301      	movs	r3, #1
    9b3e:	6922      	ldr	r2, [r4, #16]
    9b40:	68a1      	ldr	r1, [r4, #8]
    9b42:	f000 f820 	bl	9b86 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b46:	4605      	mov	r5, r0
    9b48:	78a0      	ldrb	r0, [r4, #2]
    9b4a:	0780      	lsls	r0, r0, #30
    9b4c:	d506      	bpl.n	9b5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    9b4e:	78e0      	ldrb	r0, [r4, #3]
    9b50:	2302      	movs	r3, #2
    9b52:	6922      	ldr	r2, [r4, #16]
    9b54:	68a1      	ldr	r1, [r4, #8]
    9b56:	f000 f816 	bl	9b86 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b5a:	4305      	orrs	r5, r0
    9b5c:	78a0      	ldrb	r0, [r4, #2]
    9b5e:	0740      	lsls	r0, r0, #29
    9b60:	d506      	bpl.n	9b70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x138>
    9b62:	78e0      	ldrb	r0, [r4, #3]
    9b64:	2304      	movs	r3, #4
    9b66:	6922      	ldr	r2, [r4, #16]
    9b68:	68a1      	ldr	r1, [r4, #8]
    9b6a:	f000 f80c 	bl	9b86 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    9b6e:	4305      	orrs	r5, r0
    9b70:	b10d      	cbz	r5, 9b76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13e>
    9b72:	4628      	mov	r0, r5
    9b74:	bd70      	pop	{r4, r5, r6, pc}
    9b76:	7e20      	ldrb	r0, [r4, #24]
    9b78:	b108      	cbz	r0, 9b7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x146>
    9b7a:	2807      	cmp	r0, #7
    9b7c:	d901      	bls.n	9b82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14a>
    9b7e:	2012      	movs	r0, #18
    9b80:	bd70      	pop	{r4, r5, r6, pc}
    9b82:	2000      	movs	r0, #0
    9b84:	bd70      	pop	{r4, r5, r6, pc}
    9b86:	b570      	push	{r4, r5, r6, lr}
    9b88:	4614      	mov	r4, r2
    9b8a:	460d      	mov	r5, r1
    9b8c:	b108      	cbz	r0, 9b92 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x15a>
    9b8e:	2801      	cmp	r0, #1
    9b90:	d10a      	bne.n	9ba8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    9b92:	4619      	mov	r1, r3
    9b94:	4610      	mov	r0, r2
    9b96:	f7f9 fbe3 	bl	3360 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0xc8>
    9b9a:	b138      	cbz	r0, 9bac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9b9c:	4628      	mov	r0, r5
    9b9e:	f7f9 fba7 	bl	32f0 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x58>
    9ba2:	b118      	cbz	r0, 9bac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x174>
    9ba4:	42ac      	cmp	r4, r5
    9ba6:	d903      	bls.n	9bb0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x178>
    9ba8:	2012      	movs	r0, #18
    9baa:	bd70      	pop	{r4, r5, r6, pc}
    9bac:	2030      	movs	r0, #48	; 0x30
    9bae:	bd70      	pop	{r4, r5, r6, pc}
    9bb0:	2000      	movs	r0, #0
    9bb2:	bd70      	pop	{r4, r5, r6, pc}
    9bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bb8:	461d      	mov	r5, r3
    9bba:	4610      	mov	r0, r2
    9bbc:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    9bc0:	1f8b      	subs	r3, r1, #6
    9bc2:	f640 427a 	movw	r2, #3194	; 0xc7a
    9bc6:	9e08      	ldr	r6, [sp, #32]
    9bc8:	4293      	cmp	r3, r2
    9bca:	d81c      	bhi.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bcc:	1f83      	subs	r3, r0, #6
    9bce:	4293      	cmp	r3, r2
    9bd0:	d819      	bhi.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bd2:	4281      	cmp	r1, r0
    9bd4:	d817      	bhi.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bd6:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    9bda:	d214      	bcs.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bdc:	f1a4 010a 	sub.w	r1, r4, #10
    9be0:	1f12      	subs	r2, r2, #4
    9be2:	4291      	cmp	r1, r2
    9be4:	d80f      	bhi.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9be6:	f7ff fa66 	bl	90b6 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9bea:	1c6d      	adds	r5, r5, #1
    9bec:	4368      	muls	r0, r5
    9bee:	f240 2171 	movw	r1, #625	; 0x271
    9bf2:	0040      	lsls	r0, r0, #1
    9bf4:	434c      	muls	r4, r1
    9bf6:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    9bfa:	d204      	bcs.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9bfc:	42b7      	cmp	r7, r6
    9bfe:	d802      	bhi.n	9c06 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    9c00:	2001      	movs	r0, #1
    9c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c06:	2000      	movs	r0, #0
    9c08:	e7fb      	b.n	9c02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    9c0a:	207f      	movs	r0, #127	; 0x7f
    9c0c:	f000 b821 	b.w	9c52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x21a>
    9c10:	b508      	push	{r3, lr}
    9c12:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    9c16:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
    9c1a:	f88d 0000 	strb.w	r0, [sp]
    9c1e:	9800      	ldr	r0, [sp, #0]
    9c20:	9000      	str	r0, [sp, #0]
    9c22:	f89d 0000 	ldrb.w	r0, [sp]
    9c26:	b100      	cbz	r0, 9c2a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    9c28:	2001      	movs	r0, #1
    9c2a:	1e40      	subs	r0, r0, #1
    9c2c:	4208      	tst	r0, r1
    9c2e:	d003      	beq.n	9c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    9c30:	2904      	cmp	r1, #4
    9c32:	d001      	beq.n	9c38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    9c34:	2001      	movs	r0, #1
    9c36:	bd08      	pop	{r3, pc}
    9c38:	2000      	movs	r0, #0
    9c3a:	bd08      	pop	{r3, pc}
    9c3c:	b510      	push	{r4, lr}
    9c3e:	f7f8 fdb5 	bl	27ac <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    9c42:	2804      	cmp	r0, #4
    9c44:	d003      	beq.n	9c4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9c46:	2805      	cmp	r0, #5
    9c48:	d001      	beq.n	9c4e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    9c4a:	2000      	movs	r0, #0
    9c4c:	bd10      	pop	{r4, pc}
    9c4e:	2001      	movs	r0, #1
    9c50:	bd10      	pop	{r4, pc}
    9c52:	b508      	push	{r3, lr}
    9c54:	f640 1288 	movw	r2, #2440	; 0x988
    9c58:	2300      	movs	r3, #0
    9c5a:	4669      	mov	r1, sp
    9c5c:	f7fe fa1e 	bl	809c <mpsl_fem_tx_power_split>
    9c60:	bd08      	pop	{r3, pc}
    9c62:	b510      	push	{r4, lr}
    9c64:	f7ff ffea 	bl	9c3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x204>
    9c68:	b120      	cbz	r0, 9c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    9c6a:	f7f7 fdd3 	bl	1814 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    9c6e:	b108      	cbz	r0, 9c74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23c>
    9c70:	2001      	movs	r0, #1
    9c72:	bd10      	pop	{r4, pc}
    9c74:	2000      	movs	r0, #0
    9c76:	bd10      	pop	{r4, pc}
    9c78:	6802      	ldr	r2, [r0, #0]
    9c7a:	b912      	cbnz	r2, 9c82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24a>
    9c7c:	6001      	str	r1, [r0, #0]
    9c7e:	4770      	bx	lr
    9c80:	4602      	mov	r2, r0
    9c82:	6850      	ldr	r0, [r2, #4]
    9c84:	b108      	cbz	r0, 9c8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x252>
    9c86:	428a      	cmp	r2, r1
    9c88:	d1fa      	bne.n	9c80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x248>
    9c8a:	428a      	cmp	r2, r1
    9c8c:	d0f7      	beq.n	9c7e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x246>
    9c8e:	6051      	str	r1, [r2, #4]
    9c90:	4770      	bx	lr
    9c92:	b510      	push	{r4, lr}
    9c94:	4604      	mov	r4, r0
    9c96:	e002      	b.n	9c9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    9c98:	6820      	ldr	r0, [r4, #0]
    9c9a:	4780      	blx	r0
    9c9c:	6864      	ldr	r4, [r4, #4]
    9c9e:	2c00      	cmp	r4, #0
    9ca0:	d1fa      	bne.n	9c98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x260>
    9ca2:	bd10      	pop	{r4, pc}
    9ca4:	b510      	push	{r4, lr}
    9ca6:	f7f7 fce5 	bl	1674 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    9caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cae:	f7f9 bbaf 	b.w	3410 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x24>
    9cb2:	b510      	push	{r4, lr}
    9cb4:	f7f8 fdc2 	bl	283c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    9cb8:	b110      	cbz	r0, 9cc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x288>
    9cba:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    9cbe:	e004      	b.n	9cca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x292>
    9cc0:	f7ff fd25 	bl	970e <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    9cc4:	b120      	cbz	r0, 9cd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x298>
    9cc6:	f240 114f 	movw	r1, #335	; 0x14f
    9cca:	2001      	movs	r0, #1
    9ccc:	f7f6 fb74 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cd0:	f7f9 fadc 	bl	328c <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    9cd4:	f7f7 fcf0 	bl	16b8 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    9cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cdc:	f7f9 ba60 	b.w	31a0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    9ce0:	000b0001 	.word	0x000b0001
    9ce4:	000a0002 	.word	0x000a0002
    9ce8:	00090005 	.word	0x00090005
    9cec:	0008000a 	.word	0x0008000a
    9cf0:	00070014 	.word	0x00070014
    9cf4:	0006001e 	.word	0x0006001e
    9cf8:	00050032 	.word	0x00050032
    9cfc:	0004004b 	.word	0x0004004b
    9d00:	00030064 	.word	0x00030064
    9d04:	00020096 	.word	0x00020096
    9d08:	000100fa 	.word	0x000100fa
    9d0c:	000001f4 	.word	0x000001f4

00009d10 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    9d10:	b510      	push	{r4, lr}
    9d12:	f7f9 fdf5 	bl	3900 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    9d16:	f000 f818 	bl	9d4a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    9d1a:	f7f9 fc07 	bl	352c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    9d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d22:	f7f9 bc6d 	b.w	3600 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00009d26 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    9d26:	b510      	push	{r4, lr}
    9d28:	24c8      	movs	r4, #200	; 0xc8
    9d2a:	1e64      	subs	r4, r4, #1
    9d2c:	b2e4      	uxtb	r4, r4
    9d2e:	f7f9 fc1b 	bl	3568 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    9d32:	2802      	cmp	r0, #2
    9d34:	d003      	beq.n	9d3e <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    9d36:	2801      	cmp	r0, #1
    9d38:	d000      	beq.n	9d3c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    9d3a:	2000      	movs	r0, #0
    9d3c:	bd10      	pop	{r4, pc}
    9d3e:	2c00      	cmp	r4, #0
    9d40:	d1f3      	bne.n	9d2a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    9d42:	21ed      	movs	r1, #237	; 0xed
    9d44:	203b      	movs	r0, #59	; 0x3b
    9d46:	f7f6 fb37 	bl	3b8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00009d4a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    9d4a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9d4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9d52:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    9d56:	f3bf 8f4f 	dsb	sy
    9d5a:	f3bf 8f6f 	isb	sy
    9d5e:	f7f9 bc83 	b.w	3668 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    9d62:	2800      	cmp	r0, #0
    9d64:	db09      	blt.n	9d7a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    9d66:	f000 021f 	and.w	r2, r0, #31
    9d6a:	2101      	movs	r1, #1
    9d6c:	4091      	lsls	r1, r2
    9d6e:	0940      	lsrs	r0, r0, #5
    9d70:	0080      	lsls	r0, r0, #2
    9d72:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d76:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9d7a:	4770      	bx	lr
    9d7c:	2800      	cmp	r0, #0
    9d7e:	db0d      	blt.n	9d9c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    9d80:	f000 021f 	and.w	r2, r0, #31
    9d84:	2101      	movs	r1, #1
    9d86:	4091      	lsls	r1, r2
    9d88:	0940      	lsrs	r0, r0, #5
    9d8a:	0080      	lsls	r0, r0, #2
    9d8c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9d90:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9d94:	f3bf 8f4f 	dsb	sy
    9d98:	f3bf 8f6f 	isb	sy
    9d9c:	4770      	bx	lr
    9d9e:	5840      	ldr	r0, [r0, r1]
    9da0:	2800      	cmp	r0, #0
    9da2:	d000      	beq.n	9da6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
    9da4:	2001      	movs	r0, #1
    9da6:	4770      	bx	lr
    9da8:	5840      	ldr	r0, [r0, r1]
    9daa:	2800      	cmp	r0, #0
    9dac:	d000      	beq.n	9db0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
    9dae:	2001      	movs	r0, #1
    9db0:	4770      	bx	lr

00009db2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    9db2:	b510      	push	{r4, lr}
    9db4:	4604      	mov	r4, r0
    9db6:	4608      	mov	r0, r1
    9db8:	f7f9 febc 	bl	3b34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9dc0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    9dc4:	fbb0 f0f1 	udiv	r0, r0, r1
    9dc8:	1a20      	subs	r0, r4, r0
    9dca:	1e80      	subs	r0, r0, #2
    9dcc:	bd10      	pop	{r4, pc}

00009dce <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    9dce:	b510      	push	{r4, lr}
    9dd0:	4604      	mov	r4, r0
    9dd2:	4608      	mov	r0, r1
    9dd4:	f7f9 feae 	bl	3b34 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9ddc:	fbb0 f0f1 	udiv	r0, r0, r1
    9de0:	1a20      	subs	r0, r4, r0
    9de2:	bd10      	pop	{r4, pc}
    9de4:	2804      	cmp	r0, #4
    9de6:	d202      	bcs.n	9dee <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
    9de8:	f04f 0028 	mov.w	r0, #40	; 0x28
    9dec:	4770      	bx	lr
    9dee:	d102      	bne.n	9df6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
    9df0:	f04f 0010 	mov.w	r0, #16
    9df4:	4770      	bx	lr
    9df6:	f04f 0000 	mov.w	r0, #0
    9dfa:	4770      	bx	lr
    9dfc:	2100      	movs	r1, #0
    9dfe:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    9e02:	f800 1f24 	strb.w	r1, [r0, #36]!
    9e06:	7041      	strb	r1, [r0, #1]
    9e08:	4770      	bx	lr

00009e0a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    9e0a:	b570      	push	{r4, r5, r6, lr}
    9e0c:	f7fa fbea 	bl	45e4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9e10:	4605      	mov	r5, r0
    9e12:	2400      	movs	r4, #0
    9e14:	e006      	b.n	9e24 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    9e16:	4620      	mov	r0, r4
    9e18:	f7fa fbea 	bl	45f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    9e1c:	f7ff ffee 	bl	9dfc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    9e20:	1c64      	adds	r4, r4, #1
    9e22:	b2e4      	uxtb	r4, r4
    9e24:	42ac      	cmp	r4, r5
    9e26:	d3f6      	bcc.n	9e16 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    9e28:	bd70      	pop	{r4, r5, r6, pc}

00009e2a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
    9e2a:	f7fd b813 	b.w	6e54 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00009e2e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
    9e2e:	b510      	push	{r4, lr}
    9e30:	2000      	movs	r0, #0
    9e32:	f7fd fb6b 	bl	750c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
    9e36:	6800      	ldr	r0, [r0, #0]
    9e38:	2800      	cmp	r0, #0
    9e3a:	bf18      	it	ne
    9e3c:	2001      	movne	r0, #1
    9e3e:	bd10      	pop	{r4, pc}

00009e40 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    9e40:	f7fd bb3e 	b.w	74c0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00009e44 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    9e44:	0a41      	lsrs	r1, r0, #9
    9e46:	f643 5209 	movw	r2, #15625	; 0x3d09
    9e4a:	4351      	muls	r1, r2
    9e4c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9e50:	fb10 f002 	smulbb	r0, r0, r2
    9e54:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9e58:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    9e5c:	4770      	bx	lr
    9e5e:	2800      	cmp	r0, #0
    9e60:	db09      	blt.n	9e76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
    9e62:	f000 021f 	and.w	r2, r0, #31
    9e66:	2101      	movs	r1, #1
    9e68:	4091      	lsls	r1, r2
    9e6a:	0940      	lsrs	r0, r0, #5
    9e6c:	0080      	lsls	r0, r0, #2
    9e6e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e72:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9e76:	4770      	bx	lr
    9e78:	2800      	cmp	r0, #0
    9e7a:	db0d      	blt.n	9e98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
    9e7c:	f000 021f 	and.w	r2, r0, #31
    9e80:	2101      	movs	r1, #1
    9e82:	4091      	lsls	r1, r2
    9e84:	0940      	lsrs	r0, r0, #5
    9e86:	0080      	lsls	r0, r0, #2
    9e88:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9e8c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9e90:	f3bf 8f4f 	dsb	sy
    9e94:	f3bf 8f6f 	isb	sy
    9e98:	4770      	bx	lr
    9e9a:	5840      	ldr	r0, [r0, r1]
    9e9c:	2800      	cmp	r0, #0
    9e9e:	d000      	beq.n	9ea2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
    9ea0:	2001      	movs	r0, #1
    9ea2:	4770      	bx	lr
    9ea4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    9ea8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    9eac:	f002 0201 	and.w	r2, r2, #1
    9eb0:	03c0      	lsls	r0, r0, #15
    9eb2:	d503      	bpl.n	9ebc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9eb4:	428a      	cmp	r2, r1
    9eb6:	d101      	bne.n	9ebc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
    9eb8:	2001      	movs	r0, #1
    9eba:	4770      	bx	lr
    9ebc:	2000      	movs	r0, #0
    9ebe:	4770      	bx	lr

00009ec0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    9ec0:	b510      	push	{r4, lr}
    9ec2:	2101      	movs	r1, #1
    9ec4:	0788      	lsls	r0, r1, #30
    9ec6:	f7fd fed5 	bl	7c74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9eca:	2800      	cmp	r0, #0
    9ecc:	d000      	beq.n	9ed0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    9ece:	2001      	movs	r0, #1
    9ed0:	bd10      	pop	{r4, pc}

00009ed2 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    9ed2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9ed6:	2101      	movs	r1, #1
    9ed8:	6001      	str	r1, [r0, #0]
    9eda:	4770      	bx	lr

00009edc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    9edc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    9ee0:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    9ee4:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    9ee8:	f002 0203 	and.w	r2, r2, #3
    9eec:	03c9      	lsls	r1, r1, #15
    9eee:	d503      	bpl.n	9ef8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9ef0:	4282      	cmp	r2, r0
    9ef2:	d101      	bne.n	9ef8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    9ef4:	2001      	movs	r0, #1
    9ef6:	4770      	bx	lr
    9ef8:	2000      	movs	r0, #0
    9efa:	4770      	bx	lr

00009efc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    9efc:	b510      	push	{r4, lr}
    9efe:	2100      	movs	r1, #0
    9f00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    9f04:	f7fd feb6 	bl	7c74 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    9f08:	2800      	cmp	r0, #0
    9f0a:	d000      	beq.n	9f0e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    9f0c:	2001      	movs	r0, #1
    9f0e:	bd10      	pop	{r4, pc}
    9f10:	2800      	cmp	r0, #0
    9f12:	db09      	blt.n	9f28 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    9f14:	f000 021f 	and.w	r2, r0, #31
    9f18:	2101      	movs	r1, #1
    9f1a:	4091      	lsls	r1, r2
    9f1c:	0940      	lsrs	r0, r0, #5
    9f1e:	0080      	lsls	r0, r0, #2
    9f20:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f24:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9f28:	4770      	bx	lr
    9f2a:	2800      	cmp	r0, #0
    9f2c:	db0d      	blt.n	9f4a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    9f2e:	f000 021f 	and.w	r2, r0, #31
    9f32:	2101      	movs	r1, #1
    9f34:	4091      	lsls	r1, r2
    9f36:	0940      	lsrs	r0, r0, #5
    9f38:	0080      	lsls	r0, r0, #2
    9f3a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f3e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    9f42:	f3bf 8f4f 	dsb	sy
    9f46:	f3bf 8f6f 	isb	sy
    9f4a:	4770      	bx	lr
    9f4c:	00021000 	.word	0x00021000
    9f50:	000000fa 	.word	0x000000fa
    9f54:	5faee8ff 	.word	0x5faee8ff
    9f58:	c87c9577 	.word	0xc87c9577
    9f5c:	18146227 	.word	0x18146227
    9f60:	c65deae6 	.word	0xc65deae6
    9f64:	3a723992 	.word	0x3a723992
    9f68:	2800      	cmp	r0, #0
    9f6a:	db09      	blt.n	9f80 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    9f6c:	f000 021f 	and.w	r2, r0, #31
    9f70:	2101      	movs	r1, #1
    9f72:	4091      	lsls	r1, r2
    9f74:	0940      	lsrs	r0, r0, #5
    9f76:	0080      	lsls	r0, r0, #2
    9f78:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    9f7c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    9f80:	4770      	bx	lr

00009f82 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    9f82:	f3ef 8110 	mrs	r1, PRIMASK
    9f86:	b672      	cpsid	i
    9f88:	7802      	ldrb	r2, [r0, #0]
    9f8a:	2a01      	cmp	r2, #1
    9f8c:	d001      	beq.n	9f92 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    9f8e:	2201      	movs	r2, #1
    9f90:	e000      	b.n	9f94 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    9f92:	2200      	movs	r2, #0
    9f94:	2301      	movs	r3, #1
    9f96:	7003      	strb	r3, [r0, #0]
    9f98:	b901      	cbnz	r1, 9f9c <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    9f9a:	b662      	cpsie	i
    9f9c:	b10a      	cbz	r2, 9fa2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    9f9e:	2000      	movs	r0, #0
    9fa0:	4770      	bx	lr
    9fa2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9fa6:	4770      	bx	lr

00009fa8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    9fa8:	2100      	movs	r1, #0
    9faa:	7001      	strb	r1, [r0, #0]
    9fac:	4608      	mov	r0, r1
    9fae:	4770      	bx	lr

00009fb0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    9fb0:	f3ef 8110 	mrs	r1, PRIMASK
    9fb4:	b672      	cpsid	i
    9fb6:	2200      	movs	r2, #0
    9fb8:	7002      	strb	r2, [r0, #0]
    9fba:	b901      	cbnz	r1, 9fbe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    9fbc:	b662      	cpsie	i
    9fbe:	2000      	movs	r0, #0
    9fc0:	4770      	bx	lr

00009fc2 <mpsl_low_priority_process>:
    9fc2:	f7fd bfab 	b.w	7f1c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00009fc6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    9fc6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9fce:	280f      	cmp	r0, #15
    9fd0:	d001      	beq.n	9fd6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    9fd2:	2000      	movs	r0, #0
    9fd4:	4770      	bx	lr
    9fd6:	2001      	movs	r0, #1
    9fd8:	4770      	bx	lr

00009fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    9fda:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9fde:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    9fe2:	280a      	cmp	r0, #10
    9fe4:	d001      	beq.n	9fea <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    9fe6:	2000      	movs	r0, #0
    9fe8:	4770      	bx	lr
    9fea:	2001      	movs	r0, #1
    9fec:	4770      	bx	lr

00009fee <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    9fee:	b500      	push	{lr}
    9ff0:	f7ff fff3 	bl	9fda <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    9ff4:	b120      	cbz	r0, a000 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    9ff6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    9ffa:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    9ffe:	b108      	cbz	r0, a004 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    a000:	2000      	movs	r0, #0
    a002:	bd00      	pop	{pc}
    a004:	2001      	movs	r0, #1
    a006:	bd00      	pop	{pc}

0000a008 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    a008:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a00c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a010:	280e      	cmp	r0, #14
    a012:	d001      	beq.n	a018 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    a014:	2000      	movs	r0, #0
    a016:	4770      	bx	lr
    a018:	2001      	movs	r0, #1
    a01a:	4770      	bx	lr

0000a01c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    a01c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a020:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a024:	2810      	cmp	r0, #16
    a026:	d001      	beq.n	a02c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    a028:	2000      	movs	r0, #0
    a02a:	4770      	bx	lr
    a02c:	2001      	movs	r0, #1
    a02e:	4770      	bx	lr

0000a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    a030:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a034:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a038:	2806      	cmp	r0, #6
    a03a:	d003      	beq.n	a044 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a03c:	1c40      	adds	r0, r0, #1
    a03e:	d001      	beq.n	a044 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    a040:	2000      	movs	r0, #0
    a042:	4770      	bx	lr
    a044:	2001      	movs	r0, #1
    a046:	4770      	bx	lr

0000a048 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    a048:	b500      	push	{lr}
    a04a:	f7ff fff1 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a04e:	b148      	cbz	r0, a064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a050:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a054:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a058:	2806      	cmp	r0, #6
    a05a:	d303      	bcc.n	a064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a05c:	1c40      	adds	r0, r0, #1
    a05e:	d001      	beq.n	a064 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    a060:	2001      	movs	r0, #1
    a062:	bd00      	pop	{pc}
    a064:	2000      	movs	r0, #0
    a066:	bd00      	pop	{pc}

0000a068 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    a068:	b500      	push	{lr}
    a06a:	f7ff ffe1 	bl	a030 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a06e:	b138      	cbz	r0, a080 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    a070:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a074:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    a078:	2806      	cmp	r0, #6
    a07a:	d303      	bcc.n	a084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a07c:	1c40      	adds	r0, r0, #1
    a07e:	d001      	beq.n	a084 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    a080:	2000      	movs	r0, #0
    a082:	bd00      	pop	{pc}
    a084:	2001      	movs	r0, #1
    a086:	bd00      	pop	{pc}

0000a088 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    a088:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a08c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a090:	280d      	cmp	r0, #13
    a092:	d001      	beq.n	a098 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    a094:	2000      	movs	r0, #0
    a096:	4770      	bx	lr
    a098:	2001      	movs	r0, #1
    a09a:	4770      	bx	lr

0000a09c <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    a09c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    a0a0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    a0a4:	2808      	cmp	r0, #8
    a0a6:	d001      	beq.n	a0ac <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    a0a8:	2000      	movs	r0, #0
    a0aa:	4770      	bx	lr
    a0ac:	2001      	movs	r0, #1
    a0ae:	4770      	bx	lr

0000a0b0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    a0b0:	f7fd bf6e 	b.w	7f90 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a0b4 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
    a0b4:	f7fd bf6c 	b.w	7f90 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

0000a0b8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
    a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0bc:	428a      	cmp	r2, r1
    a0be:	d803      	bhi.n	a0c8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
    a0c0:	2179      	movs	r1, #121	; 0x79
    a0c2:	2096      	movs	r0, #150	; 0x96
    a0c4:	f7fd fe2c 	bl	7d20 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0c8:	fab2 f382 	clz	r3, r2
    a0cc:	b143      	cbz	r3, a0e0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
    a0ce:	4099      	lsls	r1, r3
    a0d0:	f1c3 0c20 	rsb	ip, r3, #32
    a0d4:	fa20 fc0c 	lsr.w	ip, r0, ip
    a0d8:	4098      	lsls	r0, r3
    a0da:	ea41 010c 	orr.w	r1, r1, ip
    a0de:	409a      	lsls	r2, r3
    a0e0:	0c13      	lsrs	r3, r2, #16
    a0e2:	fbb1 f5f3 	udiv	r5, r1, r3
    a0e6:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    a0ea:	b287      	uxth	r7, r0
    a0ec:	fbb1 f0f3 	udiv	r0, r1, r3
    a0f0:	fb03 1615 	mls	r6, r3, r5, r1
    a0f4:	b294      	uxth	r4, r2
    a0f6:	fb00 f504 	mul.w	r5, r0, r4
    a0fa:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
    a0fe:	42b5      	cmp	r5, r6
    a100:	d905      	bls.n	a10e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
    a102:	1bad      	subs	r5, r5, r6
    a104:	4295      	cmp	r5, r2
    a106:	bf94      	ite	ls
    a108:	2501      	movls	r5, #1
    a10a:	2502      	movhi	r5, #2
    a10c:	1b40      	subs	r0, r0, r5
    a10e:	0409      	lsls	r1, r1, #16
    a110:	0405      	lsls	r5, r0, #16
    a112:	eb11 010c 	adds.w	r1, r1, ip
    a116:	fba0 0c02 	umull	r0, ip, r0, r2
    a11a:	1a09      	subs	r1, r1, r0
    a11c:	fbb1 f0f3 	udiv	r0, r1, r3
    a120:	fbb1 fcf3 	udiv	ip, r1, r3
    a124:	fb03 131c 	mls	r3, r3, ip, r1
    a128:	fb00 f104 	mul.w	r1, r0, r4
    a12c:	eb07 4303 	add.w	r3, r7, r3, lsl #16
    a130:	4299      	cmp	r1, r3
    a132:	d905      	bls.n	a140 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
    a134:	1ac9      	subs	r1, r1, r3
    a136:	4291      	cmp	r1, r2
    a138:	bf94      	ite	ls
    a13a:	2101      	movls	r1, #1
    a13c:	2102      	movhi	r1, #2
    a13e:	1a40      	subs	r0, r0, r1
    a140:	4328      	orrs	r0, r5
    a142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a146 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
    a146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a14a:	461e      	mov	r6, r3
    a14c:	4615      	mov	r5, r2
    a14e:	4604      	mov	r4, r0
    a150:	9f06      	ldr	r7, [sp, #24]
    a152:	f7ff ffb1 	bl	a0b8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    a156:	6030      	str	r0, [r6, #0]
    a158:	fba0 0105 	umull	r0, r1, r0, r5
    a15c:	1a20      	subs	r0, r4, r0
    a15e:	6038      	str	r0, [r7, #0]
    a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a164 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    a164:	b4f0      	push	{r4, r5, r6, r7}
    a166:	ea80 0c01 	eor.w	ip, r0, r1
    a16a:	4603      	mov	r3, r0
    a16c:	f01c 0f03 	tst.w	ip, #3
    a170:	d13c      	bne.n	a1ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a172:	f013 0f03 	tst.w	r3, #3
    a176:	d00b      	beq.n	a190 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    a178:	2a00      	cmp	r2, #0
    a17a:	bf04      	itt	eq
    a17c:	bcf0      	popeq	{r4, r5, r6, r7}
    a17e:	4770      	bxeq	lr
    a180:	f811 cb01 	ldrb.w	ip, [r1], #1
    a184:	f803 cb01 	strb.w	ip, [r3], #1
    a188:	1e52      	subs	r2, r2, #1
    a18a:	f013 0f03 	tst.w	r3, #3
    a18e:	d1f3      	bne.n	a178 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    a190:	2a03      	cmp	r2, #3
    a192:	d94f      	bls.n	a234 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a194:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a198:	d24c      	bcs.n	a234 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    a19a:	f1c2 0c00 	rsb	ip, r2, #0
    a19e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    a1a2:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    a1a6:	ea4f 0cac 	mov.w	ip, ip, asr #2
    a1aa:	f1cc 0c00 	rsb	ip, ip, #0
    a1ae:	f1bc 0f00 	cmp.w	ip, #0
    a1b2:	dd1b      	ble.n	a1ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a1b4:	1f0d      	subs	r5, r1, #4
    a1b6:	1f1c      	subs	r4, r3, #4
    a1b8:	f01c 0f01 	tst.w	ip, #1
    a1bc:	d003      	beq.n	a1c6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    a1be:	f855 6f04 	ldr.w	r6, [r5, #4]!
    a1c2:	f844 6f04 	str.w	r6, [r4, #4]!
    a1c6:	ea5f 066c 	movs.w	r6, ip, asr #1
    a1ca:	d007      	beq.n	a1dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    a1cc:	686f      	ldr	r7, [r5, #4]
    a1ce:	6067      	str	r7, [r4, #4]
    a1d0:	f855 7f08 	ldr.w	r7, [r5, #8]!
    a1d4:	f844 7f08 	str.w	r7, [r4, #8]!
    a1d8:	1e76      	subs	r6, r6, #1
    a1da:	d1f7      	bne.n	a1cc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    a1dc:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    a1e0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    a1e4:	f1cc 0c00 	rsb	ip, ip, #0
    a1e8:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    a1ec:	2a00      	cmp	r2, #0
    a1ee:	bf04      	itt	eq
    a1f0:	bcf0      	popeq	{r4, r5, r6, r7}
    a1f2:	4770      	bxeq	lr
    a1f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a1f8:	d226      	bcs.n	a248 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a1fa:	2a00      	cmp	r2, #0
    a1fc:	bfdc      	itt	le
    a1fe:	bcf0      	pople	{r4, r5, r6, r7}
    a200:	4770      	bxle	lr
    a202:	1e49      	subs	r1, r1, #1
    a204:	1e5b      	subs	r3, r3, #1
    a206:	f012 0f01 	tst.w	r2, #1
    a20a:	d003      	beq.n	a214 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    a20c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a210:	f803 cf01 	strb.w	ip, [r3, #1]!
    a214:	1052      	asrs	r2, r2, #1
    a216:	bf04      	itt	eq
    a218:	bcf0      	popeq	{r4, r5, r6, r7}
    a21a:	4770      	bxeq	lr
    a21c:	f891 c001 	ldrb.w	ip, [r1, #1]
    a220:	f883 c001 	strb.w	ip, [r3, #1]
    a224:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    a228:	f803 cf02 	strb.w	ip, [r3, #2]!
    a22c:	1e52      	subs	r2, r2, #1
    a22e:	d1f5      	bne.n	a21c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    a230:	bcf0      	pop	{r4, r5, r6, r7}
    a232:	4770      	bx	lr
    a234:	2a04      	cmp	r2, #4
    a236:	d3d9      	bcc.n	a1ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a238:	f851 cb04 	ldr.w	ip, [r1], #4
    a23c:	1f12      	subs	r2, r2, #4
    a23e:	f843 cb04 	str.w	ip, [r3], #4
    a242:	2a04      	cmp	r2, #4
    a244:	d2f8      	bcs.n	a238 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    a246:	e7d1      	b.n	a1ec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    a248:	f811 cb01 	ldrb.w	ip, [r1], #1
    a24c:	f803 cb01 	strb.w	ip, [r3], #1
    a250:	1e52      	subs	r2, r2, #1
    a252:	d1f9      	bne.n	a248 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    a254:	bcf0      	pop	{r4, r5, r6, r7}
    a256:	4770      	bx	lr

0000a258 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    a258:	b470      	push	{r4, r5, r6}
    a25a:	4603      	mov	r3, r0
    a25c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    a260:	f010 0f03 	tst.w	r0, #3
    a264:	d009      	beq.n	a27a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    a266:	2a00      	cmp	r2, #0
    a268:	bf04      	itt	eq
    a26a:	bc70      	popeq	{r4, r5, r6}
    a26c:	4770      	bxeq	lr
    a26e:	f803 cb01 	strb.w	ip, [r3], #1
    a272:	1e52      	subs	r2, r2, #1
    a274:	f013 0f03 	tst.w	r3, #3
    a278:	d1f5      	bne.n	a266 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    a27a:	b2c9      	uxtb	r1, r1
    a27c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a280:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    a284:	2a03      	cmp	r2, #3
    a286:	d939      	bls.n	a2fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a288:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a28c:	d236      	bcs.n	a2fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    a28e:	4251      	negs	r1, r2
    a290:	17cc      	asrs	r4, r1, #31
    a292:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    a296:	1089      	asrs	r1, r1, #2
    a298:	424e      	negs	r6, r1
    a29a:	2e00      	cmp	r6, #0
    a29c:	dd11      	ble.n	a2c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a29e:	1f19      	subs	r1, r3, #4
    a2a0:	f016 0f01 	tst.w	r6, #1
    a2a4:	bf18      	it	ne
    a2a6:	f841 5f04 	strne.w	r5, [r1, #4]!
    a2aa:	1074      	asrs	r4, r6, #1
    a2ac:	d004      	beq.n	a2b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    a2ae:	604d      	str	r5, [r1, #4]
    a2b0:	f841 5f08 	str.w	r5, [r1, #8]!
    a2b4:	1e64      	subs	r4, r4, #1
    a2b6:	d1fa      	bne.n	a2ae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    a2b8:	4271      	negs	r1, r6
    a2ba:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    a2be:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    a2c2:	2a00      	cmp	r2, #0
    a2c4:	bf04      	itt	eq
    a2c6:	bc70      	popeq	{r4, r5, r6}
    a2c8:	4770      	bxeq	lr
    a2ca:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a2ce:	d21d      	bcs.n	a30c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a2d0:	2a00      	cmp	r2, #0
    a2d2:	bfdc      	itt	le
    a2d4:	bc70      	pople	{r4, r5, r6}
    a2d6:	4770      	bxle	lr
    a2d8:	1e59      	subs	r1, r3, #1
    a2da:	f012 0f01 	tst.w	r2, #1
    a2de:	bf18      	it	ne
    a2e0:	f801 cf01 	strbne.w	ip, [r1, #1]!
    a2e4:	1052      	asrs	r2, r2, #1
    a2e6:	bf04      	itt	eq
    a2e8:	bc70      	popeq	{r4, r5, r6}
    a2ea:	4770      	bxeq	lr
    a2ec:	f881 c001 	strb.w	ip, [r1, #1]
    a2f0:	f801 cf02 	strb.w	ip, [r1, #2]!
    a2f4:	1e52      	subs	r2, r2, #1
    a2f6:	d1f9      	bne.n	a2ec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    a2f8:	bc70      	pop	{r4, r5, r6}
    a2fa:	4770      	bx	lr
    a2fc:	2a04      	cmp	r2, #4
    a2fe:	d3e0      	bcc.n	a2c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a300:	1f12      	subs	r2, r2, #4
    a302:	f843 5b04 	str.w	r5, [r3], #4
    a306:	2a04      	cmp	r2, #4
    a308:	d2fa      	bcs.n	a300 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    a30a:	e7da      	b.n	a2c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    a30c:	f803 cb01 	strb.w	ip, [r3], #1
    a310:	1e52      	subs	r2, r2, #1
    a312:	d1fb      	bne.n	a30c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    a314:	bc70      	pop	{r4, r5, r6}
    a316:	4770      	bx	lr
    a318:	f04f 30ff 	mov.w	r0, #4294967295
    a31c:	4770      	bx	lr
    a31e:	2000      	movs	r0, #0
    a320:	4770      	bx	lr
    a322:	2000      	movs	r0, #0
    a324:	4770      	bx	lr
    a326:	f04f 30ff 	mov.w	r0, #4294967295
    a32a:	4770      	bx	lr
    a32c:	4770      	bx	lr
    a32e:	4770      	bx	lr
    a330:	2000      	movs	r0, #0
    a332:	4770      	bx	lr
    a334:	2100      	movs	r1, #0
    a336:	7001      	strb	r1, [r0, #0]
    a338:	4770      	bx	lr
    a33a:	f04f 30ff 	mov.w	r0, #4294967295
    a33e:	4770      	bx	lr
    a340:	f04f 30ff 	mov.w	r0, #4294967295
    a344:	4770      	bx	lr
    a346:	2100      	movs	r1, #0
    a348:	7001      	strb	r1, [r0, #0]
    a34a:	4770      	bx	lr
    a34c:	f04f 30ff 	mov.w	r0, #4294967295
    a350:	4770      	bx	lr
    a352:	f04f 30ff 	mov.w	r0, #4294967295
    a356:	4770      	bx	lr
    a358:	7800      	ldrb	r0, [r0, #0]
    a35a:	2800      	cmp	r0, #0
    a35c:	d001      	beq.n	a362 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
    a35e:	f06f 0015 	mvn.w	r0, #21
    a362:	4770      	bx	lr
    a364:	2000      	movs	r0, #0
    a366:	4770      	bx	lr
    a368:	2200      	movs	r2, #0
    a36a:	f000 b802 	b.w	a372 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0000a36e <mpsl_fem_init>:
    a36e:	f7fa b8a7 	b.w	44c0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0000a372 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
    a372:	b570      	push	{r4, r5, r6, lr}
    a374:	4614      	mov	r4, r2
    a376:	460d      	mov	r5, r1
    a378:	1b00      	subs	r0, r0, r4
    a37a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    a37e:	4288      	cmp	r0, r1
    a380:	da01      	bge.n	a386 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
    a382:	4608      	mov	r0, r1
    a384:	e002      	b.n	a38c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a386:	287f      	cmp	r0, #127	; 0x7f
    a388:	dd00      	ble.n	a38c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
    a38a:	207f      	movs	r0, #127	; 0x7f
    a38c:	4619      	mov	r1, r3
    a38e:	b240      	sxtb	r0, r0
    a390:	f7fa f8ca 	bl	4528 <mpsl_tx_power_radio_supported_power_adjust>
    a394:	7028      	strb	r0, [r5, #0]
    a396:	706c      	strb	r4, [r5, #1]
    a398:	2100      	movs	r1, #0
    a39a:	4420      	add	r0, r4
    a39c:	70a9      	strb	r1, [r5, #2]
    a39e:	b240      	sxtb	r0, r0
    a3a0:	bd70      	pop	{r4, r5, r6, pc}
    a3a2:	2625      	.short	0x2625
    a3a4:	27          	.byte	0x27
    a3a5:	01          	.byte	0x01
    a3a6:	0103      	.short	0x0103
    a3a8:	01          	.byte	0x01
    a3a9:	01          	.byte	0x01
    a3aa:	ecd8      	.short	0xecd8
    a3ac:	fcf8f4f0 	.word	0xfcf8f4f0
    a3b0:	04030200 	.word	0x04030200
    a3b4:	08070605 	.word	0x08070605
	...
    a3cc:	01010101 	.word	0x01010101
    a3d0:	02020202 	.word	0x02020202
    a3d4:	03030303 	.word	0x03030303
    a3d8:	04040404 	.word	0x04040404
    a3dc:	05050505 	.word	0x05050505
    a3e0:	08070606 	.word	0x08070606
    a3e4:	0c0b0a09 	.word	0x0c0b0a09
    a3e8:	0000000d 	.word	0x0000000d
	...
    a3fc:	01010100 	.word	0x01010100
    a400:	02020201 	.word	0x02020201
    a404:	03030302 	.word	0x03030302
    a408:	04040403 	.word	0x04040403
    a40c:	05050504 	.word	0x05050504
    a410:	06060605 	.word	0x06060605
    a414:	00000908 	.word	0x00000908

0000a418 <device_found>:


static void device_found(const bt_addr_le_t *addr, int8_t rssi, uint8_t type,
			 struct net_buf_simple *ad)
{
	bt_data_parse(ad, data_cb, NULL);	
    a418:	4902      	ldr	r1, [pc, #8]	; (a424 <device_found+0xc>)
    a41a:	2200      	movs	r2, #0
    a41c:	4618      	mov	r0, r3
    a41e:	f00b b962 	b.w	156e6 <bt_data_parse>
    a422:	bf00      	nop
    a424:	0000a429 	.word	0x0000a429

0000a428 <data_cb>:
{
    a428:	b538      	push	{r3, r4, r5, lr}
	switch (data->type) 
    a42a:	7803      	ldrb	r3, [r0, #0]
    a42c:	2b09      	cmp	r3, #9
    a42e:	d817      	bhi.n	a460 <data_cb+0x38>
    a430:	2b07      	cmp	r3, #7
    a432:	d917      	bls.n	a464 <data_cb+0x3c>
			len = MIN(data->data_len, NAME_LEN - 1);
    a434:	7844      	ldrb	r4, [r0, #1]
			(void)memcpy(bt_device_name, data->data, len);
    a436:	4d17      	ldr	r5, [pc, #92]	; (a494 <data_cb+0x6c>)
    a438:	6841      	ldr	r1, [r0, #4]
			len = MIN(data->data_len, NAME_LEN - 1);
    a43a:	2c1d      	cmp	r4, #29
    a43c:	bf28      	it	cs
    a43e:	241d      	movcs	r4, #29
			(void)memcpy(bt_device_name, data->data, len);
    a440:	4622      	mov	r2, r4
    a442:	4628      	mov	r0, r5
    a444:	f00b f90a 	bl	1565c <memcpy>
			res = memcmp(bt_device_name, BT_DEVICE, 11);
    a448:	4913      	ldr	r1, [pc, #76]	; (a498 <data_cb+0x70>)
    a44a:	220b      	movs	r2, #11
    a44c:	4628      	mov	r0, r5
    a44e:	f00b f8de 	bl	1560e <memcmp>
			bt_device_name[len] = '\0';
    a452:	2300      	movs	r3, #0
    a454:	552b      	strb	r3, [r5, r4]
			if(res == 0)
    a456:	b9d0      	cbnz	r0, a48e <data_cb+0x66>
				bt_device_found = true;				
    a458:	4b10      	ldr	r3, [pc, #64]	; (a49c <data_cb+0x74>)
    a45a:	2201      	movs	r2, #1
    a45c:	701a      	strb	r2, [r3, #0]
				return true;				
    a45e:	e001      	b.n	a464 <data_cb+0x3c>
	switch (data->type) 
    a460:	2bff      	cmp	r3, #255	; 0xff
    a462:	d001      	beq.n	a468 <data_cb+0x40>
{
    a464:	2001      	movs	r0, #1
}
    a466:	bd38      	pop	{r3, r4, r5, pc}
			if(bt_device_found == true)
    a468:	4b0c      	ldr	r3, [pc, #48]	; (a49c <data_cb+0x74>)
    a46a:	781a      	ldrb	r2, [r3, #0]
    a46c:	b17a      	cbz	r2, a48e <data_cb+0x66>
				bt_device_found = false;
    a46e:	2200      	movs	r2, #0
				(void)memcpy(bt_man_data, data->data, data->data_len);
    a470:	6841      	ldr	r1, [r0, #4]
				bt_device_found = false;
    a472:	701a      	strb	r2, [r3, #0]
				(void)memcpy(bt_man_data, data->data, data->data_len);
    a474:	7842      	ldrb	r2, [r0, #1]
    a476:	480a      	ldr	r0, [pc, #40]	; (a4a0 <data_cb+0x78>)
    a478:	f00b f8f0 	bl	1565c <memcpy>
				cmp = memcmp(bt_man_data_curr, bt_man_data, MAN_LEN);
    a47c:	4908      	ldr	r1, [pc, #32]	; (a4a0 <data_cb+0x78>)
    a47e:	4809      	ldr	r0, [pc, #36]	; (a4a4 <data_cb+0x7c>)
    a480:	2208      	movs	r2, #8
    a482:	f00b f8c4 	bl	1560e <memcmp>
				if(cmp != 0)
    a486:	b110      	cbz	r0, a48e <data_cb+0x66>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a488:	4807      	ldr	r0, [pc, #28]	; (a4a8 <data_cb+0x80>)
    a48a:	f007 f9bb 	bl	11804 <z_impl_k_sem_give>
				return false;
    a48e:	2000      	movs	r0, #0
    a490:	e7e9      	b.n	a466 <data_cb+0x3e>
    a492:	bf00      	nop
    a494:	20002df5 	.word	0x20002df5
    a498:	00017a08 	.word	0x00017a08
    a49c:	20002df4 	.word	0x20002df4
    a4a0:	20002dec 	.word	0x20002dec
    a4a4:	20002de4 	.word	0x20002de4
    a4a8:	200006a8 	.word	0x200006a8

0000a4ac <led_strip_update_rgb.constprop.0.isra.0>:
				       struct led_rgb *pixels,
				       size_t num_pixels) {
	const struct led_strip_driver_api *api =
		(const struct led_strip_driver_api *)dev->api;

	return api->update_rgb(dev, pixels, num_pixels);
    a4ac:	4802      	ldr	r0, [pc, #8]	; (a4b8 <led_strip_update_rgb.constprop.0.isra.0+0xc>)
    a4ae:	4903      	ldr	r1, [pc, #12]	; (a4bc <led_strip_update_rgb.constprop.0.isra.0+0x10>)
    a4b0:	6883      	ldr	r3, [r0, #8]
    a4b2:	2258      	movs	r2, #88	; 0x58
    a4b4:	681b      	ldr	r3, [r3, #0]
    a4b6:	4718      	bx	r3
    a4b8:	000171e4 	.word	0x000171e4
    a4bc:	20002e13 	.word	0x20002e13

0000a4c0 <update_points>:
{
    a4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t d1 = guestpoints / 10;  
    a4c4:	230a      	movs	r3, #10
    a4c6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; a5b0 <update_points+0xf0>
    a4ca:	fbb1 f2f3 	udiv	r2, r1, r3
		if((numbers[d0] & 1 << i) == 1 << i)
    a4ce:	f8df 80e4 	ldr.w	r8, [pc, #228]	; a5b4 <update_points+0xf4>
	  		memcpy(&pixels[i + guest_digit_zero_index], &black, sizeof(struct led_rgb));	
    a4d2:	f8df b0e4 	ldr.w	fp, [pc, #228]	; a5b8 <update_points+0xf8>
	uint8_t d0 = guestpoints % 10; 
    a4d6:	fb03 1112 	mls	r1, r3, r2, r1
	uint8_t d1 = guestpoints / 10;  
    a4da:	b2d7      	uxtb	r7, r2
	uint8_t d3 = homepoints / 10; 
    a4dc:	fbb0 f2f3 	udiv	r2, r0, r3
	uint8_t d2 = homepoints % 10;  
    a4e0:	fb03 0012 	mls	r0, r3, r2, r0
	uint8_t d0 = guestpoints % 10; 
    a4e4:	b2cd      	uxtb	r5, r1
	uint8_t d3 = homepoints / 10; 
    a4e6:	b2d6      	uxtb	r6, r2
	uint8_t d2 = homepoints % 10;  
    a4e8:	b2c4      	uxtb	r4, r0
    a4ea:	f04f 0900 	mov.w	r9, #0
		if((numbers[d0] & 1 << i) == 1 << i)
    a4ee:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
    a4f2:	2301      	movs	r3, #1
    a4f4:	fa03 f309 	lsl.w	r3, r3, r9
    a4f8:	4393      	bics	r3, r2
	  		memcpy(&pixels[i + guest_digit_zero_index], &colors[0], sizeof(struct led_rgb));
    a4fa:	bf0c      	ite	eq
    a4fc:	492f      	ldreq	r1, [pc, #188]	; (a5bc <update_points+0xfc>)
	  		memcpy(&pixels[i + guest_digit_zero_index], &black, sizeof(struct led_rgb));	
    a4fe:	4659      	movne	r1, fp
    a500:	4650      	mov	r0, sl
	  		memcpy(&pixels[i + guest_digit_zero_index], &colors[0], sizeof(struct led_rgb));
    a502:	2204      	movs	r2, #4
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a504:	f109 0901 	add.w	r9, r9, #1
	  		memcpy(&pixels[i + guest_digit_zero_index], &black, sizeof(struct led_rgb));	
    a508:	f00b f8a8 	bl	1565c <memcpy>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a50c:	f1b9 0f0e 	cmp.w	r9, #14
    a510:	f10a 0a04 	add.w	sl, sl, #4
    a514:	d1eb      	bne.n	a4ee <update_points+0x2e>
    a516:	f8df a0a8 	ldr.w	sl, [pc, #168]	; a5c0 <update_points+0x100>
			memcpy(&pixels[i + guest_digit_one_index], &colors[0], sizeof(struct led_rgb));
    a51a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; a5bc <update_points+0xfc>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a51e:	2500      	movs	r5, #0
		if((numbers[d1] & 1 << i) == 1 << i)
    a520:	f04f 0901 	mov.w	r9, #1
    a524:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
    a528:	fa09 f205 	lsl.w	r2, r9, r5
    a52c:	438a      	bics	r2, r1
			memcpy(&pixels[i + guest_digit_one_index], &black, sizeof(struct led_rgb));
    a52e:	bf14      	ite	ne
    a530:	4921      	ldrne	r1, [pc, #132]	; (a5b8 <update_points+0xf8>)
			memcpy(&pixels[i + guest_digit_one_index], &colors[0], sizeof(struct led_rgb));
    a532:	4659      	moveq	r1, fp
			memcpy(&pixels[i + guest_digit_one_index], &black, sizeof(struct led_rgb));
    a534:	4650      	mov	r0, sl
			memcpy(&pixels[i + guest_digit_one_index], &colors[0], sizeof(struct led_rgb));
    a536:	2204      	movs	r2, #4
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a538:	3501      	adds	r5, #1
			memcpy(&pixels[i + guest_digit_one_index], &black, sizeof(struct led_rgb));
    a53a:	f00b f88f 	bl	1565c <memcpy>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a53e:	2d0e      	cmp	r5, #14
    a540:	f10a 0a04 	add.w	sl, sl, #4
    a544:	d1ee      	bne.n	a524 <update_points+0x64>
    a546:	4f1f      	ldr	r7, [pc, #124]	; (a5c4 <update_points+0x104>)
	  		memcpy(&pixels[i + home_digit_zero_index], &black, sizeof(struct led_rgb));	
    a548:	f8df a06c 	ldr.w	sl, [pc, #108]	; a5b8 <update_points+0xf8>
	  		memcpy(&pixels[i + home_digit_zero_index], &colors[0], sizeof(struct led_rgb));
    a54c:	f8df b06c 	ldr.w	fp, [pc, #108]	; a5bc <update_points+0xfc>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a550:	2500      	movs	r5, #0
		if((numbers[d2] & 1 << i) == 1 << i)
    a552:	f04f 0901 	mov.w	r9, #1
    a556:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a55a:	fa09 f305 	lsl.w	r3, r9, r5
    a55e:	4393      	bics	r3, r2
	  		memcpy(&pixels[i + home_digit_zero_index], &colors[0], sizeof(struct led_rgb));
    a560:	bf0c      	ite	eq
    a562:	4659      	moveq	r1, fp
	  		memcpy(&pixels[i + home_digit_zero_index], &black, sizeof(struct led_rgb));	
    a564:	4651      	movne	r1, sl
    a566:	4638      	mov	r0, r7
	  		memcpy(&pixels[i + home_digit_zero_index], &colors[0], sizeof(struct led_rgb));
    a568:	2204      	movs	r2, #4
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a56a:	3501      	adds	r5, #1
	  		memcpy(&pixels[i + home_digit_zero_index], &black, sizeof(struct led_rgb));	
    a56c:	f00b f876 	bl	1565c <memcpy>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a570:	2d0e      	cmp	r5, #14
    a572:	f107 0704 	add.w	r7, r7, #4
    a576:	d1ee      	bne.n	a556 <update_points+0x96>
    a578:	4d13      	ldr	r5, [pc, #76]	; (a5c8 <update_points+0x108>)
			memcpy(&pixels[i + home_digit_one_index], &black, sizeof(struct led_rgb));
    a57a:	f8df 903c 	ldr.w	r9, [pc, #60]	; a5b8 <update_points+0xf8>
			memcpy(&pixels[i + home_digit_one_index], &colors[0], sizeof(struct led_rgb));
    a57e:	f8df a03c 	ldr.w	sl, [pc, #60]	; a5bc <update_points+0xfc>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a582:	2400      	movs	r4, #0
		if((numbers[d3] & 1 << i) == 1 << i)
    a584:	2701      	movs	r7, #1
    a586:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
    a58a:	fa07 f304 	lsl.w	r3, r7, r4
    a58e:	4393      	bics	r3, r2
			memcpy(&pixels[i + home_digit_one_index], &colors[0], sizeof(struct led_rgb));
    a590:	bf0c      	ite	eq
    a592:	4651      	moveq	r1, sl
			memcpy(&pixels[i + home_digit_one_index], &black, sizeof(struct led_rgb));
    a594:	4649      	movne	r1, r9
    a596:	4628      	mov	r0, r5
			memcpy(&pixels[i + home_digit_one_index], &colors[0], sizeof(struct led_rgb));
    a598:	2204      	movs	r2, #4
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a59a:	3401      	adds	r4, #1
			memcpy(&pixels[i + home_digit_one_index], &black, sizeof(struct led_rgb));
    a59c:	f00b f85e 	bl	1565c <memcpy>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a5a0:	2c0e      	cmp	r4, #14
    a5a2:	f105 0504 	add.w	r5, r5, #4
    a5a6:	d1ee      	bne.n	a586 <update_points+0xc6>
}
    a5a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	led_strip_update_rgb(strip, pixels, STRIP_NUM_PIXELS);
    a5ac:	f7ff bf7e 	b.w	a4ac <led_strip_update_rgb.constprop.0.isra.0>
    a5b0:	20002e13 	.word	0x20002e13
    a5b4:	200002c8 	.word	0x200002c8
    a5b8:	00017af1 	.word	0x00017af1
    a5bc:	00017af5 	.word	0x00017af5
    a5c0:	20002e4b 	.word	0x20002e4b
    a5c4:	20002e83 	.word	0x20002e83
    a5c8:	20002ebb 	.word	0x20002ebb

0000a5cc <update_serving>:
	if((serving & TEAM_HOME_SERVING_BIT) == TEAM_HOME_SERVING_BIT)
    a5cc:	07c2      	lsls	r2, r0, #31
{
    a5ce:	b508      	push	{r3, lr}
	if((serving & TEAM_HOME_SERVING_BIT) == TEAM_HOME_SERVING_BIT)
    a5d0:	d511      	bpl.n	a5f6 <update_serving+0x2a>
		memcpy(&pixels[56], &colors[0], sizeof(struct led_rgb));		
    a5d2:	491b      	ldr	r1, [pc, #108]	; (a640 <update_serving+0x74>)
    a5d4:	481b      	ldr	r0, [pc, #108]	; (a644 <update_serving+0x78>)
    a5d6:	2204      	movs	r2, #4
    a5d8:	f00b f840 	bl	1565c <memcpy>
		memcpy(&pixels[57], &colors[0], sizeof(struct led_rgb));		
    a5dc:	4918      	ldr	r1, [pc, #96]	; (a640 <update_serving+0x74>)
    a5de:	2204      	movs	r2, #4
		memcpy(&pixels[57], &black, sizeof(struct led_rgb));		
    a5e0:	4819      	ldr	r0, [pc, #100]	; (a648 <update_serving+0x7c>)
    a5e2:	f00b f83b 	bl	1565c <memcpy>
		memcpy(&pixels[58], &black, sizeof(struct led_rgb));		
    a5e6:	4919      	ldr	r1, [pc, #100]	; (a64c <update_serving+0x80>)
    a5e8:	4819      	ldr	r0, [pc, #100]	; (a650 <update_serving+0x84>)
    a5ea:	2204      	movs	r2, #4
    a5ec:	f00b f836 	bl	1565c <memcpy>
		memcpy(&pixels[59], &black, sizeof(struct led_rgb));		
    a5f0:	4916      	ldr	r1, [pc, #88]	; (a64c <update_serving+0x80>)
    a5f2:	2204      	movs	r2, #4
    a5f4:	e012      	b.n	a61c <update_serving+0x50>
	else if((serving & TEAM_GUEST_SERVING_BIT) == TEAM_GUEST_SERVING_BIT)
    a5f6:	0783      	lsls	r3, r0, #30
    a5f8:	d517      	bpl.n	a62a <update_serving+0x5e>
		memcpy(&pixels[56], &black, sizeof(struct led_rgb));		
    a5fa:	4914      	ldr	r1, [pc, #80]	; (a64c <update_serving+0x80>)
    a5fc:	4811      	ldr	r0, [pc, #68]	; (a644 <update_serving+0x78>)
    a5fe:	2204      	movs	r2, #4
    a600:	f00b f82c 	bl	1565c <memcpy>
		memcpy(&pixels[57], &black, sizeof(struct led_rgb));		
    a604:	4911      	ldr	r1, [pc, #68]	; (a64c <update_serving+0x80>)
    a606:	4810      	ldr	r0, [pc, #64]	; (a648 <update_serving+0x7c>)
    a608:	2204      	movs	r2, #4
    a60a:	f00b f827 	bl	1565c <memcpy>
		memcpy(&pixels[58], &colors[0], sizeof(struct led_rgb));		
    a60e:	490c      	ldr	r1, [pc, #48]	; (a640 <update_serving+0x74>)
    a610:	480f      	ldr	r0, [pc, #60]	; (a650 <update_serving+0x84>)
    a612:	2204      	movs	r2, #4
    a614:	f00b f822 	bl	1565c <memcpy>
		memcpy(&pixels[59], &colors[0], sizeof(struct led_rgb));		
    a618:	4909      	ldr	r1, [pc, #36]	; (a640 <update_serving+0x74>)
    a61a:	2204      	movs	r2, #4
		memcpy(&pixels[59], &black, sizeof(struct led_rgb));		
    a61c:	480d      	ldr	r0, [pc, #52]	; (a654 <update_serving+0x88>)
    a61e:	f00b f81d 	bl	1565c <memcpy>
}
    a622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	led_strip_update_rgb(strip, pixels, STRIP_NUM_PIXELS);
    a626:	f7ff bf41 	b.w	a4ac <led_strip_update_rgb.constprop.0.isra.0>
	else if(serving == 0)
    a62a:	2800      	cmp	r0, #0
    a62c:	d1f9      	bne.n	a622 <update_serving+0x56>
		memcpy(&pixels[56], &black, sizeof(struct led_rgb));		
    a62e:	4907      	ldr	r1, [pc, #28]	; (a64c <update_serving+0x80>)
    a630:	4804      	ldr	r0, [pc, #16]	; (a644 <update_serving+0x78>)
    a632:	2204      	movs	r2, #4
    a634:	f00b f812 	bl	1565c <memcpy>
		memcpy(&pixels[57], &black, sizeof(struct led_rgb));		
    a638:	4904      	ldr	r1, [pc, #16]	; (a64c <update_serving+0x80>)
    a63a:	2204      	movs	r2, #4
    a63c:	e7d0      	b.n	a5e0 <update_serving+0x14>
    a63e:	bf00      	nop
    a640:	00017af5 	.word	0x00017af5
    a644:	20002ef3 	.word	0x20002ef3
    a648:	20002ef7 	.word	0x20002ef7
    a64c:	00017af1 	.word	0x00017af1
    a650:	20002efb 	.word	0x20002efb
    a654:	20002eff 	.word	0x20002eff

0000a658 <update_sets>:
{
    a658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a65c:	4d1a      	ldr	r5, [pc, #104]	; (a6c8 <update_sets+0x70>)
		if((numbers[guestsets] & 1 << i) == 1 << i)
    a65e:	4f1b      	ldr	r7, [pc, #108]	; (a6cc <update_sets+0x74>)
	  		memcpy(&pixels[i + guest_digit_index], &black, sizeof(struct led_rgb));	
    a660:	f8df 906c 	ldr.w	r9, [pc, #108]	; a6d0 <update_sets+0x78>
{
    a664:	4606      	mov	r6, r0
    a666:	4688      	mov	r8, r1
    a668:	2400      	movs	r4, #0
		if((numbers[guestsets] & 1 << i) == 1 << i)
    a66a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    a66e:	2301      	movs	r3, #1
    a670:	40a3      	lsls	r3, r4
    a672:	4393      	bics	r3, r2
	  		memcpy(&pixels[i + guest_digit_index], &colors[0], sizeof(struct led_rgb));
    a674:	bf0c      	ite	eq
    a676:	4917      	ldreq	r1, [pc, #92]	; (a6d4 <update_sets+0x7c>)
	  		memcpy(&pixels[i + guest_digit_index], &black, sizeof(struct led_rgb));	
    a678:	4649      	movne	r1, r9
    a67a:	4628      	mov	r0, r5
	  		memcpy(&pixels[i + guest_digit_index], &colors[0], sizeof(struct led_rgb));
    a67c:	2204      	movs	r2, #4
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a67e:	3401      	adds	r4, #1
	  		memcpy(&pixels[i + guest_digit_index], &black, sizeof(struct led_rgb));	
    a680:	f00a ffec 	bl	1565c <memcpy>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a684:	2c0e      	cmp	r4, #14
    a686:	f105 0504 	add.w	r5, r5, #4
    a68a:	d1ee      	bne.n	a66a <update_sets+0x12>
    a68c:	4d12      	ldr	r5, [pc, #72]	; (a6d8 <update_sets+0x80>)
	  		memcpy(&pixels[i + home_digit_index], &black, sizeof(struct led_rgb));	
    a68e:	f8df 9040 	ldr.w	r9, [pc, #64]	; a6d0 <update_sets+0x78>
	  		memcpy(&pixels[i + home_digit_index], &colors[0], sizeof(struct led_rgb));
    a692:	f8df a040 	ldr.w	sl, [pc, #64]	; a6d4 <update_sets+0x7c>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a696:	2400      	movs	r4, #0
		if((numbers[homesets] & 1 << i) == 1 << i)
    a698:	f04f 0801 	mov.w	r8, #1
    a69c:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
    a6a0:	fa08 f304 	lsl.w	r3, r8, r4
    a6a4:	4393      	bics	r3, r2
	  		memcpy(&pixels[i + home_digit_index], &colors[0], sizeof(struct led_rgb));
    a6a6:	bf0c      	ite	eq
    a6a8:	4651      	moveq	r1, sl
	  		memcpy(&pixels[i + home_digit_index], &black, sizeof(struct led_rgb));	
    a6aa:	4649      	movne	r1, r9
    a6ac:	4628      	mov	r0, r5
	  		memcpy(&pixels[i + home_digit_index], &colors[0], sizeof(struct led_rgb));
    a6ae:	2204      	movs	r2, #4
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a6b0:	3401      	adds	r4, #1
	  		memcpy(&pixels[i + home_digit_index], &black, sizeof(struct led_rgb));	
    a6b2:	f00a ffd3 	bl	1565c <memcpy>
	for(i = 0; i < RGB_LEDS_PER_DIGIT; i++)
    a6b6:	2c0e      	cmp	r4, #14
    a6b8:	f105 0504 	add.w	r5, r5, #4
    a6bc:	d1ee      	bne.n	a69c <update_sets+0x44>
}
    a6be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	led_strip_update_rgb(strip, pixels, STRIP_NUM_PIXELS);
    a6c2:	f7ff bef3 	b.w	a4ac <led_strip_update_rgb.constprop.0.isra.0>
    a6c6:	bf00      	nop
    a6c8:	20002f03 	.word	0x20002f03
    a6cc:	200002c8 	.word	0x200002c8
    a6d0:	00017af1 	.word	0x00017af1
    a6d4:	00017af5 	.word	0x00017af5
    a6d8:	20002f3b 	.word	0x20002f3b

0000a6dc <thread0>:
}


int thread0(void)
{
    a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6e0:	b086      	sub	sp, #24
	int err;
	
	struct bt_le_scan_param scan_param = {
    a6e2:	2100      	movs	r1, #0
    a6e4:	2214      	movs	r2, #20
    a6e6:	a801      	add	r0, sp, #4
    a6e8:	f00a ffc3 	bl	15672 <memset>
    a6ec:	2301      	movs	r3, #1
		.options    = BT_LE_SCAN_OPT_FILTER_DUPLICATE,
		.interval   = BT_GAP_SCAN_FAST_INTERVAL,
		.window     = BT_GAP_SCAN_FAST_WINDOW,
	};

	printk("Starting Observer Demo\n");
    a6ee:	483d      	ldr	r0, [pc, #244]	; (a7e4 <thread0+0x108>)
	struct bt_le_scan_param scan_param = {
    a6f0:	f88d 3004 	strb.w	r3, [sp, #4]
    a6f4:	9302      	str	r3, [sp, #8]
    a6f6:	4b3c      	ldr	r3, [pc, #240]	; (a7e8 <thread0+0x10c>)
    a6f8:	9303      	str	r3, [sp, #12]
	printk("Starting Observer Demo\n");
    a6fa:	f00a fc05 	bl	14f08 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    a6fe:	2000      	movs	r0, #0
    a700:	f002 f8ca 	bl	c898 <bt_enable>
	if (err) {
    a704:	4601      	mov	r1, r0
    a706:	b120      	cbz	r0, a712 <thread0+0x36>
		printk("Bluetooth init failed (err %d)\n", err);
    a708:	4838      	ldr	r0, [pc, #224]	; (a7ec <thread0+0x110>)
	}

	if (device_is_ready(strip)) {
		printk("Found LED strip device %s", strip->name);
	} else {
		printk("LED strip device %s is not ready", strip->name);
    a70a:	f00a fbfd 	bl	14f08 <printk>
		return 0;
    a70e:	2400      	movs	r4, #0
    a710:	e009      	b.n	a726 <thread0+0x4a>
	err = bt_le_scan_start(&scan_param, device_found);
    a712:	4937      	ldr	r1, [pc, #220]	; (a7f0 <thread0+0x114>)
    a714:	a801      	add	r0, sp, #4
    a716:	f002 fbe7 	bl	cee8 <bt_le_scan_start>
	if (err) {
    a71a:	4604      	mov	r4, r0
    a71c:	b138      	cbz	r0, a72e <thread0+0x52>
		printk("Start scanning failed (err %d)\n", err);
    a71e:	4601      	mov	r1, r0
    a720:	4834      	ldr	r0, [pc, #208]	; (a7f4 <thread0+0x118>)
    a722:	f00a fbf1 	bl	14f08 <printk>
		update_sets(bt_man_data[4], bt_man_data[5]);
		update_serving(bt_man_data[6]);	

		memcpy(bt_man_data_curr, bt_man_data, MAN_LEN);
	}	
}
    a726:	4620      	mov	r0, r4
    a728:	b006      	add	sp, #24
    a72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    a72e:	4d32      	ldr	r5, [pc, #200]	; (a7f8 <thread0+0x11c>)
    a730:	4628      	mov	r0, r5
    a732:	f00b ffe0 	bl	166f6 <z_device_is_ready>
		printk("Found LED strip device %s", strip->name);
    a736:	6829      	ldr	r1, [r5, #0]
	if (device_is_ready(strip)) {
    a738:	2800      	cmp	r0, #0
    a73a:	d050      	beq.n	a7de <thread0+0x102>
		printk("Found LED strip device %s", strip->name);
    a73c:	482f      	ldr	r0, [pc, #188]	; (a7fc <thread0+0x120>)
	return z_impl_k_sem_take(sem, timeout);
    a73e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; a800 <thread0+0x124>
		printk("Device Name: %s ", bt_device_name);
    a742:	f8df 90c0 	ldr.w	r9, [pc, #192]	; a804 <thread0+0x128>
		printk("\n");
    a746:	4f30      	ldr	r7, [pc, #192]	; (a808 <thread0+0x12c>)
		printk("Found LED strip device %s", strip->name);
    a748:	f00a fbde 	bl	14f08 <printk>
	memset(&pixels, 0x00, sizeof(pixels));
    a74c:	f44f 72b0 	mov.w	r2, #352	; 0x160
    a750:	4621      	mov	r1, r4
    a752:	482e      	ldr	r0, [pc, #184]	; (a80c <thread0+0x130>)
    a754:	f00a ff8d 	bl	15672 <memset>
	led_strip_update_rgb(strip, pixels, STRIP_NUM_PIXELS);
    a758:	f7ff fea8 	bl	a4ac <led_strip_update_rgb.constprop.0.isra.0>
	update_points(0, 0);
    a75c:	4621      	mov	r1, r4
    a75e:	4620      	mov	r0, r4
    a760:	f7ff feae 	bl	a4c0 <update_points>
	update_serving(0);
    a764:	4620      	mov	r0, r4
    a766:	f7ff ff31 	bl	a5cc <update_serving>
	update_sets(0, 0);	
    a76a:	4621      	mov	r1, r4
    a76c:	4620      	mov	r0, r4
    a76e:	f7ff ff73 	bl	a658 <update_sets>
	printk("Started scanning...\n");
    a772:	4827      	ldr	r0, [pc, #156]	; (a810 <thread0+0x134>)
    a774:	f00a fbc8 	bl	14f08 <printk>
    a778:	f04f 32ff 	mov.w	r2, #4294967295
    a77c:	f04f 33ff 	mov.w	r3, #4294967295
    a780:	4640      	mov	r0, r8
    a782:	f007 f865 	bl	11850 <z_impl_k_sem_take>
		printk("Device Name: %s ", bt_device_name);
    a786:	4649      	mov	r1, r9
    a788:	4822      	ldr	r0, [pc, #136]	; (a814 <thread0+0x138>)
    a78a:	4e23      	ldr	r6, [pc, #140]	; (a818 <thread0+0x13c>)
			printk("%02x:", bt_man_data[i]);
    a78c:	f8df a08c 	ldr.w	sl, [pc, #140]	; a81c <thread0+0x140>
		printk("Device Name: %s ", bt_device_name);
    a790:	f00a fbba 	bl	14f08 <printk>
		printk("\n");
    a794:	4638      	mov	r0, r7
    a796:	f00a fbb7 	bl	14f08 <printk>
		printk("Manufacturer data: ");
    a79a:	4821      	ldr	r0, [pc, #132]	; (a820 <thread0+0x144>)
    a79c:	f00a fbb4 	bl	14f08 <printk>
		for (uint16_t i=0; i<MAN_LEN; i++)
    a7a0:	2400      	movs	r4, #0
    a7a2:	4635      	mov	r5, r6
    a7a4:	3401      	adds	r4, #1
			printk("%02x:", bt_man_data[i]);
    a7a6:	f816 1b01 	ldrb.w	r1, [r6], #1
    a7aa:	4650      	mov	r0, sl
		for (uint16_t i=0; i<MAN_LEN; i++)
    a7ac:	b2a4      	uxth	r4, r4
			printk("%02x:", bt_man_data[i]);
    a7ae:	f00a fbab 	bl	14f08 <printk>
		for (uint16_t i=0; i<MAN_LEN; i++)
    a7b2:	2c08      	cmp	r4, #8
    a7b4:	d1f6      	bne.n	a7a4 <thread0+0xc8>
		printk("\n");
    a7b6:	4638      	mov	r0, r7
    a7b8:	f00a fba6 	bl	14f08 <printk>
		update_points(bt_man_data[2], bt_man_data[3]);		
    a7bc:	78e9      	ldrb	r1, [r5, #3]
    a7be:	78a8      	ldrb	r0, [r5, #2]
    a7c0:	f7ff fe7e 	bl	a4c0 <update_points>
		update_sets(bt_man_data[4], bt_man_data[5]);
    a7c4:	7969      	ldrb	r1, [r5, #5]
    a7c6:	7928      	ldrb	r0, [r5, #4]
    a7c8:	f7ff ff46 	bl	a658 <update_sets>
		update_serving(bt_man_data[6]);	
    a7cc:	79a8      	ldrb	r0, [r5, #6]
    a7ce:	f7ff fefd 	bl	a5cc <update_serving>
		memcpy(bt_man_data_curr, bt_man_data, MAN_LEN);
    a7d2:	4911      	ldr	r1, [pc, #68]	; (a818 <thread0+0x13c>)
    a7d4:	4813      	ldr	r0, [pc, #76]	; (a824 <thread0+0x148>)
    a7d6:	4622      	mov	r2, r4
    a7d8:	f00a ff40 	bl	1565c <memcpy>
	{		
    a7dc:	e7cc      	b.n	a778 <thread0+0x9c>
		printk("LED strip device %s is not ready", strip->name);
    a7de:	4812      	ldr	r0, [pc, #72]	; (a828 <thread0+0x14c>)
    a7e0:	e793      	b.n	a70a <thread0+0x2e>
    a7e2:	bf00      	nop
    a7e4:	00017a14 	.word	0x00017a14
    a7e8:	00300060 	.word	0x00300060
    a7ec:	00017a2c 	.word	0x00017a2c
    a7f0:	0000a419 	.word	0x0000a419
    a7f4:	00017a4c 	.word	0x00017a4c
    a7f8:	000171e4 	.word	0x000171e4
    a7fc:	00017a6c 	.word	0x00017a6c
    a800:	200006a8 	.word	0x200006a8
    a804:	20002df5 	.word	0x20002df5
    a808:	00017a6a 	.word	0x00017a6a
    a80c:	20002e13 	.word	0x20002e13
    a810:	00017a86 	.word	0x00017a86
    a814:	00017abc 	.word	0x00017abc
    a818:	20002dec 	.word	0x20002dec
    a81c:	00017ae1 	.word	0x00017ae1
    a820:	00017acd 	.word	0x00017acd
    a824:	20002de4 	.word	0x20002de4
    a828:	00017a9b 	.word	0x00017a9b

0000a82c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    a82c:	4b01      	ldr	r3, [pc, #4]	; (a834 <char_out+0x8>)
    a82e:	681b      	ldr	r3, [r3, #0]
    a830:	4718      	bx	r3
    a832:	bf00      	nop
    a834:	200002f0 	.word	0x200002f0

0000a838 <__printk_hook_install>:
	_char_out = fn;
    a838:	4b01      	ldr	r3, [pc, #4]	; (a840 <__printk_hook_install+0x8>)
    a83a:	6018      	str	r0, [r3, #0]
}
    a83c:	4770      	bx	lr
    a83e:	bf00      	nop
    a840:	200002f0 	.word	0x200002f0

0000a844 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    a844:	b507      	push	{r0, r1, r2, lr}
    a846:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    a848:	2100      	movs	r1, #0
    a84a:	4602      	mov	r2, r0
    a84c:	9100      	str	r1, [sp, #0]
    a84e:	4803      	ldr	r0, [pc, #12]	; (a85c <vprintk+0x18>)
    a850:	f000 f914 	bl	aa7c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    a854:	b003      	add	sp, #12
    a856:	f85d fb04 	ldr.w	pc, [sp], #4
    a85a:	bf00      	nop
    a85c:	0000a82d 	.word	0x0000a82d

0000a860 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a864:	8b05      	ldrh	r5, [r0, #24]
{
    a866:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a868:	0728      	lsls	r0, r5, #28
{
    a86a:	4690      	mov	r8, r2
	if (processing) {
    a86c:	d411      	bmi.n	a892 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    a86e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a870:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    a874:	f040 80cd 	bne.w	aa12 <process_event+0x1b2>
			evt = process_recheck(mgr);
    a878:	4620      	mov	r0, r4
    a87a:	f00a fd21 	bl	152c0 <process_recheck>
		}

		if (evt == EVT_NOP) {
    a87e:	b178      	cbz	r0, a8a0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    a880:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a882:	8b21      	ldrh	r1, [r4, #24]
    a884:	2804      	cmp	r0, #4
    a886:	d811      	bhi.n	a8ac <process_event+0x4c>
    a888:	e8df f000 	tbb	[pc, r0]
    a88c:	856d10c3 	.word	0x856d10c3
    a890:	95          	.byte	0x95
    a891:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    a892:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a894:	bf0c      	ite	eq
    a896:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a89a:	f045 0520 	orrne.w	r5, r5, #32
    a89e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a8a0:	f388 8811 	msr	BASEPRI, r8
    a8a4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a8ac:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a8b0:	45aa      	cmp	sl, r5
    a8b2:	f000 80a6 	beq.w	aa02 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    a8b6:	2700      	movs	r7, #0
    a8b8:	46b9      	mov	r9, r7
    a8ba:	463e      	mov	r6, r7
    a8bc:	68a3      	ldr	r3, [r4, #8]
    a8be:	2b00      	cmp	r3, #0
    a8c0:	f000 80bd 	beq.w	aa3e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a8c4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a8c8:	8321      	strh	r1, [r4, #24]
    a8ca:	f388 8811 	msr	BASEPRI, r8
    a8ce:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a8d2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a8d4:	2900      	cmp	r1, #0
    a8d6:	f000 80bb 	beq.w	aa50 <process_event+0x1f0>
	return node->next;
    a8da:	680d      	ldr	r5, [r1, #0]
    a8dc:	2900      	cmp	r1, #0
    a8de:	f000 80b7 	beq.w	aa50 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    a8e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
    a8e6:	4633      	mov	r3, r6
    a8e8:	4652      	mov	r2, sl
    a8ea:	4620      	mov	r0, r4
    a8ec:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a8ee:	2d00      	cmp	r5, #0
    a8f0:	d076      	beq.n	a9e0 <process_event+0x180>
    a8f2:	682b      	ldr	r3, [r5, #0]
    a8f4:	4629      	mov	r1, r5
    a8f6:	461d      	mov	r5, r3
    a8f8:	e7f0      	b.n	a8dc <process_event+0x7c>
    a8fa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a8fe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a900:	2a01      	cmp	r2, #1
    a902:	d81b      	bhi.n	a93c <process_event+0xdc>
	list->head = NULL;
    a904:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a906:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    a90a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    a90c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a90e:	b289      	uxth	r1, r1
	list->tail = NULL;
    a910:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a914:	d109      	bne.n	a92a <process_event+0xca>
    a916:	463b      	mov	r3, r7
    a918:	e003      	b.n	a922 <process_event+0xc2>
				mgr->refs += 1U;
    a91a:	8b62      	ldrh	r2, [r4, #26]
    a91c:	3201      	adds	r2, #1
    a91e:	8362      	strh	r2, [r4, #26]
	return node->next;
    a920:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a922:	2b00      	cmp	r3, #0
    a924:	d1f9      	bne.n	a91a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a926:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    a92a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a92c:	4620      	mov	r0, r4
    a92e:	f00a fcc7 	bl	152c0 <process_recheck>
    a932:	2800      	cmp	r0, #0
    a934:	d07b      	beq.n	aa2e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a936:	f041 0120 	orr.w	r1, r1, #32
    a93a:	e077      	b.n	aa2c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a93c:	2b04      	cmp	r3, #4
    a93e:	d10a      	bne.n	a956 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a940:	f021 0107 	bic.w	r1, r1, #7
    a944:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a946:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    a948:	4620      	mov	r0, r4
    a94a:	f00a fcb9 	bl	152c0 <process_recheck>
    a94e:	b110      	cbz	r0, a956 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a950:	f041 0120 	orr.w	r1, r1, #32
    a954:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a956:	8b21      	ldrh	r1, [r4, #24]
    a958:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a95c:	45aa      	cmp	sl, r5
    a95e:	d050      	beq.n	aa02 <process_event+0x1a2>
    a960:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    a962:	46b9      	mov	r9, r7
    a964:	e7aa      	b.n	a8bc <process_event+0x5c>
			transit = mgr->transitions->start;
    a966:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a968:	f021 0107 	bic.w	r1, r1, #7
    a96c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    a970:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    a972:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a976:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a978:	d12d      	bne.n	a9d6 <process_event+0x176>
		    || (transit != NULL)) {
    a97a:	f1b9 0f00 	cmp.w	r9, #0
    a97e:	d040      	beq.n	aa02 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a980:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    a984:	8321      	strh	r1, [r4, #24]
    a986:	f388 8811 	msr	BASEPRI, r8
    a98a:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    a98e:	493a      	ldr	r1, [pc, #232]	; (aa78 <process_event+0x218>)
    a990:	4620      	mov	r0, r4
    a992:	47c8      	blx	r9
    a994:	e029      	b.n	a9ea <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a996:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    a99a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a99c:	f041 0104 	orr.w	r1, r1, #4
    a9a0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a9a2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    a9a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a9a8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a9aa:	d0e6      	beq.n	a97a <process_event+0x11a>
    a9ac:	2700      	movs	r7, #0
		res = 0;
    a9ae:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a9b0:	f04f 0a04 	mov.w	sl, #4
    a9b4:	e782      	b.n	a8bc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a9b6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    a9ba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a9bc:	f041 0105 	orr.w	r1, r1, #5
    a9c0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    a9c2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    a9c4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    a9c8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    a9ca:	d0d6      	beq.n	a97a <process_event+0x11a>
    a9cc:	2700      	movs	r7, #0
		res = 0;
    a9ce:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a9d0:	f04f 0a05 	mov.w	sl, #5
    a9d4:	e772      	b.n	a8bc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    a9d6:	2700      	movs	r7, #0
		res = 0;
    a9d8:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a9da:	f04f 0a06 	mov.w	sl, #6
    a9de:	e76d      	b.n	a8bc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a9e0:	462b      	mov	r3, r5
    a9e2:	e787      	b.n	a8f4 <process_event+0x94>
			if (transit != NULL) {
    a9e4:	f1b9 0f00 	cmp.w	r9, #0
    a9e8:	d1d1      	bne.n	a98e <process_event+0x12e>
	__asm__ volatile(
    a9ea:	f04f 0340 	mov.w	r3, #64	; 0x40
    a9ee:	f3ef 8811 	mrs	r8, BASEPRI
    a9f2:	f383 8812 	msr	BASEPRI_MAX, r3
    a9f6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a9fa:	8b23      	ldrh	r3, [r4, #24]
    a9fc:	f023 0308 	bic.w	r3, r3, #8
    aa00:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    aa02:	8b25      	ldrh	r5, [r4, #24]
    aa04:	06ea      	lsls	r2, r5, #27
    aa06:	d52e      	bpl.n	aa66 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    aa08:	f025 0310 	bic.w	r3, r5, #16
    aa0c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    aa0e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    aa12:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    aa14:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    aa16:	2e00      	cmp	r6, #0
    aa18:	f6bf af6f 	bge.w	a8fa <process_event+0x9a>
	list->head = NULL;
    aa1c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    aa1e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    aa20:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa24:	f021 0107 	bic.w	r1, r1, #7
    aa28:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aa2c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    aa2e:	8b21      	ldrh	r1, [r4, #24]
    aa30:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    aa34:	45aa      	cmp	sl, r5
    aa36:	f04f 0900 	mov.w	r9, #0
    aa3a:	f47f af3f 	bne.w	a8bc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    aa3e:	2f00      	cmp	r7, #0
    aa40:	d09b      	beq.n	a97a <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    aa42:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    aa46:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    aa48:	f388 8811 	msr	BASEPRI, r8
    aa4c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    aa50:	2f00      	cmp	r7, #0
    aa52:	d0c7      	beq.n	a9e4 <process_event+0x184>
	return node->next;
    aa54:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    aa56:	4639      	mov	r1, r7
    aa58:	4633      	mov	r3, r6
    aa5a:	4652      	mov	r2, sl
    aa5c:	4620      	mov	r0, r4
    aa5e:	f00a fc5b 	bl	15318 <notify_one>
	list->head = node;
    aa62:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    aa64:	e7f4      	b.n	aa50 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    aa66:	06ab      	lsls	r3, r5, #26
    aa68:	f57f af1a 	bpl.w	a8a0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    aa6c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    aa70:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    aa72:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    aa76:	e6ff      	b.n	a878 <process_event+0x18>
    aa78:	00015345 	.word	0x00015345

0000aa7c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    aa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa80:	4681      	mov	r9, r0
    aa82:	b095      	sub	sp, #84	; 0x54
    aa84:	468b      	mov	fp, r1
    aa86:	4617      	mov	r7, r2
    aa88:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    aa8a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    aa8c:	7838      	ldrb	r0, [r7, #0]
    aa8e:	b908      	cbnz	r0, aa94 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    aa90:	4628      	mov	r0, r5
    aa92:	e358      	b.n	b146 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    aa94:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    aa96:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    aa98:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    aa9a:	d006      	beq.n	aaaa <z_cbvprintf_impl+0x2e>
			OUTC('%');
    aa9c:	4659      	mov	r1, fp
    aa9e:	47c8      	blx	r9
    aaa0:	2800      	cmp	r0, #0
    aaa2:	f2c0 8350 	blt.w	b146 <z_cbvprintf_impl+0x6ca>
    aaa6:	3501      	adds	r5, #1
		if (bps == NULL) {
    aaa8:	e1fb      	b.n	aea2 <z_cbvprintf_impl+0x426>
		} state = {
    aaaa:	2218      	movs	r2, #24
    aaac:	2100      	movs	r1, #0
    aaae:	a80e      	add	r0, sp, #56	; 0x38
    aab0:	f00a fddf 	bl	15672 <memset>
	if (*sp == '%') {
    aab4:	787b      	ldrb	r3, [r7, #1]
    aab6:	2b25      	cmp	r3, #37	; 0x25
    aab8:	d07d      	beq.n	abb6 <z_cbvprintf_impl+0x13a>
    aaba:	2300      	movs	r3, #0
    aabc:	1c78      	adds	r0, r7, #1
    aabe:	4698      	mov	r8, r3
    aac0:	469e      	mov	lr, r3
    aac2:	469c      	mov	ip, r3
    aac4:	461e      	mov	r6, r3
    aac6:	4601      	mov	r1, r0
		switch (*sp) {
    aac8:	f810 2b01 	ldrb.w	r2, [r0], #1
    aacc:	2a2b      	cmp	r2, #43	; 0x2b
    aace:	f000 80a1 	beq.w	ac14 <z_cbvprintf_impl+0x198>
    aad2:	f200 8098 	bhi.w	ac06 <z_cbvprintf_impl+0x18a>
    aad6:	2a20      	cmp	r2, #32
    aad8:	f000 809f 	beq.w	ac1a <z_cbvprintf_impl+0x19e>
    aadc:	2a23      	cmp	r2, #35	; 0x23
    aade:	f000 809f 	beq.w	ac20 <z_cbvprintf_impl+0x1a4>
    aae2:	b12b      	cbz	r3, aaf0 <z_cbvprintf_impl+0x74>
    aae4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    aae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aaec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    aaf0:	f1b8 0f00 	cmp.w	r8, #0
    aaf4:	d005      	beq.n	ab02 <z_cbvprintf_impl+0x86>
    aaf6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    aafa:	f043 0320 	orr.w	r3, r3, #32
    aafe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    ab02:	f1be 0f00 	cmp.w	lr, #0
    ab06:	d005      	beq.n	ab14 <z_cbvprintf_impl+0x98>
    ab08:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ab0c:	f043 0310 	orr.w	r3, r3, #16
    ab10:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    ab14:	f1bc 0f00 	cmp.w	ip, #0
    ab18:	d005      	beq.n	ab26 <z_cbvprintf_impl+0xaa>
    ab1a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ab1e:	f043 0308 	orr.w	r3, r3, #8
    ab22:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    ab26:	b12e      	cbz	r6, ab34 <z_cbvprintf_impl+0xb8>
    ab28:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ab2c:	f043 0304 	orr.w	r3, r3, #4
    ab30:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    ab34:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ab38:	f003 0044 	and.w	r0, r3, #68	; 0x44
    ab3c:	2844      	cmp	r0, #68	; 0x44
    ab3e:	d103      	bne.n	ab48 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    ab40:	f36f 1386 	bfc	r3, #6, #1
    ab44:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    ab48:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    ab4c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    ab4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ab52:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    ab56:	d17f      	bne.n	ac58 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    ab58:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab5c:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    ab60:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    ab62:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    ab66:	781a      	ldrb	r2, [r3, #0]
    ab68:	2a2e      	cmp	r2, #46	; 0x2e
    ab6a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ab6e:	bf0c      	ite	eq
    ab70:	2101      	moveq	r1, #1
    ab72:	2100      	movne	r1, #0
    ab74:	f361 0241 	bfi	r2, r1, #1, #1
    ab78:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    ab7c:	d178      	bne.n	ac70 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    ab7e:	785a      	ldrb	r2, [r3, #1]
    ab80:	2a2a      	cmp	r2, #42	; 0x2a
    ab82:	d06e      	beq.n	ac62 <z_cbvprintf_impl+0x1e6>
	++sp;
    ab84:	3301      	adds	r3, #1
	size_t val = 0;
    ab86:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    ab88:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ab8c:	4619      	mov	r1, r3
    ab8e:	f811 0b01 	ldrb.w	r0, [r1], #1
    ab92:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    ab96:	2e09      	cmp	r6, #9
    ab98:	f240 8095 	bls.w	acc6 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    ab9c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    aba0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    aba2:	f3c1 0040 	ubfx	r0, r1, #1, #1
    aba6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    abaa:	460a      	mov	r2, r1
    abac:	f360 0241 	bfi	r2, r0, #1, #1
    abb0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    abb4:	e05c      	b.n	ac70 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    abb6:	1cba      	adds	r2, r7, #2
    abb8:	9203      	str	r2, [sp, #12]
    abba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    abbe:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    abc2:	07da      	lsls	r2, r3, #31
    abc4:	f140 812e 	bpl.w	ae24 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    abc8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    abcc:	f1b8 0f00 	cmp.w	r8, #0
    abd0:	da07      	bge.n	abe2 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    abd2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    abd6:	f042 0204 	orr.w	r2, r2, #4
    abda:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    abde:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    abe2:	075e      	lsls	r6, r3, #29
    abe4:	f140 8127 	bpl.w	ae36 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    abe8:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    abec:	f1ba 0f00 	cmp.w	sl, #0
    abf0:	f280 8126 	bge.w	ae40 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    abf4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    abf8:	f36f 0341 	bfc	r3, #1, #1
    abfc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    ac00:	f04f 3aff 	mov.w	sl, #4294967295
    ac04:	e11c      	b.n	ae40 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    ac06:	2a2d      	cmp	r2, #45	; 0x2d
    ac08:	d00d      	beq.n	ac26 <z_cbvprintf_impl+0x1aa>
    ac0a:	2a30      	cmp	r2, #48	; 0x30
    ac0c:	f47f af69 	bne.w	aae2 <z_cbvprintf_impl+0x66>
    ac10:	2301      	movs	r3, #1
	} while (loop);
    ac12:	e758      	b.n	aac6 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    ac14:	f04f 0c01 	mov.w	ip, #1
    ac18:	e755      	b.n	aac6 <z_cbvprintf_impl+0x4a>
    ac1a:	f04f 0e01 	mov.w	lr, #1
    ac1e:	e752      	b.n	aac6 <z_cbvprintf_impl+0x4a>
    ac20:	f04f 0801 	mov.w	r8, #1
    ac24:	e74f      	b.n	aac6 <z_cbvprintf_impl+0x4a>
    ac26:	2601      	movs	r6, #1
    ac28:	e74d      	b.n	aac6 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    ac2a:	fb0e 6202 	mla	r2, lr, r2, r6
    ac2e:	3a30      	subs	r2, #48	; 0x30
    ac30:	4603      	mov	r3, r0
    ac32:	4618      	mov	r0, r3
    ac34:	f810 6b01 	ldrb.w	r6, [r0], #1
    ac38:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    ac3c:	f1bc 0f09 	cmp.w	ip, #9
    ac40:	d9f3      	bls.n	ac2a <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    ac42:	4299      	cmp	r1, r3
    ac44:	d08f      	beq.n	ab66 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    ac46:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    ac4a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    ac4c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    ac4e:	f362 0141 	bfi	r1, r2, #1, #1
    ac52:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    ac56:	e786      	b.n	ab66 <z_cbvprintf_impl+0xea>
    ac58:	460b      	mov	r3, r1
	size_t val = 0;
    ac5a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    ac5c:	f04f 0e0a 	mov.w	lr, #10
    ac60:	e7e7      	b.n	ac32 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    ac62:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ac66:	f042 0204 	orr.w	r2, r2, #4
    ac6a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    ac6e:	3302      	adds	r3, #2
	switch (*sp) {
    ac70:	781a      	ldrb	r2, [r3, #0]
    ac72:	2a6c      	cmp	r2, #108	; 0x6c
    ac74:	d047      	beq.n	ad06 <z_cbvprintf_impl+0x28a>
    ac76:	d82b      	bhi.n	acd0 <z_cbvprintf_impl+0x254>
    ac78:	2a68      	cmp	r2, #104	; 0x68
    ac7a:	d031      	beq.n	ace0 <z_cbvprintf_impl+0x264>
    ac7c:	2a6a      	cmp	r2, #106	; 0x6a
    ac7e:	d04b      	beq.n	ad18 <z_cbvprintf_impl+0x29c>
    ac80:	2a4c      	cmp	r2, #76	; 0x4c
    ac82:	d051      	beq.n	ad28 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    ac84:	461a      	mov	r2, r3
    ac86:	f812 3b01 	ldrb.w	r3, [r2], #1
    ac8a:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    ac8c:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    ac8e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    ac92:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    ac96:	f200 80be 	bhi.w	ae16 <z_cbvprintf_impl+0x39a>
    ac9a:	2b6d      	cmp	r3, #109	; 0x6d
    ac9c:	d851      	bhi.n	ad42 <z_cbvprintf_impl+0x2c6>
    ac9e:	2b69      	cmp	r3, #105	; 0x69
    aca0:	f200 80b9 	bhi.w	ae16 <z_cbvprintf_impl+0x39a>
    aca4:	2b57      	cmp	r3, #87	; 0x57
    aca6:	d867      	bhi.n	ad78 <z_cbvprintf_impl+0x2fc>
    aca8:	2b41      	cmp	r3, #65	; 0x41
    acaa:	d003      	beq.n	acb4 <z_cbvprintf_impl+0x238>
    acac:	3b45      	subs	r3, #69	; 0x45
    acae:	2b02      	cmp	r3, #2
    acb0:	f200 80b1 	bhi.w	ae16 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    acb4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    acb8:	2204      	movs	r2, #4
    acba:	f362 0302 	bfi	r3, r2, #0, #3
    acbe:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    acc2:	2301      	movs	r3, #1
			break;
    acc4:	e073      	b.n	adae <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    acc6:	fb0c 0202 	mla	r2, ip, r2, r0
    acca:	3a30      	subs	r2, #48	; 0x30
    accc:	460b      	mov	r3, r1
    acce:	e75d      	b.n	ab8c <z_cbvprintf_impl+0x110>
	switch (*sp) {
    acd0:	2a74      	cmp	r2, #116	; 0x74
    acd2:	d025      	beq.n	ad20 <z_cbvprintf_impl+0x2a4>
    acd4:	2a7a      	cmp	r2, #122	; 0x7a
    acd6:	d1d5      	bne.n	ac84 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    acd8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    acdc:	2106      	movs	r1, #6
    acde:	e00c      	b.n	acfa <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    ace0:	785a      	ldrb	r2, [r3, #1]
    ace2:	2a68      	cmp	r2, #104	; 0x68
    ace4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ace8:	d106      	bne.n	acf8 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    acea:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    acec:	f361 02c6 	bfi	r2, r1, #3, #4
    acf0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    acf4:	3302      	adds	r3, #2
    acf6:	e7c5      	b.n	ac84 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    acf8:	2102      	movs	r1, #2
    acfa:	f361 02c6 	bfi	r2, r1, #3, #4
    acfe:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    ad02:	3301      	adds	r3, #1
    ad04:	e7be      	b.n	ac84 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    ad06:	785a      	ldrb	r2, [r3, #1]
    ad08:	2a6c      	cmp	r2, #108	; 0x6c
    ad0a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ad0e:	d101      	bne.n	ad14 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    ad10:	2104      	movs	r1, #4
    ad12:	e7eb      	b.n	acec <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    ad14:	2103      	movs	r1, #3
    ad16:	e7f0      	b.n	acfa <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    ad18:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ad1c:	2105      	movs	r1, #5
    ad1e:	e7ec      	b.n	acfa <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    ad20:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    ad24:	2107      	movs	r1, #7
    ad26:	e7e8      	b.n	acfa <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    ad28:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    ad2c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    ad30:	f022 0202 	bic.w	r2, r2, #2
    ad34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    ad38:	f042 0202 	orr.w	r2, r2, #2
    ad3c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    ad40:	e7df      	b.n	ad02 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    ad42:	3b6e      	subs	r3, #110	; 0x6e
    ad44:	b2d9      	uxtb	r1, r3
    ad46:	2301      	movs	r3, #1
    ad48:	408b      	lsls	r3, r1
    ad4a:	f240 4182 	movw	r1, #1154	; 0x482
    ad4e:	420b      	tst	r3, r1
    ad50:	d137      	bne.n	adc2 <z_cbvprintf_impl+0x346>
    ad52:	f013 0f24 	tst.w	r3, #36	; 0x24
    ad56:	d151      	bne.n	adfc <z_cbvprintf_impl+0x380>
    ad58:	07d8      	lsls	r0, r3, #31
    ad5a:	d55c      	bpl.n	ae16 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    ad5c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ad60:	2103      	movs	r1, #3
    ad62:	f361 0302 	bfi	r3, r1, #0, #3
    ad66:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    ad6a:	f002 0378 	and.w	r3, r2, #120	; 0x78
    ad6e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    ad72:	424b      	negs	r3, r1
    ad74:	414b      	adcs	r3, r1
    ad76:	e01a      	b.n	adae <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    ad78:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    ad7c:	b2c9      	uxtb	r1, r1
    ad7e:	2001      	movs	r0, #1
    ad80:	fa00 f101 	lsl.w	r1, r0, r1
    ad84:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    ad88:	d194      	bne.n	acb4 <z_cbvprintf_impl+0x238>
    ad8a:	f640 0601 	movw	r6, #2049	; 0x801
    ad8e:	4231      	tst	r1, r6
    ad90:	d11d      	bne.n	adce <z_cbvprintf_impl+0x352>
    ad92:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    ad96:	d03e      	beq.n	ae16 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    ad98:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ad9c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    ada0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    ada4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    ada6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    adaa:	d034      	beq.n	ae16 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    adac:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    adae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    adb2:	f3c2 0140 	ubfx	r1, r2, #1, #1
    adb6:	430b      	orrs	r3, r1
    adb8:	f363 0241 	bfi	r2, r3, #1, #1
    adbc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    adc0:	e6fd      	b.n	abbe <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    adc2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    adc6:	2102      	movs	r1, #2
    adc8:	f361 0302 	bfi	r3, r1, #0, #3
    adcc:	e7e8      	b.n	ada0 <z_cbvprintf_impl+0x324>
    adce:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    add2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    add4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    add8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    addc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    adde:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    ade2:	bf02      	ittt	eq
    ade4:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    ade8:	f041 0101 	orreq.w	r1, r1, #1
    adec:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    adf0:	2b63      	cmp	r3, #99	; 0x63
    adf2:	d1db      	bne.n	adac <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    adf4:	1e13      	subs	r3, r2, #0
    adf6:	bf18      	it	ne
    adf8:	2301      	movne	r3, #1
    adfa:	e7d8      	b.n	adae <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    adfc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    ae00:	2103      	movs	r1, #3
    ae02:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    ae06:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    ae0a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    ae0e:	bf14      	ite	ne
    ae10:	2301      	movne	r3, #1
    ae12:	2300      	moveq	r3, #0
    ae14:	e7cb      	b.n	adae <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    ae16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ae1a:	f043 0301 	orr.w	r3, r3, #1
    ae1e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    ae22:	e7c3      	b.n	adac <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    ae24:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    ae28:	2a00      	cmp	r2, #0
			width = conv->width_value;
    ae2a:	bfb4      	ite	lt
    ae2c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    ae30:	f04f 38ff 	movge.w	r8, #4294967295
    ae34:	e6d5      	b.n	abe2 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    ae36:	0798      	lsls	r0, r3, #30
    ae38:	f57f aee2 	bpl.w	ac00 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    ae3c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    ae40:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    ae44:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    ae46:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    ae4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    ae4e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    ae52:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    ae54:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    ae58:	d133      	bne.n	aec2 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    ae5a:	1ecb      	subs	r3, r1, #3
    ae5c:	2b04      	cmp	r3, #4
    ae5e:	d804      	bhi.n	ae6a <z_cbvprintf_impl+0x3ee>
    ae60:	e8df f003 	tbb	[pc, r3]
    ae64:	21464621 	.word	0x21464621
    ae68:	21          	.byte	0x21
    ae69:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    ae6a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    ae6c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    ae6e:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ae72:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    ae76:	d11c      	bne.n	aeb2 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    ae78:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    ae7c:	17da      	asrs	r2, r3, #31
    ae7e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    ae82:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    ae84:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    ae88:	f013 0603 	ands.w	r6, r3, #3
    ae8c:	d050      	beq.n	af30 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    ae8e:	9b03      	ldr	r3, [sp, #12]
    ae90:	463a      	mov	r2, r7
    ae92:	4659      	mov	r1, fp
    ae94:	4648      	mov	r0, r9
    ae96:	f00a fb66 	bl	15566 <outs>
    ae9a:	2800      	cmp	r0, #0
    ae9c:	f2c0 8153 	blt.w	b146 <z_cbvprintf_impl+0x6ca>
    aea0:	4405      	add	r5, r0
			continue;
    aea2:	9f03      	ldr	r7, [sp, #12]
    aea4:	e5f2      	b.n	aa8c <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    aea6:	f854 3b04 	ldr.w	r3, [r4], #4
    aeaa:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    aeac:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    aeb0:	e7e8      	b.n	ae84 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    aeb2:	2902      	cmp	r1, #2
    aeb4:	d1e5      	bne.n	ae82 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    aeb6:	b21a      	sxth	r2, r3
    aeb8:	f343 33c0 	sbfx	r3, r3, #15, #1
    aebc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    aec0:	e7df      	b.n	ae82 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    aec2:	2b02      	cmp	r3, #2
    aec4:	d124      	bne.n	af10 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    aec6:	1ecb      	subs	r3, r1, #3
    aec8:	2b04      	cmp	r3, #4
    aeca:	d804      	bhi.n	aed6 <z_cbvprintf_impl+0x45a>
    aecc:	e8df f003 	tbb	[pc, r3]
    aed0:	18101018 	.word	0x18101018
    aed4:	18          	.byte	0x18
    aed5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    aed6:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    aed8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    aedc:	f04f 0200 	mov.w	r2, #0
    aee0:	d014      	beq.n	af0c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    aee2:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    aee4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    aee8:	d1cc      	bne.n	ae84 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    aeea:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    aeec:	930e      	str	r3, [sp, #56]	; 0x38
    aeee:	e7c9      	b.n	ae84 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    aef0:	3407      	adds	r4, #7
    aef2:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    aef6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    aefa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    aefe:	e7c1      	b.n	ae84 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    af00:	f854 3b04 	ldr.w	r3, [r4], #4
    af04:	930e      	str	r3, [sp, #56]	; 0x38
    af06:	2300      	movs	r3, #0
    af08:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    af0a:	e7bb      	b.n	ae84 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    af0c:	b2db      	uxtb	r3, r3
    af0e:	e7cd      	b.n	aeac <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    af10:	2b04      	cmp	r3, #4
    af12:	d108      	bne.n	af26 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    af14:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    af16:	f024 0407 	bic.w	r4, r4, #7
    af1a:	e9d4 2300 	ldrd	r2, r3, [r4]
    af1e:	3408      	adds	r4, #8
    af20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    af24:	e7ae      	b.n	ae84 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    af26:	2b03      	cmp	r3, #3
    af28:	d1ac      	bne.n	ae84 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    af2a:	f854 3b04 	ldr.w	r3, [r4], #4
    af2e:	e7dd      	b.n	aeec <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    af30:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    af34:	2878      	cmp	r0, #120	; 0x78
    af36:	d8b4      	bhi.n	aea2 <z_cbvprintf_impl+0x426>
    af38:	2862      	cmp	r0, #98	; 0x62
    af3a:	d81c      	bhi.n	af76 <z_cbvprintf_impl+0x4fa>
    af3c:	2825      	cmp	r0, #37	; 0x25
    af3e:	f43f adad 	beq.w	aa9c <z_cbvprintf_impl+0x20>
    af42:	2858      	cmp	r0, #88	; 0x58
    af44:	d1ad      	bne.n	aea2 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    af46:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    af4a:	9300      	str	r3, [sp, #0]
    af4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    af50:	ab08      	add	r3, sp, #32
    af52:	aa10      	add	r2, sp, #64	; 0x40
    af54:	f00a fac1 	bl	154da <encode_uint>
			if (precision >= 0) {
    af58:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    af5c:	4607      	mov	r7, r0
			if (precision >= 0) {
    af5e:	f280 809a 	bge.w	b096 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    af62:	2f00      	cmp	r7, #0
    af64:	d09d      	beq.n	aea2 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    af66:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    af6a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    af6c:	2e00      	cmp	r6, #0
    af6e:	f000 80c1 	beq.w	b0f4 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    af72:	3001      	adds	r0, #1
    af74:	e0be      	b.n	b0f4 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    af76:	3863      	subs	r0, #99	; 0x63
    af78:	2815      	cmp	r0, #21
    af7a:	d892      	bhi.n	aea2 <z_cbvprintf_impl+0x426>
    af7c:	a201      	add	r2, pc, #4	; (adr r2, af84 <z_cbvprintf_impl+0x508>)
    af7e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    af82:	bf00      	nop
    af84:	0000b059 	.word	0x0000b059
    af88:	0000b06b 	.word	0x0000b06b
    af8c:	0000aea3 	.word	0x0000aea3
    af90:	0000aea3 	.word	0x0000aea3
    af94:	0000aea3 	.word	0x0000aea3
    af98:	0000aea3 	.word	0x0000aea3
    af9c:	0000b06b 	.word	0x0000b06b
    afa0:	0000aea3 	.word	0x0000aea3
    afa4:	0000aea3 	.word	0x0000aea3
    afa8:	0000aea3 	.word	0x0000aea3
    afac:	0000aea3 	.word	0x0000aea3
    afb0:	0000b0f9 	.word	0x0000b0f9
    afb4:	0000b091 	.word	0x0000b091
    afb8:	0000b0b7 	.word	0x0000b0b7
    afbc:	0000aea3 	.word	0x0000aea3
    afc0:	0000aea3 	.word	0x0000aea3
    afc4:	0000afdd 	.word	0x0000afdd
    afc8:	0000aea3 	.word	0x0000aea3
    afcc:	0000b091 	.word	0x0000b091
    afd0:	0000aea3 	.word	0x0000aea3
    afd4:	0000aea3 	.word	0x0000aea3
    afd8:	0000b091 	.word	0x0000b091
			if (precision >= 0) {
    afdc:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    afe0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    afe2:	db35      	blt.n	b050 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    afe4:	4651      	mov	r1, sl
    afe6:	4638      	mov	r0, r7
    afe8:	f00a fb08 	bl	155fc <strnlen>
			bpe = bps + len;
    afec:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    aff0:	2f00      	cmp	r7, #0
    aff2:	f43f af56 	beq.w	aea2 <z_cbvprintf_impl+0x426>
		char sign = 0;
    aff6:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    aff8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    affc:	f013 0210 	ands.w	r2, r3, #16
    b000:	9205      	str	r2, [sp, #20]
    b002:	f000 8093 	beq.w	b12c <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    b006:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    b008:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    b00a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    b00c:	bf48      	it	mi
    b00e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    b010:	9204      	str	r2, [sp, #16]
    b012:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    b014:	bf48      	it	mi
    b016:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    b018:	f1b8 0f00 	cmp.w	r8, #0
    b01c:	f340 80a0 	ble.w	b160 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    b020:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    b024:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    b028:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b02c:	0750      	lsls	r0, r2, #29
    b02e:	9306      	str	r3, [sp, #24]
    b030:	f100 8096 	bmi.w	b160 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    b034:	0651      	lsls	r1, r2, #25
    b036:	f140 8089 	bpl.w	b14c <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    b03a:	b13e      	cbz	r6, b04c <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    b03c:	4659      	mov	r1, fp
    b03e:	4630      	mov	r0, r6
    b040:	47c8      	blx	r9
    b042:	2800      	cmp	r0, #0
    b044:	db7f      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b046:	9b06      	ldr	r3, [sp, #24]
    b048:	3501      	adds	r5, #1
    b04a:	461e      	mov	r6, r3
					pad = '0';
    b04c:	2230      	movs	r2, #48	; 0x30
    b04e:	e07e      	b.n	b14e <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    b050:	4638      	mov	r0, r7
    b052:	f00a facc 	bl	155ee <strlen>
    b056:	e7c9      	b.n	afec <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b05a:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    b05e:	2600      	movs	r6, #0
			bps = buf;
    b060:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    b062:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    b066:	2001      	movs	r0, #1
    b068:	e7c6      	b.n	aff8 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    b06a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    b06c:	bf5c      	itt	pl
    b06e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    b072:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    b074:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    b078:	bf48      	it	mi
    b07a:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    b07c:	2b00      	cmp	r3, #0
    b07e:	f6bf af62 	bge.w	af46 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    b082:	4252      	negs	r2, r2
    b084:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b088:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    b08c:	262d      	movs	r6, #45	; 0x2d
    b08e:	e75a      	b.n	af46 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    b090:	2600      	movs	r6, #0
    b092:	e758      	b.n	af46 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    b094:	2600      	movs	r6, #0
				conv->flag_zero = false;
    b096:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    b09a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b09e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    b0a0:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b0a4:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    b0a6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    b0aa:	f67f af5a 	bls.w	af62 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    b0ae:	ebaa 0303 	sub.w	r3, sl, r3
    b0b2:	9311      	str	r3, [sp, #68]	; 0x44
    b0b4:	e755      	b.n	af62 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    b0b6:	980e      	ldr	r0, [sp, #56]	; 0x38
    b0b8:	b390      	cbz	r0, b120 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b0ba:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b0be:	9300      	str	r3, [sp, #0]
    b0c0:	aa10      	add	r2, sp, #64	; 0x40
    b0c2:	ab08      	add	r3, sp, #32
    b0c4:	2100      	movs	r1, #0
    b0c6:	f00a fa08 	bl	154da <encode_uint>
				conv->altform_0c = true;
    b0ca:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    b0ce:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b0d2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b0d6:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    b0da:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b0de:	4607      	mov	r7, r0
				conv->altform_0c = true;
    b0e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    b0e4:	dad6      	bge.n	b094 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    b0e6:	2800      	cmp	r0, #0
    b0e8:	f43f aedb 	beq.w	aea2 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    b0ec:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    b0f0:	1a18      	subs	r0, r3, r0
		char sign = 0;
    b0f2:	2600      	movs	r6, #0
    b0f4:	469a      	mov	sl, r3
    b0f6:	e77f      	b.n	aff8 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    b0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    b0fa:	2907      	cmp	r1, #7
    b0fc:	f63f aed1 	bhi.w	aea2 <z_cbvprintf_impl+0x426>
    b100:	e8df f001 	tbb	[pc, r1]
    b104:	0c06040c 	.word	0x0c06040c
    b108:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    b10c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    b10e:	e6c8      	b.n	aea2 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    b110:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    b112:	e6c6      	b.n	aea2 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    b114:	17ea      	asrs	r2, r5, #31
    b116:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    b11a:	e6c2      	b.n	aea2 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b11c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    b11e:	e6c0      	b.n	aea2 <z_cbvprintf_impl+0x426>
    b120:	4f2e      	ldr	r7, [pc, #184]	; (b1dc <z_cbvprintf_impl+0x760>)
		char sign = 0;
    b122:	4606      	mov	r6, r0
			bpe = bps + 5;
    b124:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    b128:	2005      	movs	r0, #5
    b12a:	e765      	b.n	aff8 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    b12c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    b12e:	bf48      	it	mi
    b130:	3001      	addmi	r0, #1
    b132:	e769      	b.n	b008 <z_cbvprintf_impl+0x58c>
    b134:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    b136:	4610      	mov	r0, r2
    b138:	9206      	str	r2, [sp, #24]
    b13a:	4659      	mov	r1, fp
    b13c:	47c8      	blx	r9
    b13e:	2800      	cmp	r0, #0
    b140:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    b144:	da04      	bge.n	b150 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    b146:	b015      	add	sp, #84	; 0x54
    b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b14c:	2220      	movs	r2, #32
					pad = '0';
    b14e:	4643      	mov	r3, r8
				while (width-- > 0) {
    b150:	4619      	mov	r1, r3
    b152:	2900      	cmp	r1, #0
    b154:	f103 33ff 	add.w	r3, r3, #4294967295
    b158:	dcec      	bgt.n	b134 <z_cbvprintf_impl+0x6b8>
    b15a:	4445      	add	r5, r8
    b15c:	1a6d      	subs	r5, r5, r1
    b15e:	4698      	mov	r8, r3
		if (sign != 0) {
    b160:	b12e      	cbz	r6, b16e <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    b162:	4659      	mov	r1, fp
    b164:	4630      	mov	r0, r6
    b166:	47c8      	blx	r9
    b168:	2800      	cmp	r0, #0
    b16a:	dbec      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b16c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b16e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    b172:	06da      	lsls	r2, r3, #27
    b174:	d401      	bmi.n	b17a <z_cbvprintf_impl+0x6fe>
    b176:	071b      	lsls	r3, r3, #28
    b178:	d505      	bpl.n	b186 <z_cbvprintf_impl+0x70a>
				OUTC('0');
    b17a:	4659      	mov	r1, fp
    b17c:	2030      	movs	r0, #48	; 0x30
    b17e:	47c8      	blx	r9
    b180:	2800      	cmp	r0, #0
    b182:	dbe0      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b184:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b186:	9b05      	ldr	r3, [sp, #20]
    b188:	b133      	cbz	r3, b198 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    b18a:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    b18e:	4659      	mov	r1, fp
    b190:	47c8      	blx	r9
    b192:	2800      	cmp	r0, #0
    b194:	dbd7      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b196:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b198:	9e04      	ldr	r6, [sp, #16]
    b19a:	442e      	add	r6, r5
    b19c:	e005      	b.n	b1aa <z_cbvprintf_impl+0x72e>
				OUTC('0');
    b19e:	4659      	mov	r1, fp
    b1a0:	2030      	movs	r0, #48	; 0x30
    b1a2:	47c8      	blx	r9
    b1a4:	2800      	cmp	r0, #0
    b1a6:	dbce      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b1a8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b1aa:	1b73      	subs	r3, r6, r5
    b1ac:	2b00      	cmp	r3, #0
    b1ae:	dcf6      	bgt.n	b19e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    b1b0:	4653      	mov	r3, sl
    b1b2:	463a      	mov	r2, r7
    b1b4:	4659      	mov	r1, fp
    b1b6:	4648      	mov	r0, r9
    b1b8:	f00a f9d5 	bl	15566 <outs>
    b1bc:	2800      	cmp	r0, #0
    b1be:	dbc2      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b1c0:	4405      	add	r5, r0
		while (width > 0) {
    b1c2:	44a8      	add	r8, r5
    b1c4:	eba8 0305 	sub.w	r3, r8, r5
    b1c8:	2b00      	cmp	r3, #0
    b1ca:	f77f ae6a 	ble.w	aea2 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    b1ce:	4659      	mov	r1, fp
    b1d0:	2020      	movs	r0, #32
    b1d2:	47c8      	blx	r9
    b1d4:	2800      	cmp	r0, #0
    b1d6:	dbb6      	blt.n	b146 <z_cbvprintf_impl+0x6ca>
    b1d8:	3501      	adds	r5, #1
			--width;
    b1da:	e7f3      	b.n	b1c4 <z_cbvprintf_impl+0x748>
    b1dc:	00017b12 	.word	0x00017b12

0000b1e0 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    b1e0:	b508      	push	{r3, lr}
    b1e2:	4604      	mov	r4, r0
	__asm__ volatile(
    b1e4:	f04f 0240 	mov.w	r2, #64	; 0x40
    b1e8:	f3ef 8311 	mrs	r3, BASEPRI
    b1ec:	f382 8812 	msr	BASEPRI_MAX, r2
    b1f0:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    b1f4:	f003 ffa2 	bl	f13c <sys_clock_disable>
	}

	sys_arch_reboot(type);
    b1f8:	4620      	mov	r0, r4
    b1fa:	f000 fe6f 	bl	bedc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    b1fe:	4803      	ldr	r0, [pc, #12]	; (b20c <sys_reboot+0x2c>)
    b200:	f009 fe82 	bl	14f08 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    b204:	f000 fa30 	bl	b668 <arch_cpu_idle>
    b208:	e7fc      	b.n	b204 <sys_reboot+0x24>
    b20a:	bf00      	nop
    b20c:	00017b18 	.word	0x00017b18

0000b210 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b210:	f004 bc5a 	b.w	fac8 <SystemInit>

0000b214 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b218:	4605      	mov	r5, r0
    b21a:	f04f 0340 	mov.w	r3, #64	; 0x40
    b21e:	f3ef 8611 	mrs	r6, BASEPRI
    b222:	f383 8812 	msr	BASEPRI_MAX, r3
    b226:	f3bf 8f6f 	isb	sy
	return list->head;
    b22a:	4b0e      	ldr	r3, [pc, #56]	; (b264 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b22c:	4f0e      	ldr	r7, [pc, #56]	; (b268 <pm_state_notify+0x54>)
    b22e:	681c      	ldr	r4, [r3, #0]
    b230:	f8df 8038 	ldr.w	r8, [pc, #56]	; b26c <pm_state_notify+0x58>
    b234:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    b238:	b92c      	cbnz	r4, b246 <pm_state_notify+0x32>
	__asm__ volatile(
    b23a:	f386 8811 	msr	BASEPRI, r6
    b23e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    b242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    b246:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    b24a:	2d00      	cmp	r5, #0
    b24c:	bf18      	it	ne
    b24e:	4613      	movne	r3, r2
		if (callback) {
    b250:	b12b      	cbz	r3, b25e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    b252:	f898 2010 	ldrb.w	r2, [r8, #16]
    b256:	fb09 f202 	mul.w	r2, r9, r2
    b25a:	5cb8      	ldrb	r0, [r7, r2]
    b25c:	4798      	blx	r3
	return node->next;
    b25e:	6824      	ldr	r4, [r4, #0]
    b260:	e7ea      	b.n	b238 <pm_state_notify+0x24>
    b262:	bf00      	nop
    b264:	20001b50 	.word	0x20001b50
    b268:	20001b44 	.word	0x20001b44
    b26c:	200022e0 	.word	0x200022e0

0000b270 <pm_system_resume>:

void pm_system_resume(void)
{
    b270:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    b272:	4b19      	ldr	r3, [pc, #100]	; (b2d8 <pm_system_resume+0x68>)
    b274:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b276:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b27a:	f004 031f 	and.w	r3, r4, #31
    b27e:	2201      	movs	r2, #1
    b280:	409a      	lsls	r2, r3
    b282:	4b16      	ldr	r3, [pc, #88]	; (b2dc <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b284:	0961      	lsrs	r1, r4, #5
    b286:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b28a:	43d0      	mvns	r0, r2
    b28c:	e853 1f00 	ldrex	r1, [r3]
    b290:	ea01 0500 	and.w	r5, r1, r0
    b294:	e843 5600 	strex	r6, r5, [r3]
    b298:	2e00      	cmp	r6, #0
    b29a:	d1f7      	bne.n	b28c <pm_system_resume+0x1c>
    b29c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    b2a0:	420a      	tst	r2, r1
    b2a2:	d013      	beq.n	b2cc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    b2a4:	4b0e      	ldr	r3, [pc, #56]	; (b2e0 <pm_system_resume+0x70>)
    b2a6:	4d0f      	ldr	r5, [pc, #60]	; (b2e4 <pm_system_resume+0x74>)
    b2a8:	b18b      	cbz	r3, b2ce <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    b2aa:	230c      	movs	r3, #12
    b2ac:	4363      	muls	r3, r4
    b2ae:	18ea      	adds	r2, r5, r3
    b2b0:	5ce8      	ldrb	r0, [r5, r3]
    b2b2:	7851      	ldrb	r1, [r2, #1]
    b2b4:	f00a f9f5 	bl	156a2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    b2b8:	2000      	movs	r0, #0
    b2ba:	f7ff ffab 	bl	b214 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    b2be:	230c      	movs	r3, #12
    b2c0:	435c      	muls	r4, r3
    b2c2:	192a      	adds	r2, r5, r4
    b2c4:	2300      	movs	r3, #0
    b2c6:	512b      	str	r3, [r5, r4]
    b2c8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    b2cc:	bd70      	pop	{r4, r5, r6, pc}
    b2ce:	f383 8811 	msr	BASEPRI, r3
    b2d2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b2d6:	e7ef      	b.n	b2b8 <pm_system_resume+0x48>
    b2d8:	200022e0 	.word	0x200022e0
    b2dc:	20001b58 	.word	0x20001b58
    b2e0:	000156a3 	.word	0x000156a3
    b2e4:	20001b44 	.word	0x20001b44

0000b2e8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    b2ec:	4b35      	ldr	r3, [pc, #212]	; (b3c4 <pm_system_suspend+0xdc>)
{
    b2ee:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    b2f0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    b2f2:	f04f 0340 	mov.w	r3, #64	; 0x40
    b2f6:	f3ef 8811 	mrs	r8, BASEPRI
    b2fa:	f383 8812 	msr	BASEPRI_MAX, r3
    b2fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    b302:	240c      	movs	r4, #12
    b304:	4b30      	ldr	r3, [pc, #192]	; (b3c8 <pm_system_suspend+0xe0>)
    b306:	4e31      	ldr	r6, [pc, #196]	; (b3cc <pm_system_suspend+0xe4>)
    b308:	436c      	muls	r4, r5
    b30a:	191a      	adds	r2, r3, r4
    b30c:	5d19      	ldrb	r1, [r3, r4]
    b30e:	2900      	cmp	r1, #0
    b310:	d04c      	beq.n	b3ac <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    b312:	ca07      	ldmia	r2, {r0, r1, r2}
    b314:	eb06 0c04 	add.w	ip, r6, r4
    b318:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    b31c:	2200      	movs	r2, #0
    b31e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    b320:	f388 8811 	msr	BASEPRI, r8
    b324:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    b328:	230c      	movs	r3, #12
    b32a:	436b      	muls	r3, r5
    b32c:	18f2      	adds	r2, r6, r3
    b32e:	5cf0      	ldrb	r0, [r6, r3]
    b330:	2800      	cmp	r0, #0
    b332:	d039      	beq.n	b3a8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    b334:	1c7b      	adds	r3, r7, #1
    b336:	d010      	beq.n	b35a <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    b338:	f8d2 c008 	ldr.w	ip, [r2, #8]
    b33c:	4c24      	ldr	r4, [pc, #144]	; (b3d0 <pm_system_suspend+0xe8>)
    b33e:	4a25      	ldr	r2, [pc, #148]	; (b3d4 <pm_system_suspend+0xec>)
    b340:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    b344:	2100      	movs	r1, #0
    b346:	fbec 4100 	umlal	r4, r1, ip, r0
    b34a:	2300      	movs	r3, #0
    b34c:	4620      	mov	r0, r4
    b34e:	f7f4 fed7 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    b352:	2101      	movs	r1, #1
    b354:	1a38      	subs	r0, r7, r0
    b356:	f003 feb5 	bl	f0c4 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    b35a:	f006 fdff 	bl	11f5c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    b35e:	2001      	movs	r0, #1
    b360:	f7ff ff58 	bl	b214 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b364:	f3bf 8f5b 	dmb	ish
    b368:	4b1b      	ldr	r3, [pc, #108]	; (b3d8 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b36a:	096a      	lsrs	r2, r5, #5
    b36c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    b370:	f005 011f 	and.w	r1, r5, #31
    b374:	2201      	movs	r2, #1
    b376:	408a      	lsls	r2, r1
    b378:	e853 0f00 	ldrex	r0, [r3]
    b37c:	4310      	orrs	r0, r2
    b37e:	e843 0100 	strex	r1, r0, [r3]
    b382:	2900      	cmp	r1, #0
    b384:	d1f8      	bne.n	b378 <pm_system_suspend+0x90>
    b386:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    b38a:	4b14      	ldr	r3, [pc, #80]	; (b3dc <pm_system_suspend+0xf4>)
    b38c:	b13b      	cbz	r3, b39e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    b38e:	230c      	movs	r3, #12
    b390:	fb03 f005 	mul.w	r0, r3, r5
    b394:	1833      	adds	r3, r6, r0
    b396:	5c30      	ldrb	r0, [r6, r0]
    b398:	7859      	ldrb	r1, [r3, #1]
    b39a:	f00a f976 	bl	1568a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    b39e:	f7ff ff67 	bl	b270 <pm_system_resume>
	k_sched_unlock();
    b3a2:	f006 fdef 	bl	11f84 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    b3a6:	2001      	movs	r0, #1
}
    b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    b3ac:	4601      	mov	r1, r0
    b3ae:	4628      	mov	r0, r5
    b3b0:	f000 f816 	bl	b3e0 <pm_policy_next_state>
		if (info != NULL) {
    b3b4:	2800      	cmp	r0, #0
    b3b6:	d0b3      	beq.n	b320 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    b3b8:	c807      	ldmia	r0, {r0, r1, r2}
    b3ba:	4434      	add	r4, r6
    b3bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    b3c0:	e7ae      	b.n	b320 <pm_system_suspend+0x38>
    b3c2:	bf00      	nop
    b3c4:	200022e0 	.word	0x200022e0
    b3c8:	20001b38 	.word	0x20001b38
    b3cc:	20001b44 	.word	0x20001b44
    b3d0:	000f423f 	.word	0x000f423f
    b3d4:	000f4240 	.word	0x000f4240
    b3d8:	20001b58 	.word	0x20001b58
    b3dc:	0001568b 	.word	0x0001568b

0000b3e0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3e4:	b085      	sub	sp, #20
    b3e6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b3e8:	a903      	add	r1, sp, #12
    b3ea:	f000 f843 	bl	b474 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b3ee:	4b1e      	ldr	r3, [pc, #120]	; (b468 <pm_policy_next_state+0x88>)
    b3f0:	9d03      	ldr	r5, [sp, #12]
    b3f2:	f8d3 a000 	ldr.w	sl, [r3]
    b3f6:	f8df 8074 	ldr.w	r8, [pc, #116]	; b46c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b3fa:	1e43      	subs	r3, r0, #1
    b3fc:	b21b      	sxth	r3, r3
    b3fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    b402:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b404:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    b408:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    b40c:	f04f 0b00 	mov.w	fp, #0
    b410:	b924      	cbnz	r4, b41c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    b412:	46a1      	mov	r9, r4
}
    b414:	4648      	mov	r0, r9
    b416:	b005      	add	sp, #20
    b418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b41c:	6868      	ldr	r0, [r5, #4]
    b41e:	4a14      	ldr	r2, [pc, #80]	; (b470 <pm_policy_next_state+0x90>)
    b420:	46c4      	mov	ip, r8
    b422:	4659      	mov	r1, fp
    b424:	fbe0 c107 	umlal	ip, r1, r0, r7
    b428:	2300      	movs	r3, #0
    b42a:	4660      	mov	r0, ip
    b42c:	f7f4 fe68 	bl	100 <__aeabi_uldivmod>
    b430:	9001      	str	r0, [sp, #4]
    b432:	68a8      	ldr	r0, [r5, #8]
    b434:	4a0e      	ldr	r2, [pc, #56]	; (b470 <pm_policy_next_state+0x90>)
    b436:	46c4      	mov	ip, r8
    b438:	4659      	mov	r1, fp
    b43a:	fbe0 c107 	umlal	ip, r1, r0, r7
    b43e:	2300      	movs	r3, #0
    b440:	4660      	mov	r0, ip
    b442:	f7f4 fe5d 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b446:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    b44a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    b44c:	d001      	beq.n	b452 <pm_policy_next_state+0x72>
    b44e:	4582      	cmp	sl, r0
    b450:	d905      	bls.n	b45e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    b452:	1c73      	adds	r3, r6, #1
    b454:	d0de      	beq.n	b414 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    b456:	9b01      	ldr	r3, [sp, #4]
    b458:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    b45a:	42b0      	cmp	r0, r6
    b45c:	d9da      	bls.n	b414 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    b45e:	3c01      	subs	r4, #1
    b460:	b2a4      	uxth	r4, r4
    b462:	3d0c      	subs	r5, #12
    b464:	e7d4      	b.n	b410 <pm_policy_next_state+0x30>
    b466:	bf00      	nop
    b468:	200002f4 	.word	0x200002f4
    b46c:	000f423f 	.word	0x000f423f
    b470:	000f4240 	.word	0x000f4240

0000b474 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    b474:	b908      	cbnz	r0, b47a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    b476:	4b02      	ldr	r3, [pc, #8]	; (b480 <pm_state_cpu_get_all+0xc>)
    b478:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    b47a:	2000      	movs	r0, #0
    b47c:	4770      	bx	lr
    b47e:	bf00      	nop
    b480:	000174e8 	.word	0x000174e8

0000b484 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    b484:	4801      	ldr	r0, [pc, #4]	; (b48c <nrf_cc3xx_platform_abort_init+0x8>)
    b486:	f007 b93b 	b.w	12700 <nrf_cc3xx_platform_set_abort>
    b48a:	bf00      	nop
    b48c:	000174e8 	.word	0x000174e8

0000b490 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b490:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    b492:	4604      	mov	r4, r0
    b494:	b918      	cbnz	r0, b49e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    b496:	4b0f      	ldr	r3, [pc, #60]	; (b4d4 <mutex_free_platform+0x44>)
    b498:	480f      	ldr	r0, [pc, #60]	; (b4d8 <mutex_free_platform+0x48>)
    b49a:	685b      	ldr	r3, [r3, #4]
    b49c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    b49e:	6861      	ldr	r1, [r4, #4]
    b4a0:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    b4a4:	d00f      	beq.n	b4c6 <mutex_free_platform+0x36>
    b4a6:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    b4aa:	d00c      	beq.n	b4c6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    b4ac:	4d0b      	ldr	r5, [pc, #44]	; (b4dc <mutex_free_platform+0x4c>)
    b4ae:	42a9      	cmp	r1, r5
    b4b0:	d009      	beq.n	b4c6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    b4b2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    b4b6:	d007      	beq.n	b4c8 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    b4b8:	4809      	ldr	r0, [pc, #36]	; (b4e0 <mutex_free_platform+0x50>)
    b4ba:	4621      	mov	r1, r4
    b4bc:	f00b f9db 	bl	16876 <k_mem_slab_free>
        mutex->mutex = NULL;
    b4c0:	2300      	movs	r3, #0
    b4c2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    b4c4:	6065      	str	r5, [r4, #4]
}
    b4c6:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    b4c8:	6820      	ldr	r0, [r4, #0]
    b4ca:	2214      	movs	r2, #20
    b4cc:	f00a f8d1 	bl	15672 <memset>
    b4d0:	e7f8      	b.n	b4c4 <mutex_free_platform+0x34>
    b4d2:	bf00      	nop
    b4d4:	200005a0 	.word	0x200005a0
    b4d8:	00017b44 	.word	0x00017b44
    b4dc:	a95c5f2c 	.word	0xa95c5f2c
    b4e0:	2000205c 	.word	0x2000205c

0000b4e4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b4e4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    b4e6:	b320      	cbz	r0, b532 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    b4e8:	6843      	ldr	r3, [r0, #4]
    b4ea:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    b4ee:	d110      	bne.n	b512 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b4f0:	2201      	movs	r2, #1
    b4f2:	6803      	ldr	r3, [r0, #0]
    b4f4:	f3bf 8f5b 	dmb	ish
    b4f8:	e853 1f00 	ldrex	r1, [r3]
    b4fc:	2900      	cmp	r1, #0
    b4fe:	d103      	bne.n	b508 <mutex_lock_platform+0x24>
    b500:	e843 2000 	strex	r0, r2, [r3]
    b504:	2800      	cmp	r0, #0
    b506:	d1f7      	bne.n	b4f8 <mutex_lock_platform+0x14>
    b508:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b50c:	d10d      	bne.n	b52a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    b50e:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    b510:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    b512:	4a09      	ldr	r2, [pc, #36]	; (b538 <mutex_lock_platform+0x54>)
    b514:	4293      	cmp	r3, r2
    b516:	d00a      	beq.n	b52e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    b518:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    b51a:	f04f 32ff 	mov.w	r2, #4294967295
    b51e:	f04f 33ff 	mov.w	r3, #4294967295
    b522:	f006 f885 	bl	11630 <z_impl_k_mutex_lock>
        if (ret == 0) {
    b526:	2800      	cmp	r0, #0
    b528:	d0f1      	beq.n	b50e <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b52a:	4804      	ldr	r0, [pc, #16]	; (b53c <mutex_lock_platform+0x58>)
    b52c:	e7f0      	b.n	b510 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    b52e:	4804      	ldr	r0, [pc, #16]	; (b540 <mutex_lock_platform+0x5c>)
    b530:	e7ee      	b.n	b510 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    b532:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b536:	e7eb      	b.n	b510 <mutex_lock_platform+0x2c>
    b538:	a95c5f2c 	.word	0xa95c5f2c
    b53c:	ffff8fe9 	.word	0xffff8fe9
    b540:	ffff8fea 	.word	0xffff8fea

0000b544 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b544:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    b546:	b1d8      	cbz	r0, b580 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    b548:	6843      	ldr	r3, [r0, #4]
    b54a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    b54e:	d110      	bne.n	b572 <mutex_unlock_platform+0x2e>
    b550:	2200      	movs	r2, #0
    b552:	6803      	ldr	r3, [r0, #0]
    b554:	f3bf 8f5b 	dmb	ish
    b558:	e853 1f00 	ldrex	r1, [r3]
    b55c:	2901      	cmp	r1, #1
    b55e:	d103      	bne.n	b568 <mutex_unlock_platform+0x24>
    b560:	e843 2000 	strex	r0, r2, [r3]
    b564:	2800      	cmp	r0, #0
    b566:	d1f7      	bne.n	b558 <mutex_unlock_platform+0x14>
    b568:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b56c:	d10b      	bne.n	b586 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    b56e:	2000      	movs	r0, #0
    }
}
    b570:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    b572:	4a07      	ldr	r2, [pc, #28]	; (b590 <mutex_unlock_platform+0x4c>)
    b574:	4293      	cmp	r3, r2
    b576:	d008      	beq.n	b58a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    b578:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    b57a:	f006 f8d3 	bl	11724 <z_impl_k_mutex_unlock>
    b57e:	e7f6      	b.n	b56e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    b580:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b584:	e7f4      	b.n	b570 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    b586:	4803      	ldr	r0, [pc, #12]	; (b594 <mutex_unlock_platform+0x50>)
    b588:	e7f2      	b.n	b570 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    b58a:	4803      	ldr	r0, [pc, #12]	; (b598 <mutex_unlock_platform+0x54>)
    b58c:	e7f0      	b.n	b570 <mutex_unlock_platform+0x2c>
    b58e:	bf00      	nop
    b590:	a95c5f2c 	.word	0xa95c5f2c
    b594:	ffff8fe9 	.word	0xffff8fe9
    b598:	ffff8fea 	.word	0xffff8fea

0000b59c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    b59c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    b59e:	4604      	mov	r4, r0
    b5a0:	b918      	cbnz	r0, b5aa <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    b5a2:	4b1d      	ldr	r3, [pc, #116]	; (b618 <mutex_init_platform+0x7c>)
    b5a4:	481d      	ldr	r0, [pc, #116]	; (b61c <mutex_init_platform+0x80>)
    b5a6:	685b      	ldr	r3, [r3, #4]
    b5a8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    b5aa:	6863      	ldr	r3, [r4, #4]
    b5ac:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    b5b0:	d02f      	beq.n	b612 <mutex_init_platform+0x76>
    b5b2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    b5b6:	d02c      	beq.n	b612 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    b5b8:	4a19      	ldr	r2, [pc, #100]	; (b620 <mutex_init_platform+0x84>)
    b5ba:	4293      	cmp	r3, r2
    b5bc:	d119      	bne.n	b5f2 <mutex_init_platform+0x56>
    b5be:	6823      	ldr	r3, [r4, #0]
    b5c0:	bb03      	cbnz	r3, b604 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    b5c2:	4818      	ldr	r0, [pc, #96]	; (b624 <mutex_init_platform+0x88>)
    b5c4:	f04f 32ff 	mov.w	r2, #4294967295
    b5c8:	f04f 33ff 	mov.w	r3, #4294967295
    b5cc:	4621      	mov	r1, r4
    b5ce:	f005 fe7b 	bl	112c8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    b5d2:	b908      	cbnz	r0, b5d8 <mutex_init_platform+0x3c>
    b5d4:	6823      	ldr	r3, [r4, #0]
    b5d6:	b91b      	cbnz	r3, b5e0 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    b5d8:	4b0f      	ldr	r3, [pc, #60]	; (b618 <mutex_init_platform+0x7c>)
    b5da:	4813      	ldr	r0, [pc, #76]	; (b628 <mutex_init_platform+0x8c>)
    b5dc:	685b      	ldr	r3, [r3, #4]
    b5de:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    b5e0:	6820      	ldr	r0, [r4, #0]
    b5e2:	2214      	movs	r2, #20
    b5e4:	2100      	movs	r1, #0
    b5e6:	f00a f844 	bl	15672 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    b5ea:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    b5ee:	6063      	str	r3, [r4, #4]
    b5f0:	e008      	b.n	b604 <mutex_init_platform+0x68>
    switch(flags){
    b5f2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    b5f6:	d80d      	bhi.n	b614 <mutex_init_platform+0x78>
    b5f8:	2b3a      	cmp	r3, #58	; 0x3a
    b5fa:	d003      	beq.n	b604 <mutex_init_platform+0x68>
    b5fc:	f640 62ba 	movw	r2, #3770	; 0xeba
    b600:	4293      	cmp	r3, r2
    b602:	d1de      	bne.n	b5c2 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    b604:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    b606:	f00b f98c 	bl	16922 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    b60a:	6863      	ldr	r3, [r4, #4]
    b60c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    b610:	6063      	str	r3, [r4, #4]
}
    b612:	bd10      	pop	{r4, pc}
    switch(flags){
    b614:	4a05      	ldr	r2, [pc, #20]	; (b62c <mutex_init_platform+0x90>)
    b616:	e7f3      	b.n	b600 <mutex_init_platform+0x64>
    b618:	200005a0 	.word	0x200005a0
    b61c:	00017b44 	.word	0x00017b44
    b620:	a95c5f2c 	.word	0xa95c5f2c
    b624:	2000205c 	.word	0x2000205c
    b628:	00017b6a 	.word	0x00017b6a
    b62c:	3a00003a 	.word	0x3a00003a

0000b630 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    b630:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    b632:	4906      	ldr	r1, [pc, #24]	; (b64c <nrf_cc3xx_platform_mutex_init+0x1c>)
    b634:	4806      	ldr	r0, [pc, #24]	; (b650 <nrf_cc3xx_platform_mutex_init+0x20>)
    b636:	2340      	movs	r3, #64	; 0x40
    b638:	2214      	movs	r2, #20
    b63a:	f00b f90e 	bl	1685a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    b63e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    b642:	4904      	ldr	r1, [pc, #16]	; (b654 <nrf_cc3xx_platform_mutex_init+0x24>)
    b644:	4804      	ldr	r0, [pc, #16]	; (b658 <nrf_cc3xx_platform_mutex_init+0x28>)
    b646:	f007 b91f 	b.w	12888 <nrf_cc3xx_platform_set_mutexes>
    b64a:	bf00      	nop
    b64c:	20001b5c 	.word	0x20001b5c
    b650:	2000205c 	.word	0x2000205c
    b654:	000174f0 	.word	0x000174f0
    b658:	00017504 	.word	0x00017504

0000b65c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    b65c:	4901      	ldr	r1, [pc, #4]	; (b664 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    b65e:	2210      	movs	r2, #16
	str	r2, [r1]
    b660:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    b662:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    b664:	e000ed10 	.word	0xe000ed10

0000b668 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    b668:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    b66a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    b66c:	f380 8811 	msr	BASEPRI, r0
	isb
    b670:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    b674:	f3bf 8f4f 	dsb	sy
    b678:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    b67a:	b662      	cpsie	i
	isb
    b67c:	f3bf 8f6f 	isb	sy

	bx	lr
    b680:	4770      	bx	lr
    b682:	bf00      	nop

0000b684 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    b684:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    b686:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    b688:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    b68c:	f3bf 8f4f 	dsb	sy
    b690:	bf20      	wfe

	msr	BASEPRI, r0
    b692:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    b696:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    b698:	4770      	bx	lr
    b69a:	bf00      	nop

0000b69c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    b69c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b69e:	2800      	cmp	r0, #0
    b6a0:	db07      	blt.n	b6b2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b6a2:	4a04      	ldr	r2, [pc, #16]	; (b6b4 <arch_irq_enable+0x18>)
    b6a4:	0941      	lsrs	r1, r0, #5
    b6a6:	2301      	movs	r3, #1
    b6a8:	f000 001f 	and.w	r0, r0, #31
    b6ac:	4083      	lsls	r3, r0
    b6ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    b6b2:	4770      	bx	lr
    b6b4:	e000e100 	.word	0xe000e100

0000b6b8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    b6b8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    b6ba:	2800      	cmp	r0, #0
    b6bc:	db0c      	blt.n	b6d8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b6be:	0943      	lsrs	r3, r0, #5
    b6c0:	4906      	ldr	r1, [pc, #24]	; (b6dc <arch_irq_disable+0x24>)
    b6c2:	f000 001f 	and.w	r0, r0, #31
    b6c6:	3320      	adds	r3, #32
    b6c8:	2201      	movs	r2, #1
    b6ca:	4082      	lsls	r2, r0
    b6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    b6d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b6d4:	f3bf 8f6f 	isb	sy
}
    b6d8:	4770      	bx	lr
    b6da:	bf00      	nop
    b6dc:	e000e100 	.word	0xe000e100

0000b6e0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    b6e0:	4b05      	ldr	r3, [pc, #20]	; (b6f8 <arch_irq_is_enabled+0x18>)
    b6e2:	0942      	lsrs	r2, r0, #5
    b6e4:	f000 001f 	and.w	r0, r0, #31
    b6e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    b6ec:	2301      	movs	r3, #1
    b6ee:	fa03 f000 	lsl.w	r0, r3, r0
}
    b6f2:	4010      	ands	r0, r2
    b6f4:	4770      	bx	lr
    b6f6:	bf00      	nop
    b6f8:	e000e100 	.word	0xe000e100

0000b6fc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    b6fc:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    b6fe:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    b700:	bf54      	ite	pl
    b702:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    b704:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    b706:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b708:	bfac      	ite	ge
    b70a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b70e:	4a07      	ldrlt	r2, [pc, #28]	; (b72c <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b710:	ea4f 1341 	mov.w	r3, r1, lsl #5
    b714:	bfac      	ite	ge
    b716:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b71a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b71e:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b720:	bfb4      	ite	lt
    b722:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b724:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    b728:	4770      	bx	lr
    b72a:	bf00      	nop
    b72c:	e000ed14 	.word	0xe000ed14

0000b730 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    b730:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    b732:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    b734:	4b04      	ldr	r3, [pc, #16]	; (b748 <_arch_isr_direct_pm+0x18>)
    b736:	695a      	ldr	r2, [r3, #20]
    b738:	b11a      	cbz	r2, b742 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    b73a:	2200      	movs	r2, #0
    b73c:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    b73e:	f00b f8ce 	bl	168de <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    b742:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    b744:	bd08      	pop	{r3, pc}
    b746:	bf00      	nop
    b748:	200022e0 	.word	0x200022e0

0000b74c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    b74c:	bf30      	wfi
    b z_SysNmiOnReset
    b74e:	f7ff bffd 	b.w	b74c <z_SysNmiOnReset>
    b752:	bf00      	nop

0000b754 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b754:	4a0b      	ldr	r2, [pc, #44]	; (b784 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    b756:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    b758:	4b0b      	ldr	r3, [pc, #44]	; (b788 <z_arm_prep_c+0x34>)
    b75a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    b75e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    b760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b764:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    b768:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    b76c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    b774:	f005 fcd2 	bl	1111c <z_bss_zero>
	z_data_copy();
    b778:	f006 fd56 	bl	12228 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    b77c:	f000 fa20 	bl	bbc0 <z_arm_interrupt_init>
	z_cstart();
    b780:	f005 fd10 	bl	111a4 <z_cstart>
    b784:	00000000 	.word	0x00000000
    b788:	e000ed00 	.word	0xe000ed00

0000b78c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    b78c:	4a09      	ldr	r2, [pc, #36]	; (b7b4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    b78e:	490a      	ldr	r1, [pc, #40]	; (b7b8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    b790:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    b792:	6809      	ldr	r1, [r1, #0]
    b794:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b796:	4909      	ldr	r1, [pc, #36]	; (b7bc <arch_swap+0x30>)
	_current->arch.basepri = key;
    b798:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    b79a:	684b      	ldr	r3, [r1, #4]
    b79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b7a0:	604b      	str	r3, [r1, #4]
    b7a2:	2300      	movs	r3, #0
    b7a4:	f383 8811 	msr	BASEPRI, r3
    b7a8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    b7ac:	6893      	ldr	r3, [r2, #8]
}
    b7ae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    b7b0:	4770      	bx	lr
    b7b2:	bf00      	nop
    b7b4:	200022e0 	.word	0x200022e0
    b7b8:	00017840 	.word	0x00017840
    b7bc:	e000ed00 	.word	0xe000ed00

0000b7c0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    b7c0:	4912      	ldr	r1, [pc, #72]	; (b80c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    b7c2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    b7c4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    b7c8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    b7ca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    b7ce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    b7d2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    b7d4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    b7d8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    b7dc:	4f0c      	ldr	r7, [pc, #48]	; (b810 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    b7de:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    b7e2:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    b7e4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    b7e6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    b7e8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    b7ea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    b7ec:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    b7ee:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    b7f2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    b7f4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    b7f6:	f000 fa7f 	bl	bcf8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    b7fa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    b7fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    b802:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    b806:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    b80a:	4770      	bx	lr
    ldr r1, =_kernel
    b80c:	200022e0 	.word	0x200022e0
    ldr v4, =_SCS_ICSR
    b810:	e000ed04 	.word	0xe000ed04

0000b814 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    b814:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    b818:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    b81a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    b81e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    b822:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    b824:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    b828:	2902      	cmp	r1, #2
    beq _oops
    b82a:	d0ff      	beq.n	b82c <_oops>

0000b82c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    b82c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    b82e:	f009 fec5 	bl	155bc <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    b832:	bd01      	pop	{r0, pc}

0000b834 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    b834:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    b838:	9b00      	ldr	r3, [sp, #0]
    b83a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    b83e:	490a      	ldr	r1, [pc, #40]	; (b868 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    b840:	9b01      	ldr	r3, [sp, #4]
    b842:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    b846:	9b02      	ldr	r3, [sp, #8]
    b848:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    b84c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    b850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b854:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    b858:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    b85c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    b85e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    b860:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    b862:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    b864:	4770      	bx	lr
    b866:	bf00      	nop
    b868:	00014f23 	.word	0x00014f23

0000b86c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    b86c:	4a09      	ldr	r2, [pc, #36]	; (b894 <z_check_thread_stack_fail+0x28>)
{
    b86e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    b870:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    b872:	b170      	cbz	r0, b892 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    b874:	f113 0f16 	cmn.w	r3, #22
    b878:	6e80      	ldr	r0, [r0, #104]	; 0x68
    b87a:	d005      	beq.n	b888 <z_check_thread_stack_fail+0x1c>
    b87c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    b880:	429a      	cmp	r2, r3
    b882:	d805      	bhi.n	b890 <z_check_thread_stack_fail+0x24>
    b884:	4283      	cmp	r3, r0
    b886:	d203      	bcs.n	b890 <z_check_thread_stack_fail+0x24>
		return 0;
    b888:	4281      	cmp	r1, r0
    b88a:	bf28      	it	cs
    b88c:	2000      	movcs	r0, #0
    b88e:	4770      	bx	lr
    b890:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    b892:	4770      	bx	lr
    b894:	200022e0 	.word	0x200022e0

0000b898 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    b898:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    b89a:	4b09      	ldr	r3, [pc, #36]	; (b8c0 <arch_switch_to_main_thread+0x28>)
{
    b89c:	460d      	mov	r5, r1
    b89e:	4614      	mov	r4, r2
	_current = main_thread;
    b8a0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    b8a2:	f000 fa29 	bl	bcf8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    b8a6:	4620      	mov	r0, r4
    b8a8:	f385 8809 	msr	PSP, r5
    b8ac:	2100      	movs	r1, #0
    b8ae:	b663      	cpsie	if
    b8b0:	f381 8811 	msr	BASEPRI, r1
    b8b4:	f3bf 8f6f 	isb	sy
    b8b8:	2200      	movs	r2, #0
    b8ba:	2300      	movs	r3, #0
    b8bc:	f009 fb31 	bl	14f22 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    b8c0:	200022e0 	.word	0x200022e0

0000b8c4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    b8c4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    b8c6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    b8c8:	4a0b      	ldr	r2, [pc, #44]	; (b8f8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    b8ca:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    b8cc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    b8ce:	bf1e      	ittt	ne
	movne	r1, #0
    b8d0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    b8d2:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    b8d4:	f00b f803 	blne	168de <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    b8d8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    b8da:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    b8de:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    b8e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    b8e6:	4905      	ldr	r1, [pc, #20]	; (b8fc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    b8e8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    b8ea:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    b8ec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    b8ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    b8f2:	4903      	ldr	r1, [pc, #12]	; (b900 <_isr_wrapper+0x3c>)
	bx r1
    b8f4:	4708      	bx	r1
    b8f6:	0000      	.short	0x0000
	ldr r2, =_kernel
    b8f8:	200022e0 	.word	0x200022e0
	ldr r1, =_sw_isr_table
    b8fc:	000171fc 	.word	0x000171fc
	ldr r1, =z_arm_int_exit
    b900:	0000b905 	.word	0x0000b905

0000b904 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    b904:	4b04      	ldr	r3, [pc, #16]	; (b918 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    b906:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    b908:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    b90a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    b90c:	d003      	beq.n	b916 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    b90e:	4903      	ldr	r1, [pc, #12]	; (b91c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    b910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    b914:	600a      	str	r2, [r1, #0]

0000b916 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    b916:	4770      	bx	lr
	ldr r3, =_kernel
    b918:	200022e0 	.word	0x200022e0
	ldr r1, =_SCS_ICSR
    b91c:	e000ed04 	.word	0xe000ed04

0000b920 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    b920:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b922:	4b26      	ldr	r3, [pc, #152]	; (b9bc <mem_manage_fault+0x9c>)
{
    b924:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    b926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    b928:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    b92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    b92e:	bf14      	ite	ne
    b930:	2411      	movne	r4, #17
    b932:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    b934:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    b93a:	bf18      	it	ne
    b93c:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b93e:	0792      	lsls	r2, r2, #30
{
    b940:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    b942:	d50a      	bpl.n	b95a <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    b944:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    b946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b948:	0614      	lsls	r4, r2, #24
    b94a:	d534      	bpl.n	b9b6 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    b94c:	b119      	cbz	r1, b956 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    b94e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b954:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    b956:	2413      	movs	r4, #19
    b958:	e001      	b.n	b95e <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    b95a:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    b95e:	4b17      	ldr	r3, [pc, #92]	; (b9bc <mem_manage_fault+0x9c>)
    b960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    b962:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    b968:	bf18      	it	ne
    b96a:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    b96c:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    b972:	bf18      	it	ne
    b974:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b976:	06d2      	lsls	r2, r2, #27
    b978:	d402      	bmi.n	b980 <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    b97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    b97c:	079b      	lsls	r3, r3, #30
    b97e:	d50a      	bpl.n	b996 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    b980:	4b0e      	ldr	r3, [pc, #56]	; (b9bc <mem_manage_fault+0x9c>)
    b982:	685b      	ldr	r3, [r3, #4]
    b984:	0519      	lsls	r1, r3, #20
    b986:	d506      	bpl.n	b996 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    b988:	4631      	mov	r1, r6
    b98a:	f7ff ff6f 	bl	b86c <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    b98e:	b110      	cbz	r0, b996 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    b990:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    b994:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    b996:	4b09      	ldr	r3, [pc, #36]	; (b9bc <mem_manage_fault+0x9c>)
    b998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b99a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    b99c:	bf42      	ittt	mi
    b99e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    b9a0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    b9a4:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    b9a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b9a8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    b9ac:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    b9ae:	2300      	movs	r3, #0
    b9b0:	702b      	strb	r3, [r5, #0]

	return reason;
}
    b9b2:	4620      	mov	r0, r4
    b9b4:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    b9b6:	f06f 0015 	mvn.w	r0, #21
    b9ba:	e7cc      	b.n	b956 <mem_manage_fault+0x36>
    b9bc:	e000ed00 	.word	0xe000ed00

0000b9c0 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    b9c0:	4b13      	ldr	r3, [pc, #76]	; (ba10 <usage_fault.constprop.0+0x50>)
    b9c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    b9c4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    b9c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    b9ca:	bf14      	ite	ne
    b9cc:	201e      	movne	r0, #30
    b9ce:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    b9d0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    b9d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    b9d6:	bf18      	it	ne
    b9d8:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    b9da:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    b9de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    b9e0:	bf18      	it	ne
    b9e2:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    b9e4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    b9e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    b9ea:	bf18      	it	ne
    b9ec:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    b9ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    b9f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    b9f4:	bf18      	it	ne
    b9f6:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    b9f8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    b9fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b9fe:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    ba02:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    ba06:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    ba08:	bf18      	it	ne
    ba0a:	2024      	movne	r0, #36	; 0x24
    ba0c:	4770      	bx	lr
    ba0e:	bf00      	nop
    ba10:	e000ed00 	.word	0xe000ed00

0000ba14 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    ba14:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ba16:	4b19      	ldr	r3, [pc, #100]	; (ba7c <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    ba18:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    ba1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    ba1c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    ba1e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    ba22:	bf14      	ite	ne
    ba24:	2017      	movne	r0, #23
    ba26:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    ba28:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ba2c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    ba2e:	bf18      	it	ne
    ba30:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    ba32:	05a4      	lsls	r4, r4, #22
    ba34:	d509      	bpl.n	ba4a <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    ba36:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    ba38:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ba3a:	0400      	lsls	r0, r0, #16
    ba3c:	d504      	bpl.n	ba48 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    ba3e:	b11a      	cbz	r2, ba48 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    ba40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ba42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    ba46:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    ba48:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    ba4a:	4b0c      	ldr	r3, [pc, #48]	; (ba7c <bus_fault.constprop.0+0x68>)
    ba4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    ba4e:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ba52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    ba54:	bf18      	it	ne
    ba56:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    ba58:	05d2      	lsls	r2, r2, #23
    ba5a:	d40c      	bmi.n	ba76 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    ba5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    ba5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    ba62:	bf18      	it	ne
    ba64:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    ba66:	4a05      	ldr	r2, [pc, #20]	; (ba7c <bus_fault.constprop.0+0x68>)
    ba68:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ba6a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    ba6e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    ba70:	2300      	movs	r3, #0
    ba72:	700b      	strb	r3, [r1, #0]
}
    ba74:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    ba76:	201b      	movs	r0, #27
    ba78:	e7f5      	b.n	ba66 <bus_fault.constprop.0+0x52>
    ba7a:	bf00      	nop
    ba7c:	e000ed00 	.word	0xe000ed00

0000ba80 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    ba80:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ba82:	4b45      	ldr	r3, [pc, #276]	; (bb98 <z_arm_fault+0x118>)
    ba84:	685b      	ldr	r3, [r3, #4]
{
    ba86:	b08a      	sub	sp, #40	; 0x28
    ba88:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    ba8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ba8e:	2600      	movs	r6, #0
    ba90:	f386 8811 	msr	BASEPRI, r6
    ba94:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    ba98:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    ba9c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    baa0:	d111      	bne.n	bac6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    baa2:	f002 000c 	and.w	r0, r2, #12
    baa6:	2808      	cmp	r0, #8
    baa8:	d00d      	beq.n	bac6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    baaa:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    baac:	bf4c      	ite	mi
    baae:	460d      	movmi	r5, r1
			*nested_exc = true;
    bab0:	2601      	movpl	r6, #1
	*recoverable = false;
    bab2:	2200      	movs	r2, #0
	switch (fault) {
    bab4:	3b03      	subs	r3, #3
	*recoverable = false;
    bab6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    baba:	2b03      	cmp	r3, #3
    babc:	d805      	bhi.n	baca <z_arm_fault+0x4a>
    babe:	e8df f003 	tbb	[pc, r3]
    bac2:	5d1e      	.short	0x5d1e
    bac4:	5a61      	.short	0x5a61
		return NULL;
    bac6:	4635      	mov	r5, r6
    bac8:	e7f3      	b.n	bab2 <z_arm_fault+0x32>
    baca:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    bacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bad0:	b99b      	cbnz	r3, bafa <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    bad2:	2220      	movs	r2, #32
    bad4:	4629      	mov	r1, r5
    bad6:	a802      	add	r0, sp, #8
    bad8:	f009 fdc0 	bl	1565c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    badc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bade:	2e00      	cmp	r6, #0
    bae0:	d054      	beq.n	bb8c <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    bae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    bae6:	b922      	cbnz	r2, baf2 <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    bae8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    baec:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    baf0:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    baf2:	a902      	add	r1, sp, #8
    baf4:	4620      	mov	r0, r4
    baf6:	f009 fd5f 	bl	155b8 <z_arm_fatal_error>
}
    bafa:	b00a      	add	sp, #40	; 0x28
    bafc:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    bafe:	4b26      	ldr	r3, [pc, #152]	; (bb98 <z_arm_fault+0x118>)
    bb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bb02:	0791      	lsls	r1, r2, #30
    bb04:	d4e1      	bmi.n	baca <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    bb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bb08:	2a00      	cmp	r2, #0
    bb0a:	dbde      	blt.n	baca <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    bb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bb0e:	0052      	lsls	r2, r2, #1
    bb10:	d5db      	bpl.n	baca <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    bb12:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    bb14:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    bb16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    bb1a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    bb1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bb20:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    bb24:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    bb26:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    bb2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    bb2e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    bb30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bb34:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    bb38:	f64d 7202 	movw	r2, #57090	; 0xdf02
    bb3c:	4291      	cmp	r1, r2
    bb3e:	d00a      	beq.n	bb56 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    bb40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bb42:	b2d2      	uxtb	r2, r2
    bb44:	b14a      	cbz	r2, bb5a <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    bb46:	f10d 0207 	add.w	r2, sp, #7
    bb4a:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    bb4c:	4628      	mov	r0, r5
    bb4e:	f7ff fee7 	bl	b920 <mem_manage_fault>
		reason = usage_fault(esf);
    bb52:	4604      	mov	r4, r0
		break;
    bb54:	e7ba      	b.n	bacc <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    bb56:	682c      	ldr	r4, [r5, #0]
    bb58:	e7b8      	b.n	bacc <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    bb5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bb5c:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    bb60:	d005      	beq.n	bb6e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    bb62:	f10d 0107 	add.w	r1, sp, #7
    bb66:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    bb68:	f7ff ff54 	bl	ba14 <bus_fault.constprop.0>
    bb6c:	e7f1      	b.n	bb52 <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bb70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bb74:	d3a9      	bcc.n	baca <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    bb76:	f7ff ff23 	bl	b9c0 <usage_fault.constprop.0>
    bb7a:	e7ea      	b.n	bb52 <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    bb7c:	f10d 0207 	add.w	r2, sp, #7
    bb80:	2100      	movs	r1, #0
    bb82:	e7e3      	b.n	bb4c <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    bb84:	f10d 0107 	add.w	r1, sp, #7
    bb88:	2000      	movs	r0, #0
    bb8a:	e7ed      	b.n	bb68 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    bb8c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    bb90:	f023 0301 	bic.w	r3, r3, #1
    bb94:	e7ac      	b.n	baf0 <z_arm_fault+0x70>
    bb96:	bf00      	nop
    bb98:	e000ed00 	.word	0xe000ed00

0000bb9c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    bb9c:	4a02      	ldr	r2, [pc, #8]	; (bba8 <z_arm_fault_init+0xc>)
    bb9e:	6953      	ldr	r3, [r2, #20]
    bba0:	f043 0310 	orr.w	r3, r3, #16
    bba4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    bba6:	4770      	bx	lr
    bba8:	e000ed00 	.word	0xe000ed00

0000bbac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    bbac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    bbb0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    bbb4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    bbb6:	4672      	mov	r2, lr
	bl z_arm_fault
    bbb8:	f7ff ff62 	bl	ba80 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    bbbc:	bd01      	pop	{r0, pc}
    bbbe:	bf00      	nop

0000bbc0 <z_arm_interrupt_init>:
    bbc0:	4804      	ldr	r0, [pc, #16]	; (bbd4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    bbc2:	2300      	movs	r3, #0
    bbc4:	2140      	movs	r1, #64	; 0x40
    bbc6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    bbc8:	3301      	adds	r3, #1
    bbca:	2b30      	cmp	r3, #48	; 0x30
    bbcc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    bbd0:	d1f9      	bne.n	bbc6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    bbd2:	4770      	bx	lr
    bbd4:	e000e100 	.word	0xe000e100

0000bbd8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    bbd8:	2000      	movs	r0, #0
    msr CONTROL, r0
    bbda:	f380 8814 	msr	CONTROL, r0
    isb
    bbde:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    bbe2:	f7ff fb15 	bl	b210 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    bbe6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    bbe8:	490d      	ldr	r1, [pc, #52]	; (bc20 <__start+0x48>)
    str r0, [r1]
    bbea:	6008      	str	r0, [r1, #0]
    dsb
    bbec:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bbf0:	480c      	ldr	r0, [pc, #48]	; (bc24 <__start+0x4c>)
    msr msp, r0
    bbf2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    bbf6:	f000 f82b 	bl	bc50 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    bbfa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    bbfc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    bc00:	4809      	ldr	r0, [pc, #36]	; (bc28 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    bc02:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    bc06:	1840      	adds	r0, r0, r1
    msr PSP, r0
    bc08:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    bc0c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    bc10:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    bc12:	4308      	orrs	r0, r1
    msr CONTROL, r0
    bc14:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    bc18:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    bc1c:	f7ff fd9a 	bl	b754 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    bc20:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    bc24:	20005900 	.word	0x20005900
    ldr r0, =z_interrupt_stacks
    bc28:	20004740 	.word	0x20004740

0000bc2c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    bc2c:	4907      	ldr	r1, [pc, #28]	; (bc4c <z_arm_clear_arm_mpu_config+0x20>)
    bc2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    bc32:	2300      	movs	r3, #0
	int num_regions =
    bc34:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    bc38:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    bc3a:	4293      	cmp	r3, r2
    bc3c:	db00      	blt.n	bc40 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    bc3e:	4770      	bx	lr
  MPU->RNR = rnr;
    bc40:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    bc44:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    bc48:	3301      	adds	r3, #1
    bc4a:	e7f6      	b.n	bc3a <z_arm_clear_arm_mpu_config+0xe>
    bc4c:	e000ed00 	.word	0xe000ed00

0000bc50 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    bc50:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    bc52:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    bc54:	2300      	movs	r3, #0
    bc56:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    bc5a:	f7ff ffe7 	bl	bc2c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    bc5e:	4b14      	ldr	r3, [pc, #80]	; (bcb0 <z_arm_init_arch_hw_at_boot+0x60>)
    bc60:	f04f 32ff 	mov.w	r2, #4294967295
    bc64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    bc68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    bc6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    bc70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    bc74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    bc78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    bc7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    bc80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    bc84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    bc88:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    bc8c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    bc90:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    bc94:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    bc98:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    bc9c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    bca0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    bca4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    bca6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bcaa:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    bcae:	bd08      	pop	{r3, pc}
    bcb0:	e000e100 	.word	0xe000e100

0000bcb4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    bcb4:	4b08      	ldr	r3, [pc, #32]	; (bcd8 <z_impl_k_thread_abort+0x24>)
    bcb6:	689b      	ldr	r3, [r3, #8]
    bcb8:	4283      	cmp	r3, r0
    bcba:	d10b      	bne.n	bcd4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bcbc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    bcc0:	b143      	cbz	r3, bcd4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    bcc2:	4b06      	ldr	r3, [pc, #24]	; (bcdc <z_impl_k_thread_abort+0x28>)
    bcc4:	685a      	ldr	r2, [r3, #4]
    bcc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    bcca:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    bccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bcce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    bcd2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    bcd4:	f006 ba36 	b.w	12144 <z_thread_abort>
    bcd8:	200022e0 	.word	0x200022e0
    bcdc:	e000ed00 	.word	0xe000ed00

0000bce0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    bce0:	4b02      	ldr	r3, [pc, #8]	; (bcec <z_arm_configure_static_mpu_regions+0xc>)
    bce2:	4a03      	ldr	r2, [pc, #12]	; (bcf0 <z_arm_configure_static_mpu_regions+0x10>)
    bce4:	4803      	ldr	r0, [pc, #12]	; (bcf4 <z_arm_configure_static_mpu_regions+0x14>)
    bce6:	2101      	movs	r1, #1
    bce8:	f000 b870 	b.w	bdcc <arm_core_mpu_configure_static_mpu_regions>
    bcec:	20040000 	.word	0x20040000
    bcf0:	20000000 	.word	0x20000000
    bcf4:	00017514 	.word	0x00017514

0000bcf8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    bcf8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    bcfa:	4b05      	ldr	r3, [pc, #20]	; (bd10 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    bcfc:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    bcfe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    bd00:	4a04      	ldr	r2, [pc, #16]	; (bd14 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    bd02:	2140      	movs	r1, #64	; 0x40
    bd04:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    bd08:	4618      	mov	r0, r3
    bd0a:	2101      	movs	r1, #1
    bd0c:	f000 b868 	b.w	bde0 <arm_core_mpu_configure_dynamic_mpu_regions>
    bd10:	20002078 	.word	0x20002078
    bd14:	150b0000 	.word	0x150b0000

0000bd18 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    bd1a:	4e20      	ldr	r6, [pc, #128]	; (bd9c <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    bd1c:	2500      	movs	r5, #0
    bd1e:	428d      	cmp	r5, r1
    bd20:	da39      	bge.n	bd96 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    bd22:	6844      	ldr	r4, [r0, #4]
    bd24:	b374      	cbz	r4, bd84 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    bd26:	b153      	cbz	r3, bd3e <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    bd28:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    bd2c:	ea14 0f0c 	tst.w	r4, ip
    bd30:	d12f      	bne.n	bd92 <mpu_configure_regions+0x7a>
		&&
    bd32:	2c1f      	cmp	r4, #31
    bd34:	d92d      	bls.n	bd92 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    bd36:	6807      	ldr	r7, [r0, #0]
		&&
    bd38:	ea1c 0f07 	tst.w	ip, r7
    bd3c:	d129      	bne.n	bd92 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    bd3e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    bd40:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    bd42:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    bd46:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    bd4a:	d91e      	bls.n	bd8a <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    bd4c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    bd50:	d81d      	bhi.n	bd8e <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    bd52:	3c01      	subs	r4, #1
    bd54:	fab4 f484 	clz	r4, r4
    bd58:	f1c4 041f 	rsb	r4, r4, #31
    bd5c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    bd5e:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    bd62:	ea4c 0c04 	orr.w	ip, ip, r4
    bd66:	d814      	bhi.n	bd92 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bd68:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    bd6c:	4314      	orrs	r4, r2
    bd6e:	f044 0410 	orr.w	r4, r4, #16
    bd72:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    bd76:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    bd7a:	f04c 0401 	orr.w	r4, ip, #1
    bd7e:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    bd82:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    bd84:	3501      	adds	r5, #1
    bd86:	300c      	adds	r0, #12
    bd88:	e7c9      	b.n	bd1e <mpu_configure_regions+0x6>
		return REGION_32B;
    bd8a:	2408      	movs	r4, #8
    bd8c:	e7e7      	b.n	bd5e <mpu_configure_regions+0x46>
		return REGION_4G;
    bd8e:	243e      	movs	r4, #62	; 0x3e
    bd90:	e7e5      	b.n	bd5e <mpu_configure_regions+0x46>
			return -EINVAL;
    bd92:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    bd96:	4610      	mov	r0, r2
    bd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd9a:	bf00      	nop
    bd9c:	e000ed00 	.word	0xe000ed00

0000bda0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    bda0:	4b04      	ldr	r3, [pc, #16]	; (bdb4 <arm_core_mpu_enable+0x14>)
    bda2:	2205      	movs	r2, #5
    bda4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    bda8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bdac:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    bdb0:	4770      	bx	lr
    bdb2:	bf00      	nop
    bdb4:	e000ed00 	.word	0xe000ed00

0000bdb8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    bdb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    bdbc:	4b02      	ldr	r3, [pc, #8]	; (bdc8 <arm_core_mpu_disable+0x10>)
    bdbe:	2200      	movs	r2, #0
    bdc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    bdc4:	4770      	bx	lr
    bdc6:	bf00      	nop
    bdc8:	e000ed00 	.word	0xe000ed00

0000bdcc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    bdcc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    bdce:	4c03      	ldr	r4, [pc, #12]	; (bddc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    bdd0:	2301      	movs	r3, #1
    bdd2:	7822      	ldrb	r2, [r4, #0]
    bdd4:	f7ff ffa0 	bl	bd18 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    bdd8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    bdda:	bd10      	pop	{r4, pc}
    bddc:	20002f73 	.word	0x20002f73

0000bde0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    bde0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    bde2:	4a09      	ldr	r2, [pc, #36]	; (be08 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    bde4:	2300      	movs	r3, #0
    bde6:	7812      	ldrb	r2, [r2, #0]
    bde8:	f7ff ff96 	bl	bd18 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    bdec:	f110 0f16 	cmn.w	r0, #22
    bdf0:	d002      	beq.n	bdf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    bdf2:	4a06      	ldr	r2, [pc, #24]	; (be0c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    bdf4:	2807      	cmp	r0, #7
    bdf6:	dd00      	ble.n	bdfa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    bdf8:	bd08      	pop	{r3, pc}
    bdfa:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    bdfe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    be02:	3001      	adds	r0, #1
    be04:	e7f6      	b.n	bdf4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    be06:	bf00      	nop
    be08:	20002f73 	.word	0x20002f73
    be0c:	e000ed00 	.word	0xe000ed00

0000be10 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    be10:	4914      	ldr	r1, [pc, #80]	; (be64 <z_arm_mpu_init+0x54>)
    be12:	6808      	ldr	r0, [r1, #0]
    be14:	2808      	cmp	r0, #8
{
    be16:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    be18:	d821      	bhi.n	be5e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    be1a:	f7ff ffcd 	bl	bdb8 <arm_core_mpu_disable>
    be1e:	4c12      	ldr	r4, [pc, #72]	; (be68 <z_arm_mpu_init+0x58>)
    be20:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    be22:	2200      	movs	r2, #0
    be24:	4290      	cmp	r0, r2
    be26:	f101 010c 	add.w	r1, r1, #12
    be2a:	d105      	bne.n	be38 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    be2c:	4b0f      	ldr	r3, [pc, #60]	; (be6c <z_arm_mpu_init+0x5c>)
    be2e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    be30:	f7ff ffb6 	bl	bda0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    be34:	2000      	movs	r0, #0
}
    be36:	bd10      	pop	{r4, pc}
    be38:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    be3c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    be40:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    be44:	4313      	orrs	r3, r2
    be46:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    be4a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    be4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    be52:	f043 0301 	orr.w	r3, r3, #1
    be56:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    be5a:	3201      	adds	r2, #1
    be5c:	e7e2      	b.n	be24 <z_arm_mpu_init+0x14>
		return -1;
    be5e:	f04f 30ff 	mov.w	r0, #4294967295
    be62:	e7e8      	b.n	be36 <z_arm_mpu_init+0x26>
    be64:	00017520 	.word	0x00017520
    be68:	e000ed00 	.word	0xe000ed00
    be6c:	20002f73 	.word	0x20002f73

0000be70 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    be70:	4b01      	ldr	r3, [pc, #4]	; (be78 <__stdout_hook_install+0x8>)
    be72:	6018      	str	r0, [r3, #0]
}
    be74:	4770      	bx	lr
    be76:	bf00      	nop
    be78:	20000318 	.word	0x20000318

0000be7c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    be7c:	b510      	push	{r4, lr}
	__asm__ volatile(
    be7e:	f04f 0340 	mov.w	r3, #64	; 0x40
    be82:	f3ef 8011 	mrs	r0, BASEPRI
    be86:	f383 8812 	msr	BASEPRI_MAX, r3
    be8a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    be8e:	4a11      	ldr	r2, [pc, #68]	; (bed4 <nordicsemi_nrf52_init+0x58>)
    be90:	2301      	movs	r3, #1
    be92:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    be96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    be9a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    be9e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    bea2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    bea6:	2c08      	cmp	r4, #8
    bea8:	d108      	bne.n	bebc <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    beaa:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    beae:	2905      	cmp	r1, #5
    beb0:	d804      	bhi.n	bebc <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    beb2:	4c09      	ldr	r4, [pc, #36]	; (bed8 <nordicsemi_nrf52_init+0x5c>)
    beb4:	5c61      	ldrb	r1, [r4, r1]
    beb6:	b109      	cbz	r1, bebc <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    beb8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    bebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bec0:	2201      	movs	r2, #1
    bec2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    bec6:	f380 8811 	msr	BASEPRI, r0
    beca:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    bece:	2000      	movs	r0, #0
    bed0:	bd10      	pop	{r4, pc}
    bed2:	bf00      	nop
    bed4:	4001e000 	.word	0x4001e000
    bed8:	00017baa 	.word	0x00017baa

0000bedc <sys_arch_reboot>:
    *p_gpregret = val;
    bedc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bee0:	b2c0      	uxtb	r0, r0
    bee2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    bee6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    beea:	4905      	ldr	r1, [pc, #20]	; (bf00 <sys_arch_reboot+0x24>)
    beec:	4b05      	ldr	r3, [pc, #20]	; (bf04 <sys_arch_reboot+0x28>)
    beee:	68ca      	ldr	r2, [r1, #12]
    bef0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    bef4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    bef6:	60cb      	str	r3, [r1, #12]
    bef8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    befc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    befe:	e7fd      	b.n	befc <sys_arch_reboot+0x20>
    bf00:	e000ed00 	.word	0xe000ed00
    bf04:	05fa0004 	.word	0x05fa0004

0000bf08 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    bf08:	b120      	cbz	r0, bf14 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    bf0a:	4b03      	ldr	r3, [pc, #12]	; (bf18 <arch_busy_wait+0x10>)
    bf0c:	0180      	lsls	r0, r0, #6
    bf0e:	f043 0301 	orr.w	r3, r3, #1
    bf12:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    bf14:	4770      	bx	lr
    bf16:	bf00      	nop
    bf18:	000174e0 	.word	0x000174e0

0000bf1c <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
    bf1c:	b508      	push	{r3, lr}
    bf1e:	4804      	ldr	r0, [pc, #16]	; (bf30 <xoshiro128_initialize+0x14>)
    bf20:	f00a fbe9 	bl	166f6 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
    bf24:	2800      	cmp	r0, #0
}
    bf26:	bf0c      	ite	eq
    bf28:	f06f 0012 	mvneq.w	r0, #18
    bf2c:	2000      	movne	r0, #0
    bf2e:	bd08      	pop	{r3, pc}
    bf30:	0001716c 	.word	0x0001716c

0000bf34 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    bf34:	b538      	push	{r3, r4, r5, lr}
    bf36:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    bf38:	4805      	ldr	r0, [pc, #20]	; (bf50 <bt_buf_get_rx+0x1c>)
    bf3a:	f009 fc4b 	bl	157d4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    bf3e:	4604      	mov	r4, r0
    bf40:	b120      	cbz	r0, bf4c <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    bf42:	2100      	movs	r1, #0
    bf44:	300c      	adds	r0, #12
    bf46:	f009 fc7f 	bl	15848 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    bf4a:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    bf4c:	4620      	mov	r0, r4
    bf4e:	bd38      	pop	{r3, r4, r5, pc}
    bf50:	20000718 	.word	0x20000718

0000bf54 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    bf54:	b570      	push	{r4, r5, r6, lr}
    bf56:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bf58:	480d      	ldr	r0, [pc, #52]	; (bf90 <bt_buf_get_cmd_complete+0x3c>)
    bf5a:	f3bf 8f5b 	dmb	ish
    bf5e:	460b      	mov	r3, r1
    bf60:	2100      	movs	r1, #0
    bf62:	e850 4f00 	ldrex	r4, [r0]
    bf66:	e840 1500 	strex	r5, r1, [r0]
    bf6a:	2d00      	cmp	r5, #0
    bf6c:	d1f9      	bne.n	bf62 <bt_buf_get_cmd_complete+0xe>
    bf6e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
    bf72:	b924      	cbnz	r4, bf7e <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    bf74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    bf78:	2001      	movs	r0, #1
    bf7a:	f7ff bfdb 	b.w	bf34 <bt_buf_get_rx>
    bf7e:	2301      	movs	r3, #1
    bf80:	f104 000c 	add.w	r0, r4, #12
    bf84:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
    bf86:	8221      	strh	r1, [r4, #16]
    bf88:	f009 fc5e 	bl	15848 <net_buf_simple_reserve>
}
    bf8c:	4620      	mov	r0, r4
    bf8e:	bd70      	pop	{r4, r5, r6, pc}
    bf90:	200002a0 	.word	0x200002a0

0000bf94 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    bf94:	b570      	push	{r4, r5, r6, lr}
    bf96:	4605      	mov	r5, r0
	switch (evt) {
    bf98:	3d0e      	subs	r5, #14
    bf9a:	2d01      	cmp	r5, #1
{
    bf9c:	460c      	mov	r4, r1
    bf9e:	4610      	mov	r0, r2
    bfa0:	4619      	mov	r1, r3
	switch (evt) {
    bfa2:	d803      	bhi.n	bfac <bt_buf_get_evt+0x18>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    bfa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    bfa8:	f7ff bfd4 	b.w	bf54 <bt_buf_get_cmd_complete>
		if (discardable) {
    bfac:	b164      	cbz	r4, bfc8 <bt_buf_get_evt+0x34>
	return net_buf_alloc_fixed(pool, timeout);
    bfae:	4809      	ldr	r0, [pc, #36]	; (bfd4 <bt_buf_get_evt+0x40>)
    bfb0:	f009 fc10 	bl	157d4 <net_buf_alloc_fixed>
			if (buf) {
    bfb4:	4604      	mov	r4, r0
    bfb6:	b128      	cbz	r0, bfc4 <bt_buf_get_evt+0x30>
	net_buf_simple_reserve(&buf->b, reserve);
    bfb8:	2100      	movs	r1, #0
    bfba:	300c      	adds	r0, #12
    bfbc:	f009 fc44 	bl	15848 <net_buf_simple_reserve>
    bfc0:	2301      	movs	r3, #1
    bfc2:	7623      	strb	r3, [r4, #24]
}
    bfc4:	4620      	mov	r0, r4
    bfc6:	bd70      	pop	{r4, r5, r6, pc}
    bfc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    bfcc:	2001      	movs	r0, #1
    bfce:	f7ff bfb1 	b.w	bf34 <bt_buf_get_rx>
    bfd2:	bf00      	nop
    bfd4:	200006c0 	.word	0x200006c0

0000bfd8 <hci_le_meta_event>:
#endif /* CONFIG_BT_CONN */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    bfd8:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    bfda:	2101      	movs	r1, #1
    bfdc:	4604      	mov	r4, r0
    bfde:	300c      	adds	r0, #12
    bfe0:	f009 fc4d 	bl	1587e <net_buf_simple_pull_mem>
	err = handle_event_common(event, buf, handlers, num_handlers);
    bfe4:	4621      	mov	r1, r4
    bfe6:	4a03      	ldr	r2, [pc, #12]	; (bff4 <hci_le_meta_event+0x1c>)
    bfe8:	7800      	ldrb	r0, [r0, #0]
	evt = net_buf_pull_mem(buf, sizeof(*evt));

	LOG_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
}
    bfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = handle_event_common(event, buf, handlers, num_handlers);
    bfee:	2301      	movs	r3, #1
    bff0:	f009 bba4 	b.w	1573c <handle_event_common.isra.0>
    bff4:	00017588 	.word	0x00017588

0000bff8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
    bff8:	b538      	push	{r3, r4, r5, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
    bffa:	4822      	ldr	r0, [pc, #136]	; (c084 <rx_work_handler+0x8c>)
    bffc:	f009 fc07 	bl	1580e <net_buf_slist_get>
	if (!buf) {
    c000:	4604      	mov	r4, r0
    c002:	2800      	cmp	r0, #0
    c004:	d03c      	beq.n	c080 <rx_work_handler+0x88>
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
    c006:	7e03      	ldrb	r3, [r0, #24]
    c008:	2b01      	cmp	r3, #1
    c00a:	d12d      	bne.n	c068 <rx_work_handler+0x70>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c00c:	8a03      	ldrh	r3, [r0, #16]
    c00e:	2b01      	cmp	r3, #1
    c010:	d80c      	bhi.n	c02c <rx_work_handler+0x34>
    c012:	4a1d      	ldr	r2, [pc, #116]	; (c088 <rx_work_handler+0x90>)
    c014:	491d      	ldr	r1, [pc, #116]	; (c08c <rx_work_handler+0x94>)
    c016:	481e      	ldr	r0, [pc, #120]	; (c090 <rx_work_handler+0x98>)
    c018:	f640 2347 	movw	r3, #2631	; 0xa47
    c01c:	f009 faba 	bl	15594 <assert_print>
    c020:	4040      	eors	r0, r0
    c022:	f380 8811 	msr	BASEPRI, r0
    c026:	f04f 0003 	mov.w	r0, #3
    c02a:	df02      	svc	2
    c02c:	2102      	movs	r1, #2
    c02e:	f104 000c 	add.w	r0, r4, #12
    c032:	f009 fc24 	bl	1587e <net_buf_simple_pull_mem>
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    c036:	7803      	ldrb	r3, [r0, #0]
    c038:	3b0e      	subs	r3, #14
    c03a:	2b01      	cmp	r3, #1
    c03c:	4605      	mov	r5, r0
    c03e:	d80c      	bhi.n	c05a <rx_work_handler+0x62>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    c040:	4a11      	ldr	r2, [pc, #68]	; (c088 <rx_work_handler+0x90>)
    c042:	4914      	ldr	r1, [pc, #80]	; (c094 <rx_work_handler+0x9c>)
    c044:	4812      	ldr	r0, [pc, #72]	; (c090 <rx_work_handler+0x98>)
    c046:	f640 234b 	movw	r3, #2635	; 0xa4b
    c04a:	f009 faa3 	bl	15594 <assert_print>
    c04e:	4040      	eors	r0, r0
    c050:	f380 8811 	msr	BASEPRI, r0
    c054:	f04f 0003 	mov.w	r0, #3
    c058:	df02      	svc	2
	err = handle_event_common(event, buf, handlers, num_handlers);
    c05a:	7828      	ldrb	r0, [r5, #0]
    c05c:	4a0e      	ldr	r2, [pc, #56]	; (c098 <rx_work_handler+0xa0>)
    c05e:	2303      	movs	r3, #3
    c060:	4621      	mov	r1, r4
    c062:	f009 fb6b 	bl	1573c <handle_event_common.isra.0>
	net_buf_unref(buf);
    c066:	4620      	mov	r0, r4
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
    c068:	f001 f8cc 	bl	d204 <net_buf_unref>
	return list->head;
    c06c:	4b0b      	ldr	r3, [pc, #44]	; (c09c <rx_work_handler+0xa4>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
    c06e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    c072:	b12b      	cbz	r3, c080 <rx_work_handler+0x88>
#endif
		if (err < 0) {
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
    c074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c078:	4909      	ldr	r1, [pc, #36]	; (c0a0 <rx_work_handler+0xa8>)
    c07a:	480a      	ldr	r0, [pc, #40]	; (c0a4 <rx_work_handler+0xac>)
    c07c:	f00a bd2a 	b.w	16ad4 <k_work_submit_to_queue>
}
    c080:	bd38      	pop	{r3, r4, r5, pc}
    c082:	bf00      	nop
    c084:	200002a4 	.word	0x200002a4
    c088:	00017bcf 	.word	0x00017bcf
    c08c:	00017c03 	.word	0x00017c03
    c090:	00017c1c 	.word	0x00017c1c
    c094:	00017c39 	.word	0x00017c39
    c098:	00017570 	.word	0x00017570
    c09c:	200001a0 	.word	0x200001a0
    c0a0:	20000330 	.word	0x20000330
    c0a4:	20001690 	.word	0x20001690

0000c0a8 <hci_cmd_done>:
{
    c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0aa:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c0ac:	7a90      	ldrb	r0, [r2, #10]
{
    c0ae:	460e      	mov	r6, r1
    c0b0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    c0b2:	f000 ffe5 	bl	d080 <net_buf_pool_get>
    c0b6:	4b30      	ldr	r3, [pc, #192]	; (c178 <hci_cmd_done+0xd0>)
    c0b8:	4283      	cmp	r3, r0
    c0ba:	d15b      	bne.n	c174 <hci_cmd_done+0xcc>
	if (cmd(buf)->opcode != opcode) {
    c0bc:	4620      	mov	r0, r4
    c0be:	f000 ffe7 	bl	d090 <net_buf_id>
    c0c2:	4d2e      	ldr	r5, [pc, #184]	; (c17c <hci_cmd_done+0xd4>)
    c0c4:	230c      	movs	r3, #12
    c0c6:	fb03 5000 	mla	r0, r3, r0, r5
    c0ca:	8843      	ldrh	r3, [r0, #2]
    c0cc:	42bb      	cmp	r3, r7
    c0ce:	d151      	bne.n	c174 <hci_cmd_done+0xcc>
	if (bt_dev.sent_cmd) {
    c0d0:	4f2b      	ldr	r7, [pc, #172]	; (c180 <hci_cmd_done+0xd8>)
    c0d2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
    c0d6:	b120      	cbz	r0, c0e2 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    c0d8:	f001 f894 	bl	d204 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c0dc:	2300      	movs	r3, #0
    c0de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	if (cmd(buf)->state && !status) {
    c0e2:	4620      	mov	r0, r4
    c0e4:	f000 ffd4 	bl	d090 <net_buf_id>
    c0e8:	270c      	movs	r7, #12
    c0ea:	fb07 5000 	mla	r0, r7, r0, r5
    c0ee:	6843      	ldr	r3, [r0, #4]
    c0f0:	b1e3      	cbz	r3, c12c <hci_cmd_done+0x84>
    c0f2:	b9de      	cbnz	r6, c12c <hci_cmd_done+0x84>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    c0f4:	4620      	mov	r0, r4
    c0f6:	f000 ffcb 	bl	d090 <net_buf_id>
    c0fa:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    c0fe:	2201      	movs	r2, #1
    c100:	6840      	ldr	r0, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    c102:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
    c106:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    c108:	f001 071f 	and.w	r7, r1, #31
    c10c:	40ba      	lsls	r2, r7
	if (val) {
    c10e:	0949      	lsrs	r1, r1, #5
    c110:	b318      	cbz	r0, c15a <hci_cmd_done+0xb2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c112:	f3bf 8f5b 	dmb	ish
    c116:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c11a:	e853 0f00 	ldrex	r0, [r3]
    c11e:	4310      	orrs	r0, r2
    c120:	e843 0100 	strex	r1, r0, [r3]
    c124:	2900      	cmp	r1, #0
    c126:	d1f8      	bne.n	c11a <hci_cmd_done+0x72>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c128:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    c12c:	4620      	mov	r0, r4
    c12e:	f000 ffaf 	bl	d090 <net_buf_id>
    c132:	270c      	movs	r7, #12
    c134:	fb07 5000 	mla	r0, r7, r0, r5
    c138:	6883      	ldr	r3, [r0, #8]
    c13a:	b1db      	cbz	r3, c174 <hci_cmd_done+0xcc>
		cmd(buf)->status = status;
    c13c:	4620      	mov	r0, r4
    c13e:	f000 ffa7 	bl	d090 <net_buf_id>
    c142:	4378      	muls	r0, r7
    c144:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    c146:	4620      	mov	r0, r4
    c148:	f000 ffa2 	bl	d090 <net_buf_id>
    c14c:	fb07 5500 	mla	r5, r7, r0, r5
    c150:	68a8      	ldr	r0, [r5, #8]
}
    c152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
    c156:	f005 bb55 	b.w	11804 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c15a:	43d2      	mvns	r2, r2
    c15c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c160:	f3bf 8f5b 	dmb	ish
    c164:	e853 0f00 	ldrex	r0, [r3]
    c168:	4010      	ands	r0, r2
    c16a:	e843 0100 	strex	r1, r0, [r3]
    c16e:	2900      	cmp	r1, #0
    c170:	d0da      	beq.n	c128 <hci_cmd_done+0x80>
    c172:	e7f7      	b.n	c164 <hci_cmd_done+0xbc>
    c174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c176:	bf00      	nop
    c178:	200006ec 	.word	0x200006ec
    c17c:	20002084 	.word	0x20002084
    c180:	200001a0 	.word	0x200001a0

0000c184 <hci_cmd_status>:
{
    c184:	b538      	push	{r3, r4, r5, lr}
    c186:	2104      	movs	r1, #4
    c188:	4604      	mov	r4, r0
    c18a:	300c      	adds	r0, #12
    c18c:	f009 fb77 	bl	1587e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    c190:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    c192:	7801      	ldrb	r1, [r0, #0]
    c194:	8840      	ldrh	r0, [r0, #2]
    c196:	4622      	mov	r2, r4
    c198:	f7ff ff86 	bl	c0a8 <hci_cmd_done>
	if (ncmd) {
    c19c:	b125      	cbz	r5, c1a8 <hci_cmd_status+0x24>
    c19e:	4803      	ldr	r0, [pc, #12]	; (c1ac <hci_cmd_status+0x28>)
}
    c1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c1a4:	f005 bb2e 	b.w	11804 <z_impl_k_sem_give>
    c1a8:	bd38      	pop	{r3, r4, r5, pc}
    c1aa:	bf00      	nop
    c1ac:	20000288 	.word	0x20000288

0000c1b0 <hci_cmd_complete>:
{
    c1b0:	b538      	push	{r3, r4, r5, lr}
    c1b2:	2103      	movs	r1, #3
    c1b4:	4604      	mov	r4, r0
    c1b6:	300c      	adds	r0, #12
    c1b8:	f009 fb61 	bl	1587e <net_buf_simple_pull_mem>
	status = buf->data[0];
    c1bc:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
    c1be:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    c1c0:	7819      	ldrb	r1, [r3, #0]
    c1c2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    c1c6:	4622      	mov	r2, r4
    c1c8:	f7ff ff6e 	bl	c0a8 <hci_cmd_done>
	if (ncmd) {
    c1cc:	b125      	cbz	r5, c1d8 <hci_cmd_complete+0x28>
    c1ce:	4803      	ldr	r0, [pc, #12]	; (c1dc <hci_cmd_complete+0x2c>)
}
    c1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c1d4:	f005 bb16 	b.w	11804 <z_impl_k_sem_give>
    c1d8:	bd38      	pop	{r3, r4, r5, pc}
    c1da:	bf00      	nop
    c1dc:	20000288 	.word	0x20000288

0000c1e0 <bt_hci_cmd_state_set_init>:
{
    c1e0:	b510      	push	{r4, lr}
	state->bit = bit;
    c1e2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    c1e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    c1ea:	720b      	strb	r3, [r1, #8]
{
    c1ec:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    c1ee:	f000 ff4f 	bl	d090 <net_buf_id>
    c1f2:	4b03      	ldr	r3, [pc, #12]	; (c200 <bt_hci_cmd_state_set_init+0x20>)
    c1f4:	220c      	movs	r2, #12
    c1f6:	fb02 3300 	mla	r3, r2, r0, r3
    c1fa:	605c      	str	r4, [r3, #4]
}
    c1fc:	bd10      	pop	{r4, pc}
    c1fe:	bf00      	nop
    c200:	20002084 	.word	0x20002084

0000c204 <bt_hci_cmd_create>:
{
    c204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    c208:	f04f 32ff 	mov.w	r2, #4294967295
    c20c:	f04f 33ff 	mov.w	r3, #4294967295
    c210:	4606      	mov	r6, r0
    c212:	4817      	ldr	r0, [pc, #92]	; (c270 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    c214:	4d17      	ldr	r5, [pc, #92]	; (c274 <bt_hci_cmd_create+0x70>)
{
    c216:	460f      	mov	r7, r1
    c218:	f009 fadc 	bl	157d4 <net_buf_alloc_fixed>
    c21c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    c21e:	f100 0a0c 	add.w	sl, r0, #12
    c222:	2100      	movs	r1, #0
    c224:	f04f 0800 	mov.w	r8, #0
    c228:	4650      	mov	r0, sl
    c22a:	f009 fb0d 	bl	15848 <net_buf_simple_reserve>
    c22e:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
    c232:	4620      	mov	r0, r4
    c234:	f000 ff2c 	bl	d090 <net_buf_id>
    c238:	f04f 090c 	mov.w	r9, #12
    c23c:	fb09 5000 	mla	r0, r9, r0, r5
    c240:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    c242:	4620      	mov	r0, r4
    c244:	f000 ff24 	bl	d090 <net_buf_id>
    c248:	fb09 5000 	mla	r0, r9, r0, r5
    c24c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    c250:	4620      	mov	r0, r4
    c252:	f000 ff1d 	bl	d090 <net_buf_id>
    c256:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    c25a:	2103      	movs	r1, #3
    c25c:	4650      	mov	r0, sl
    c25e:	f8c5 8004 	str.w	r8, [r5, #4]
    c262:	f009 faf5 	bl	15850 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    c266:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    c268:	7087      	strb	r7, [r0, #2]
}
    c26a:	4620      	mov	r0, r4
    c26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c270:	200006ec 	.word	0x200006ec
    c274:	20002084 	.word	0x20002084

0000c278 <bt_hci_cmd_send_sync>:
{
    c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c27c:	4607      	mov	r7, r0
    c27e:	b086      	sub	sp, #24
    c280:	4615      	mov	r5, r2
	if (!buf) {
    c282:	460c      	mov	r4, r1
    c284:	b921      	cbnz	r1, c290 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    c286:	f7ff ffbd 	bl	c204 <bt_hci_cmd_create>
		if (!buf) {
    c28a:	4604      	mov	r4, r0
    c28c:	2800      	cmp	r0, #0
    c28e:	d04b      	beq.n	c328 <bt_hci_cmd_send_sync+0xb0>
	return z_impl_k_sem_init(sem, initial_count, limit);
    c290:	2201      	movs	r2, #1
    c292:	2100      	movs	r1, #0
    c294:	4668      	mov	r0, sp
    c296:	f00a fbde 	bl	16a56 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    c29a:	4620      	mov	r0, r4
    c29c:	f000 fef8 	bl	d090 <net_buf_id>
    c2a0:	f8df 808c 	ldr.w	r8, [pc, #140]	; c330 <bt_hci_cmd_send_sync+0xb8>
    c2a4:	230c      	movs	r3, #12
    c2a6:	fb03 8000 	mla	r0, r3, r0, r8
    c2aa:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    c2ae:	4620      	mov	r0, r4
    c2b0:	f009 fac6 	bl	15840 <net_buf_ref>
    c2b4:	4601      	mov	r1, r0
    c2b6:	481f      	ldr	r0, [pc, #124]	; (c334 <bt_hci_cmd_send_sync+0xbc>)
    c2b8:	f009 fac0 	bl	1583c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    c2bc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    c2c0:	2300      	movs	r3, #0
    c2c2:	4668      	mov	r0, sp
    c2c4:	f005 fac4 	bl	11850 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
    c2c8:	4606      	mov	r6, r0
    c2ca:	b188      	cbz	r0, c2f0 <bt_hci_cmd_send_sync+0x78>
    c2cc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
    c2d0:	4a19      	ldr	r2, [pc, #100]	; (c338 <bt_hci_cmd_send_sync+0xc0>)
    c2d2:	491a      	ldr	r1, [pc, #104]	; (c33c <bt_hci_cmd_send_sync+0xc4>)
    c2d4:	481a      	ldr	r0, [pc, #104]	; (c340 <bt_hci_cmd_send_sync+0xc8>)
    c2d6:	f009 f95d 	bl	15594 <assert_print>
    c2da:	481a      	ldr	r0, [pc, #104]	; (c344 <bt_hci_cmd_send_sync+0xcc>)
    c2dc:	4632      	mov	r2, r6
    c2de:	4639      	mov	r1, r7
    c2e0:	f009 f958 	bl	15594 <assert_print>
    c2e4:	4040      	eors	r0, r0
    c2e6:	f380 8811 	msr	BASEPRI, r0
    c2ea:	f04f 0003 	mov.w	r0, #3
    c2ee:	df02      	svc	2
	status = cmd(buf)->status;
    c2f0:	4620      	mov	r0, r4
    c2f2:	f000 fecd 	bl	d090 <net_buf_id>
    c2f6:	230c      	movs	r3, #12
    c2f8:	4358      	muls	r0, r3
    c2fa:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    c2fe:	b15e      	cbz	r6, c318 <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    c300:	4620      	mov	r0, r4
    c302:	f000 ff7f 	bl	d204 <net_buf_unref>
			return -ECONNREFUSED;
    c306:	2e09      	cmp	r6, #9
    c308:	bf14      	ite	ne
    c30a:	f06f 0004 	mvnne.w	r0, #4
    c30e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
    c312:	b006      	add	sp, #24
    c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    c318:	b115      	cbz	r5, c320 <bt_hci_cmd_send_sync+0xa8>
		*rsp = buf;
    c31a:	602c      	str	r4, [r5, #0]
	return 0;
    c31c:	2000      	movs	r0, #0
    c31e:	e7f8      	b.n	c312 <bt_hci_cmd_send_sync+0x9a>
		net_buf_unref(buf);
    c320:	4620      	mov	r0, r4
    c322:	f000 ff6f 	bl	d204 <net_buf_unref>
    c326:	e7f9      	b.n	c31c <bt_hci_cmd_send_sync+0xa4>
			return -ENOBUFS;
    c328:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c32c:	e7f1      	b.n	c312 <bt_hci_cmd_send_sync+0x9a>
    c32e:	bf00      	nop
    c330:	20002084 	.word	0x20002084
    c334:	200002ac 	.word	0x200002ac
    c338:	00017bcf 	.word	0x00017bcf
    c33c:	00017c67 	.word	0x00017c67
    c340:	00017c1c 	.word	0x00017c1c
    c344:	00017c70 	.word	0x00017c70

0000c348 <hci_init>:
{
    c348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    c34a:	4d9b      	ldr	r5, [pc, #620]	; (c5b8 <hci_init+0x270>)
    c34c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    c350:	6899      	ldr	r1, [r3, #8]
    c352:	f011 0101 	ands.w	r1, r1, #1
    c356:	d124      	bne.n	c3a2 <hci_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    c358:	aa01      	add	r2, sp, #4
    c35a:	f640 4003 	movw	r0, #3075	; 0xc03
    c35e:	f7ff ff8b 	bl	c278 <bt_hci_cmd_send_sync>
		if (err) {
    c362:	4604      	mov	r4, r0
    c364:	2800      	cmp	r0, #0
    c366:	d164      	bne.n	c432 <hci_init+0xea>
		hci_reset_complete(rsp);
    c368:	9c01      	ldr	r4, [sp, #4]
	uint8_t status = buf->data[0];
    c36a:	68e3      	ldr	r3, [r4, #12]
	if (status) {
    c36c:	781b      	ldrb	r3, [r3, #0]
    c36e:	b9ab      	cbnz	r3, c39c <hci_init+0x54>
		bt_scan_reset();
    c370:	f000 fcde 	bl	cd30 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c374:	f3bf 8f5b 	dmb	ish
    c378:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    c37c:	f3bf 8f5b 	dmb	ish
    c380:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c384:	f003 0309 	and.w	r3, r3, #9
    c388:	f3bf 8f5b 	dmb	ish
    c38c:	e852 1f00 	ldrex	r1, [r2]
    c390:	e842 3000 	strex	r0, r3, [r2]
    c394:	2800      	cmp	r0, #0
    c396:	d1f9      	bne.n	c38c <hci_init+0x44>
    c398:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    c39c:	4620      	mov	r0, r4
    c39e:	f000 ff31 	bl	d204 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    c3a2:	aa01      	add	r2, sp, #4
    c3a4:	2100      	movs	r1, #0
    c3a6:	f241 0003 	movw	r0, #4099	; 0x1003
    c3aa:	f7ff ff65 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c3ae:	4604      	mov	r4, r0
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d13e      	bne.n	c432 <hci_init+0xea>
	read_local_features_complete(rsp);
    c3b4:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    c3b6:	4881      	ldr	r0, [pc, #516]	; (c5bc <hci_init+0x274>)
    c3b8:	68f1      	ldr	r1, [r6, #12]
    c3ba:	2208      	movs	r2, #8
    c3bc:	3101      	adds	r1, #1
    c3be:	f009 f94d 	bl	1565c <memcpy>
	net_buf_unref(rsp);
    c3c2:	4630      	mov	r0, r6
    c3c4:	f000 ff1e 	bl	d204 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    c3c8:	4621      	mov	r1, r4
    c3ca:	aa01      	add	r2, sp, #4
    c3cc:	f241 0001 	movw	r0, #4097	; 0x1001
    c3d0:	f7ff ff52 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c3d4:	4604      	mov	r4, r0
    c3d6:	bb60      	cbnz	r0, c432 <hci_init+0xea>
	read_local_ver_complete(rsp);
    c3d8:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    c3da:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
    c3dc:	785a      	ldrb	r2, [r3, #1]
    c3de:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    c3e2:	885a      	ldrh	r2, [r3, #2]
    c3e4:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
    c3e8:	791a      	ldrb	r2, [r3, #4]
    c3ea:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    c3ee:	f8b3 2007 	ldrh.w	r2, [r3, #7]
    c3f2:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    c3f6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    c3fa:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
    c3fe:	f000 ff01 	bl	d204 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    c402:	4621      	mov	r1, r4
    c404:	aa01      	add	r2, sp, #4
    c406:	f241 0002 	movw	r0, #4098	; 0x1002
    c40a:	f7ff ff35 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c40e:	4604      	mov	r4, r0
    c410:	b978      	cbnz	r0, c432 <hci_init+0xea>
	read_supported_commands_complete(rsp);
    c412:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    c414:	486a      	ldr	r0, [pc, #424]	; (c5c0 <hci_init+0x278>)
    c416:	68f1      	ldr	r1, [r6, #12]
    c418:	2240      	movs	r2, #64	; 0x40
    c41a:	3101      	adds	r1, #1
    c41c:	f009 f91e 	bl	1565c <memcpy>
	net_buf_unref(rsp);
    c420:	4630      	mov	r0, r6
    c422:	f000 feef 	bl	d204 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    c426:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    c42a:	0658      	lsls	r0, r3, #25
    c42c:	d404      	bmi.n	c438 <hci_init+0xf0>
		return -ENODEV;
    c42e:	f06f 0412 	mvn.w	r4, #18
}
    c432:	4620      	mov	r0, r4
    c434:	b003      	add	sp, #12
    c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    c438:	4621      	mov	r1, r4
    c43a:	aa01      	add	r2, sp, #4
    c43c:	f242 0003 	movw	r0, #8195	; 0x2003
    c440:	f7ff ff1a 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c444:	4604      	mov	r4, r0
    c446:	2800      	cmp	r0, #0
    c448:	d1f3      	bne.n	c432 <hci_init+0xea>
	read_le_features_complete(rsp);
    c44a:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    c44c:	485d      	ldr	r0, [pc, #372]	; (c5c4 <hci_init+0x27c>)
    c44e:	68f1      	ldr	r1, [r6, #12]
    c450:	2208      	movs	r2, #8
    c452:	3101      	adds	r1, #1
    c454:	f009 f902 	bl	1565c <memcpy>
	net_buf_unref(rsp);
    c458:	4630      	mov	r0, r6
    c45a:	f000 fed3 	bl	d204 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    c45e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
    c462:	0699      	lsls	r1, r3, #26
    c464:	d418      	bmi.n	c498 <hci_init+0x150>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    c466:	2102      	movs	r1, #2
    c468:	f640 406d 	movw	r0, #3181	; 0xc6d
    c46c:	f7ff feca 	bl	c204 <bt_hci_cmd_create>
		if (!buf) {
    c470:	4606      	mov	r6, r0
    c472:	2800      	cmp	r0, #0
    c474:	f000 809c 	beq.w	c5b0 <hci_init+0x268>
    c478:	2102      	movs	r1, #2
    c47a:	300c      	adds	r0, #12
    c47c:	f009 f9e8 	bl	15850 <net_buf_simple_add>
		cp_le->le = 0x01;
    c480:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    c482:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    c484:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    c486:	4622      	mov	r2, r4
    c488:	4631      	mov	r1, r6
    c48a:	f640 406d 	movw	r0, #3181	; 0xc6d
    c48e:	f7ff fef3 	bl	c278 <bt_hci_cmd_send_sync>
		if (err) {
    c492:	4604      	mov	r4, r0
    c494:	2800      	cmp	r0, #0
    c496:	d1cc      	bne.n	c432 <hci_init+0xea>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    c498:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    c49c:	071a      	lsls	r2, r3, #28
    c49e:	d512      	bpl.n	c4c6 <hci_init+0x17e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    c4a0:	aa01      	add	r2, sp, #4
    c4a2:	2100      	movs	r1, #0
    c4a4:	f242 001c 	movw	r0, #8220	; 0x201c
    c4a8:	f7ff fee6 	bl	c278 <bt_hci_cmd_send_sync>
		if (err) {
    c4ac:	4604      	mov	r4, r0
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d1bf      	bne.n	c432 <hci_init+0xea>
		le_read_supp_states_complete(rsp);
    c4b2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c4b4:	68c3      	ldr	r3, [r0, #12]
    c4b6:	f8d3 2001 	ldr.w	r2, [r3, #1]
    c4ba:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    c4be:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    c4c2:	f000 fe9f 	bl	d204 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    c4c6:	2108      	movs	r1, #8
    c4c8:	f242 0001 	movw	r0, #8193	; 0x2001
    c4cc:	f7ff fe9a 	bl	c204 <bt_hci_cmd_create>
	if (!buf) {
    c4d0:	4604      	mov	r4, r0
    c4d2:	2800      	cmp	r0, #0
    c4d4:	d06c      	beq.n	c5b0 <hci_init+0x268>
    c4d6:	2108      	movs	r1, #8
    c4d8:	300c      	adds	r0, #12
    c4da:	f009 f9b9 	bl	15850 <net_buf_simple_add>
	dst[0] = val;
    c4de:	2702      	movs	r7, #2
	dst[1] = val >> 8;
    c4e0:	2200      	movs	r2, #0
	dst[0] = val;
    c4e2:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
    c4e4:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
    c4e6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    c4e8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    c4ea:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    c4ec:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    c4ee:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    c4f0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    c4f2:	4621      	mov	r1, r4
    c4f4:	f242 0001 	movw	r0, #8193	; 0x2001
    c4f8:	f7ff febe 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c4fc:	4604      	mov	r4, r0
    c4fe:	2800      	cmp	r0, #0
    c500:	d197      	bne.n	c432 <hci_init+0xea>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    c502:	2108      	movs	r1, #8
    c504:	f640 4001 	movw	r0, #3073	; 0xc01
    c508:	f7ff fe7c 	bl	c204 <bt_hci_cmd_create>
	if (!buf) {
    c50c:	4606      	mov	r6, r0
    c50e:	2800      	cmp	r0, #0
    c510:	d04e      	beq.n	c5b0 <hci_init+0x268>
    c512:	2108      	movs	r1, #8
    c514:	300c      	adds	r0, #12
    c516:	f009 f99b 	bl	15850 <net_buf_simple_add>
    c51a:	2380      	movs	r3, #128	; 0x80
    c51c:	7043      	strb	r3, [r0, #1]
    c51e:	2320      	movs	r3, #32
	dst[0] = val;
    c520:	7004      	strb	r4, [r0, #0]
    c522:	7084      	strb	r4, [r0, #2]
    c524:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    c526:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    c528:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    c52a:	70c7      	strb	r7, [r0, #3]
    c52c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    c52e:	4622      	mov	r2, r4
    c530:	4631      	mov	r1, r6
    c532:	f640 4001 	movw	r0, #3073	; 0xc01
    c536:	f7ff fe9f 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c53a:	4604      	mov	r4, r0
    c53c:	2800      	cmp	r0, #0
    c53e:	f47f af78 	bne.w	c432 <hci_init+0xea>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    c542:	4601      	mov	r1, r0
    c544:	aa01      	add	r2, sp, #4
    c546:	f64f 4001 	movw	r0, #64513	; 0xfc01
    c54a:	f7ff fe95 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c54e:	4604      	mov	r4, r0
    c550:	bb48      	cbnz	r0, c5a6 <hci_init+0x25e>
	net_buf_unref(rsp);
    c552:	9801      	ldr	r0, [sp, #4]
    c554:	f000 fe56 	bl	d204 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    c558:	4621      	mov	r1, r4
    c55a:	aa01      	add	r2, sp, #4
    c55c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    c560:	f7ff fe8a 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    c564:	4604      	mov	r4, r0
    c566:	b9f0      	cbnz	r0, c5a6 <hci_init+0x25e>
	rp.cmds = (void *)rsp->data;
    c568:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    c56a:	4817      	ldr	r0, [pc, #92]	; (c5c8 <hci_init+0x280>)
    c56c:	68f1      	ldr	r1, [r6, #12]
    c56e:	463a      	mov	r2, r7
    c570:	3101      	adds	r1, #1
    c572:	f009 f873 	bl	1565c <memcpy>
	net_buf_unref(rsp);
    c576:	4630      	mov	r0, r6
    c578:	f000 fe44 	bl	d204 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    c57c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    c580:	075b      	lsls	r3, r3, #29
    c582:	d510      	bpl.n	c5a6 <hci_init+0x25e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    c584:	aa01      	add	r2, sp, #4
    c586:	4621      	mov	r1, r4
    c588:	f64f 4003 	movw	r0, #64515	; 0xfc03
    c58c:	f7ff fe74 	bl	c278 <bt_hci_cmd_send_sync>
		if (err) {
    c590:	b948      	cbnz	r0, c5a6 <hci_init+0x25e>
		rp.feat = (void *)rsp->data;
    c592:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    c594:	480d      	ldr	r0, [pc, #52]	; (c5cc <hci_init+0x284>)
    c596:	68e1      	ldr	r1, [r4, #12]
    c598:	2201      	movs	r2, #1
    c59a:	4411      	add	r1, r2
    c59c:	f009 f85e 	bl	1565c <memcpy>
		net_buf_unref(rsp);
    c5a0:	4620      	mov	r0, r4
    c5a2:	f000 fe2f 	bl	d204 <net_buf_unref>
}
    c5a6:	b003      	add	sp, #12
    c5a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = bt_id_init();
    c5ac:	f000 bb74 	b.w	cc98 <bt_id_init>
		return -ENOBUFS;
    c5b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    c5b4:	e73d      	b.n	c432 <hci_init+0xea>
    c5b6:	bf00      	nop
    c5b8:	200001a0 	.word	0x200001a0
    c5bc:	20000218 	.word	0x20000218
    c5c0:	20000220 	.word	0x20000220
    c5c4:	20000278 	.word	0x20000278
    c5c8:	20000261 	.word	0x20000261
    c5cc:	20000260 	.word	0x20000260

0000c5d0 <bt_hci_le_rand>:
{
    c5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    c5d2:	4b14      	ldr	r3, [pc, #80]	; (c624 <bt_hci_le_rand+0x54>)
    c5d4:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
    c5d8:	2b00      	cmp	r3, #0
{
    c5da:	4605      	mov	r5, r0
    c5dc:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
    c5de:	da1d      	bge.n	c61c <bt_hci_le_rand+0x4c>
	while (len > 0) {
    c5e0:	b914      	cbnz	r4, c5e8 <bt_hci_le_rand+0x18>
	return 0;
    c5e2:	4620      	mov	r0, r4
}
    c5e4:	b003      	add	sp, #12
    c5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
    c5e8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    c5ea:	aa01      	add	r2, sp, #4
    c5ec:	f04f 0100 	mov.w	r1, #0
    c5f0:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
    c5f4:	4626      	mov	r6, r4
    c5f6:	bf28      	it	cs
    c5f8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    c5fa:	f7ff fe3d 	bl	c278 <bt_hci_cmd_send_sync>
		if (err) {
    c5fe:	2800      	cmp	r0, #0
    c600:	d1f0      	bne.n	c5e4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
    c602:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
    c604:	68f9      	ldr	r1, [r7, #12]
    c606:	4632      	mov	r2, r6
    c608:	3101      	adds	r1, #1
    c60a:	4628      	mov	r0, r5
    c60c:	f009 f826 	bl	1565c <memcpy>
		net_buf_unref(rsp);
    c610:	4638      	mov	r0, r7
    c612:	f000 fdf7 	bl	d204 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
    c616:	4435      	add	r5, r6
		len -= count;
    c618:	1ba4      	subs	r4, r4, r6
    c61a:	e7e1      	b.n	c5e0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
    c61c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c620:	e7e0      	b.n	c5e4 <bt_hci_le_rand+0x14>
    c622:	bf00      	nop
    c624:	200001a0 	.word	0x200001a0

0000c628 <bt_send>:
	return bt_dev.drv->send(buf);
    c628:	4b02      	ldr	r3, [pc, #8]	; (c634 <bt_send+0xc>)
    c62a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    c62e:	695b      	ldr	r3, [r3, #20]
    c630:	4718      	bx	r3
    c632:	bf00      	nop
    c634:	200001a0 	.word	0x200001a0

0000c638 <hci_tx_thread>:
{
    c638:	b570      	push	{r4, r5, r6, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    c63a:	4d33      	ldr	r5, [pc, #204]	; (c708 <hci_tx_thread+0xd0>)
	if (bt_dev.sent_cmd) {
    c63c:	4e33      	ldr	r6, [pc, #204]	; (c70c <hci_tx_thread+0xd4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    c63e:	68eb      	ldr	r3, [r5, #12]
    c640:	f36f 3394 	bfc	r3, #14, #7
    c644:	60eb      	str	r3, [r5, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    c646:	4830      	ldr	r0, [pc, #192]	; (c708 <hci_tx_thread+0xd0>)
    c648:	f04f 32ff 	mov.w	r2, #4294967295
    c64c:	f04f 33ff 	mov.w	r3, #4294967295
    c650:	2101      	movs	r1, #1
    c652:	f005 ff43 	bl	124dc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    c656:	b160      	cbz	r0, c672 <hci_tx_thread+0x3a>
    c658:	4a2d      	ldr	r2, [pc, #180]	; (c710 <hci_tx_thread+0xd8>)
    c65a:	492e      	ldr	r1, [pc, #184]	; (c714 <hci_tx_thread+0xdc>)
    c65c:	482e      	ldr	r0, [pc, #184]	; (c718 <hci_tx_thread+0xe0>)
    c65e:	f640 23c8 	movw	r3, #2760	; 0xac8
    c662:	f008 ff97 	bl	15594 <assert_print>
    c666:	4040      	eors	r0, r0
    c668:	f380 8811 	msr	BASEPRI, r0
    c66c:	f04f 0003 	mov.w	r0, #3
    c670:	df02      	svc	2
		switch (ev->state) {
    c672:	68eb      	ldr	r3, [r5, #12]
    c674:	f3c3 3386 	ubfx	r3, r3, #14, #7
    c678:	2b04      	cmp	r3, #4
    c67a:	d12d      	bne.n	c6d8 <hci_tx_thread+0xa0>
			if (ev->tag == BT_EVENT_CMD_TX) {
    c67c:	7b2b      	ldrb	r3, [r5, #12]
    c67e:	bb5b      	cbnz	r3, c6d8 <hci_tx_thread+0xa0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    c680:	4826      	ldr	r0, [pc, #152]	; (c71c <hci_tx_thread+0xe4>)
    c682:	2200      	movs	r2, #0
    c684:	2300      	movs	r3, #0
    c686:	f009 f8aa 	bl	157de <net_buf_get>
	BT_ASSERT(buf);
    c68a:	4604      	mov	r4, r0
    c68c:	b368      	cbz	r0, c6ea <hci_tx_thread+0xb2>
	return z_impl_k_sem_take(sem, timeout);
    c68e:	4824      	ldr	r0, [pc, #144]	; (c720 <hci_tx_thread+0xe8>)
    c690:	f04f 32ff 	mov.w	r2, #4294967295
    c694:	f04f 33ff 	mov.w	r3, #4294967295
    c698:	f005 f8da 	bl	11850 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    c69c:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    c6a0:	b9e8      	cbnz	r0, c6de <hci_tx_thread+0xa6>
	bt_dev.sent_cmd = net_buf_ref(buf);
    c6a2:	4620      	mov	r0, r4
    c6a4:	f009 f8cc 	bl	15840 <net_buf_ref>
    c6a8:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
    c6ac:	4620      	mov	r0, r4
    c6ae:	f7ff ffbb 	bl	c628 <bt_send>
	if (err) {
    c6b2:	b188      	cbz	r0, c6d8 <hci_tx_thread+0xa0>
	z_impl_k_sem_give(sem);
    c6b4:	481a      	ldr	r0, [pc, #104]	; (c720 <hci_tx_thread+0xe8>)
    c6b6:	f005 f8a5 	bl	11804 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    c6ba:	4620      	mov	r0, r4
    c6bc:	f000 fce8 	bl	d090 <net_buf_id>
    c6c0:	4b18      	ldr	r3, [pc, #96]	; (c724 <hci_tx_thread+0xec>)
    c6c2:	220c      	movs	r2, #12
    c6c4:	fb02 3000 	mla	r0, r2, r0, r3
    c6c8:	211f      	movs	r1, #31
    c6ca:	8840      	ldrh	r0, [r0, #2]
    c6cc:	4622      	mov	r2, r4
    c6ce:	f7ff fceb 	bl	c0a8 <hci_cmd_done>
		net_buf_unref(buf);
    c6d2:	4620      	mov	r0, r4
    c6d4:	f000 fd96 	bl	d204 <net_buf_unref>
	z_impl_k_yield();
    c6d8:	f005 fc78 	bl	11fcc <z_impl_k_yield>
	while (1) {
    c6dc:	e7af      	b.n	c63e <hci_tx_thread+0x6>
		net_buf_unref(bt_dev.sent_cmd);
    c6de:	f000 fd91 	bl	d204 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    c6e2:	2300      	movs	r3, #0
    c6e4:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    c6e8:	e7db      	b.n	c6a2 <hci_tx_thread+0x6a>
	BT_ASSERT(buf);
    c6ea:	4a09      	ldr	r2, [pc, #36]	; (c710 <hci_tx_thread+0xd8>)
    c6ec:	490e      	ldr	r1, [pc, #56]	; (c728 <hci_tx_thread+0xf0>)
    c6ee:	480a      	ldr	r0, [pc, #40]	; (c718 <hci_tx_thread+0xe0>)
    c6f0:	f640 235a 	movw	r3, #2650	; 0xa5a
    c6f4:	f008 ff4e 	bl	15594 <assert_print>
    c6f8:	4040      	eors	r0, r0
    c6fa:	f380 8811 	msr	BASEPRI, r0
    c6fe:	f04f 0003 	mov.w	r0, #3
    c702:	df02      	svc	2
    c704:	e7c3      	b.n	c68e <hci_tx_thread+0x56>
    c706:	bf00      	nop
    c708:	2000031c 	.word	0x2000031c
    c70c:	200001a0 	.word	0x200001a0
    c710:	00017bcf 	.word	0x00017bcf
    c714:	00017c67 	.word	0x00017c67
    c718:	00017c1c 	.word	0x00017c1c
    c71c:	200002ac 	.word	0x200002ac
    c720:	20000288 	.word	0x20000288
    c724:	20002084 	.word	0x20002084
    c728:	00017ce4 	.word	0x00017ce4

0000c72c <hci_event_prio>:
{
    c72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c730:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    c732:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
    c736:	4630      	mov	r0, r6
    c738:	f009 f8b1 	bl	1589e <net_buf_simple_headroom>
	state->len = buf->len;
    c73c:	8a27      	ldrh	r7, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    c73e:	2f01      	cmp	r7, #1
	state->offset = net_buf_simple_headroom(buf);
    c740:	4605      	mov	r5, r0
    c742:	d80c      	bhi.n	c75e <hci_event_prio+0x32>
    c744:	4a20      	ldr	r2, [pc, #128]	; (c7c8 <hci_event_prio+0x9c>)
    c746:	4921      	ldr	r1, [pc, #132]	; (c7cc <hci_event_prio+0xa0>)
    c748:	4821      	ldr	r0, [pc, #132]	; (c7d0 <hci_event_prio+0xa4>)
    c74a:	f640 636f 	movw	r3, #3695	; 0xe6f
    c74e:	f008 ff21 	bl	15594 <assert_print>
    c752:	4040      	eors	r0, r0
    c754:	f380 8811 	msr	BASEPRI, r0
    c758:	f04f 0003 	mov.w	r0, #3
    c75c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    c75e:	4630      	mov	r0, r6
    c760:	2102      	movs	r1, #2
    c762:	f009 f88c 	bl	1587e <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    c766:	7803      	ldrb	r3, [r0, #0]
    c768:	2b05      	cmp	r3, #5
    c76a:	4606      	mov	r6, r0
    c76c:	d021      	beq.n	c7b2 <hci_event_prio+0x86>
    c76e:	3b0e      	subs	r3, #14
    c770:	2b01      	cmp	r3, #1
    c772:	d921      	bls.n	c7b8 <hci_event_prio+0x8c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    c774:	4a14      	ldr	r2, [pc, #80]	; (c7c8 <hci_event_prio+0x9c>)
    c776:	4917      	ldr	r1, [pc, #92]	; (c7d4 <hci_event_prio+0xa8>)
    c778:	4815      	ldr	r0, [pc, #84]	; (c7d0 <hci_event_prio+0xa4>)
    c77a:	f640 6373 	movw	r3, #3699	; 0xe73
    c77e:	f008 ff09 	bl	15594 <assert_print>
    c782:	4040      	eors	r0, r0
    c784:	f380 8811 	msr	BASEPRI, r0
    c788:	f04f 0003 	mov.w	r0, #3
    c78c:	df02      	svc	2
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
    c78e:	f04f 0802 	mov.w	r8, #2
	err = handle_event_common(event, buf, handlers, num_handlers);
    c792:	4a11      	ldr	r2, [pc, #68]	; (c7d8 <hci_event_prio+0xac>)
    c794:	7830      	ldrb	r0, [r6, #0]
    c796:	2302      	movs	r3, #2
    c798:	4621      	mov	r1, r4
    c79a:	f008 ffcf 	bl	1573c <handle_event_common.isra.0>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    c79e:	f018 0f02 	tst.w	r8, #2
    c7a2:	d00c      	beq.n	c7be <hci_event_prio+0x92>
	buf->data = buf->__buf + state->offset;
    c7a4:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    c7a6:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
    c7a8:	fa13 f585 	uxtah	r5, r3, r5
    c7ac:	60e5      	str	r5, [r4, #12]
}
    c7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
    c7b2:	f04f 0803 	mov.w	r8, #3
    c7b6:	e7ec      	b.n	c792 <hci_event_prio+0x66>
	switch (evt) {
    c7b8:	f04f 0801 	mov.w	r8, #1
    c7bc:	e7e9      	b.n	c792 <hci_event_prio+0x66>
		net_buf_unref(buf);
    c7be:	4620      	mov	r0, r4
}
    c7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    c7c4:	f000 bd1e 	b.w	d204 <net_buf_unref>
    c7c8:	00017bcf 	.word	0x00017bcf
    c7cc:	00017c03 	.word	0x00017c03
    c7d0:	00017c1c 	.word	0x00017c1c
    c7d4:	00017c9c 	.word	0x00017c9c
    c7d8:	00017560 	.word	0x00017560

0000c7dc <bt_recv>:
{
    c7dc:	b510      	push	{r4, lr}
	switch (bt_buf_get_type(buf)) {
    c7de:	7e03      	ldrb	r3, [r0, #24]
    c7e0:	2b01      	cmp	r3, #1
{
    c7e2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c7e4:	d115      	bne.n	c812 <bt_recv+0x36>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    c7e6:	68c3      	ldr	r3, [r0, #12]
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	2b05      	cmp	r3, #5
    c7ec:	d006      	beq.n	c7fc <bt_recv+0x20>
    c7ee:	3b0e      	subs	r3, #14
    c7f0:	2b01      	cmp	r3, #1
    c7f2:	d805      	bhi.n	c800 <bt_recv+0x24>
			hci_event_prio(buf);
    c7f4:	f7ff ff9a 	bl	c72c <hci_event_prio>
		return 0;
    c7f8:	2000      	movs	r0, #0
}
    c7fa:	bd10      	pop	{r4, pc}
			hci_event_prio(buf);
    c7fc:	f7ff ff96 	bl	c72c <hci_event_prio>
	net_buf_slist_put(&bt_dev.rx_queue, buf);
    c800:	4621      	mov	r1, r4
    c802:	4806      	ldr	r0, [pc, #24]	; (c81c <bt_recv+0x40>)
    c804:	f008 ffed 	bl	157e2 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
    c808:	4905      	ldr	r1, [pc, #20]	; (c820 <bt_recv+0x44>)
    c80a:	4806      	ldr	r0, [pc, #24]	; (c824 <bt_recv+0x48>)
    c80c:	f00a f962 	bl	16ad4 <k_work_submit_to_queue>
}
    c810:	e7f2      	b.n	c7f8 <bt_recv+0x1c>
		net_buf_unref(buf);
    c812:	f000 fcf7 	bl	d204 <net_buf_unref>
		return -EINVAL;
    c816:	f06f 0015 	mvn.w	r0, #21
    c81a:	e7ee      	b.n	c7fa <bt_recv+0x1e>
    c81c:	200002a4 	.word	0x200002a4
    c820:	20000330 	.word	0x20000330
    c824:	20001690 	.word	0x20001690

0000c828 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    c828:	4a08      	ldr	r2, [pc, #32]	; (c84c <bt_hci_driver_register+0x24>)
{
    c82a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    c82c:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    c830:	b930      	cbnz	r0, c840 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    c832:	68d9      	ldr	r1, [r3, #12]
    c834:	b139      	cbz	r1, c846 <bt_hci_driver_register+0x1e>
    c836:	6959      	ldr	r1, [r3, #20]
    c838:	b129      	cbz	r1, c846 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    c83a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    c83e:	4770      	bx	lr
		return -EALREADY;
    c840:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c844:	4770      	bx	lr
		return -EINVAL;
    c846:	f06f 0015 	mvn.w	r0, #21
}
    c84a:	4770      	bx	lr
    c84c:	200001a0 	.word	0x200001a0

0000c850 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c850:	4b07      	ldr	r3, [pc, #28]	; (c870 <bt_finalize_init+0x20>)
    c852:	f3bf 8f5b 	dmb	ish
    c856:	e853 1f00 	ldrex	r1, [r3]
    c85a:	f041 0104 	orr.w	r1, r1, #4
    c85e:	e843 1200 	strex	r2, r1, [r3]
    c862:	2a00      	cmp	r2, #0
    c864:	d1f7      	bne.n	c856 <bt_finalize_init+0x6>
    c866:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
    c86a:	2000      	movs	r0, #0
    c86c:	f000 ba66 	b.w	cd3c <bt_le_scan_update>
    c870:	20000274 	.word	0x20000274

0000c874 <init_work>:
{
    c874:	b510      	push	{r4, lr}
	err = hci_init();
    c876:	f7ff fd67 	bl	c348 <hci_init>
	if (err) {
    c87a:	4604      	mov	r4, r0
    c87c:	b908      	cbnz	r0, c882 <init_work+0xe>
	bt_finalize_init();
    c87e:	f7ff ffe7 	bl	c850 <bt_finalize_init>
	if (ready_cb) {
    c882:	4b04      	ldr	r3, [pc, #16]	; (c894 <init_work+0x20>)
    c884:	681b      	ldr	r3, [r3, #0]
    c886:	b11b      	cbz	r3, c890 <init_work+0x1c>
		ready_cb(err);
    c888:	4620      	mov	r0, r4
}
    c88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    c88e:	4718      	bx	r3
}
    c890:	bd10      	pop	{r4, pc}
    c892:	bf00      	nop
    c894:	2000209c 	.word	0x2000209c

0000c898 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    c898:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    c89a:	4d39      	ldr	r5, [pc, #228]	; (c980 <bt_enable+0xe8>)
    c89c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    c8a0:	b088      	sub	sp, #32
    c8a2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	d062      	beq.n	c96e <bt_enable+0xd6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c8a8:	f3bf 8f5b 	dmb	ish
    c8ac:	f105 03d4 	add.w	r3, r5, #212	; 0xd4
    c8b0:	e853 2f00 	ldrex	r2, [r3]
    c8b4:	f022 0202 	bic.w	r2, r2, #2
    c8b8:	e843 2100 	strex	r1, r2, [r3]
    c8bc:	2900      	cmp	r1, #0
    c8be:	d1f7      	bne.n	c8b0 <bt_enable+0x18>
    c8c0:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c8c4:	f3bf 8f5b 	dmb	ish
    c8c8:	e853 4f00 	ldrex	r4, [r3]
    c8cc:	f044 0201 	orr.w	r2, r4, #1
    c8d0:	e843 2100 	strex	r1, r2, [r3]
    c8d4:	2900      	cmp	r1, #0
    c8d6:	d1f7      	bne.n	c8c8 <bt_enable+0x30>
    c8d8:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    c8dc:	f014 0401 	ands.w	r4, r4, #1
    c8e0:	d148      	bne.n	c974 <bt_enable+0xdc>
		if (err) {
			LOG_WRN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    c8e2:	4b28      	ldr	r3, [pc, #160]	; (c984 <bt_enable+0xec>)
    c8e4:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c8e6:	2201      	movs	r2, #1
    c8e8:	4611      	mov	r1, r2
    c8ea:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
    c8ee:	f00a f8b2 	bl	16a56 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
    c8f2:	f505 7086 	add.w	r0, r5, #268	; 0x10c
    c8f6:	f00a f88d 	bl	16a14 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c8fa:	2200      	movs	r2, #0
    c8fc:	2300      	movs	r3, #0
    c8fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c902:	f06f 0308 	mvn.w	r3, #8
    c906:	e9cd 4302 	strd	r4, r3, [sp, #8]
    c90a:	e9cd 4400 	strd	r4, r4, [sp]
    c90e:	4b1e      	ldr	r3, [pc, #120]	; (c988 <bt_enable+0xf0>)
    c910:	491e      	ldr	r1, [pc, #120]	; (c98c <bt_enable+0xf4>)
    c912:	9404      	str	r4, [sp, #16]
    c914:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    c918:	481d      	ldr	r0, [pc, #116]	; (c990 <bt_enable+0xf8>)
    c91a:	f004 fd35 	bl	11388 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    c91e:	491d      	ldr	r1, [pc, #116]	; (c994 <bt_enable+0xfc>)
    c920:	481b      	ldr	r0, [pc, #108]	; (c990 <bt_enable+0xf8>)
    c922:	f009 ffd7 	bl	168d4 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&tx_thread_data, "BT TX");

#if defined(CONFIG_BT_RECV_WORKQ_BT)
	/* RX thread */
	k_work_queue_init(&bt_workq);
    c926:	481c      	ldr	r0, [pc, #112]	; (c998 <bt_enable+0x100>)
    c928:	f00a f8e5 	bl	16af6 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
    c92c:	491b      	ldr	r1, [pc, #108]	; (c99c <bt_enable+0x104>)
    c92e:	481a      	ldr	r0, [pc, #104]	; (c998 <bt_enable+0x100>)
    c930:	9400      	str	r4, [sp, #0]
    c932:	f06f 0307 	mvn.w	r3, #7
    c936:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c93a:	f005 f8cf 	bl	11adc <k_work_queue_start>
    c93e:	4918      	ldr	r1, [pc, #96]	; (c9a0 <bt_enable+0x108>)
    c940:	4815      	ldr	r0, [pc, #84]	; (c998 <bt_enable+0x100>)
    c942:	f009 ffc7 	bl	168d4 <z_impl_k_thread_name_set>
			   CONFIG_BT_RX_STACK_SIZE,
			   K_PRIO_COOP(CONFIG_BT_RX_PRIO), NULL);
	k_thread_name_set(&bt_workq.thread, "BT RX");
#endif

	err = bt_dev.drv->open();
    c946:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    c94a:	68db      	ldr	r3, [r3, #12]
    c94c:	4798      	blx	r3
	if (err) {
    c94e:	4604      	mov	r4, r0
    c950:	b928      	cbnz	r0, c95e <bt_enable+0xc6>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    c952:	b93e      	cbnz	r6, c964 <bt_enable+0xcc>
	err = hci_init();
    c954:	f7ff fcf8 	bl	c348 <hci_init>
	if (err) {
    c958:	b978      	cbnz	r0, c97a <bt_enable+0xe2>
	bt_finalize_init();
    c95a:	f7ff ff79 	bl	c850 <bt_finalize_init>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    c95e:	4620      	mov	r0, r4
    c960:	b008      	add	sp, #32
    c962:	bd70      	pop	{r4, r5, r6, pc}
	k_work_submit(&bt_dev.init);
    c964:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    c968:	f005 f8b2 	bl	11ad0 <k_work_submit>
	return 0;
    c96c:	e7f7      	b.n	c95e <bt_enable+0xc6>
		return -ENODEV;
    c96e:	f06f 0412 	mvn.w	r4, #18
    c972:	e7f4      	b.n	c95e <bt_enable+0xc6>
		return -EALREADY;
    c974:	f06f 0477 	mvn.w	r4, #119	; 0x77
    c978:	e7f1      	b.n	c95e <bt_enable+0xc6>
    c97a:	4604      	mov	r4, r0
    c97c:	e7ef      	b.n	c95e <bt_enable+0xc6>
    c97e:	bf00      	nop
    c980:	200001a0 	.word	0x200001a0
    c984:	2000209c 	.word	0x2000209c
    c988:	0000c639 	.word	0x0000c639
    c98c:	20003880 	.word	0x20003880
    c990:	20001610 	.word	0x20001610
    c994:	00017cb5 	.word	0x00017cb5
    c998:	20001690 	.word	0x20001690
    c99c:	20003ec0 	.word	0x20003ec0
    c9a0:	00017cbb 	.word	0x00017cbb

0000c9a4 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c9a4:	4b04      	ldr	r3, [pc, #16]	; (c9b8 <bt_is_ready+0x14>)
    c9a6:	f3bf 8f5b 	dmb	ish
    c9aa:	6818      	ldr	r0, [r3, #0]
    c9ac:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
    c9b0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    c9b4:	4770      	bx	lr
    c9b6:	bf00      	nop
    c9b8:	20000274 	.word	0x20000274

0000c9bc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    c9be:	4f0a      	ldr	r7, [pc, #40]	; (c9e8 <id_find+0x2c>)
{
    c9c0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    c9c2:	2500      	movs	r5, #0
    c9c4:	79fb      	ldrb	r3, [r7, #7]
    c9c6:	b2ec      	uxtb	r4, r5
    c9c8:	42a3      	cmp	r3, r4
    c9ca:	d802      	bhi.n	c9d2 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    c9cc:	f06f 0001 	mvn.w	r0, #1
    c9d0:	e009      	b.n	c9e6 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
    c9d2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    c9d6:	4439      	add	r1, r7
    c9d8:	4630      	mov	r0, r6
    c9da:	f008 fec6 	bl	1576a <bt_addr_le_eq>
    c9de:	3501      	adds	r5, #1
    c9e0:	2800      	cmp	r0, #0
    c9e2:	d0ef      	beq.n	c9c4 <id_find+0x8>
    c9e4:	4620      	mov	r0, r4
}
    c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c9e8:	200001a0 	.word	0x200001a0

0000c9ec <set_random_address>:
{
    c9ec:	b538      	push	{r3, r4, r5, lr}
 *
 *  @return negative value if @a a < @a b, 0 if @a a == @a b, else positive
 */
static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    c9ee:	4913      	ldr	r1, [pc, #76]	; (ca3c <set_random_address+0x50>)
    c9f0:	2206      	movs	r2, #6
    c9f2:	4605      	mov	r5, r0
    c9f4:	f008 fe0b 	bl	1560e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    c9f8:	b1d8      	cbz	r0, ca32 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    c9fa:	2106      	movs	r1, #6
    c9fc:	f242 0005 	movw	r0, #8197	; 0x2005
    ca00:	f7ff fc00 	bl	c204 <bt_hci_cmd_create>
	if (!buf) {
    ca04:	4604      	mov	r4, r0
    ca06:	b1b0      	cbz	r0, ca36 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ca08:	2206      	movs	r2, #6
    ca0a:	4629      	mov	r1, r5
    ca0c:	300c      	adds	r0, #12
    ca0e:	f008 ff25 	bl	1585c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    ca12:	2200      	movs	r2, #0
    ca14:	4621      	mov	r1, r4
    ca16:	f242 0005 	movw	r0, #8197	; 0x2005
    ca1a:	f7ff fc2d 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    ca1e:	b948      	cbnz	r0, ca34 <set_random_address+0x48>
 *  @param dst Bluetooth device address destination buffer.
 *  @param src Bluetooth device address source buffer.
 */
static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    ca20:	2206      	movs	r2, #6
    ca22:	4806      	ldr	r0, [pc, #24]	; (ca3c <set_random_address+0x50>)
    ca24:	4629      	mov	r1, r5
    ca26:	f008 fe19 	bl	1565c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    ca2a:	4b05      	ldr	r3, [pc, #20]	; (ca40 <set_random_address+0x54>)
    ca2c:	2201      	movs	r2, #1
    ca2e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
    ca32:	2000      	movs	r0, #0
}
    ca34:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    ca36:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ca3a:	e7fb      	b.n	ca34 <set_random_address+0x48>
    ca3c:	20000209 	.word	0x20000209
    ca40:	200001a0 	.word	0x200001a0

0000ca44 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    ca44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ca46:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    ca48:	460d      	mov	r5, r1
    ca4a:	b179      	cbz	r1, ca6c <id_create.constprop.0+0x28>
    ca4c:	4914      	ldr	r1, [pc, #80]	; (caa0 <id_create.constprop.0+0x5c>)
    ca4e:	4628      	mov	r0, r5
    ca50:	f008 fe8b 	bl	1576a <bt_addr_le_eq>
    ca54:	b950      	cbnz	r0, ca6c <id_create.constprop.0+0x28>
 *  @param dst Bluetooth LE device address destination buffer.
 *  @param src Bluetooth LE device address source buffer.
 */
static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    ca56:	4813      	ldr	r0, [pc, #76]	; (caa4 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    ca58:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ca5c:	2207      	movs	r2, #7
    ca5e:	4629      	mov	r1, r5
    ca60:	4420      	add	r0, r4
    ca62:	f008 fdfb 	bl	1565c <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    ca66:	2000      	movs	r0, #0
}
    ca68:	b003      	add	sp, #12
    ca6a:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    ca6c:	4668      	mov	r0, sp
    ca6e:	f008 fe1e 	bl	156ae <bt_addr_le_create_static>
			if (err) {
    ca72:	2800      	cmp	r0, #0
    ca74:	d1f8      	bne.n	ca68 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
    ca76:	4668      	mov	r0, sp
    ca78:	f7ff ffa0 	bl	c9bc <id_find>
    ca7c:	2800      	cmp	r0, #0
    ca7e:	daf5      	bge.n	ca6c <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ca80:	4b08      	ldr	r3, [pc, #32]	; (caa4 <id_create.constprop.0+0x60>)
    ca82:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    ca86:	441c      	add	r4, r3
    ca88:	2207      	movs	r2, #7
    ca8a:	4669      	mov	r1, sp
    ca8c:	4620      	mov	r0, r4
    ca8e:	f008 fde5 	bl	1565c <memcpy>
		if (addr) {
    ca92:	2d00      	cmp	r5, #0
    ca94:	d0e7      	beq.n	ca66 <id_create.constprop.0+0x22>
    ca96:	2207      	movs	r2, #7
    ca98:	4621      	mov	r1, r4
    ca9a:	4628      	mov	r0, r5
    ca9c:	e7e1      	b.n	ca62 <id_create.constprop.0+0x1e>
    ca9e:	bf00      	nop
    caa0:	00017bb4 	.word	0x00017bb4
    caa4:	200001a0 	.word	0x200001a0

0000caa8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    caa8:	b570      	push	{r4, r5, r6, lr}
    caaa:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    caac:	4604      	mov	r4, r0
    caae:	b918      	cbnz	r0, cab8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    cab0:	b1bd      	cbz	r5, cae2 <bt_id_create+0x3a>
			return -EINVAL;
    cab2:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
    cab6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
    cab8:	491c      	ldr	r1, [pc, #112]	; (cb2c <bt_id_create+0x84>)
    caba:	f008 fe56 	bl	1576a <bt_addr_le_eq>
    cabe:	2800      	cmp	r0, #0
    cac0:	d1f6      	bne.n	cab0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    cac2:	7823      	ldrb	r3, [r4, #0]
    cac4:	2b01      	cmp	r3, #1
    cac6:	d1f4      	bne.n	cab2 <bt_id_create+0xa>
    cac8:	79a3      	ldrb	r3, [r4, #6]
    caca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cace:	2bc0      	cmp	r3, #192	; 0xc0
    cad0:	d1ef      	bne.n	cab2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    cad2:	4620      	mov	r0, r4
    cad4:	f7ff ff72 	bl	c9bc <id_find>
    cad8:	2800      	cmp	r0, #0
    cada:	dbe9      	blt.n	cab0 <bt_id_create+0x8>
			return -EALREADY;
    cadc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cae0:	e7e9      	b.n	cab6 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    cae2:	4d13      	ldr	r5, [pc, #76]	; (cb30 <bt_id_create+0x88>)
    cae4:	79eb      	ldrb	r3, [r5, #7]
    cae6:	2b01      	cmp	r3, #1
    cae8:	d01c      	beq.n	cb24 <bt_id_create+0x7c>
    caea:	f3bf 8f5b 	dmb	ish
    caee:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    caf2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    caf6:	07db      	lsls	r3, r3, #31
    caf8:	d50b      	bpl.n	cb12 <bt_id_create+0x6a>
	new_id = bt_dev.id_count;
    cafa:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
    cafc:	4621      	mov	r1, r4
    cafe:	4630      	mov	r0, r6
    cb00:	f7ff ffa0 	bl	ca44 <id_create.constprop.0>
	if (err) {
    cb04:	2800      	cmp	r0, #0
    cb06:	d1d6      	bne.n	cab6 <bt_id_create+0xe>
		bt_dev.id_count++;
    cb08:	79eb      	ldrb	r3, [r5, #7]
    cb0a:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
    cb0c:	4630      	mov	r0, r6
		bt_dev.id_count++;
    cb0e:	71eb      	strb	r3, [r5, #7]
	return new_id;
    cb10:	e7d1      	b.n	cab6 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
    cb12:	2c00      	cmp	r4, #0
    cb14:	d0cd      	beq.n	cab2 <bt_id_create+0xa>
    cb16:	4905      	ldr	r1, [pc, #20]	; (cb2c <bt_id_create+0x84>)
    cb18:	4620      	mov	r0, r4
    cb1a:	f008 fe26 	bl	1576a <bt_addr_le_eq>
    cb1e:	2800      	cmp	r0, #0
    cb20:	d0eb      	beq.n	cafa <bt_id_create+0x52>
    cb22:	e7c6      	b.n	cab2 <bt_id_create+0xa>
		return -ENOMEM;
    cb24:	f06f 000b 	mvn.w	r0, #11
    cb28:	e7c5      	b.n	cab6 <bt_id_create+0xe>
    cb2a:	bf00      	nop
    cb2c:	00017bb4 	.word	0x00017bb4
    cb30:	200001a0 	.word	0x200001a0

0000cb34 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    cb34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
    cb36:	4604      	mov	r4, r0
    cb38:	b198      	cbz	r0, cb62 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    cb3a:	aa01      	add	r2, sp, #4
    cb3c:	2100      	movs	r1, #0
    cb3e:	f241 0009 	movw	r0, #4105	; 0x1009
    cb42:	f7ff fb99 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    cb46:	4606      	mov	r6, r0
    cb48:	b958      	cbnz	r0, cb62 <bt_id_read_public_addr+0x2e>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    cb4a:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    cb4c:	490f      	ldr	r1, [pc, #60]	; (cb8c <bt_id_read_public_addr+0x58>)

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    cb4e:	68dd      	ldr	r5, [r3, #12]
    cb50:	3501      	adds	r5, #1
    cb52:	2206      	movs	r2, #6
    cb54:	4628      	mov	r0, r5
    cb56:	f008 fd5a 	bl	1560e <memcmp>
    cb5a:	b928      	cbnz	r0, cb68 <bt_id_read_public_addr+0x34>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
    cb5c:	9801      	ldr	r0, [sp, #4]
    cb5e:	f000 fb51 	bl	d204 <net_buf_unref>
		return 0U;
    cb62:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    cb64:	b002      	add	sp, #8
    cb66:	bd70      	pop	{r4, r5, r6, pc}
    cb68:	4909      	ldr	r1, [pc, #36]	; (cb90 <bt_id_read_public_addr+0x5c>)
    cb6a:	2206      	movs	r2, #6
    cb6c:	4628      	mov	r0, r5
    cb6e:	f008 fd4e 	bl	1560e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    cb72:	2800      	cmp	r0, #0
    cb74:	d0f2      	beq.n	cb5c <bt_id_read_public_addr+0x28>
	memcpy(dst, src, sizeof(*dst));
    cb76:	2206      	movs	r2, #6
    cb78:	4629      	mov	r1, r5
    cb7a:	1c60      	adds	r0, r4, #1
    cb7c:	f008 fd6e 	bl	1565c <memcpy>
	net_buf_unref(rsp);
    cb80:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    cb82:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
    cb84:	f000 fb3e 	bl	d204 <net_buf_unref>
	return 1U;
    cb88:	2001      	movs	r0, #1
    cb8a:	e7eb      	b.n	cb64 <bt_id_read_public_addr+0x30>
    cb8c:	00017bc1 	.word	0x00017bc1
    cb90:	00017bbb 	.word	0x00017bbb

0000cb94 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    cb94:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    cb96:	4668      	mov	r0, sp
    cb98:	f7ff ffcc 	bl	cb34 <bt_id_read_public_addr>
    cb9c:	4b04      	ldr	r3, [pc, #16]	; (cbb0 <bt_setup_public_id_addr+0x1c>)
    cb9e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    cba0:	b118      	cbz	r0, cbaa <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
    cba2:	4669      	mov	r1, sp
    cba4:	2000      	movs	r0, #0
    cba6:	f7ff ff4d 	bl	ca44 <id_create.constprop.0>
}
    cbaa:	b003      	add	sp, #12
    cbac:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb0:	200001a0 	.word	0x200001a0

0000cbb4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    cbb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    cbb8:	4b16      	ldr	r3, [pc, #88]	; (cc14 <bt_read_static_addr+0x60>)
    cbba:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    cbbe:	07db      	lsls	r3, r3, #31
{
    cbc0:	4607      	mov	r7, r0
    cbc2:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    cbc4:	d404      	bmi.n	cbd0 <bt_read_static_addr+0x1c>
		LOG_WRN("Read Static Addresses command not available");
		return 0;
    cbc6:	2600      	movs	r6, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
    cbc8:	4630      	mov	r0, r6
    cbca:	b002      	add	sp, #8
    cbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    cbd0:	aa01      	add	r2, sp, #4
    cbd2:	2100      	movs	r1, #0
    cbd4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    cbd8:	f7ff fb4e 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    cbdc:	4604      	mov	r4, r0
    cbde:	2800      	cmp	r0, #0
    cbe0:	d1f1      	bne.n	cbc6 <bt_read_static_addr+0x12>
	rp = (void *)rsp->data;
    cbe2:	9b01      	ldr	r3, [sp, #4]
    cbe4:	68dd      	ldr	r5, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
    cbe6:	786e      	ldrb	r6, [r5, #1]
    cbe8:	4546      	cmp	r6, r8
    cbea:	bf28      	it	cs
    cbec:	4646      	movcs	r6, r8
	for (i = 0; i < cnt; i++) {
    cbee:	3502      	adds	r5, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    cbf0:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
    cbf4:	42a6      	cmp	r6, r4
    cbf6:	dc03      	bgt.n	cc00 <bt_read_static_addr+0x4c>
	net_buf_unref(rsp);
    cbf8:	9801      	ldr	r0, [sp, #4]
    cbfa:	f000 fb03 	bl	d204 <net_buf_unref>
	if (!cnt) {
    cbfe:	e7e3      	b.n	cbc8 <bt_read_static_addr+0x14>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
    cc00:	4629      	mov	r1, r5
    cc02:	fb08 7004 	mla	r0, r8, r4, r7
    cc06:	2216      	movs	r2, #22
    cc08:	f008 fd28 	bl	1565c <memcpy>
	for (i = 0; i < cnt; i++) {
    cc0c:	3401      	adds	r4, #1
    cc0e:	3516      	adds	r5, #22
    cc10:	e7f0      	b.n	cbf4 <bt_read_static_addr+0x40>
    cc12:	bf00      	nop
    cc14:	200001a0 	.word	0x200001a0

0000cc18 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    cc1a:	4e15      	ldr	r6, [pc, #84]	; (cc70 <bt_setup_random_id_addr+0x58>)
    cc1c:	79f4      	ldrb	r4, [r6, #7]
{
    cc1e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    cc20:	b92c      	cbnz	r4, cc2e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    cc22:	2101      	movs	r1, #1
    cc24:	a802      	add	r0, sp, #8
    cc26:	f7ff ffc5 	bl	cbb4 <bt_read_static_addr>
    cc2a:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    cc2c:	b9c8      	cbnz	r0, cc62 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    cc2e:	2100      	movs	r1, #0
    cc30:	4608      	mov	r0, r1
}
    cc32:	b009      	add	sp, #36	; 0x24
    cc34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    cc38:	f7ff bf36 	b.w	caa8 <bt_id_create>
    cc3c:	ab02      	add	r3, sp, #8
    cc3e:	fb07 3105 	mla	r1, r7, r5, r3
    cc42:	2206      	movs	r2, #6
    cc44:	f10d 0001 	add.w	r0, sp, #1
    cc48:	f008 fd08 	bl	1565c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    cc4c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
    cc4e:	4669      	mov	r1, sp
    cc50:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    cc52:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    cc56:	f7ff fef5 	bl	ca44 <id_create.constprop.0>
				if (err) {
    cc5a:	3401      	adds	r4, #1
    cc5c:	b110      	cbz	r0, cc64 <bt_setup_random_id_addr+0x4c>
}
    cc5e:	b009      	add	sp, #36	; 0x24
    cc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    cc62:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    cc64:	79f3      	ldrb	r3, [r6, #7]
    cc66:	b2e5      	uxtb	r5, r4
    cc68:	42ab      	cmp	r3, r5
    cc6a:	d8e7      	bhi.n	cc3c <bt_setup_random_id_addr+0x24>
			return 0;
    cc6c:	2000      	movs	r0, #0
    cc6e:	e7f6      	b.n	cc5e <bt_setup_random_id_addr+0x46>
    cc70:	200001a0 	.word	0x200001a0

0000cc74 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    cc74:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
    cc76:	460c      	mov	r4, r1
    cc78:	b149      	cbz	r1, cc8e <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    cc7a:	4b06      	ldr	r3, [pc, #24]	; (cc94 <bt_id_set_scan_own_addr+0x20>)
    cc7c:	781b      	ldrb	r3, [r3, #0]
    cc7e:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    cc80:	2000      	movs	r0, #0
    cc82:	f008 fd7f 	bl	15784 <bt_id_set_private_addr>
			if (err) {
    cc86:	b908      	cbnz	r0, cc8c <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    cc88:	2301      	movs	r3, #1
    cc8a:	7023      	strb	r3, [r4, #0]
			LOG_DBG("Not changing the address");
		}
	}

	return 0;
}
    cc8c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    cc8e:	f06f 0015 	mvn.w	r0, #21
    cc92:	e7fb      	b.n	cc8c <bt_id_set_scan_own_addr+0x18>
    cc94:	200001a0 	.word	0x200001a0

0000cc98 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    cc98:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    cc9a:	4c0a      	ldr	r4, [pc, #40]	; (ccc4 <bt_id_init+0x2c>)
    cc9c:	79e3      	ldrb	r3, [r4, #7]
    cc9e:	b10b      	cbz	r3, cca4 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    cca0:	2000      	movs	r0, #0
}
    cca2:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    cca4:	f7ff ff76 	bl	cb94 <bt_setup_public_id_addr>
		if (err) {
    cca8:	2800      	cmp	r0, #0
    ccaa:	d1fa      	bne.n	cca2 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    ccac:	79e3      	ldrb	r3, [r4, #7]
    ccae:	2b00      	cmp	r3, #0
    ccb0:	d1f6      	bne.n	cca0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    ccb2:	f7ff ffb1 	bl	cc18 <bt_setup_random_id_addr>
		if (err) {
    ccb6:	2800      	cmp	r0, #0
    ccb8:	d1f3      	bne.n	cca2 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    ccba:	1c60      	adds	r0, r4, #1
}
    ccbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    ccc0:	f7ff be94 	b.w	c9ec <set_random_address>
    ccc4:	200001a0 	.word	0x200001a0

0000ccc8 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    ccc8:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    ccca:	2102      	movs	r1, #2
{
    cccc:	b087      	sub	sp, #28
    ccce:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    ccd0:	f242 000c 	movw	r0, #8204	; 0x200c
    ccd4:	f7ff fa96 	bl	c204 <bt_hci_cmd_create>
	if (!buf) {
    ccd8:	4605      	mov	r5, r0
    ccda:	b318      	cbz	r0, cd24 <bt_le_scan_set_enable_legacy+0x5c>
	return net_buf_simple_add(&buf->b, len);
    ccdc:	2102      	movs	r1, #2
    ccde:	300c      	adds	r0, #12
    cce0:	f008 fdb6 	bl	15850 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    cce4:	2c01      	cmp	r4, #1
    cce6:	d11b      	bne.n	cd20 <bt_le_scan_set_enable_legacy+0x58>
    cce8:	f3bf 8f5b 	dmb	ish
    ccec:	4b0f      	ldr	r3, [pc, #60]	; (cd2c <bt_le_scan_set_enable_legacy+0x64>)
    ccee:	681b      	ldr	r3, [r3, #0]
    ccf0:	f3bf 8f5b 	dmb	ish
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    ccf4:	f3c3 2340 	ubfx	r3, r3, #9, #1
    ccf8:	7043      	strb	r3, [r0, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    ccfa:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    ccfc:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    ccfe:	425c      	negs	r4, r3
    cd00:	415c      	adcs	r4, r3
    cd02:	4a0a      	ldr	r2, [pc, #40]	; (cd2c <bt_le_scan_set_enable_legacy+0x64>)
    cd04:	9400      	str	r4, [sp, #0]
    cd06:	a903      	add	r1, sp, #12
    cd08:	4628      	mov	r0, r5
    cd0a:	2306      	movs	r3, #6
    cd0c:	f7ff fa68 	bl	c1e0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    cd10:	2200      	movs	r2, #0
    cd12:	4629      	mov	r1, r5
    cd14:	f242 000c 	movw	r0, #8204	; 0x200c
    cd18:	f7ff faae 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    cd1c:	b007      	add	sp, #28
    cd1e:	bd30      	pop	{r4, r5, pc}
    cd20:	2300      	movs	r3, #0
    cd22:	e7e9      	b.n	ccf8 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
    cd24:	f06f 0068 	mvn.w	r0, #104	; 0x68
    cd28:	e7f8      	b.n	cd1c <bt_le_scan_set_enable_legacy+0x54>
    cd2a:	bf00      	nop
    cd2c:	20000274 	.word	0x20000274

0000cd30 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    cd30:	4b01      	ldr	r3, [pc, #4]	; (cd38 <bt_scan_reset+0x8>)
    cd32:	2200      	movs	r2, #0
    cd34:	601a      	str	r2, [r3, #0]
}
    cd36:	4770      	bx	lr
    cd38:	200020a8 	.word	0x200020a8

0000cd3c <bt_le_scan_update>:
    cd3c:	4b0a      	ldr	r3, [pc, #40]	; (cd68 <bt_le_scan_update+0x2c>)
    cd3e:	f3bf 8f5b 	dmb	ish
    cd42:	681a      	ldr	r2, [r3, #0]
    cd44:	f3bf 8f5b 	dmb	ish
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    cd48:	f3c2 10c0 	ubfx	r0, r2, #7, #1
    cd4c:	0612      	lsls	r2, r2, #24
    cd4e:	d408      	bmi.n	cd62 <bt_le_scan_update+0x26>
    cd50:	f3bf 8f5b 	dmb	ish
    cd54:	681b      	ldr	r3, [r3, #0]
    cd56:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    cd5a:	065b      	lsls	r3, r3, #25
    cd5c:	d501      	bpl.n	cd62 <bt_le_scan_update+0x26>
	return bt_le_scan_set_enable_legacy(enable);
    cd5e:	f7ff bfb3 	b.w	ccc8 <bt_le_scan_set_enable_legacy>
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    cd62:	2000      	movs	r0, #0
    cd64:	4770      	bx	lr
    cd66:	bf00      	nop
    cd68:	20000274 	.word	0x20000274

0000cd6c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    cd70:	f100 060c 	add.w	r6, r0, #12
    cd74:	b089      	sub	sp, #36	; 0x24
    cd76:	4604      	mov	r4, r0
    cd78:	4630      	mov	r0, r6
    cd7a:	f008 fd88 	bl	1588e <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    cd7e:	f8df b154 	ldr.w	fp, [pc, #340]	; ced4 <bt_hci_le_adv_report+0x168>
    cd82:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    cd84:	f1b8 0f00 	cmp.w	r8, #0
    cd88:	d102      	bne.n	cd90 <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    cd8a:	b009      	add	sp, #36	; 0x24
    cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    cd90:	8a23      	ldrh	r3, [r4, #16]
    cd92:	2b08      	cmp	r3, #8
    cd94:	d9f9      	bls.n	cd8a <bt_hci_le_adv_report+0x1e>
	return net_buf_simple_pull_mem(&buf->b, len);
    cd96:	2109      	movs	r1, #9
    cd98:	4630      	mov	r0, r6
    cd9a:	f008 fd70 	bl	1587e <net_buf_simple_pull_mem>
		if (buf->len < evt->length + sizeof(adv_info.rssi)) {
    cd9e:	7a03      	ldrb	r3, [r0, #8]
    cda0:	8a22      	ldrh	r2, [r4, #16]
    cda2:	3301      	adds	r3, #1
    cda4:	429a      	cmp	r2, r3
    cda6:	4605      	mov	r5, r0
    cda8:	d3ef      	bcc.n	cd8a <bt_hci_le_adv_report+0x1e>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    cdaa:	2301      	movs	r3, #1
    cdac:	f8ad 301c 	strh.w	r3, [sp, #28]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    cdb0:	237f      	movs	r3, #127	; 0x7f
    cdb2:	f88d 3016 	strb.w	r3, [sp, #22]
		adv_info.rssi = evt->data[evt->length];
    cdb6:	7a03      	ldrb	r3, [r0, #8]
    cdb8:	4403      	add	r3, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    cdba:	1c47      	adds	r7, r0, #1
		adv_info.rssi = evt->data[evt->length];
    cdbc:	7a5b      	ldrb	r3, [r3, #9]
    cdbe:	f88d 3015 	strb.w	r3, [sp, #21]
		adv_info.sid = BT_GAP_SID_INVALID;
    cdc2:	23ff      	movs	r3, #255	; 0xff
    cdc4:	f88d 3014 	strb.w	r3, [sp, #20]
		adv_info.interval = 0U;
    cdc8:	2300      	movs	r3, #0
    cdca:	f8ad 301a 	strh.w	r3, [sp, #26]
		adv_info.adv_type = evt->evt_type;
    cdce:	7802      	ldrb	r2, [r0, #0]
    cdd0:	f88d 2017 	strb.w	r2, [sp, #23]
	switch (evt_type) {
    cdd4:	2a04      	cmp	r2, #4
    cdd6:	bf9c      	itt	ls
    cdd8:	4b3f      	ldrls	r3, [pc, #252]	; (ced8 <bt_hci_le_adv_report+0x16c>)
    cdda:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    cddc:	f8ad 3018 	strh.w	r3, [sp, #24]
    cde0:	4b3e      	ldr	r3, [pc, #248]	; (cedc <bt_hci_le_adv_report+0x170>)
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    cde2:	f890 a008 	ldrb.w	sl, [r0, #8]
    cde6:	f3bf 8f5b 	dmb	ish
    cdea:	681b      	ldr	r3, [r3, #0]
    cdec:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    cdf0:	061a      	lsls	r2, r3, #24
    cdf2:	d503      	bpl.n	cdfc <bt_hci_le_adv_report+0x90>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    cdf4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    cdf8:	075b      	lsls	r3, r3, #29
    cdfa:	d460      	bmi.n	cebe <bt_hci_le_adv_report+0x152>
	if (bt_addr_le_is_resolved(addr)) {
    cdfc:	4638      	mov	r0, r7
    cdfe:	f008 fc6e 	bl	156de <bt_addr_le_is_resolved>
    ce02:	2800      	cmp	r0, #0
    ce04:	d048      	beq.n	ce98 <bt_hci_le_adv_report+0x12c>
		bt_addr_le_copy_resolved(&id_addr, addr);
    ce06:	4639      	mov	r1, r7
    ce08:	a802      	add	r0, sp, #8
    ce0a:	f008 fc5e 	bl	156ca <bt_addr_le_copy_resolved>
	if (scan_dev_found_cb) {
    ce0e:	f8db 3000 	ldr.w	r3, [fp]
    ce12:	b1a3      	cbz	r3, ce3e <bt_hci_le_adv_report+0xd2>
	state->offset = net_buf_simple_headroom(buf);
    ce14:	4630      	mov	r0, r6
    ce16:	f008 fd42 	bl	1589e <net_buf_simple_headroom>
	state->len = buf->len;
    ce1a:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    ce1c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    ce20:	f99d 1015 	ldrsb.w	r1, [sp, #21]
    ce24:	f8db c000 	ldr.w	ip, [fp]
		buf->len = len;
    ce28:	f8a4 a010 	strh.w	sl, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    ce2c:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    ce2e:	4633      	mov	r3, r6
    ce30:	a802      	add	r0, sp, #8
    ce32:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    ce34:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
    ce36:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
    ce38:	fa13 f389 	uxtah	r3, r3, r9
    ce3c:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
    ce3e:	ab02      	add	r3, sp, #8
    ce40:	9304      	str	r3, [sp, #16]
    ce42:	4b27      	ldr	r3, [pc, #156]	; (cee0 <bt_hci_le_adv_report+0x174>)
    ce44:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ce46:	2b00      	cmp	r3, #0
    ce48:	d037      	beq.n	ceba <bt_hci_le_adv_report+0x14e>
	return node->next;
    ce4a:	681a      	ldr	r2, [r3, #0]
    ce4c:	b102      	cbz	r2, ce50 <bt_hci_le_adv_report+0xe4>
    ce4e:	3a08      	subs	r2, #8
		if (listener->recv) {
    ce50:	f853 1c08 	ldr.w	r1, [r3, #-8]
    ce54:	b1b9      	cbz	r1, ce86 <bt_hci_le_adv_report+0x11a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ce56:	4617      	mov	r7, r2
    ce58:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
    ce5c:	4630      	mov	r0, r6
    ce5e:	9201      	str	r2, [sp, #4]
    ce60:	f008 fd1d 	bl	1589e <net_buf_simple_headroom>
			listener->recv(info, buf);
    ce64:	9a01      	ldr	r2, [sp, #4]
	state->len = buf->len;
    ce66:	8a23      	ldrh	r3, [r4, #16]
			buf->len = len;
    ce68:	f8a4 a010 	strh.w	sl, [r4, #16]
			listener->recv(info, buf);
    ce6c:	6812      	ldr	r2, [r2, #0]
    ce6e:	9300      	str	r3, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    ce70:	4681      	mov	r9, r0
    ce72:	4631      	mov	r1, r6
    ce74:	a804      	add	r0, sp, #16
    ce76:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    ce78:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
    ce7a:	9b00      	ldr	r3, [sp, #0]
    ce7c:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
    ce7e:	fa12 f289 	uxtah	r2, r2, r9
    ce82:	60e2      	str	r2, [r4, #12]
}
    ce84:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ce86:	b1c2      	cbz	r2, ceba <bt_hci_le_adv_report+0x14e>
    ce88:	6897      	ldr	r7, [r2, #8]
    ce8a:	6813      	ldr	r3, [r2, #0]
    ce8c:	b19f      	cbz	r7, ceb6 <bt_hci_le_adv_report+0x14a>
    ce8e:	3f08      	subs	r7, #8
		if (listener->recv) {
    ce90:	2b00      	cmp	r3, #0
    ce92:	d1e3      	bne.n	ce5c <bt_hci_le_adv_report+0xf0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ce94:	463a      	mov	r2, r7
    ce96:	e7f7      	b.n	ce88 <bt_hci_le_adv_report+0x11c>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    ce98:	786b      	ldrb	r3, [r5, #1]
    ce9a:	2bff      	cmp	r3, #255	; 0xff
    ce9c:	d105      	bne.n	ceaa <bt_hci_le_adv_report+0x13e>
	memcpy(dst, src, sizeof(*dst));
    ce9e:	4911      	ldr	r1, [pc, #68]	; (cee4 <bt_hci_le_adv_report+0x178>)
    cea0:	2207      	movs	r2, #7
    cea2:	a802      	add	r0, sp, #8
    cea4:	f008 fbda 	bl	1565c <memcpy>
}
    cea8:	e7b1      	b.n	ce0e <bt_hci_le_adv_report+0xa2>
		bt_addr_le_copy(&id_addr,
    ceaa:	4639      	mov	r1, r7
    ceac:	f008 fc65 	bl	1577a <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    ceb0:	2207      	movs	r2, #7
    ceb2:	4601      	mov	r1, r0
    ceb4:	e7f5      	b.n	cea2 <bt_hci_le_adv_report+0x136>
		if (listener->recv) {
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d1d0      	bne.n	ce5c <bt_hci_le_adv_report+0xf0>
	info->addr = NULL;
    ceba:	2300      	movs	r3, #0
    cebc:	9304      	str	r3, [sp, #16]
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    cebe:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    cec0:	4630      	mov	r0, r6
    cec2:	3101      	adds	r1, #1
    cec4:	f108 38ff 	add.w	r8, r8, #4294967295
    cec8:	f008 fcd1 	bl	1586e <net_buf_simple_pull>
    cecc:	fa5f f888 	uxtb.w	r8, r8
    ced0:	e758      	b.n	cd84 <bt_hci_le_adv_report+0x18>
    ced2:	bf00      	nop
    ced4:	200020a8 	.word	0x200020a8
    ced8:	00017cd3 	.word	0x00017cd3
    cedc:	20000274 	.word	0x20000274
    cee0:	200020a0 	.word	0x200020a0
    cee4:	00017bb4 	.word	0x00017bb4

0000cee8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    cee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ceec:	4e62      	ldr	r6, [pc, #392]	; (d078 <bt_le_scan_start+0x190>)
    ceee:	f3bf 8f5b 	dmb	ish
    cef2:	6833      	ldr	r3, [r6, #0]
    cef4:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cef8:	f013 0f04 	tst.w	r3, #4
{
    cefc:	4605      	mov	r5, r0
    cefe:	460f      	mov	r7, r1
    cf00:	4634      	mov	r4, r6
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cf02:	f000 80b5 	beq.w	d070 <bt_le_scan_start+0x188>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    cf06:	7802      	ldrb	r2, [r0, #0]
    cf08:	2a01      	cmp	r2, #1
    cf0a:	d905      	bls.n	cf18 <bt_le_scan_start+0x30>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    cf0c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    cf10:	4620      	mov	r0, r4
    cf12:	b003      	add	sp, #12
    cf14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    cf18:	6843      	ldr	r3, [r0, #4]
    cf1a:	2b0f      	cmp	r3, #15
    cf1c:	d8f6      	bhi.n	cf0c <bt_le_scan_start+0x24>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    cf1e:	8900      	ldrh	r0, [r0, #8]
    cf20:	1f03      	subs	r3, r0, #4
    cf22:	b29b      	uxth	r3, r3
    cf24:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
    cf28:	4563      	cmp	r3, ip
    cf2a:	d8ef      	bhi.n	cf0c <bt_le_scan_start+0x24>
	if (param->window < 0x0004 || param->window > 0x4000) {
    cf2c:	8969      	ldrh	r1, [r5, #10]
    cf2e:	1f0b      	subs	r3, r1, #4
    cf30:	b29b      	uxth	r3, r3
    cf32:	4563      	cmp	r3, ip
    cf34:	d8ea      	bhi.n	cf0c <bt_le_scan_start+0x24>
	if (param->window > param->interval) {
    cf36:	4288      	cmp	r0, r1
    cf38:	d3e8      	bcc.n	cf0c <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
    cf3a:	b98a      	cbnz	r2, cf60 <bt_le_scan_start+0x78>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf3c:	f3bf 8f5b 	dmb	ish
    cf40:	e854 0f00 	ldrex	r0, [r4]
    cf44:	f040 0380 	orr.w	r3, r0, #128	; 0x80
    cf48:	e844 3200 	strex	r2, r3, [r4]
    cf4c:	2a00      	cmp	r2, #0
    cf4e:	d1f7      	bne.n	cf40 <bt_le_scan_start+0x58>
    cf50:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    cf54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    cf58:	d007      	beq.n	cf6a <bt_le_scan_start+0x82>
		return -EALREADY;
    cf5a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    cf5e:	e7d7      	b.n	cf10 <bt_le_scan_start+0x28>
	if (param->type && !bt_id_scan_random_addr_check()) {
    cf60:	f008 fc26 	bl	157b0 <bt_id_scan_random_addr_check>
    cf64:	2800      	cmp	r0, #0
    cf66:	d1e9      	bne.n	cf3c <bt_le_scan_start+0x54>
    cf68:	e7d0      	b.n	cf0c <bt_le_scan_start+0x24>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf6a:	f3bf 8f5b 	dmb	ish
    cf6e:	6833      	ldr	r3, [r6, #0]
    cf70:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    cf74:	0659      	lsls	r1, r3, #25
    cf76:	d509      	bpl.n	cf8c <bt_le_scan_start+0xa4>
	return bt_le_scan_set_enable_legacy(enable);
    cf78:	f7ff fea6 	bl	ccc8 <bt_le_scan_set_enable_legacy>
		if (err) {
    cf7c:	4604      	mov	r4, r0
    cf7e:	b128      	cbz	r0, cf8c <bt_le_scan_start+0xa4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cf80:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cf84:	483c      	ldr	r0, [pc, #240]	; (d078 <bt_le_scan_start+0x190>)
    cf86:	f008 fc15 	bl	157b4 <atomic_and>
		return err;
    cf8a:	e7c1      	b.n	cf10 <bt_le_scan_start+0x28>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    cf8c:	686b      	ldr	r3, [r5, #4]
	if (val) {
    cf8e:	07da      	lsls	r2, r3, #31
    cf90:	d515      	bpl.n	cfbe <bt_le_scan_start+0xd6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf92:	f3bf 8f5b 	dmb	ish
    cf96:	e856 3f00 	ldrex	r3, [r6]
    cf9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cf9e:	e846 3200 	strex	r2, r3, [r6]
    cfa2:	2a00      	cmp	r2, #0
    cfa4:	d1f7      	bne.n	cf96 <bt_le_scan_start+0xae>
    cfa6:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
    cfaa:	89ac      	ldrh	r4, [r5, #12]
    cfac:	b16c      	cbz	r4, cfca <bt_le_scan_start+0xe2>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cfae:	4832      	ldr	r0, [pc, #200]	; (d078 <bt_le_scan_start+0x190>)
    cfb0:	f06f 0180 	mvn.w	r1, #128	; 0x80
    cfb4:	f008 fbfe 	bl	157b4 <atomic_and>
			return -ENOTSUP;
    cfb8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    cfbc:	e7a8      	b.n	cf10 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cfbe:	f46f 7100 	mvn.w	r1, #512	; 0x200
    cfc2:	482d      	ldr	r0, [pc, #180]	; (d078 <bt_le_scan_start+0x190>)
    cfc4:	f008 fbf6 	bl	157b4 <atomic_and>
    cfc8:	e7ef      	b.n	cfaa <bt_le_scan_start+0xc2>
		err = start_le_scan_legacy(param->type, param->interval,
    cfca:	f895 8000 	ldrb.w	r8, [r5]
    cfce:	f8b5 9008 	ldrh.w	r9, [r5, #8]
					   param->window);
    cfd2:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    cfd4:	4621      	mov	r1, r4
    cfd6:	2207      	movs	r2, #7
    cfd8:	4668      	mov	r0, sp
    cfda:	f008 fb4a 	bl	15672 <memset>
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    cfde:	f108 33ff 	add.w	r3, r8, #4294967295
    cfe2:	4258      	negs	r0, r3
    cfe4:	f10d 0105 	add.w	r1, sp, #5
    cfe8:	4158      	adcs	r0, r3
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    cfea:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.scan_type = scan_type;
    cfee:	f88d 8000 	strb.w	r8, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
    cff2:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    cff6:	f8ad 5003 	strh.w	r5, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    cffa:	f7ff fe3b 	bl	cc74 <bt_id_set_scan_own_addr>
	if (err) {
    cffe:	4604      	mov	r4, r0
    d000:	2800      	cmp	r0, #0
    d002:	d1bd      	bne.n	cf80 <bt_le_scan_start+0x98>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    d004:	2107      	movs	r1, #7
    d006:	f242 000b 	movw	r0, #8203	; 0x200b
    d00a:	f7ff f8fb 	bl	c204 <bt_hci_cmd_create>
	if (!buf) {
    d00e:	4605      	mov	r5, r0
    d010:	b358      	cbz	r0, d06a <bt_le_scan_start+0x182>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    d012:	2207      	movs	r2, #7
    d014:	4669      	mov	r1, sp
    d016:	300c      	adds	r0, #12
    d018:	f008 fc20 	bl	1585c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    d01c:	4622      	mov	r2, r4
    d01e:	4629      	mov	r1, r5
    d020:	f242 000b 	movw	r0, #8203	; 0x200b
    d024:	f7ff f928 	bl	c278 <bt_hci_cmd_send_sync>
	if (err) {
    d028:	4604      	mov	r4, r0
    d02a:	2800      	cmp	r0, #0
    d02c:	d1a8      	bne.n	cf80 <bt_le_scan_start+0x98>
	return bt_le_scan_set_enable_legacy(enable);
    d02e:	2001      	movs	r0, #1
    d030:	f7ff fe4a 	bl	ccc8 <bt_le_scan_set_enable_legacy>
	if (err) {
    d034:	4604      	mov	r4, r0
    d036:	2800      	cmp	r0, #0
    d038:	d1a2      	bne.n	cf80 <bt_le_scan_start+0x98>
	if (val) {
    d03a:	f1b8 0f01 	cmp.w	r8, #1
    d03e:	d10e      	bne.n	d05e <bt_le_scan_start+0x176>
    d040:	f3bf 8f5b 	dmb	ish
    d044:	e856 3f00 	ldrex	r3, [r6]
    d048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    d04c:	e846 3200 	strex	r2, r3, [r6]
    d050:	2a00      	cmp	r2, #0
    d052:	d1f7      	bne.n	d044 <bt_le_scan_start+0x15c>
    d054:	f3bf 8f5b 	dmb	ish
	scan_dev_found_cb = cb;
    d058:	4b08      	ldr	r3, [pc, #32]	; (d07c <bt_le_scan_start+0x194>)
    d05a:	601f      	str	r7, [r3, #0]
	return 0;
    d05c:	e758      	b.n	cf10 <bt_le_scan_start+0x28>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d05e:	f46f 7180 	mvn.w	r1, #256	; 0x100
    d062:	4805      	ldr	r0, [pc, #20]	; (d078 <bt_le_scan_start+0x190>)
    d064:	f008 fba6 	bl	157b4 <atomic_and>
	if (err) {
    d068:	e7f6      	b.n	d058 <bt_le_scan_start+0x170>
		return -ENOBUFS;
    d06a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    d06e:	e787      	b.n	cf80 <bt_le_scan_start+0x98>
		return -EAGAIN;
    d070:	f06f 040a 	mvn.w	r4, #10
    d074:	e74c      	b.n	cf10 <bt_le_scan_start+0x28>
    d076:	bf00      	nop
    d078:	20000274 	.word	0x20000274
    d07c:	200020a8 	.word	0x200020a8

0000d080 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
    d080:	4b02      	ldr	r3, [pc, #8]	; (d08c <net_buf_pool_get+0xc>)
    d082:	222c      	movs	r2, #44	; 0x2c
    d084:	fb02 3000 	mla	r0, r2, r0, r3
    d088:	4770      	bx	lr
    d08a:	bf00      	nop
    d08c:	200006c0 	.word	0x200006c0

0000d090 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d090:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    d092:	4b06      	ldr	r3, [pc, #24]	; (d0ac <net_buf_id+0x1c>)
    d094:	212c      	movs	r1, #44	; 0x2c
    d096:	fb01 3302 	mla	r3, r1, r2, r3
    d09a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d09c:	7f1b      	ldrb	r3, [r3, #28]
    d09e:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
    d0a0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d0a2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
    d0a6:	fbb0 f0f3 	udiv	r0, r0, r3
    d0aa:	4770      	bx	lr
    d0ac:	200006c0 	.word	0x200006c0

0000d0b0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
    d0b0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d0b2:	4b0a      	ldr	r3, [pc, #40]	; (d0dc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d0b4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d0b6:	242c      	movs	r4, #44	; 0x2c
    d0b8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
    d0bc:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d0c0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
    d0c2:	681a      	ldr	r2, [r3, #0]
    d0c4:	4294      	cmp	r4, r2
    d0c6:	bf94      	ite	ls
    d0c8:	600c      	strls	r4, [r1, #0]
    d0ca:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    d0cc:	e9d3 5400 	ldrd	r5, r4, [r3]
    d0d0:	f7ff ffde 	bl	d090 <net_buf_id>
}
    d0d4:	fb05 4000 	mla	r0, r5, r0, r4
    d0d8:	bd38      	pop	{r3, r4, r5, pc}
    d0da:	bf00      	nop
    d0dc:	200006c0 	.word	0x200006c0

0000d0e0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
    d0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0e4:	4605      	mov	r5, r0
    d0e6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d0e8:	4610      	mov	r0, r2
    d0ea:	4619      	mov	r1, r3
{
    d0ec:	4691      	mov	r9, r2
    d0ee:	4698      	mov	r8, r3
    d0f0:	4617      	mov	r7, r2
    d0f2:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
    d0f4:	f009 fe29 	bl	16d4a <sys_clock_timeout_end_calc>
    d0f8:	4682      	mov	sl, r0
    d0fa:	468b      	mov	fp, r1
	__asm__ volatile(
    d0fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    d100:	f3ef 8111 	mrs	r1, BASEPRI
    d104:	f383 8812 	msr	BASEPRI_MAX, r3
    d108:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    d10c:	8b6b      	ldrh	r3, [r5, #26]
    d10e:	2b00      	cmp	r3, #0
    d110:	d058      	beq.n	d1c4 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    d112:	8b2a      	ldrh	r2, [r5, #24]
    d114:	429a      	cmp	r2, r3
    d116:	d93c      	bls.n	d192 <net_buf_alloc_len+0xb2>
    d118:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
    d11a:	2200      	movs	r2, #0
    d11c:	2300      	movs	r3, #0
    d11e:	4628      	mov	r0, r5
    d120:	f004 fb3c 	bl	1179c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
    d124:	9900      	ldr	r1, [sp, #0]
    d126:	4604      	mov	r4, r0
    d128:	2800      	cmp	r0, #0
    d12a:	d032      	beq.n	d192 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
    d12c:	f381 8811 	msr	BASEPRI, r1
    d130:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    d134:	9b01      	ldr	r3, [sp, #4]
    d136:	2b00      	cmp	r3, #0
    d138:	d055      	beq.n	d1e6 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    d13a:	ea58 0309 	orrs.w	r3, r8, r9
    d13e:	d00f      	beq.n	d160 <net_buf_alloc_len+0x80>
    d140:	f1b8 3fff 	cmp.w	r8, #4294967295
    d144:	bf08      	it	eq
    d146:	f1b9 3fff 	cmpeq.w	r9, #4294967295
    d14a:	d009      	beq.n	d160 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
    d14c:	f005 f9ac 	bl	124a8 <sys_clock_tick_get>
    d150:	ebba 0700 	subs.w	r7, sl, r0
    d154:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
    d158:	2e00      	cmp	r6, #0
    d15a:	bfbc      	itt	lt
    d15c:	2700      	movlt	r7, #0
    d15e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d160:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
    d162:	4d26      	ldr	r5, [pc, #152]	; (d1fc <net_buf_alloc_len+0x11c>)
    d164:	f04f 082c 	mov.w	r8, #44	; 0x2c
    d168:	fb08 5303 	mla	r3, r8, r3, r5
    d16c:	463a      	mov	r2, r7
    d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d170:	681b      	ldr	r3, [r3, #0]
    d172:	a901      	add	r1, sp, #4
    d174:	f8d3 9000 	ldr.w	r9, [r3]
    d178:	4620      	mov	r0, r4
    d17a:	4633      	mov	r3, r6
    d17c:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    d17e:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
    d180:	2800      	cmp	r0, #0
    d182:	d131      	bne.n	d1e8 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
    d184:	7aa0      	ldrb	r0, [r4, #10]
    d186:	4621      	mov	r1, r4
    d188:	fb00 5008 	mla	r0, r0, r8, r5
    d18c:	f009 fc59 	bl	16a42 <k_queue_prepend>
}
    d190:	e024      	b.n	d1dc <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
    d192:	8b68      	ldrh	r0, [r5, #26]
    d194:	1e43      	subs	r3, r0, #1
    d196:	836b      	strh	r3, [r5, #26]
    d198:	f381 8811 	msr	BASEPRI, r1
    d19c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d1a0:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    d1a2:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    d1a4:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
    d1a6:	331b      	adds	r3, #27
    d1a8:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
    d1ac:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
    d1ae:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
    d1b2:	4b12      	ldr	r3, [pc, #72]	; (d1fc <net_buf_alloc_len+0x11c>)
    d1b4:	4a12      	ldr	r2, [pc, #72]	; (d200 <net_buf_alloc_len+0x120>)
    d1b6:	1aeb      	subs	r3, r5, r3
    d1b8:	109b      	asrs	r3, r3, #2
    d1ba:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
    d1bc:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
    d1be:	7f2b      	ldrb	r3, [r5, #28]
    d1c0:	72e3      	strb	r3, [r4, #11]
		goto success;
    d1c2:	e7b7      	b.n	d134 <net_buf_alloc_len+0x54>
    d1c4:	f381 8811 	msr	BASEPRI, r1
    d1c8:	f3bf 8f6f 	isb	sy
    d1cc:	464a      	mov	r2, r9
    d1ce:	4643      	mov	r3, r8
    d1d0:	4628      	mov	r0, r5
    d1d2:	f004 fae3 	bl	1179c <z_impl_k_queue_get>
	if (!buf) {
    d1d6:	4604      	mov	r4, r0
    d1d8:	2800      	cmp	r0, #0
    d1da:	d1ab      	bne.n	d134 <net_buf_alloc_len+0x54>
		return NULL;
    d1dc:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
    d1de:	4620      	mov	r0, r4
    d1e0:	b003      	add	sp, #12
    d1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
    d1e6:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
    d1e8:	2300      	movs	r3, #0
	buf->ref   = 1U;
    d1ea:	2201      	movs	r2, #1
	buf->frags = NULL;
    d1ec:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
    d1ee:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
    d1f0:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
    d1f2:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    d1f4:	6963      	ldr	r3, [r4, #20]
    d1f6:	8262      	strh	r2, [r4, #18]
    d1f8:	60e3      	str	r3, [r4, #12]
	return buf;
    d1fa:	e7f0      	b.n	d1de <net_buf_alloc_len+0xfe>
    d1fc:	200006c0 	.word	0x200006c0
    d200:	ba2e8ba3 	.word	0xba2e8ba3

0000d204 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d208:	4d16      	ldr	r5, [pc, #88]	; (d264 <net_buf_unref+0x60>)
    d20a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    d20c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
    d20e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
    d210:	b90c      	cbnz	r4, d216 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
    d216:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
    d218:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
    d21c:	3b01      	subs	r3, #1
    d21e:	b2db      	uxtb	r3, r3
    d220:	7223      	strb	r3, [r4, #8]
    d222:	2b00      	cmp	r3, #0
    d224:	d1f5      	bne.n	d212 <net_buf_unref+0xe>
		if (buf->__buf) {
    d226:	6961      	ldr	r1, [r4, #20]
    d228:	b159      	cbz	r1, d242 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    d22a:	7a63      	ldrb	r3, [r4, #9]
    d22c:	07db      	lsls	r3, r3, #31
    d22e:	d407      	bmi.n	d240 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    d230:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
    d232:	fb07 5303 	mla	r3, r7, r3, r5
    d236:	4620      	mov	r0, r4
    d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d23a:	681b      	ldr	r3, [r3, #0]
    d23c:	689b      	ldr	r3, [r3, #8]
    d23e:	4798      	blx	r3
			buf->__buf = NULL;
    d240:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
    d242:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
    d244:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
    d246:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
    d24a:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
    d24c:	6a1b      	ldr	r3, [r3, #32]
    d24e:	b11b      	cbz	r3, d258 <net_buf_unref+0x54>
			pool->destroy(buf);
    d250:	4620      	mov	r0, r4
    d252:	4798      	blx	r3
{
    d254:	4644      	mov	r4, r8
    d256:	e7db      	b.n	d210 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
    d258:	4621      	mov	r1, r4
    d25a:	fb00 5007 	mla	r0, r0, r7, r5
    d25e:	f009 fbf0 	bl	16a42 <k_queue_prepend>
}
    d262:	e7f7      	b.n	d254 <net_buf_unref+0x50>
    d264:	200006c0 	.word	0x200006c0

0000d268 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    d268:	4b08      	ldr	r3, [pc, #32]	; (d28c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d26a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d26c:	1ac3      	subs	r3, r0, r3
{
    d26e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d270:	4907      	ldr	r1, [pc, #28]	; (d290 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    d272:	109b      	asrs	r3, r3, #2
{
    d274:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d276:	4359      	muls	r1, r3
    d278:	4806      	ldr	r0, [pc, #24]	; (d294 <onoff_stop+0x2c>)
    d27a:	2240      	movs	r2, #64	; 0x40
    d27c:	f008 fb2f 	bl	158de <stop>
	notify(mgr, res);
    d280:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    d282:	4601      	mov	r1, r0
	notify(mgr, res);
    d284:	4620      	mov	r0, r4
}
    d286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    d28a:	4718      	bx	r3
    d28c:	200020c0 	.word	0x200020c0
    d290:	b6db6db7 	.word	0xb6db6db7
    d294:	000170f4 	.word	0x000170f4

0000d298 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    d298:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    d29a:	4c0c      	ldr	r4, [pc, #48]	; (d2cc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d29c:	4a0c      	ldr	r2, [pc, #48]	; (d2d0 <onoff_start+0x38>)
    d29e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    d2a0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d2a2:	9300      	str	r3, [sp, #0]
{
    d2a4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d2a6:	460b      	mov	r3, r1
    d2a8:	490a      	ldr	r1, [pc, #40]	; (d2d4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    d2aa:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d2ac:	4361      	muls	r1, r4
{
    d2ae:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    d2b0:	4809      	ldr	r0, [pc, #36]	; (d2d8 <onoff_start+0x40>)
    d2b2:	f008 fb41 	bl	15938 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    d2b6:	1e01      	subs	r1, r0, #0
    d2b8:	da05      	bge.n	d2c6 <onoff_start+0x2e>
		notify(mgr, err);
    d2ba:	4630      	mov	r0, r6
    d2bc:	462b      	mov	r3, r5
	}
}
    d2be:	b002      	add	sp, #8
    d2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    d2c4:	4718      	bx	r3
}
    d2c6:	b002      	add	sp, #8
    d2c8:	bd70      	pop	{r4, r5, r6, pc}
    d2ca:	bf00      	nop
    d2cc:	200020c0 	.word	0x200020c0
    d2d0:	000159a5 	.word	0x000159a5
    d2d4:	b6db6db7 	.word	0xb6db6db7
    d2d8:	000170f4 	.word	0x000170f4

0000d2dc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d2dc:	2200      	movs	r2, #0
{
    d2de:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d2e0:	2101      	movs	r1, #1
{
    d2e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    d2e4:	4610      	mov	r0, r2
    d2e6:	f7fe fa09 	bl	b6fc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    d2ea:	480f      	ldr	r0, [pc, #60]	; (d328 <clk_init+0x4c>)
    d2ec:	f002 fbca 	bl	fa84 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    d2f0:	4b0e      	ldr	r3, [pc, #56]	; (d32c <clk_init+0x50>)
    d2f2:	4298      	cmp	r0, r3
    d2f4:	d115      	bne.n	d322 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    d2f6:	f009 f8dc 	bl	164b2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    d2fa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    d2fc:	490c      	ldr	r1, [pc, #48]	; (d330 <clk_init+0x54>)
    d2fe:	4630      	mov	r0, r6
    d300:	f008 f82e 	bl	15360 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    d304:	2800      	cmp	r0, #0
    d306:	db0b      	blt.n	d320 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d308:	2501      	movs	r5, #1
    d30a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    d30c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    d30e:	4908      	ldr	r1, [pc, #32]	; (d330 <clk_init+0x54>)
    d310:	f104 001c 	add.w	r0, r4, #28
    d314:	f008 f824 	bl	15360 <onoff_manager_init>
		if (err < 0) {
    d318:	2800      	cmp	r0, #0
    d31a:	db01      	blt.n	d320 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    d31c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    d31e:	2000      	movs	r0, #0
}
    d320:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    d322:	f06f 0004 	mvn.w	r0, #4
    d326:	e7fb      	b.n	d320 <clk_init+0x44>
    d328:	0000d369 	.word	0x0000d369
    d32c:	0bad0000 	.word	0x0bad0000
    d330:	000175ac 	.word	0x000175ac

0000d334 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    d338:	230c      	movs	r3, #12
    d33a:	4809      	ldr	r0, [pc, #36]	; (d360 <clkstarted_handle.constprop.0+0x2c>)
    d33c:	434b      	muls	r3, r1
    d33e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    d340:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d344:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    d346:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    d348:	4418      	add	r0, r3
	sub_data->cb = NULL;
    d34a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    d34c:	f008 fab4 	bl	158b8 <set_on_state>
	if (callback) {
    d350:	b12d      	cbz	r5, d35e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d352:	4632      	mov	r2, r6
    d354:	462b      	mov	r3, r5
    d356:	4803      	ldr	r0, [pc, #12]	; (d364 <clkstarted_handle.constprop.0+0x30>)
}
    d358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    d35c:	4718      	bx	r3
}
    d35e:	bd70      	pop	{r4, r5, r6, pc}
    d360:	200020c0 	.word	0x200020c0
    d364:	000170f4 	.word	0x000170f4

0000d368 <clock_event_handler>:
	switch (event) {
    d368:	b110      	cbz	r0, d370 <clock_event_handler+0x8>
    d36a:	2801      	cmp	r0, #1
    d36c:	d004      	beq.n	d378 <clock_event_handler+0x10>
    d36e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    d370:	4b03      	ldr	r3, [pc, #12]	; (d380 <clock_event_handler+0x18>)
    d372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d374:	075b      	lsls	r3, r3, #29
    d376:	d101      	bne.n	d37c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    d378:	f7ff bfdc 	b.w	d334 <clkstarted_handle.constprop.0>
}
    d37c:	4770      	bx	lr
    d37e:	bf00      	nop
    d380:	200020c0 	.word	0x200020c0

0000d384 <generic_hfclk_start>:
{
    d384:	b508      	push	{r3, lr}
	__asm__ volatile(
    d386:	f04f 0340 	mov.w	r3, #64	; 0x40
    d38a:	f3ef 8111 	mrs	r1, BASEPRI
    d38e:	f383 8812 	msr	BASEPRI_MAX, r3
    d392:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    d396:	4a12      	ldr	r2, [pc, #72]	; (d3e0 <generic_hfclk_start+0x5c>)
    d398:	6813      	ldr	r3, [r2, #0]
    d39a:	f043 0002 	orr.w	r0, r3, #2
    d39e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    d3a0:	07da      	lsls	r2, r3, #31
    d3a2:	d408      	bmi.n	d3b6 <generic_hfclk_start+0x32>
	__asm__ volatile(
    d3a4:	f381 8811 	msr	BASEPRI, r1
    d3a8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d3ac:	2001      	movs	r0, #1
}
    d3ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d3b2:	f002 bb57 	b.w	fa64 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    d3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d3ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d3be:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    d3c2:	07d3      	lsls	r3, r2, #31
    d3c4:	d5ee      	bpl.n	d3a4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    d3c6:	4807      	ldr	r0, [pc, #28]	; (d3e4 <generic_hfclk_start+0x60>)
    d3c8:	f008 fa76 	bl	158b8 <set_on_state>
    d3cc:	f381 8811 	msr	BASEPRI, r1
    d3d0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    d3d4:	2000      	movs	r0, #0
}
    d3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    d3da:	f7ff bfab 	b.w	d334 <clkstarted_handle.constprop.0>
    d3de:	bf00      	nop
    d3e0:	20002110 	.word	0x20002110
    d3e4:	20002100 	.word	0x20002100

0000d3e8 <api_blocking_start>:
{
    d3e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3ea:	2200      	movs	r2, #0
    d3ec:	2301      	movs	r3, #1
    d3ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    d3f2:	ab04      	add	r3, sp, #16
    d3f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3f8:	4a09      	ldr	r2, [pc, #36]	; (d420 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d3fa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d3fe:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    d400:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    d404:	f008 fac7 	bl	15996 <api_start>
	if (err < 0) {
    d408:	2800      	cmp	r0, #0
    d40a:	db05      	blt.n	d418 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    d40c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d410:	2300      	movs	r3, #0
    d412:	4668      	mov	r0, sp
    d414:	f004 fa1c 	bl	11850 <z_impl_k_sem_take>
}
    d418:	b007      	add	sp, #28
    d41a:	f85d fb04 	ldr.w	pc, [sp], #4
    d41e:	bf00      	nop
    d420:	000159c3 	.word	0x000159c3

0000d424 <generic_hfclk_stop>:
{
    d424:	b510      	push	{r4, lr}
	__asm__ volatile(
    d426:	f04f 0340 	mov.w	r3, #64	; 0x40
    d42a:	f3ef 8411 	mrs	r4, BASEPRI
    d42e:	f383 8812 	msr	BASEPRI_MAX, r3
    d432:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    d436:	4a07      	ldr	r2, [pc, #28]	; (d454 <generic_hfclk_stop+0x30>)
    d438:	6813      	ldr	r3, [r2, #0]
    d43a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    d43e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    d440:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    d442:	d402      	bmi.n	d44a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d444:	2001      	movs	r0, #1
    d446:	f009 f82f 	bl	164a8 <nrfx_clock_stop>
	__asm__ volatile(
    d44a:	f384 8811 	msr	BASEPRI, r4
    d44e:	f3bf 8f6f 	isb	sy
}
    d452:	bd10      	pop	{r4, pc}
    d454:	20002110 	.word	0x20002110

0000d458 <z_nrf_clock_control_get_onoff>:
}
    d458:	4a02      	ldr	r2, [pc, #8]	; (d464 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    d45a:	b2c3      	uxtb	r3, r0
}
    d45c:	201c      	movs	r0, #28
    d45e:	fb03 2000 	mla	r0, r3, r0, r2
    d462:	4770      	bx	lr
    d464:	200020c0 	.word	0x200020c0

0000d468 <z_nrf_clock_control_lf_on>:
{
    d468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d46c:	4938      	ldr	r1, [pc, #224]	; (d550 <z_nrf_clock_control_lf_on+0xe8>)
    d46e:	f3bf 8f5b 	dmb	ish
    d472:	4607      	mov	r7, r0
    d474:	2201      	movs	r2, #1
    d476:	e851 3f00 	ldrex	r3, [r1]
    d47a:	e841 2000 	strex	r0, r2, [r1]
    d47e:	2800      	cmp	r0, #0
    d480:	d1f9      	bne.n	d476 <z_nrf_clock_control_lf_on+0xe>
    d482:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    d486:	b933      	cbnz	r3, d496 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d488:	4932      	ldr	r1, [pc, #200]	; (d554 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    d48a:	4833      	ldr	r0, [pc, #204]	; (d558 <z_nrf_clock_control_lf_on+0xf0>)
    d48c:	604b      	str	r3, [r1, #4]
    d48e:	60cb      	str	r3, [r1, #12]
    d490:	608a      	str	r2, [r1, #8]
    d492:	f007 ff78 	bl	15386 <onoff_request>
	switch (start_mode) {
    d496:	1e7b      	subs	r3, r7, #1
    d498:	2b01      	cmp	r3, #1
    d49a:	d82b      	bhi.n	d4f4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    d49c:	2f01      	cmp	r7, #1
    d49e:	d107      	bne.n	d4b0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d4a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d4a4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    d4a8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    d4ac:	2b01      	cmp	r3, #1
    d4ae:	d021      	beq.n	d4f4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d4b0:	f009 fa0a 	bl	168c8 <k_is_in_isr>
    d4b4:	4605      	mov	r5, r0
    d4b6:	b9f8      	cbnz	r0, d4f8 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    d4b8:	4b28      	ldr	r3, [pc, #160]	; (d55c <z_nrf_clock_control_lf_on+0xf4>)
    d4ba:	781b      	ldrb	r3, [r3, #0]
    d4bc:	b1e3      	cbz	r3, d4f8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    d4be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d4c2:	2202      	movs	r2, #2
    d4c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    d4c8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4ca:	f8df 8094 	ldr.w	r8, [pc, #148]	; d560 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d4ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    d4d2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d4d6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    d4da:	03d2      	lsls	r2, r2, #15
    d4dc:	d516      	bpl.n	d50c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    d4de:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    d4e2:	2b01      	cmp	r3, #1
    d4e4:	d001      	beq.n	d4ea <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    d4e6:	2f01      	cmp	r7, #1
    d4e8:	d110      	bne.n	d50c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    d4ea:	b35d      	cbz	r5, d544 <z_nrf_clock_control_lf_on+0xdc>
    d4ec:	f386 8811 	msr	BASEPRI, r6
    d4f0:	f3bf 8f6f 	isb	sy
}
    d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    d4f8:	f04f 0340 	mov.w	r3, #64	; 0x40
    d4fc:	f3ef 8611 	mrs	r6, BASEPRI
    d500:	f383 8812 	msr	BASEPRI_MAX, r3
    d504:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    d508:	2501      	movs	r5, #1
    d50a:	e7de      	b.n	d4ca <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    d50c:	b1ad      	cbz	r5, d53a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    d50e:	4630      	mov	r0, r6
    d510:	f7fe f8b8 	bl	b684 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    d514:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    d518:	2b00      	cmp	r3, #0
    d51a:	d1da      	bne.n	d4d2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    d51c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    d520:	2a00      	cmp	r2, #0
    d522:	d0d6      	beq.n	d4d2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d524:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    d528:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    d52c:	2301      	movs	r3, #1
    d52e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    d532:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d536:	60a3      	str	r3, [r4, #8]
}
    d538:	e7cb      	b.n	d4d2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    d53a:	2100      	movs	r1, #0
    d53c:	2021      	movs	r0, #33	; 0x21
    d53e:	f004 fdc7 	bl	120d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    d542:	e7e7      	b.n	d514 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    d544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d548:	2202      	movs	r2, #2
    d54a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d54e:	e7d1      	b.n	d4f4 <z_nrf_clock_control_lf_on+0x8c>
    d550:	200020bc 	.word	0x200020bc
    d554:	200020ac 	.word	0x200020ac
    d558:	200020dc 	.word	0x200020dc
    d55c:	2000341b 	.word	0x2000341b
    d560:	e000e100 	.word	0xe000e100

0000d564 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    d564:	b508      	push	{r3, lr}
    d566:	4807      	ldr	r0, [pc, #28]	; (d584 <uart_console_init+0x20>)
    d568:	f009 f8c5 	bl	166f6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    d56c:	b138      	cbz	r0, d57e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    d56e:	4806      	ldr	r0, [pc, #24]	; (d588 <uart_console_init+0x24>)
    d570:	f7fe fc7e 	bl	be70 <__stdout_hook_install>
	__printk_hook_install(console_out);
    d574:	4804      	ldr	r0, [pc, #16]	; (d588 <uart_console_init+0x24>)
    d576:	f7fd f95f 	bl	a838 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    d57a:	2000      	movs	r0, #0
}
    d57c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    d57e:	f06f 0012 	mvn.w	r0, #18
    d582:	e7fb      	b.n	d57c <uart_console_init+0x18>
    d584:	00017184 	.word	0x00017184
    d588:	0000d58d 	.word	0x0000d58d

0000d58c <console_out>:
	if ('\n' == c) {
    d58c:	280a      	cmp	r0, #10
{
    d58e:	b538      	push	{r3, r4, r5, lr}
    d590:	4d07      	ldr	r5, [pc, #28]	; (d5b0 <console_out+0x24>)
    d592:	4604      	mov	r4, r0
	if ('\n' == c) {
    d594:	d104      	bne.n	d5a0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    d596:	68ab      	ldr	r3, [r5, #8]
    d598:	210d      	movs	r1, #13
    d59a:	685b      	ldr	r3, [r3, #4]
    d59c:	4628      	mov	r0, r5
    d59e:	4798      	blx	r3
    d5a0:	68ab      	ldr	r3, [r5, #8]
    d5a2:	4803      	ldr	r0, [pc, #12]	; (d5b0 <console_out+0x24>)
    d5a4:	685b      	ldr	r3, [r3, #4]
    d5a6:	b2e1      	uxtb	r1, r4
    d5a8:	4798      	blx	r3
}
    d5aa:	4620      	mov	r0, r4
    d5ac:	bd38      	pop	{r3, r4, r5, pc}
    d5ae:	bf00      	nop
    d5b0:	00017184 	.word	0x00017184

0000d5b4 <random_byte_get>:
    d5b4:	f04f 0340 	mov.w	r3, #64	; 0x40
    d5b8:	f3ef 8211 	mrs	r2, BASEPRI
    d5bc:	f383 8812 	msr	BASEPRI_MAX, r3
    d5c0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    d5c4:	4b09      	ldr	r3, [pc, #36]	; (d5ec <random_byte_get+0x38>)
    d5c6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    d5ca:	b161      	cbz	r1, d5e6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d5cc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    d5ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d5d2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    d5d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    d5da:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    d5dc:	f382 8811 	msr	BASEPRI, r2
    d5e0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    d5e4:	4770      	bx	lr
	int retval = -EAGAIN;
    d5e6:	f06f 000a 	mvn.w	r0, #10
    d5ea:	e7f7      	b.n	d5dc <random_byte_get+0x28>
    d5ec:	4000d000 	.word	0x4000d000

0000d5f0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5f2:	4603      	mov	r3, r0
    d5f4:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    d5f6:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    d5f8:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    d5fc:	f04f 0540 	mov.w	r5, #64	; 0x40
    d600:	f3ef 8211 	mrs	r2, BASEPRI
    d604:	f385 8812 	msr	BASEPRI_MAX, r5
    d608:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    d60c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    d60e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    d612:	1be4      	subs	r4, r4, r7
    d614:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    d618:	42a0      	cmp	r0, r4
		len = available;
    d61a:	bf88      	it	hi
    d61c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    d61e:	183e      	adds	r6, r7, r0
    d620:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    d624:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    d626:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    d628:	f382 8811 	msr	BASEPRI, r2
    d62c:	f3bf 8f6f 	isb	sy
    d630:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    d632:	428a      	cmp	r2, r1
    d634:	d117      	bne.n	d666 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    d636:	4577      	cmp	r7, lr
    d638:	d10d      	bne.n	d656 <rng_pool_get+0x66>
	__asm__ volatile(
    d63a:	f04f 0140 	mov.w	r1, #64	; 0x40
    d63e:	f3ef 8211 	mrs	r2, BASEPRI
    d642:	f381 8812 	msr	BASEPRI_MAX, r1
    d646:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    d64a:	7819      	ldrb	r1, [r3, #0]
    d64c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    d64e:	f382 8811 	msr	BASEPRI, r2
    d652:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    d656:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    d658:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    d65a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d65c:	bf22      	ittt	cs
    d65e:	4b06      	ldrcs	r3, [pc, #24]	; (d678 <rng_pool_get+0x88>)
    d660:	2201      	movcs	r2, #1
    d662:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    d664:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    d666:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    d668:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    d66a:	7976      	ldrb	r6, [r6, #5]
    d66c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    d670:	ea05 050c 	and.w	r5, r5, ip
    d674:	e7dd      	b.n	d632 <rng_pool_get+0x42>
    d676:	bf00      	nop
    d678:	4000d000 	.word	0x4000d000

0000d67c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d67c:	43db      	mvns	r3, r3
{
    d67e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d682:	f013 0501 	ands.w	r5, r3, #1
{
    d686:	460e      	mov	r6, r1
    d688:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    d68a:	d004      	beq.n	d696 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    d68c:	4823      	ldr	r0, [pc, #140]	; (d71c <entropy_nrf5_get_entropy_isr+0xa0>)
    d68e:	f7ff ffaf 	bl	d5f0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    d692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    d696:	b3a2      	cbz	r2, d702 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    d698:	f04f 0340 	mov.w	r3, #64	; 0x40
    d69c:	f3ef 8811 	mrs	r8, BASEPRI
    d6a0:	f383 8812 	msr	BASEPRI_MAX, r3
    d6a4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    d6a8:	200d      	movs	r0, #13
    d6aa:	f7fe f819 	bl	b6e0 <arch_irq_is_enabled>
    d6ae:	4607      	mov	r7, r0
		irq_disable(IRQN);
    d6b0:	200d      	movs	r0, #13
    d6b2:	f7fe f801 	bl	b6b8 <arch_irq_disable>
	__asm__ volatile(
    d6b6:	f388 8811 	msr	BASEPRI, r8
    d6ba:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d6be:	f8df a060 	ldr.w	sl, [pc, #96]	; d720 <entropy_nrf5_get_entropy_isr+0xa4>
    d6c2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d724 <entropy_nrf5_get_entropy_isr+0xa8>
    d6c6:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
    d6ca:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
    d6ce:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d6d2:	2301      	movs	r3, #1
    d6d4:	f8ca 3000 	str.w	r3, [sl]
    d6d8:	4625      	mov	r5, r4
    d6da:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    d6de:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    d6e2:	b183      	cbz	r3, d706 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    d6e4:	f7ff ff66 	bl	d5b4 <random_byte_get>
			if (byte < 0) {
    d6e8:	1e03      	subs	r3, r0, #0
    d6ea:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    d6ee:	dbf6      	blt.n	d6de <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    d6f0:	3d01      	subs	r5, #1
    d6f2:	b2ad      	uxth	r5, r5
    d6f4:	5573      	strb	r3, [r6, r5]
		} while (len);
    d6f6:	2d00      	cmp	r5, #0
    d6f8:	d1f1      	bne.n	d6de <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    d6fa:	b117      	cbz	r7, d702 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    d6fc:	200d      	movs	r0, #13
    d6fe:	f7fd ffcd 	bl	b69c <arch_irq_enable>
	return cnt;
    d702:	4620      	mov	r0, r4
    d704:	e7c5      	b.n	d692 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
    d706:	f04f 0340 	mov.w	r3, #64	; 0x40
    d70a:	f3ef 8011 	mrs	r0, BASEPRI
    d70e:	f383 8812 	msr	BASEPRI_MAX, r3
    d712:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
    d716:	f7fd ffb5 	bl	b684 <arch_cpu_atomic_idle>
}
    d71a:	e7e0      	b.n	d6de <entropy_nrf5_get_entropy_isr+0x62>
    d71c:	20002144 	.word	0x20002144
    d720:	4000d000 	.word	0x4000d000
    d724:	e000e100 	.word	0xe000e100

0000d728 <entropy_nrf5_get_entropy>:
{
    d728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    d72c:	4f12      	ldr	r7, [pc, #72]	; (d778 <entropy_nrf5_get_entropy+0x50>)
    d72e:	460d      	mov	r5, r1
    d730:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    d732:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
    d736:	b914      	cbnz	r4, d73e <entropy_nrf5_get_entropy+0x16>
}
    d738:	4620      	mov	r0, r4
    d73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d73e:	f04f 33ff 	mov.w	r3, #4294967295
    d742:	f04f 32ff 	mov.w	r2, #4294967295
    d746:	4638      	mov	r0, r7
    d748:	f004 f882 	bl	11850 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    d74c:	4622      	mov	r2, r4
    d74e:	4629      	mov	r1, r5
    d750:	4640      	mov	r0, r8
    d752:	f7ff ff4d 	bl	d5f0 <rng_pool_get>
    d756:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    d758:	4638      	mov	r0, r7
    d75a:	f004 f853 	bl	11804 <z_impl_k_sem_give>
		if (bytes == 0U) {
    d75e:	b93e      	cbnz	r6, d770 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    d760:	f04f 32ff 	mov.w	r2, #4294967295
    d764:	f04f 33ff 	mov.w	r3, #4294967295
    d768:	4804      	ldr	r0, [pc, #16]	; (d77c <entropy_nrf5_get_entropy+0x54>)
    d76a:	f004 f871 	bl	11850 <z_impl_k_sem_take>
	while (len) {
    d76e:	e7e6      	b.n	d73e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    d770:	1ba4      	subs	r4, r4, r6
    d772:	b2a4      	uxth	r4, r4
		buf += bytes;
    d774:	4435      	add	r5, r6
    d776:	e7de      	b.n	d736 <entropy_nrf5_get_entropy+0xe>
    d778:	20002114 	.word	0x20002114
    d77c:	2000212c 	.word	0x2000212c

0000d780 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    d780:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    d782:	4c19      	ldr	r4, [pc, #100]	; (d7e8 <entropy_nrf5_init+0x68>)
    d784:	2201      	movs	r2, #1
    d786:	4611      	mov	r1, r2
    d788:	4620      	mov	r0, r4
    d78a:	f009 f964 	bl	16a56 <z_impl_k_sem_init>
    d78e:	2201      	movs	r2, #1
    d790:	2100      	movs	r1, #0
    d792:	f104 0018 	add.w	r0, r4, #24
    d796:	f009 f95e 	bl	16a56 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    d79a:	f240 4307 	movw	r3, #1031	; 0x407
    d79e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
    d7a2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    d7a6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
    d7a8:	230c      	movs	r3, #12
    d7aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
    d7ae:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    d7b0:	4b0e      	ldr	r3, [pc, #56]	; (d7ec <entropy_nrf5_init+0x6c>)
    d7b2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
    d7b6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
    d7ba:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    d7be:	f022 0201 	bic.w	r2, r2, #1
    d7c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    d7c6:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    d7c8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    d7cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d7d0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    d7d4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    d7d6:	6019      	str	r1, [r3, #0]
    d7d8:	200d      	movs	r0, #13
    d7da:	f7fd ff8f 	bl	b6fc <z_arm_irq_priority_set>
	irq_enable(IRQN);
    d7de:	200d      	movs	r0, #13
    d7e0:	f7fd ff5c 	bl	b69c <arch_irq_enable>

	return 0;
}
    d7e4:	4628      	mov	r0, r5
    d7e6:	bd38      	pop	{r3, r4, r5, pc}
    d7e8:	20002114 	.word	0x20002114
    d7ec:	4000d000 	.word	0x4000d000

0000d7f0 <isr>:
{
    d7f0:	b510      	push	{r4, lr}
	byte = random_byte_get();
    d7f2:	f7ff fedf 	bl	d5b4 <random_byte_get>
	if (byte < 0) {
    d7f6:	2800      	cmp	r0, #0
    d7f8:	db20      	blt.n	d83c <isr+0x4c>
	uint8_t last  = rngp->last;
    d7fa:	4b17      	ldr	r3, [pc, #92]	; (d858 <isr+0x68>)
    d7fc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
    d800:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
    d804:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
    d808:	1b14      	subs	r4, r2, r4
    d80a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    d80e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    d810:	d10d      	bne.n	d82e <isr+0x3e>
	uint8_t last  = rngp->last;
    d812:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
    d816:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
    d81a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
    d81e:	1b14      	subs	r4, r2, r4
    d820:	ea31 0404 	bics.w	r4, r1, r4
    d824:	d10b      	bne.n	d83e <isr+0x4e>
    d826:	4b0d      	ldr	r3, [pc, #52]	; (d85c <isr+0x6c>)
    d828:	2201      	movs	r2, #1
    d82a:	605a      	str	r2, [r3, #4]
}
    d82c:	e00e      	b.n	d84c <isr+0x5c>
	rngp->buffer[last] = byte;
    d82e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    d830:	3201      	adds	r2, #1
    d832:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    d834:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
    d838:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
    d83c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    d83e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    d840:	3201      	adds	r2, #1
    d842:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    d844:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
    d848:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
    d84c:	4804      	ldr	r0, [pc, #16]	; (d860 <isr+0x70>)
}
    d84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d852:	f003 bfd7 	b.w	11804 <z_impl_k_sem_give>
    d856:	bf00      	nop
    d858:	20002114 	.word	0x20002114
    d85c:	4000d000 	.word	0x4000d000
    d860:	2000212c 	.word	0x2000212c

0000d864 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    d864:	b530      	push	{r4, r5, lr}
	return port->config;
    d866:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d868:	7b05      	ldrb	r5, [r0, #12]
    d86a:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    d86e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    d872:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    d874:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    d878:	d105      	bne.n	d886 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    d87a:	4620      	mov	r0, r4
    d87c:	f002 fc80 	bl	10180 <nrfx_gpiote_trigger_disable>

		return 0;
    d880:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    d882:	b005      	add	sp, #20
    d884:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    d886:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    d888:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d88c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    d890:	d114      	bne.n	d8bc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    d896:	bf0c      	ite	eq
    d898:	2304      	moveq	r3, #4
    d89a:	2305      	movne	r3, #5
    d89c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d8a0:	2300      	movs	r3, #0
    d8a2:	4619      	mov	r1, r3
    d8a4:	aa02      	add	r2, sp, #8
    d8a6:	4620      	mov	r0, r4
    d8a8:	f002 faa8 	bl	fdfc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    d8ac:	4b1f      	ldr	r3, [pc, #124]	; (d92c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    d8ae:	4298      	cmp	r0, r3
    d8b0:	d139      	bne.n	d926 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    d8b2:	2101      	movs	r1, #1
    d8b4:	4620      	mov	r0, r4
    d8b6:	f002 fc1b 	bl	100f0 <nrfx_gpiote_trigger_enable>
	return 0;
    d8ba:	e7e1      	b.n	d880 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d8bc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    d8c0:	d026      	beq.n	d910 <gpio_nrfx_pin_interrupt_configure+0xac>
    d8c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    d8c6:	bf14      	ite	ne
    d8c8:	2301      	movne	r3, #1
    d8ca:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    d8cc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    d8d0:	6883      	ldr	r3, [r0, #8]
    d8d2:	40cb      	lsrs	r3, r1
    d8d4:	07d9      	lsls	r1, r3, #31
    d8d6:	d4e3      	bmi.n	d8a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    d8d8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    d8dc:	d1e0      	bne.n	d8a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    d8de:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    d8e0:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    d8e2:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    d8e6:	4a12      	ldr	r2, [pc, #72]	; (d930 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d8e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    d8ec:	bf18      	it	ne
    d8ee:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    d8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    d8f6:	07db      	lsls	r3, r3, #31
    d8f8:	d4d2      	bmi.n	d8a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d8fa:	f10d 0507 	add.w	r5, sp, #7
    d8fe:	4629      	mov	r1, r5
    d900:	4620      	mov	r0, r4
    d902:	f002 fba1 	bl	10048 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    d906:	4b0b      	ldr	r3, [pc, #44]	; (d934 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    d908:	4298      	cmp	r0, r3
    d90a:	d003      	beq.n	d914 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    d90c:	9503      	str	r5, [sp, #12]
    d90e:	e7c7      	b.n	d8a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d910:	2303      	movs	r3, #3
    d912:	e7db      	b.n	d8cc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    d914:	4628      	mov	r0, r5
    d916:	f002 fbe5 	bl	100e4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    d91a:	4b04      	ldr	r3, [pc, #16]	; (d92c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    d91c:	4298      	cmp	r0, r3
    d91e:	d0f5      	beq.n	d90c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    d920:	f06f 000b 	mvn.w	r0, #11
    d924:	e7ad      	b.n	d882 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    d926:	f06f 0015 	mvn.w	r0, #21
    d92a:	e7aa      	b.n	d882 <gpio_nrfx_pin_interrupt_configure+0x1e>
    d92c:	0bad0000 	.word	0x0bad0000
    d930:	50000300 	.word	0x50000300
    d934:	0bad0004 	.word	0x0bad0004

0000d938 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    d938:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    d93a:	f002 fbc3 	bl	100c4 <nrfx_gpiote_is_init>
    d93e:	4604      	mov	r4, r0
    d940:	b968      	cbnz	r0, d95e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    d942:	f002 fb97 	bl	10074 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    d946:	4b08      	ldr	r3, [pc, #32]	; (d968 <gpio_nrfx_init+0x30>)
    d948:	4298      	cmp	r0, r3
    d94a:	d10a      	bne.n	d962 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    d94c:	4807      	ldr	r0, [pc, #28]	; (d96c <gpio_nrfx_init+0x34>)
    d94e:	4621      	mov	r1, r4
    d950:	f002 fb74 	bl	1003c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    d954:	4622      	mov	r2, r4
    d956:	2105      	movs	r1, #5
    d958:	2006      	movs	r0, #6
    d95a:	f7fd fecf 	bl	b6fc <z_arm_irq_priority_set>
		return 0;
    d95e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    d960:	bd10      	pop	{r4, pc}
		return -EIO;
    d962:	f06f 0004 	mvn.w	r0, #4
    d966:	e7fb      	b.n	d960 <gpio_nrfx_init+0x28>
    d968:	0bad0000 	.word	0x0bad0000
    d96c:	0000d971 	.word	0x0000d971

0000d970 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d970:	0942      	lsrs	r2, r0, #5
{
    d972:	b570      	push	{r4, r5, r6, lr}
    d974:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d976:	d002      	beq.n	d97e <nrfx_gpio_handler+0xe>
    d978:	2a01      	cmp	r2, #1
    d97a:	d017      	beq.n	d9ac <nrfx_gpio_handler+0x3c>
}
    d97c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d97e:	4e0d      	ldr	r6, [pc, #52]	; (d9b4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    d980:	6932      	ldr	r2, [r6, #16]
    d982:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d984:	2900      	cmp	r1, #0
    d986:	d0f9      	beq.n	d97c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    d988:	f003 031f 	and.w	r3, r3, #31
    d98c:	2501      	movs	r5, #1
    d98e:	680c      	ldr	r4, [r1, #0]
    d990:	409d      	lsls	r5, r3
    d992:	2900      	cmp	r1, #0
    d994:	d0f2      	beq.n	d97c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    d996:	688a      	ldr	r2, [r1, #8]
    d998:	402a      	ands	r2, r5
    d99a:	d002      	beq.n	d9a2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d99c:	684b      	ldr	r3, [r1, #4]
    d99e:	4630      	mov	r0, r6
    d9a0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d9a2:	b12c      	cbz	r4, d9b0 <nrfx_gpio_handler+0x40>
    d9a4:	6823      	ldr	r3, [r4, #0]
    d9a6:	4621      	mov	r1, r4
    d9a8:	461c      	mov	r4, r3
    d9aa:	e7f2      	b.n	d992 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    d9ac:	4e02      	ldr	r6, [pc, #8]	; (d9b8 <nrfx_gpio_handler+0x48>)
    d9ae:	e7e7      	b.n	d980 <nrfx_gpio_handler+0x10>
    d9b0:	4623      	mov	r3, r4
    d9b2:	e7f8      	b.n	d9a6 <nrfx_gpio_handler+0x36>
    d9b4:	00017124 	.word	0x00017124
    d9b8:	0001710c 	.word	0x0001710c

0000d9bc <gpio_nrfx_pin_configure>:
{
    d9bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    d9c0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    d9c2:	7b3b      	ldrb	r3, [r7, #12]
    d9c4:	f001 051f 	and.w	r5, r1, #31
    d9c8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    d9cc:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d9ce:	4628      	mov	r0, r5
    d9d0:	f10d 0103 	add.w	r1, sp, #3
{
    d9d4:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d9d6:	f002 fb37 	bl	10048 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d9da:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    d9de:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    d9e0:	d10b      	bne.n	d9fa <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    d9e2:	4628      	mov	r0, r5
    d9e4:	f002 fbf4 	bl	101d0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    d9e8:	4b3d      	ldr	r3, [pc, #244]	; (dae0 <gpio_nrfx_pin_configure+0x124>)
    d9ea:	4598      	cmp	r8, r3
    d9ec:	d103      	bne.n	d9f6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    d9ee:	f89d 0003 	ldrb.w	r0, [sp, #3]
    d9f2:	f002 fb71 	bl	100d8 <nrfx_gpiote_channel_free>
		return 0;
    d9f6:	2000      	movs	r0, #0
    d9f8:	e00c      	b.n	da14 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    d9fa:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    d9fc:	4619      	mov	r1, r3
    d9fe:	aa02      	add	r2, sp, #8
    da00:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    da02:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    da06:	f002 f9f9 	bl	fdfc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    da0a:	4b35      	ldr	r3, [pc, #212]	; (dae0 <gpio_nrfx_pin_configure+0x124>)
    da0c:	4298      	cmp	r0, r3
    da0e:	d004      	beq.n	da1a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    da10:	f06f 0015 	mvn.w	r0, #21
}
    da14:	b004      	add	sp, #16
    da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    da1a:	4580      	cmp	r8, r0
    da1c:	d103      	bne.n	da26 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    da1e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    da22:	f002 fb59 	bl	100d8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    da26:	03a3      	lsls	r3, r4, #14
    da28:	d54b      	bpl.n	dac2 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    da2a:	f240 3306 	movw	r3, #774	; 0x306
    da2e:	4023      	ands	r3, r4
    da30:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    da34:	d019      	beq.n	da6a <gpio_nrfx_pin_configure+0xae>
    da36:	d80c      	bhi.n	da52 <gpio_nrfx_pin_configure+0x96>
    da38:	2b06      	cmp	r3, #6
    da3a:	d017      	beq.n	da6c <gpio_nrfx_pin_configure+0xb0>
    da3c:	d804      	bhi.n	da48 <gpio_nrfx_pin_configure+0x8c>
    da3e:	b1ab      	cbz	r3, da6c <gpio_nrfx_pin_configure+0xb0>
    da40:	2b02      	cmp	r3, #2
    da42:	d1e5      	bne.n	da10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    da44:	2304      	movs	r3, #4
    da46:	e011      	b.n	da6c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    da48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    da4c:	d1e0      	bne.n	da10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    da4e:	2301      	movs	r3, #1
    da50:	e00c      	b.n	da6c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    da52:	f240 2202 	movw	r2, #514	; 0x202
    da56:	4293      	cmp	r3, r2
    da58:	d027      	beq.n	daaa <gpio_nrfx_pin_configure+0xee>
    da5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    da5e:	d026      	beq.n	daae <gpio_nrfx_pin_configure+0xf2>
    da60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    da64:	d1d4      	bne.n	da10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    da66:	2302      	movs	r3, #2
    da68:	e000      	b.n	da6c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    da6a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    da6c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    da70:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    da74:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    da78:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    da7a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    da7e:	bf54      	ite	pl
    da80:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    da84:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    da86:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    da88:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    da8c:	d511      	bpl.n	dab2 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    da8e:	687a      	ldr	r2, [r7, #4]
    da90:	2301      	movs	r3, #1
    da92:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    da94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    da98:	2200      	movs	r2, #0
    da9a:	a901      	add	r1, sp, #4
    da9c:	4628      	mov	r0, r5
    da9e:	f002 fa5b 	bl	ff58 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    daa2:	4b0f      	ldr	r3, [pc, #60]	; (dae0 <gpio_nrfx_pin_configure+0x124>)
    daa4:	4298      	cmp	r0, r3
    daa6:	d0a6      	beq.n	d9f6 <gpio_nrfx_pin_configure+0x3a>
    daa8:	e7b2      	b.n	da10 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    daaa:	2305      	movs	r3, #5
    daac:	e7de      	b.n	da6c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    daae:	2303      	movs	r3, #3
    dab0:	e7dc      	b.n	da6c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    dab2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    dab4:	bf41      	itttt	mi
    dab6:	2301      	movmi	r3, #1
    dab8:	687a      	ldrmi	r2, [r7, #4]
    daba:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    dabc:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    dac0:	e7ea      	b.n	da98 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    dac2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    dac4:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    dac8:	bf54      	ite	pl
    daca:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    dace:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    dad0:	461a      	mov	r2, r3
    dad2:	a901      	add	r1, sp, #4
    dad4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    dad6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    dada:	f002 f98f 	bl	fdfc <nrfx_gpiote_input_configure>
    dade:	e7e0      	b.n	daa2 <gpio_nrfx_pin_configure+0xe6>
    dae0:	0bad0000 	.word	0x0bad0000

0000dae4 <start_transfer>:

	return 0;
}

static int start_transfer(struct i2s_nrfx_drv_data *drv_data)
{
    dae4:	b530      	push	{r4, r5, lr}
	nrfx_i2s_buffers_t initial_buffers = { 0 };
    dae6:	2300      	movs	r3, #0
{
    dae8:	b085      	sub	sp, #20
	nrfx_i2s_buffers_t initial_buffers = { 0 };
    daea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	int ret;

	if (drv_data->active_dir != I2S_DIR_RX && /* -> TX to be started */
    daee:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
{
    daf2:	4604      	mov	r4, r0
	if (drv_data->active_dir != I2S_DIR_RX && /* -> TX to be started */
    daf4:	bb33      	cbnz	r3, db44 <start_transfer+0x60>
	int ret = k_mem_slab_alloc(drv_data->rx.cfg.mem_slab,
    daf6:	6f60      	ldr	r0, [r4, #116]	; 0x74
    daf8:	2200      	movs	r2, #0
    dafa:	2300      	movs	r3, #0
    dafc:	a902      	add	r1, sp, #8
    dafe:	f003 fbe3 	bl	112c8 <k_mem_slab_alloc>
	if (ret < 0) {
    db02:	2800      	cmp	r0, #0
    db04:	da3a      	bge.n	db7c <start_transfer+0x98>
	    !get_next_tx_buffer(drv_data, &initial_buffers)) {
		LOG_ERR("No TX buffer available");
		ret = -ENOMEM;
    db06:	f06f 050b 	mvn.w	r5, #11

		LOG_ERR("Failed to start I2S transfer: 0x%08x", err);
		ret = -EIO;
	}

	nrfx_i2s_uninit();
    db0a:	f002 fde3 	bl	106d4 <nrfx_i2s_uninit>
	if (drv_data->request_clock) {
    db0e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    db12:	075b      	lsls	r3, r3, #29
    db14:	d502      	bpl.n	db1c <start_transfer+0x38>
		(void)onoff_release(drv_data->clk_mgr);
    db16:	6820      	ldr	r0, [r4, #0]
    db18:	f007 fc8d 	bl	15436 <onoff_release>
	}

	if (initial_buffers.p_tx_buffer) {
    db1c:	9b03      	ldr	r3, [sp, #12]
    db1e:	b123      	cbz	r3, db2a <start_transfer+0x46>
	k_mem_slab_free(drv_data->tx.cfg.mem_slab, (void **)&buffer);
    db20:	69e0      	ldr	r0, [r4, #28]
    db22:	9301      	str	r3, [sp, #4]
    db24:	a901      	add	r1, sp, #4
    db26:	f008 fea6 	bl	16876 <k_mem_slab_free>
		free_tx_buffer(drv_data, initial_buffers.p_tx_buffer);
	}
	if (initial_buffers.p_rx_buffer) {
    db2a:	9b02      	ldr	r3, [sp, #8]
    db2c:	b123      	cbz	r3, db38 <start_transfer+0x54>
	k_mem_slab_free(drv_data->rx.cfg.mem_slab, &buffer);
    db2e:	6f60      	ldr	r0, [r4, #116]	; 0x74
    db30:	9301      	str	r3, [sp, #4]
    db32:	a901      	add	r1, sp, #4
    db34:	f008 fe9f 	bl	16876 <k_mem_slab_free>
		free_rx_buffer(drv_data, initial_buffers.p_rx_buffer);
	}

	drv_data->state = I2S_STATE_ERROR;
    db38:	2304      	movs	r3, #4
    db3a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	return ret;
}
    db3e:	4628      	mov	r0, r5
    db40:	b005      	add	sp, #20
    db42:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_msgq_get(msgq, data, timeout);
    db44:	2200      	movs	r2, #0
    db46:	2300      	movs	r3, #0
    db48:	a903      	add	r1, sp, #12
    db4a:	303c      	adds	r0, #60	; 0x3c
    db4c:	f003 fd16 	bl	1157c <z_impl_k_msgq_get>
	if (drv_data->active_dir != I2S_DIR_RX && /* -> TX to be started */
    db50:	2800      	cmp	r0, #0
    db52:	d1d8      	bne.n	db06 <start_transfer+0x22>
	} else if (drv_data->active_dir != I2S_DIR_TX && /* -> RX to be started */
    db54:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    db58:	2b01      	cmp	r3, #1
    db5a:	d1cc      	bne.n	daf6 <start_transfer+0x12>
				      : drv_data->rx.cfg.block_size;
    db5c:	6a21      	ldr	r1, [r4, #32]
		drv_data->last_tx_buffer = initial_buffers.p_tx_buffer;
    db5e:	9b03      	ldr	r3, [sp, #12]
    db60:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
		err = nrfx_i2s_start(&initial_buffers,
    db64:	2200      	movs	r2, #0
    db66:	f3c1 018f 	ubfx	r1, r1, #2, #16
    db6a:	a802      	add	r0, sp, #8
    db6c:	f002 fcf4 	bl	10558 <nrfx_i2s_start>
		if (err == NRFX_SUCCESS) {
    db70:	4b06      	ldr	r3, [pc, #24]	; (db8c <start_transfer+0xa8>)
    db72:	4298      	cmp	r0, r3
    db74:	d008      	beq.n	db88 <start_transfer+0xa4>
		ret = -EIO;
    db76:	f06f 0504 	mvn.w	r5, #4
    db7a:	e7c6      	b.n	db0a <start_transfer+0x26>
				      : drv_data->rx.cfg.block_size;
    db7c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    db80:	2b01      	cmp	r3, #1
    db82:	d0eb      	beq.n	db5c <start_transfer+0x78>
    db84:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    db86:	e7ea      	b.n	db5e <start_transfer+0x7a>
			return 0;
    db88:	2500      	movs	r5, #0
    db8a:	e7d8      	b.n	db3e <start_transfer+0x5a>
    db8c:	0bad0000 	.word	0x0bad0000

0000db90 <i2s_nrfx_init0>:
			 &i2s_nrfx_data##idx, &i2s_nrfx_cfg##idx,	     \
			 POST_KERNEL, CONFIG_I2S_INIT_PRIORITY,		     \
			 &i2s_nrf_drv_api);

/* Existing SoCs only have one I2S instance. */
I2S_NRFX_DEVICE(0);
    db90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db92:	4604      	mov	r4, r0
    db94:	2200      	movs	r2, #0
    db96:	2101      	movs	r1, #1
    db98:	2025      	movs	r0, #37	; 0x25
    db9a:	f7fd fdaf 	bl	b6fc <z_arm_irq_priority_set>
    db9e:	6863      	ldr	r3, [r4, #4]
    dba0:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    dba2:	aa01      	add	r2, sp, #4
    dba4:	2100      	movs	r1, #0
    dba6:	4628      	mov	r0, r5
    dba8:	f008 f92c 	bl	15e04 <pinctrl_lookup_state>
	if (ret < 0) {
    dbac:	2800      	cmp	r0, #0
    dbae:	db19      	blt.n	dbe4 <i2s_nrfx_init0+0x54>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    dbb0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    dbb2:	682a      	ldr	r2, [r5, #0]
    dbb4:	7919      	ldrb	r1, [r3, #4]
    dbb6:	6818      	ldr	r0, [r3, #0]
    dbb8:	f000 fafa 	bl	e1b0 <pinctrl_configure_pins>
    dbbc:	2800      	cmp	r0, #0
    dbbe:	db11      	blt.n	dbe4 <i2s_nrfx_init0+0x54>
    dbc0:	2304      	movs	r3, #4
    dbc2:	461a      	mov	r2, r3
    dbc4:	4908      	ldr	r1, [pc, #32]	; (dbe8 <i2s_nrfx_init0+0x58>)
    dbc6:	4809      	ldr	r0, [pc, #36]	; (dbec <i2s_nrfx_init0+0x5c>)
    dbc8:	f008 fe90 	bl	168ec <k_msgq_init>
    dbcc:	2304      	movs	r3, #4
    dbce:	4908      	ldr	r1, [pc, #32]	; (dbf0 <i2s_nrfx_init0+0x60>)
    dbd0:	4808      	ldr	r0, [pc, #32]	; (dbf4 <i2s_nrfx_init0+0x64>)
    dbd2:	461a      	mov	r2, r3
    dbd4:	f008 fe8a 	bl	168ec <k_msgq_init>
	drv_data->clk_mgr = z_nrf_clock_control_get_onoff(subsys);
    dbd8:	2000      	movs	r0, #0
    dbda:	6924      	ldr	r4, [r4, #16]
    dbdc:	f7ff fc3c 	bl	d458 <z_nrf_clock_control_get_onoff>
    dbe0:	6020      	str	r0, [r4, #0]
    dbe2:	2000      	movs	r0, #0
I2S_NRFX_DEVICE(0);
    dbe4:	b003      	add	sp, #12
    dbe6:	bd30      	pop	{r4, r5, pc}
    dbe8:	20002190 	.word	0x20002190
    dbec:	2000037c 	.word	0x2000037c
    dbf0:	20002180 	.word	0x20002180
    dbf4:	200003d4 	.word	0x200003d4

0000dbf8 <data_handler0>:
    dbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dbfa:	4604      	mov	r4, r0
	if (status & NRFX_I2S_STATUS_TRANSFER_STOPPED) {
    dbfc:	0788      	lsls	r0, r1, #30
I2S_NRFX_DEVICE(0);
    dbfe:	460f      	mov	r7, r1
	if (status & NRFX_I2S_STATUS_TRANSFER_STOPPED) {
    dc00:	d544      	bpl.n	dc8c <data_handler0+0x94>
		if (drv_data->state == I2S_STATE_STOPPING) {
    dc02:	4d57      	ldr	r5, [pc, #348]	; (dd60 <data_handler0+0x168>)
    dc04:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    dc08:	2b03      	cmp	r3, #3
			drv_data->state = I2S_STATE_READY;
    dc0a:	bf04      	itt	eq
    dc0c:	2301      	moveq	r3, #1
    dc0e:	f885 30c8 	strbeq.w	r3, [r5, #200]	; 0xc8
		if (drv_data->last_tx_buffer) {
    dc12:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    dc16:	2b00      	cmp	r3, #0
    dc18:	d02f      	beq.n	dc7a <data_handler0+0x82>
			if (drv_data->last_tx_buffer != released->p_tx_buffer) {
    dc1a:	6862      	ldr	r2, [r4, #4]
    dc1c:	4293      	cmp	r3, r2
    dc1e:	d004      	beq.n	dc2a <data_handler0+0x32>
	k_mem_slab_free(drv_data->tx.cfg.mem_slab, (void **)&buffer);
    dc20:	69e8      	ldr	r0, [r5, #28]
    dc22:	9300      	str	r3, [sp, #0]
    dc24:	4669      	mov	r1, sp
    dc26:	f008 fe26 	bl	16876 <k_mem_slab_free>
			drv_data->last_tx_buffer = NULL;
    dc2a:	2300      	movs	r3, #0
    dc2c:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
		nrfx_i2s_uninit();
    dc30:	f002 fd50 	bl	106d4 <nrfx_i2s_uninit>
		if (drv_data->request_clock) {
    dc34:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    dc38:	0759      	lsls	r1, r3, #29
    dc3a:	d502      	bpl.n	dc42 <data_handler0+0x4a>
			(void)onoff_release(drv_data->clk_mgr);
    dc3c:	6828      	ldr	r0, [r5, #0]
    dc3e:	f007 fbfa 	bl	15436 <onoff_release>
	if (released->p_rx_buffer) {
    dc42:	6822      	ldr	r2, [r4, #0]
    dc44:	2a00      	cmp	r2, #0
    dc46:	d130      	bne.n	dcaa <data_handler0+0xb2>
	if (released->p_tx_buffer) {
    dc48:	6863      	ldr	r3, [r4, #4]
    dc4a:	2b00      	cmp	r3, #0
    dc4c:	d168      	bne.n	dd20 <data_handler0+0x128>
	} else if (status & NRFX_I2S_STATUS_NEXT_BUFFERS_NEEDED) {
    dc4e:	07fb      	lsls	r3, r7, #31
    dc50:	f140 8084 	bpl.w	dd5c <data_handler0+0x164>
		if (drv_data->active_dir != I2S_DIR_RX) { /* -> TX active */
    dc54:	4c42      	ldr	r4, [pc, #264]	; (dd60 <data_handler0+0x168>)
		nrfx_i2s_buffers_t next = { 0 };
    dc56:	2300      	movs	r3, #0
    dc58:	e9cd 3300 	strd	r3, r3, [sp]
		if (drv_data->active_dir != I2S_DIR_RX) { /* -> TX active */
    dc5c:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    dc60:	b133      	cbz	r3, dc70 <data_handler0+0x78>
			if (drv_data->stop) {
    dc62:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    dc66:	2b00      	cmp	r3, #0
    dc68:	d064      	beq.n	dd34 <data_handler0+0x13c>
				next.p_tx_buffer = drv_data->last_tx_buffer;
    dc6a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    dc6e:	9301      	str	r3, [sp, #4]
		(void)supply_next_buffers(drv_data, &next);
    dc70:	4669      	mov	r1, sp
    dc72:	483b      	ldr	r0, [pc, #236]	; (dd60 <data_handler0+0x168>)
    dc74:	f007 ff64 	bl	15b40 <supply_next_buffers>
I2S_NRFX_DEVICE(0);
    dc78:	e070      	b.n	dd5c <data_handler0+0x164>
		nrfx_i2s_uninit();
    dc7a:	f002 fd2b 	bl	106d4 <nrfx_i2s_uninit>
		if (drv_data->request_clock) {
    dc7e:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    dc82:	075a      	lsls	r2, r3, #29
    dc84:	d502      	bpl.n	dc8c <data_handler0+0x94>
			(void)onoff_release(drv_data->clk_mgr);
    dc86:	6828      	ldr	r0, [r5, #0]
    dc88:	f007 fbd5 	bl	15436 <onoff_release>
	if (released == NULL) {
    dc8c:	2c00      	cmp	r4, #0
    dc8e:	d1d8      	bne.n	dc42 <data_handler0+0x4a>
		if (drv_data->state != I2S_STATE_STOPPING) {
    dc90:	4b33      	ldr	r3, [pc, #204]	; (dd60 <data_handler0+0x168>)
    dc92:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
    dc96:	2a03      	cmp	r2, #3
			drv_data->state = I2S_STATE_ERROR;
    dc98:	bf1c      	itt	ne
    dc9a:	2204      	movne	r2, #4
    dc9c:	f883 20c8 	strbne.w	r2, [r3, #200]	; 0xc8
I2S_NRFX_DEVICE(0);
    dca0:	b003      	add	sp, #12
    dca2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		nrfx_i2s_stop();
    dca6:	f002 bd03 	b.w	106b0 <nrfx_i2s_stop>
		if (drv_data->discard_rx) {
    dcaa:	4d2d      	ldr	r5, [pc, #180]	; (dd60 <data_handler0+0x168>)
    dcac:	f895 60cb 	ldrb.w	r6, [r5, #203]	; 0xcb
    dcb0:	b12e      	cbz	r6, dcbe <data_handler0+0xc6>
	k_mem_slab_free(drv_data->rx.cfg.mem_slab, &buffer);
    dcb2:	6f68      	ldr	r0, [r5, #116]	; 0x74
    dcb4:	9200      	str	r2, [sp, #0]
    dcb6:	4669      	mov	r1, sp
    dcb8:	f008 fddd 	bl	16876 <k_mem_slab_free>
    dcbc:	e7c4      	b.n	dc48 <data_handler0+0x50>
	return z_impl_k_msgq_put(msgq, data, timeout);
    dcbe:	2200      	movs	r2, #0
    dcc0:	2300      	movs	r3, #0
    dcc2:	4621      	mov	r1, r4
    dcc4:	f105 0094 	add.w	r0, r5, #148	; 0x94
    dcc8:	f003 fc02 	bl	114d0 <z_impl_k_msgq_put>
			if (ret < 0) {
    dccc:	2800      	cmp	r0, #0
    dcce:	da0d      	bge.n	dcec <data_handler0+0xf4>
				drv_data->state = I2S_STATE_ERROR;
    dcd0:	2304      	movs	r3, #4
    dcd2:	f885 30c8 	strb.w	r3, [r5, #200]	; 0xc8
				free_rx_buffer(drv_data, released->p_rx_buffer);
    dcd6:	6823      	ldr	r3, [r4, #0]
	k_mem_slab_free(drv_data->rx.cfg.mem_slab, &buffer);
    dcd8:	6f68      	ldr	r0, [r5, #116]	; 0x74
    dcda:	9300      	str	r3, [sp, #0]
    dcdc:	4669      	mov	r1, sp
    dcde:	f008 fdca 	bl	16876 <k_mem_slab_free>
	if (released->p_tx_buffer) {
    dce2:	6863      	ldr	r3, [r4, #4]
    dce4:	2b00      	cmp	r3, #0
    dce6:	d0db      	beq.n	dca0 <data_handler0+0xa8>
				stop_transfer = true;
    dce8:	2601      	movs	r6, #1
    dcea:	e005      	b.n	dcf8 <data_handler0+0x100>
				if (drv_data->active_dir == I2S_DIR_RX &&
    dcec:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
    dcf0:	b15b      	cbz	r3, dd0a <data_handler0+0x112>
	if (released->p_tx_buffer) {
    dcf2:	6863      	ldr	r3, [r4, #4]
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	d0aa      	beq.n	dc4e <data_handler0+0x56>
		if (released->p_tx_buffer == drv_data->last_tx_buffer) {
    dcf8:	4a19      	ldr	r2, [pc, #100]	; (dd60 <data_handler0+0x168>)
    dcfa:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    dcfe:	4299      	cmp	r1, r3
    dd00:	d110      	bne.n	dd24 <data_handler0+0x12c>
			drv_data->discard_rx = true;
    dd02:	2301      	movs	r3, #1
    dd04:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
	if (stop_transfer) {
    dd08:	e7ca      	b.n	dca0 <data_handler0+0xa8>
				    drv_data->stop) {
    dd0a:	f895 60ca 	ldrb.w	r6, [r5, #202]	; 0xca
				if (drv_data->active_dir == I2S_DIR_RX &&
    dd0e:	2e00      	cmp	r6, #0
    dd10:	d0ef      	beq.n	dcf2 <data_handler0+0xfa>
					drv_data->discard_rx = true;
    dd12:	2301      	movs	r3, #1
    dd14:	f885 30cb 	strb.w	r3, [r5, #203]	; 0xcb
	if (released->p_tx_buffer) {
    dd18:	6863      	ldr	r3, [r4, #4]
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	d1ec      	bne.n	dcf8 <data_handler0+0x100>
    dd1e:	e7bf      	b.n	dca0 <data_handler0+0xa8>
	bool stop_transfer = false;
    dd20:	2600      	movs	r6, #0
    dd22:	e7e9      	b.n	dcf8 <data_handler0+0x100>
	k_mem_slab_free(drv_data->tx.cfg.mem_slab, (void **)&buffer);
    dd24:	69d0      	ldr	r0, [r2, #28]
    dd26:	9300      	str	r3, [sp, #0]
    dd28:	4669      	mov	r1, sp
    dd2a:	f008 fda4 	bl	16876 <k_mem_slab_free>
	if (stop_transfer) {
    dd2e:	2e00      	cmp	r6, #0
    dd30:	d1b6      	bne.n	dca0 <data_handler0+0xa8>
    dd32:	e78c      	b.n	dc4e <data_handler0+0x56>
	return z_impl_k_msgq_get(msgq, data, timeout);
    dd34:	2200      	movs	r2, #0
    dd36:	2300      	movs	r3, #0
    dd38:	a901      	add	r1, sp, #4
    dd3a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    dd3e:	f003 fc1d 	bl	1157c <z_impl_k_msgq_get>
			} else if (get_next_tx_buffer(drv_data, &next)) {
    dd42:	2800      	cmp	r0, #0
    dd44:	d094      	beq.n	dc70 <data_handler0+0x78>
			} else if (drv_data->state == I2S_STATE_STOPPING) {
    dd46:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    dd4a:	2b03      	cmp	r3, #3
    dd4c:	f04f 0301 	mov.w	r3, #1
    dd50:	d102      	bne.n	dd58 <data_handler0+0x160>
				drv_data->stop = true;
    dd52:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    dd56:	e788      	b.n	dc6a <data_handler0+0x72>
				drv_data->next_tx_buffer_needed = true;
    dd58:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
I2S_NRFX_DEVICE(0);
    dd5c:	b003      	add	sp, #12
    dd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd60:	20000340 	.word	0x20000340

0000dd64 <i2s_nrfx_configure>:
{
    dd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct i2s_nrfx_drv_data *drv_data = dev->data;
    dd68:	6905      	ldr	r5, [r0, #16]
	const struct i2s_nrfx_drv_cfg *drv_cfg = dev->config;
    dd6a:	6843      	ldr	r3, [r0, #4]
	if (drv_data->state != I2S_STATE_READY) {
    dd6c:	f895 e0c8 	ldrb.w	lr, [r5, #200]	; 0xc8
{
    dd70:	b08f      	sub	sp, #60	; 0x3c
	if (drv_data->state != I2S_STATE_READY) {
    dd72:	f1be 0f01 	cmp.w	lr, #1
{
    dd76:	460e      	mov	r6, r1
    dd78:	4614      	mov	r4, r2
	const struct i2s_nrfx_drv_cfg *drv_cfg = dev->config;
    dd7a:	9301      	str	r3, [sp, #4]
	if (drv_data->state != I2S_STATE_READY) {
    dd7c:	d004      	beq.n	dd88 <i2s_nrfx_configure+0x24>
		return -EINVAL;
    dd7e:	f06f 0015 	mvn.w	r0, #21
}
    dd82:	b00f      	add	sp, #60	; 0x3c
    dd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (i2s_cfg->frame_clk_freq == 0) { /* -> reset state */
    dd88:	f8d2 8004 	ldr.w	r8, [r2, #4]
    dd8c:	f1b8 0f00 	cmp.w	r8, #0
    dd90:	d124      	bne.n	dddc <i2s_nrfx_configure+0x78>
		purge_queue(dev, dir);
    dd92:	4628      	mov	r0, r5
    dd94:	f007 ff34 	bl	15c00 <purge_queue.isra.0>
		if (dir == I2S_DIR_TX || dir == I2S_DIR_BOTH) {
    dd98:	1e73      	subs	r3, r6, #1
    dd9a:	2b01      	cmp	r3, #1
    dd9c:	d81b      	bhi.n	ddd6 <i2s_nrfx_configure+0x72>
			drv_data->tx_configured = false;
    dd9e:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    dda2:	f368 0300 	bfi	r3, r8, #0, #1
    dda6:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
			memset(&drv_data->tx, 0, sizeof(drv_data->tx));
    ddaa:	2228      	movs	r2, #40	; 0x28
    ddac:	4641      	mov	r1, r8
    ddae:	f105 0014 	add.w	r0, r5, #20
    ddb2:	f007 fc5e 	bl	15672 <memset>
		if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
    ddb6:	2e02      	cmp	r6, #2
    ddb8:	d10b      	bne.n	ddd2 <i2s_nrfx_configure+0x6e>
			drv_data->rx_configured = false;
    ddba:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    ddbe:	f36f 0341 	bfc	r3, #1, #1
    ddc2:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
			memset(&drv_data->rx, 0, sizeof(drv_data->rx));
    ddc6:	2228      	movs	r2, #40	; 0x28
    ddc8:	2100      	movs	r1, #0
    ddca:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    ddce:	f007 fc50 	bl	15672 <memset>
		return 0;
    ddd2:	2000      	movs	r0, #0
    ddd4:	e7d5      	b.n	dd82 <i2s_nrfx_configure+0x1e>
		if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
    ddd6:	2e00      	cmp	r6, #0
    ddd8:	d0ef      	beq.n	ddba <i2s_nrfx_configure+0x56>
    ddda:	e7fa      	b.n	ddd2 <i2s_nrfx_configure+0x6e>
	if ((i2s_cfg->block_size % sizeof(uint32_t)) != 0) {
    dddc:	68d7      	ldr	r7, [r2, #12]
    ddde:	f017 0703 	ands.w	r7, r7, #3
    dde2:	d1cc      	bne.n	dd7e <i2s_nrfx_configure+0x1a>
	nrfx_cfg = drv_cfg->nrfx_def_cfg;
    dde4:	9b01      	ldr	r3, [sp, #4]
    dde6:	f103 0904 	add.w	r9, r3, #4
    ddea:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
    ddee:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    ddf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ddf6:	f8d9 3000 	ldr.w	r3, [r9]
    ddfa:	f8cc 3000 	str.w	r3, [ip]
	switch (i2s_cfg->word_size) {
    ddfe:	7823      	ldrb	r3, [r4, #0]
    de00:	2b10      	cmp	r3, #16
    de02:	d061      	beq.n	dec8 <i2s_nrfx_configure+0x164>
    de04:	2b18      	cmp	r3, #24
    de06:	d062      	beq.n	dece <i2s_nrfx_configure+0x16a>
    de08:	2b08      	cmp	r3, #8
    de0a:	d1b8      	bne.n	dd7e <i2s_nrfx_configure+0x1a>
		nrfx_cfg.sample_width = NRF_I2S_SWIDTH_8BIT;
    de0c:	9704      	str	r7, [sp, #16]
	switch (i2s_cfg->format & I2S_FMT_DATA_FORMAT_MASK) {
    de0e:	78a2      	ldrb	r2, [r4, #2]
    de10:	f002 0c07 	and.w	ip, r2, #7
    de14:	f1bc 0f03 	cmp.w	ip, #3
    de18:	d05c      	beq.n	ded4 <i2s_nrfx_configure+0x170>
    de1a:	f1bc 0f04 	cmp.w	ip, #4
    de1e:	d05e      	beq.n	dede <i2s_nrfx_configure+0x17a>
    de20:	f1bc 0f00 	cmp.w	ip, #0
    de24:	d1ab      	bne.n	dd7e <i2s_nrfx_configure+0x1a>
		nrfx_cfg.alignment = NRF_I2S_ALIGN_LEFT;
    de26:	f8cd c00c 	str.w	ip, [sp, #12]
	nrfx_cfg = drv_cfg->nrfx_def_cfg;
    de2a:	9901      	ldr	r1, [sp, #4]
    de2c:	9801      	ldr	r0, [sp, #4]
    de2e:	7989      	ldrb	r1, [r1, #6]
    de30:	f890 9014 	ldrb.w	r9, [r0, #20]
	if ((i2s_cfg->format & I2S_FMT_DATA_ORDER_LSB) ||
    de34:	f012 0238 	ands.w	r2, r2, #56	; 0x38
    de38:	d1a1      	bne.n	dd7e <i2s_nrfx_configure+0x1a>
	if (i2s_cfg->channels == 2) {
    de3a:	f894 b001 	ldrb.w	fp, [r4, #1]
    de3e:	f1bb 0f02 	cmp.w	fp, #2
    de42:	d050      	beq.n	dee6 <i2s_nrfx_configure+0x182>
	} else if (i2s_cfg->channels == 1) {
    de44:	f1bb 0f01 	cmp.w	fp, #1
    de48:	d199      	bne.n	dd7e <i2s_nrfx_configure+0x1a>
	if ((i2s_cfg->options & I2S_OPT_BIT_CLK_SLAVE) &&
    de4a:	78e0      	ldrb	r0, [r4, #3]
    de4c:	f000 0a06 	and.w	sl, r0, #6
    de50:	f1ba 0f06 	cmp.w	sl, #6
    de54:	d149      	bne.n	deea <i2s_nrfx_configure+0x186>
	if (nrfx_cfg.mode == NRF_I2S_MODE_MASTER ||
    de56:	29ff      	cmp	r1, #255	; 0xff
    de58:	d177      	bne.n	df4a <i2s_nrfx_configure+0x1e6>
    de5a:	2300      	movs	r3, #0
		drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    de5c:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    de60:	f363 0282 	bfi	r2, r3, #2, #1
    de64:	f885 20cd 	strb.w	r2, [r5, #205]	; 0xcd
	if ((i2s_cfg->options & I2S_OPT_LOOPBACK) ||
    de68:	f994 2003 	ldrsb.w	r2, [r4, #3]
    de6c:	78e3      	ldrb	r3, [r4, #3]
    de6e:	2a00      	cmp	r2, #0
    de70:	db85      	blt.n	dd7e <i2s_nrfx_configure+0x1a>
    de72:	065b      	lsls	r3, r3, #25
    de74:	d483      	bmi.n	dd7e <i2s_nrfx_configure+0x1a>
	if (dir == I2S_DIR_TX || dir == I2S_DIR_BOTH) {
    de76:	1e73      	subs	r3, r6, #1
    de78:	2b01      	cmp	r3, #1
    de7a:	f240 8089 	bls.w	df90 <i2s_nrfx_configure+0x22c>
	if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
    de7e:	2e00      	cmp	r6, #0
    de80:	d1a7      	bne.n	ddd2 <i2s_nrfx_configure+0x6e>
		drv_data->rx.cfg = *i2s_cfg;
    de82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    de84:	f105 066c 	add.w	r6, r5, #108	; 0x6c
    de88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    de8a:	6823      	ldr	r3, [r4, #0]
    de8c:	6033      	str	r3, [r6, #0]
		drv_data->rx.nrfx_cfg = nrfx_cfg;
    de8e:	9b03      	ldr	r3, [sp, #12]
    de90:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    de94:	9b04      	ldr	r3, [sp, #16]
    de96:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
    de9a:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    de9e:	f88d c02b 	strb.w	ip, [sp, #43]	; 0x2b
    dea2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    dea6:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
    deaa:	970c      	str	r7, [sp, #48]	; 0x30
    deac:	ae09      	add	r6, sp, #36	; 0x24
    deae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    deb0:	f105 0480 	add.w	r4, r5, #128	; 0x80
    deb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    deb6:	6833      	ldr	r3, [r6, #0]
    deb8:	6023      	str	r3, [r4, #0]
		drv_data->rx_configured = true;
    deba:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    debe:	f043 0302 	orr.w	r3, r3, #2
    dec2:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
    dec6:	e784      	b.n	ddd2 <i2s_nrfx_configure+0x6e>
	switch (i2s_cfg->word_size) {
    dec8:	f8cd e010 	str.w	lr, [sp, #16]
    decc:	e79f      	b.n	de0e <i2s_nrfx_configure+0xaa>
		nrfx_cfg.sample_width = NRF_I2S_SWIDTH_24BIT;
    dece:	2202      	movs	r2, #2
    ded0:	9204      	str	r2, [sp, #16]
    ded2:	e79c      	b.n	de0e <i2s_nrfx_configure+0xaa>
	switch (i2s_cfg->format & I2S_FMT_DATA_FORMAT_MASK) {
    ded4:	2100      	movs	r1, #0
    ded6:	f04f 0c01 	mov.w	ip, #1
    deda:	9103      	str	r1, [sp, #12]
    dedc:	e7a5      	b.n	de2a <i2s_nrfx_configure+0xc6>
		nrfx_cfg.alignment = NRF_I2S_ALIGN_RIGHT;
    dede:	2101      	movs	r1, #1
    dee0:	9103      	str	r1, [sp, #12]
		nrfx_cfg.format = NRF_I2S_FORMAT_ALIGNED;
    dee2:	468c      	mov	ip, r1
    dee4:	e7a1      	b.n	de2a <i2s_nrfx_configure+0xc6>
		nrfx_cfg.channels = NRF_I2S_CHANNELS_STEREO;
    dee6:	4693      	mov	fp, r2
    dee8:	e7af      	b.n	de4a <i2s_nrfx_configure+0xe6>
	} else if (!(i2s_cfg->options & I2S_OPT_BIT_CLK_SLAVE) &&
    deea:	f1ba 0f00 	cmp.w	sl, #0
    deee:	f47f af46 	bne.w	dd7e <i2s_nrfx_configure+0x1a>
	uint32_t bits_per_frame = 2 * i2s_cfg->word_size;
    def2:	005b      	lsls	r3, r3, #1
    def4:	9307      	str	r3, [sp, #28]
    def6:	2100      	movs	r1, #0
	uint32_t best_diff = UINT32_MAX;
    def8:	f04f 3eff 	mov.w	lr, #4294967295
		if ((ratios[r].ratio_val % bits_per_frame) != 0) {
    defc:	4b3c      	ldr	r3, [pc, #240]	; (dff0 <i2s_nrfx_configure+0x28c>)
    defe:	f8dd 901c 	ldr.w	r9, [sp, #28]
    df02:	f833 3021 	ldrh.w	r3, [r3, r1, lsl #2]
    df06:	9807      	ldr	r0, [sp, #28]
    df08:	fbb3 f0f0 	udiv	r0, r3, r0
    df0c:	fb09 3010 	mls	r0, r9, r0, r3
    df10:	9305      	str	r3, [sp, #20]
    df12:	bb38      	cbnz	r0, df64 <i2s_nrfx_configure+0x200>
    df14:	b2cb      	uxtb	r3, r1
    df16:	9306      	str	r3, [sp, #24]
    df18:	4b36      	ldr	r3, [pc, #216]	; (dff4 <i2s_nrfx_configure+0x290>)
    df1a:	9302      	str	r3, [sp, #8]
					src_freq / dividers[d].divider_val;
    df1c:	9b02      	ldr	r3, [sp, #8]
				uint32_t mck_freq =
    df1e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; dff8 <i2s_nrfx_configure+0x294>
					src_freq / dividers[d].divider_val;
    df22:	781b      	ldrb	r3, [r3, #0]
				uint32_t mck_freq =
    df24:	fbb9 f3f3 	udiv	r3, r9, r3
				uint32_t lrck_freq =
    df28:	f8dd 9014 	ldr.w	r9, [sp, #20]
    df2c:	fbb3 f3f9 	udiv	r3, r3, r9
					: (i2s_cfg->frame_clk_freq - lrck_freq);
    df30:	4598      	cmp	r8, r3
    df32:	d80d      	bhi.n	df50 <i2s_nrfx_configure+0x1ec>
    df34:	eba3 0308 	sub.w	r3, r3, r8
				if (diff < best_diff) {
    df38:	459e      	cmp	lr, r3
    df3a:	d822      	bhi.n	df82 <i2s_nrfx_configure+0x21e>
			for (uint8_t d = 0; d < ARRAY_SIZE(dividers); ++d) {
    df3c:	9b02      	ldr	r3, [sp, #8]
    df3e:	3001      	adds	r0, #1
    df40:	3308      	adds	r3, #8
    df42:	280d      	cmp	r0, #13
    df44:	9302      	str	r3, [sp, #8]
    df46:	d1e9      	bne.n	df1c <i2s_nrfx_configure+0x1b8>
    df48:	e00c      	b.n	df64 <i2s_nrfx_configure+0x200>
		nrfx_cfg.mode = NRF_I2S_MODE_SLAVE;
    df4a:	f04f 0a01 	mov.w	sl, #1
    df4e:	e7d0      	b.n	def2 <i2s_nrfx_configure+0x18e>
					: (i2s_cfg->frame_clk_freq - lrck_freq);
    df50:	eba8 0303 	sub.w	r3, r8, r3
				if (diff < best_diff) {
    df54:	459e      	cmp	lr, r3
    df56:	d905      	bls.n	df64 <i2s_nrfx_configure+0x200>
					best_mck_cfg = dividers[d].divider_enum;
    df58:	4a26      	ldr	r2, [pc, #152]	; (dff4 <i2s_nrfx_configure+0x290>)
    df5a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    df5e:	9a06      	ldr	r2, [sp, #24]
    df60:	6847      	ldr	r7, [r0, #4]
    df62:	469e      	mov	lr, r3
	for (r = 0; r < ARRAY_SIZE(ratios); ++r) {
    df64:	3101      	adds	r1, #1
    df66:	2909      	cmp	r1, #9
    df68:	d1c8      	bne.n	defc <i2s_nrfx_configure+0x198>
	config->ratio = ratios[best_r].ratio_enum;
    df6a:	4b21      	ldr	r3, [pc, #132]	; (dff0 <i2s_nrfx_configure+0x28c>)
    df6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    df70:	46d6      	mov	lr, sl
	config->ratio = ratios[best_r].ratio_enum;
    df72:	f893 9002 	ldrb.w	r9, [r3, #2]
		drv_data->request_clock = (drv_cfg->clk_src != PCLK32M);
    df76:	9b01      	ldr	r3, [sp, #4]
    df78:	7f1b      	ldrb	r3, [r3, #28]
    df7a:	3b00      	subs	r3, #0
    df7c:	bf18      	it	ne
    df7e:	2301      	movne	r3, #1
    df80:	e76c      	b.n	de5c <i2s_nrfx_configure+0xf8>
					best_mck_cfg = dividers[d].divider_enum;
    df82:	9a02      	ldr	r2, [sp, #8]
    df84:	6857      	ldr	r7, [r2, #4]
					if (diff == 0) {
    df86:	9a06      	ldr	r2, [sp, #24]
    df88:	2b00      	cmp	r3, #0
    df8a:	d0eb      	beq.n	df64 <i2s_nrfx_configure+0x200>
    df8c:	469e      	mov	lr, r3
    df8e:	e7d5      	b.n	df3c <i2s_nrfx_configure+0x1d8>
		drv_data->tx.cfg = *i2s_cfg;
    df90:	46a2      	mov	sl, r4
    df92:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    df96:	f105 0814 	add.w	r8, r5, #20
    df9a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    df9e:	f8da 3000 	ldr.w	r3, [sl]
    dfa2:	f8c8 3000 	str.w	r3, [r8]
		drv_data->tx.nrfx_cfg = nrfx_cfg;
    dfa6:	9b03      	ldr	r3, [sp, #12]
    dfa8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    dfac:	9b04      	ldr	r3, [sp, #16]
    dfae:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
    dfb2:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    dfb6:	f88d c02b 	strb.w	ip, [sp, #43]	; 0x2b
    dfba:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    dfbe:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
    dfc2:	970c      	str	r7, [sp, #48]	; 0x30
    dfc4:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    dfc8:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    dfcc:	f105 0828 	add.w	r8, r5, #40	; 0x28
    dfd0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    dfd4:	f8da 3000 	ldr.w	r3, [sl]
    dfd8:	f8c8 3000 	str.w	r3, [r8]
		drv_data->tx_configured = true;
    dfdc:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
	if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
    dfe0:	2e02      	cmp	r6, #2
		drv_data->tx_configured = true;
    dfe2:	f043 0301 	orr.w	r3, r3, #1
    dfe6:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
    dfea:	f43f af4a 	beq.w	de82 <i2s_nrfx_configure+0x11e>
    dfee:	e6f0      	b.n	ddd2 <i2s_nrfx_configure+0x6e>
    dff0:	000179e4 	.word	0x000179e4
    dff4:	00017640 	.word	0x00017640
    dff8:	01e84800 	.word	0x01e84800

0000dffc <i2s_nrfx_trigger>:
{
    dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (dir == I2S_DIR_BOTH) {
    dffe:	2902      	cmp	r1, #2
	struct i2s_nrfx_drv_data *drv_data = dev->data;
    e000:	6904      	ldr	r4, [r0, #16]
{
    e002:	4607      	mov	r7, r0
    e004:	460d      	mov	r5, r1
    e006:	4616      	mov	r6, r2
	if (dir == I2S_DIR_BOTH) {
    e008:	d108      	bne.n	e01c <i2s_nrfx_trigger+0x20>
		configured = drv_data->tx_configured && drv_data->rx_configured;
    e00a:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	if (!configured) {
    e00e:	f003 0303 	and.w	r3, r3, #3
    e012:	2b03      	cmp	r3, #3
    e014:	d017      	beq.n	e046 <i2s_nrfx_trigger+0x4a>
		return -EIO;
    e016:	f06f 0004 	mvn.w	r0, #4
}
    e01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (dir == I2S_DIR_TX) {
    e01c:	2901      	cmp	r1, #1
    e01e:	d10b      	bne.n	e038 <i2s_nrfx_trigger+0x3c>
		configured = drv_data->tx_configured;
    e020:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	if (!configured) {
    e024:	f013 0f01 	tst.w	r3, #1
    e028:	d0f5      	beq.n	e016 <i2s_nrfx_trigger+0x1a>
	switch (cmd) {
    e02a:	2e04      	cmp	r6, #4
    e02c:	d875      	bhi.n	e11a <i2s_nrfx_trigger+0x11e>
    e02e:	e8df f006 	tbb	[pc, r6]
    e032:	4c18      	.short	0x4c18
    e034:	6c4c      	.short	0x6c4c
    e036:	60          	.byte	0x60
    e037:	00          	.byte	0x00
	} else if (dir == I2S_DIR_RX) {
    e038:	2900      	cmp	r1, #0
    e03a:	d1ec      	bne.n	e016 <i2s_nrfx_trigger+0x1a>
		configured = drv_data->rx_configured;
    e03c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	if (!configured) {
    e040:	f013 0f02 	tst.w	r3, #2
    e044:	e7f0      	b.n	e028 <i2s_nrfx_trigger+0x2c>
	    (memcmp(&drv_data->tx.nrfx_cfg,
    e046:	2214      	movs	r2, #20
    e048:	f104 0180 	add.w	r1, r4, #128	; 0x80
    e04c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e050:	f007 fadd 	bl	1560e <memcmp>
	if (dir == I2S_DIR_BOTH &&
    e054:	2800      	cmp	r0, #0
    e056:	d1de      	bne.n	e016 <i2s_nrfx_trigger+0x1a>
	     ||
    e058:	6a22      	ldr	r2, [r4, #32]
    e05a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    e05c:	429a      	cmp	r2, r3
    e05e:	d0e4      	beq.n	e02a <i2s_nrfx_trigger+0x2e>
    e060:	e7d9      	b.n	e016 <i2s_nrfx_trigger+0x1a>
	if (!cmd_allowed) {
    e062:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e066:	2b01      	cmp	r3, #1
    e068:	d1d5      	bne.n	e016 <i2s_nrfx_trigger+0x1a>
		drv_data->stop = false;
    e06a:	2300      	movs	r3, #0
		drv_data->active_dir = dir;
    e06c:	f884 50c9 	strb.w	r5, [r4, #201]	; 0xc9
		drv_data->stop = false;
    e070:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
		drv_data->next_tx_buffer_needed = false;
    e074:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	struct i2s_nrfx_drv_data *drv_data = dev->data;
    e078:	693c      	ldr	r4, [r7, #16]
	const struct i2s_nrfx_drv_cfg *drv_cfg = dev->config;
    e07a:	687b      	ldr	r3, [r7, #4]
	const nrfx_i2s_config_t *nrfx_cfg = (drv_data->active_dir == I2S_DIR_TX)
    e07c:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
	err = nrfx_i2s_init(nrfx_cfg, drv_cfg->data_handler);
    e080:	6819      	ldr	r1, [r3, #0]
	const nrfx_i2s_config_t *nrfx_cfg = (drv_data->active_dir == I2S_DIR_TX)
    e082:	2a01      	cmp	r2, #1
    e084:	bf0c      	ite	eq
    e086:	f104 0028 	addeq.w	r0, r4, #40	; 0x28
    e08a:	f104 0080 	addne.w	r0, r4, #128	; 0x80
	err = nrfx_i2s_init(nrfx_cfg, drv_cfg->data_handler);
    e08e:	f002 f9af 	bl	103f0 <nrfx_i2s_init>
	if (err != NRFX_SUCCESS) {
    e092:	4b2e      	ldr	r3, [pc, #184]	; (e14c <i2s_nrfx_trigger+0x150>)
    e094:	4298      	cmp	r0, r3
    e096:	d1be      	bne.n	e016 <i2s_nrfx_trigger+0x1a>
	drv_data->state = I2S_STATE_RUNNING;
    e098:	2302      	movs	r3, #2
    e09a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	if (drv_data->request_clock) {
    e09e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e0a2:	075b      	lsls	r3, r3, #29
    e0a4:	d53c      	bpl.n	e120 <i2s_nrfx_trigger+0x124>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    e0a6:	4b2a      	ldr	r3, [pc, #168]	; (e150 <i2s_nrfx_trigger+0x154>)
    e0a8:	60a3      	str	r3, [r4, #8]
    e0aa:	2200      	movs	r2, #0
    e0ac:	2303      	movs	r3, #3
		ret = onoff_request(drv_data->clk_mgr, &drv_data->clk_cli);
    e0ae:	6820      	ldr	r0, [r4, #0]
    e0b0:	6122      	str	r2, [r4, #16]
    e0b2:	60e3      	str	r3, [r4, #12]
    e0b4:	1d21      	adds	r1, r4, #4
    e0b6:	f007 f966 	bl	15386 <onoff_request>
		if (ret < 0) {
    e0ba:	2800      	cmp	r0, #0
    e0bc:	da3b      	bge.n	e136 <i2s_nrfx_trigger+0x13a>
			nrfx_i2s_uninit();
    e0be:	f002 fb09 	bl	106d4 <nrfx_i2s_uninit>
			drv_data->state = I2S_STATE_READY;
    e0c2:	2301      	movs	r3, #1
    e0c4:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
			return -EIO;
    e0c8:	e7a5      	b.n	e016 <i2s_nrfx_trigger+0x1a>
	if (!cmd_allowed) {
    e0ca:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e0ce:	2b02      	cmp	r3, #2
    e0d0:	d1a1      	bne.n	e016 <i2s_nrfx_trigger+0x1a>
	if (drv_data->state == I2S_STATE_RUNNING &&
    e0d2:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e0d6:	42ab      	cmp	r3, r5
    e0d8:	d11f      	bne.n	e11a <i2s_nrfx_trigger+0x11e>
	switch (cmd) {
    e0da:	2e02      	cmp	r6, #2
    e0dc:	f04f 0303 	mov.w	r3, #3
    e0e0:	d124      	bne.n	e12c <i2s_nrfx_trigger+0x130>
		drv_data->stop = (drv_data->active_dir == I2S_DIR_RX);
    e0e2:	fab5 f585 	clz	r5, r5
    e0e6:	096d      	lsrs	r5, r5, #5
		drv_data->state = I2S_STATE_STOPPING;
    e0e8:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		drv_data->stop = (drv_data->active_dir == I2S_DIR_RX);
    e0ec:	f884 50ca 	strb.w	r5, [r4, #202]	; 0xca
		return 0;
    e0f0:	e021      	b.n	e136 <i2s_nrfx_trigger+0x13a>
	if (!cmd_allowed) {
    e0f2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e0f6:	2b04      	cmp	r3, #4
    e0f8:	d18d      	bne.n	e016 <i2s_nrfx_trigger+0x1a>
		purge_queue(dev, dir);
    e0fa:	6938      	ldr	r0, [r7, #16]
    e0fc:	4629      	mov	r1, r5
    e0fe:	f007 fd7f 	bl	15c00 <purge_queue.isra.0>
		drv_data->state = I2S_STATE_READY;
    e102:	2301      	movs	r3, #1
    e104:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		return 0;
    e108:	e015      	b.n	e136 <i2s_nrfx_trigger+0x13a>
	if (drv_data->state == I2S_STATE_RUNNING &&
    e10a:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    e10e:	2b02      	cmp	r3, #2
    e110:	d113      	bne.n	e13a <i2s_nrfx_trigger+0x13e>
    e112:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
    e116:	42ab      	cmp	r3, r5
    e118:	d011      	beq.n	e13e <i2s_nrfx_trigger+0x142>
    e11a:	f06f 0015 	mvn.w	r0, #21
    e11e:	e77c      	b.n	e01a <i2s_nrfx_trigger+0x1e>
		ret = start_transfer(drv_data);
    e120:	4620      	mov	r0, r4
    e122:	f7ff fcdf 	bl	dae4 <start_transfer>
		if (ret < 0) {
    e126:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    e12a:	e776      	b.n	e01a <i2s_nrfx_trigger+0x1e>
		drv_data->state = I2S_STATE_STOPPING;
    e12c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		drv_data->stop = true;
    e130:	2301      	movs	r3, #1
    e132:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
		return 0;
    e136:	2000      	movs	r0, #0
    e138:	e76f      	b.n	e01a <i2s_nrfx_trigger+0x1e>
		if (drv_data->state != I2S_STATE_READY) {
    e13a:	2b01      	cmp	r3, #1
    e13c:	d0dd      	beq.n	e0fa <i2s_nrfx_trigger+0xfe>
			drv_data->discard_rx = true;
    e13e:	2301      	movs	r3, #1
    e140:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
			nrfx_i2s_stop();
    e144:	f002 fab4 	bl	106b0 <nrfx_i2s_stop>
		purge_queue(dev, dir);
    e148:	e7d7      	b.n	e0fa <i2s_nrfx_trigger+0xfe>
    e14a:	bf00      	nop
    e14c:	0bad0000 	.word	0x0bad0000
    e150:	00015b1b 	.word	0x00015b1b

0000e154 <ws2812_i2s_init>:
	LOG_ERR("update_channels not implemented");
	return -ENOTSUP;
}

static int ws2812_i2s_init(const struct device *dev)
{
    e154:	b510      	push	{r4, lr}
	const struct ws2812_i2s_cfg *cfg = dev->config;
    e156:	6844      	ldr	r4, [r0, #4]
	struct i2s_config config;
	uint32_t lrck_hz;
	int ret;

	lrck_hz = USEC_PER_SEC / cfg->lrck_period;
    e158:	4b14      	ldr	r3, [pc, #80]	; (e1ac <ws2812_i2s_init+0x58>)
    e15a:	69a2      	ldr	r2, [r4, #24]
    e15c:	fbb3 f3f2 	udiv	r3, r3, r2
{
    e160:	b086      	sub	sp, #24
	LOG_DBG("Word clock: freq %u Hz period %u us",
		lrck_hz, cfg->lrck_period);

	/* 16-bit stereo, 100kHz LCLK */
	config.word_size = 16;
    e162:	f44f 7204 	mov.w	r2, #528	; 0x210
	config.channels = 2;
	config.format = I2S_FMT_DATA_FORMAT_I2S;
	config.options = I2S_OPT_BIT_CLK_MASTER | I2S_OPT_FRAME_CLK_MASTER;
	config.frame_clk_freq = lrck_hz; /* WS (or LRCK) */
    e166:	e9cd 2301 	strd	r2, r3, [sp, #4]
	config.mem_slab = cfg->mem_slab;
    e16a:	68a3      	ldr	r3, [r4, #8]
    e16c:	9303      	str	r3, [sp, #12]
	config.block_size = cfg->tx_buf_bytes;
    e16e:	6863      	ldr	r3, [r4, #4]
    e170:	9304      	str	r3, [sp, #16]
	config.timeout = 1000;
    e172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e176:	9305      	str	r3, [sp, #20]

	ret = i2s_configure(cfg->dev, I2S_DIR_TX, &config);
    e178:	6820      	ldr	r0, [r4, #0]
				       const struct i2s_config *cfg)
{
	const struct i2s_driver_api *api =
		(const struct i2s_driver_api *)dev->api;

	return api->configure(dev, dir, cfg);
    e17a:	6883      	ldr	r3, [r0, #8]
    e17c:	aa01      	add	r2, sp, #4
    e17e:	681b      	ldr	r3, [r3, #0]
    e180:	2101      	movs	r1, #1
    e182:	4798      	blx	r3
	if (ret < 0) {
    e184:	2800      	cmp	r0, #0
    e186:	db05      	blt.n	e194 <ws2812_i2s_init+0x40>
		LOG_ERR("Failed to configure I2S device: %d\n", ret);
		return ret;
	}

	for (uint16_t i = 0; i < cfg->num_colors; i++) {
    e188:	7b22      	ldrb	r2, [r4, #12]
    e18a:	2300      	movs	r3, #0
    e18c:	b299      	uxth	r1, r3
    e18e:	4291      	cmp	r1, r2
    e190:	d302      	bcc.n	e198 <ws2812_i2s_init+0x44>
				dev->name);
			return -EINVAL;
		}
	}

	return 0;
    e192:	2000      	movs	r0, #0
}
    e194:	b006      	add	sp, #24
    e196:	bd10      	pop	{r4, pc}
		switch (cfg->color_mapping[i]) {
    e198:	6921      	ldr	r1, [r4, #16]
    e19a:	5cc9      	ldrb	r1, [r1, r3]
    e19c:	2903      	cmp	r1, #3
    e19e:	f103 0301 	add.w	r3, r3, #1
    e1a2:	d9f3      	bls.n	e18c <ws2812_i2s_init+0x38>
			return -EINVAL;
    e1a4:	f06f 0015 	mvn.w	r0, #21
    e1a8:	e7f4      	b.n	e194 <ws2812_i2s_init+0x40>
    e1aa:	bf00      	nop
    e1ac:	000f4240 	.word	0x000f4240

0000e1b0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    e1b4:	4e64      	ldr	r6, [pc, #400]	; (e348 <pinctrl_configure_pins+0x198>)
    e1b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e1ba:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e1bc:	4281      	cmp	r1, r0
    e1be:	d102      	bne.n	e1c6 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    e1c0:	2000      	movs	r0, #0
}
    e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    e1c6:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    e1c8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    e1cc:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    e1d0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    e1d2:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    e1d6:	bf08      	it	eq
    e1d8:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    e1dc:	2c22      	cmp	r4, #34	; 0x22
    e1de:	f200 80b0 	bhi.w	e342 <pinctrl_configure_pins+0x192>
    e1e2:	e8df f004 	tbb	[pc, r4]
    e1e6:	2412      	.short	0x2412
    e1e8:	402c4429 	.word	0x402c4429
    e1ec:	aeaeae44 	.word	0xaeaeae44
    e1f0:	737047ae 	.word	0x737047ae
    e1f4:	7f7c7976 	.word	0x7f7c7976
    e1f8:	aeae8582 	.word	0xaeae8582
    e1fc:	96939088 	.word	0x96939088
    e200:	99aeaeae 	.word	0x99aeaeae
    e204:	a8a5a29f 	.word	0xa8a5a29f
    e208:	ab          	.byte	0xab
    e209:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    e20a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    e20e:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    e212:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    e216:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    e21a:	bf14      	ite	ne
    e21c:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    e220:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    e222:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    e226:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    e22a:	2401      	movs	r4, #1
    e22c:	e002      	b.n	e234 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    e22e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e232:	2400      	movs	r4, #0
    e234:	46a6      	mov	lr, r4
    e236:	e024      	b.n	e282 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    e238:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    e23c:	e7e7      	b.n	e20e <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    e23e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e242:	2400      	movs	r4, #0
    return pin_number >> 5;
    e244:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    e248:	f1be 0f01 	cmp.w	lr, #1
    e24c:	bf14      	ite	ne
    e24e:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    e252:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    e254:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    e258:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    e25c:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    e260:	f04f 0e01 	mov.w	lr, #1
    e264:	e00d      	b.n	e282 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    e266:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    e26a:	2401      	movs	r4, #1
    e26c:	e7ea      	b.n	e244 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    e26e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    e272:	e7de      	b.n	e232 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    e274:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    e278:	2d00      	cmp	r5, #0
    e27a:	d1da      	bne.n	e232 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    e27c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e27e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    e280:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    e282:	f850 cb04 	ldr.w	ip, [r0], #4
    e286:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e28a:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    e28e:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    e292:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    e296:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    e29a:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e29e:	bf1c      	itt	ne
    e2a0:	2401      	movne	r4, #1
    e2a2:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e2a6:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    e2aa:	2b01      	cmp	r3, #1
    e2ac:	bf0c      	ite	eq
    e2ae:	4633      	moveq	r3, r6
    e2b0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e2b4:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    e2b8:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    e2bc:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    e2c0:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    e2c4:	e77a      	b.n	e1bc <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    e2c6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    e2ca:	e7d5      	b.n	e278 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_I2S(reg, SCK) = pin;
    e2cc:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			if (write != NO_WRITE) {
    e2d0:	e7cb      	b.n	e26a <pinctrl_configure_pins+0xba>
			NRF_PSEL_I2S(reg, SCK) = pin;
    e2d2:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			if (write != NO_WRITE) {
    e2d6:	e7ac      	b.n	e232 <pinctrl_configure_pins+0x82>
			NRF_PSEL_I2S(reg, LRCK) = pin;
    e2d8:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			if (write != NO_WRITE) {
    e2dc:	e7c5      	b.n	e26a <pinctrl_configure_pins+0xba>
			NRF_PSEL_I2S(reg, LRCK) = pin;
    e2de:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
    e2e2:	e7a6      	b.n	e232 <pinctrl_configure_pins+0x82>
			NRF_PSEL_I2S(reg, SDIN) = pin;
    e2e4:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
			if (write != NO_WRITE) {
    e2e8:	e7a3      	b.n	e232 <pinctrl_configure_pins+0x82>
			NRF_PSEL_I2S(reg, SDOUT) = pin;
    e2ea:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    if (value == 0)
    e2ee:	e7bc      	b.n	e26a <pinctrl_configure_pins+0xba>
			NRF_PSEL_I2S(reg, MCK) = pin;
    e2f0:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			if (write != NO_WRITE) {
    e2f4:	e7b9      	b.n	e26a <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    e2f6:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    e2fa:	6804      	ldr	r4, [r0, #0]
    e2fc:	f3c4 3480 	ubfx	r4, r4, #14, #1
    e300:	2c00      	cmp	r4, #0
    e302:	d184      	bne.n	e20e <pinctrl_configure_pins+0x5e>
    e304:	e7b1      	b.n	e26a <pinctrl_configure_pins+0xba>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    e306:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    e30a:	e7f6      	b.n	e2fa <pinctrl_configure_pins+0x14a>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    e30c:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    e310:	e7f3      	b.n	e2fa <pinctrl_configure_pins+0x14a>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    e312:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    e316:	e7f0      	b.n	e2fa <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    e318:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    e31c:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    e31e:	f04f 0e00 	mov.w	lr, #0
    e322:	e7ae      	b.n	e282 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    e324:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
			if (write != NO_WRITE) {
    e328:	e771      	b.n	e20e <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    e32a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    e32e:	e7f5      	b.n	e31c <pinctrl_configure_pins+0x16c>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    e330:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
			if (write != NO_WRITE) {
    e334:	e7f2      	b.n	e31c <pinctrl_configure_pins+0x16c>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    e336:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    e33a:	e7ef      	b.n	e31c <pinctrl_configure_pins+0x16c>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    e33c:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    e340:	e7ec      	b.n	e31c <pinctrl_configure_pins+0x16c>
		switch (NRF_GET_FUN(pins[i])) {
    e342:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e346:	e73c      	b.n	e1c2 <pinctrl_configure_pins+0x12>
    e348:	50000300 	.word	0x50000300

0000e34c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    e34c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    e34e:	794b      	ldrb	r3, [r1, #5]
    e350:	2b01      	cmp	r3, #1
    e352:	d026      	beq.n	e3a2 <uarte_nrfx_configure+0x56>
    e354:	2b03      	cmp	r3, #3
    e356:	d121      	bne.n	e39c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    e358:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    e35a:	798b      	ldrb	r3, [r1, #6]
    e35c:	2b03      	cmp	r3, #3
    e35e:	d11d      	bne.n	e39c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    e360:	79ce      	ldrb	r6, [r1, #7]
    e362:	b10e      	cbz	r6, e368 <uarte_nrfx_configure+0x1c>
    e364:	2e01      	cmp	r6, #1
    e366:	d119      	bne.n	e39c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    e368:	790a      	ldrb	r2, [r1, #4]
    e36a:	b112      	cbz	r2, e372 <uarte_nrfx_configure+0x26>
    e36c:	2a02      	cmp	r2, #2
    e36e:	d115      	bne.n	e39c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    e370:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    e372:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    e374:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    e376:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    e37a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    e37c:	d067      	beq.n	e44e <uarte_nrfx_configure+0x102>
    e37e:	d82d      	bhi.n	e3dc <uarte_nrfx_configure+0x90>
    e380:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    e384:	d066      	beq.n	e454 <uarte_nrfx_configure+0x108>
    e386:	d816      	bhi.n	e3b6 <uarte_nrfx_configure+0x6a>
    e388:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    e38c:	d064      	beq.n	e458 <uarte_nrfx_configure+0x10c>
    e38e:	d80a      	bhi.n	e3a6 <uarte_nrfx_configure+0x5a>
    e390:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    e394:	d063      	beq.n	e45e <uarte_nrfx_configure+0x112>
    e396:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    e39a:	d063      	beq.n	e464 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    e39c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    e3a0:	e054      	b.n	e44c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    e3a2:	2500      	movs	r5, #0
    e3a4:	e7d9      	b.n	e35a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    e3a6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    e3aa:	d05e      	beq.n	e46a <uarte_nrfx_configure+0x11e>
    e3ac:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    e3b0:	d1f4      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    e3b2:	4b38      	ldr	r3, [pc, #224]	; (e494 <uarte_nrfx_configure+0x148>)
    e3b4:	e03c      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e3b6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    e3ba:	d059      	beq.n	e470 <uarte_nrfx_configure+0x124>
    e3bc:	d807      	bhi.n	e3ce <uarte_nrfx_configure+0x82>
    e3be:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    e3c2:	d057      	beq.n	e474 <uarte_nrfx_configure+0x128>
    e3c4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    e3c8:	d1e8      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    e3ca:	4b33      	ldr	r3, [pc, #204]	; (e498 <uarte_nrfx_configure+0x14c>)
    e3cc:	e030      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e3ce:	f647 2412 	movw	r4, #31250	; 0x7a12
    e3d2:	42a3      	cmp	r3, r4
    e3d4:	d1e2      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    e3d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    e3da:	e029      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e3dc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    e3e0:	d04a      	beq.n	e478 <uarte_nrfx_configure+0x12c>
    e3e2:	d813      	bhi.n	e40c <uarte_nrfx_configure+0xc0>
    e3e4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    e3e8:	d049      	beq.n	e47e <uarte_nrfx_configure+0x132>
    e3ea:	d809      	bhi.n	e400 <uarte_nrfx_configure+0xb4>
    e3ec:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    e3f0:	42a3      	cmp	r3, r4
    e3f2:	d046      	beq.n	e482 <uarte_nrfx_configure+0x136>
    e3f4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    e3f8:	d1d0      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    e3fa:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    e3fe:	e017      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e400:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    e404:	d1ca      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    e406:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    e40a:	e011      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e40c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e410:	d03a      	beq.n	e488 <uarte_nrfx_configure+0x13c>
    e412:	d808      	bhi.n	e426 <uarte_nrfx_configure+0xda>
    e414:	4c21      	ldr	r4, [pc, #132]	; (e49c <uarte_nrfx_configure+0x150>)
    e416:	42a3      	cmp	r3, r4
    e418:	d039      	beq.n	e48e <uarte_nrfx_configure+0x142>
    e41a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    e41e:	d1bd      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    e420:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    e424:	e004      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e426:	4c1e      	ldr	r4, [pc, #120]	; (e4a0 <uarte_nrfx_configure+0x154>)
    e428:	42a3      	cmp	r3, r4
    e42a:	d1b7      	bne.n	e39c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    e42c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    e430:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    e432:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    e436:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    e438:	4335      	orrs	r5, r6
    e43a:	681b      	ldr	r3, [r3, #0]
    e43c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    e43e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    e442:	c903      	ldmia	r1, {r0, r1}
    e444:	1d23      	adds	r3, r4, #4
    e446:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    e44a:	2000      	movs	r0, #0
}
    e44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    e44e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    e452:	e7ed      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    e454:	4b13      	ldr	r3, [pc, #76]	; (e4a4 <uarte_nrfx_configure+0x158>)
    e456:	e7eb      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    e458:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    e45c:	e7e8      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    e45e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    e462:	e7e5      	b.n	e430 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    e464:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    e468:	e7e2      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    e46a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    e46e:	e7df      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    e470:	4b0d      	ldr	r3, [pc, #52]	; (e4a8 <uarte_nrfx_configure+0x15c>)
    e472:	e7dd      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    e474:	4b0d      	ldr	r3, [pc, #52]	; (e4ac <uarte_nrfx_configure+0x160>)
    e476:	e7db      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    e478:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    e47c:	e7d8      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    e47e:	4b0c      	ldr	r3, [pc, #48]	; (e4b0 <uarte_nrfx_configure+0x164>)
    e480:	e7d6      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    e482:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    e486:	e7d3      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    e488:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    e48c:	e7d0      	b.n	e430 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    e48e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    e492:	e7cd      	b.n	e430 <uarte_nrfx_configure+0xe4>
    e494:	0013b000 	.word	0x0013b000
    e498:	004ea000 	.word	0x004ea000
    e49c:	0003d090 	.word	0x0003d090
    e4a0:	000f4240 	.word	0x000f4240
    e4a4:	00275000 	.word	0x00275000
    e4a8:	0075c000 	.word	0x0075c000
    e4ac:	003af000 	.word	0x003af000
    e4b0:	013a9000 	.word	0x013a9000

0000e4b4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    e4b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e4b8:	4680      	mov	r8, r0
    e4ba:	2200      	movs	r2, #0
    e4bc:	2101      	movs	r1, #1
    e4be:	2002      	movs	r0, #2
    e4c0:	f7fd f91c 	bl	b6fc <z_arm_irq_priority_set>
    e4c4:	2002      	movs	r0, #2
    e4c6:	f7fd f8e9 	bl	b69c <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    e4ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    e4ce:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    e4d2:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    e4d4:	2100      	movs	r1, #0
    e4d6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    e4da:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    e4de:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    e4e2:	aa01      	add	r2, sp, #4
    e4e4:	4648      	mov	r0, r9
    e4e6:	f007 fc8d 	bl	15e04 <pinctrl_lookup_state>
	if (ret < 0) {
    e4ea:	1e05      	subs	r5, r0, #0
    e4ec:	db54      	blt.n	e598 <uarte_0_init+0xe4>
	return pinctrl_apply_state_direct(config, state);
    e4ee:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    e4f0:	f8d9 2000 	ldr.w	r2, [r9]
    e4f4:	7919      	ldrb	r1, [r3, #4]
    e4f6:	6818      	ldr	r0, [r3, #0]
    e4f8:	f7ff fe5a 	bl	e1b0 <pinctrl_configure_pins>
	if (err < 0) {
    e4fc:	1e05      	subs	r5, r0, #0
    e4fe:	db4b      	blt.n	e598 <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    e500:	1d31      	adds	r1, r6, #4
    e502:	4640      	mov	r0, r8
    e504:	f7ff ff22 	bl	e34c <uarte_nrfx_configure>
	if (err) {
    e508:	4605      	mov	r5, r0
    e50a:	2800      	cmp	r0, #0
    e50c:	d144      	bne.n	e598 <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    e50e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    e510:	0799      	lsls	r1, r3, #30
    e512:	d51a      	bpl.n	e54a <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    e514:	f106 0018 	add.w	r0, r6, #24
    e518:	f002 f9a6 	bl	10868 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    e51c:	4b22      	ldr	r3, [pc, #136]	; (e5a8 <uarte_0_init+0xf4>)
    e51e:	4298      	cmp	r0, r3
    e520:	d13e      	bne.n	e5a0 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    e522:	7e33      	ldrb	r3, [r6, #24]
    e524:	00db      	lsls	r3, r3, #3
    e526:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e52a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    e52e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    e532:	f504 7190 	add.w	r1, r4, #288	; 0x120
    e536:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    e53a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    e53e:	7e32      	ldrb	r2, [r6, #24]
    e540:	2301      	movs	r3, #1
    e542:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    e544:	4a19      	ldr	r2, [pc, #100]	; (e5ac <uarte_0_init+0xf8>)
    e546:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e54a:	2308      	movs	r3, #8
    e54c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    e550:	7a3b      	ldrb	r3, [r7, #8]
    e552:	b953      	cbnz	r3, e56a <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e554:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    e558:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    e55c:	6973      	ldr	r3, [r6, #20]
    e55e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    e562:	2301      	movs	r3, #1
    e564:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e568:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    e56a:	687b      	ldr	r3, [r7, #4]
    e56c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    e56e:	bf5c      	itt	pl
    e570:	f44f 7380 	movpl.w	r3, #256	; 0x100
    e574:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e578:	687b      	ldr	r3, [r7, #4]
    e57a:	06db      	lsls	r3, r3, #27
    e57c:	bf44      	itt	mi
    e57e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    e582:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e586:	6933      	ldr	r3, [r6, #16]
    e588:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e58c:	2300      	movs	r3, #0
    e58e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e592:	2301      	movs	r3, #1
    e594:	60a3      	str	r3, [r4, #8]
    e596:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    e598:	4628      	mov	r0, r5
    e59a:	b003      	add	sp, #12
    e59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    e5a0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    e5a4:	e7f8      	b.n	e598 <uarte_0_init+0xe4>
    e5a6:	bf00      	nop
    e5a8:	0bad0000 	.word	0x0bad0000
    e5ac:	4001f000 	.word	0x4001f000

0000e5b0 <uarte_nrfx_poll_out>:
{
    e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5b2:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    e5b4:	6907      	ldr	r7, [r0, #16]
{
    e5b6:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e5b8:	f008 f986 	bl	168c8 <k_is_in_isr>
    e5bc:	b9b0      	cbnz	r0, e5ec <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    e5be:	4b2e      	ldr	r3, [pc, #184]	; (e678 <uarte_nrfx_poll_out+0xc8>)
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	b19b      	cbz	r3, e5ec <uarte_nrfx_poll_out+0x3c>
{
    e5c4:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    e5c6:	6860      	ldr	r0, [r4, #4]
    e5c8:	f007 fc52 	bl	15e70 <is_tx_ready.isra.0>
    e5cc:	bb00      	cbnz	r0, e610 <uarte_nrfx_poll_out+0x60>
    e5ce:	2001      	movs	r0, #1
    e5d0:	f007 ff7e 	bl	164d0 <nrfx_busy_wait>
    e5d4:	3e01      	subs	r6, #1
    e5d6:	d1f6      	bne.n	e5c6 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    e5d8:	2100      	movs	r1, #0
    e5da:	2021      	movs	r0, #33	; 0x21
    e5dc:	f003 fd78 	bl	120d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    e5e0:	e7f0      	b.n	e5c4 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    e5e2:	f386 8811 	msr	BASEPRI, r6
    e5e6:	f3bf 8f6f 	isb	sy
}
    e5ea:	e7f5      	b.n	e5d8 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    e5ec:	f04f 0340 	mov.w	r3, #64	; 0x40
    e5f0:	f3ef 8611 	mrs	r6, BASEPRI
    e5f4:	f383 8812 	msr	BASEPRI_MAX, r3
    e5f8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    e5fc:	6860      	ldr	r0, [r4, #4]
    e5fe:	4631      	mov	r1, r6
    e600:	f007 fc36 	bl	15e70 <is_tx_ready.isra.0>
    e604:	b990      	cbnz	r0, e62c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    e606:	f386 8811 	msr	BASEPRI, r6
    e60a:	f3bf 8f6f 	isb	sy
}
    e60e:	e7ed      	b.n	e5ec <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    e610:	f04f 0340 	mov.w	r3, #64	; 0x40
    e614:	f3ef 8611 	mrs	r6, BASEPRI
    e618:	f383 8812 	msr	BASEPRI_MAX, r3
    e61c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    e620:	6860      	ldr	r0, [r4, #4]
    e622:	4631      	mov	r1, r6
    e624:	f007 fc24 	bl	15e70 <is_tx_ready.isra.0>
    e628:	2800      	cmp	r0, #0
    e62a:	d0da      	beq.n	e5e2 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    e62c:	693b      	ldr	r3, [r7, #16]
    e62e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    e630:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    e632:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    e634:	6813      	ldr	r3, [r2, #0]
    e636:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    e63a:	2001      	movs	r0, #1
    e63c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e640:	2000      	movs	r0, #0
    e642:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    e646:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    e64a:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    e64e:	6852      	ldr	r2, [r2, #4]
    e650:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    e654:	06d2      	lsls	r2, r2, #27
    e656:	d508      	bpl.n	e66a <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    e658:	6862      	ldr	r2, [r4, #4]
    e65a:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    e65c:	2008      	movs	r0, #8
    e65e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    e662:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    e666:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e66a:	2201      	movs	r2, #1
    e66c:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    e66e:	f381 8811 	msr	BASEPRI, r1
    e672:	f3bf 8f6f 	isb	sy
}
    e676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e678:	2000341b 	.word	0x2000341b

0000e67c <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
    e67c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e67e:	4605      	mov	r5, r0
	const struct spi_nrfx_config *dev_config = dev->config;
    e680:	6840      	ldr	r0, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    e682:	692a      	ldr	r2, [r5, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    e684:	6d93      	ldr	r3, [r2, #88]	; 0x58
		return ctx->rx_len;
    e686:	6e11      	ldr	r1, [r2, #96]	; 0x60
	if (!ctx->tx_len) {
    e688:	b9e3      	cbnz	r3, e6c4 <transfer_next_chunk+0x48>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    e68a:	b1a9      	cbz	r1, e6b8 <transfer_next_chunk+0x3c>
		nrfx_spi_xfer_desc_t xfer;
		nrfx_err_t result;

		dev_data->chunk_len = chunk_len;

		xfer.p_tx_buffer = ctx->tx_buf;
    e68c:	6d54      	ldr	r4, [r2, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
    e68e:	6691      	str	r1, [r2, #104]	; 0x68
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    e690:	461e      	mov	r6, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    e692:	460b      	mov	r3, r1
		xfer.p_rx_buffer = ctx->rx_buf;
    e694:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    e696:	9202      	str	r2, [sp, #8]
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    e698:	e9cd 4600 	strd	r4, r6, [sp]
	return !!(ctx->rx_buf && ctx->rx_len);
    e69c:	b1ea      	cbz	r2, e6da <transfer_next_chunk+0x5e>
    e69e:	2900      	cmp	r1, #0
    e6a0:	bf18      	it	ne
    e6a2:	4619      	movne	r1, r3
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    e6a4:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    e6a6:	2200      	movs	r2, #0
    e6a8:	4669      	mov	r1, sp
    e6aa:	f002 f9d7 	bl	10a5c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    e6ae:	4b0d      	ldr	r3, [pc, #52]	; (e6e4 <transfer_next_chunk+0x68>)
    e6b0:	4298      	cmp	r0, r3
    e6b2:	d014      	beq.n	e6de <transfer_next_chunk+0x62>
			return;
		}

		error = -EIO;
    e6b4:	f06f 0104 	mvn.w	r1, #4
	}

	finish_transaction(dev, error);
    e6b8:	6928      	ldr	r0, [r5, #16]
}
    e6ba:	b004      	add	sp, #16
    e6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	finish_transaction(dev, error);
    e6c0:	f007 bce5 	b.w	1608e <finish_transaction.isra.0>
	} else if (!ctx->rx_len) {
    e6c4:	6d54      	ldr	r4, [r2, #84]	; 0x54
    e6c6:	b111      	cbz	r1, e6ce <transfer_next_chunk+0x52>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    e6c8:	428b      	cmp	r3, r1
    e6ca:	bf28      	it	cs
    e6cc:	460b      	movcs	r3, r1
		return ctx->tx_len;
    e6ce:	2c00      	cmp	r4, #0
		dev_data->chunk_len = chunk_len;
    e6d0:	6693      	str	r3, [r2, #104]	; 0x68
    e6d2:	bf14      	ite	ne
    e6d4:	461e      	movne	r6, r3
    e6d6:	2600      	moveq	r6, #0
    e6d8:	e7dc      	b.n	e694 <transfer_next_chunk+0x18>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    e6da:	4611      	mov	r1, r2
    e6dc:	e7e2      	b.n	e6a4 <transfer_next_chunk+0x28>
}
    e6de:	b004      	add	sp, #16
    e6e0:	bd70      	pop	{r4, r5, r6, pc}
    e6e2:	bf00      	nop
    e6e4:	0bad0000 	.word	0x0bad0000

0000e6e8 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6ec:	b08b      	sub	sp, #44	; 0x2c
    e6ee:	4698      	mov	r8, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    e6f0:	6843      	ldr	r3, [r0, #4]
    e6f2:	9303      	str	r3, [sp, #12]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    e6f4:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    e6f6:	6904      	ldr	r4, [r0, #16]
    e6f8:	049b      	lsls	r3, r3, #18
{
    e6fa:	4607      	mov	r7, r0
    e6fc:	460e      	mov	r6, r1
    e6fe:	4691      	mov	r9, r2
    e700:	f100 80ec 	bmi.w	e8dc <spi_nrfx_transceive+0x1f4>
	return z_impl_k_sem_take(sem, timeout);
    e704:	f04f 32ff 	mov.w	r2, #4294967295
    e708:	f04f 33ff 	mov.w	r3, #4294967295
    e70c:	f104 0010 	add.w	r0, r4, #16
    e710:	f003 f89e 	bl	11850 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    e714:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    e716:	f8d7 a010 	ldr.w	sl, [r7, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    e71a:	687b      	ldr	r3, [r7, #4]
    e71c:	9301      	str	r3, [sp, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    e71e:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    e722:	9302      	str	r3, [sp, #8]
    e724:	b11b      	cbz	r3, e72e <spi_nrfx_transceive+0x46>
    e726:	f8da 3000 	ldr.w	r3, [sl]
    e72a:	429e      	cmp	r6, r3
    e72c:	d063      	beq.n	e7f6 <spi_nrfx_transceive+0x10e>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    e72e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    e732:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    e736:	f040 8100 	bne.w	e93a <spi_nrfx_transceive+0x252>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    e73a:	f01c 0f09 	tst.w	ip, #9
    e73e:	f040 80f9 	bne.w	e934 <spi_nrfx_transceive+0x24c>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    e742:	f3cc 1345 	ubfx	r3, ip, #5, #6
    e746:	2b08      	cmp	r3, #8
    e748:	f040 80f4 	bne.w	e934 <spi_nrfx_transceive+0x24c>
	if (spi_cfg->frequency < 125000) {
    e74c:	6835      	ldr	r5, [r6, #0]
    e74e:	4b8c      	ldr	r3, [pc, #560]	; (e980 <spi_nrfx_transceive+0x298>)
    e750:	429d      	cmp	r5, r3
    e752:	f240 80ef 	bls.w	e934 <spi_nrfx_transceive+0x24c>
	config = dev_config->def_config;
    e756:	9b01      	ldr	r3, [sp, #4]
    e758:	f103 0b08 	add.w	fp, r3, #8
    e75c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    e760:	f10d 0e14 	add.w	lr, sp, #20
    e764:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    e768:	f8db 3000 	ldr.w	r3, [fp]
    e76c:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    e770:	4b84      	ldr	r3, [pc, #528]	; (e984 <spi_nrfx_transceive+0x29c>)
    e772:	429d      	cmp	r5, r3
    e774:	f240 80bb 	bls.w	e8ee <spi_nrfx_transceive+0x206>
	} else if (frequency < 500000) {
    e778:	4b83      	ldr	r3, [pc, #524]	; (e988 <spi_nrfx_transceive+0x2a0>)
    e77a:	429d      	cmp	r5, r3
    e77c:	f240 80ba 	bls.w	e8f4 <spi_nrfx_transceive+0x20c>
	} else if (frequency < 1000000) {
    e780:	4b82      	ldr	r3, [pc, #520]	; (e98c <spi_nrfx_transceive+0x2a4>)
    e782:	429d      	cmp	r5, r3
    e784:	f240 80b9 	bls.w	e8fa <spi_nrfx_transceive+0x212>
	} else if (frequency < 2000000) {
    e788:	4b81      	ldr	r3, [pc, #516]	; (e990 <spi_nrfx_transceive+0x2a8>)
    e78a:	429d      	cmp	r5, r3
    e78c:	f240 80b8 	bls.w	e900 <spi_nrfx_transceive+0x218>
	} else if (frequency < 4000000) {
    e790:	4b80      	ldr	r3, [pc, #512]	; (e994 <spi_nrfx_transceive+0x2ac>)
    e792:	429d      	cmp	r5, r3
    e794:	f240 80b7 	bls.w	e906 <spi_nrfx_transceive+0x21e>
		return NRF_SPI_FREQ_4M;
    e798:	4b7f      	ldr	r3, [pc, #508]	; (e998 <spi_nrfx_transceive+0x2b0>)
    e79a:	429d      	cmp	r5, r3
    e79c:	bf2c      	ite	cs
    e79e:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    e7a2:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    e7a6:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    e7aa:	9507      	str	r5, [sp, #28]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    e7ac:	f00c 0304 	and.w	r3, ip, #4
    e7b0:	f000 80ac 	beq.w	e90c <spi_nrfx_transceive+0x224>
			return NRF_SPI_MODE_2;
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	bf14      	ite	ne
    e7b8:	2303      	movne	r3, #3
    e7ba:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    e7bc:	f88d 3020 	strb.w	r3, [sp, #32]
	if (dev_data->initialized) {
    e7c0:	9b02      	ldr	r3, [sp, #8]
	if (operation & SPI_TRANSFER_LSB) {
    e7c2:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    e7c6:	f88d c021 	strb.w	ip, [sp, #33]	; 0x21
	if (dev_data->initialized) {
    e7ca:	b12b      	cbz	r3, e7d8 <spi_nrfx_transceive+0xf0>
		nrfx_spi_uninit(&dev_config->spi);
    e7cc:	9801      	ldr	r0, [sp, #4]
    e7ce:	f002 f90d 	bl	109ec <nrfx_spi_uninit>
		dev_data->initialized = false;
    e7d2:	2300      	movs	r3, #0
    e7d4:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
    e7d8:	4653      	mov	r3, sl
    e7da:	4a70      	ldr	r2, [pc, #448]	; (e99c <spi_nrfx_transceive+0x2b4>)
    e7dc:	9801      	ldr	r0, [sp, #4]
    e7de:	a905      	add	r1, sp, #20
    e7e0:	f002 f856 	bl	10890 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    e7e4:	4b6e      	ldr	r3, [pc, #440]	; (e9a0 <spi_nrfx_transceive+0x2b8>)
    e7e6:	4298      	cmp	r0, r3
    e7e8:	f040 8094 	bne.w	e914 <spi_nrfx_transceive+0x22c>
	dev_data->initialized = true;
    e7ec:	2301      	movs	r3, #1
    e7ee:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    e7f2:	f8ca 6000 	str.w	r6, [sl]
		dev_data->busy = true;
    e7f6:	2301      	movs	r3, #1
    e7f8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    e7fc:	f1b9 0f00 	cmp.w	r9, #0
    e800:	f040 809e 	bne.w	e940 <spi_nrfx_transceive+0x258>
    e804:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    e808:	2300      	movs	r3, #0
    e80a:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    e80c:	f104 0258 	add.w	r2, r4, #88	; 0x58
    e810:	f104 0148 	add.w	r1, r4, #72	; 0x48
    e814:	f104 0044 	add.w	r0, r4, #68	; 0x44
    e818:	f007 fb78 	bl	15f0c <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    e81c:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    e81e:	f1b8 0f00 	cmp.w	r8, #0
    e822:	f040 8096 	bne.w	e952 <spi_nrfx_transceive+0x26a>
    e826:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    e82a:	2300      	movs	r3, #0
    e82c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    e82e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    e832:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e836:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    e83a:	f007 fb67 	bl	15f0c <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    e83e:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    e840:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    e842:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    e844:	2101      	movs	r1, #1
    e846:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    e848:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    e84a:	f007 fb86 	bl	15f5a <_spi_context_cs_control>
		transfer_next_chunk(dev);
    e84e:	4638      	mov	r0, r7
    e850:	f7ff ff14 	bl	e67c <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    e854:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	size_t total_len = 0;
    e856:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    e858:	462b      	mov	r3, r5
    e85a:	4283      	cmp	r3, r0
    e85c:	f040 8082 	bne.w	e964 <spi_nrfx_transceive+0x27c>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    e860:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    e862:	6d25      	ldr	r5, [r4, #80]	; 0x50
    e864:	4619      	mov	r1, r3
    e866:	42a9      	cmp	r1, r5
    e868:	f040 8083 	bne.w	e972 <spi_nrfx_transceive+0x28a>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    e86c:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    e86e:	4626      	mov	r6, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    e870:	bf38      	it	cc
    e872:	4613      	movcc	r3, r2
    e874:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    e878:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    e87c:	f856 3b28 	ldr.w	r3, [r6], #40
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    e880:	f04f 0800 	mov.w	r8, #0
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    e884:	681b      	ldr	r3, [r3, #0]
    e886:	fbb5 f5f3 	udiv	r5, r5, r3
    e88a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    e88e:	35c8      	adds	r5, #200	; 0xc8
    e890:	4641      	mov	r1, r8
    e892:	f240 30e7 	movw	r0, #999	; 0x3e7
    e896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e89a:	2300      	movs	r3, #0
    e89c:	fbe5 010c 	umlal	r0, r1, r5, ip
    e8a0:	f7f1 fc2e 	bl	100 <__aeabi_uldivmod>
    e8a4:	4602      	mov	r2, r0
    e8a6:	460b      	mov	r3, r1
    e8a8:	4630      	mov	r0, r6
    e8aa:	f002 ffd1 	bl	11850 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    e8ae:	b918      	cbnz	r0, e8b8 <spi_nrfx_transceive+0x1d0>
		status = ctx->sync_status;
    e8b0:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    e8b2:	f115 0f74 	cmn.w	r5, #116	; 0x74
    e8b6:	d12f      	bne.n	e918 <spi_nrfx_transceive+0x230>
			nrfx_spi_uninit(&dev_config->spi);
    e8b8:	9803      	ldr	r0, [sp, #12]
			dev_data->chunk_len = 0;
    e8ba:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			nrfx_spi_uninit(&dev_config->spi);
    e8be:	f002 f895 	bl	109ec <nrfx_spi_uninit>
			dev_data->initialized = false;
    e8c2:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
    e8c6:	6938      	ldr	r0, [r7, #16]
    e8c8:	f06f 0173 	mvn.w	r1, #115	; 0x73
    e8cc:	f007 fbdf 	bl	1608e <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    e8d0:	4630      	mov	r0, r6
    e8d2:	f002 ffe5 	bl	118a0 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    e8d6:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    e8da:	e01d      	b.n	e918 <spi_nrfx_transceive+0x230>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    e8dc:	69a3      	ldr	r3, [r4, #24]
    e8de:	2b00      	cmp	r3, #0
    e8e0:	f47f af10 	bne.w	e704 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    e8e4:	6863      	ldr	r3, [r4, #4]
    e8e6:	4299      	cmp	r1, r3
    e8e8:	f47f af0c 	bne.w	e704 <spi_nrfx_transceive+0x1c>
    e8ec:	e713      	b.n	e716 <spi_nrfx_transceive+0x2e>
		return NRF_SPI_FREQ_125K;
    e8ee:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    e8f2:	e758      	b.n	e7a6 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_250K;
    e8f4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    e8f8:	e755      	b.n	e7a6 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_500K;
    e8fa:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    e8fe:	e752      	b.n	e7a6 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_1M;
    e900:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e904:	e74f      	b.n	e7a6 <spi_nrfx_transceive+0xbe>
		return NRF_SPI_FREQ_2M;
    e906:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    e90a:	e74c      	b.n	e7a6 <spi_nrfx_transceive+0xbe>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    e90c:	3b00      	subs	r3, #0
    e90e:	bf18      	it	ne
    e910:	2301      	movne	r3, #1
    e912:	e753      	b.n	e7bc <spi_nrfx_transceive+0xd4>
		return -EIO;
    e914:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    e918:	6823      	ldr	r3, [r4, #0]
    e91a:	889b      	ldrh	r3, [r3, #4]
    e91c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    e920:	d104      	bne.n	e92c <spi_nrfx_transceive+0x244>
		ctx->owner = NULL;
    e922:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    e924:	f104 0010 	add.w	r0, r4, #16
    e928:	f002 ff6c 	bl	11804 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    e92c:	4628      	mov	r0, r5
    e92e:	b00b      	add	sp, #44	; 0x2c
    e930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    e934:	f06f 0515 	mvn.w	r5, #21
    e938:	e7ee      	b.n	e918 <spi_nrfx_transceive+0x230>
		return -ENOTSUP;
    e93a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    e93e:	e7eb      	b.n	e918 <spi_nrfx_transceive+0x230>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    e940:	f8d9 3000 	ldr.w	r3, [r9]
    e944:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    e946:	2b00      	cmp	r3, #0
    e948:	f43f af5e 	beq.w	e808 <spi_nrfx_transceive+0x120>
    e94c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e950:	e75b      	b.n	e80a <spi_nrfx_transceive+0x122>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    e952:	f8d8 3000 	ldr.w	r3, [r8]
    e956:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    e958:	2b00      	cmp	r3, #0
    e95a:	f43f af66 	beq.w	e82a <spi_nrfx_transceive+0x142>
    e95e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e962:	e763      	b.n	e82c <spi_nrfx_transceive+0x144>
		total_len += ctx->current_tx[n].len;
    e964:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e966:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    e96a:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    e96c:	6849      	ldr	r1, [r1, #4]
    e96e:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    e970:	e773      	b.n	e85a <spi_nrfx_transceive+0x172>
		total_len += ctx->current_rx[n].len;
    e972:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e974:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    e978:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    e97a:	6840      	ldr	r0, [r0, #4]
    e97c:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    e97e:	e772      	b.n	e866 <spi_nrfx_transceive+0x17e>
    e980:	0001e847 	.word	0x0001e847
    e984:	0003d08f 	.word	0x0003d08f
    e988:	0007a11f 	.word	0x0007a11f
    e98c:	000f423f 	.word	0x000f423f
    e990:	001e847f 	.word	0x001e847f
    e994:	003d08ff 	.word	0x003d08ff
    e998:	007a1200 	.word	0x007a1200
    e99c:	000160af 	.word	0x000160af
    e9a0:	0bad0000 	.word	0x0bad0000

0000e9a4 <transfer_next_chunk>:
	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
}

static void transfer_next_chunk(const struct device *dev)
{
    e9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    e9a6:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    e9a8:	6847      	ldr	r7, [r0, #4]
	if (!ctx->tx_len) {
    e9aa:	6da5      	ldr	r5, [r4, #88]	; 0x58
		return ctx->rx_len;
    e9ac:	6e23      	ldr	r3, [r4, #96]	; 0x60
{
    e9ae:	b085      	sub	sp, #20
    e9b0:	4606      	mov	r6, r0
	if (!ctx->tx_len) {
    e9b2:	b93d      	cbnz	r5, e9c4 <transfer_next_chunk+0x20>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    e9b4:	bb6b      	cbnz	r3, ea12 <transfer_next_chunk+0x6e>
	int error = 0;
    e9b6:	4619      	mov	r1, r3
			anomaly_58_workaround_clear(dev_data);
#endif
		}
	}

	finish_transaction(dev, error);
    e9b8:	6930      	ldr	r0, [r6, #16]
}
    e9ba:	b005      	add	sp, #20
    e9bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
    e9c0:	f007 bc87 	b.w	162d2 <finish_transaction.isra.0>
		const uint8_t *tx_buf = ctx->tx_buf;
    e9c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
	} else if (!ctx->rx_len) {
    e9c6:	bb03      	cbnz	r3, ea0a <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
    e9c8:	bb31      	cbnz	r1, ea18 <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
    e9ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    e9cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
		xfer.p_tx_buffer = tx_buf;
    e9ce:	9100      	str	r1, [sp, #0]
    e9d0:	42aa      	cmp	r2, r5
    e9d2:	bf28      	it	cs
    e9d4:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    e9d6:	66a2      	str	r2, [r4, #104]	; 0x68
    e9d8:	b11b      	cbz	r3, e9e2 <transfer_next_chunk+0x3e>
    e9da:	6da3      	ldr	r3, [r4, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    e9dc:	2b00      	cmp	r3, #0
    e9de:	bf18      	it	ne
    e9e0:	4613      	movne	r3, r2
    e9e2:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    e9e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    e9e6:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    e9e8:	b11b      	cbz	r3, e9f2 <transfer_next_chunk+0x4e>
    e9ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    e9ec:	2b00      	cmp	r3, #0
    e9ee:	bf18      	it	ne
    e9f0:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    e9f2:	2200      	movs	r2, #0
    e9f4:	4669      	mov	r1, sp
    e9f6:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    e9f8:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    e9fa:	f002 fa39 	bl	10e70 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    e9fe:	4b0e      	ldr	r3, [pc, #56]	; (ea38 <transfer_next_chunk+0x94>)
    ea00:	4298      	cmp	r0, r3
    ea02:	d017      	beq.n	ea34 <transfer_next_chunk+0x90>
			error = -EIO;
    ea04:	f06f 0104 	mvn.w	r1, #4
    ea08:	e7d6      	b.n	e9b8 <transfer_next_chunk+0x14>
	return MIN(ctx->tx_len, ctx->rx_len);
    ea0a:	429d      	cmp	r5, r3
    ea0c:	bf28      	it	cs
    ea0e:	461d      	movcs	r5, r3
    ea10:	e7da      	b.n	e9c8 <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
    ea12:	6d61      	ldr	r1, [r4, #84]	; 0x54
    ea14:	461d      	mov	r5, r3
    ea16:	e7d8      	b.n	e9ca <transfer_next_chunk+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    ea18:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    ea1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    ea20:	d0d3      	beq.n	e9ca <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    ea22:	2d08      	cmp	r5, #8
    ea24:	bf28      	it	cs
    ea26:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    ea28:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ea2a:	462a      	mov	r2, r5
    ea2c:	f006 fe16 	bl	1565c <memcpy>
			tx_buf = dev_data->buffer;
    ea30:	6f21      	ldr	r1, [r4, #112]	; 0x70
    ea32:	e7ca      	b.n	e9ca <transfer_next_chunk+0x26>
}
    ea34:	b005      	add	sp, #20
    ea36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea38:	0bad0000 	.word	0x0bad0000

0000ea3c <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea40:	b08b      	sub	sp, #44	; 0x2c
    ea42:	4698      	mov	r8, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    ea44:	6843      	ldr	r3, [r0, #4]
    ea46:	9302      	str	r3, [sp, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    ea48:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    ea4a:	6904      	ldr	r4, [r0, #16]
{
    ea4c:	4606      	mov	r6, r0
    ea4e:	0498      	lsls	r0, r3, #18
    ea50:	460d      	mov	r5, r1
    ea52:	4691      	mov	r9, r2
    ea54:	f100 80fa 	bmi.w	ec4c <spi_nrfx_transceive+0x210>
	return z_impl_k_sem_take(sem, timeout);
    ea58:	f04f 32ff 	mov.w	r2, #4294967295
    ea5c:	f04f 33ff 	mov.w	r3, #4294967295
    ea60:	f104 0010 	add.w	r0, r4, #16
    ea64:	f002 fef4 	bl	11850 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    ea68:	6065      	str	r5, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    ea6a:	f8d6 b004 	ldr.w	fp, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    ea6e:	f8d6 a010 	ldr.w	sl, [r6, #16]
	uint32_t max_freq = dev_config->max_freq;
    ea72:	f8db 3008 	ldr.w	r3, [fp, #8]
    ea76:	9303      	str	r3, [sp, #12]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    ea78:	f89a 306d 	ldrb.w	r3, [sl, #109]	; 0x6d
    ea7c:	9300      	str	r3, [sp, #0]
    ea7e:	b11b      	cbz	r3, ea88 <spi_nrfx_transceive+0x4c>
    ea80:	f8da 3000 	ldr.w	r3, [sl]
    ea84:	429d      	cmp	r5, r3
    ea86:	d06e      	beq.n	eb66 <spi_nrfx_transceive+0x12a>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    ea88:	88af      	ldrh	r7, [r5, #4]
    ea8a:	0539      	lsls	r1, r7, #20
    ea8c:	f100 8113 	bmi.w	ecb6 <spi_nrfx_transceive+0x27a>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    ea90:	f017 0f09 	tst.w	r7, #9
    ea94:	f040 810c 	bne.w	ecb0 <spi_nrfx_transceive+0x274>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    ea98:	f3c7 1345 	ubfx	r3, r7, #5, #6
    ea9c:	2b08      	cmp	r3, #8
    ea9e:	f040 8107 	bne.w	ecb0 <spi_nrfx_transceive+0x274>
	if (spi_cfg->frequency < 125000) {
    eaa2:	682b      	ldr	r3, [r5, #0]
    eaa4:	9301      	str	r3, [sp, #4]
    eaa6:	9a01      	ldr	r2, [sp, #4]
    eaa8:	4b94      	ldr	r3, [pc, #592]	; (ecfc <spi_nrfx_transceive+0x2c0>)
    eaaa:	429a      	cmp	r2, r3
    eaac:	f240 8100 	bls.w	ecb0 <spi_nrfx_transceive+0x274>
	config = dev_config->def_config;
    eab0:	f10b 0e0c 	add.w	lr, fp, #12
    eab4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    eab8:	f10d 0c10 	add.w	ip, sp, #16
    eabc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    eac0:	9b03      	ldr	r3, [sp, #12]
    eac2:	9a01      	ldr	r2, [sp, #4]
    eac4:	4293      	cmp	r3, r2
    eac6:	bf28      	it	cs
    eac8:	4613      	movcs	r3, r2
	config = dev_config->def_config;
    eaca:	e89e 0003 	ldmia.w	lr, {r0, r1}
	if (frequency < 250000) {
    eace:	4a8c      	ldr	r2, [pc, #560]	; (ed00 <spi_nrfx_transceive+0x2c4>)
    ead0:	4293      	cmp	r3, r2
	config = dev_config->def_config;
    ead2:	e88c 0003 	stmia.w	ip, {r0, r1}
	if (frequency < 250000) {
    ead6:	f240 80c2 	bls.w	ec5e <spi_nrfx_transceive+0x222>
	} else if (frequency < 500000) {
    eada:	4a8a      	ldr	r2, [pc, #552]	; (ed04 <spi_nrfx_transceive+0x2c8>)
    eadc:	4293      	cmp	r3, r2
    eade:	f240 80c1 	bls.w	ec64 <spi_nrfx_transceive+0x228>
	} else if (frequency < 1000000) {
    eae2:	4a89      	ldr	r2, [pc, #548]	; (ed08 <spi_nrfx_transceive+0x2cc>)
    eae4:	4293      	cmp	r3, r2
    eae6:	f240 80c0 	bls.w	ec6a <spi_nrfx_transceive+0x22e>
	} else if (frequency < 2000000) {
    eaea:	4a88      	ldr	r2, [pc, #544]	; (ed0c <spi_nrfx_transceive+0x2d0>)
    eaec:	4293      	cmp	r3, r2
    eaee:	f240 80bf 	bls.w	ec70 <spi_nrfx_transceive+0x234>
	} else if (frequency < 4000000) {
    eaf2:	4a87      	ldr	r2, [pc, #540]	; (ed10 <spi_nrfx_transceive+0x2d4>)
    eaf4:	4293      	cmp	r3, r2
    eaf6:	f240 80be 	bls.w	ec76 <spi_nrfx_transceive+0x23a>
	} else if (frequency < 8000000) {
    eafa:	4a86      	ldr	r2, [pc, #536]	; (ed14 <spi_nrfx_transceive+0x2d8>)
    eafc:	4293      	cmp	r3, r2
    eafe:	f0c0 80bd 	bcc.w	ec7c <spi_nrfx_transceive+0x240>
	} else if (frequency < 16000000) {
    eb02:	4a85      	ldr	r2, [pc, #532]	; (ed18 <spi_nrfx_transceive+0x2dc>)
    eb04:	4293      	cmp	r3, r2
    eb06:	f0c0 80bc 	bcc.w	ec82 <spi_nrfx_transceive+0x246>
		return NRF_SPIM_FREQ_16M;
    eb0a:	4a84      	ldr	r2, [pc, #528]	; (ed1c <spi_nrfx_transceive+0x2e0>)
    eb0c:	4293      	cmp	r3, r2
    eb0e:	bf2c      	ite	cs
    eb10:	f04f 53a0 	movcs.w	r3, #335544320	; 0x14000000
    eb14:	f04f 6320 	movcc.w	r3, #167772160	; 0xa000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    eb18:	07ba      	lsls	r2, r7, #30
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    eb1a:	9306      	str	r3, [sp, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    eb1c:	f007 0304 	and.w	r3, r7, #4
    eb20:	f140 80b2 	bpl.w	ec88 <spi_nrfx_transceive+0x24c>
			return NRF_SPIM_MODE_2;
    eb24:	2b00      	cmp	r3, #0
    eb26:	bf14      	ite	ne
    eb28:	2303      	movne	r3, #3
    eb2a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    eb2c:	f88d 301c 	strb.w	r3, [sp, #28]
	if (dev_data->initialized) {
    eb30:	9b00      	ldr	r3, [sp, #0]
	if (operation & SPI_TRANSFER_LSB) {
    eb32:	f3c7 1700 	ubfx	r7, r7, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    eb36:	f88d 701d 	strb.w	r7, [sp, #29]
	if (dev_data->initialized) {
    eb3a:	b12b      	cbz	r3, eb48 <spi_nrfx_transceive+0x10c>
		nrfx_spim_uninit(&dev_config->spim);
    eb3c:	4658      	mov	r0, fp
    eb3e:	f002 f939 	bl	10db4 <nrfx_spim_uninit>
		dev_data->initialized = false;
    eb42:	2300      	movs	r3, #0
    eb44:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	result = nrfx_spim_init(&dev_config->spim, &config,
    eb48:	4653      	mov	r3, sl
    eb4a:	4a75      	ldr	r2, [pc, #468]	; (ed20 <spi_nrfx_transceive+0x2e4>)
    eb4c:	a904      	add	r1, sp, #16
    eb4e:	4658      	mov	r0, fp
    eb50:	f002 f830 	bl	10bb4 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    eb54:	4b73      	ldr	r3, [pc, #460]	; (ed24 <spi_nrfx_transceive+0x2e8>)
    eb56:	4298      	cmp	r0, r3
    eb58:	f040 809a 	bne.w	ec90 <spi_nrfx_transceive+0x254>
	dev_data->initialized = true;
    eb5c:	2301      	movs	r3, #1
    eb5e:	f88a 306d 	strb.w	r3, [sl, #109]	; 0x6d
	ctx->config = spi_cfg;
    eb62:	f8ca 5000 	str.w	r5, [sl]
		dev_data->busy = true;
    eb66:	2301      	movs	r3, #1
    eb68:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    eb6c:	f1b9 0f00 	cmp.w	r9, #0
    eb70:	f040 80a4 	bne.w	ecbc <spi_nrfx_transceive+0x280>
    eb74:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    eb78:	2300      	movs	r3, #0
    eb7a:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    eb7c:	f104 0258 	add.w	r2, r4, #88	; 0x58
    eb80:	f104 0148 	add.w	r1, r4, #72	; 0x48
    eb84:	f104 0044 	add.w	r0, r4, #68	; 0x44
    eb88:	f007 fae2 	bl	16150 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    eb8c:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    eb8e:	f1b8 0f00 	cmp.w	r8, #0
    eb92:	f040 809c 	bne.w	ecce <spi_nrfx_transceive+0x292>
    eb96:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    eb9a:	2300      	movs	r3, #0
    eb9c:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    eb9e:	f104 0260 	add.w	r2, r4, #96	; 0x60
    eba2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    eba6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    ebaa:	f007 fad1 	bl	16150 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    ebae:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    ebb0:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    ebb2:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
    ebb4:	2101      	movs	r1, #1
    ebb6:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    ebb8:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    ebba:	f007 faf0 	bl	1619e <_spi_context_cs_control>
		transfer_next_chunk(dev);
    ebbe:	4630      	mov	r0, r6
    ebc0:	f7ff fef0 	bl	e9a4 <transfer_next_chunk>
	for (n = 0; n < ctx->tx_count; ++n) {
    ebc4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	size_t total_len = 0;
    ebc6:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    ebc8:	462b      	mov	r3, r5
    ebca:	4283      	cmp	r3, r0
    ebcc:	f040 8088 	bne.w	ece0 <spi_nrfx_transceive+0x2a4>
	size_t total_len = 0;
    ebd0:	2300      	movs	r3, #0
	for (n = 0; n < ctx->rx_count; ++n) {
    ebd2:	6d25      	ldr	r5, [r4, #80]	; 0x50
    ebd4:	4619      	mov	r1, r3
    ebd6:	42a9      	cmp	r1, r5
    ebd8:	f040 8089 	bne.w	ecee <spi_nrfx_transceive+0x2b2>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    ebdc:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    ebde:	4627      	mov	r7, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    ebe0:	bf38      	it	cc
    ebe2:	4613      	movcc	r3, r2
    ebe4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    ebe8:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    ebec:	f857 3b28 	ldr.w	r3, [r7], #40
    ebf0:	f04f 0800 	mov.w	r8, #0
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    ebf4:	681b      	ldr	r3, [r3, #0]
    ebf6:	fbb5 f5f3 	udiv	r5, r5, r3
    ebfa:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    ebfe:	35c8      	adds	r5, #200	; 0xc8
    ec00:	4641      	mov	r1, r8
    ec02:	f240 30e7 	movw	r0, #999	; 0x3e7
    ec06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ec0a:	2300      	movs	r3, #0
    ec0c:	fbe5 010c 	umlal	r0, r1, r5, ip
    ec10:	f7f1 fa76 	bl	100 <__aeabi_uldivmod>
    ec14:	4602      	mov	r2, r0
    ec16:	460b      	mov	r3, r1
    ec18:	4638      	mov	r0, r7
    ec1a:	f002 fe19 	bl	11850 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    ec1e:	b918      	cbnz	r0, ec28 <spi_nrfx_transceive+0x1ec>
		status = ctx->sync_status;
    ec20:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    ec22:	f115 0f74 	cmn.w	r5, #116	; 0x74
    ec26:	d135      	bne.n	ec94 <spi_nrfx_transceive+0x258>
			nrfx_spim_uninit(&dev_config->spim);
    ec28:	9802      	ldr	r0, [sp, #8]
			dev_data->chunk_len = 0;
    ec2a:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			nrfx_spim_uninit(&dev_config->spim);
    ec2e:	f002 f8c1 	bl	10db4 <nrfx_spim_uninit>
			dev_data->initialized = false;
    ec32:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
			finish_transaction(dev, -ETIMEDOUT);
    ec36:	6930      	ldr	r0, [r6, #16]
    ec38:	f06f 0173 	mvn.w	r1, #115	; 0x73
    ec3c:	f007 fb49 	bl	162d2 <finish_transaction.isra.0>
	z_impl_k_sem_reset(sem);
    ec40:	4638      	mov	r0, r7
    ec42:	f002 fe2d 	bl	118a0 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    ec46:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    ec4a:	e023      	b.n	ec94 <spi_nrfx_transceive+0x258>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    ec4c:	69a3      	ldr	r3, [r4, #24]
    ec4e:	2b00      	cmp	r3, #0
    ec50:	f47f af02 	bne.w	ea58 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    ec54:	6863      	ldr	r3, [r4, #4]
    ec56:	4299      	cmp	r1, r3
    ec58:	f47f aefe 	bne.w	ea58 <spi_nrfx_transceive+0x1c>
    ec5c:	e705      	b.n	ea6a <spi_nrfx_transceive+0x2e>
		return NRF_SPIM_FREQ_125K;
    ec5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    ec62:	e759      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_250K;
    ec64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    ec68:	e756      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_500K;
    ec6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ec6e:	e753      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_1M;
    ec70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ec74:	e750      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_2M;
    ec76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    ec7a:	e74d      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_4M;
    ec7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ec80:	e74a      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		return NRF_SPIM_FREQ_8M;
    ec82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    ec86:	e747      	b.n	eb18 <spi_nrfx_transceive+0xdc>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    ec88:	3b00      	subs	r3, #0
    ec8a:	bf18      	it	ne
    ec8c:	2301      	movne	r3, #1
    ec8e:	e74d      	b.n	eb2c <spi_nrfx_transceive+0xf0>
		return -EIO;
    ec90:	f06f 0504 	mvn.w	r5, #4
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    ec94:	6823      	ldr	r3, [r4, #0]
    ec96:	889b      	ldrh	r3, [r3, #4]
    ec98:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    ec9c:	d104      	bne.n	eca8 <spi_nrfx_transceive+0x26c>
		ctx->owner = NULL;
    ec9e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    eca0:	f104 0010 	add.w	r0, r4, #16
    eca4:	f002 fdae 	bl	11804 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
}
    eca8:	4628      	mov	r0, r5
    ecaa:	b00b      	add	sp, #44	; 0x2c
    ecac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
    ecb0:	f06f 0515 	mvn.w	r5, #21
    ecb4:	e7ee      	b.n	ec94 <spi_nrfx_transceive+0x258>
		return -ENOTSUP;
    ecb6:	f06f 0585 	mvn.w	r5, #133	; 0x85
    ecba:	e7eb      	b.n	ec94 <spi_nrfx_transceive+0x258>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    ecbc:	f8d9 3000 	ldr.w	r3, [r9]
    ecc0:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    ecc2:	2b00      	cmp	r3, #0
    ecc4:	f43f af58 	beq.w	eb78 <spi_nrfx_transceive+0x13c>
    ecc8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    eccc:	e755      	b.n	eb7a <spi_nrfx_transceive+0x13e>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    ecce:	f8d8 3000 	ldr.w	r3, [r8]
    ecd2:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	f43f af60 	beq.w	eb9a <spi_nrfx_transceive+0x15e>
    ecda:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ecde:	e75d      	b.n	eb9c <spi_nrfx_transceive+0x160>
		total_len += ctx->current_tx[n].len;
    ece0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ece2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    ece6:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    ece8:	6849      	ldr	r1, [r1, #4]
    ecea:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    ecec:	e76d      	b.n	ebca <spi_nrfx_transceive+0x18e>
		total_len += ctx->current_rx[n].len;
    ecee:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    ecf0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    ecf4:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    ecf6:	6840      	ldr	r0, [r0, #4]
    ecf8:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    ecfa:	e76c      	b.n	ebd6 <spi_nrfx_transceive+0x19a>
    ecfc:	0001e847 	.word	0x0001e847
    ed00:	0003d08f 	.word	0x0003d08f
    ed04:	0007a11f 	.word	0x0007a11f
    ed08:	000f423f 	.word	0x000f423f
    ed0c:	001e847f 	.word	0x001e847f
    ed10:	003d08ff 	.word	0x003d08ff
    ed14:	007a1200 	.word	0x007a1200
    ed18:	00f42400 	.word	0x00f42400
    ed1c:	01e84800 	.word	0x01e84800
    ed20:	000162f3 	.word	0x000162f3
    ed24:	0bad0000 	.word	0x0bad0000

0000ed28 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    ed28:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    ed2a:	2301      	movs	r3, #1
    ed2c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ed2e:	4a0e      	ldr	r2, [pc, #56]	; (ed68 <compare_int_lock+0x40>)
    ed30:	f3bf 8f5b 	dmb	ish
    ed34:	43dc      	mvns	r4, r3
    ed36:	e852 1f00 	ldrex	r1, [r2]
    ed3a:	ea01 0504 	and.w	r5, r1, r4
    ed3e:	e842 5600 	strex	r6, r5, [r2]
    ed42:	2e00      	cmp	r6, #0
    ed44:	d1f7      	bne.n	ed36 <compare_int_lock+0xe>
    ed46:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ed4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ed4e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    ed50:	4806      	ldr	r0, [pc, #24]	; (ed6c <compare_int_lock+0x44>)
    ed52:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    ed56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ed5a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    ed5e:	420b      	tst	r3, r1
}
    ed60:	bf14      	ite	ne
    ed62:	2001      	movne	r0, #1
    ed64:	2000      	moveq	r0, #0
    ed66:	bd70      	pop	{r4, r5, r6, pc}
    ed68:	200021a4 	.word	0x200021a4
    ed6c:	40011000 	.word	0x40011000

0000ed70 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    ed70:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    ed72:	490e      	ldr	r1, [pc, #56]	; (edac <sys_clock_timeout_handler+0x3c>)
    ed74:	e9d1 3400 	ldrd	r3, r4, [r1]
    ed78:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    ed7a:	18c3      	adds	r3, r0, r3
    ed7c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    ed80:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    ed84:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    ed88:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    ed8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    ed90:	d209      	bcs.n	eda6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    ed92:	4b07      	ldr	r3, [pc, #28]	; (edb0 <sys_clock_timeout_handler+0x40>)
    ed94:	681b      	ldr	r3, [r3, #0]
    ed96:	0a1a      	lsrs	r2, r3, #8
    ed98:	061b      	lsls	r3, r3, #24
    ed9a:	199c      	adds	r4, r3, r6
    ed9c:	4b05      	ldr	r3, [pc, #20]	; (edb4 <sys_clock_timeout_handler+0x44>)
    ed9e:	f142 0500 	adc.w	r5, r2, #0
    eda2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    eda6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    eda8:	f003 bb14 	b.w	123d4 <sys_clock_announce>
    edac:	20001740 	.word	0x20001740
    edb0:	200021a8 	.word	0x200021a8
    edb4:	20001748 	.word	0x20001748

0000edb8 <compare_int_unlock>:
	if (key) {
    edb8:	b311      	cbz	r1, ee00 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    edba:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    edbe:	2301      	movs	r3, #1
    edc0:	4a10      	ldr	r2, [pc, #64]	; (ee04 <compare_int_unlock+0x4c>)
    edc2:	4083      	lsls	r3, r0
    edc4:	e852 cf00 	ldrex	ip, [r2]
    edc8:	ea4c 0c03 	orr.w	ip, ip, r3
    edcc:	e842 c100 	strex	r1, ip, [r2]
    edd0:	2900      	cmp	r1, #0
    edd2:	d1f7      	bne.n	edc4 <compare_int_unlock+0xc>
    edd4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    edd8:	4a0b      	ldr	r2, [pc, #44]	; (ee08 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    edda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    edde:	4083      	lsls	r3, r0
    ede0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ede4:	4b09      	ldr	r3, [pc, #36]	; (ee0c <compare_int_unlock+0x54>)
    ede6:	f3bf 8f5b 	dmb	ish
    edea:	681b      	ldr	r3, [r3, #0]
    edec:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    edf0:	40c3      	lsrs	r3, r0
    edf2:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    edf4:	bf42      	ittt	mi
    edf6:	4b06      	ldrmi	r3, [pc, #24]	; (ee10 <compare_int_unlock+0x58>)
    edf8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    edfc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    ee00:	4770      	bx	lr
    ee02:	bf00      	nop
    ee04:	200021a4 	.word	0x200021a4
    ee08:	40011000 	.word	0x40011000
    ee0c:	200021a0 	.word	0x200021a0
    ee10:	e000e100 	.word	0xe000e100

0000ee14 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    ee14:	4b0d      	ldr	r3, [pc, #52]	; (ee4c <z_nrf_rtc_timer_read+0x38>)
    ee16:	6818      	ldr	r0, [r3, #0]
    ee18:	0a01      	lsrs	r1, r0, #8
    ee1a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    ee1c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    ee20:	4b0b      	ldr	r3, [pc, #44]	; (ee50 <z_nrf_rtc_timer_read+0x3c>)
    ee22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    ee26:	1818      	adds	r0, r3, r0
    ee28:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    ee2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ee30:	d20a      	bcs.n	ee48 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    ee32:	4b08      	ldr	r3, [pc, #32]	; (ee54 <z_nrf_rtc_timer_read+0x40>)
    ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee38:	4290      	cmp	r0, r2
    ee3a:	eb71 0303 	sbcs.w	r3, r1, r3
    ee3e:	d203      	bcs.n	ee48 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    ee40:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    ee44:	f141 0100 	adc.w	r1, r1, #0
}
    ee48:	4770      	bx	lr
    ee4a:	bf00      	nop
    ee4c:	200021a8 	.word	0x200021a8
    ee50:	40011000 	.word	0x40011000
    ee54:	20001748 	.word	0x20001748

0000ee58 <compare_set>:
{
    ee58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee5c:	4616      	mov	r6, r2
    ee5e:	461f      	mov	r7, r3
    ee60:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    ee62:	f7ff ff61 	bl	ed28 <compare_int_lock>
    ee66:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    ee68:	f7ff ffd4 	bl	ee14 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    ee6c:	42b0      	cmp	r0, r6
    ee6e:	eb71 0307 	sbcs.w	r3, r1, r7
    ee72:	d251      	bcs.n	ef18 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    ee74:	4b3a      	ldr	r3, [pc, #232]	; (ef60 <compare_set+0x108>)
    ee76:	1a30      	subs	r0, r6, r0
    ee78:	eb67 0101 	sbc.w	r1, r7, r1
    ee7c:	4298      	cmp	r0, r3
    ee7e:	f171 0100 	sbcs.w	r1, r1, #0
    ee82:	d26a      	bcs.n	ef5a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    ee84:	4b37      	ldr	r3, [pc, #220]	; (ef64 <compare_set+0x10c>)
    ee86:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    ee8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    ee8e:	429f      	cmp	r7, r3
    ee90:	bf08      	it	eq
    ee92:	4296      	cmpeq	r6, r2
    ee94:	d04e      	beq.n	ef34 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    ee96:	4934      	ldr	r1, [pc, #208]	; (ef68 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ee98:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ee9c:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    eea0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    eea4:	00ad      	lsls	r5, r5, #2
    eea6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    eeaa:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eeac:	b2ad      	uxth	r5, r5
    eeae:	f007 fa6d 	bl	1638c <event_clear>
	return absolute_time & COUNTER_MAX;
    eeb2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    eeb6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    eeba:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    eebe:	4a2b      	ldr	r2, [pc, #172]	; (ef6c <compare_set+0x114>)
    eec0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eec2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    eec6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    eec8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    eecc:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    eece:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    eed2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    eed6:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    eeda:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    eede:	f06f 0002 	mvn.w	r0, #2
    eee2:	eba0 0008 	sub.w	r0, r0, r8
    eee6:	4460      	add	r0, ip
    eee8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    eeec:	4290      	cmp	r0, r2
    eeee:	d921      	bls.n	ef34 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eef0:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    eef2:	b160      	cbz	r0, ef0e <compare_set+0xb6>
     return p_reg->COUNTER;
    eef4:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    eef8:	eba8 000b 	sub.w	r0, r8, fp
    eefc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    ef00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ef04:	d916      	bls.n	ef34 <compare_set+0xdc>
					event_clear(chan);
    ef06:	4620      	mov	r0, r4
    ef08:	f007 fa40 	bl	1638c <event_clear>
    ef0c:	4a17      	ldr	r2, [pc, #92]	; (ef6c <compare_set+0x114>)
			cc_val = now + cc_inc;
    ef0e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    ef12:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    ef16:	e7d9      	b.n	eecc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    ef18:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ef1a:	4a15      	ldr	r2, [pc, #84]	; (ef70 <compare_set+0x118>)
    ef1c:	f3bf 8f5b 	dmb	ish
    ef20:	40a3      	lsls	r3, r4
    ef22:	e852 0f00 	ldrex	r0, [r2]
    ef26:	4318      	orrs	r0, r3
    ef28:	e842 0100 	strex	r1, r0, [r2]
    ef2c:	2900      	cmp	r1, #0
    ef2e:	d1f8      	bne.n	ef22 <compare_set+0xca>
    ef30:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    ef34:	490b      	ldr	r1, [pc, #44]	; (ef64 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    ef36:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    ef38:	0123      	lsls	r3, r4, #4
    ef3a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    ef3e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    ef42:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    ef44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef46:	6053      	str	r3, [r2, #4]
	return ret;
    ef48:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    ef4a:	4620      	mov	r0, r4
    ef4c:	9900      	ldr	r1, [sp, #0]
    ef4e:	f7ff ff33 	bl	edb8 <compare_int_unlock>
}
    ef52:	4628      	mov	r0, r5
    ef54:	b003      	add	sp, #12
    ef56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    ef5a:	f06f 0515 	mvn.w	r5, #21
    ef5e:	e7f4      	b.n	ef4a <compare_set+0xf2>
    ef60:	00800001 	.word	0x00800001
    ef64:	20001730 	.word	0x20001730
    ef68:	40011000 	.word	0x40011000
    ef6c:	007ffffd 	.word	0x007ffffd
    ef70:	200021a0 	.word	0x200021a0

0000ef74 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    ef74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    ef76:	4c1b      	ldr	r4, [pc, #108]	; (efe4 <sys_clock_driver_init+0x70>)
    ef78:	4b1b      	ldr	r3, [pc, #108]	; (efe8 <sys_clock_driver_init+0x74>)
    ef7a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    ef7e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ef82:	4b1a      	ldr	r3, [pc, #104]	; (efec <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    ef84:	2500      	movs	r5, #0
    ef86:	f04f 30ff 	mov.w	r0, #4294967295
    ef8a:	f04f 31ff 	mov.w	r1, #4294967295
    ef8e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    ef92:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    ef96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ef9a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ef9e:	4b14      	ldr	r3, [pc, #80]	; (eff0 <sys_clock_driver_init+0x7c>)
    efa0:	2602      	movs	r6, #2
    efa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    efa6:	2101      	movs	r1, #1
    efa8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    efac:	2011      	movs	r0, #17
    efae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    efb2:	462a      	mov	r2, r5
    efb4:	f7fc fba2 	bl	b6fc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    efb8:	2011      	movs	r0, #17
    efba:	f7fc fb6f 	bl	b69c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    efbe:	4a0d      	ldr	r2, [pc, #52]	; (eff4 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    efc0:	2301      	movs	r3, #1
    efc2:	60a3      	str	r3, [r4, #8]
    efc4:	6023      	str	r3, [r4, #0]
    efc6:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    efc8:	4b0b      	ldr	r3, [pc, #44]	; (eff8 <sys_clock_driver_init+0x84>)
    efca:	4a0c      	ldr	r2, [pc, #48]	; (effc <sys_clock_driver_init+0x88>)
    efcc:	9300      	str	r3, [sp, #0]
    efce:	9501      	str	r5, [sp, #4]
    efd0:	2300      	movs	r3, #0
    efd2:	4628      	mov	r0, r5
    efd4:	f7ff ff40 	bl	ee58 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    efd8:	4630      	mov	r0, r6
    efda:	f7fe fa45 	bl	d468 <z_nrf_clock_control_lf_on>

	return 0;
}
    efde:	4628      	mov	r0, r5
    efe0:	b002      	add	sp, #8
    efe2:	bd70      	pop	{r4, r5, r6, pc}
    efe4:	40011000 	.word	0x40011000
    efe8:	000f0003 	.word	0x000f0003
    efec:	20001730 	.word	0x20001730
    eff0:	e000e100 	.word	0xe000e100
    eff4:	200021a4 	.word	0x200021a4
    eff8:	0000ed71 	.word	0x0000ed71
    effc:	007fffff 	.word	0x007fffff

0000f000 <rtc_nrf_isr>:
{
    f000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    f004:	4c2b      	ldr	r4, [pc, #172]	; (f0b4 <rtc_nrf_isr+0xb4>)
    f006:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    f00a:	0799      	lsls	r1, r3, #30
    f00c:	d50b      	bpl.n	f026 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f00e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    f012:	b143      	cbz	r3, f026 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    f014:	4a28      	ldr	r2, [pc, #160]	; (f0b8 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f016:	2300      	movs	r3, #0
    f018:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    f01c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    f020:	6813      	ldr	r3, [r2, #0]
    f022:	3301      	adds	r3, #1
    f024:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    f026:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    f02a:	03da      	lsls	r2, r3, #15
    f02c:	d523      	bpl.n	f076 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    f02e:	f3bf 8f5b 	dmb	ish
    f032:	4b22      	ldr	r3, [pc, #136]	; (f0bc <rtc_nrf_isr+0xbc>)
    f034:	e853 2f00 	ldrex	r2, [r3]
    f038:	f022 0101 	bic.w	r1, r2, #1
    f03c:	e843 1000 	strex	r0, r1, [r3]
    f040:	2800      	cmp	r0, #0
    f042:	d1f7      	bne.n	f034 <rtc_nrf_isr+0x34>
    f044:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    f048:	07d3      	lsls	r3, r2, #31
    f04a:	d402      	bmi.n	f052 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f04c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    f050:	b18b      	cbz	r3, f076 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f052:	2500      	movs	r5, #0
    f054:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f058:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    f05c:	f7ff feda 	bl	ee14 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    f060:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    f064:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    f066:	4b16      	ldr	r3, [pc, #88]	; (f0c0 <rtc_nrf_isr+0xc0>)
    f068:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    f06c:	42b0      	cmp	r0, r6
    f06e:	41b9      	sbcs	r1, r7
    f070:	d204      	bcs.n	f07c <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    f072:	f382 8810 	msr	PRIMASK, r2
}
    f076:	b003      	add	sp, #12
    f078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    f07c:	f04f 38ff 	mov.w	r8, #4294967295
    f080:	f04f 39ff 	mov.w	r9, #4294967295
    f084:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    f088:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    f08c:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    f08e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    f092:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    f096:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    f09a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    f09e:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    f0a2:	2900      	cmp	r1, #0
    f0a4:	d0e7      	beq.n	f076 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
    f0a6:	9000      	str	r0, [sp, #0]
    f0a8:	4632      	mov	r2, r6
    f0aa:	463b      	mov	r3, r7
    f0ac:	4628      	mov	r0, r5
    f0ae:	4788      	blx	r1
    f0b0:	e7e1      	b.n	f076 <rtc_nrf_isr+0x76>
    f0b2:	bf00      	nop
    f0b4:	40011000 	.word	0x40011000
    f0b8:	200021a8 	.word	0x200021a8
    f0bc:	200021a0 	.word	0x200021a0
    f0c0:	20001730 	.word	0x20001730

0000f0c4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    f0c4:	1c43      	adds	r3, r0, #1
{
    f0c6:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    f0c8:	d022      	beq.n	f110 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    f0ca:	2801      	cmp	r0, #1
    f0cc:	dd22      	ble.n	f114 <sys_clock_set_timeout+0x50>
    f0ce:	4a12      	ldr	r2, [pc, #72]	; (f118 <sys_clock_set_timeout+0x54>)
    f0d0:	4b12      	ldr	r3, [pc, #72]	; (f11c <sys_clock_set_timeout+0x58>)
    f0d2:	4290      	cmp	r0, r2
    f0d4:	bfd4      	ite	le
    f0d6:	4604      	movle	r4, r0
    f0d8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    f0da:	f7ff fe9b 	bl	ee14 <z_nrf_rtc_timer_read>
    f0de:	4b10      	ldr	r3, [pc, #64]	; (f120 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    f0e0:	490e      	ldr	r1, [pc, #56]	; (f11c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0e6:	1a80      	subs	r0, r0, r2
		cyc = 0;
    f0e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    f0ec:	bf28      	it	cs
    f0ee:	2400      	movcs	r4, #0
	cyc += unannounced;
    f0f0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    f0f2:	428c      	cmp	r4, r1
    f0f4:	bf28      	it	cs
    f0f6:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    f0f8:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    f0fa:	490a      	ldr	r1, [pc, #40]	; (f124 <sys_clock_set_timeout+0x60>)
    f0fc:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    f0fe:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    f102:	9001      	str	r0, [sp, #4]
    f104:	f143 0300 	adc.w	r3, r3, #0
    f108:	f7ff fea6 	bl	ee58 <compare_set>
}
    f10c:	b002      	add	sp, #8
    f10e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    f110:	4c02      	ldr	r4, [pc, #8]	; (f11c <sys_clock_set_timeout+0x58>)
    f112:	e7e2      	b.n	f0da <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    f114:	2401      	movs	r4, #1
    f116:	e7e0      	b.n	f0da <sys_clock_set_timeout+0x16>
    f118:	007ffffe 	.word	0x007ffffe
    f11c:	007fffff 	.word	0x007fffff
    f120:	20001740 	.word	0x20001740
    f124:	0000ed71 	.word	0x0000ed71

0000f128 <sys_clock_elapsed>:
{
    f128:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    f12a:	f7ff fe73 	bl	ee14 <z_nrf_rtc_timer_read>
    f12e:	4b02      	ldr	r3, [pc, #8]	; (f138 <sys_clock_elapsed+0x10>)
    f130:	681b      	ldr	r3, [r3, #0]
}
    f132:	1ac0      	subs	r0, r0, r3
    f134:	bd08      	pop	{r3, pc}
    f136:	bf00      	nop
    f138:	20001740 	.word	0x20001740

0000f13c <sys_clock_disable>:
{
    f13c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    f13e:	4c08      	ldr	r4, [pc, #32]	; (f160 <sys_clock_disable+0x24>)
    f140:	2301      	movs	r3, #1
    f142:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    f144:	2011      	movs	r0, #17
    f146:	f7fc fab7 	bl	b6b8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    f14a:	4b06      	ldr	r3, [pc, #24]	; (f164 <sys_clock_disable+0x28>)
    f14c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    f150:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    f154:	4b04      	ldr	r3, [pc, #16]	; (f168 <sys_clock_disable+0x2c>)
    f156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    f15a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    f15e:	bd10      	pop	{r4, pc}
    f160:	40011000 	.word	0x40011000
    f164:	000f0003 	.word	0x000f0003
    f168:	e000e100 	.word	0xe000e100

0000f16c <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
    f16c:	4602      	mov	r2, r0
    f16e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    f170:	4801      	ldr	r0, [pc, #4]	; (f178 <multithreading_lock_acquire+0xc>)
    f172:	f002 ba5d 	b.w	11630 <z_impl_k_mutex_lock>
    f176:	bf00      	nop
    f178:	20000658 	.word	0x20000658

0000f17c <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
    f17c:	4801      	ldr	r0, [pc, #4]	; (f184 <multithreading_lock_release+0x8>)
    f17e:	f002 bad1 	b.w	11724 <z_impl_k_mutex_unlock>
    f182:	bf00      	nop
    f184:	20000658 	.word	0x20000658

0000f188 <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
    f188:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
    f18a:	4916      	ldr	r1, [pc, #88]	; (f1e4 <hci_driver_open+0x5c>)
    f18c:	4816      	ldr	r0, [pc, #88]	; (f1e8 <hci_driver_open+0x60>)
{
    f18e:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
    f190:	f007 fc83 	bl	16a9a <k_work_init>
		hci_ecdh_init();
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
    f194:	a803      	add	r0, sp, #12
    f196:	f7f1 f82d 	bl	1f4 <sdc_build_revision_get>
    f19a:	4814      	ldr	r0, [pc, #80]	; (f1ec <hci_driver_open+0x64>)
    f19c:	f007 faab 	bl	166f6 <z_device_is_ready>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
    f1a0:	b1d0      	cbz	r0, f1d8 <hci_driver_open+0x50>
		LOG_ERR("Entropy source device not ready");
		return -ENODEV;
	}

	sdc_rand_source_t rand_functions = {
    f1a2:	4a13      	ldr	r2, [pc, #76]	; (f1f0 <hci_driver_open+0x68>)
    f1a4:	ca07      	ldmia	r2, {r0, r1, r2}
    f1a6:	466b      	mov	r3, sp
    f1a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.rand_prio_low_get = rand_prio_low_vector_get,
		.rand_prio_high_get = rand_prio_high_vector_get,
		.rand_poll = rand_prio_low_vector_get_blocking
	};

	err = sdc_rand_source_register(&rand_functions);
    f1ac:	4618      	mov	r0, r3
    f1ae:	f7f1 f991 	bl	4d4 <sdc_rand_source_register>
	if (err) {
    f1b2:	b9a0      	cbnz	r0, f1de <hci_driver_open+0x56>
		LOG_ERR("Failed to register rand source (%d)", err);
		return -EINVAL;
	}

	err = MULTITHREADING_LOCK_ACQUIRE();
    f1b4:	f04f 30ff 	mov.w	r0, #4294967295
    f1b8:	f04f 31ff 	mov.w	r1, #4294967295
    f1bc:	f7ff ffd6 	bl	f16c <multithreading_lock_acquire>
	if (err) {
    f1c0:	4604      	mov	r4, r0
    f1c2:	b930      	cbnz	r0, f1d2 <hci_driver_open+0x4a>
		MULTITHREADING_LOCK_RELEASE();
		return -ENOTSUP;
	}
#endif

	err = sdc_enable(receive_signal_raise, sdc_mempool);
    f1c4:	490b      	ldr	r1, [pc, #44]	; (f1f4 <hci_driver_open+0x6c>)
    f1c6:	480c      	ldr	r0, [pc, #48]	; (f1f8 <hci_driver_open+0x70>)
    f1c8:	f7f1 f884 	bl	2d4 <sdc_enable>
	if (err) {
    f1cc:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
		return err;
	}

	MULTITHREADING_LOCK_RELEASE();
    f1ce:	f7ff ffd5 	bl	f17c <multithreading_lock_release>

	return 0;
}
    f1d2:	4620      	mov	r0, r4
    f1d4:	b008      	add	sp, #32
    f1d6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    f1d8:	f06f 0412 	mvn.w	r4, #18
    f1dc:	e7f9      	b.n	f1d2 <hci_driver_open+0x4a>
		return -EINVAL;
    f1de:	f06f 0415 	mvn.w	r4, #21
    f1e2:	e7f6      	b.n	f1d2 <hci_driver_open+0x4a>
    f1e4:	0001641d 	.word	0x0001641d
    f1e8:	200021ac 	.word	0x200021ac
    f1ec:	0001713c 	.word	0x0001713c
    f1f0:	000174d0 	.word	0x000174d0
    f1f4:	20001750 	.word	0x20001750
    f1f8:	0000f2c9 	.word	0x0000f2c9

0000f1fc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
    f1fc:	b513      	push	{r0, r1, r4, lr}
	int err = 0;

	bt_hci_driver_register(&drv);
    f1fe:	4825      	ldr	r0, [pc, #148]	; (f294 <hci_driver_init+0x98>)
    f200:	f7fd fb12 	bl	c828 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
    f204:	4824      	ldr	r0, [pc, #144]	; (f298 <hci_driver_init+0x9c>)
    f206:	f7f1 f88f 	bl	328 <sdc_init>
				err = sdc_support_scan();
    f20a:	f7f1 f909 	bl	420 <sdc_support_scan>
				if (err) {
    f20e:	4604      	mov	r4, r0
    f210:	2800      	cmp	r0, #0
    f212:	d13c      	bne.n	f28e <hci_driver_init+0x92>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f214:	aa01      	add	r2, sp, #4
    f216:	2101      	movs	r1, #1
	cfg.central_count.count = SDC_CENTRAL_COUNT;
    f218:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f21c:	f7f0 fff8 	bl	210 <sdc_cfg_set>
	if (required_memory < 0) {
    f220:	2800      	cmp	r0, #0
    f222:	db30      	blt.n	f286 <hci_driver_init+0x8a>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
    f224:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f226:	aa01      	add	r2, sp, #4
    f228:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
    f22a:	f8ad 1004 	strh.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f22e:	f7f0 ffef 	bl	210 <sdc_cfg_set>
	if (required_memory < 0) {
    f232:	2800      	cmp	r0, #0
    f234:	db27      	blt.n	f286 <hci_driver_init+0x8a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
    f236:	4b19      	ldr	r3, [pc, #100]	; (f29c <hci_driver_init+0xa0>)
    f238:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f23a:	aa01      	add	r2, sp, #4
    f23c:	2103      	movs	r1, #3
    f23e:	4620      	mov	r0, r4
    f240:	f7f0 ffe6 	bl	210 <sdc_cfg_set>
	if (required_memory < 0) {
    f244:	2800      	cmp	r0, #0
    f246:	db1e      	blt.n	f286 <hci_driver_init+0x8a>
	cfg.event_length.event_length_us =
    f248:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f24c:	aa01      	add	r2, sp, #4
    f24e:	2104      	movs	r1, #4
    f250:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
    f252:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f254:	f7f0 ffdc 	bl	210 <sdc_cfg_set>
	if (required_memory < 0) {
    f258:	2800      	cmp	r0, #0
    f25a:	db14      	blt.n	f286 <hci_driver_init+0x8a>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
    f25c:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f25e:	aa01      	add	r2, sp, #4
    f260:	2106      	movs	r1, #6
    f262:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
    f264:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
    f268:	f7f0 ffd2 	bl	210 <sdc_cfg_set>
		if (required_memory < 0) {
    f26c:	2800      	cmp	r0, #0
    f26e:	db0a      	blt.n	f286 <hci_driver_init+0x8a>
	if (required_memory > sizeof(sdc_mempool)) {
    f270:	f5b0 7fc2 	cmp.w	r0, #388	; 0x184
    f274:	dd09      	ble.n	f28a <hci_driver_init+0x8e>
		k_panic();
    f276:	4040      	eors	r0, r0
    f278:	f380 8811 	msr	BASEPRI, r0
    f27c:	f04f 0004 	mov.w	r0, #4
    f280:	df02      	svc	2
		return -ENOMEM;
    f282:	f06f 000b 	mvn.w	r0, #11
	if (err) {
		return err;
	}

	return err;
}
    f286:	b002      	add	sp, #8
    f288:	bd10      	pop	{r4, pc}
	return 0;
    f28a:	4620      	mov	r0, r4
	if (err) {
    f28c:	e7fb      	b.n	f286 <hci_driver_init+0x8a>
					return -ENOTSUP;
    f28e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f292:	e7f8      	b.n	f286 <hci_driver_init+0x8a>
    f294:	00017828 	.word	0x00017828
    f298:	000163ad 	.word	0x000163ad
    f29c:	02031b1b 	.word	0x02031b1b

0000f2a0 <rand_prio_low_vector_get>:
{
    f2a0:	b538      	push	{r3, r4, r5, lr}
    f2a2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
    f2a4:	4807      	ldr	r0, [pc, #28]	; (f2c4 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
    f2a6:	6883      	ldr	r3, [r0, #8]
    f2a8:	685d      	ldr	r5, [r3, #4]
    f2aa:	460a      	mov	r2, r1
    f2ac:	b135      	cbz	r5, f2bc <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
    f2ae:	2300      	movs	r3, #0
    f2b0:	4621      	mov	r1, r4
    f2b2:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
    f2b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
    f2b8:	b2c0      	uxtb	r0, r0
    f2ba:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    f2bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f2c0:	e7f8      	b.n	f2b4 <rand_prio_low_vector_get+0x14>
    f2c2:	bf00      	nop
    f2c4:	0001713c 	.word	0x0001713c

0000f2c8 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
    f2c8:	4901      	ldr	r1, [pc, #4]	; (f2d0 <receive_signal_raise+0x8>)
    f2ca:	4802      	ldr	r0, [pc, #8]	; (f2d4 <receive_signal_raise+0xc>)
    f2cc:	f007 bc02 	b.w	16ad4 <k_work_submit_to_queue>
    f2d0:	200021ac 	.word	0x200021ac
    f2d4:	200018d8 	.word	0x200018d8

0000f2d8 <rand_prio_low_vector_get_blocking>:
{
    f2d8:	b410      	push	{r4}
    f2da:	4603      	mov	r3, r0
    f2dc:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
    f2de:	4803      	ldr	r0, [pc, #12]	; (f2ec <rand_prio_low_vector_get_blocking+0x14>)
    f2e0:	6881      	ldr	r1, [r0, #8]
    f2e2:	680c      	ldr	r4, [r1, #0]
    f2e4:	4619      	mov	r1, r3
    f2e6:	4623      	mov	r3, r4
}
    f2e8:	bc10      	pop	{r4}
    f2ea:	4718      	bx	r3
    f2ec:	0001713c 	.word	0x0001713c

0000f2f0 <hci_driver_receive_process>:
{
    f2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
    f2f2:	f04f 30ff 	mov.w	r0, #4294967295
    f2f6:	f04f 31ff 	mov.w	r1, #4294967295
    f2fa:	f7ff ff37 	bl	f16c <multithreading_lock_acquire>
	if (!errcode) {
    f2fe:	2800      	cmp	r0, #0
    f300:	d145      	bne.n	f38e <hci_driver_receive_process+0x9e>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
    f302:	4d24      	ldr	r5, [pc, #144]	; (f394 <hci_driver_receive_process+0xa4>)
    f304:	f10d 0107 	add.w	r1, sp, #7
    f308:	4628      	mov	r0, r5
    f30a:	f000 fb23 	bl	f954 <hci_internal_msg_get>
    f30e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
    f310:	f7ff ff34 	bl	f17c <multithreading_lock_release>
	if (errcode) {
    f314:	2c00      	cmp	r4, #0
    f316:	d13a      	bne.n	f38e <hci_driver_receive_process+0x9e>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
    f318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f31c:	2b04      	cmp	r3, #4
    f31e:	d126      	bne.n	f36e <hci_driver_receive_process+0x7e>
	switch (hdr->evt) {
    f320:	7828      	ldrb	r0, [r5, #0]
    f322:	283e      	cmp	r0, #62	; 0x3e
    f324:	d019      	beq.n	f35a <hci_driver_receive_process+0x6a>
    f326:	28ff      	cmp	r0, #255	; 0xff
    f328:	d01e      	beq.n	f368 <hci_driver_receive_process+0x78>
		switch (subevent) {
    f32a:	f04f 32ff 	mov.w	r2, #4294967295
    f32e:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    f332:	4621      	mov	r1, r4
    f334:	f7fc fe2e 	bl	bf94 <bt_buf_get_evt>
	if (!evt_buf) {
    f338:	4604      	mov	r4, r0
    f33a:	b148      	cbz	r0, f350 <hci_driver_receive_process+0x60>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
    f33c:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f33e:	4915      	ldr	r1, [pc, #84]	; (f394 <hci_driver_receive_process+0xa4>)
    f340:	3202      	adds	r2, #2
    f342:	f104 000c 	add.w	r0, r4, #12
    f346:	f006 fa89 	bl	1585c <net_buf_simple_add_mem>
	bt_recv(data_buf);
    f34a:	4620      	mov	r0, r4
    f34c:	f7fd fa46 	bl	c7dc <bt_recv>
}
    f350:	b003      	add	sp, #12
    f352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		receive_signal_raise();
    f356:	f7ff bfb7 	b.w	f2c8 <receive_signal_raise>
		switch (me->subevent) {
    f35a:	78ab      	ldrb	r3, [r5, #2]
    f35c:	2b02      	cmp	r3, #2
		switch (subevent) {
    f35e:	d1e4      	bne.n	f32a <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
    f360:	2200      	movs	r2, #0
    f362:	2300      	movs	r3, #0
			return true;
    f364:	2401      	movs	r4, #1
    f366:	e7e4      	b.n	f332 <hci_driver_receive_process+0x42>
		switch (subevent) {
    f368:	78ab      	ldrb	r3, [r5, #2]
    f36a:	2b80      	cmp	r3, #128	; 0x80
    f36c:	e7f7      	b.n	f35e <hci_driver_receive_process+0x6e>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
    f36e:	2b02      	cmp	r3, #2
    f370:	d1ee      	bne.n	f350 <hci_driver_receive_process+0x60>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    f372:	f04f 32ff 	mov.w	r2, #4294967295
    f376:	f04f 33ff 	mov.w	r3, #4294967295
    f37a:	2003      	movs	r0, #3
    f37c:	f7fc fdda 	bl	bf34 <bt_buf_get_rx>
	if (!data_buf) {
    f380:	4604      	mov	r4, r0
    f382:	2800      	cmp	r0, #0
    f384:	d0e4      	beq.n	f350 <hci_driver_receive_process+0x60>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
    f386:	886a      	ldrh	r2, [r5, #2]
    f388:	4629      	mov	r1, r5
    f38a:	3204      	adds	r2, #4
    f38c:	e7d9      	b.n	f342 <hci_driver_receive_process+0x52>
}
    f38e:	b003      	add	sp, #12
    f390:	bd30      	pop	{r4, r5, pc}
    f392:	bf00      	nop
    f394:	20002f7e 	.word	0x20002f7e

0000f398 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
    f398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
    f39a:	4cb6      	ldr	r4, [pc, #728]	; (f674 <hci_internal_cmd_put+0x2dc>)
    f39c:	8805      	ldrh	r5, [r0, #0]
    f39e:	7823      	ldrb	r3, [r4, #0]
{
    f3a0:	4606      	mov	r6, r0
	if (cmd_complete_or_status.occurred) {
    f3a2:	2b00      	cmp	r3, #0
    f3a4:	f040 82cd 	bne.w	f942 <hci_internal_cmd_put+0x5aa>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
    f3a8:	2304      	movs	r3, #4
    f3aa:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
    f3ae:	4bb2      	ldr	r3, [pc, #712]	; (f678 <hci_internal_cmd_put+0x2e0>)
    f3b0:	681f      	ldr	r7, [r3, #0]
    f3b2:	b1a7      	cbz	r7, f3de <hci_internal_cmd_put+0x46>
		status = user_cmd_handler(cmd_in,
    f3b4:	f10d 0306 	add.w	r3, sp, #6
    f3b8:	f10d 0207 	add.w	r2, sp, #7
    f3bc:	1c61      	adds	r1, r4, #1
    f3be:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
    f3c0:	2801      	cmp	r0, #1
    f3c2:	d00c      	beq.n	f3de <hci_internal_cmd_put+0x46>
	if (generate_command_status_event ||
    f3c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f3c8:	bb33      	cbnz	r3, f418 <hci_internal_cmd_put+0x80>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    f3ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    f3ce:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f3d0:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
    f3d2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f3d4:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
    f3d6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    f3d8:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    f3da:	71a0      	strb	r0, [r4, #6]
}
    f3dc:	e025      	b.n	f42a <hci_internal_cmd_put+0x92>
		switch (BT_OGF(opcode)) {
    f3de:	0aab      	lsrs	r3, r5, #10
    f3e0:	2b08      	cmp	r3, #8
    f3e2:	f000 80ea 	beq.w	f5ba <hci_internal_cmd_put+0x222>
    f3e6:	d813      	bhi.n	f410 <hci_internal_cmd_put+0x78>
    f3e8:	2b03      	cmp	r3, #3
    f3ea:	d02b      	beq.n	f444 <hci_internal_cmd_put+0xac>
    f3ec:	2b04      	cmp	r3, #4
    f3ee:	d046      	beq.n	f47e <hci_internal_cmd_put+0xe6>
    f3f0:	2001      	movs	r0, #1
	switch (hci_opcode) {
    f3f2:	f240 4306 	movw	r3, #1030	; 0x406
    f3f6:	429d      	cmp	r5, r3
    f3f8:	f040 8114 	bne.w	f624 <hci_internal_cmd_put+0x28c>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f3fc:	230f      	movs	r3, #15
    f3fe:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f400:	2204      	movs	r2, #4
	evt_data->ncmd = 1;
    f402:	2301      	movs	r3, #1
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f404:	70a2      	strb	r2, [r4, #2]
	evt_data->status = status_code;
    f406:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    f408:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    f40a:	2106      	movs	r1, #6
    f40c:	7161      	strb	r1, [r4, #5]
    f40e:	e12e      	b.n	f66e <hci_internal_cmd_put+0x2d6>
		switch (BT_OGF(opcode)) {
    f410:	2b3f      	cmp	r3, #63	; 0x3f
    f412:	f000 81d2 	beq.w	f7ba <hci_internal_cmd_put+0x422>
	switch (opcode)	{
    f416:	2001      	movs	r0, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f418:	230f      	movs	r3, #15
    f41a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f41c:	2304      	movs	r3, #4
    f41e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
    f420:	2301      	movs	r3, #1
	evt_data->status = status_code;
    f422:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    f424:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    f426:	f8a4 5005 	strh.w	r5, [r4, #5]
						    opcode,
						    BT_HCI_ERR_CMD_DISALLOWED);
		}
	}

	cmd_complete_or_status.occurred = true;
    f42a:	2301      	movs	r3, #1
    f42c:	7023      	strb	r3, [r4, #0]

		cmd_complete_or_status.occurred = false;
	}
#endif

	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
    f42e:	f242 0383 	movw	r3, #8323	; 0x2083
    f432:	429d      	cmp	r5, r3
    f434:	f040 8099 	bne.w	f56a <hci_internal_cmd_put+0x1d2>
		&&
    f438:	7863      	ldrb	r3, [r4, #1]
    f43a:	2b0e      	cmp	r3, #14
    f43c:	f040 8095 	bne.w	f56a <hci_internal_cmd_put+0x1d2>
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
    f440:	2300      	movs	r3, #0
    f442:	e115      	b.n	f670 <hci_internal_cmd_put+0x2d8>
	return ((uint16_t)src[1] << 8) | src[0];
    f444:	f9b6 3000 	ldrsh.w	r3, [r6]
	switch (opcode)	{
    f448:	f640 4201 	movw	r2, #3073	; 0xc01
    f44c:	4293      	cmp	r3, r2
    f44e:	d00d      	beq.n	f46c <hci_internal_cmd_put+0xd4>
    f450:	f640 4203 	movw	r2, #3075	; 0xc03
    f454:	4293      	cmp	r3, r2
    f456:	d00f      	beq.n	f478 <hci_internal_cmd_put+0xe0>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f458:	230f      	movs	r3, #15
    f45a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f45c:	2304      	movs	r3, #4
    f45e:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    f460:	2301      	movs	r3, #1
    f462:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
    f464:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    f466:	f8a4 5005 	strh.w	r5, [r4, #5]
	cmd_complete_or_status.occurred = true;
    f46a:	e101      	b.n	f670 <hci_internal_cmd_put+0x2d8>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
    f46c:	1cf0      	adds	r0, r6, #3
    f46e:	f7f9 faca 	bl	8a06 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
    f472:	2801      	cmp	r0, #1
    f474:	d0cf      	beq.n	f416 <hci_internal_cmd_put+0x7e>
    f476:	e7a8      	b.n	f3ca <hci_internal_cmd_put+0x32>
		return sdc_hci_cmd_cb_reset();
    f478:	f7f1 f91e 	bl	6b8 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
    f47c:	e7f9      	b.n	f472 <hci_internal_cmd_put+0xda>
	switch (opcode)	{
    f47e:	8833      	ldrh	r3, [r6, #0]
    f480:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
    f484:	3b01      	subs	r3, #1
    f486:	2b08      	cmp	r3, #8
    f488:	d8e6      	bhi.n	f458 <hci_internal_cmd_put+0xc0>
    f48a:	a201      	add	r2, pc, #4	; (adr r2, f490 <hci_internal_cmd_put+0xf8>)
    f48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f490:	0000f4b5 	.word	0x0000f4b5
    f494:	0000f4c7 	.word	0x0000f4c7
    f498:	0000f571 	.word	0x0000f571
    f49c:	0000f459 	.word	0x0000f459
    f4a0:	0000f459 	.word	0x0000f459
    f4a4:	0000f459 	.word	0x0000f459
    f4a8:	0000f459 	.word	0x0000f459
    f4ac:	0000f459 	.word	0x0000f459
    f4b0:	0000f5a9 	.word	0x0000f5a9
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    f4b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    f4b8:	4870      	ldr	r0, [pc, #448]	; (f67c <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
    f4ba:	3308      	adds	r3, #8
    f4bc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
    f4c0:	f7f9 faf9 	bl	8ab6 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
    f4c4:	e7d5      	b.n	f472 <hci_internal_cmd_put+0xda>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    f4c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f4ca:	4e6c      	ldr	r6, [pc, #432]	; (f67c <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    f4cc:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    f4ce:	2230      	movs	r2, #48	; 0x30
    f4d0:	2100      	movs	r1, #0
    f4d2:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
    f4d4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f4d8:	f006 f8cb 	bl	15672 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    f4dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    f4e0:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    f4e2:	2300      	movs	r3, #0
    f4e4:	71a3      	strb	r3, [r4, #6]
	cmds->hci_set_event_mask = 1;
    f4e6:	7b23      	ldrb	r3, [r4, #12]
	evt_data->opcode = hci_opcode;
    f4e8:	80a5      	strh	r5, [r4, #4]
	cmds->hci_set_event_mask = 1;
    f4ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
    f4ee:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_local_version_information = 1;
    f4f0:	7d63      	ldrb	r3, [r4, #21]
    f4f2:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    f4f6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    f4fa:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
    f4fc:	7da3      	ldrb	r3, [r4, #22]
    f4fe:	f043 0302 	orr.w	r3, r3, #2
    f502:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
    f504:	f894 3020 	ldrb.w	r3, [r4, #32]
    f508:	f023 0317 	bic.w	r3, r3, #23
    f50c:	f043 0317 	orr.w	r3, r3, #23
    f510:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
    f514:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    f518:	f063 0333 	orn	r3, r3, #51	; 0x33
    f51c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
    f520:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    f524:	f063 033c 	orn	r3, r3, #60	; 0x3c
    f528:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_supported_states = 1;
    f52c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    f530:	f023 0378 	bic.w	r3, r3, #120	; 0x78
    f534:	f043 0378 	orr.w	r3, r3, #120	; 0x78
    f538:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
    f53c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    f540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f544:	220e      	movs	r2, #14
	cmds->hci_le_receiver_test_v2 = 1;
    f546:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
    f54a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f54e:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
    f550:	2201      	movs	r2, #1
	cmds->hci_le_transmitter_test_v2 = 1;
    f552:	4313      	orrs	r3, r2
    f554:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
    f558:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	evt_data->ncmd = 1;
    f55c:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_read_transmit_power = 1;
    f55e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f562:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmd_complete_or_status.occurred = true;
    f566:	f806 2c07 	strb.w	r2, [r6, #-7]
	}

	return 0;
    f56a:	2000      	movs	r0, #0
}
    f56c:	b003      	add	sp, #12
    f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    f570:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    f574:	4e41      	ldr	r6, [pc, #260]	; (f67c <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    f576:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
    f578:	2208      	movs	r2, #8
    f57a:	2100      	movs	r1, #0
    f57c:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
    f57e:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    f582:	f006 f876 	bl	15672 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
    f586:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
    f58a:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
    f58c:	2300      	movs	r3, #0
    f58e:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
    f590:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
    f592:	80a5      	strh	r5, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f594:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
    f596:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
    f59a:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
    f59c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
    f5a0:	2201      	movs	r2, #1
    f5a2:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
    f5a4:	72e3      	strb	r3, [r4, #11]
    f5a6:	e7de      	b.n	f566 <hci_internal_cmd_put+0x1ce>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    f5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    f5ac:	4833      	ldr	r0, [pc, #204]	; (f67c <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
    f5ae:	3306      	adds	r3, #6
    f5b0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
    f5b4:	f7f9 fa7d 	bl	8ab2 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
    f5b8:	e75b      	b.n	f472 <hci_internal_cmd_put+0xda>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    f5ba:	4630      	mov	r0, r6
	switch (opcode)	{
    f5bc:	f242 011c 	movw	r1, #8220	; 0x201c
    f5c0:	f830 3b03 	ldrh.w	r3, [r0], #3
    f5c4:	b21a      	sxth	r2, r3
    f5c6:	428a      	cmp	r2, r1
    f5c8:	f242 0132 	movw	r1, #8242	; 0x2032
    f5cc:	dc38      	bgt.n	f640 <hci_internal_cmd_put+0x2a8>
    f5ce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    f5d2:	dc01      	bgt.n	f5d8 <hci_internal_cmd_put+0x240>
	switch (hci_opcode) {
    f5d4:	428d      	cmp	r5, r1
    f5d6:	e017      	b.n	f608 <hci_internal_cmd_put+0x270>
	switch (opcode)	{
    f5d8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    f5dc:	3b01      	subs	r3, #1
    f5de:	2b1b      	cmp	r3, #27
    f5e0:	d80f      	bhi.n	f602 <hci_internal_cmd_put+0x26a>
    f5e2:	e8df f003 	tbb	[pc, r3]
    f5e6:	704d      	.short	0x704d
    f5e8:	0ea80e79 	.word	0x0ea80e79
    f5ec:	0e0e0e0e 	.word	0x0e0e0e0e
    f5f0:	0e0eaeab 	.word	0x0e0eaeab
    f5f4:	c0bdbab1 	.word	0xc0bdbab1
    f5f8:	0e0e0e0e 	.word	0x0e0e0e0e
    f5fc:	0e0eccc3 	.word	0x0e0eccc3
    f600:	d50e      	.short	0xd50e
	switch (hci_opcode) {
    f602:	f242 0332 	movw	r3, #8242	; 0x2032
    f606:	429d      	cmp	r5, r3
    f608:	d027      	beq.n	f65a <hci_internal_cmd_put+0x2c2>
    f60a:	f200 8198 	bhi.w	f93e <hci_internal_cmd_put+0x5a6>
    f60e:	f242 0326 	movw	r3, #8230	; 0x2026
    f612:	429d      	cmp	r5, r3
    f614:	f63f aeff 	bhi.w	f416 <hci_internal_cmd_put+0x7e>
    f618:	f242 030c 	movw	r3, #8204	; 0x200c
    f61c:	429d      	cmp	r5, r3
    f61e:	f04f 0001 	mov.w	r0, #1
    f622:	d83f      	bhi.n	f6a4 <hci_internal_cmd_put+0x30c>
    f624:	f240 431d 	movw	r3, #1053	; 0x41d
    f628:	429d      	cmp	r5, r3
    f62a:	f47f af22 	bne.w	f472 <hci_internal_cmd_put+0xda>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f62e:	230f      	movs	r3, #15
    f630:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f632:	2204      	movs	r2, #4
	evt_data->ncmd = 1;
    f634:	2301      	movs	r3, #1
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f636:	70a2      	strb	r2, [r4, #2]
	evt_data->status = status_code;
    f638:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    f63a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    f63c:	211d      	movs	r1, #29
    f63e:	e6e5      	b.n	f40c <hci_internal_cmd_put+0x74>
	switch (opcode)	{
    f640:	f242 034b 	movw	r3, #8267	; 0x204b
    f644:	429a      	cmp	r2, r3
    f646:	d1c5      	bne.n	f5d4 <hci_internal_cmd_put+0x23c>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    f648:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    f64c:	480b      	ldr	r0, [pc, #44]	; (f67c <hci_internal_cmd_put+0x2e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
    f64e:	3302      	adds	r3, #2
    f650:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
    f654:	f7f9 fa3d 	bl	8ad2 <sdc_hci_cmd_le_read_transmit_power>
    f658:	e014      	b.n	f684 <hci_internal_cmd_put+0x2ec>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f65a:	230f      	movs	r3, #15
    f65c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f65e:	2304      	movs	r3, #4
    f660:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    f662:	2301      	movs	r3, #1
    f664:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    f666:	2232      	movs	r2, #50	; 0x32
    f668:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
    f66a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    f66c:	2220      	movs	r2, #32
    f66e:	71a2      	strb	r2, [r4, #6]
		cmd_complete_or_status.occurred = false;
    f670:	7023      	strb	r3, [r4, #0]
    f672:	e77a      	b.n	f56a <hci_internal_cmd_put+0x1d2>
    f674:	20002fc4 	.word	0x20002fc4
    f678:	200021bc 	.word	0x200021bc
    f67c:	20002fcb 	.word	0x20002fcb
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
    f680:	f7f9 fa2b 	bl	8ada <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
    f684:	f242 0332 	movw	r3, #8242	; 0x2032
    f688:	429d      	cmp	r5, r3
    f68a:	d015      	beq.n	f6b8 <hci_internal_cmd_put+0x320>
    f68c:	f200 8147 	bhi.w	f91e <hci_internal_cmd_put+0x586>
    f690:	f242 0326 	movw	r3, #8230	; 0x2026
    f694:	429d      	cmp	r5, r3
    f696:	f63f aeec 	bhi.w	f472 <hci_internal_cmd_put+0xda>
    f69a:	f242 030c 	movw	r3, #8204	; 0x200c
    f69e:	429d      	cmp	r5, r3
    f6a0:	f67f aea7 	bls.w	f3f2 <hci_internal_cmd_put+0x5a>
    f6a4:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
    f6a8:	4aa7      	ldr	r2, [pc, #668]	; (f948 <hci_internal_cmd_put+0x5b0>)
    f6aa:	3b0d      	subs	r3, #13
    f6ac:	b29b      	uxth	r3, r3
    f6ae:	fa22 f303 	lsr.w	r3, r2, r3
    f6b2:	07db      	lsls	r3, r3, #31
    f6b4:	f57f aedd 	bpl.w	f472 <hci_internal_cmd_put+0xda>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f6b8:	230f      	movs	r3, #15
    f6ba:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f6bc:	2304      	movs	r3, #4
    f6be:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    f6c0:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
    f6c2:	2301      	movs	r3, #1
    f6c4:	e6ce      	b.n	f464 <hci_internal_cmd_put+0xcc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    f6c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    f6ca:	48a0      	ldr	r0, [pc, #640]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
    f6cc:	3303      	adds	r3, #3
    f6ce:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
    f6d2:	f7f9 f9fa 	bl	8aca <sdc_hci_cmd_le_read_buffer_size>
    f6d6:	e7d5      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    f6d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    f6dc:	4e9b      	ldr	r6, [pc, #620]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    f6de:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
    f6e0:	2208      	movs	r2, #8
    f6e2:	2100      	movs	r1, #0
    f6e4:	4630      	mov	r0, r6
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
    f6e6:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
    f6ea:	f005 ffc2 	bl	15672 <memset>
	features->params.le_encryption = 1;
    f6ee:	79e3      	ldrb	r3, [r4, #7]
    f6f0:	f063 0362 	orn	r3, r3, #98	; 0x62
    f6f4:	71e3      	strb	r3, [r4, #7]
	features->params.channel_selection_algorithm_2 = 1;
    f6f6:	7a23      	ldrb	r3, [r4, #8]
    f6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f6fc:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
    f6fe:	f242 0332 	movw	r3, #8242	; 0x2032
    f702:	429d      	cmp	r5, r3
    f704:	d008      	beq.n	f718 <hci_internal_cmd_put+0x380>
    f706:	f200 8109 	bhi.w	f91c <hci_internal_cmd_put+0x584>
    f70a:	f242 0326 	movw	r3, #8230	; 0x2026
    f70e:	429d      	cmp	r5, r3
    f710:	f240 80f3 	bls.w	f8fa <hci_internal_cmd_put+0x562>
		return 0;
    f714:	2000      	movs	r0, #0
    f716:	e658      	b.n	f3ca <hci_internal_cmd_put+0x32>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f718:	230f      	movs	r3, #15
    f71a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f71c:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
    f71e:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f720:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
    f722:	2300      	movs	r3, #0
    f724:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
    f726:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
    f728:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
    f72a:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
    f72c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
    f72e:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
    f730:	f806 3c07 	strb.w	r3, [r6, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
    f734:	e719      	b.n	f56a <hci_internal_cmd_put+0x1d2>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
    f736:	f7f9 f9d5 	bl	8ae4 <sdc_hci_cmd_le_set_random_address>
    f73a:	e7a3      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
    f73c:	f7f9 f9d6 	bl	8aec <sdc_hci_cmd_le_set_scan_params>
    f740:	e7a0      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
    f742:	f7f9 f9d1 	bl	8ae8 <sdc_hci_cmd_le_set_scan_enable>
    f746:	e79d      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    f748:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    f74c:	487f      	ldr	r0, [pc, #508]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
    f74e:	3301      	adds	r3, #1
    f750:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
    f754:	f7f9 f9bb 	bl	8ace <sdc_hci_cmd_le_read_filter_accept_list_size>
    f758:	e794      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_clear_filter_accept_list();
    f75a:	f7f9 f9b0 	bl	8abe <sdc_hci_cmd_le_clear_filter_accept_list>
    f75e:	e791      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
    f760:	f7f9 f9ab 	bl	8aba <sdc_hci_cmd_le_add_device_to_filter_accept_list>
    f764:	e78e      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
    f766:	f7f9 f9b6 	bl	8ad6 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
    f76a:	e78b      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    f76c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    f770:	4976      	ldr	r1, [pc, #472]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
    f772:	3310      	adds	r3, #16
    f774:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
    f778:	f7f9 f9a3 	bl	8ac2 <sdc_hci_cmd_le_encrypt>
    f77c:	e782      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    f77e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    f782:	4872      	ldr	r0, [pc, #456]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
    f784:	3308      	adds	r3, #8
    f786:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
    f78a:	f7f9 f99c 	bl	8ac6 <sdc_hci_cmd_le_rand>
    f78e:	e779      	b.n	f684 <hci_internal_cmd_put+0x2ec>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
    f790:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f794:	3308      	adds	r3, #8
    f796:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (hci_opcode) {
    f79a:	f242 0232 	movw	r2, #8242	; 0x2032
	*buf = states1;
    f79e:	2330      	movs	r3, #48	; 0x30
    f7a0:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
    f7a2:	4295      	cmp	r5, r2
	*(buf + 4) = states2;
    f7a4:	f04f 0300 	mov.w	r3, #0
    f7a8:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
    f7aa:	d1ac      	bne.n	f706 <hci_internal_cmd_put+0x36e>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
    f7ac:	220f      	movs	r2, #15
    f7ae:	7062      	strb	r2, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f7b0:	2204      	movs	r2, #4
	evt_data->status = status_code;
    f7b2:	70e3      	strb	r3, [r4, #3]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
    f7b4:	70a2      	strb	r2, [r4, #2]
	evt_data->ncmd = 1;
    f7b6:	2301      	movs	r3, #1
    f7b8:	e755      	b.n	f666 <hci_internal_cmd_put+0x2ce>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
    f7ba:	4630      	mov	r0, r6
	switch (opcode)	{
    f7bc:	f64f 420b 	movw	r2, #64523	; 0xfc0b
    f7c0:	f830 3b03 	ldrh.w	r3, [r0], #3
    f7c4:	4293      	cmp	r3, r2
    f7c6:	d823      	bhi.n	f810 <hci_internal_cmd_put+0x478>
    f7c8:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
    f7cc:	d801      	bhi.n	f7d2 <hci_internal_cmd_put+0x43a>
    f7ce:	2001      	movs	r0, #1
    f7d0:	e035      	b.n	f83e <hci_internal_cmd_put+0x4a6>
    f7d2:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
    f7d6:	3b01      	subs	r3, #1
    f7d8:	2b0a      	cmp	r3, #10
    f7da:	d8f8      	bhi.n	f7ce <hci_internal_cmd_put+0x436>
    f7dc:	a201      	add	r2, pc, #4	; (adr r2, f7e4 <hci_internal_cmd_put+0x44c>)
    f7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f7e2:	bf00      	nop
    f7e4:	0000f82f 	.word	0x0000f82f
    f7e8:	0000f84f 	.word	0x0000f84f
    f7ec:	0000f7cf 	.word	0x0000f7cf
    f7f0:	0000f7cf 	.word	0x0000f7cf
    f7f4:	0000f7cf 	.word	0x0000f7cf
    f7f8:	0000f8a3 	.word	0x0000f8a3
    f7fc:	0000f7cf 	.word	0x0000f7cf
    f800:	0000f7cf 	.word	0x0000f7cf
    f804:	0000f87f 	.word	0x0000f87f
    f808:	0000f891 	.word	0x0000f891
    f80c:	0000f8a9 	.word	0x0000f8a9
    f810:	f503 7240 	add.w	r2, r3, #768	; 0x300
    f814:	b292      	uxth	r2, r2
    f816:	2a05      	cmp	r2, #5
    f818:	d8d9      	bhi.n	f7ce <hci_internal_cmd_put+0x436>
    f81a:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
    f81e:	3b01      	subs	r3, #1
    f820:	2b04      	cmp	r3, #4
    f822:	d84a      	bhi.n	f8ba <hci_internal_cmd_put+0x522>
    f824:	e8df f003 	tbb	[pc, r3]
    f828:	63605d5a 	.word	0x63605d5a
    f82c:	66          	.byte	0x66
    f82d:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    f82e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    f832:	4846      	ldr	r0, [pc, #280]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
    f834:	330c      	adds	r3, #12
    f836:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
    f83a:	f7f0 ffe5 	bl	808 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
    f83e:	f025 0308 	bic.w	r3, r5, #8
    f842:	f64f 5202 	movw	r2, #64770	; 0xfd02
    f846:	4293      	cmp	r3, r2
    f848:	f47f ae13 	bne.w	f472 <hci_internal_cmd_put+0xda>
    f84c:	e734      	b.n	f6b8 <hci_internal_cmd_put+0x320>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    f84e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f852:	483e      	ldr	r0, [pc, #248]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    f854:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    f856:	2202      	movs	r2, #2
    f858:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
    f85a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f85e:	f005 ff08 	bl	15672 <memset>
	cmds->read_version_info = 1;
    f862:	79e3      	ldrb	r3, [r4, #7]
    f864:	f023 0323 	bic.w	r3, r3, #35	; 0x23
    f868:	f043 0323 	orr.w	r3, r3, #35	; 0x23
    f86c:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
    f86e:	7a23      	ldrb	r3, [r4, #8]
    f870:	f023 0307 	bic.w	r3, r3, #7
    f874:	f043 0307 	orr.w	r3, r3, #7
    f878:	7223      	strb	r3, [r4, #8]
		return 0;
    f87a:	2000      	movs	r0, #0
    f87c:	e7df      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    f87e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    f882:	4832      	ldr	r0, [pc, #200]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
    f884:	3317      	adds	r3, #23
    f886:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
    f88a:	f7f0 ff71 	bl	770 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
    f88e:	e7d6      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		*param_length_out +=
    f890:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    f894:	482d      	ldr	r0, [pc, #180]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out +=
    f896:	3320      	adds	r3, #32
    f898:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
    f89c:	f7f0 ff20 	bl	6e0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
    f8a0:	e7cd      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
    f8a2:	f7f9 f904 	bl	8aae <sdc_hci_cmd_vs_zephyr_write_bd_addr>
    f8a6:	e7ca      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    f8a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    f8ac:	4827      	ldr	r0, [pc, #156]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
    f8ae:	3301      	adds	r3, #1
    f8b0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
    f8b4:	f7f9 f8e7 	bl	8a86 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
    f8b8:	e7c1      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    f8ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f8be:	4823      	ldr	r0, [pc, #140]	; (f94c <hci_internal_cmd_put+0x5b4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    f8c0:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
    f8c2:	2202      	movs	r2, #2
    f8c4:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
    f8c6:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
    f8ca:	f005 fed2 	bl	15672 <memset>
	cmds->read_supported_vs_commands = 1;
    f8ce:	79e3      	ldrb	r3, [r4, #7]
    f8d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    f8d4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
    f8d8:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
    f8da:	e7ce      	b.n	f87a <hci_internal_cmd_put+0x4e2>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
    f8dc:	f7f9 f8cc 	bl	8a78 <sdc_hci_cmd_vs_llpm_mode_set>
    f8e0:	e7ad      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
    f8e2:	f7f9 f89d 	bl	8a20 <sdc_hci_cmd_vs_conn_update>
    f8e6:	e7aa      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
    f8e8:	f7f9 f892 	bl	8a10 <sdc_hci_cmd_vs_conn_event_extend>
    f8ec:	e7a7      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
    f8ee:	f7f9 f8c5 	bl	8a7c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
    f8f2:	e7a4      	b.n	f83e <hci_internal_cmd_put+0x4a6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
    f8f4:	f7f9 f8be 	bl	8a74 <sdc_hci_cmd_vs_event_length_set>
    f8f8:	e7a1      	b.n	f83e <hci_internal_cmd_put+0x4a6>
	switch (hci_opcode) {
    f8fa:	f242 030c 	movw	r3, #8204	; 0x200c
    f8fe:	429d      	cmp	r5, r3
    f900:	d80a      	bhi.n	f918 <hci_internal_cmd_put+0x580>
		return 0;
    f902:	2000      	movs	r0, #0
    f904:	e68e      	b.n	f624 <hci_internal_cmd_put+0x28c>
	switch (hci_opcode) {
    f906:	4a12      	ldr	r2, [pc, #72]	; (f950 <hci_internal_cmd_put+0x5b8>)
    f908:	3b2d      	subs	r3, #45	; 0x2d
    f90a:	b29b      	uxth	r3, r3
    f90c:	fa22 f303 	lsr.w	r3, r2, r3
    f910:	07da      	lsls	r2, r3, #31
    f912:	f57f adae 	bpl.w	f472 <hci_internal_cmd_put+0xda>
    f916:	e57f      	b.n	f418 <hci_internal_cmd_put+0x80>
		return 0;
    f918:	2000      	movs	r0, #0
    f91a:	e6c3      	b.n	f6a4 <hci_internal_cmd_put+0x30c>
    f91c:	2000      	movs	r0, #0
	switch (hci_opcode) {
    f91e:	f242 0385 	movw	r3, #8325	; 0x2085
    f922:	429d      	cmp	r5, r3
    f924:	d88b      	bhi.n	f83e <hci_internal_cmd_put+0x4a6>
    f926:	f242 036c 	movw	r3, #8300	; 0x206c
    f92a:	429d      	cmp	r5, r3
    f92c:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
    f930:	d8e9      	bhi.n	f906 <hci_internal_cmd_put+0x56e>
    f932:	3b03      	subs	r3, #3
    f934:	b29b      	uxth	r3, r3
    f936:	2b01      	cmp	r3, #1
    f938:	f67f aebe 	bls.w	f6b8 <hci_internal_cmd_put+0x320>
    f93c:	e599      	b.n	f472 <hci_internal_cmd_put+0xda>
    f93e:	2001      	movs	r0, #1
    f940:	e7ed      	b.n	f91e <hci_internal_cmd_put+0x586>
		return -NRF_EPERM;
    f942:	f04f 30ff 	mov.w	r0, #4294967295
    f946:	e611      	b.n	f56c <hci_internal_cmd_put+0x1d4>
    f948:	03001241 	.word	0x03001241
    f94c:	20002fcb 	.word	0x20002fcb
    f950:	01000401 	.word	0x01000401

0000f954 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
    f954:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
    f956:	4c09      	ldr	r4, [pc, #36]	; (f97c <hci_internal_msg_get+0x28>)
    f958:	7823      	ldrb	r3, [r4, #0]
{
    f95a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
    f95c:	b91b      	cbnz	r3, f966 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
    f95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
    f962:	f7f9 b840 	b.w	89e6 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
    f966:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
    f968:	1c61      	adds	r1, r4, #1
    f96a:	3202      	adds	r2, #2
    f96c:	f005 fe76 	bl	1565c <memcpy>
		cmd_complete_or_status.occurred = false;
    f970:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    f972:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
    f974:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
    f976:	702b      	strb	r3, [r5, #0]
}
    f978:	bd38      	pop	{r3, r4, r5, pc}
    f97a:	bf00      	nop
    f97c:	20002fc4 	.word	0x20002fc4

0000f980 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
    f980:	b570      	push	{r4, r5, r6, lr}
    f982:	4605      	mov	r5, r0
    f984:	460e      	mov	r6, r1
    f986:	4c08      	ldr	r4, [pc, #32]	; (f9a8 <bt_rand+0x28>)
    f988:	4620      	mov	r0, r4
    f98a:	f006 feb4 	bl	166f6 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
    f98e:	b138      	cbz	r0, f9a0 <bt_rand+0x20>
    f990:	68a3      	ldr	r3, [r4, #8]
    f992:	b2b2      	uxth	r2, r6
    f994:	4629      	mov	r1, r5
    f996:	4620      	mov	r0, r4
    f998:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
    f99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f99e:	4718      	bx	r3
    f9a0:	f06f 0012 	mvn.w	r0, #18
    f9a4:	bd70      	pop	{r4, r5, r6, pc}
    f9a6:	bf00      	nop
    f9a8:	0001713c 	.word	0x0001713c

0000f9ac <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
    f9ac:	4901      	ldr	r1, [pc, #4]	; (f9b4 <mpsl_low_prio_irq_handler+0x8>)
    f9ae:	4802      	ldr	r0, [pc, #8]	; (f9b8 <mpsl_low_prio_irq_handler+0xc>)
    f9b0:	f007 b890 	b.w	16ad4 <k_work_submit_to_queue>
    f9b4:	200021c0 	.word	0x200021c0
    f9b8:	200018d8 	.word	0x200018d8

0000f9bc <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
    f9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
    f9be:	2332      	movs	r3, #50	; 0x32
    f9c0:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f9c4:	4a10      	ldr	r2, [pc, #64]	; (fa08 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
    f9c6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
    f9c8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f9ca:	2119      	movs	r1, #25
    f9cc:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
    f9ce:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
    f9d2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
    f9d6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
    f9da:	f7f8 f9c5 	bl	7d68 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
    f9de:	4604      	mov	r4, r0
    f9e0:	b970      	cbnz	r0, fa00 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    f9e2:	4601      	mov	r1, r0
    f9e4:	462a      	mov	r2, r5
    f9e6:	2008      	movs	r0, #8
    f9e8:	f7fb fe88 	bl	b6fc <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    f9ec:	462a      	mov	r2, r5
    f9ee:	4621      	mov	r1, r4
    f9f0:	200b      	movs	r0, #11
    f9f2:	f7fb fe83 	bl	b6fc <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
    f9f6:	462a      	mov	r2, r5
    f9f8:	4621      	mov	r1, r4
    f9fa:	4628      	mov	r0, r5
    f9fc:	f7fb fe7e 	bl	b6fc <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
    fa00:	4620      	mov	r0, r4
    fa02:	b003      	add	sp, #12
    fa04:	bd30      	pop	{r4, r5, pc}
    fa06:	bf00      	nop
    fa08:	00016421 	.word	0x00016421

0000fa0c <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
    fa0c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
    fa0e:	4d0d      	ldr	r5, [pc, #52]	; (fa44 <mpsl_low_prio_init+0x38>)
    fa10:	490d      	ldr	r1, [pc, #52]	; (fa48 <mpsl_low_prio_init+0x3c>)
    fa12:	2400      	movs	r4, #0
    fa14:	9400      	str	r4, [sp, #0]
    fa16:	f06f 0309 	mvn.w	r3, #9
    fa1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    fa1e:	4628      	mov	r0, r5
    fa20:	f002 f85c 	bl	11adc <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    fa24:	4909      	ldr	r1, [pc, #36]	; (fa4c <mpsl_low_prio_init+0x40>)
    fa26:	4628      	mov	r0, r5
    fa28:	f006 ff54 	bl	168d4 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
    fa2c:	4908      	ldr	r1, [pc, #32]	; (fa50 <mpsl_low_prio_init+0x44>)
    fa2e:	4809      	ldr	r0, [pc, #36]	; (fa54 <mpsl_low_prio_init+0x48>)
    fa30:	f007 f833 	bl	16a9a <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
    fa34:	4622      	mov	r2, r4
    fa36:	2104      	movs	r1, #4
    fa38:	2019      	movs	r0, #25
    fa3a:	f7fb fe5f 	bl	b6fc <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
    fa3e:	4620      	mov	r0, r4
    fa40:	b003      	add	sp, #12
    fa42:	bd30      	pop	{r4, r5, pc}
    fa44:	200018d8 	.word	0x200018d8
    fa48:	20004300 	.word	0x20004300
    fa4c:	00017e33 	.word	0x00017e33
    fa50:	0001644d 	.word	0x0001644d
    fa54:	200021c0 	.word	0x200021c0

0000fa58 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    fa58:	4b01      	ldr	r3, [pc, #4]	; (fa60 <mpsl_hfclk_callback+0x8>)
    fa5a:	2000      	movs	r0, #0
    fa5c:	681b      	ldr	r3, [r3, #0]
    fa5e:	4718      	bx	r3
    fa60:	200021d0 	.word	0x200021d0

0000fa64 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
    fa64:	b120      	cbz	r0, fa70 <nrfx_clock_start+0xc>
    fa66:	2801      	cmp	r0, #1
    fa68:	d106      	bne.n	fa78 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
    fa6a:	4804      	ldr	r0, [pc, #16]	; (fa7c <nrfx_clock_start+0x18>)
    fa6c:	f7f7 bffc 	b.w	7a68 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    fa70:	4b03      	ldr	r3, [pc, #12]	; (fa80 <nrfx_clock_start+0x1c>)
    fa72:	2001      	movs	r0, #1
    fa74:	681b      	ldr	r3, [r3, #0]
    fa76:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
    fa78:	4770      	bx	lr
    fa7a:	bf00      	nop
    fa7c:	0000fa59 	.word	0x0000fa59
    fa80:	200021d0 	.word	0x200021d0

0000fa84 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
    fa84:	4b01      	ldr	r3, [pc, #4]	; (fa8c <nrfx_clock_init+0x8>)
    fa86:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
    fa88:	4801      	ldr	r0, [pc, #4]	; (fa90 <nrfx_clock_init+0xc>)
    fa8a:	4770      	bx	lr
    fa8c:	200021d0 	.word	0x200021d0
    fa90:	0bad0000 	.word	0x0bad0000

0000fa94 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fa94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    fa98:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    fa9c:	2a08      	cmp	r2, #8
    fa9e:	d106      	bne.n	faae <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    faa0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    faa4:	2b05      	cmp	r3, #5
    faa6:	d802      	bhi.n	faae <nrf52_errata_103+0x1a>
    faa8:	4a02      	ldr	r2, [pc, #8]	; (fab4 <nrf52_errata_103+0x20>)
    faaa:	5cd0      	ldrb	r0, [r2, r3]
    faac:	4770      	bx	lr
                        return false;
    faae:	2000      	movs	r0, #0
}
    fab0:	4770      	bx	lr
    fab2:	bf00      	nop
    fab4:	00017e4d 	.word	0x00017e4d

0000fab8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    fab8:	4a02      	ldr	r2, [pc, #8]	; (fac4 <nvmc_wait+0xc>)
    faba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    fabe:	2b00      	cmp	r3, #0
    fac0:	d0fb      	beq.n	faba <nvmc_wait+0x2>
}
    fac2:	4770      	bx	lr
    fac4:	4001e000 	.word	0x4001e000

0000fac8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    fac8:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    faca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    face:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    fad2:	2a08      	cmp	r2, #8
    fad4:	d14e      	bne.n	fb74 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    fad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    fada:	2100      	movs	r1, #0
    fadc:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    fae0:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    fae4:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    fae8:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    faec:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    faf0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    faf4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    faf8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    fafc:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    fb00:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    fb04:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    fb08:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    fb0c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    fb10:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    fb14:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    fb18:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    fb1c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    fb20:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    fb24:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    fb28:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    fb2c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    fb30:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    fb34:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    fb38:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    fb3c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    fb40:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    fb44:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    fb48:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    fb4c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    fb50:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    fb54:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    fb58:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    fb5c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    fb60:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    fb64:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    fb68:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    fb6c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    fb70:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    fb74:	f7ff ff8e 	bl	fa94 <nrf52_errata_103>
    fb78:	b118      	cbz	r0, fb82 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    fb7a:	4b3a      	ldr	r3, [pc, #232]	; (fc64 <SystemInit+0x19c>)
    fb7c:	4a3a      	ldr	r2, [pc, #232]	; (fc68 <SystemInit+0x1a0>)
    fb7e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    fb82:	f7ff ff87 	bl	fa94 <nrf52_errata_103>
    fb86:	b118      	cbz	r0, fb90 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    fb88:	4b38      	ldr	r3, [pc, #224]	; (fc6c <SystemInit+0x1a4>)
    fb8a:	22fb      	movs	r2, #251	; 0xfb
    fb8c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    fb90:	f7ff ff80 	bl	fa94 <nrf52_errata_103>
    fb94:	b170      	cbz	r0, fbb4 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    fb96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    fb9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fb9e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    fba2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    fba6:	f022 020f 	bic.w	r2, r2, #15
    fbaa:	f003 030f 	and.w	r3, r3, #15
    fbae:	4313      	orrs	r3, r2
    fbb0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    fbb4:	f7ff ff6e 	bl	fa94 <nrf52_errata_103>
    fbb8:	b120      	cbz	r0, fbc4 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    fbba:	4b2d      	ldr	r3, [pc, #180]	; (fc70 <SystemInit+0x1a8>)
    fbbc:	f44f 7200 	mov.w	r2, #512	; 0x200
    fbc0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    fbc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    fbc8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    fbcc:	2b08      	cmp	r3, #8
    fbce:	d11a      	bne.n	fc06 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    fbd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fbd4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    fbd8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    fbda:	bf44      	itt	mi
    fbdc:	f06f 0201 	mvnmi.w	r2, #1
    fbe0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    fbe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    fbe8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    fbec:	2b05      	cmp	r3, #5
    fbee:	d802      	bhi.n	fbf6 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    fbf0:	4a20      	ldr	r2, [pc, #128]	; (fc74 <SystemInit+0x1ac>)
    fbf2:	5cd3      	ldrb	r3, [r2, r3]
    fbf4:	b13b      	cbz	r3, fc06 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    fbf6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    fbfa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    fbfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fc02:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    fc06:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    fc0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    fc0e:	2a00      	cmp	r2, #0
    fc10:	db03      	blt.n	fc1a <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    fc12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    fc16:	2b00      	cmp	r3, #0
    fc18:	da22      	bge.n	fc60 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    fc1a:	4917      	ldr	r1, [pc, #92]	; (fc78 <SystemInit+0x1b0>)
    fc1c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fc1e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    fc22:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fc26:	2412      	movs	r4, #18
    nvmc_wait();
    fc28:	f7ff ff46 	bl	fab8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    fc2c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    fc30:	f7ff ff42 	bl	fab8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    fc34:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    fc38:	f7ff ff3e 	bl	fab8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    fc3c:	2300      	movs	r3, #0
    fc3e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    fc42:	f7ff ff39 	bl	fab8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    fc46:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    fc4a:	490c      	ldr	r1, [pc, #48]	; (fc7c <SystemInit+0x1b4>)
    fc4c:	4b0c      	ldr	r3, [pc, #48]	; (fc80 <SystemInit+0x1b8>)
    fc4e:	68ca      	ldr	r2, [r1, #12]
    fc50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    fc54:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    fc56:	60cb      	str	r3, [r1, #12]
    fc58:	f3bf 8f4f 	dsb	sy
    __NOP();
    fc5c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    fc5e:	e7fd      	b.n	fc5c <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    fc60:	bd10      	pop	{r4, pc}
    fc62:	bf00      	nop
    fc64:	40005000 	.word	0x40005000
    fc68:	00038148 	.word	0x00038148
    fc6c:	4000f000 	.word	0x4000f000
    fc70:	40029000 	.word	0x40029000
    fc74:	00017e47 	.word	0x00017e47
    fc78:	4001e000 	.word	0x4001e000
    fc7c:	e000ed00 	.word	0xe000ed00
    fc80:	05fa0004 	.word	0x05fa0004

0000fc84 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    fc84:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    fc86:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    fc88:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    fc8a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    fc8e:	fab2 f382 	clz	r3, r2
    fc92:	f1c3 031f 	rsb	r3, r3, #31
    fc96:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    fc98:	fa05 f403 	lsl.w	r4, r5, r3
    fc9c:	ea22 0404 	bic.w	r4, r2, r4
    fca0:	e850 6f00 	ldrex	r6, [r0]
    fca4:	4296      	cmp	r6, r2
    fca6:	d104      	bne.n	fcb2 <nrfx_flag32_alloc+0x2e>
    fca8:	e840 4c00 	strex	ip, r4, [r0]
    fcac:	f1bc 0f00 	cmp.w	ip, #0
    fcb0:	d1f6      	bne.n	fca0 <nrfx_flag32_alloc+0x1c>
    fcb2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    fcb6:	d1e7      	bne.n	fc88 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    fcb8:	4801      	ldr	r0, [pc, #4]	; (fcc0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    fcba:	700b      	strb	r3, [r1, #0]
}
    fcbc:	bd70      	pop	{r4, r5, r6, pc}
    fcbe:	bf00      	nop
    fcc0:	0bad0000 	.word	0x0bad0000

0000fcc4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    fcc4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    fcc6:	6803      	ldr	r3, [r0, #0]
    fcc8:	40cb      	lsrs	r3, r1
    fcca:	07db      	lsls	r3, r3, #31
    fccc:	d414      	bmi.n	fcf8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    fcce:	2301      	movs	r3, #1
    fcd0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    fcd2:	6802      	ldr	r2, [r0, #0]
    fcd4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    fcd8:	ea43 0102 	orr.w	r1, r3, r2
    fcdc:	e850 4f00 	ldrex	r4, [r0]
    fce0:	4294      	cmp	r4, r2
    fce2:	d104      	bne.n	fcee <nrfx_flag32_free+0x2a>
    fce4:	e840 1c00 	strex	ip, r1, [r0]
    fce8:	f1bc 0f00 	cmp.w	ip, #0
    fcec:	d1f6      	bne.n	fcdc <nrfx_flag32_free+0x18>
    fcee:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    fcf2:	d1ee      	bne.n	fcd2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    fcf4:	4801      	ldr	r0, [pc, #4]	; (fcfc <nrfx_flag32_free+0x38>)
}
    fcf6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    fcf8:	4801      	ldr	r0, [pc, #4]	; (fd00 <nrfx_flag32_free+0x3c>)
    fcfa:	e7fc      	b.n	fcf6 <nrfx_flag32_free+0x32>
    fcfc:	0bad0000 	.word	0x0bad0000
    fd00:	0bad0004 	.word	0x0bad0004

0000fd04 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    fd04:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    fd06:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    fd0a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    fd0c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    fd0e:	6002      	str	r2, [r0, #0]
}
    fd10:	4802      	ldr	r0, [pc, #8]	; (fd1c <nrf_gpio_pin_port_decode+0x18>)
    fd12:	bf18      	it	ne
    fd14:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    fd18:	4770      	bx	lr
    fd1a:	bf00      	nop
    fd1c:	50000300 	.word	0x50000300

0000fd20 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    fd20:	4b03      	ldr	r3, [pc, #12]	; (fd30 <pin_in_use_by_te+0x10>)
    fd22:	3008      	adds	r0, #8
    fd24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    fd28:	f3c0 1040 	ubfx	r0, r0, #5, #1
    fd2c:	4770      	bx	lr
    fd2e:	bf00      	nop
    fd30:	20000510 	.word	0x20000510

0000fd34 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    fd34:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    fd36:	f100 0308 	add.w	r3, r0, #8
    fd3a:	4c0c      	ldr	r4, [pc, #48]	; (fd6c <call_handler+0x38>)
    fd3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    fd40:	05da      	lsls	r2, r3, #23
{
    fd42:	4605      	mov	r5, r0
    fd44:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    fd46:	d507      	bpl.n	fd58 <call_handler+0x24>
    fd48:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    fd4c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    fd50:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    fd54:	6852      	ldr	r2, [r2, #4]
    fd56:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    fd58:	68a3      	ldr	r3, [r4, #8]
    fd5a:	b12b      	cbz	r3, fd68 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    fd5c:	68e2      	ldr	r2, [r4, #12]
    fd5e:	4631      	mov	r1, r6
    fd60:	4628      	mov	r0, r5
    }
}
    fd62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    fd66:	4718      	bx	r3
}
    fd68:	bd70      	pop	{r4, r5, r6, pc}
    fd6a:	bf00      	nop
    fd6c:	20000510 	.word	0x20000510

0000fd70 <release_handler>:
{
    fd70:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    fd72:	4a12      	ldr	r2, [pc, #72]	; (fdbc <release_handler+0x4c>)
    fd74:	3008      	adds	r0, #8
    fd76:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    fd7a:	05d9      	lsls	r1, r3, #23
    fd7c:	d51b      	bpl.n	fdb6 <release_handler+0x46>
    fd7e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    fd82:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    fd86:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    fd8a:	f102 040e 	add.w	r4, r2, #14
    fd8e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    fd90:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    fd94:	f413 7f80 	tst.w	r3, #256	; 0x100
    fd98:	d003      	beq.n	fda2 <release_handler+0x32>
    fd9a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    fd9e:	4299      	cmp	r1, r3
    fda0:	d009      	beq.n	fdb6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    fda2:	3001      	adds	r0, #1
    fda4:	2830      	cmp	r0, #48	; 0x30
    fda6:	d1f3      	bne.n	fd90 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    fda8:	2300      	movs	r3, #0
    fdaa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    fdae:	4804      	ldr	r0, [pc, #16]	; (fdc0 <release_handler+0x50>)
}
    fdb0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    fdb2:	f7ff bf87 	b.w	fcc4 <nrfx_flag32_free>
}
    fdb6:	bc10      	pop	{r4}
    fdb8:	4770      	bx	lr
    fdba:	bf00      	nop
    fdbc:	20000510 	.word	0x20000510
    fdc0:	20000584 	.word	0x20000584

0000fdc4 <pin_handler_trigger_uninit>:
{
    fdc4:	b538      	push	{r3, r4, r5, lr}
    fdc6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    fdc8:	f7ff ffaa 	bl	fd20 <pin_in_use_by_te>
    fdcc:	4c09      	ldr	r4, [pc, #36]	; (fdf4 <pin_handler_trigger_uninit+0x30>)
    fdce:	f102 0508 	add.w	r5, r2, #8
    fdd2:	b140      	cbz	r0, fde6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    fdd4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    fdd8:	4907      	ldr	r1, [pc, #28]	; (fdf8 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    fdda:	0b5b      	lsrs	r3, r3, #13
    fddc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    fde0:	2000      	movs	r0, #0
    fde2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    fde6:	4610      	mov	r0, r2
    fde8:	f7ff ffc2 	bl	fd70 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    fdec:	2300      	movs	r3, #0
    fdee:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    fdf2:	bd38      	pop	{r3, r4, r5, pc}
    fdf4:	20000510 	.word	0x20000510
    fdf8:	40006000 	.word	0x40006000

0000fdfc <nrfx_gpiote_input_configure>:
{
    fdfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    fe00:	4604      	mov	r4, r0
    fe02:	4616      	mov	r6, r2
    fe04:	461d      	mov	r5, r3
    if (p_input_config)
    fe06:	b301      	cbz	r1, fe4a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fe08:	4f4e      	ldr	r7, [pc, #312]	; (ff44 <nrfx_gpiote_input_configure+0x148>)
    fe0a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    fe0e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    fe12:	079b      	lsls	r3, r3, #30
    fe14:	d502      	bpl.n	fe1c <nrfx_gpiote_input_configure+0x20>
    fe16:	f7ff ff83 	bl	fd20 <pin_in_use_by_te>
    fe1a:	bb10      	cbnz	r0, fe62 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    fe1c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    fe1e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    fe22:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    fe26:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    fe2a:	f10d 020f 	add.w	r2, sp, #15
    fe2e:	460b      	mov	r3, r1
    fe30:	4620      	mov	r0, r4
    fe32:	f10d 010e 	add.w	r1, sp, #14
    fe36:	f006 fb4d 	bl	164d4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    fe3a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    fe3e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    fe42:	f043 0301 	orr.w	r3, r3, #1
    fe46:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    fe4a:	b346      	cbz	r6, fe9e <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fe4c:	4b3d      	ldr	r3, [pc, #244]	; (ff44 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    fe4e:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    fe52:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    fe54:	f104 0708 	add.w	r7, r4, #8
    fe58:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    fe5c:	0788      	lsls	r0, r1, #30
    fe5e:	d502      	bpl.n	fe66 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    fe60:	b1aa      	cbz	r2, fe8e <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    fe62:	4839      	ldr	r0, [pc, #228]	; (ff48 <nrfx_gpiote_input_configure+0x14c>)
    fe64:	e01d      	b.n	fea2 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    fe66:	f021 0120 	bic.w	r1, r1, #32
    fe6a:	04c9      	lsls	r1, r1, #19
    fe6c:	0cc9      	lsrs	r1, r1, #19
    fe6e:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    fe72:	b162      	cbz	r2, fe8e <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    fe74:	f1bc 0f03 	cmp.w	ip, #3
    fe78:	d8f3      	bhi.n	fe62 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    fe7a:	6872      	ldr	r2, [r6, #4]
    fe7c:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    fe7e:	f1bc 0f00 	cmp.w	ip, #0
    fe82:	d111      	bne.n	fea8 <nrfx_gpiote_input_configure+0xac>
    fe84:	4a31      	ldr	r2, [pc, #196]	; (ff4c <nrfx_gpiote_input_configure+0x150>)
    fe86:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    fe8a:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    fe8e:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    fe92:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    fe96:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    fe9a:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    fe9e:	bb45      	cbnz	r5, fef2 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    fea0:	482b      	ldr	r0, [pc, #172]	; (ff50 <nrfx_gpiote_input_configure+0x154>)
}
    fea2:	b004      	add	sp, #16
    fea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    fea8:	00b2      	lsls	r2, r6, #2
    feaa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    feae:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    feb2:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    feb6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    feba:	f020 0003 	bic.w	r0, r0, #3
    febe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    fec2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    fec6:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    feca:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    fece:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fed2:	0220      	lsls	r0, r4, #8
    fed4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    fed8:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    fedc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    fee0:	ea40 000e 	orr.w	r0, r0, lr
    fee4:	f041 0120 	orr.w	r1, r1, #32
    fee8:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    feec:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    fef0:	e7cd      	b.n	fe8e <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    fef2:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    fef6:	4620      	mov	r0, r4
    fef8:	f7ff ff3a 	bl	fd70 <release_handler>
    if (!handler)
    fefc:	2e00      	cmp	r6, #0
    fefe:	d0cf      	beq.n	fea0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ff00:	4d10      	ldr	r5, [pc, #64]	; (ff44 <nrfx_gpiote_input_configure+0x148>)
    ff02:	e9d5 2300 	ldrd	r2, r3, [r5]
    ff06:	4296      	cmp	r6, r2
    ff08:	d101      	bne.n	ff0e <nrfx_gpiote_input_configure+0x112>
    ff0a:	429f      	cmp	r7, r3
    ff0c:	d018      	beq.n	ff40 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    ff0e:	4811      	ldr	r0, [pc, #68]	; (ff54 <nrfx_gpiote_input_configure+0x158>)
    ff10:	f10d 010f 	add.w	r1, sp, #15
    ff14:	f7ff feb6 	bl	fc84 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    ff18:	4b0d      	ldr	r3, [pc, #52]	; (ff50 <nrfx_gpiote_input_configure+0x154>)
    ff1a:	4298      	cmp	r0, r3
    ff1c:	d1c1      	bne.n	fea2 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    ff1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    ff22:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    ff26:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    ff2a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    ff2c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    ff2e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    ff32:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    ff36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ff3a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    ff3e:	e7af      	b.n	fea0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    ff40:	2200      	movs	r2, #0
    ff42:	e7ee      	b.n	ff22 <nrfx_gpiote_input_configure+0x126>
    ff44:	20000510 	.word	0x20000510
    ff48:	0bad0004 	.word	0x0bad0004
    ff4c:	40006000 	.word	0x40006000
    ff50:	0bad0000 	.word	0x0bad0000
    ff54:	20000584 	.word	0x20000584

0000ff58 <nrfx_gpiote_output_configure>:
{
    ff58:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff5a:	4604      	mov	r4, r0
    ff5c:	b085      	sub	sp, #20
    ff5e:	4615      	mov	r5, r2
    if (p_config)
    ff60:	b319      	cbz	r1, ffaa <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ff62:	4e33      	ldr	r6, [pc, #204]	; (10030 <nrfx_gpiote_output_configure+0xd8>)
    ff64:	f100 0708 	add.w	r7, r0, #8
    ff68:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    ff6c:	0793      	lsls	r3, r2, #30
    ff6e:	d403      	bmi.n	ff78 <nrfx_gpiote_output_configure+0x20>
    ff70:	f7ff fed6 	bl	fd20 <pin_in_use_by_te>
    ff74:	2800      	cmp	r0, #0
    ff76:	d158      	bne.n	1002a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    ff78:	f012 0f1c 	tst.w	r2, #28
    ff7c:	d002      	beq.n	ff84 <nrfx_gpiote_output_configure+0x2c>
    ff7e:	784b      	ldrb	r3, [r1, #1]
    ff80:	2b01      	cmp	r3, #1
    ff82:	d052      	beq.n	1002a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    ff84:	2301      	movs	r3, #1
    ff86:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    ff8a:	2300      	movs	r3, #0
    ff8c:	e9cd 1300 	strd	r1, r3, [sp]
    ff90:	1c4a      	adds	r2, r1, #1
    ff92:	1c8b      	adds	r3, r1, #2
    ff94:	4620      	mov	r0, r4
    ff96:	f10d 010f 	add.w	r1, sp, #15
    ff9a:	f006 fa9b 	bl	164d4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    ff9e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    ffa2:	f043 0303 	orr.w	r3, r3, #3
    ffa6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    ffaa:	b915      	cbnz	r5, ffb2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    ffac:	4821      	ldr	r0, [pc, #132]	; (10034 <nrfx_gpiote_output_configure+0xdc>)
}
    ffae:	b005      	add	sp, #20
    ffb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    ffb2:	4e1f      	ldr	r6, [pc, #124]	; (10030 <nrfx_gpiote_output_configure+0xd8>)
    ffb4:	f104 0708 	add.w	r7, r4, #8
    ffb8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    ffbc:	0783      	lsls	r3, r0, #30
    ffbe:	d534      	bpl.n	1002a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    ffc0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    ffc4:	4661      	mov	r1, ip
    ffc6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    ffc8:	f020 0020 	bic.w	r0, r0, #32
    ffcc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    ffd0:	04c0      	lsls	r0, r0, #19
    ffd2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    ffd6:	0cc0      	lsrs	r0, r0, #19
    ffd8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    ffdc:	2300      	movs	r3, #0
    ffde:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    ffe2:	786a      	ldrb	r2, [r5, #1]
    ffe4:	2a00      	cmp	r2, #0
    ffe6:	d0e1      	beq.n	ffac <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    ffe8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    ffec:	78ad      	ldrb	r5, [r5, #2]
    ffee:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    fff2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    fff6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    fffa:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    fffe:	0223      	lsls	r3, r4, #8
   10000:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   10004:	0412      	lsls	r2, r2, #16
   10006:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1000a:	ea43 030e 	orr.w	r3, r3, lr
   1000e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   10010:	052a      	lsls	r2, r5, #20
   10012:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   10016:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1001a:	4313      	orrs	r3, r2
   1001c:	f040 0020 	orr.w	r0, r0, #32
   10020:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   10024:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   10028:	e7c0      	b.n	ffac <nrfx_gpiote_output_configure+0x54>
{
   1002a:	4803      	ldr	r0, [pc, #12]	; (10038 <nrfx_gpiote_output_configure+0xe0>)
   1002c:	e7bf      	b.n	ffae <nrfx_gpiote_output_configure+0x56>
   1002e:	bf00      	nop
   10030:	20000510 	.word	0x20000510
   10034:	0bad0000 	.word	0x0bad0000
   10038:	0bad0004 	.word	0x0bad0004

0001003c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1003c:	4b01      	ldr	r3, [pc, #4]	; (10044 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1003e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   10042:	4770      	bx	lr
   10044:	20000510 	.word	0x20000510

00010048 <nrfx_gpiote_channel_get>:
{
   10048:	b508      	push	{r3, lr}
   1004a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1004c:	f7ff fe68 	bl	fd20 <pin_in_use_by_te>
   10050:	b138      	cbz	r0, 10062 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   10052:	4b05      	ldr	r3, [pc, #20]	; (10068 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   10054:	4805      	ldr	r0, [pc, #20]	; (1006c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   10056:	3208      	adds	r2, #8
   10058:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1005c:	0b5b      	lsrs	r3, r3, #13
   1005e:	700b      	strb	r3, [r1, #0]
}
   10060:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   10062:	4803      	ldr	r0, [pc, #12]	; (10070 <nrfx_gpiote_channel_get+0x28>)
   10064:	e7fc      	b.n	10060 <nrfx_gpiote_channel_get+0x18>
   10066:	bf00      	nop
   10068:	20000510 	.word	0x20000510
   1006c:	0bad0000 	.word	0x0bad0000
   10070:	0bad0004 	.word	0x0bad0004

00010074 <nrfx_gpiote_init>:
{
   10074:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   10076:	4c0f      	ldr	r4, [pc, #60]	; (100b4 <nrfx_gpiote_init+0x40>)
   10078:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1007c:	b9bd      	cbnz	r5, 100ae <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1007e:	2260      	movs	r2, #96	; 0x60
   10080:	4629      	mov	r1, r5
   10082:	f104 0010 	add.w	r0, r4, #16
   10086:	f005 faf4 	bl	15672 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1008a:	2006      	movs	r0, #6
   1008c:	f7fb fb06 	bl	b69c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10090:	4b09      	ldr	r3, [pc, #36]	; (100b8 <nrfx_gpiote_init+0x44>)
    return err_code;
   10092:	480a      	ldr	r0, [pc, #40]	; (100bc <nrfx_gpiote_init+0x48>)
   10094:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   10098:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1009c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   100a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   100a4:	2301      	movs	r3, #1
   100a6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   100aa:	6763      	str	r3, [r4, #116]	; 0x74
}
   100ac:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   100ae:	4804      	ldr	r0, [pc, #16]	; (100c0 <nrfx_gpiote_init+0x4c>)
   100b0:	e7fc      	b.n	100ac <nrfx_gpiote_init+0x38>
   100b2:	bf00      	nop
   100b4:	20000510 	.word	0x20000510
   100b8:	40006000 	.word	0x40006000
   100bc:	0bad0000 	.word	0x0bad0000
   100c0:	0bad0005 	.word	0x0bad0005

000100c4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   100c4:	4b03      	ldr	r3, [pc, #12]	; (100d4 <nrfx_gpiote_is_init+0x10>)
   100c6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   100ca:	3800      	subs	r0, #0
   100cc:	bf18      	it	ne
   100ce:	2001      	movne	r0, #1
   100d0:	4770      	bx	lr
   100d2:	bf00      	nop
   100d4:	20000510 	.word	0x20000510

000100d8 <nrfx_gpiote_channel_free>:
{
   100d8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   100da:	4801      	ldr	r0, [pc, #4]	; (100e0 <nrfx_gpiote_channel_free+0x8>)
   100dc:	f7ff bdf2 	b.w	fcc4 <nrfx_flag32_free>
   100e0:	20000580 	.word	0x20000580

000100e4 <nrfx_gpiote_channel_alloc>:
{
   100e4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   100e6:	4801      	ldr	r0, [pc, #4]	; (100ec <nrfx_gpiote_channel_alloc+0x8>)
   100e8:	f7ff bdcc 	b.w	fc84 <nrfx_flag32_alloc>
   100ec:	20000580 	.word	0x20000580

000100f0 <nrfx_gpiote_trigger_enable>:
{
   100f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   100f2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   100f4:	f7ff fe14 	bl	fd20 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   100f8:	f104 0208 	add.w	r2, r4, #8
   100fc:	4b1e      	ldr	r3, [pc, #120]	; (10178 <nrfx_gpiote_trigger_enable+0x88>)
   100fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   10102:	b1e8      	cbz	r0, 10140 <nrfx_gpiote_trigger_enable+0x50>
   10104:	f013 0502 	ands.w	r5, r3, #2
   10108:	d11a      	bne.n	10140 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1010a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1010c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1010e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   10112:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   10116:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1011a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1011e:	6005      	str	r5, [r0, #0]
   10120:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   10122:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   10126:	f040 0001 	orr.w	r0, r0, #1
   1012a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1012e:	b129      	cbz	r1, 1013c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   10130:	2201      	movs	r2, #1
   10132:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   10136:	4a11      	ldr	r2, [pc, #68]	; (1017c <nrfx_gpiote_trigger_enable+0x8c>)
   10138:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1013c:	b003      	add	sp, #12
   1013e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   10140:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   10144:	2b04      	cmp	r3, #4
   10146:	d012      	beq.n	1016e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   10148:	2b05      	cmp	r3, #5
   1014a:	d012      	beq.n	10172 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1014c:	a801      	add	r0, sp, #4
   1014e:	9401      	str	r4, [sp, #4]
   10150:	f7ff fdd8 	bl	fd04 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   10154:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   10156:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1015a:	40d9      	lsrs	r1, r3
   1015c:	f001 0101 	and.w	r1, r1, #1
   10160:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   10162:	4620      	mov	r0, r4
}
   10164:	b003      	add	sp, #12
   10166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1016a:	f006 b9fc 	b.w	16566 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1016e:	2103      	movs	r1, #3
   10170:	e7f7      	b.n	10162 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   10172:	2102      	movs	r1, #2
   10174:	e7f5      	b.n	10162 <nrfx_gpiote_trigger_enable+0x72>
   10176:	bf00      	nop
   10178:	20000510 	.word	0x20000510
   1017c:	40006000 	.word	0x40006000

00010180 <nrfx_gpiote_trigger_disable>:
{
   10180:	b508      	push	{r3, lr}
   10182:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   10184:	f7ff fdcc 	bl	fd20 <pin_in_use_by_te>
   10188:	b1c0      	cbz	r0, 101bc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1018a:	f102 0108 	add.w	r1, r2, #8
   1018e:	4b0e      	ldr	r3, [pc, #56]	; (101c8 <nrfx_gpiote_trigger_disable+0x48>)
   10190:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   10194:	0799      	lsls	r1, r3, #30
   10196:	d411      	bmi.n	101bc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   10198:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1019a:	2201      	movs	r2, #1
   1019c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1019e:	009b      	lsls	r3, r3, #2
   101a0:	490a      	ldr	r1, [pc, #40]	; (101cc <nrfx_gpiote_trigger_disable+0x4c>)
   101a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   101a6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   101aa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   101ae:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   101b2:	f022 0203 	bic.w	r2, r2, #3
   101b6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   101ba:	bd08      	pop	{r3, pc}
   101bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   101c0:	2100      	movs	r1, #0
   101c2:	4610      	mov	r0, r2
   101c4:	f006 b9cf 	b.w	16566 <nrf_gpio_cfg_sense_set>
   101c8:	20000510 	.word	0x20000510
   101cc:	40006000 	.word	0x40006000

000101d0 <nrfx_gpiote_pin_uninit>:
{
   101d0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   101d2:	4b0e      	ldr	r3, [pc, #56]	; (1020c <nrfx_gpiote_pin_uninit+0x3c>)
   101d4:	f100 0208 	add.w	r2, r0, #8
{
   101d8:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   101da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   101de:	07db      	lsls	r3, r3, #31
   101e0:	d511      	bpl.n	10206 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   101e2:	f7ff ffcd 	bl	10180 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   101e6:	4620      	mov	r0, r4
   101e8:	f7ff fdec 	bl	fdc4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   101ec:	a801      	add	r0, sp, #4
   101ee:	9401      	str	r4, [sp, #4]
   101f0:	f7ff fd88 	bl	fd04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   101f4:	9b01      	ldr	r3, [sp, #4]
   101f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   101fa:	2202      	movs	r2, #2
   101fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   10200:	4803      	ldr	r0, [pc, #12]	; (10210 <nrfx_gpiote_pin_uninit+0x40>)
}
   10202:	b002      	add	sp, #8
   10204:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   10206:	4803      	ldr	r0, [pc, #12]	; (10214 <nrfx_gpiote_pin_uninit+0x44>)
   10208:	e7fb      	b.n	10202 <nrfx_gpiote_pin_uninit+0x32>
   1020a:	bf00      	nop
   1020c:	20000510 	.word	0x20000510
   10210:	0bad0000 	.word	0x0bad0000
   10214:	0bad0004 	.word	0x0bad0004

00010218 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   10218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1021c:	4b68      	ldr	r3, [pc, #416]	; (103c0 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1021e:	4869      	ldr	r0, [pc, #420]	; (103c4 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   10220:	4969      	ldr	r1, [pc, #420]	; (103c8 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   10222:	2600      	movs	r6, #0
{
   10224:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   10226:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10228:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1022a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1022c:	b135      	cbz	r5, 1023c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1022e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   10232:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10234:	bf1e      	ittt	ne
   10236:	601c      	strne	r4, [r3, #0]
   10238:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1023a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1023c:	3304      	adds	r3, #4
   1023e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   10240:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   10244:	d1f1      	bne.n	1022a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10246:	f8df 917c 	ldr.w	r9, [pc, #380]	; 103c4 <nrfx_gpiote_irq_handler+0x1ac>
   1024a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1024e:	2b00      	cmp	r3, #0
   10250:	f000 8099 	beq.w	10386 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   10254:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   10258:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1025c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1025e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   10262:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   10266:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   10268:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1026c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   10270:	f10d 0a10 	add.w	sl, sp, #16
   10274:	ea4f 1348 	mov.w	r3, r8, lsl #5
   10278:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1027a:	f04f 0b01 	mov.w	fp, #1
   1027e:	e049      	b.n	10314 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   10280:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   10282:	4a52      	ldr	r2, [pc, #328]	; (103cc <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   10284:	fa94 f4a4 	rbit	r4, r4
   10288:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1028c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1028e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   10290:	f104 0308 	add.w	r3, r4, #8
   10294:	9403      	str	r4, [sp, #12]
   10296:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1029a:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1029e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   102a2:	fa0b f202 	lsl.w	r2, fp, r2
   102a6:	ea23 0302 	bic.w	r3, r3, r2
   102aa:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   102ae:	a803      	add	r0, sp, #12
   102b0:	f7ff fd28 	bl	fd04 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   102b4:	9b03      	ldr	r3, [sp, #12]
   102b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   102ba:	08b9      	lsrs	r1, r7, #2
   102bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   102c0:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   102c4:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   102c6:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   102c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   102cc:	d52c      	bpl.n	10328 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   102ce:	4620      	mov	r0, r4
   102d0:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   102d2:	b2dd      	uxtb	r5, r3
   102d4:	f7ff fd2e 	bl	fd34 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   102d8:	a803      	add	r0, sp, #12
   102da:	9403      	str	r4, [sp, #12]
   102dc:	f7ff fd12 	bl	fd04 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   102e0:	9b03      	ldr	r3, [sp, #12]
   102e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   102e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   102ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
   102ee:	429d      	cmp	r5, r3
   102f0:	d107      	bne.n	10302 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   102f2:	2100      	movs	r1, #0
   102f4:	4620      	mov	r0, r4
   102f6:	f006 f936 	bl	16566 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   102fa:	4629      	mov	r1, r5
   102fc:	4620      	mov	r0, r4
   102fe:	f006 f932 	bl	16566 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10302:	a803      	add	r0, sp, #12
   10304:	9403      	str	r4, [sp, #12]
   10306:	f7ff fcfd 	bl	fd04 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1030a:	9b03      	ldr	r3, [sp, #12]
   1030c:	fa0b f303 	lsl.w	r3, fp, r3
   10310:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   10314:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   10318:	2c00      	cmp	r4, #0
   1031a:	d1b1      	bne.n	10280 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1031c:	f1b8 0f00 	cmp.w	r8, #0
   10320:	d11d      	bne.n	1035e <nrfx_gpiote_irq_handler+0x146>
   10322:	f04f 0801 	mov.w	r8, #1
   10326:	e7a5      	b.n	10274 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   10328:	2b02      	cmp	r3, #2
   1032a:	d10c      	bne.n	10346 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1032c:	2103      	movs	r1, #3
   1032e:	4620      	mov	r0, r4
   10330:	f006 f919 	bl	16566 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   10334:	f005 0305 	and.w	r3, r5, #5
   10338:	2b01      	cmp	r3, #1
   1033a:	d1e2      	bne.n	10302 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1033c:	4639      	mov	r1, r7
   1033e:	4620      	mov	r0, r4
   10340:	f7ff fcf8 	bl	fd34 <call_handler>
   10344:	e7dd      	b.n	10302 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   10346:	2102      	movs	r1, #2
   10348:	4620      	mov	r0, r4
   1034a:	9301      	str	r3, [sp, #4]
   1034c:	f006 f90b 	bl	16566 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   10350:	2d03      	cmp	r5, #3
   10352:	d0f3      	beq.n	1033c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   10354:	9b01      	ldr	r3, [sp, #4]
   10356:	2b03      	cmp	r3, #3
   10358:	d1d3      	bne.n	10302 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1035a:	2d02      	cmp	r5, #2
   1035c:	e7ed      	b.n	1033a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1035e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   10362:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   10366:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1036a:	4919      	ldr	r1, [pc, #100]	; (103d0 <nrfx_gpiote_irq_handler+0x1b8>)
   1036c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   10370:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   10372:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   10376:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1037a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1037c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1037e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   10382:	f47f af73 	bne.w	1026c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   10386:	2401      	movs	r4, #1
    while (mask)
   10388:	b916      	cbnz	r6, 10390 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1038a:	b007      	add	sp, #28
   1038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   10390:	fa96 f3a6 	rbit	r3, r6
   10394:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   10398:	fa04 f203 	lsl.w	r2, r4, r3
   1039c:	009b      	lsls	r3, r3, #2
   1039e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   103a2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   103a6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   103aa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   103ae:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   103b2:	f3c0 2005 	ubfx	r0, r0, #8, #6
   103b6:	f3c1 4101 	ubfx	r1, r1, #16, #2
   103ba:	f7ff fcbb 	bl	fd34 <call_handler>
   103be:	e7e3      	b.n	10388 <nrfx_gpiote_irq_handler+0x170>
   103c0:	40006100 	.word	0x40006100
   103c4:	40006000 	.word	0x40006000
   103c8:	40006120 	.word	0x40006120
   103cc:	20000510 	.word	0x20000510
   103d0:	50000300 	.word	0x50000300

000103d4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   103d4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   103d6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   103da:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   103dc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   103de:	6002      	str	r2, [r0, #0]
}
   103e0:	4802      	ldr	r0, [pc, #8]	; (103ec <nrf_gpio_pin_port_decode+0x18>)
   103e2:	bf18      	it	ne
   103e4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   103e8:	4770      	bx	lr
   103ea:	bf00      	nop
   103ec:	50000300 	.word	0x50000300

000103f0 <nrfx_i2s_init>:
    }
}

nrfx_err_t nrfx_i2s_init(nrfx_i2s_config_t const * p_config,
                         nrfx_i2s_data_handler_t   handler)
{
   103f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(handler);

    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   103f4:	4d53      	ldr	r5, [pc, #332]	; (10544 <nrfx_i2s_init+0x154>)
   103f6:	792b      	ldrb	r3, [r5, #4]
{
   103f8:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   103fa:	2b00      	cmp	r3, #0
   103fc:	f040 80a0 	bne.w	10540 <nrfx_i2s_init+0x150>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (!nrf_i2s_configure(NRF_I2S0,
                           p_config->mode,
   10400:	7987      	ldrb	r7, [r0, #6]
                           p_config->format,
   10402:	f890 8007 	ldrb.w	r8, [r0, #7]
                           p_config->alignment,
   10406:	f890 e008 	ldrb.w	lr, [r0, #8]
                           p_config->sample_width,
   1040a:	7a46      	ldrb	r6, [r0, #9]
                           p_config->channels,
   1040c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                           p_config->mck_setup,
                           p_config->ratio))
   10410:	7c22      	ldrb	r2, [r4, #16]
                           p_config->mck_setup,
   10412:	68c0      	ldr	r0, [r0, #12]
                                         nrf_i2s_swidth_t   sample_width,
                                         nrf_i2s_channels_t channels,
                                         nrf_i2s_mck_t      mck_setup,
                                         nrf_i2s_ratio_t    ratio)
{
    if (mode == NRF_I2S_MODE_MASTER)
   10414:	b977      	cbnz	r7, 10434 <nrfx_i2s_init+0x44>
    {
        // The MCK/LRCK ratio must be a multiple of 2 * sample width.
        if (((sample_width == NRF_I2S_SWIDTH_16BIT) &&
   10416:	2e01      	cmp	r6, #1
   10418:	d103      	bne.n	10422 <nrfx_i2s_init+0x32>
   1041a:	2a01      	cmp	r2, #1
   1041c:	d10a      	bne.n	10434 <nrfx_i2s_init+0x44>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   1041e:	484a      	ldr	r0, [pc, #296]	; (10548 <nrfx_i2s_init+0x158>)
   10420:	e071      	b.n	10506 <nrfx_i2s_init+0x116>
                 (ratio == NRF_I2S_RATIO_48X))
            ||
   10422:	2e02      	cmp	r6, #2
   10424:	d106      	bne.n	10434 <nrfx_i2s_init+0x44>
   10426:	2a08      	cmp	r2, #8
   10428:	d804      	bhi.n	10434 <nrfx_i2s_init+0x44>
   1042a:	f240 1355 	movw	r3, #341	; 0x155
   1042e:	40d3      	lsrs	r3, r2
   10430:	07db      	lsls	r3, r3, #31
   10432:	d4f4      	bmi.n	1041e <nrfx_i2s_init+0x2e>
        {
            return false;
        }
    }

    p_reg->CONFIG.MODE     = mode;
   10434:	4b45      	ldr	r3, [pc, #276]	; (1054c <nrfx_i2s_init+0x15c>)
   10436:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
    p_reg->CONFIG.FORMAT   = format;
   1043a:	f8c3 8524 	str.w	r8, [r3, #1316]	; 0x524
    p_reg->CONFIG.ALIGN    = alignment;
   1043e:	f8c3 e520 	str.w	lr, [r3, #1312]	; 0x520
    p_reg->CONFIG.SWIDTH   = sample_width;
   10442:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
    p_reg->CONFIG.CHANNELS = channels;
   10446:	f8c3 c528 	str.w	ip, [r3, #1320]	; 0x528
    p_reg->CONFIG.RATIO    = ratio;
   1044a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

    if (mck_setup == NRF_I2S_MCK_DISABLED)
   1044e:	2800      	cmp	r0, #0
   10450:	d15c      	bne.n	1050c <nrfx_i2s_init+0x11c>
    {
        p_reg->CONFIG.MCKEN =
   10452:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    if (!p_config->skip_gpio_cfg)
   10456:	7c66      	ldrb	r6, [r4, #17]
   10458:	b9fe      	cbnz	r6, 1049a <nrfx_i2s_init+0xaa>
        if (p_config->mode == NRF_I2S_MODE_MASTER)
   1045a:	79a3      	ldrb	r3, [r4, #6]
            nrf_gpio_cfg_output(p_config->sck_pin);
   1045c:	7820      	ldrb	r0, [r4, #0]
        if (p_config->mode == NRF_I2S_MODE_MASTER)
   1045e:	2b00      	cmp	r3, #0
   10460:	d15a      	bne.n	10518 <nrfx_i2s_init+0x128>
            nrf_gpio_cfg_output(p_config->sck_pin);
   10462:	f006 f88f 	bl	16584 <nrf_gpio_cfg_output>
            nrf_gpio_cfg_output(p_config->lrck_pin);
   10466:	7860      	ldrb	r0, [r4, #1]
   10468:	f006 f88c 	bl	16584 <nrf_gpio_cfg_output>
        if (p_config->mck_pin != NRFX_I2S_PIN_NOT_USED)
   1046c:	78a0      	ldrb	r0, [r4, #2]
   1046e:	28ff      	cmp	r0, #255	; 0xff
   10470:	d001      	beq.n	10476 <nrfx_i2s_init+0x86>
            nrf_gpio_cfg_output(p_config->mck_pin);
   10472:	f006 f887 	bl	16584 <nrf_gpio_cfg_output>
        if (p_config->sdout_pin != NRFX_I2S_PIN_NOT_USED)
   10476:	78e0      	ldrb	r0, [r4, #3]
   10478:	28ff      	cmp	r0, #255	; 0xff
   1047a:	d001      	beq.n	10480 <nrfx_i2s_init+0x90>
            nrf_gpio_cfg_output(p_config->sdout_pin);
   1047c:	f006 f882 	bl	16584 <nrf_gpio_cfg_output>
        if (p_config->sdin_pin != NRFX_I2S_PIN_NOT_USED)
   10480:	7923      	ldrb	r3, [r4, #4]
   10482:	2bff      	cmp	r3, #255	; 0xff
   10484:	d009      	beq.n	1049a <nrfx_i2s_init+0xaa>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10486:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->sdin_pin, NRF_GPIO_PIN_NOPULL);
   10488:	9301      	str	r3, [sp, #4]
   1048a:	f7ff ffa3 	bl	103d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1048e:	9b01      	ldr	r3, [sp, #4]
   10490:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10494:	2200      	movs	r2, #0
   10496:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1049a:	7ca3      	ldrb	r3, [r4, #18]
   1049c:	bb13      	cbnz	r3, 104e4 <nrfx_i2s_init+0xf4>
        uint32_t mck_pin = (p_config->mck_pin != NRFX_I2S_PIN_NOT_USED)
   1049e:	78a3      	ldrb	r3, [r4, #2]
        nrf_i2s_pins_set(NRF_I2S0,
   104a0:	f894 c000 	ldrb.w	ip, [r4]
   104a4:	7867      	ldrb	r7, [r4, #1]
                           : NRF_I2S_PIN_NOT_CONNECTED;
   104a6:	2bff      	cmp	r3, #255	; 0xff
   104a8:	bf18      	it	ne
   104aa:	461e      	movne	r6, r3
        uint32_t sdout_pin = (p_config->sdout_pin != NRFX_I2S_PIN_NOT_USED)
   104ac:	78e3      	ldrb	r3, [r4, #3]
                           : NRF_I2S_PIN_NOT_CONNECTED;
   104ae:	bf08      	it	eq
   104b0:	f04f 36ff 	moveq.w	r6, #4294967295
                             : NRF_I2S_PIN_NOT_CONNECTED;
   104b4:	2bff      	cmp	r3, #255	; 0xff
   104b6:	bf18      	it	ne
   104b8:	4618      	movne	r0, r3
        uint32_t sdin_pin = (p_config->sdin_pin != NRFX_I2S_PIN_NOT_USED)
   104ba:	7923      	ldrb	r3, [r4, #4]
                             : NRF_I2S_PIN_NOT_CONNECTED;
   104bc:	bf08      	it	eq
   104be:	f04f 30ff 	moveq.w	r0, #4294967295
                            : NRF_I2S_PIN_NOT_CONNECTED;
   104c2:	2bff      	cmp	r3, #255	; 0xff
   104c4:	bf18      	it	ne
   104c6:	461a      	movne	r2, r3
    p_reg->PSEL.SCK   = sck_pin;
   104c8:	4b20      	ldr	r3, [pc, #128]	; (1054c <nrfx_i2s_init+0x15c>)
   104ca:	bf08      	it	eq
   104cc:	f04f 32ff 	moveq.w	r2, #4294967295
   104d0:	f8c3 c564 	str.w	ip, [r3, #1380]	; 0x564
    p_reg->PSEL.LRCK  = lrck_pin;
   104d4:	f8c3 7568 	str.w	r7, [r3, #1384]	; 0x568
    p_reg->PSEL.MCK   = mck_pin;
   104d8:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->PSEL.SDOUT = sdout_pin;
   104dc:	f8c3 0570 	str.w	r0, [r3, #1392]	; 0x570
    p_reg->PSEL.SDIN  = sdin_pin;
   104e0:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    nrf_i2s_clk_configure(NRF_I2S0, p_config->clksrc, p_config->enable_bypass);
#endif

    configure_pins(p_config);

    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   104e4:	7c63      	ldrb	r3, [r4, #17]
   104e6:	7ca2      	ldrb	r2, [r4, #18]
    m_cb.skip_psel_cfg = p_config->skip_psel_cfg;
    m_cb.handler = handler;
   104e8:	6029      	str	r1, [r5, #0]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   104ea:	019b      	lsls	r3, r3, #6
   104ec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   104f0:	796a      	ldrb	r2, [r5, #5]
   104f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   104f6:	4313      	orrs	r3, r2

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_I2S0), p_config->irq_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_I2S0));
   104f8:	2025      	movs	r0, #37	; 0x25
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   104fa:	716b      	strb	r3, [r5, #5]
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_I2S0));
   104fc:	f7fb f8ce 	bl	b69c <arch_irq_enable>

    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   10500:	2301      	movs	r3, #1

    NRFX_LOG_INFO("Initialized.");
    return NRFX_SUCCESS;
   10502:	4813      	ldr	r0, [pc, #76]	; (10550 <nrfx_i2s_init+0x160>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   10504:	712b      	strb	r3, [r5, #4]
}
   10506:	b002      	add	sp, #8
   10508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            (I2S_CONFIG_MCKEN_MCKEN_Disabled << I2S_CONFIG_MCKEN_MCKEN_Pos);
    }
    else
    {
        p_reg->CONFIG.MCKFREQ = mck_setup;
        p_reg->CONFIG.MCKEN =
   1050c:	2201      	movs	r2, #1
        p_reg->CONFIG.MCKFREQ = mck_setup;
   1050e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
        p_reg->CONFIG.MCKEN =
   10512:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   10516:	e79e      	b.n	10456 <nrfx_i2s_init+0x66>
    nrf_gpio_cfg(
   10518:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1051a:	a801      	add	r0, sp, #4
   1051c:	f7ff ff5a 	bl	103d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10520:	9b01      	ldr	r3, [sp, #4]
   10522:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10526:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1052a:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->lrck_pin, NRF_GPIO_PIN_NOPULL);
   1052c:	7863      	ldrb	r3, [r4, #1]
   1052e:	9301      	str	r3, [sp, #4]
   10530:	f7ff ff50 	bl	103d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10534:	9b01      	ldr	r3, [sp, #4]
   10536:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1053a:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
}
   1053e:	e795      	b.n	1046c <nrfx_i2s_init+0x7c>
        return err_code;
   10540:	4804      	ldr	r0, [pc, #16]	; (10554 <nrfx_i2s_init+0x164>)
   10542:	e7e0      	b.n	10506 <nrfx_i2s_init+0x116>
   10544:	200021d4 	.word	0x200021d4
   10548:	0bad0004 	.word	0x0bad0004
   1054c:	40025000 	.word	0x40025000
   10550:	0bad0000 	.word	0x0bad0000
   10554:	0bad0005 	.word	0x0bad0005

00010558 <nrfx_i2s_start>:


nrfx_err_t nrfx_i2s_start(nrfx_i2s_buffers_t const * p_initial_buffers,
                          uint16_t                   buffer_size,
                          uint8_t                    flags)
{
   10558:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(buffer_size != 0);
    (void)(flags);

    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_INITIALIZED)
   1055a:	4a32      	ldr	r2, [pc, #200]	; (10624 <nrfx_i2s_start+0xcc>)
   1055c:	7913      	ldrb	r3, [r2, #4]
   1055e:	2b01      	cmp	r3, #1
{
   10560:	460e      	mov	r6, r1
    if (m_cb.state != NRFX_DRV_STATE_INITIALIZED)
   10562:	d15a      	bne.n	1061a <nrfx_i2s_start+0xc2>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (((p_initial_buffers->p_rx_buffer != NULL)
   10564:	6803      	ldr	r3, [r0, #0]
   10566:	b123      	cbz	r3, 10572 <nrfx_i2s_start+0x1a>
   10568:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_initial_buffers->p_rx_buffer))
   1056c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   10570:	d155      	bne.n	1061e <nrfx_i2s_start+0xc6>
        ||
        ((p_initial_buffers->p_tx_buffer != NULL)
   10572:	6841      	ldr	r1, [r0, #4]
        ||
   10574:	b121      	cbz	r1, 10580 <nrfx_i2s_start+0x28>
   10576:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_initial_buffers->p_tx_buffer)))
   1057a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1057e:	d14e      	bne.n	1061e <nrfx_i2s_start+0xc6>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_cb.use_rx         = (p_initial_buffers->p_rx_buffer != NULL);
   10580:	7951      	ldrb	r1, [r2, #5]
   10582:	3b00      	subs	r3, #0
   10584:	bf18      	it	ne
   10586:	2301      	movne	r3, #1
   10588:	f363 0100 	bfi	r1, r3, #0, #1
   1058c:	7151      	strb	r1, [r2, #5]
    m_cb.use_tx         = (p_initial_buffers->p_tx_buffer != NULL);
   1058e:	6843      	ldr	r3, [r0, #4]
    m_cb.rx_ready       = false;
    m_cb.tx_ready       = false;
    m_cb.buffers_needed = false;
    m_cb.buffer_size    = buffer_size;
   10590:	80d6      	strh	r6, [r2, #6]
    m_cb.use_tx         = (p_initial_buffers->p_tx_buffer != NULL);
   10592:	1e19      	subs	r1, r3, #0
   10594:	7953      	ldrb	r3, [r2, #5]
   10596:	bf18      	it	ne
   10598:	2101      	movne	r1, #1
   1059a:	f023 031e 	bic.w	r3, r3, #30
   1059e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   105a2:	7153      	strb	r3, [r2, #5]

    // Set the provided initial buffers as next, they will become the current
    // ones after the IRQ handler is called for the first time, what will occur
    // right after the START task is triggered.
    m_cb.next_buffers = *p_initial_buffers;
   105a4:	c803      	ldmia	r0, {r0, r1}
   105a6:	4b20      	ldr	r3, [pc, #128]	; (10628 <nrfx_i2s_start+0xd0>)
   105a8:	e883 0003 	stmia.w	r3, {r0, r1}
    m_cb.current_buffers.p_rx_buffer = NULL;
    m_cb.current_buffers.p_tx_buffer = NULL;

    nrf_i2s_transfer_set(NRF_I2S0,
   105ac:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
NRF_STATIC_INLINE void nrf_i2s_transfer_set(NRF_I2S_Type *   p_reg,
                                            uint16_t         size,
                                            uint32_t *       p_buffer_rx,
                                            uint32_t const * p_buffer_tx)
{
    p_reg->RXTXD.MAXCNT = size;
   105b0:	4b1e      	ldr	r3, [pc, #120]	; (1062c <nrfx_i2s_start+0xd4>)
    m_cb.current_buffers.p_rx_buffer = NULL;
   105b2:	2000      	movs	r0, #0
    m_cb.current_buffers.p_tx_buffer = NULL;
   105b4:	e9c2 0004 	strd	r0, r0, [r2, #16]
   105b8:	f8c3 6550 	str.w	r6, [r3, #1360]	; 0x550
}

NRF_STATIC_INLINE void nrf_i2s_rx_buffer_set(NRF_I2S_Type * p_reg,
                                             uint32_t * p_buffer)
{
    p_reg->RXD.PTR = (uint32_t)p_buffer;
   105bc:	f8c3 5538 	str.w	r5, [r3, #1336]	; 0x538
    p_reg->CONFIG.RXEN = (p_buffer_rx != NULL) ? 1 : 0;
   105c0:	1a2d      	subs	r5, r5, r0
   105c2:	bf18      	it	ne
   105c4:	2501      	movne	r5, #1
   105c6:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_i2s_tx_buffer_set(NRF_I2S_Type *   p_reg,
                                             uint32_t const * p_buffer)
{
    p_reg->TXD.PTR = (uint32_t)p_buffer;
   105ca:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CONFIG.TXEN = (p_buffer_tx != NULL) ? 1 : 0;
   105ce:	1a24      	subs	r4, r4, r0
   105d0:	bf18      	it	ne
   105d2:	2401      	movne	r4, #1
   105d4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
                         m_cb.next_buffers.p_rx_buffer,
                         m_cb.next_buffers.p_tx_buffer);

    nrf_i2s_enable(NRF_I2S0);

    m_cb.state = NRFX_DRV_STATE_POWERED_ON;
   105d8:	2102      	movs	r1, #2
    p_reg->ENABLE = (I2S_ENABLE_ENABLE_Enabled << I2S_ENABLE_ENABLE_Pos);
   105da:	2401      	movs	r4, #1
   105dc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
   105e0:	7111      	strb	r1, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   105e2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   105e6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   105ea:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
   105ee:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
   105f2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   105f6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108

    nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_RXPTRUPD);
    nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_TXPTRUPD);
    nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_STOPPED);
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
   105fa:	7951      	ldrb	r1, [r2, #5]
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
                                 NRF_I2S_INT_STOPPED_MASK);
    nrf_i2s_task_trigger(NRF_I2S0, NRF_I2S_TASK_START);

    NRFX_LOG_INFO("Started.");
    return NRFX_SUCCESS;
   105fc:	480c      	ldr	r0, [pc, #48]	; (10630 <nrfx_i2s_start+0xd8>)
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
   105fe:	fa01 f204 	lsl.w	r2, r1, r4
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
   10602:	0109      	lsls	r1, r1, #4
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
   10604:	f002 0202 	and.w	r2, r2, #2
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
   10608:	f001 0120 	and.w	r1, r1, #32
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
   1060c:	430a      	orrs	r2, r1
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
   1060e:	f042 0204 	orr.w	r2, r2, #4
    p_reg->INTENSET = mask;
   10612:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10616:	601c      	str	r4, [r3, #0]
}
   10618:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1061a:	4806      	ldr	r0, [pc, #24]	; (10634 <nrfx_i2s_start+0xdc>)
   1061c:	e7fc      	b.n	10618 <nrfx_i2s_start+0xc0>
        return err_code;
   1061e:	4806      	ldr	r0, [pc, #24]	; (10638 <nrfx_i2s_start+0xe0>)
   10620:	e7fa      	b.n	10618 <nrfx_i2s_start+0xc0>
   10622:	bf00      	nop
   10624:	200021d4 	.word	0x200021d4
   10628:	200021dc 	.word	0x200021dc
   1062c:	40025000 	.word	0x40025000
   10630:	0bad0000 	.word	0x0bad0000
   10634:	0bad0005 	.word	0x0bad0005
   10638:	0bad000a 	.word	0x0bad000a

0001063c <nrfx_i2s_next_buffers_set>:


nrfx_err_t nrfx_i2s_next_buffers_set(nrfx_i2s_buffers_t const * p_buffers)
{
   1063c:	b510      	push	{r4, lr}
                (nrfx_is_in_ram(p_buffers->p_tx_buffer) &&
                 nrfx_is_word_aligned(p_buffers->p_tx_buffer)));

    nrfx_err_t err_code;

    if (!m_cb.buffers_needed)
   1063e:	4b16      	ldr	r3, [pc, #88]	; (10698 <nrfx_i2s_next_buffers_set+0x5c>)
   10640:	795a      	ldrb	r2, [r3, #5]
   10642:	06d2      	lsls	r2, r2, #27
   10644:	d523      	bpl.n	1068e <nrfx_i2s_next_buffers_set+0x52>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (((p_buffers->p_rx_buffer != NULL)
   10646:	6802      	ldr	r2, [r0, #0]
   10648:	b122      	cbz	r2, 10654 <nrfx_i2s_next_buffers_set+0x18>
   1064a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_buffers->p_rx_buffer))
   1064e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   10652:	d11e      	bne.n	10692 <nrfx_i2s_next_buffers_set+0x56>
        ||
        ((p_buffers->p_tx_buffer != NULL)
   10654:	6842      	ldr	r2, [r0, #4]
        ||
   10656:	b122      	cbz	r2, 10662 <nrfx_i2s_next_buffers_set+0x26>
   10658:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_buffers->p_tx_buffer)))
   1065c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   10660:	d117      	bne.n	10692 <nrfx_i2s_next_buffers_set+0x56>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (m_cb.use_tx)
   10662:	7959      	ldrb	r1, [r3, #5]
   10664:	078c      	lsls	r4, r1, #30
    p_reg->TXD.PTR = (uint32_t)p_buffer;
   10666:	bf44      	itt	mi
   10668:	4c0c      	ldrmi	r4, [pc, #48]	; (1069c <nrfx_i2s_next_buffers_set+0x60>)
   1066a:	f8c4 2540 	strmi.w	r2, [r4, #1344]	; 0x540
    {
        NRFX_ASSERT(p_buffers->p_tx_buffer != NULL);
        nrf_i2s_tx_buffer_set(NRF_I2S0, p_buffers->p_tx_buffer);
    }
    if (m_cb.use_rx)
   1066e:	07ca      	lsls	r2, r1, #31
    p_reg->RXD.PTR = (uint32_t)p_buffer;
   10670:	bf42      	ittt	mi
   10672:	4a0a      	ldrmi	r2, [pc, #40]	; (1069c <nrfx_i2s_next_buffers_set+0x60>)
   10674:	6801      	ldrmi	r1, [r0, #0]
   10676:	f8c2 1538 	strmi.w	r1, [r2, #1336]	; 0x538
    {
        NRFX_ASSERT(p_buffers->p_rx_buffer != NULL);
        nrf_i2s_rx_buffer_set(NRF_I2S0, p_buffers->p_rx_buffer);
    }

    m_cb.next_buffers   = *p_buffers;
   1067a:	c803      	ldmia	r0, {r0, r1}
   1067c:	4a08      	ldr	r2, [pc, #32]	; (106a0 <nrfx_i2s_next_buffers_set+0x64>)
   1067e:	e882 0003 	stmia.w	r2, {r0, r1}
    m_cb.buffers_needed = false;
   10682:	795a      	ldrb	r2, [r3, #5]

    return NRFX_SUCCESS;
   10684:	4807      	ldr	r0, [pc, #28]	; (106a4 <nrfx_i2s_next_buffers_set+0x68>)
    m_cb.buffers_needed = false;
   10686:	f36f 1204 	bfc	r2, #4, #1
   1068a:	715a      	strb	r2, [r3, #5]
}
   1068c:	bd10      	pop	{r4, pc}
        return err_code;
   1068e:	4806      	ldr	r0, [pc, #24]	; (106a8 <nrfx_i2s_next_buffers_set+0x6c>)
   10690:	e7fc      	b.n	1068c <nrfx_i2s_next_buffers_set+0x50>
        return err_code;
   10692:	4806      	ldr	r0, [pc, #24]	; (106ac <nrfx_i2s_next_buffers_set+0x70>)
   10694:	e7fa      	b.n	1068c <nrfx_i2s_next_buffers_set+0x50>
   10696:	bf00      	nop
   10698:	200021d4 	.word	0x200021d4
   1069c:	40025000 	.word	0x40025000
   106a0:	200021dc 	.word	0x200021dc
   106a4:	0bad0000 	.word	0x0bad0000
   106a8:	0bad0005 	.word	0x0bad0005
   106ac:	0bad000a 	.word	0x0bad000a

000106b0 <nrfx_i2s_stop>:

void nrfx_i2s_stop(void)
{
    NRFX_ASSERT(m_cb.state != NRFX_DRV_STATE_UNINITIALIZED);

    m_cb.buffers_needed = false;
   106b0:	4b06      	ldr	r3, [pc, #24]	; (106cc <nrfx_i2s_stop+0x1c>)
   106b2:	795a      	ldrb	r2, [r3, #5]
   106b4:	f36f 1204 	bfc	r2, #4, #1
   106b8:	715a      	strb	r2, [r3, #5]
    p_reg->INTENCLR = mask;
   106ba:	4b05      	ldr	r3, [pc, #20]	; (106d0 <nrfx_i2s_stop+0x20>)
   106bc:	2222      	movs	r2, #34	; 0x22
   106be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   106c2:	2201      	movs	r2, #1
   106c4:	605a      	str	r2, [r3, #4]
    nrf_i2s_int_disable(NRF_I2S0, NRF_I2S_INT_RXPTRUPD_MASK |
                                  NRF_I2S_INT_TXPTRUPD_MASK);
    nrf_i2s_task_trigger(NRF_I2S0, NRF_I2S_TASK_STOP);

#if NRFX_CHECK(USE_WORKAROUND_FOR_I2S_STOP_ANOMALY)
    *((volatile uint32_t *)(((uint32_t)NRF_I2S0) + 0x38)) = 1;
   106c6:	639a      	str	r2, [r3, #56]	; 0x38
    *((volatile uint32_t *)(((uint32_t)NRF_I2S0) + 0x3C)) = 1;
   106c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
   106ca:	4770      	bx	lr
   106cc:	200021d4 	.word	0x200021d4
   106d0:	40025000 	.word	0x40025000

000106d4 <nrfx_i2s_uninit>:
{
   106d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_I2S0));
   106d6:	2025      	movs	r0, #37	; 0x25
    nrfx_i2s_stop();
   106d8:	f7ff ffea 	bl	106b0 <nrfx_i2s_stop>
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(NRF_I2S0));
   106dc:	f7fa ffec 	bl	b6b8 <arch_irq_disable>
    p_reg->ENABLE = (I2S_ENABLE_ENABLE_Disabled << I2S_ENABLE_ENABLE_Pos);
   106e0:	4b1f      	ldr	r3, [pc, #124]	; (10760 <nrfx_i2s_uninit+0x8c>)
    if (!m_cb.skip_gpio_cfg)
   106e2:	4920      	ldr	r1, [pc, #128]	; (10764 <nrfx_i2s_uninit+0x90>)
   106e4:	2200      	movs	r2, #0
   106e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   106ea:	794a      	ldrb	r2, [r1, #5]
   106ec:	0654      	lsls	r4, r2, #25
   106ee:	d423      	bmi.n	10738 <nrfx_i2s_uninit+0x64>
    return p_reg->PSEL.SCK;
   106f0:	f8d3 0564 	ldr.w	r0, [r3, #1380]	; 0x564
    return p_reg->PSEL.LRCK;
   106f4:	f8d3 7568 	ldr.w	r7, [r3, #1384]	; 0x568
    return p_reg->PSEL.MCK;
   106f8:	f8d3 6560 	ldr.w	r6, [r3, #1376]	; 0x560
    return p_reg->PSEL.SDOUT;
   106fc:	f8d3 5570 	ldr.w	r5, [r3, #1392]	; 0x570
    return p_reg->PSEL.SDIN;
   10700:	f8d3 456c 	ldr.w	r4, [r3, #1388]	; 0x56c
    nrf_gpio_cfg_default(sck_pin & pin_mask);
   10704:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   10708:	f005 ff4a 	bl	165a0 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(lrck_pin & pin_mask);
   1070c:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   10710:	f005 ff46 	bl	165a0 <nrf_gpio_cfg_default>
    if (mck_pin != NRF_I2S_PIN_NOT_CONNECTED)
   10714:	1c70      	adds	r0, r6, #1
   10716:	d003      	beq.n	10720 <nrfx_i2s_uninit+0x4c>
        nrf_gpio_cfg_default(mck_pin & pin_mask);
   10718:	f006 003f 	and.w	r0, r6, #63	; 0x3f
   1071c:	f005 ff40 	bl	165a0 <nrf_gpio_cfg_default>
    if (sdout_pin != NRF_I2S_PIN_NOT_CONNECTED)
   10720:	1c6a      	adds	r2, r5, #1
   10722:	d003      	beq.n	1072c <nrfx_i2s_uninit+0x58>
        nrf_gpio_cfg_default(sdout_pin & pin_mask);
   10724:	f005 003f 	and.w	r0, r5, #63	; 0x3f
   10728:	f005 ff3a 	bl	165a0 <nrf_gpio_cfg_default>
    if (sdin_pin != NRF_I2S_PIN_NOT_CONNECTED)
   1072c:	1c63      	adds	r3, r4, #1
   1072e:	d003      	beq.n	10738 <nrfx_i2s_uninit+0x64>
        nrf_gpio_cfg_default(sdin_pin & pin_mask);
   10730:	f004 003f 	and.w	r0, r4, #63	; 0x3f
   10734:	f005 ff34 	bl	165a0 <nrf_gpio_cfg_default>
    if (!m_cb.skip_psel_cfg)
   10738:	794b      	ldrb	r3, [r1, #5]
   1073a:	09db      	lsrs	r3, r3, #7
   1073c:	d10c      	bne.n	10758 <nrfx_i2s_uninit+0x84>
    p_reg->PSEL.SCK   = sck_pin;
   1073e:	4b08      	ldr	r3, [pc, #32]	; (10760 <nrfx_i2s_uninit+0x8c>)
   10740:	f04f 32ff 	mov.w	r2, #4294967295
   10744:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    p_reg->PSEL.LRCK  = lrck_pin;
   10748:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    p_reg->PSEL.MCK   = mck_pin;
   1074c:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    p_reg->PSEL.SDOUT = sdout_pin;
   10750:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    p_reg->PSEL.SDIN  = sdin_pin;
   10754:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    m_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   10758:	2300      	movs	r3, #0
   1075a:	710b      	strb	r3, [r1, #4]
}
   1075c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1075e:	bf00      	nop
   10760:	40025000 	.word	0x40025000
   10764:	200021d4 	.word	0x200021d4

00010768 <nrfx_i2s_irq_handler>:


void nrfx_i2s_irq_handler(void)
{
   10768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1076a:	4b3c      	ldr	r3, [pc, #240]	; (1085c <nrfx_i2s_irq_handler+0xf4>)
   1076c:	4c3c      	ldr	r4, [pc, #240]	; (10860 <nrfx_i2s_irq_handler+0xf8>)
   1076e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    if (nrf_i2s_event_check(NRF_I2S0, NRF_I2S_EVENT_TXPTRUPD))
   10772:	b17a      	cbz	r2, 10794 <nrfx_i2s_irq_handler+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10774:	2200      	movs	r2, #0
   10776:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   1077a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    {
        nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_TXPTRUPD);
        m_cb.tx_ready = true;
   1077e:	7963      	ldrb	r3, [r4, #5]
   10780:	f043 0308 	orr.w	r3, r3, #8
        if (m_cb.use_tx && m_cb.buffers_needed)
   10784:	f003 0212 	and.w	r2, r3, #18
   10788:	2a12      	cmp	r2, #18
        m_cb.tx_ready = true;
   1078a:	7163      	strb	r3, [r4, #5]
        {
            m_cb.buffers_reused = true;
   1078c:	bf04      	itt	eq
   1078e:	f043 0320 	orreq.w	r3, r3, #32
   10792:	7163      	strbeq	r3, [r4, #5]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10794:	4b31      	ldr	r3, [pc, #196]	; (1085c <nrfx_i2s_irq_handler+0xf4>)
   10796:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
    }
    if (nrf_i2s_event_check(NRF_I2S0, NRF_I2S_EVENT_RXPTRUPD))
   1079a:	b17a      	cbz	r2, 107bc <nrfx_i2s_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1079c:	2200      	movs	r2, #0
   1079e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   107a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    {
        nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_RXPTRUPD);
        m_cb.rx_ready = true;
   107a6:	7963      	ldrb	r3, [r4, #5]
   107a8:	f043 0304 	orr.w	r3, r3, #4
        if (m_cb.use_rx && m_cb.buffers_needed)
   107ac:	f003 0211 	and.w	r2, r3, #17
   107b0:	2a11      	cmp	r2, #17
        m_cb.rx_ready = true;
   107b2:	7163      	strb	r3, [r4, #5]
        {
            m_cb.buffers_reused = true;
   107b4:	bf04      	itt	eq
   107b6:	f043 0320 	orreq.w	r3, r3, #32
   107ba:	7163      	strbeq	r3, [r4, #5]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   107bc:	4b27      	ldr	r3, [pc, #156]	; (1085c <nrfx_i2s_irq_handler+0xf4>)
   107be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
        }
    }

    if (nrf_i2s_event_check(NRF_I2S0, NRF_I2S_EVENT_STOPPED))
   107c2:	b1ca      	cbz	r2, 107f8 <nrfx_i2s_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   107c4:	2100      	movs	r1, #0
   107c6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   107ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108

        // When stopped, release all buffers, including these scheduled for
        // the next part of the transfer, and signal that the transfer has
        // finished.

        m_cb.handler(&m_cb.current_buffers, 0);
   107ce:	4d25      	ldr	r5, [pc, #148]	; (10864 <nrfx_i2s_irq_handler+0xfc>)
    p_reg->INTENCLR = mask;
   107d0:	2204      	movs	r2, #4
   107d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = (I2S_ENABLE_ENABLE_Disabled << I2S_ENABLE_ENABLE_Pos);
   107d6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
   107da:	f855 3c10 	ldr.w	r3, [r5, #-16]
   107de:	4628      	mov	r0, r5
   107e0:	4798      	blx	r3

        // Change the state of the driver before calling the handler with
        // the flag signaling that the transfer has finished, so that it is
        // possible to start a new transfer directly from the handler function.
        m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   107e2:	2301      	movs	r3, #1
   107e4:	7123      	strb	r3, [r4, #4]
        NRFX_LOG_INFO("Stopped.");

        m_cb.handler(&m_cb.next_buffers, NRFX_I2S_STATUS_TRANSFER_STOPPED);
   107e6:	f855 3c10 	ldr.w	r3, [r5, #-16]
   107ea:	2102      	movs	r1, #2
   107ec:	f1a5 0008 	sub.w	r0, r5, #8
                             NRFX_I2S_STATUS_NEXT_BUFFERS_NEEDED);
            }

        }
    }
}
   107f0:	b003      	add	sp, #12
   107f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                m_cb.handler(NULL,
   107f6:	4718      	bx	r3
        if ((m_cb.use_tx && m_cb.use_rx && m_cb.tx_ready && m_cb.rx_ready) ||
   107f8:	7963      	ldrb	r3, [r4, #5]
   107fa:	f003 020f 	and.w	r2, r3, #15
   107fe:	2a0f      	cmp	r2, #15
   10800:	d008      	beq.n	10814 <nrfx_i2s_irq_handler+0xac>
   10802:	07d8      	lsls	r0, r3, #31
   10804:	d401      	bmi.n	1080a <nrfx_i2s_irq_handler+0xa2>
            (!m_cb.use_rx && m_cb.tx_ready) ||
   10806:	0719      	lsls	r1, r3, #28
   10808:	d404      	bmi.n	10814 <nrfx_i2s_irq_handler+0xac>
            (!m_cb.use_tx && m_cb.rx_ready))
   1080a:	7962      	ldrb	r2, [r4, #5]
            (!m_cb.use_rx && m_cb.tx_ready) ||
   1080c:	0792      	lsls	r2, r2, #30
   1080e:	d423      	bmi.n	10858 <nrfx_i2s_irq_handler+0xf0>
            (!m_cb.use_tx && m_cb.rx_ready))
   10810:	075b      	lsls	r3, r3, #29
   10812:	d521      	bpl.n	10858 <nrfx_i2s_irq_handler+0xf0>
            m_cb.rx_ready = false;
   10814:	7962      	ldrb	r2, [r4, #5]
                m_cb.handler(NULL,
   10816:	6827      	ldr	r7, [r4, #0]
            if (m_cb.buffers_reused)
   10818:	f002 03f3 	and.w	r3, r2, #243	; 0xf3
   1081c:	f012 0220 	ands.w	r2, r2, #32
   10820:	d008      	beq.n	10834 <nrfx_i2s_irq_handler+0xcc>
                m_cb.buffers_needed = true;
   10822:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   10826:	f043 0310 	orr.w	r3, r3, #16
   1082a:	7163      	strb	r3, [r4, #5]
                m_cb.handler(NULL,
   1082c:	2101      	movs	r1, #1
   1082e:	2000      	movs	r0, #0
   10830:	463b      	mov	r3, r7
   10832:	e7dd      	b.n	107f0 <nrfx_i2s_irq_handler+0x88>
                nrfx_i2s_buffers_t released_buffers = m_cb.current_buffers;
   10834:	4d0b      	ldr	r5, [pc, #44]	; (10864 <nrfx_i2s_irq_handler+0xfc>)
   10836:	e895 0003 	ldmia.w	r5, {r0, r1}
   1083a:	466e      	mov	r6, sp
   1083c:	e886 0003 	stmia.w	r6, {r0, r1}
                m_cb.current_buffers = m_cb.next_buffers;
   10840:	e915 0003 	ldmdb	r5, {r0, r1}
                m_cb.buffers_needed = true;
   10844:	f043 0310 	orr.w	r3, r3, #16
                m_cb.current_buffers = m_cb.next_buffers;
   10848:	e885 0003 	stmia.w	r5, {r0, r1}
                m_cb.next_buffers.p_tx_buffer = NULL;
   1084c:	e9c4 2202 	strd	r2, r2, [r4, #8]
                m_cb.buffers_needed = true;
   10850:	7163      	strb	r3, [r4, #5]
                m_cb.handler(&released_buffers,
   10852:	2101      	movs	r1, #1
   10854:	4630      	mov	r0, r6
   10856:	47b8      	blx	r7
}
   10858:	b003      	add	sp, #12
   1085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1085c:	40025000 	.word	0x40025000
   10860:	200021d4 	.word	0x200021d4
   10864:	200021e4 	.word	0x200021e4

00010868 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   10868:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1086a:	4801      	ldr	r0, [pc, #4]	; (10870 <nrfx_ppi_channel_alloc+0x8>)
   1086c:	f7ff ba0a 	b.w	fc84 <nrfx_flag32_alloc>
   10870:	2000058c 	.word	0x2000058c

00010874 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   10874:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10876:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1087a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1087c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1087e:	6002      	str	r2, [r0, #0]
}
   10880:	4802      	ldr	r0, [pc, #8]	; (1088c <nrf_gpio_pin_port_decode+0x18>)
   10882:	bf18      	it	ne
   10884:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   10888:	4770      	bx	lr
   1088a:	bf00      	nop
   1088c:	50000300 	.word	0x50000300

00010890 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   10890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   10894:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   10896:	4c52      	ldr	r4, [pc, #328]	; (109e0 <nrfx_spi_init+0x150>)
   10898:	f04f 0c28 	mov.w	ip, #40	; 0x28
   1089c:	fb0c fc07 	mul.w	ip, ip, r7
{
   108a0:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   108a2:	eb04 000c 	add.w	r0, r4, ip
   108a6:	7f05      	ldrb	r5, [r0, #28]
   108a8:	2d00      	cmp	r5, #0
   108aa:	f040 8096 	bne.w	109da <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   108ae:	6835      	ldr	r5, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   108b0:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
   108b4:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   108b6:	7bcb      	ldrb	r3, [r1, #15]
   108b8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   108bc:	78cb      	ldrb	r3, [r1, #3]
   108be:	7783      	strb	r3, [r0, #30]
    p_cb->orc = p_config->orc;
   108c0:	794b      	ldrb	r3, [r1, #5]
   108c2:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   108c4:	7bcb      	ldrb	r3, [r1, #15]
   108c6:	2b00      	cmp	r3, #0
   108c8:	d140      	bne.n	1094c <nrfx_spi_init+0xbc>
    if (value == 0)
   108ca:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   108cc:	7808      	ldrb	r0, [r1, #0]
   108ce:	2b01      	cmp	r3, #1
   108d0:	d87a      	bhi.n	109c8 <nrfx_spi_init+0x138>
        nrf_gpio_pin_clear(pin_number);
   108d2:	f005 fe8e 	bl	165f2 <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   108d6:	780b      	ldrb	r3, [r1, #0]
   108d8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   108da:	a801      	add	r0, sp, #4
   108dc:	f7ff ffca 	bl	10874 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   108e0:	9b01      	ldr	r3, [sp, #4]
   108e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   108e6:	2201      	movs	r2, #1
   108e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   108ec:	7848      	ldrb	r0, [r1, #1]
   108ee:	28ff      	cmp	r0, #255	; 0xff
   108f0:	d00c      	beq.n	1090c <nrfx_spi_init+0x7c>
        nrf_gpio_pin_clear(pin_number);
   108f2:	f005 fe7e 	bl	165f2 <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
   108f6:	784b      	ldrb	r3, [r1, #1]
   108f8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   108fa:	a801      	add	r0, sp, #4
   108fc:	f7ff ffba 	bl	10874 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10900:	9b01      	ldr	r3, [sp, #4]
   10902:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10906:	2203      	movs	r2, #3
   10908:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1090c:	788b      	ldrb	r3, [r1, #2]
   1090e:	2bff      	cmp	r3, #255	; 0xff
   10910:	d00c      	beq.n	1092c <nrfx_spi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10912:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   10914:	f891 800e 	ldrb.w	r8, [r1, #14]
   10918:	9301      	str	r3, [sp, #4]
   1091a:	f7ff ffab 	bl	10874 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1091e:	9b01      	ldr	r3, [sp, #4]
   10920:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10924:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   10928:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1092c:	78c8      	ldrb	r0, [r1, #3]
   1092e:	28ff      	cmp	r0, #255	; 0xff
   10930:	d00c      	beq.n	1094c <nrfx_spi_init+0xbc>
        nrf_gpio_pin_set(pin_number);
   10932:	f005 fe51 	bl	165d8 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
   10936:	78cb      	ldrb	r3, [r1, #3]
   10938:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1093a:	a801      	add	r0, sp, #4
   1093c:	f7ff ff9a 	bl	10874 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10940:	9b01      	ldr	r3, [sp, #4]
   10942:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10946:	2203      	movs	r2, #3
   10948:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1094c:	7c0b      	ldrb	r3, [r1, #16]
   1094e:	b993      	cbnz	r3, 10976 <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   10950:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   10952:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   10954:	2bff      	cmp	r3, #255	; 0xff
   10956:	bf18      	it	ne
   10958:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1095a:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   1095c:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   10960:	bf08      	it	eq
   10962:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   10966:	2bff      	cmp	r3, #255	; 0xff
   10968:	bf08      	it	eq
   1096a:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   1096e:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   10972:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   10976:	688b      	ldr	r3, [r1, #8]
   10978:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1097c:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1097e:	7b0a      	ldrb	r2, [r1, #12]
   10980:	3b00      	subs	r3, #0
   10982:	bf18      	it	ne
   10984:	2301      	movne	r3, #1
    switch (spi_mode)
   10986:	2a02      	cmp	r2, #2
   10988:	d021      	beq.n	109ce <nrfx_spi_init+0x13e>
   1098a:	2a03      	cmp	r2, #3
   1098c:	d022      	beq.n	109d4 <nrfx_spi_init+0x144>
   1098e:	2a01      	cmp	r2, #1
   10990:	d101      	bne.n	10996 <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   10992:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   10996:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1099a:	2301      	movs	r3, #1
   1099c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   109a0:	2328      	movs	r3, #40	; 0x28
   109a2:	437b      	muls	r3, r7
   109a4:	58e3      	ldr	r3, [r4, r3]
   109a6:	b123      	cbz	r3, 109b2 <nrfx_spi_init+0x122>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   109a8:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   109aa:	f340 3007 	sbfx	r0, r0, #12, #8
   109ae:	f7fa fe75 	bl	b69c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   109b2:	2328      	movs	r3, #40	; 0x28
   109b4:	fb03 4407 	mla	r4, r3, r7, r4
   109b8:	2300      	movs	r3, #0
   109ba:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   109bc:	4809      	ldr	r0, [pc, #36]	; (109e4 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   109be:	2301      	movs	r3, #1
   109c0:	7723      	strb	r3, [r4, #28]
}
   109c2:	b002      	add	sp, #8
   109c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   109c8:	f005 fe06 	bl	165d8 <nrf_gpio_pin_set>
   109cc:	e783      	b.n	108d6 <nrfx_spi_init+0x46>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   109ce:	f043 0304 	orr.w	r3, r3, #4
        break;
   109d2:	e7e0      	b.n	10996 <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   109d4:	f043 0306 	orr.w	r3, r3, #6
        break;
   109d8:	e7dd      	b.n	10996 <nrfx_spi_init+0x106>
        return err_code;
   109da:	4803      	ldr	r0, [pc, #12]	; (109e8 <nrfx_spi_init+0x158>)
   109dc:	e7f1      	b.n	109c2 <nrfx_spi_init+0x132>
   109de:	bf00      	nop
   109e0:	200021ec 	.word	0x200021ec
   109e4:	0bad0000 	.word	0x0bad0000
   109e8:	0bad0005 	.word	0x0bad0005

000109ec <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   109ec:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   109ee:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   109f0:	4c19      	ldr	r4, [pc, #100]	; (10a58 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   109f2:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   109f4:	2328      	movs	r3, #40	; 0x28
   109f6:	4373      	muls	r3, r6
   109f8:	58e3      	ldr	r3, [r4, r3]
   109fa:	b133      	cbz	r3, 10a0a <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   109fc:	f345 3007 	sbfx	r0, r5, #12, #8
   10a00:	f7fa fe5a 	bl	b6b8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   10a04:	2304      	movs	r3, #4
   10a06:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   10a0a:	2300      	movs	r3, #0
   10a0c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   10a10:	2328      	movs	r3, #40	; 0x28
   10a12:	fb03 4306 	mla	r3, r3, r6, r4
   10a16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   10a1a:	b9bb      	cbnz	r3, 10a4c <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   10a1c:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   10a20:	f005 fdcc 	bl	165bc <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   10a24:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   10a28:	1c42      	adds	r2, r0, #1
   10a2a:	d001      	beq.n	10a30 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   10a2c:	f005 fdc6 	bl	165bc <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   10a30:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   10a34:	1c43      	adds	r3, r0, #1
   10a36:	d001      	beq.n	10a3c <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   10a38:	f005 fdc0 	bl	165bc <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   10a3c:	2328      	movs	r3, #40	; 0x28
   10a3e:	fb03 4306 	mla	r3, r3, r6, r4
   10a42:	7f98      	ldrb	r0, [r3, #30]
   10a44:	28ff      	cmp	r0, #255	; 0xff
   10a46:	d001      	beq.n	10a4c <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   10a48:	f005 fdb8 	bl	165bc <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   10a4c:	2328      	movs	r3, #40	; 0x28
   10a4e:	fb03 4406 	mla	r4, r3, r6, r4
   10a52:	2300      	movs	r3, #0
   10a54:	7723      	strb	r3, [r4, #28]
}
   10a56:	bd70      	pop	{r4, r5, r6, pc}
   10a58:	200021ec 	.word	0x200021ec

00010a5c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   10a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   10a60:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   10a62:	4c39      	ldr	r4, [pc, #228]	; (10b48 <nrfx_spi_xfer+0xec>)
   10a64:	2328      	movs	r3, #40	; 0x28
   10a66:	437b      	muls	r3, r7
{
   10a68:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   10a6a:	18e2      	adds	r2, r4, r3
{
   10a6c:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   10a6e:	7f51      	ldrb	r1, [r2, #29]
{
   10a70:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   10a72:	2900      	cmp	r1, #0
   10a74:	d166      	bne.n	10b44 <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   10a76:	58e3      	ldr	r3, [r4, r3]
   10a78:	b10b      	cbz	r3, 10a7e <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   10a7a:	2301      	movs	r3, #1
   10a7c:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   10a7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10a82:	2528      	movs	r5, #40	; 0x28
   10a84:	fb05 4507 	mla	r5, r5, r7, r4
   10a88:	f105 0c0c 	add.w	ip, r5, #12
   10a8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   10a90:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   10a92:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   10a94:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   10a96:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   10a9a:	d001      	beq.n	10aa0 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   10a9c:	f005 fda9 	bl	165f2 <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   10aa0:	2328      	movs	r3, #40	; 0x28
   10aa2:	f1b8 0f00 	cmp.w	r8, #0
   10aa6:	d006      	beq.n	10ab6 <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   10aa8:	fb03 4307 	mla	r3, r3, r7, r4
   10aac:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   10aae:	4827      	ldr	r0, [pc, #156]	; (10b4c <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   10ab0:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   10ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   10ab6:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   10aba:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   10abe:	2204      	movs	r2, #4
   10ac0:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   10ac4:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10ac8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   10acc:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
   10ad0:	6872      	ldr	r2, [r6, #4]
   10ad2:	b19a      	cbz	r2, 10afc <nrfx_spi_xfer+0xa0>
   10ad4:	6833      	ldr	r3, [r6, #0]
   10ad6:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   10ad8:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   10adc:	6873      	ldr	r3, [r6, #4]
   10ade:	2b01      	cmp	r3, #1
   10ae0:	d90e      	bls.n	10b00 <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   10ae2:	6833      	ldr	r3, [r6, #0]
   10ae4:	785b      	ldrb	r3, [r3, #1]
   10ae6:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   10aea:	2328      	movs	r3, #40	; 0x28
   10aec:	437b      	muls	r3, r7
   10aee:	58e6      	ldr	r6, [r4, r3]
   10af0:	b176      	cbz	r6, 10b10 <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
   10af2:	2304      	movs	r3, #4
   10af4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   10af8:	4815      	ldr	r0, [pc, #84]	; (10b50 <nrfx_spi_xfer+0xf4>)
   10afa:	e7da      	b.n	10ab2 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   10afc:	7fdb      	ldrb	r3, [r3, #31]
   10afe:	e7eb      	b.n	10ad8 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   10b00:	68f3      	ldr	r3, [r6, #12]
   10b02:	2b01      	cmp	r3, #1
   10b04:	d9f1      	bls.n	10aea <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   10b06:	2328      	movs	r3, #40	; 0x28
   10b08:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   10b0c:	7fdb      	ldrb	r3, [r3, #31]
   10b0e:	e7ea      	b.n	10ae6 <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   10b10:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   10b14:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10b18:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   10b1c:	2b00      	cmp	r3, #0
   10b1e:	d0fb      	beq.n	10b18 <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10b20:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   10b24:	4628      	mov	r0, r5
   10b26:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   10b2a:	f005 fd6f 	bl	1660c <transfer_byte>
   10b2e:	2800      	cmp	r0, #0
   10b30:	d1f2      	bne.n	10b18 <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   10b32:	2328      	movs	r3, #40	; 0x28
   10b34:	fb03 4407 	mla	r4, r3, r7, r4
   10b38:	7fa0      	ldrb	r0, [r4, #30]
   10b3a:	28ff      	cmp	r0, #255	; 0xff
   10b3c:	d0dc      	beq.n	10af8 <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
   10b3e:	f005 fd4b 	bl	165d8 <nrf_gpio_pin_set>
   10b42:	e7d9      	b.n	10af8 <nrfx_spi_xfer+0x9c>
        return err_code;
   10b44:	4803      	ldr	r0, [pc, #12]	; (10b54 <nrfx_spi_xfer+0xf8>)
   10b46:	e7b4      	b.n	10ab2 <nrfx_spi_xfer+0x56>
   10b48:	200021ec 	.word	0x200021ec
   10b4c:	0bad0003 	.word	0x0bad0003
   10b50:	0bad0000 	.word	0x0bad0000
   10b54:	0bad000b 	.word	0x0bad000b

00010b58 <nrfx_spi_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   10b58:	b510      	push	{r4, lr}
   10b5a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   10b5e:	2300      	movs	r3, #0
   10b60:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   10b64:	490a      	ldr	r1, [pc, #40]	; (10b90 <nrfx_spi_1_irq_handler+0x38>)
   10b66:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   10b6a:	f005 fd4f 	bl	1660c <transfer_byte>
   10b6e:	b968      	cbnz	r0, 10b8c <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   10b70:	7f88      	ldrb	r0, [r1, #30]
   10b72:	28ff      	cmp	r0, #255	; 0xff
   10b74:	d001      	beq.n	10b7a <nrfx_spi_1_irq_handler+0x22>
   10b76:	f005 fd2f 	bl	165d8 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   10b7a:	2300      	movs	r3, #0
   10b7c:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   10b7e:	720b      	strb	r3, [r1, #8]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   10b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   10b84:	e9d1 3100 	ldrd	r3, r1, [r1]
   10b88:	4802      	ldr	r0, [pc, #8]	; (10b94 <nrfx_spi_1_irq_handler+0x3c>)
   10b8a:	4718      	bx	r3
}
   10b8c:	bd10      	pop	{r4, pc}
   10b8e:	bf00      	nop
   10b90:	200021ec 	.word	0x200021ec
   10b94:	200021f4 	.word	0x200021f4

00010b98 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   10b98:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   10b9a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   10b9e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   10ba0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   10ba2:	6002      	str	r2, [r0, #0]
}
   10ba4:	4802      	ldr	r0, [pc, #8]	; (10bb0 <nrf_gpio_pin_port_decode+0x18>)
   10ba6:	bf18      	it	ne
   10ba8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   10bac:	4770      	bx	lr
   10bae:	bf00      	nop
   10bb0:	50000300 	.word	0x50000300

00010bb4 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   10bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   10bb8:	4c7a      	ldr	r4, [pc, #488]	; (10da4 <nrfx_spim_init+0x1f0>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10bba:	7905      	ldrb	r5, [r0, #4]
{
   10bbc:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   10bbe:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   10bc2:	7f00      	ldrb	r0, [r0, #28]
   10bc4:	2800      	cmp	r0, #0
   10bc6:	f040 80e9 	bne.w	10d9c <nrfx_spim_init+0x1e8>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   10bca:	2d00      	cmp	r5, #0
   10bcc:	f040 80e8 	bne.w	10da0 <nrfx_spim_init+0x1ec>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   10bd0:	6837      	ldr	r7, [r6, #0]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   10bd2:	e9c4 2300 	strd	r2, r3, [r4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   10bd6:	7cca      	ldrb	r2, [r1, #19]
   10bd8:	7fa3      	ldrb	r3, [r4, #30]
   10bda:	f362 0300 	bfi	r3, r2, #0, #1
   10bde:	77a3      	strb	r3, [r4, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   10be0:	790a      	ldrb	r2, [r1, #4]
   10be2:	b2db      	uxtb	r3, r3
   10be4:	f362 0341 	bfi	r3, r2, #1, #1
   10be8:	77a3      	strb	r3, [r4, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
   10bea:	7c4a      	ldrb	r2, [r1, #17]
   10bec:	b2db      	uxtb	r3, r3
   10bee:	f362 0382 	bfi	r3, r2, #2, #1
   10bf2:	77a3      	strb	r3, [r4, #30]
#endif
    p_cb->ss_pin = p_config->ss_pin;
   10bf4:	78cb      	ldrb	r3, [r1, #3]
   10bf6:	77e3      	strb	r3, [r4, #31]
    if (!p_config->skip_gpio_cfg)
   10bf8:	7ccb      	ldrb	r3, [r1, #19]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   10bfa:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
   10bfe:	2b00      	cmp	r3, #0
   10c00:	d15e      	bne.n	10cc0 <nrfx_spim_init+0x10c>
                    : NRF_GPIO_PIN_S0S1;
   10c02:	688b      	ldr	r3, [r1, #8]
        nrf_gpio_pin_write(p_config->sck_pin,
   10c04:	7808      	ldrb	r0, [r1, #0]
                    : NRF_GPIO_PIN_S0S1;
   10c06:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
    if (value == 0)
   10c0a:	7b0b      	ldrb	r3, [r1, #12]
   10c0c:	bf08      	it	eq
   10c0e:	2503      	moveq	r5, #3
   10c10:	2b01      	cmp	r3, #1
   10c12:	f200 80ad 	bhi.w	10d70 <nrfx_spim_init+0x1bc>
        nrf_gpio_pin_clear(pin_number);
   10c16:	f005 fd39 	bl	1668c <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   10c1a:	780b      	ldrb	r3, [r1, #0]
   10c1c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10c1e:	a801      	add	r0, sp, #4
   10c20:	f7ff ffba 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10c24:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   10c26:	022d      	lsls	r5, r5, #8
    reg->PIN_CNF[pin_number] = cnf;
   10c28:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10c2c:	f045 0201 	orr.w	r2, r5, #1
    reg->PIN_CNF[pin_number] = cnf;
   10c30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   10c34:	7848      	ldrb	r0, [r1, #1]
   10c36:	28ff      	cmp	r0, #255	; 0xff
   10c38:	d00d      	beq.n	10c56 <nrfx_spim_init+0xa2>
        nrf_gpio_pin_clear(pin_number);
   10c3a:	f005 fd27 	bl	1668c <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   10c3e:	784b      	ldrb	r3, [r1, #1]
   10c40:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10c42:	a801      	add	r0, sp, #4
   10c44:	f7ff ffa8 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10c48:	9b01      	ldr	r3, [sp, #4]
   10c4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10c4e:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   10c52:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   10c56:	788b      	ldrb	r3, [r1, #2]
   10c58:	2bff      	cmp	r3, #255	; 0xff
   10c5a:	d00c      	beq.n	10c76 <nrfx_spim_init+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10c5c:	a801      	add	r0, sp, #4
                         p_config->miso_pull,
   10c5e:	f891 900e 	ldrb.w	r9, [r1, #14]
            nrf_gpio_cfg(p_config->miso_pin,
   10c62:	9301      	str	r3, [sp, #4]
   10c64:	f7ff ff98 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10c68:	9b01      	ldr	r3, [sp, #4]
   10c6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10c6e:	ea45 0289 	orr.w	r2, r5, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   10c72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   10c76:	78c8      	ldrb	r0, [r1, #3]
   10c78:	28ff      	cmp	r0, #255	; 0xff
   10c7a:	d010      	beq.n	10c9e <nrfx_spim_init+0xea>
    if (value == 0)
   10c7c:	790b      	ldrb	r3, [r1, #4]
   10c7e:	2b00      	cmp	r3, #0
   10c80:	d079      	beq.n	10d76 <nrfx_spim_init+0x1c2>
        nrf_gpio_pin_clear(pin_number);
   10c82:	f005 fd03 	bl	1668c <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->ss_pin,
   10c86:	78cb      	ldrb	r3, [r1, #3]
   10c88:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10c8a:	a801      	add	r0, sp, #4
   10c8c:	f7ff ff84 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10c90:	9b01      	ldr	r3, [sp, #4]
   10c92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10c96:	f045 0203 	orr.w	r2, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   10c9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   10c9e:	7bc8      	ldrb	r0, [r1, #15]
   10ca0:	28ff      	cmp	r0, #255	; 0xff
   10ca2:	d00d      	beq.n	10cc0 <nrfx_spim_init+0x10c>
        nrf_gpio_pin_set(pin_number);
   10ca4:	f005 fce5 	bl	16672 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   10ca8:	7bcb      	ldrb	r3, [r1, #15]
   10caa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10cac:	a801      	add	r0, sp, #4
   10cae:	f7ff ff73 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10cb2:	9b01      	ldr	r3, [sp, #4]
   10cb4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   10cb8:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   10cbc:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   10cc0:	7d0b      	ldrb	r3, [r1, #20]
   10cc2:	bb5b      	cbnz	r3, 10d1c <nrfx_spim_init+0x168>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   10cc4:	784b      	ldrb	r3, [r1, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   10cc6:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   10cc8:	2bff      	cmp	r3, #255	; 0xff
   10cca:	bf18      	it	ne
   10ccc:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   10cce:	788b      	ldrb	r3, [r1, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
   10cd0:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   10cd4:	bf08      	it	eq
   10cd6:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   10cda:	2bff      	cmp	r3, #255	; 0xff
   10cdc:	bf08      	it	eq
   10cde:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
   10ce2:	f8c8 250c 	str.w	r2, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   10ce6:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   10cea:	7933      	ldrb	r3, [r6, #4]
   10cec:	b9b3      	cbnz	r3, 10d1c <nrfx_spim_init+0x168>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   10cee:	78cb      	ldrb	r3, [r1, #3]
   10cf0:	2bff      	cmp	r3, #255	; 0xff
   10cf2:	d043      	beq.n	10d7c <nrfx_spim_init+0x1c8>
   10cf4:	7c4a      	ldrb	r2, [r1, #17]
   10cf6:	2a00      	cmp	r2, #0
   10cf8:	d040      	beq.n	10d7c <nrfx_spim_init+0x1c8>
                                    (p_config->ss_active_high == true
   10cfa:	7908      	ldrb	r0, [r1, #4]
                nrf_spim_csn_configure(p_spim,
   10cfc:	7c8a      	ldrb	r2, [r1, #18]
NRF_STATIC_INLINE void nrf_spim_csn_configure(NRF_SPIM_Type *    p_reg,
                                              uint32_t           pin,
                                              nrf_spim_csn_pol_t polarity,
                                              uint32_t           duration)
{
    p_reg->PSEL.CSN = pin;
   10cfe:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   10d02:	f8c8 0568 	str.w	r0, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   10d06:	f8c8 2564 	str.w	r2, [r8, #1380]	; 0x564
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   10d0a:	7933      	ldrb	r3, [r6, #4]
   10d0c:	b933      	cbnz	r3, 10d1c <nrfx_spim_init+0x168>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   10d0e:	7bcb      	ldrb	r3, [r1, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   10d10:	2bff      	cmp	r3, #255	; 0xff
   10d12:	bf08      	it	eq
   10d14:	f04f 33ff 	moveq.w	r3, #4294967295

#if NRF_SPIM_DCX_PRESENT
NRF_STATIC_INLINE void nrf_spim_dcx_pin_set(NRF_SPIM_Type * p_reg,
                                            uint32_t        dcx_pin)
{
    p_reg->PSELDCX = dcx_pin;
   10d18:	f8c8 356c 	str.w	r3, [r8, #1388]	; 0x56c

    configure_pins(p_instance, p_config);

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   10d1c:	7c0b      	ldrb	r3, [r1, #16]

#if NRF_SPIM_RXDELAY_PRESENT
NRF_STATIC_INLINE void nrf_spim_iftiming_set(NRF_SPIM_Type * p_reg,
                                             uint32_t        rxdelay)
{
    p_reg->IFTIMING.RXDELAY = rxdelay;
   10d1e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   10d22:	688b      	ldr	r3, [r1, #8]
   10d24:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   10d28:	7b4b      	ldrb	r3, [r1, #13]
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   10d2a:	7b0a      	ldrb	r2, [r1, #12]
   10d2c:	3b00      	subs	r3, #0
   10d2e:	bf18      	it	ne
   10d30:	2301      	movne	r3, #1
    switch (spi_mode)
   10d32:	2a02      	cmp	r2, #2
   10d34:	d02c      	beq.n	10d90 <nrfx_spim_init+0x1dc>
   10d36:	2a03      	cmp	r2, #3
   10d38:	d02d      	beq.n	10d96 <nrfx_spim_init+0x1e2>
   10d3a:	2a01      	cmp	r2, #1
   10d3c:	d101      	bne.n	10d42 <nrfx_spim_init+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   10d3e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   10d42:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   10d46:	798b      	ldrb	r3, [r1, #6]
   10d48:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   10d4c:	2307      	movs	r3, #7
   10d4e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   10d52:	6823      	ldr	r3, [r4, #0]
   10d54:	b123      	cbz	r3, 10d60 <nrfx_spim_init+0x1ac>
   10d56:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   10d58:	f340 3007 	sbfx	r0, r0, #12, #8
   10d5c:	f7fa fc9e 	bl	b69c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   10d60:	2300      	movs	r3, #0
   10d62:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   10d64:	4810      	ldr	r0, [pc, #64]	; (10da8 <nrfx_spim_init+0x1f4>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   10d66:	2301      	movs	r3, #1
   10d68:	7723      	strb	r3, [r4, #28]
}
   10d6a:	b003      	add	sp, #12
   10d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(pin_number);
   10d70:	f005 fc7f 	bl	16672 <nrf_gpio_pin_set>
   10d74:	e751      	b.n	10c1a <nrfx_spim_init+0x66>
   10d76:	f005 fc7c 	bl	16672 <nrf_gpio_pin_set>
   10d7a:	e784      	b.n	10c86 <nrfx_spim_init+0xd2>
    p_reg->PSEL.CSN = pin;
   10d7c:	f04f 33ff 	mov.w	r3, #4294967295
   10d80:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   10d84:	2300      	movs	r3, #0
   10d86:	f8c8 3568 	str.w	r3, [r8, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   10d8a:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
}
   10d8e:	e7bc      	b.n	10d0a <nrfx_spim_init+0x156>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   10d90:	f043 0304 	orr.w	r3, r3, #4
        break;
   10d94:	e7d5      	b.n	10d42 <nrfx_spim_init+0x18e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   10d96:	f043 0306 	orr.w	r3, r3, #6
        break;
   10d9a:	e7d2      	b.n	10d42 <nrfx_spim_init+0x18e>
        return err_code;
   10d9c:	4803      	ldr	r0, [pc, #12]	; (10dac <nrfx_spim_init+0x1f8>)
   10d9e:	e7e4      	b.n	10d6a <nrfx_spim_init+0x1b6>
        return err_code;
   10da0:	4803      	ldr	r0, [pc, #12]	; (10db0 <nrfx_spim_init+0x1fc>)
   10da2:	e7e2      	b.n	10d6a <nrfx_spim_init+0x1b6>
   10da4:	20002218 	.word	0x20002218
   10da8:	0bad0000 	.word	0x0bad0000
   10dac:	0bad0005 	.word	0x0bad0005
   10db0:	0bad0003 	.word	0x0bad0003

00010db4 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
   10db4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10db8:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
   10dba:	4d2a      	ldr	r5, [pc, #168]	; (10e64 <nrfx_spim_uninit+0xb0>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   10dbc:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
   10dbe:	015e      	lsls	r6, r3, #5
   10dc0:	eb05 1843 	add.w	r8, r5, r3, lsl #5
   10dc4:	59ab      	ldr	r3, [r5, r6]
{
   10dc6:	4607      	mov	r7, r0
    if (p_cb->handler)
   10dc8:	b1cb      	cbz	r3, 10dfe <nrfx_spim_uninit+0x4a>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   10dca:	f344 3007 	sbfx	r0, r4, #12, #8
   10dce:	f7fa fc73 	bl	b6b8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   10dd2:	4b25      	ldr	r3, [pc, #148]	; (10e68 <nrfx_spim_uninit+0xb4>)
   10dd4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
   10dd8:	f898 301d 	ldrb.w	r3, [r8, #29]
   10ddc:	b17b      	cbz	r3, 10dfe <nrfx_spim_uninit+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10dde:	2301      	movs	r3, #1
   10de0:	6163      	str	r3, [r4, #20]
   10de2:	f04f 0864 	mov.w	r8, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10de6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   10dea:	b92b      	cbnz	r3, 10df8 <nrfx_spim_uninit+0x44>
   10dec:	2001      	movs	r0, #1
   10dee:	f005 fb6f 	bl	164d0 <nrfx_busy_wait>
   10df2:	f1b8 0801 	subs.w	r8, r8, #1
   10df6:	d1f6      	bne.n	10de6 <nrfx_spim_uninit+0x32>
    p_cb->transfer_in_progress = false;
   10df8:	19ab      	adds	r3, r5, r6
   10dfa:	2200      	movs	r2, #0
   10dfc:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   10dfe:	2300      	movs	r3, #0
   10e00:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
   10e04:	19ab      	adds	r3, r5, r6
   10e06:	7f9b      	ldrb	r3, [r3, #30]
   10e08:	07db      	lsls	r3, r3, #31
   10e0a:	d41f      	bmi.n	10e4c <nrfx_spim_uninit+0x98>
    return p_reg->PSEL.SCK;
   10e0c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   10e10:	f005 fc49 	bl	166a6 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   10e14:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   10e18:	f005 fc45 	bl	166a6 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   10e1c:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   10e20:	f005 fc41 	bl	166a6 <spim_pin_uninit>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   10e24:	793b      	ldrb	r3, [r7, #4]
   10e26:	b91b      	cbnz	r3, 10e30 <nrfx_spim_uninit+0x7c>
    return p_reg->PSELDCX;
   10e28:	f8d4 056c 	ldr.w	r0, [r4, #1388]	; 0x56c
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   10e2c:	f005 fc3b 	bl	166a6 <spim_pin_uninit>
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   10e30:	19ab      	adds	r3, r5, r6
   10e32:	7fdb      	ldrb	r3, [r3, #31]
   10e34:	2bff      	cmp	r3, #255	; 0xff
   10e36:	d009      	beq.n	10e4c <nrfx_spim_uninit+0x98>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   10e38:	a801      	add	r0, sp, #4
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   10e3a:	9301      	str	r3, [sp, #4]
   10e3c:	f7ff feac 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   10e40:	9b01      	ldr	r3, [sp, #4]
   10e42:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10e46:	2202      	movs	r2, #2
   10e48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_195)
    if (p_spim == NRF_SPIM3)
   10e4c:	4b07      	ldr	r3, [pc, #28]	; (10e6c <nrfx_spim_uninit+0xb8>)
   10e4e:	429c      	cmp	r4, r3
    {
        *(volatile uint32_t *)0x4002F004 = 1;
   10e50:	bf08      	it	eq
   10e52:	2301      	moveq	r3, #1

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   10e54:	4435      	add	r5, r6
        *(volatile uint32_t *)0x4002F004 = 1;
   10e56:	bf08      	it	eq
   10e58:	6063      	streq	r3, [r4, #4]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   10e5a:	2300      	movs	r3, #0
   10e5c:	772b      	strb	r3, [r5, #28]
}
   10e5e:	b002      	add	sp, #8
   10e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e64:	20002218 	.word	0x20002218
   10e68:	00080152 	.word	0x00080152
   10e6c:	4002f000 	.word	0x4002f000

00010e70 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   10e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   10e74:	4f54      	ldr	r7, [pc, #336]	; (10fc8 <nrfx_spim_xfer+0x158>)
   10e76:	7903      	ldrb	r3, [r0, #4]
   10e78:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
   10e7c:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   10e7e:	f898 201d 	ldrb.w	r2, [r8, #29]
{
   10e82:	4681      	mov	r9, r0
   10e84:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
   10e86:	015e      	lsls	r6, r3, #5
   10e88:	2a00      	cmp	r2, #0
   10e8a:	f040 809b 	bne.w	10fc4 <nrfx_spim_xfer+0x154>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   10e8e:	59ba      	ldr	r2, [r7, r6]
   10e90:	b12a      	cbz	r2, 10e9e <nrfx_spim_xfer+0x2e>
   10e92:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   10e96:	bf04      	itt	eq
   10e98:	2201      	moveq	r2, #1
   10e9a:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   10e9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   10ea2:	eb07 0c06 	add.w	ip, r7, r6
   10ea6:	f10c 0c0c 	add.w	ip, ip, #12
   10eaa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
   10eae:	2101      	movs	r1, #1
   10eb0:	4640      	mov	r0, r8
   10eb2:	f005 fc08 	bl	166c6 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10eb6:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   10eb8:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10ebc:	b121      	cbz	r1, 10ec8 <nrfx_spim_xfer+0x58>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   10ebe:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
   10ec2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   10ec6:	d106      	bne.n	10ed6 <nrfx_spim_xfer+0x66>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   10ec8:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   10eca:	b152      	cbz	r2, 10ee2 <nrfx_spim_xfer+0x72>
   10ecc:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   10ed0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   10ed4:	d005      	beq.n	10ee2 <nrfx_spim_xfer+0x72>
        p_cb->transfer_in_progress = false;
   10ed6:	443e      	add	r6, r7
   10ed8:	2300      	movs	r3, #0
        return err_code;
   10eda:	483c      	ldr	r0, [pc, #240]	; (10fcc <nrfx_spim_xfer+0x15c>)
        p_cb->transfer_in_progress = false;
   10edc:	7773      	strb	r3, [r6, #29]
}
   10ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   10ee2:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   10ee4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   10ee8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   10eec:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   10ef0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   10ef4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (p_spim == NRF_SPIM3)
   10ef8:	4a35      	ldr	r2, [pc, #212]	; (10fd0 <nrfx_spim_xfer+0x160>)
   10efa:	4293      	cmp	r3, r2
   10efc:	d125      	bne.n	10f4a <nrfx_spim_xfer+0xda>
    m_anomaly_198_preserved_value = *((volatile uint32_t *)0x40000E00);
   10efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
        anomaly_198_enable(p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   10f02:	e9d4 0100 	ldrd	r0, r1, [r4]
    m_anomaly_198_preserved_value = *((volatile uint32_t *)0x40000E00);
   10f06:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
   10f0a:	4a32      	ldr	r2, [pc, #200]	; (10fd4 <nrfx_spim_xfer+0x164>)
   10f0c:	6014      	str	r4, [r2, #0]
    if (buf_len == 0)
   10f0e:	b1e1      	cbz	r1, 10f4a <nrfx_spim_xfer+0xda>
    if (block_addr >= 0x20010000)
   10f10:	4c31      	ldr	r4, [pc, #196]	; (10fd8 <nrfx_spim_xfer+0x168>)
    uint32_t block_addr      = ((uint32_t)p_buffer) & ~0x1FFF;
   10f12:	f420 52ff 	bic.w	r2, r0, #8160	; 0x1fe0
   10f16:	f022 021f 	bic.w	r2, r2, #31
    if (block_addr >= 0x20010000)
   10f1a:	42a2      	cmp	r2, r4
   10f1c:	d83b      	bhi.n	10f96 <nrfx_spim_xfer+0x126>
    uint32_t buffer_end_addr = ((uint32_t)p_buffer) + buf_len;
   10f1e:	180c      	adds	r4, r1, r0
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
   10f20:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 10fdc <nrfx_spim_xfer+0x16c>
    uint32_t block_flag      = (1UL << ((block_addr >> 13) & 0xFFFF));
   10f24:	f3c2 304f 	ubfx	r0, r2, #13, #16
   10f28:	2101      	movs	r1, #1
   10f2a:	4081      	lsls	r1, r0
    uint32_t occupied_blocks = 0;
   10f2c:	2000      	movs	r0, #0
            block_addr  += 0x2000;
   10f2e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
   10f32:	4294      	cmp	r4, r2
            occupied_blocks |= block_flag;
   10f34:	ea40 0001 	orr.w	r0, r0, r1
            block_flag <<= 1;
   10f38:	ea4f 0141 	mov.w	r1, r1, lsl #1
        } while ((block_addr < buffer_end_addr) && (block_addr < 0x20012000));
   10f3c:	d901      	bls.n	10f42 <nrfx_spim_xfer+0xd2>
   10f3e:	4562      	cmp	r2, ip
   10f40:	d3f5      	bcc.n	10f2e <nrfx_spim_xfer+0xbe>
    *((volatile uint32_t *)0x40000E00) = occupied_blocks;
   10f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10f46:	f8c2 0e00 	str.w	r0, [r2, #3584]	; 0xe00
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10f4a:	2200      	movs	r2, #0
   10f4c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10f50:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   10f54:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   10f58:	bf18      	it	ne
   10f5a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   10f5c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   10f60:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   10f64:	bf18      	it	ne
   10f66:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   10f68:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   10f6c:	072a      	lsls	r2, r5, #28
   10f6e:	d515      	bpl.n	10f9c <nrfx_spim_xfer+0x12c>
    if (!p_cb->handler)
   10f70:	59ba      	ldr	r2, [r7, r6]
   10f72:	b9e2      	cbnz	r2, 10fae <nrfx_spim_xfer+0x13e>
        if (p_spim == NRF_SPIM3)
   10f74:	4a16      	ldr	r2, [pc, #88]	; (10fd0 <nrfx_spim_xfer+0x160>)
   10f76:	4293      	cmp	r3, r2
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
   10f78:	bf02      	ittt	eq
   10f7a:	4b16      	ldreq	r3, [pc, #88]	; (10fd4 <nrfx_spim_xfer+0x164>)
   10f7c:	681a      	ldreq	r2, [r3, #0]
   10f7e:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
        set_ss_pin_state(p_cb, false);
   10f82:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
   10f86:	bf08      	it	eq
   10f88:	f8c3 2e00 	streq.w	r2, [r3, #3584]	; 0xe00
        set_ss_pin_state(p_cb, false);
   10f8c:	4640      	mov	r0, r8
   10f8e:	f005 fb9a 	bl	166c6 <set_ss_pin_state>
    return err_code;
   10f92:	4813      	ldr	r0, [pc, #76]	; (10fe0 <nrfx_spim_xfer+0x170>)
   10f94:	e7a3      	b.n	10ede <nrfx_spim_xfer+0x6e>
        occupied_blocks = (1UL << 8);
   10f96:	f44f 7080 	mov.w	r0, #256	; 0x100
   10f9a:	e7d2      	b.n	10f42 <nrfx_spim_xfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10f9c:	2201      	movs	r2, #1
   10f9e:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
   10fa0:	59ba      	ldr	r2, [r7, r6]
   10fa2:	b922      	cbnz	r2, 10fae <nrfx_spim_xfer+0x13e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10fa4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   10fa8:	2a00      	cmp	r2, #0
   10faa:	d0fb      	beq.n	10fa4 <nrfx_spim_xfer+0x134>
   10fac:	e7e2      	b.n	10f74 <nrfx_spim_xfer+0x104>
    if (!enable)
   10fae:	f015 0f04 	tst.w	r5, #4
   10fb2:	f04f 0240 	mov.w	r2, #64	; 0x40
   10fb6:	d002      	beq.n	10fbe <nrfx_spim_xfer+0x14e>
    p_reg->INTENCLR = mask;
   10fb8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   10fbc:	e7e9      	b.n	10f92 <nrfx_spim_xfer+0x122>
    p_reg->INTENSET = mask;
   10fbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10fc2:	e7e6      	b.n	10f92 <nrfx_spim_xfer+0x122>
        return err_code;
   10fc4:	4807      	ldr	r0, [pc, #28]	; (10fe4 <nrfx_spim_xfer+0x174>)
   10fc6:	e78a      	b.n	10ede <nrfx_spim_xfer+0x6e>
   10fc8:	20002218 	.word	0x20002218
   10fcc:	0bad000a 	.word	0x0bad000a
   10fd0:	4002f000 	.word	0x4002f000
   10fd4:	20002214 	.word	0x20002214
   10fd8:	2000ffff 	.word	0x2000ffff
   10fdc:	20012000 	.word	0x20012000
   10fe0:	0bad0000 	.word	0x0bad0000
   10fe4:	0bad000b 	.word	0x0bad000b

00010fe8 <nrfx_spim_3_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   10fe8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10fea:	4b0f      	ldr	r3, [pc, #60]	; (11028 <nrfx_spim_3_irq_handler+0x40>)
   10fec:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   10ff0:	b1c2      	cbz	r2, 11024 <nrfx_spim_3_irq_handler+0x3c>
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
   10ff2:	4a0e      	ldr	r2, [pc, #56]	; (1102c <nrfx_spim_3_irq_handler+0x44>)
    set_ss_pin_state(p_cb, false);
   10ff4:	4c0e      	ldr	r4, [pc, #56]	; (11030 <nrfx_spim_3_irq_handler+0x48>)
    *((volatile uint32_t *)0x40000E00) = m_anomaly_198_preserved_value;
   10ff6:	6811      	ldr	r1, [r2, #0]
   10ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10ffc:	2500      	movs	r5, #0
   10ffe:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00
    set_ss_pin_state(p_cb, false);
   11002:	4620      	mov	r0, r4
   11004:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
   11008:	4629      	mov	r1, r5
   1100a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1100e:	f005 fb5a 	bl	166c6 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   11012:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   11014:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   11016:	e9d4 3100 	ldrd	r3, r1, [r4]
   1101a:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   1101e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   11022:	4718      	bx	r3
}
   11024:	bd70      	pop	{r4, r5, r6, pc}
   11026:	bf00      	nop
   11028:	4002f000 	.word	0x4002f000
   1102c:	20002214 	.word	0x20002214
   11030:	20002218 	.word	0x20002218

00011034 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   11034:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   11036:	4c14      	ldr	r4, [pc, #80]	; (11088 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   11038:	4a14      	ldr	r2, [pc, #80]	; (1108c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1103a:	4915      	ldr	r1, [pc, #84]	; (11090 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1103c:	2303      	movs	r3, #3
   1103e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   11040:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   11042:	4b14      	ldr	r3, [pc, #80]	; (11094 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   11044:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   11046:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   11048:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1104c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1104e:	2300      	movs	r3, #0
   11050:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   11052:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   11054:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   11056:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   11058:	4a0f      	ldr	r2, [pc, #60]	; (11098 <_DoInit+0x64>)
   1105a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1105c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1105e:	2210      	movs	r2, #16
   11060:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   11062:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   11064:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   11066:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   11068:	f004 fab7 	bl	155da <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   1106c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   11070:	490a      	ldr	r1, [pc, #40]	; (1109c <_DoInit+0x68>)
   11072:	4620      	mov	r0, r4
   11074:	f004 fab1 	bl	155da <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   11078:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   1107c:	2320      	movs	r3, #32
   1107e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   11080:	f3bf 8f5f 	dmb	sy
}
   11084:	bd10      	pop	{r4, pc}
   11086:	bf00      	nop
   11088:	20002238 	.word	0x20002238
   1108c:	00017e84 	.word	0x00017e84
   11090:	00017e8d 	.word	0x00017e8d
   11094:	2000301b 	.word	0x2000301b
   11098:	2000300b 	.word	0x2000300b
   1109c:	00017e91 	.word	0x00017e91

000110a0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   110a0:	4b10      	ldr	r3, [pc, #64]	; (110e4 <z_sys_init_run_level+0x44>)
{
   110a2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   110a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   110a8:	3001      	adds	r0, #1
   110aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   110ae:	42a6      	cmp	r6, r4
   110b0:	d800      	bhi.n	110b4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   110b2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   110b4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   110b8:	b18d      	cbz	r5, 110de <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   110ba:	4628      	mov	r0, r5
   110bc:	4798      	blx	r3
			if (rc != 0) {
   110be:	b138      	cbz	r0, 110d0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   110c0:	2800      	cmp	r0, #0
   110c2:	bfb8      	it	lt
   110c4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   110c6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   110c8:	28ff      	cmp	r0, #255	; 0xff
   110ca:	bfa8      	it	ge
   110cc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   110ce:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   110d0:	68ea      	ldr	r2, [r5, #12]
   110d2:	7853      	ldrb	r3, [r2, #1]
   110d4:	f043 0301 	orr.w	r3, r3, #1
   110d8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   110da:	3408      	adds	r4, #8
   110dc:	e7e7      	b.n	110ae <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   110de:	4798      	blx	r3
   110e0:	e7fb      	b.n	110da <z_sys_init_run_level+0x3a>
   110e2:	bf00      	nop
   110e4:	00017844 	.word	0x00017844

000110e8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   110e8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   110ea:	4b0a      	ldr	r3, [pc, #40]	; (11114 <bg_thread_main+0x2c>)
   110ec:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   110ee:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   110f0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   110f2:	f7ff ffd5 	bl	110a0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   110f6:	f001 fa95 	bl	12624 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   110fa:	2004      	movs	r0, #4
   110fc:	f7ff ffd0 	bl	110a0 <z_sys_init_run_level>

	z_init_static_threads();
   11100:	f000 f96e 	bl	113e0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   11104:	f005 ff89 	bl	1701a <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   11108:	4a03      	ldr	r2, [pc, #12]	; (11118 <bg_thread_main+0x30>)
   1110a:	7b13      	ldrb	r3, [r2, #12]
   1110c:	f023 0301 	bic.w	r3, r3, #1
   11110:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   11112:	bd08      	pop	{r3, pc}
   11114:	2000341b 	.word	0x2000341b
   11118:	200019f8 	.word	0x200019f8

0001111c <z_bss_zero>:
{
   1111c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1111e:	4803      	ldr	r0, [pc, #12]	; (1112c <z_bss_zero+0x10>)
   11120:	4a03      	ldr	r2, [pc, #12]	; (11130 <z_bss_zero+0x14>)
   11122:	2100      	movs	r1, #0
   11124:	1a12      	subs	r2, r2, r0
   11126:	f005 fb0c 	bl	16742 <z_early_memset>
}
   1112a:	bd08      	pop	{r3, pc}
   1112c:	20000748 	.word	0x20000748
   11130:	20003420 	.word	0x20003420

00011134 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   11134:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   11136:	2300      	movs	r3, #0
{
   11138:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1113a:	2201      	movs	r2, #1
   1113c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   11140:	4e13      	ldr	r6, [pc, #76]	; (11190 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   11142:	4d14      	ldr	r5, [pc, #80]	; (11194 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   11144:	9301      	str	r3, [sp, #4]
   11146:	220f      	movs	r2, #15
   11148:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1114c:	4912      	ldr	r1, [pc, #72]	; (11198 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1114e:	2314      	movs	r3, #20
   11150:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   11154:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   11158:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1115a:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1115e:	fb00 1104 	mla	r1, r0, r4, r1
   11162:	4b0e      	ldr	r3, [pc, #56]	; (1119c <z_init_cpu+0x68>)
   11164:	9500      	str	r5, [sp, #0]
   11166:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1116a:	4630      	mov	r0, r6
   1116c:	f000 f8da 	bl	11324 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11170:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   11172:	4a0b      	ldr	r2, [pc, #44]	; (111a0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   11174:	60ee      	str	r6, [r5, #12]
   11176:	f023 0304 	bic.w	r3, r3, #4
   1117a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1117c:	f44f 6304 	mov.w	r3, #2112	; 0x840
   11180:	fb04 3303 	mla	r3, r4, r3, r3
   11184:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   11186:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   11188:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1118a:	b006      	add	sp, #24
   1118c:	bd70      	pop	{r4, r5, r6, pc}
   1118e:	bf00      	nop
   11190:	20001978 	.word	0x20001978
   11194:	200022e0 	.word	0x200022e0
   11198:	20004f80 	.word	0x20004f80
   1119c:	00011499 	.word	0x00011499
   111a0:	20004740 	.word	0x20004740

000111a4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   111a4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   111a6:	2000      	movs	r0, #0
{
   111a8:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   111aa:	f7ff ff79 	bl	110a0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   111ae:	4b2d      	ldr	r3, [pc, #180]	; (11264 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   111b0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   111b4:	4d2c      	ldr	r5, [pc, #176]	; (11268 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   111b6:	4e2d      	ldr	r6, [pc, #180]	; (1126c <z_cstart+0xc8>)
   111b8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   111ba:	4f2d      	ldr	r7, [pc, #180]	; (11270 <z_cstart+0xcc>)
   111bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   111c0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   111c2:	23e0      	movs	r3, #224	; 0xe0
   111c4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   111c8:	2400      	movs	r4, #0
   111ca:	2320      	movs	r3, #32
   111cc:	77eb      	strb	r3, [r5, #31]
   111ce:	762c      	strb	r4, [r5, #24]
   111d0:	766c      	strb	r4, [r5, #25]
   111d2:	76ac      	strb	r4, [r5, #26]
   111d4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   111d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   111da:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   111de:	626b      	str	r3, [r5, #36]	; 0x24
   111e0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   111e4:	f7fa fcda 	bl	bb9c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   111e8:	f7fa fa38 	bl	b65c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   111ec:	f04f 33ff 	mov.w	r3, #4294967295
   111f0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   111f2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   111f4:	f7fa fe0c 	bl	be10 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   111f8:	f7fa fd72 	bl	bce0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   111fc:	f240 1301 	movw	r3, #257	; 0x101
   11200:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   11204:	ab06      	add	r3, sp, #24
   11206:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   11208:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1120c:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1120e:	f005 fa71 	bl	166f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   11212:	2001      	movs	r0, #1
   11214:	f7ff ff44 	bl	110a0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   11218:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1121a:	4d16      	ldr	r5, [pc, #88]	; (11274 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1121c:	f7ff ff40 	bl	110a0 <z_sys_init_run_level>
	z_sched_init();
   11220:	f000 fecc 	bl	11fbc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   11224:	4b14      	ldr	r3, [pc, #80]	; (11278 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
   11226:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   11228:	9305      	str	r3, [sp, #20]
   1122a:	2301      	movs	r3, #1
   1122c:	4913      	ldr	r1, [pc, #76]	; (1127c <z_cstart+0xd8>)
   1122e:	9400      	str	r4, [sp, #0]
   11230:	e9cd 4303 	strd	r4, r3, [sp, #12]
   11234:	f44f 6200 	mov.w	r2, #2048	; 0x800
   11238:	463b      	mov	r3, r7
   1123a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1123e:	4628      	mov	r0, r5
   11240:	f000 f870 	bl	11324 <z_setup_new_thread>
   11244:	7b6a      	ldrb	r2, [r5, #13]
   11246:	4606      	mov	r6, r0
   11248:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1124c:	4628      	mov	r0, r5
   1124e:	736a      	strb	r2, [r5, #13]
   11250:	f005 fc9a 	bl	16b88 <z_ready_thread>
	z_init_cpu(0);
   11254:	4620      	mov	r0, r4
   11256:	f7ff ff6d 	bl	11134 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1125a:	463a      	mov	r2, r7
   1125c:	4631      	mov	r1, r6
   1125e:	4628      	mov	r0, r5
   11260:	f7fa fb1a 	bl	b898 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   11264:	20004f80 	.word	0x20004f80
   11268:	e000ed00 	.word	0xe000ed00
   1126c:	200022e0 	.word	0x200022e0
   11270:	000110e9 	.word	0x000110e9
   11274:	200019f8 	.word	0x200019f8
   11278:	00017e98 	.word	0x00017e98
   1127c:	20005100 	.word	0x20005100

00011280 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   11280:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   11282:	4c06      	ldr	r4, [pc, #24]	; (1129c <statics_init+0x1c>)
   11284:	4d06      	ldr	r5, [pc, #24]	; (112a0 <statics_init+0x20>)
   11286:	42ac      	cmp	r4, r5
   11288:	d301      	bcc.n	1128e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1128a:	2000      	movs	r0, #0
   1128c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1128e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   11292:	4620      	mov	r0, r4
   11294:	f005 fa59 	bl	1674a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   11298:	3414      	adds	r4, #20
   1129a:	e7f4      	b.n	11286 <statics_init+0x6>
   1129c:	20000644 	.word	0x20000644
   112a0:	20000644 	.word	0x20000644

000112a4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   112a4:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   112a6:	4c06      	ldr	r4, [pc, #24]	; (112c0 <init_mem_slab_module+0x1c>)
   112a8:	4d06      	ldr	r5, [pc, #24]	; (112c4 <init_mem_slab_module+0x20>)
	int rc = 0;
   112aa:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   112ac:	42ac      	cmp	r4, r5
   112ae:	d300      	bcc.n	112b2 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   112b0:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   112b2:	4620      	mov	r0, r4
   112b4:	f005 fabb 	bl	1682e <create_free_list>
		if (rc < 0) {
   112b8:	2800      	cmp	r0, #0
   112ba:	dbf9      	blt.n	112b0 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   112bc:	341c      	adds	r4, #28
   112be:	e7f5      	b.n	112ac <init_mem_slab_module+0x8>
   112c0:	20000628 	.word	0x20000628
   112c4:	20000644 	.word	0x20000644

000112c8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   112c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   112ca:	460c      	mov	r4, r1
	__asm__ volatile(
   112cc:	f04f 0540 	mov.w	r5, #64	; 0x40
   112d0:	f3ef 8111 	mrs	r1, BASEPRI
   112d4:	f385 8812 	msr	BASEPRI_MAX, r5
   112d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   112dc:	6945      	ldr	r5, [r0, #20]
   112de:	b15d      	cbz	r5, 112f8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   112e0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   112e2:	682b      	ldr	r3, [r5, #0]
   112e4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   112e6:	6983      	ldr	r3, [r0, #24]
   112e8:	3301      	adds	r3, #1
   112ea:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   112ec:	2000      	movs	r0, #0
	__asm__ volatile(
   112ee:	f381 8811 	msr	BASEPRI, r1
   112f2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   112f6:	e011      	b.n	1131c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   112f8:	ea52 0603 	orrs.w	r6, r2, r3
   112fc:	d103      	bne.n	11306 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   112fe:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   11300:	f06f 000b 	mvn.w	r0, #11
   11304:	e7f3      	b.n	112ee <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   11306:	e9cd 2300 	strd	r2, r3, [sp]
   1130a:	4602      	mov	r2, r0
   1130c:	3008      	adds	r0, #8
   1130e:	f000 fd5f 	bl	11dd0 <z_pend_curr>
		if (result == 0) {
   11312:	b918      	cbnz	r0, 1131c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   11314:	4b02      	ldr	r3, [pc, #8]	; (11320 <k_mem_slab_alloc+0x58>)
   11316:	689b      	ldr	r3, [r3, #8]
   11318:	695b      	ldr	r3, [r3, #20]
   1131a:	6023      	str	r3, [r4, #0]
}
   1131c:	b002      	add	sp, #8
   1131e:	bd70      	pop	{r4, r5, r6, pc}
   11320:	200022e0 	.word	0x200022e0

00011324 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   11324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   11328:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1132a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1132c:	2604      	movs	r6, #4
   1132e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   11330:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11332:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   11334:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   11338:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1133a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1133c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   11340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   11342:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   11344:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   11348:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1134a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1134e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   11352:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   11354:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   11356:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   11358:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1135c:	9202      	str	r2, [sp, #8]
   1135e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11360:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   11362:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   11364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11366:	9200      	str	r2, [sp, #0]
   11368:	4642      	mov	r2, r8
{
   1136a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1136c:	f7fa fa62 	bl	b834 <arch_new_thread>
	if (!_current) {
   11370:	4b04      	ldr	r3, [pc, #16]	; (11384 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   11372:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   11374:	689b      	ldr	r3, [r3, #8]
   11376:	b103      	cbz	r3, 1137a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   11378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1137a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1137c:	4640      	mov	r0, r8
   1137e:	b004      	add	sp, #16
   11380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11384:	200022e0 	.word	0x200022e0

00011388 <z_impl_k_thread_create>:
{
   11388:	b5f0      	push	{r4, r5, r6, r7, lr}
   1138a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1138c:	2500      	movs	r5, #0
   1138e:	9505      	str	r5, [sp, #20]
   11390:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11392:	9504      	str	r5, [sp, #16]
   11394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   11396:	9503      	str	r5, [sp, #12]
   11398:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1139a:	9502      	str	r5, [sp, #8]
{
   1139c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   113a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   113a2:	9501      	str	r5, [sp, #4]
   113a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   113a6:	9500      	str	r5, [sp, #0]
{
   113a8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   113aa:	f7ff ffbb 	bl	11324 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   113ae:	f1b6 3fff 	cmp.w	r6, #4294967295
   113b2:	bf08      	it	eq
   113b4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   113b8:	d005      	beq.n	113c6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   113ba:	ea56 0307 	orrs.w	r3, r6, r7
   113be:	d105      	bne.n	113cc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   113c0:	4620      	mov	r0, r4
   113c2:	f000 fd7b 	bl	11ebc <z_sched_start>
}
   113c6:	4620      	mov	r0, r4
   113c8:	b007      	add	sp, #28
   113ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   113cc:	4903      	ldr	r1, [pc, #12]	; (113dc <z_impl_k_thread_create+0x54>)
   113ce:	463a      	mov	r2, r7
   113d0:	4633      	mov	r3, r6
   113d2:	f104 0018 	add.w	r0, r4, #24
   113d6:	f000 ff87 	bl	122e8 <z_add_timeout>
   113da:	e7f4      	b.n	113c6 <z_impl_k_thread_create+0x3e>
   113dc:	00016bed 	.word	0x00016bed

000113e0 <z_init_static_threads>:
{
   113e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   113e4:	4c29      	ldr	r4, [pc, #164]	; (1148c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   113e6:	4d2a      	ldr	r5, [pc, #168]	; (11490 <z_init_static_threads+0xb0>)
{
   113e8:	b087      	sub	sp, #28
   113ea:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   113ec:	42ae      	cmp	r6, r5
   113ee:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   113f2:	d30f      	bcc.n	11414 <z_init_static_threads+0x34>
	k_sched_lock();
   113f4:	f000 fdb2 	bl	11f5c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   113f8:	4c24      	ldr	r4, [pc, #144]	; (1148c <z_init_static_threads+0xac>)
   113fa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 11494 <z_init_static_threads+0xb4>
   113fe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11402:	f240 37e7 	movw	r7, #999	; 0x3e7
   11406:	42ac      	cmp	r4, r5
   11408:	d320      	bcc.n	1144c <z_init_static_threads+0x6c>
}
   1140a:	b007      	add	sp, #28
   1140c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   11410:	f000 bdb8 	b.w	11f84 <k_sched_unlock>
		z_setup_new_thread(
   11414:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11418:	9305      	str	r3, [sp, #20]
   1141a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1141e:	9304      	str	r3, [sp, #16]
   11420:	f854 3c10 	ldr.w	r3, [r4, #-16]
   11424:	9303      	str	r3, [sp, #12]
   11426:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1142a:	9302      	str	r3, [sp, #8]
   1142c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   11430:	9301      	str	r3, [sp, #4]
   11432:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   11436:	9300      	str	r3, [sp, #0]
   11438:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   1143c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   11440:	f7ff ff70 	bl	11324 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   11444:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   11448:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1144a:	e7ce      	b.n	113ea <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1144c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1144e:	1c5a      	adds	r2, r3, #1
   11450:	d00d      	beq.n	1146e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   11452:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11456:	2100      	movs	r1, #0
   11458:	4638      	mov	r0, r7
   1145a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1145e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   11462:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   11466:	d104      	bne.n	11472 <z_init_static_threads+0x92>
	z_sched_start(thread);
   11468:	4640      	mov	r0, r8
   1146a:	f000 fd27 	bl	11ebc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1146e:	342c      	adds	r4, #44	; 0x2c
   11470:	e7c9      	b.n	11406 <z_init_static_threads+0x26>
   11472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11476:	2300      	movs	r3, #0
   11478:	f7ee fe42 	bl	100 <__aeabi_uldivmod>
   1147c:	4602      	mov	r2, r0
   1147e:	460b      	mov	r3, r1
   11480:	f108 0018 	add.w	r0, r8, #24
   11484:	4649      	mov	r1, r9
   11486:	f000 ff2f 	bl	122e8 <z_add_timeout>
   1148a:	e7f0      	b.n	1146e <z_init_static_threads+0x8e>
   1148c:	0001737c 	.word	0x0001737c
   11490:	000173a8 	.word	0x000173a8
   11494:	00016bed 	.word	0x00016bed

00011498 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   11498:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1149a:	4c0b      	ldr	r4, [pc, #44]	; (114c8 <idle+0x30>)
	return !z_sys_post_kernel;
   1149c:	4d0b      	ldr	r5, [pc, #44]	; (114cc <idle+0x34>)
	__asm__ volatile(
   1149e:	f04f 0240 	mov.w	r2, #64	; 0x40
   114a2:	f3ef 8311 	mrs	r3, BASEPRI
   114a6:	f382 8812 	msr	BASEPRI_MAX, r2
   114aa:	f3bf 8f6f 	isb	sy
   114ae:	f005 fc34 	bl	16d1a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   114b2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   114b4:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   114b6:	b913      	cbnz	r3, 114be <idle+0x26>
	arch_cpu_idle();
   114b8:	f7fa f8d6 	bl	b668 <arch_cpu_idle>
}
   114bc:	e7ef      	b.n	1149e <idle+0x6>
   114be:	f7f9 ff13 	bl	b2e8 <pm_system_suspend>
   114c2:	2800      	cmp	r0, #0
   114c4:	d1eb      	bne.n	1149e <idle+0x6>
   114c6:	e7f7      	b.n	114b8 <idle+0x20>
   114c8:	200022e0 	.word	0x200022e0
   114cc:	2000341b 	.word	0x2000341b

000114d0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   114d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   114d4:	4604      	mov	r4, r0
   114d6:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   114d8:	f100 0808 	add.w	r8, r0, #8
   114dc:	f04f 0140 	mov.w	r1, #64	; 0x40
   114e0:	f3ef 8711 	mrs	r7, BASEPRI
   114e4:	f381 8812 	msr	BASEPRI_MAX, r1
   114e8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   114ec:	6a05      	ldr	r5, [r0, #32]
   114ee:	68c1      	ldr	r1, [r0, #12]
   114f0:	428d      	cmp	r5, r1
   114f2:	d22f      	bcs.n	11554 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   114f4:	f005 fb7e 	bl	16bf4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   114f8:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   114fa:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   114fc:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   114fe:	b178      	cbz	r0, 11520 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   11500:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   11502:	6940      	ldr	r0, [r0, #20]
   11504:	f004 f8aa 	bl	1565c <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   11508:	4628      	mov	r0, r5
   1150a:	67ec      	str	r4, [r5, #124]	; 0x7c
   1150c:	f005 fb3c 	bl	16b88 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   11510:	4640      	mov	r0, r8
   11512:	4639      	mov	r1, r7
   11514:	f000 fcc0 	bl	11e98 <z_reschedule>
			return 0;
   11518:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1151a:	b002      	add	sp, #8
   1151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   11520:	69e0      	ldr	r0, [r4, #28]
   11522:	f004 f89b 	bl	1565c <memcpy>
			msgq->write_ptr += msgq->msg_size;
   11526:	69e3      	ldr	r3, [r4, #28]
   11528:	68a2      	ldr	r2, [r4, #8]
   1152a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1152c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1152e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   11530:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   11532:	bf04      	itt	eq
   11534:	6923      	ldreq	r3, [r4, #16]
   11536:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   11538:	6a23      	ldr	r3, [r4, #32]
   1153a:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1153c:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   11540:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   11542:	2110      	movs	r1, #16
   11544:	f005 fd54 	bl	16ff0 <z_handle_obj_poll_events>
		result = 0;
   11548:	2000      	movs	r0, #0
	__asm__ volatile(
   1154a:	f387 8811 	msr	BASEPRI, r7
   1154e:	f3bf 8f6f 	isb	sy
	return result;
   11552:	e7e2      	b.n	1151a <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11554:	ea52 0103 	orrs.w	r1, r2, r3
   11558:	d00a      	beq.n	11570 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   1155a:	4907      	ldr	r1, [pc, #28]	; (11578 <z_impl_k_msgq_put+0xa8>)
   1155c:	6889      	ldr	r1, [r1, #8]
   1155e:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   11560:	e9cd 2300 	strd	r2, r3, [sp]
   11564:	4639      	mov	r1, r7
   11566:	4602      	mov	r2, r0
   11568:	4640      	mov	r0, r8
   1156a:	f000 fc31 	bl	11dd0 <z_pend_curr>
		return result;
   1156e:	e7d4      	b.n	1151a <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   11570:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11574:	e7e9      	b.n	1154a <z_impl_k_msgq_put+0x7a>
   11576:	bf00      	nop
   11578:	200022e0 	.word	0x200022e0

0001157c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1157c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1157e:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   11580:	f104 0708 	add.w	r7, r4, #8
{
   11584:	4608      	mov	r0, r1
	__asm__ volatile(
   11586:	f04f 0140 	mov.w	r1, #64	; 0x40
   1158a:	f3ef 8611 	mrs	r6, BASEPRI
   1158e:	f381 8812 	msr	BASEPRI_MAX, r1
   11592:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   11596:	6a21      	ldr	r1, [r4, #32]
   11598:	2900      	cmp	r1, #0
   1159a:	d031      	beq.n	11600 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1159c:	68a2      	ldr	r2, [r4, #8]
   1159e:	69a1      	ldr	r1, [r4, #24]
   115a0:	f004 f85c 	bl	1565c <memcpy>
		msgq->read_ptr += msgq->msg_size;
   115a4:	69a3      	ldr	r3, [r4, #24]
   115a6:	68a2      	ldr	r2, [r4, #8]
   115a8:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   115aa:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   115ac:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   115ae:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   115b0:	bf04      	itt	eq
   115b2:	6923      	ldreq	r3, [r4, #16]
   115b4:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   115b6:	6a23      	ldr	r3, [r4, #32]
   115b8:	3b01      	subs	r3, #1
   115ba:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   115bc:	4620      	mov	r0, r4
   115be:	f005 fb19 	bl	16bf4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   115c2:	4605      	mov	r5, r0
   115c4:	b360      	cbz	r0, 11620 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   115c6:	6941      	ldr	r1, [r0, #20]
   115c8:	68a2      	ldr	r2, [r4, #8]
   115ca:	69e0      	ldr	r0, [r4, #28]
   115cc:	f004 f846 	bl	1565c <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   115d0:	69e3      	ldr	r3, [r4, #28]
   115d2:	68a2      	ldr	r2, [r4, #8]
   115d4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   115d6:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   115d8:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   115da:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   115dc:	bf04      	itt	eq
   115de:	6923      	ldreq	r3, [r4, #16]
   115e0:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   115e2:	6a23      	ldr	r3, [r4, #32]
   115e4:	3301      	adds	r3, #1
   115e6:	6223      	str	r3, [r4, #32]
   115e8:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   115ea:	4628      	mov	r0, r5
   115ec:	67ec      	str	r4, [r5, #124]	; 0x7c
   115ee:	f005 facb 	bl	16b88 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   115f2:	4638      	mov	r0, r7
   115f4:	4631      	mov	r1, r6
   115f6:	f000 fc4f 	bl	11e98 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   115fa:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   115fc:	b003      	add	sp, #12
   115fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11600:	ea52 0103 	orrs.w	r1, r2, r3
   11604:	d00a      	beq.n	1161c <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   11606:	4909      	ldr	r1, [pc, #36]	; (1162c <z_impl_k_msgq_get+0xb0>)
   11608:	6889      	ldr	r1, [r1, #8]
   1160a:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1160c:	e9cd 2300 	strd	r2, r3, [sp]
   11610:	4631      	mov	r1, r6
   11612:	4622      	mov	r2, r4
   11614:	4638      	mov	r0, r7
   11616:	f000 fbdb 	bl	11dd0 <z_pend_curr>
		return result;
   1161a:	e7ef      	b.n	115fc <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   1161c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   11620:	f386 8811 	msr	BASEPRI, r6
   11624:	f3bf 8f6f 	isb	sy
	return result;
   11628:	e7e8      	b.n	115fc <z_impl_k_msgq_get+0x80>
   1162a:	bf00      	nop
   1162c:	200022e0 	.word	0x200022e0

00011630 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   11630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11634:	4604      	mov	r4, r0
   11636:	4617      	mov	r7, r2
   11638:	461e      	mov	r6, r3
	__asm__ volatile(
   1163a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1163e:	f3ef 8811 	mrs	r8, BASEPRI
   11642:	f383 8812 	msr	BASEPRI_MAX, r3
   11646:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1164a:	68c3      	ldr	r3, [r0, #12]
   1164c:	4a33      	ldr	r2, [pc, #204]	; (1171c <z_impl_k_mutex_lock+0xec>)
   1164e:	b17b      	cbz	r3, 11670 <z_impl_k_mutex_lock+0x40>
   11650:	6880      	ldr	r0, [r0, #8]
   11652:	6891      	ldr	r1, [r2, #8]
   11654:	4288      	cmp	r0, r1
   11656:	d019      	beq.n	1168c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   11658:	ea57 0306 	orrs.w	r3, r7, r6
   1165c:	d118      	bne.n	11690 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1165e:	f388 8811 	msr	BASEPRI, r8
   11662:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   11666:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1166a:	b002      	add	sp, #8
   1166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   11670:	6891      	ldr	r1, [r2, #8]
   11672:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   11676:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   11678:	3301      	adds	r3, #1
   1167a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1167c:	6893      	ldr	r3, [r2, #8]
   1167e:	60a3      	str	r3, [r4, #8]
   11680:	f388 8811 	msr	BASEPRI, r8
   11684:	f3bf 8f6f 	isb	sy
		return 0;
   11688:	2000      	movs	r0, #0
   1168a:	e7ee      	b.n	1166a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1168c:	6921      	ldr	r1, [r4, #16]
   1168e:	e7f2      	b.n	11676 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   11690:	f991 100e 	ldrsb.w	r1, [r1, #14]
   11694:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   11698:	4299      	cmp	r1, r3
   1169a:	bfa8      	it	ge
   1169c:	4619      	movge	r1, r3
   1169e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   116a2:	4291      	cmp	r1, r2
   116a4:	bfb8      	it	lt
   116a6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   116a8:	428b      	cmp	r3, r1
   116aa:	dd2e      	ble.n	1170a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   116ac:	f005 f931 	bl	16912 <adjust_owner_prio.isra.0>
   116b0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   116b2:	e9cd 7600 	strd	r7, r6, [sp]
   116b6:	481a      	ldr	r0, [pc, #104]	; (11720 <z_impl_k_mutex_lock+0xf0>)
   116b8:	4622      	mov	r2, r4
   116ba:	4641      	mov	r1, r8
   116bc:	f000 fb88 	bl	11dd0 <z_pend_curr>
	if (got_mutex == 0) {
   116c0:	2800      	cmp	r0, #0
   116c2:	d0e1      	beq.n	11688 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   116c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   116c8:	f3ef 8611 	mrs	r6, BASEPRI
   116cc:	f383 8812 	msr	BASEPRI_MAX, r3
   116d0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   116d4:	68a0      	ldr	r0, [r4, #8]
   116d6:	b1d0      	cbz	r0, 1170e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   116d8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   116da:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   116dc:	429c      	cmp	r4, r3
   116de:	d00a      	beq.n	116f6 <z_impl_k_mutex_lock+0xc6>
   116e0:	b14b      	cbz	r3, 116f6 <z_impl_k_mutex_lock+0xc6>
   116e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   116e6:	4299      	cmp	r1, r3
   116e8:	bfa8      	it	ge
   116ea:	4619      	movge	r1, r3
   116ec:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   116f0:	4299      	cmp	r1, r3
   116f2:	bfb8      	it	lt
   116f4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   116f6:	f005 f90c 	bl	16912 <adjust_owner_prio.isra.0>
   116fa:	b140      	cbz	r0, 1170e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   116fc:	4808      	ldr	r0, [pc, #32]	; (11720 <z_impl_k_mutex_lock+0xf0>)
   116fe:	4631      	mov	r1, r6
   11700:	f000 fbca 	bl	11e98 <z_reschedule>
	return -EAGAIN;
   11704:	f06f 000a 	mvn.w	r0, #10
   11708:	e7af      	b.n	1166a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1170a:	2500      	movs	r5, #0
   1170c:	e7d1      	b.n	116b2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1170e:	2d00      	cmp	r5, #0
   11710:	d1f4      	bne.n	116fc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   11712:	f386 8811 	msr	BASEPRI, r6
   11716:	f3bf 8f6f 	isb	sy
   1171a:	e7f3      	b.n	11704 <z_impl_k_mutex_lock+0xd4>
   1171c:	200022e0 	.word	0x200022e0
   11720:	2000341c 	.word	0x2000341c

00011724 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   11724:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   11726:	6883      	ldr	r3, [r0, #8]
{
   11728:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1172a:	b36b      	cbz	r3, 11788 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1172c:	4a19      	ldr	r2, [pc, #100]	; (11794 <z_impl_k_mutex_unlock+0x70>)
   1172e:	6892      	ldr	r2, [r2, #8]
   11730:	4293      	cmp	r3, r2
   11732:	d12c      	bne.n	1178e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   11734:	68c3      	ldr	r3, [r0, #12]
   11736:	2b01      	cmp	r3, #1
   11738:	d903      	bls.n	11742 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1173a:	3b01      	subs	r3, #1
   1173c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1173e:	2000      	movs	r0, #0
}
   11740:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   11742:	f04f 0340 	mov.w	r3, #64	; 0x40
   11746:	f3ef 8511 	mrs	r5, BASEPRI
   1174a:	f383 8812 	msr	BASEPRI_MAX, r3
   1174e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   11752:	6901      	ldr	r1, [r0, #16]
   11754:	6880      	ldr	r0, [r0, #8]
   11756:	f005 f8dc 	bl	16912 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1175a:	4620      	mov	r0, r4
   1175c:	f005 fa4a 	bl	16bf4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   11760:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   11762:	b158      	cbz	r0, 1177c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   11764:	f990 200e 	ldrsb.w	r2, [r0, #14]
   11768:	6122      	str	r2, [r4, #16]
   1176a:	2200      	movs	r2, #0
   1176c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1176e:	f005 fa0b 	bl	16b88 <z_ready_thread>
		z_reschedule(&lock, key);
   11772:	4809      	ldr	r0, [pc, #36]	; (11798 <z_impl_k_mutex_unlock+0x74>)
   11774:	4629      	mov	r1, r5
   11776:	f000 fb8f 	bl	11e98 <z_reschedule>
   1177a:	e7e0      	b.n	1173e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1177c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1177e:	f385 8811 	msr	BASEPRI, r5
   11782:	f3bf 8f6f 	isb	sy
   11786:	e7da      	b.n	1173e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   11788:	f06f 0015 	mvn.w	r0, #21
   1178c:	e7d8      	b.n	11740 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1178e:	f04f 30ff 	mov.w	r0, #4294967295
   11792:	e7d5      	b.n	11740 <z_impl_k_mutex_unlock+0x1c>
   11794:	200022e0 	.word	0x200022e0
   11798:	2000341c 	.word	0x2000341c

0001179c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1179c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1179e:	4611      	mov	r1, r2
	__asm__ volatile(
   117a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   117a4:	f3ef 8511 	mrs	r5, BASEPRI
   117a8:	f382 8812 	msr	BASEPRI_MAX, r2
   117ac:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   117b0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   117b2:	b19c      	cbz	r4, 117dc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   117b4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   117b6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   117b8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   117bc:	4294      	cmp	r4, r2
	list->head = node;
   117be:	6003      	str	r3, [r0, #0]
	list->tail = node;
   117c0:	bf08      	it	eq
   117c2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   117c4:	2101      	movs	r1, #1
   117c6:	4620      	mov	r0, r4
   117c8:	f005 f918 	bl	169fc <z_queue_node_peek>
   117cc:	4604      	mov	r4, r0
	__asm__ volatile(
   117ce:	f385 8811 	msr	BASEPRI, r5
   117d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   117d6:	4620      	mov	r0, r4
   117d8:	b003      	add	sp, #12
   117da:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   117dc:	ea51 0203 	orrs.w	r2, r1, r3
   117e0:	d0f5      	beq.n	117ce <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   117e2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   117e6:	e9cd 1300 	strd	r1, r3, [sp]
   117ea:	4610      	mov	r0, r2
   117ec:	4629      	mov	r1, r5
   117ee:	f000 faef 	bl	11dd0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   117f2:	2800      	cmp	r0, #0
   117f4:	d1ef      	bne.n	117d6 <z_impl_k_queue_get+0x3a>
   117f6:	4b02      	ldr	r3, [pc, #8]	; (11800 <z_impl_k_queue_get+0x64>)
   117f8:	689b      	ldr	r3, [r3, #8]
   117fa:	695c      	ldr	r4, [r3, #20]
   117fc:	e7eb      	b.n	117d6 <z_impl_k_queue_get+0x3a>
   117fe:	bf00      	nop
   11800:	200022e0 	.word	0x200022e0

00011804 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   11804:	b538      	push	{r3, r4, r5, lr}
   11806:	4604      	mov	r4, r0
	__asm__ volatile(
   11808:	f04f 0340 	mov.w	r3, #64	; 0x40
   1180c:	f3ef 8511 	mrs	r5, BASEPRI
   11810:	f383 8812 	msr	BASEPRI_MAX, r3
   11814:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   11818:	f005 f9ec 	bl	16bf4 <z_unpend_first_thread>

	if (thread != NULL) {
   1181c:	b148      	cbz	r0, 11832 <z_impl_k_sem_give+0x2e>
   1181e:	2200      	movs	r2, #0
   11820:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   11822:	f005 f9b1 	bl	16b88 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   11826:	4629      	mov	r1, r5
   11828:	4808      	ldr	r0, [pc, #32]	; (1184c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1182a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1182e:	f000 bb33 	b.w	11e98 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   11832:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   11836:	429a      	cmp	r2, r3
   11838:	bf18      	it	ne
   1183a:	3301      	addne	r3, #1
   1183c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1183e:	2102      	movs	r1, #2
   11840:	f104 0010 	add.w	r0, r4, #16
   11844:	f005 fbd4 	bl	16ff0 <z_handle_obj_poll_events>
}
   11848:	e7ed      	b.n	11826 <z_impl_k_sem_give+0x22>
   1184a:	bf00      	nop
   1184c:	2000341c 	.word	0x2000341c

00011850 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   11850:	b513      	push	{r0, r1, r4, lr}
   11852:	f04f 0440 	mov.w	r4, #64	; 0x40
   11856:	f3ef 8111 	mrs	r1, BASEPRI
   1185a:	f384 8812 	msr	BASEPRI_MAX, r4
   1185e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   11862:	6884      	ldr	r4, [r0, #8]
   11864:	b144      	cbz	r4, 11878 <z_impl_k_sem_take+0x28>
		sem->count--;
   11866:	3c01      	subs	r4, #1
   11868:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1186a:	f381 8811 	msr	BASEPRI, r1
   1186e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   11872:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   11874:	b002      	add	sp, #8
   11876:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   11878:	ea52 0403 	orrs.w	r4, r2, r3
   1187c:	d106      	bne.n	1188c <z_impl_k_sem_take+0x3c>
   1187e:	f381 8811 	msr	BASEPRI, r1
   11882:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   11886:	f06f 000f 	mvn.w	r0, #15
   1188a:	e7f3      	b.n	11874 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1188c:	e9cd 2300 	strd	r2, r3, [sp]
   11890:	4602      	mov	r2, r0
   11892:	4802      	ldr	r0, [pc, #8]	; (1189c <z_impl_k_sem_take+0x4c>)
   11894:	f000 fa9c 	bl	11dd0 <z_pend_curr>
	return ret;
   11898:	e7ec      	b.n	11874 <z_impl_k_sem_take+0x24>
   1189a:	bf00      	nop
   1189c:	2000341c 	.word	0x2000341c

000118a0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   118a0:	b570      	push	{r4, r5, r6, lr}
   118a2:	4604      	mov	r4, r0
	__asm__ volatile(
   118a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   118a8:	f3ef 8511 	mrs	r5, BASEPRI
   118ac:	f383 8812 	msr	BASEPRI_MAX, r3
   118b0:	f3bf 8f6f 	isb	sy
   118b4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   118b8:	4620      	mov	r0, r4
   118ba:	f005 f99b 	bl	16bf4 <z_unpend_first_thread>
		if (thread == NULL) {
   118be:	b118      	cbz	r0, 118c8 <z_impl_k_sem_reset+0x28>
   118c0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   118c2:	f005 f961 	bl	16b88 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   118c6:	e7f7      	b.n	118b8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   118c8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   118ca:	2102      	movs	r1, #2
   118cc:	f104 0010 	add.w	r0, r4, #16
   118d0:	f005 fb8e 	bl	16ff0 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   118d4:	4629      	mov	r1, r5
   118d6:	4802      	ldr	r0, [pc, #8]	; (118e0 <z_impl_k_sem_reset+0x40>)
}
   118d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   118dc:	f000 badc 	b.w	11e98 <z_reschedule>
   118e0:	2000341c 	.word	0x2000341c

000118e4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   118e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   118e8:	4e4a      	ldr	r6, [pc, #296]	; (11a14 <work_queue_main+0x130>)
   118ea:	b085      	sub	sp, #20
   118ec:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   118ee:	f04f 38ff 	mov.w	r8, #4294967295
   118f2:	f04f 39ff 	mov.w	r9, #4294967295
   118f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   118fa:	f3ef 8711 	mrs	r7, BASEPRI
   118fe:	f383 8812 	msr	BASEPRI_MAX, r3
   11902:	f3bf 8f6f 	isb	sy
   11906:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1190a:	b98d      	cbnz	r5, 11930 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1190c:	2102      	movs	r1, #2
   1190e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   11912:	f005 f8b0 	bl	16a76 <flag_test_and_clear>
   11916:	2800      	cmp	r0, #0
   11918:	d143      	bne.n	119a2 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1191a:	2300      	movs	r3, #0
   1191c:	e9cd 8900 	strd	r8, r9, [sp]
   11920:	9302      	str	r3, [sp, #8]
   11922:	f104 0288 	add.w	r2, r4, #136	; 0x88
   11926:	4639      	mov	r1, r7
   11928:	483b      	ldr	r0, [pc, #236]	; (11a18 <work_queue_main+0x134>)
   1192a:	f000 fc6b 	bl	12204 <z_sched_wait>
			continue;
   1192e:	e7e2      	b.n	118f6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11930:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   11934:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   11936:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1193a:	4295      	cmp	r5, r2
	list->tail = node;
   1193c:	bf08      	it	eq
   1193e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   11942:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   11946:	f043 0302 	orr.w	r3, r3, #2
   1194a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1194e:	68eb      	ldr	r3, [r5, #12]
   11950:	f023 0304 	bic.w	r3, r3, #4
   11954:	f043 0301 	orr.w	r3, r3, #1
   11958:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1195a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1195c:	f387 8811 	msr	BASEPRI, r7
   11960:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   11964:	4628      	mov	r0, r5
   11966:	4798      	blx	r3
	__asm__ volatile(
   11968:	f04f 0340 	mov.w	r3, #64	; 0x40
   1196c:	f3ef 8b11 	mrs	fp, BASEPRI
   11970:	f383 8812 	msr	BASEPRI_MAX, r3
   11974:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   11978:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1197a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1197c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11980:	d419      	bmi.n	119b6 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   11982:	60ea      	str	r2, [r5, #12]
   11984:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   11988:	f023 0302 	bic.w	r3, r3, #2
   1198c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   11990:	f38b 8811 	msr	BASEPRI, fp
   11994:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   11998:	05db      	lsls	r3, r3, #23
   1199a:	d4ac      	bmi.n	118f6 <work_queue_main+0x12>
	z_impl_k_yield();
   1199c:	f000 fb16 	bl	11fcc <z_impl_k_yield>
}
   119a0:	e7a9      	b.n	118f6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   119a2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   119a6:	2200      	movs	r2, #0
   119a8:	2101      	movs	r1, #1
   119aa:	4628      	mov	r0, r5
   119ac:	f005 f97c 	bl	16ca8 <z_sched_wake>
   119b0:	2800      	cmp	r0, #0
   119b2:	d1f8      	bne.n	119a6 <work_queue_main+0xc2>
   119b4:	e7b1      	b.n	1191a <work_queue_main+0x36>
	return list->head;
   119b6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   119b8:	f023 0303 	bic.w	r3, r3, #3
   119bc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   119be:	2800      	cmp	r0, #0
   119c0:	d0e0      	beq.n	11984 <work_queue_main+0xa0>
	return node->next;
   119c2:	2700      	movs	r7, #0
   119c4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   119c8:	463b      	mov	r3, r7
   119ca:	2800      	cmp	r0, #0
   119cc:	d0da      	beq.n	11984 <work_queue_main+0xa0>
		if (wc->work == work) {
   119ce:	6842      	ldr	r2, [r0, #4]
   119d0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   119d2:	4601      	mov	r1, r0
		if (wc->work == work) {
   119d4:	d10c      	bne.n	119f0 <work_queue_main+0x10c>
	return node->next;
   119d6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   119d8:	b99f      	cbnz	r7, 11a02 <work_queue_main+0x11e>
   119da:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   119dc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   119de:	4282      	cmp	r2, r0
   119e0:	d100      	bne.n	119e4 <work_queue_main+0x100>
	list->tail = node;
   119e2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   119e4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   119e8:	f7ff ff0c 	bl	11804 <z_impl_k_sem_give>
}
   119ec:	4639      	mov	r1, r7
   119ee:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   119f0:	f1ba 0f00 	cmp.w	sl, #0
   119f4:	d00b      	beq.n	11a0e <work_queue_main+0x12a>
	return node->next;
   119f6:	f8da 2000 	ldr.w	r2, [sl]
   119fa:	4650      	mov	r0, sl
   119fc:	460f      	mov	r7, r1
   119fe:	4692      	mov	sl, r2
   11a00:	e7e3      	b.n	119ca <work_queue_main+0xe6>
	parent->next = child;
   11a02:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   11a04:	6872      	ldr	r2, [r6, #4]
   11a06:	4282      	cmp	r2, r0
	list->tail = node;
   11a08:	bf08      	it	eq
   11a0a:	6077      	streq	r7, [r6, #4]
}
   11a0c:	e7ea      	b.n	119e4 <work_queue_main+0x100>
   11a0e:	4652      	mov	r2, sl
   11a10:	e7f3      	b.n	119fa <work_queue_main+0x116>
   11a12:	bf00      	nop
   11a14:	20002304 	.word	0x20002304
   11a18:	2000341c 	.word	0x2000341c

00011a1c <submit_to_queue_locked>:
{
   11a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   11a1e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11a20:	079a      	lsls	r2, r3, #30
{
   11a22:	4604      	mov	r4, r0
   11a24:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   11a26:	f3c3 0640 	ubfx	r6, r3, #1, #1
   11a2a:	d42c      	bmi.n	11a86 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   11a2c:	075b      	lsls	r3, r3, #29
   11a2e:	d41a      	bmi.n	11a66 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   11a30:	680b      	ldr	r3, [r1, #0]
   11a32:	b90b      	cbnz	r3, 11a38 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   11a34:	6883      	ldr	r3, [r0, #8]
   11a36:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   11a38:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   11a3a:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   11a3c:	bf44      	itt	mi
   11a3e:	68a3      	ldrmi	r3, [r4, #8]
   11a40:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   11a42:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   11a44:	bf4c      	ite	mi
   11a46:	2602      	movmi	r6, #2
		ret = 1;
   11a48:	2601      	movpl	r6, #1
	if (queue == NULL) {
   11a4a:	2d00      	cmp	r5, #0
   11a4c:	d03a      	beq.n	11ac4 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   11a4e:	4b1f      	ldr	r3, [pc, #124]	; (11acc <submit_to_queue_locked+0xb0>)
   11a50:	689b      	ldr	r3, [r3, #8]
   11a52:	42ab      	cmp	r3, r5
   11a54:	d00a      	beq.n	11a6c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   11a56:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   11a5a:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   11a5c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   11a60:	d414      	bmi.n	11a8c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   11a62:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   11a66:	2300      	movs	r3, #0
   11a68:	603b      	str	r3, [r7, #0]
	return ret;
   11a6a:	e025      	b.n	11ab8 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   11a6c:	f004 ff2c 	bl	168c8 <k_is_in_isr>
   11a70:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   11a74:	2800      	cmp	r0, #0
   11a76:	d1f0      	bne.n	11a5a <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   11a78:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   11a7a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   11a7e:	d5f0      	bpl.n	11a62 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   11a80:	b152      	cbz	r2, 11a98 <submit_to_queue_locked+0x7c>
   11a82:	075b      	lsls	r3, r3, #29
   11a84:	d408      	bmi.n	11a98 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   11a86:	f06f 060f 	mvn.w	r6, #15
   11a8a:	e7ec      	b.n	11a66 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   11a8c:	2a00      	cmp	r2, #0
   11a8e:	d1fa      	bne.n	11a86 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   11a90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   11a94:	2b00      	cmp	r3, #0
   11a96:	d1f6      	bne.n	11a86 <submit_to_queue_locked+0x6a>
	parent->next = child;
   11a98:	2300      	movs	r3, #0
   11a9a:	6023      	str	r3, [r4, #0]
	return list->tail;
   11a9c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   11aa0:	b963      	cbnz	r3, 11abc <submit_to_queue_locked+0xa0>
	list->head = node;
   11aa2:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   11aa6:	4628      	mov	r0, r5
   11aa8:	f004 fff0 	bl	16a8c <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   11aac:	68e3      	ldr	r3, [r4, #12]
   11aae:	f043 0304 	orr.w	r3, r3, #4
   11ab2:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   11ab4:	683b      	ldr	r3, [r7, #0]
   11ab6:	60a3      	str	r3, [r4, #8]
}
   11ab8:	4630      	mov	r0, r6
   11aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   11abc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11abe:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   11ac2:	e7f0      	b.n	11aa6 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   11ac4:	f06f 0615 	mvn.w	r6, #21
   11ac8:	e7cd      	b.n	11a66 <submit_to_queue_locked+0x4a>
   11aca:	bf00      	nop
   11acc:	200022e0 	.word	0x200022e0

00011ad0 <k_work_submit>:
{
   11ad0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   11ad2:	4801      	ldr	r0, [pc, #4]	; (11ad8 <k_work_submit+0x8>)
   11ad4:	f004 bffe 	b.w	16ad4 <k_work_submit_to_queue>
   11ad8:	20001a98 	.word	0x20001a98

00011adc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   11adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ade:	b089      	sub	sp, #36	; 0x24
   11ae0:	4604      	mov	r4, r0
	list->head = NULL;
   11ae2:	2000      	movs	r0, #0
	list->tail = NULL;
   11ae4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   11ae8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   11aea:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   11aee:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   11af2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   11af6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   11afa:	b31d      	cbz	r5, 11b44 <k_work_queue_start+0x68>
   11afc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   11afe:	2800      	cmp	r0, #0
   11b00:	f240 1001 	movw	r0, #257	; 0x101
   11b04:	bf08      	it	eq
   11b06:	2001      	moveq	r0, #1
	*flagp = flags;
   11b08:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b0c:	2000      	movs	r0, #0
   11b0e:	f04f 36ff 	mov.w	r6, #4294967295
   11b12:	f04f 37ff 	mov.w	r7, #4294967295
   11b16:	e9cd 3003 	strd	r3, r0, [sp, #12]
   11b1a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   11b1e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11b22:	4b09      	ldr	r3, [pc, #36]	; (11b48 <k_work_queue_start+0x6c>)
   11b24:	9400      	str	r4, [sp, #0]
   11b26:	4620      	mov	r0, r4
   11b28:	f7ff fc2e 	bl	11388 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   11b2c:	b125      	cbz	r5, 11b38 <k_work_queue_start+0x5c>
   11b2e:	6829      	ldr	r1, [r5, #0]
   11b30:	b111      	cbz	r1, 11b38 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   11b32:	4620      	mov	r0, r4
   11b34:	f004 fece 	bl	168d4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   11b38:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   11b3a:	b009      	add	sp, #36	; 0x24
   11b3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   11b40:	f004 becb 	b.w	168da <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   11b44:	2001      	movs	r0, #1
   11b46:	e7df      	b.n	11b08 <k_work_queue_start+0x2c>
   11b48:	000118e5 	.word	0x000118e5

00011b4c <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   11b4c:	89c3      	ldrh	r3, [r0, #14]
   11b4e:	2b7f      	cmp	r3, #127	; 0x7f
   11b50:	d812      	bhi.n	11b78 <sliceable+0x2c>
	int ret = slice_ticks;
   11b52:	4b0a      	ldr	r3, [pc, #40]	; (11b7c <sliceable+0x30>)
   11b54:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   11b56:	b163      	cbz	r3, 11b72 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   11b58:	4b09      	ldr	r3, [pc, #36]	; (11b80 <sliceable+0x34>)
   11b5a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   11b5e:	681b      	ldr	r3, [r3, #0]
   11b60:	429a      	cmp	r2, r3
   11b62:	db09      	blt.n	11b78 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   11b64:	7b43      	ldrb	r3, [r0, #13]
   11b66:	06db      	lsls	r3, r3, #27
   11b68:	d106      	bne.n	11b78 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   11b6a:	4b06      	ldr	r3, [pc, #24]	; (11b84 <sliceable+0x38>)
   11b6c:	1ac3      	subs	r3, r0, r3
   11b6e:	bf18      	it	ne
   11b70:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   11b72:	f003 0001 	and.w	r0, r3, #1
   11b76:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   11b78:	2300      	movs	r3, #0
   11b7a:	e7fa      	b.n	11b72 <sliceable+0x26>
   11b7c:	20002314 	.word	0x20002314
   11b80:	20002310 	.word	0x20002310
   11b84:	20001978 	.word	0x20001978

00011b88 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   11b88:	4b04      	ldr	r3, [pc, #16]	; (11b9c <slice_timeout+0x14>)
   11b8a:	1ac0      	subs	r0, r0, r3
   11b8c:	4b04      	ldr	r3, [pc, #16]	; (11ba0 <slice_timeout+0x18>)
   11b8e:	10c0      	asrs	r0, r0, #3
   11b90:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   11b92:	4b04      	ldr	r3, [pc, #16]	; (11ba4 <slice_timeout+0x1c>)
   11b94:	2201      	movs	r2, #1
   11b96:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   11b98:	4770      	bx	lr
   11b9a:	bf00      	nop
   11b9c:	20001a78 	.word	0x20001a78
   11ba0:	aaaaaaab 	.word	0xaaaaaaab
   11ba4:	2000341c 	.word	0x2000341c

00011ba8 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   11ba8:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   11baa:	4b0e      	ldr	r3, [pc, #56]	; (11be4 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   11bac:	4c0e      	ldr	r4, [pc, #56]	; (11be8 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   11bae:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   11bb0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   11bb4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   11bb8:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   11bba:	4620      	mov	r0, r4
   11bbc:	f005 f897 	bl	16cee <z_abort_timeout>
	slice_expired[cpu] = false;
   11bc0:	4b0a      	ldr	r3, [pc, #40]	; (11bec <z_reset_time_slice+0x44>)
   11bc2:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   11bc4:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   11bc6:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   11bc8:	f7ff ffc0 	bl	11b4c <sliceable>
   11bcc:	b148      	cbz	r0, 11be2 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   11bce:	4b08      	ldr	r3, [pc, #32]	; (11bf0 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   11bd0:	4908      	ldr	r1, [pc, #32]	; (11bf4 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   11bd2:	681a      	ldr	r2, [r3, #0]
   11bd4:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   11bd6:	4620      	mov	r0, r4
   11bd8:	17d3      	asrs	r3, r2, #31
	}
}
   11bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   11bde:	f000 bb83 	b.w	122e8 <z_add_timeout>
}
   11be2:	bd70      	pop	{r4, r5, r6, pc}
   11be4:	200022e0 	.word	0x200022e0
   11be8:	20001a78 	.word	0x20001a78
   11bec:	2000341c 	.word	0x2000341c
   11bf0:	20002314 	.word	0x20002314
   11bf4:	00011b89 	.word	0x00011b89

00011bf8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   11bf8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   11bfa:	4d0d      	ldr	r5, [pc, #52]	; (11c30 <update_cache+0x38>)
   11bfc:	462b      	mov	r3, r5
   11bfe:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c02:	429c      	cmp	r4, r3
   11c04:	d000      	beq.n	11c08 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11c06:	b904      	cbnz	r4, 11c0a <update_cache+0x12>
   11c08:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   11c0a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   11c0c:	b938      	cbnz	r0, 11c1e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   11c0e:	7b5a      	ldrb	r2, [r3, #13]
   11c10:	06d2      	lsls	r2, r2, #27
   11c12:	d104      	bne.n	11c1e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   11c14:	69a2      	ldr	r2, [r4, #24]
   11c16:	b912      	cbnz	r2, 11c1e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   11c18:	89da      	ldrh	r2, [r3, #14]
   11c1a:	2a7f      	cmp	r2, #127	; 0x7f
   11c1c:	d805      	bhi.n	11c2a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   11c1e:	429c      	cmp	r4, r3
   11c20:	d002      	beq.n	11c28 <update_cache+0x30>
			z_reset_time_slice(thread);
   11c22:	4620      	mov	r0, r4
   11c24:	f7ff ffc0 	bl	11ba8 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   11c28:	4623      	mov	r3, r4
   11c2a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   11c2c:	bd38      	pop	{r3, r4, r5, pc}
   11c2e:	bf00      	nop
   11c30:	200022e0 	.word	0x200022e0

00011c34 <move_thread_to_end_of_prio_q>:
{
   11c34:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   11c36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   11c3a:	7b43      	ldrb	r3, [r0, #13]
   11c3c:	2a00      	cmp	r2, #0
{
   11c3e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11c40:	da04      	bge.n	11c4c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11c46:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   11c48:	f004 ff5b 	bl	16b02 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   11c4c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   11c4e:	4a15      	ldr	r2, [pc, #84]	; (11ca4 <move_thread_to_end_of_prio_q+0x70>)
   11c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11c54:	4610      	mov	r0, r2
   11c56:	734b      	strb	r3, [r1, #13]
   11c58:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   11c5c:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11c5e:	4283      	cmp	r3, r0
   11c60:	bf08      	it	eq
   11c62:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11c64:	b923      	cbnz	r3, 11c70 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   11c66:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   11c6a:	6021      	str	r1, [r4, #0]
	list->tail = node;
   11c6c:	6211      	str	r1, [r2, #32]
}
   11c6e:	e00c      	b.n	11c8a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   11c70:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   11c74:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   11c78:	42b5      	cmp	r5, r6
   11c7a:	d00e      	beq.n	11c9a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11c7c:	42ae      	cmp	r6, r5
   11c7e:	dd0c      	ble.n	11c9a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   11c80:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   11c82:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   11c86:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   11c88:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   11c8a:	6890      	ldr	r0, [r2, #8]
   11c8c:	1a43      	subs	r3, r0, r1
   11c8e:	4258      	negs	r0, r3
}
   11c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   11c94:	4158      	adcs	r0, r3
   11c96:	f7ff bfaf 	b.w	11bf8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   11c9a:	429c      	cmp	r4, r3
   11c9c:	d0e3      	beq.n	11c66 <move_thread_to_end_of_prio_q+0x32>
   11c9e:	681b      	ldr	r3, [r3, #0]
   11ca0:	e7e0      	b.n	11c64 <move_thread_to_end_of_prio_q+0x30>
   11ca2:	bf00      	nop
   11ca4:	200022e0 	.word	0x200022e0

00011ca8 <ready_thread>:
{
   11ca8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11caa:	f990 300d 	ldrsb.w	r3, [r0, #13]
   11cae:	7b42      	ldrb	r2, [r0, #13]
   11cb0:	2b00      	cmp	r3, #0
   11cb2:	db29      	blt.n	11d08 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11cb4:	06d3      	lsls	r3, r2, #27
   11cb6:	d127      	bne.n	11d08 <ready_thread+0x60>
	return node->next != NULL;
   11cb8:	6983      	ldr	r3, [r0, #24]
   11cba:	bb2b      	cbnz	r3, 11d08 <ready_thread+0x60>
	return list->head == list;
   11cbc:	4913      	ldr	r1, [pc, #76]	; (11d0c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   11cbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11cc2:	7342      	strb	r2, [r0, #13]
   11cc4:	460a      	mov	r2, r1
   11cc6:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11cca:	4294      	cmp	r4, r2
   11ccc:	bf18      	it	ne
   11cce:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   11cd0:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11cd2:	b923      	cbnz	r3, 11cde <ready_thread+0x36>
	node->prev = tail;
   11cd4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   11cd8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   11cda:	6208      	str	r0, [r1, #32]
}
   11cdc:	e00c      	b.n	11cf8 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   11cde:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   11ce2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   11ce6:	42b5      	cmp	r5, r6
   11ce8:	d00a      	beq.n	11d00 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11cea:	42ae      	cmp	r6, r5
   11cec:	dd08      	ble.n	11d00 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   11cee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11cf0:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   11cf4:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   11cf6:	6058      	str	r0, [r3, #4]
}
   11cf8:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   11cfa:	2000      	movs	r0, #0
   11cfc:	f7ff bf7c 	b.w	11bf8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   11d00:	42a3      	cmp	r3, r4
   11d02:	d0e7      	beq.n	11cd4 <ready_thread+0x2c>
   11d04:	681b      	ldr	r3, [r3, #0]
   11d06:	e7e4      	b.n	11cd2 <ready_thread+0x2a>
}
   11d08:	bc70      	pop	{r4, r5, r6}
   11d0a:	4770      	bx	lr
   11d0c:	200022e0 	.word	0x200022e0

00011d10 <unready_thread>:
{
   11d10:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   11d12:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   11d16:	7b43      	ldrb	r3, [r0, #13]
   11d18:	2a00      	cmp	r2, #0
{
   11d1a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   11d1c:	da04      	bge.n	11d28 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11d22:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11d24:	f004 feed 	bl	16b02 <sys_dlist_remove>
	update_cache(thread == _current);
   11d28:	4b04      	ldr	r3, [pc, #16]	; (11d3c <unready_thread+0x2c>)
   11d2a:	6898      	ldr	r0, [r3, #8]
   11d2c:	1a43      	subs	r3, r0, r1
   11d2e:	4258      	negs	r0, r3
   11d30:	4158      	adcs	r0, r3
}
   11d32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   11d36:	f7ff bf5f 	b.w	11bf8 <update_cache>
   11d3a:	bf00      	nop
   11d3c:	200022e0 	.word	0x200022e0

00011d40 <pend_locked>:
{
   11d40:	b570      	push	{r4, r5, r6, lr}
   11d42:	4615      	mov	r5, r2
   11d44:	461c      	mov	r4, r3
   11d46:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   11d48:	f004 fef6 	bl	16b38 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11d4c:	f1b4 3fff 	cmp.w	r4, #4294967295
   11d50:	bf08      	it	eq
   11d52:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   11d56:	d008      	beq.n	11d6a <pend_locked+0x2a>
   11d58:	462a      	mov	r2, r5
   11d5a:	4623      	mov	r3, r4
   11d5c:	f106 0018 	add.w	r0, r6, #24
   11d60:	4902      	ldr	r1, [pc, #8]	; (11d6c <pend_locked+0x2c>)
}
   11d62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11d66:	f000 babf 	b.w	122e8 <z_add_timeout>
   11d6a:	bd70      	pop	{r4, r5, r6, pc}
   11d6c:	00016bed 	.word	0x00016bed

00011d70 <z_time_slice>:
{
   11d70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11d72:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d76:	f3ef 8511 	mrs	r5, BASEPRI
   11d7a:	f383 8812 	msr	BASEPRI_MAX, r3
   11d7e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   11d82:	4b10      	ldr	r3, [pc, #64]	; (11dc4 <z_time_slice+0x54>)
	if (pending_current == curr) {
   11d84:	4a10      	ldr	r2, [pc, #64]	; (11dc8 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   11d86:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   11d88:	6810      	ldr	r0, [r2, #0]
   11d8a:	42a0      	cmp	r0, r4
   11d8c:	d106      	bne.n	11d9c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   11d8e:	f7ff ff0b 	bl	11ba8 <z_reset_time_slice>
	__asm__ volatile(
   11d92:	f385 8811 	msr	BASEPRI, r5
   11d96:	f3bf 8f6f 	isb	sy
}
   11d9a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   11d9c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   11d9e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   11da0:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   11da2:	4a0a      	ldr	r2, [pc, #40]	; (11dcc <z_time_slice+0x5c>)
   11da4:	5cd3      	ldrb	r3, [r2, r3]
   11da6:	2b00      	cmp	r3, #0
   11da8:	d0f3      	beq.n	11d92 <z_time_slice+0x22>
   11daa:	4620      	mov	r0, r4
   11dac:	f7ff fece 	bl	11b4c <sliceable>
   11db0:	2800      	cmp	r0, #0
   11db2:	d0ee      	beq.n	11d92 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   11db4:	7b63      	ldrb	r3, [r4, #13]
   11db6:	06db      	lsls	r3, r3, #27
   11db8:	d102      	bne.n	11dc0 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   11dba:	4620      	mov	r0, r4
   11dbc:	f7ff ff3a 	bl	11c34 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   11dc0:	4620      	mov	r0, r4
   11dc2:	e7e4      	b.n	11d8e <z_time_slice+0x1e>
   11dc4:	200022e0 	.word	0x200022e0
   11dc8:	2000230c 	.word	0x2000230c
   11dcc:	2000341c 	.word	0x2000341c

00011dd0 <z_pend_curr>:
{
   11dd0:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   11dd2:	480c      	ldr	r0, [pc, #48]	; (11e04 <z_pend_curr+0x34>)
   11dd4:	4d0c      	ldr	r5, [pc, #48]	; (11e08 <z_pend_curr+0x38>)
   11dd6:	6886      	ldr	r6, [r0, #8]
   11dd8:	602e      	str	r6, [r5, #0]
{
   11dda:	460c      	mov	r4, r1
   11ddc:	4611      	mov	r1, r2
   11dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   11de2:	f04f 0640 	mov.w	r6, #64	; 0x40
   11de6:	f3ef 8511 	mrs	r5, BASEPRI
   11dea:	f386 8812 	msr	BASEPRI_MAX, r6
   11dee:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   11df2:	6880      	ldr	r0, [r0, #8]
   11df4:	f7ff ffa4 	bl	11d40 <pend_locked>
	ret = arch_swap(key);
   11df8:	4620      	mov	r0, r4
}
   11dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11dfe:	f7f9 bcc5 	b.w	b78c <arch_swap>
   11e02:	bf00      	nop
   11e04:	200022e0 	.word	0x200022e0
   11e08:	2000230c 	.word	0x2000230c

00011e0c <z_set_prio>:
{
   11e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e0e:	4604      	mov	r4, r0
   11e10:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e14:	f3ef 8611 	mrs	r6, BASEPRI
   11e18:	f383 8812 	msr	BASEPRI_MAX, r3
   11e1c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   11e20:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11e22:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   11e24:	b249      	sxtb	r1, r1
   11e26:	d119      	bne.n	11e5c <z_set_prio+0x50>
	return node->next != NULL;
   11e28:	6985      	ldr	r5, [r0, #24]
   11e2a:	b9bd      	cbnz	r5, 11e5c <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11e30:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11e32:	f004 fe66 	bl	16b02 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   11e36:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   11e38:	4a16      	ldr	r2, [pc, #88]	; (11e94 <z_set_prio+0x88>)
				thread->base.prio = prio;
   11e3a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   11e3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11e40:	7343      	strb	r3, [r0, #13]
   11e42:	4613      	mov	r3, r2
   11e44:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e48:	4298      	cmp	r0, r3
   11e4a:	bf18      	it	ne
   11e4c:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   11e4e:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11e50:	b95d      	cbnz	r5, 11e6a <z_set_prio+0x5e>
	node->prev = tail;
   11e52:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   11e56:	6004      	str	r4, [r0, #0]
	list->tail = node;
   11e58:	6214      	str	r4, [r2, #32]
}
   11e5a:	e011      	b.n	11e80 <z_set_prio+0x74>
			thread->base.prio = prio;
   11e5c:	73a1      	strb	r1, [r4, #14]
   11e5e:	2000      	movs	r0, #0
	__asm__ volatile(
   11e60:	f386 8811 	msr	BASEPRI, r6
   11e64:	f3bf 8f6f 	isb	sy
}
   11e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   11e6a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   11e6e:	42b9      	cmp	r1, r7
   11e70:	d00b      	beq.n	11e8a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   11e72:	428f      	cmp	r7, r1
   11e74:	dd09      	ble.n	11e8a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   11e76:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   11e78:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   11e7c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   11e7e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   11e80:	2001      	movs	r0, #1
   11e82:	f7ff feb9 	bl	11bf8 <update_cache>
   11e86:	2001      	movs	r0, #1
   11e88:	e7ea      	b.n	11e60 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   11e8a:	42a8      	cmp	r0, r5
   11e8c:	d0e1      	beq.n	11e52 <z_set_prio+0x46>
   11e8e:	682d      	ldr	r5, [r5, #0]
   11e90:	e7de      	b.n	11e50 <z_set_prio+0x44>
   11e92:	bf00      	nop
   11e94:	200022e0 	.word	0x200022e0

00011e98 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   11e98:	b949      	cbnz	r1, 11eae <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   11e9a:	f3ef 8005 	mrs	r0, IPSR
   11e9e:	b930      	cbnz	r0, 11eae <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   11ea0:	4b05      	ldr	r3, [pc, #20]	; (11eb8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   11ea2:	699a      	ldr	r2, [r3, #24]
   11ea4:	689b      	ldr	r3, [r3, #8]
   11ea6:	429a      	cmp	r2, r3
   11ea8:	d001      	beq.n	11eae <z_reschedule+0x16>
   11eaa:	f7f9 bc6f 	b.w	b78c <arch_swap>
   11eae:	f381 8811 	msr	BASEPRI, r1
   11eb2:	f3bf 8f6f 	isb	sy
}
   11eb6:	4770      	bx	lr
   11eb8:	200022e0 	.word	0x200022e0

00011ebc <z_sched_start>:
{
   11ebc:	b510      	push	{r4, lr}
	__asm__ volatile(
   11ebe:	f04f 0240 	mov.w	r2, #64	; 0x40
   11ec2:	f3ef 8411 	mrs	r4, BASEPRI
   11ec6:	f382 8812 	msr	BASEPRI_MAX, r2
   11eca:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   11ece:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   11ed0:	0751      	lsls	r1, r2, #29
   11ed2:	d404      	bmi.n	11ede <z_sched_start+0x22>
	__asm__ volatile(
   11ed4:	f384 8811 	msr	BASEPRI, r4
   11ed8:	f3bf 8f6f 	isb	sy
}
   11edc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   11ede:	f022 0204 	bic.w	r2, r2, #4
   11ee2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   11ee4:	f7ff fee0 	bl	11ca8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   11ee8:	4621      	mov	r1, r4
   11eea:	4802      	ldr	r0, [pc, #8]	; (11ef4 <z_sched_start+0x38>)
}
   11eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   11ef0:	f7ff bfd2 	b.w	11e98 <z_reschedule>
   11ef4:	2000341d 	.word	0x2000341d

00011ef8 <z_impl_k_thread_suspend>:
{
   11ef8:	b570      	push	{r4, r5, r6, lr}
   11efa:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   11efc:	3018      	adds	r0, #24
   11efe:	f004 fef6 	bl	16cee <z_abort_timeout>
	__asm__ volatile(
   11f02:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f06:	f3ef 8611 	mrs	r6, BASEPRI
   11f0a:	f383 8812 	msr	BASEPRI_MAX, r3
   11f0e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   11f12:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   11f16:	7b63      	ldrb	r3, [r4, #13]
   11f18:	2a00      	cmp	r2, #0
   11f1a:	da05      	bge.n	11f28 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11f1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11f20:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11f22:	4620      	mov	r0, r4
   11f24:	f004 fded 	bl	16b02 <sys_dlist_remove>
		update_cache(thread == _current);
   11f28:	4d0b      	ldr	r5, [pc, #44]	; (11f58 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11f2a:	7b63      	ldrb	r3, [r4, #13]
   11f2c:	68a8      	ldr	r0, [r5, #8]
   11f2e:	f043 0310 	orr.w	r3, r3, #16
   11f32:	7363      	strb	r3, [r4, #13]
   11f34:	1b03      	subs	r3, r0, r4
   11f36:	4258      	negs	r0, r3
   11f38:	4158      	adcs	r0, r3
   11f3a:	f7ff fe5d 	bl	11bf8 <update_cache>
	__asm__ volatile(
   11f3e:	f386 8811 	msr	BASEPRI, r6
   11f42:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   11f46:	68ab      	ldr	r3, [r5, #8]
   11f48:	42a3      	cmp	r3, r4
   11f4a:	d103      	bne.n	11f54 <z_impl_k_thread_suspend+0x5c>
}
   11f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   11f50:	f004 be90 	b.w	16c74 <z_reschedule_unlocked>
}
   11f54:	bd70      	pop	{r4, r5, r6, pc}
   11f56:	bf00      	nop
   11f58:	200022e0 	.word	0x200022e0

00011f5c <k_sched_lock>:
	__asm__ volatile(
   11f5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f60:	f3ef 8111 	mrs	r1, BASEPRI
   11f64:	f383 8812 	msr	BASEPRI_MAX, r3
   11f68:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   11f6c:	4b04      	ldr	r3, [pc, #16]	; (11f80 <k_sched_lock+0x24>)
   11f6e:	689a      	ldr	r2, [r3, #8]
   11f70:	7bd3      	ldrb	r3, [r2, #15]
   11f72:	3b01      	subs	r3, #1
   11f74:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   11f76:	f381 8811 	msr	BASEPRI, r1
   11f7a:	f3bf 8f6f 	isb	sy
}
   11f7e:	4770      	bx	lr
   11f80:	200022e0 	.word	0x200022e0

00011f84 <k_sched_unlock>:
{
   11f84:	b510      	push	{r4, lr}
	__asm__ volatile(
   11f86:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f8a:	f3ef 8411 	mrs	r4, BASEPRI
   11f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   11f92:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   11f96:	4b08      	ldr	r3, [pc, #32]	; (11fb8 <k_sched_unlock+0x34>)
   11f98:	689a      	ldr	r2, [r3, #8]
   11f9a:	7bd3      	ldrb	r3, [r2, #15]
   11f9c:	3301      	adds	r3, #1
   11f9e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   11fa0:	2000      	movs	r0, #0
   11fa2:	f7ff fe29 	bl	11bf8 <update_cache>
	__asm__ volatile(
   11fa6:	f384 8811 	msr	BASEPRI, r4
   11faa:	f3bf 8f6f 	isb	sy
}
   11fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   11fb2:	f004 be5f 	b.w	16c74 <z_reschedule_unlocked>
   11fb6:	bf00      	nop
   11fb8:	200022e0 	.word	0x200022e0

00011fbc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   11fbc:	4b02      	ldr	r3, [pc, #8]	; (11fc8 <z_sched_init+0xc>)
   11fbe:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   11fc2:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   11fc6:	4770      	bx	lr
   11fc8:	200022e0 	.word	0x200022e0

00011fcc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   11fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   11fce:	f04f 0340 	mov.w	r3, #64	; 0x40
   11fd2:	f3ef 8511 	mrs	r5, BASEPRI
   11fd6:	f383 8812 	msr	BASEPRI_MAX, r3
   11fda:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   11fde:	4919      	ldr	r1, [pc, #100]	; (12044 <z_impl_k_yield+0x78>)
   11fe0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11fe2:	7b43      	ldrb	r3, [r0, #13]
   11fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11fe8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   11fea:	f004 fd8a 	bl	16b02 <sys_dlist_remove>
	}
	queue_thread(_current);
   11fee:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11ff0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   11ff2:	4608      	mov	r0, r1
   11ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11ff8:	735a      	strb	r2, [r3, #13]
   11ffa:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   11ffe:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12000:	4282      	cmp	r2, r0
   12002:	bf08      	it	eq
   12004:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   12006:	b922      	cbnz	r2, 12012 <z_impl_k_yield+0x46>
	node->prev = tail;
   12008:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1200c:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1200e:	620b      	str	r3, [r1, #32]
}
   12010:	e00c      	b.n	1202c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   12012:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   12016:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1201a:	42be      	cmp	r6, r7
   1201c:	d00e      	beq.n	1203c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1201e:	42b7      	cmp	r7, r6
   12020:	dd0c      	ble.n	1203c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   12022:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   12024:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   12028:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1202a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1202c:	2001      	movs	r0, #1
   1202e:	f7ff fde3 	bl	11bf8 <update_cache>
   12032:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   12034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12038:	f7f9 bba8 	b.w	b78c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1203c:	42a2      	cmp	r2, r4
   1203e:	d0e3      	beq.n	12008 <z_impl_k_yield+0x3c>
   12040:	6812      	ldr	r2, [r2, #0]
   12042:	e7e0      	b.n	12006 <z_impl_k_yield+0x3a>
   12044:	200022e0 	.word	0x200022e0

00012048 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   12048:	ea50 0301 	orrs.w	r3, r0, r1
{
   1204c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12050:	4605      	mov	r5, r0
   12052:	460e      	mov	r6, r1
	if (ticks == 0) {
   12054:	d103      	bne.n	1205e <z_tick_sleep+0x16>
	z_impl_k_yield();
   12056:	f7ff ffb9 	bl	11fcc <z_impl_k_yield>
		k_yield();
		return 0;
   1205a:	2000      	movs	r0, #0
   1205c:	e02c      	b.n	120b8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1205e:	1c83      	adds	r3, r0, #2
   12060:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   12064:	db2a      	blt.n	120bc <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   12066:	f004 fe68 	bl	16d3a <sys_clock_tick_get_32>
   1206a:	182c      	adds	r4, r5, r0
   1206c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12070:	f3ef 8811 	mrs	r8, BASEPRI
   12074:	f383 8812 	msr	BASEPRI_MAX, r3
   12078:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1207c:	4f11      	ldr	r7, [pc, #68]	; (120c4 <z_tick_sleep+0x7c>)
   1207e:	4b12      	ldr	r3, [pc, #72]	; (120c8 <z_tick_sleep+0x80>)
   12080:	68b8      	ldr	r0, [r7, #8]
   12082:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   12084:	f7ff fe44 	bl	11d10 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   12088:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1208a:	4910      	ldr	r1, [pc, #64]	; (120cc <z_tick_sleep+0x84>)
   1208c:	462a      	mov	r2, r5
   1208e:	4633      	mov	r3, r6
   12090:	3018      	adds	r0, #24
   12092:	f000 f929 	bl	122e8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   12096:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   12098:	7b53      	ldrb	r3, [r2, #13]
   1209a:	f043 0310 	orr.w	r3, r3, #16
   1209e:	7353      	strb	r3, [r2, #13]
   120a0:	4640      	mov	r0, r8
   120a2:	f7f9 fb73 	bl	b78c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   120a6:	f004 fe48 	bl	16d3a <sys_clock_tick_get_32>
   120aa:	1a20      	subs	r0, r4, r0
   120ac:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   120b0:	2801      	cmp	r0, #1
   120b2:	f173 0300 	sbcs.w	r3, r3, #0
   120b6:	dbd0      	blt.n	1205a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   120b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   120bc:	f06f 0401 	mvn.w	r4, #1
   120c0:	1a24      	subs	r4, r4, r0
   120c2:	e7d3      	b.n	1206c <z_tick_sleep+0x24>
   120c4:	200022e0 	.word	0x200022e0
   120c8:	2000230c 	.word	0x2000230c
   120cc:	00016bed 	.word	0x00016bed

000120d0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   120d0:	f1b1 3fff 	cmp.w	r1, #4294967295
   120d4:	bf08      	it	eq
   120d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   120da:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   120dc:	d106      	bne.n	120ec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   120de:	4b08      	ldr	r3, [pc, #32]	; (12100 <z_impl_k_sleep+0x30>)
   120e0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   120e2:	f7ff ff09 	bl	11ef8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   120e6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   120ea:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   120ec:	f7ff ffac 	bl	12048 <z_tick_sleep>
   120f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   120f4:	fb80 0303 	smull	r0, r3, r0, r3
   120f8:	0bc0      	lsrs	r0, r0, #15
   120fa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   120fe:	e7f4      	b.n	120ea <z_impl_k_sleep+0x1a>
   12100:	200022e0 	.word	0x200022e0

00012104 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   12104:	b538      	push	{r3, r4, r5, lr}
   12106:	4c0a      	ldr	r4, [pc, #40]	; (12130 <z_impl_k_usleep+0x2c>)
   12108:	4a0a      	ldr	r2, [pc, #40]	; (12134 <z_impl_k_usleep+0x30>)
   1210a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1210e:	2100      	movs	r1, #0
   12110:	fbc0 4105 	smlal	r4, r1, r0, r5
   12114:	2300      	movs	r3, #0
   12116:	4620      	mov	r0, r4
   12118:	f7ed fff2 	bl	100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   1211c:	17c1      	asrs	r1, r0, #31
   1211e:	f7ff ff93 	bl	12048 <z_tick_sleep>
   12122:	4b04      	ldr	r3, [pc, #16]	; (12134 <z_impl_k_usleep+0x30>)
   12124:	fb80 0303 	smull	r0, r3, r0, r3
   12128:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   1212a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1212e:	bd38      	pop	{r3, r4, r5, pc}
   12130:	000f423f 	.word	0x000f423f
   12134:	000f4240 	.word	0x000f4240

00012138 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   12138:	4b01      	ldr	r3, [pc, #4]	; (12140 <z_impl_z_current_get+0x8>)
   1213a:	6898      	ldr	r0, [r3, #8]
   1213c:	4770      	bx	lr
   1213e:	bf00      	nop
   12140:	200022e0 	.word	0x200022e0

00012144 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   12144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12148:	4604      	mov	r4, r0
   1214a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1214e:	f3ef 8611 	mrs	r6, BASEPRI
   12152:	f383 8812 	msr	BASEPRI_MAX, r3
   12156:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1215a:	7b03      	ldrb	r3, [r0, #12]
   1215c:	07d9      	lsls	r1, r3, #31
   1215e:	d50b      	bpl.n	12178 <z_thread_abort+0x34>
	__asm__ volatile(
   12160:	f386 8811 	msr	BASEPRI, r6
   12164:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   12168:	4040      	eors	r0, r0
   1216a:	f380 8811 	msr	BASEPRI, r0
   1216e:	f04f 0004 	mov.w	r0, #4
   12172:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   12174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   12178:	7b43      	ldrb	r3, [r0, #13]
   1217a:	071a      	lsls	r2, r3, #28
   1217c:	d504      	bpl.n	12188 <z_thread_abort+0x44>
   1217e:	f386 8811 	msr	BASEPRI, r6
   12182:	f3bf 8f6f 	isb	sy
   12186:	e7f5      	b.n	12174 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   12188:	f023 0220 	bic.w	r2, r3, #32
   1218c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   12190:	09d2      	lsrs	r2, r2, #7
   12192:	d120      	bne.n	121d6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   12194:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   12196:	68a3      	ldr	r3, [r4, #8]
   12198:	b113      	cbz	r3, 121a0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1219a:	4620      	mov	r0, r4
   1219c:	f004 fcb9 	bl	16b12 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   121a0:	f104 0018 	add.w	r0, r4, #24
   121a4:	f004 fda3 	bl	16cee <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   121a8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   121ac:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   121b0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   121b2:	42bd      	cmp	r5, r7
   121b4:	d000      	beq.n	121b8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   121b6:	b9b5      	cbnz	r5, 121e6 <z_thread_abort+0xa2>
		update_cache(1);
   121b8:	2001      	movs	r0, #1
   121ba:	f7ff fd1d 	bl	11bf8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   121be:	4b10      	ldr	r3, [pc, #64]	; (12200 <z_thread_abort+0xbc>)
   121c0:	689b      	ldr	r3, [r3, #8]
   121c2:	42a3      	cmp	r3, r4
   121c4:	d1db      	bne.n	1217e <z_thread_abort+0x3a>
   121c6:	f3ef 8305 	mrs	r3, IPSR
   121ca:	2b00      	cmp	r3, #0
   121cc:	d1d7      	bne.n	1217e <z_thread_abort+0x3a>
   121ce:	4630      	mov	r0, r6
   121d0:	f7f9 fadc 	bl	b78c <arch_swap>
	return ret;
   121d4:	e7d3      	b.n	1217e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   121d6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   121da:	f043 0308 	orr.w	r3, r3, #8
   121de:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   121e0:	f004 fc8f 	bl	16b02 <sys_dlist_remove>
}
   121e4:	e7d7      	b.n	12196 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   121e6:	4628      	mov	r0, r5
   121e8:	f004 fc93 	bl	16b12 <unpend_thread_no_timeout>
   121ec:	f105 0018 	add.w	r0, r5, #24
   121f0:	f004 fd7d 	bl	16cee <z_abort_timeout>
   121f4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   121f8:	4628      	mov	r0, r5
   121fa:	f7ff fd55 	bl	11ca8 <ready_thread>
   121fe:	e7d7      	b.n	121b0 <z_thread_abort+0x6c>
   12200:	200022e0 	.word	0x200022e0

00012204 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   12204:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   12206:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1220a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1220c:	e9cd 6700 	strd	r6, r7, [sp]
   12210:	f7ff fdde 	bl	11dd0 <z_pend_curr>

	if (data != NULL) {
   12214:	b11c      	cbz	r4, 1221e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   12216:	4b03      	ldr	r3, [pc, #12]	; (12224 <z_sched_wait+0x20>)
   12218:	689b      	ldr	r3, [r3, #8]
   1221a:	695b      	ldr	r3, [r3, #20]
   1221c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1221e:	b002      	add	sp, #8
   12220:	bdd0      	pop	{r4, r6, r7, pc}
   12222:	bf00      	nop
   12224:	200022e0 	.word	0x200022e0

00012228 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   12228:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1222a:	4806      	ldr	r0, [pc, #24]	; (12244 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1222c:	4a06      	ldr	r2, [pc, #24]	; (12248 <z_data_copy+0x20>)
   1222e:	4907      	ldr	r1, [pc, #28]	; (1224c <z_data_copy+0x24>)
   12230:	1a12      	subs	r2, r2, r0
   12232:	f004 fa88 	bl	16746 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   12236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1223a:	4a05      	ldr	r2, [pc, #20]	; (12250 <z_data_copy+0x28>)
   1223c:	4905      	ldr	r1, [pc, #20]	; (12254 <z_data_copy+0x2c>)
   1223e:	4806      	ldr	r0, [pc, #24]	; (12258 <z_data_copy+0x30>)
   12240:	f004 ba81 	b.w	16746 <z_early_memcpy>
   12244:	20000000 	.word	0x20000000
   12248:	20000744 	.word	0x20000744
   1224c:	00017edc 	.word	0x00017edc
   12250:	00000000 	.word	0x00000000
   12254:	00017edc 	.word	0x00017edc
   12258:	20000000 	.word	0x20000000

0001225c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1225c:	4b03      	ldr	r3, [pc, #12]	; (1226c <elapsed+0x10>)
   1225e:	681b      	ldr	r3, [r3, #0]
   12260:	b90b      	cbnz	r3, 12266 <elapsed+0xa>
   12262:	f7fc bf61 	b.w	f128 <sys_clock_elapsed>
}
   12266:	2000      	movs	r0, #0
   12268:	4770      	bx	lr
   1226a:	bf00      	nop
   1226c:	20002318 	.word	0x20002318

00012270 <next_timeout>:

static int32_t next_timeout(void)
{
   12270:	b510      	push	{r4, lr}
	return list->head == list;
   12272:	4b0e      	ldr	r3, [pc, #56]	; (122ac <next_timeout+0x3c>)
   12274:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12276:	429c      	cmp	r4, r3
   12278:	d104      	bne.n	12284 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1227a:	f7ff ffef 	bl	1225c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1227e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   12282:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   12284:	f7ff ffea 	bl	1225c <elapsed>
	if ((to == NULL) ||
   12288:	2c00      	cmp	r4, #0
   1228a:	d0f8      	beq.n	1227e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1228c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   12290:	1a1b      	subs	r3, r3, r0
   12292:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   12296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1229a:	f172 0100 	sbcs.w	r1, r2, #0
   1229e:	daee      	bge.n	1227e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   122a0:	2a00      	cmp	r2, #0
   122a2:	bfac      	ite	ge
   122a4:	4618      	movge	r0, r3
   122a6:	2000      	movlt	r0, #0
	return ret;
   122a8:	e7eb      	b.n	12282 <next_timeout+0x12>
   122aa:	bf00      	nop
   122ac:	20000590 	.word	0x20000590

000122b0 <remove_timeout>:
{
   122b0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   122b2:	b170      	cbz	r0, 122d2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   122b4:	4b0b      	ldr	r3, [pc, #44]	; (122e4 <remove_timeout+0x34>)
   122b6:	685b      	ldr	r3, [r3, #4]
   122b8:	4298      	cmp	r0, r3
   122ba:	d00a      	beq.n	122d2 <remove_timeout+0x22>
   122bc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   122be:	b143      	cbz	r3, 122d2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   122c0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   122c4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   122c8:	1912      	adds	r2, r2, r4
   122ca:	eb41 0105 	adc.w	r1, r1, r5
   122ce:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   122d2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   122d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   122d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   122da:	2300      	movs	r3, #0
	node->prev = NULL;
   122dc:	e9c0 3300 	strd	r3, r3, [r0]
}
   122e0:	bd30      	pop	{r4, r5, pc}
   122e2:	bf00      	nop
   122e4:	20000590 	.word	0x20000590

000122e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   122e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   122ec:	bf08      	it	eq
   122ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   122f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122f4:	4604      	mov	r4, r0
   122f6:	461d      	mov	r5, r3
   122f8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   122fa:	d05c      	beq.n	123b6 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   122fc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   122fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   12302:	f3ef 8711 	mrs	r7, BASEPRI
   12306:	f383 8812 	msr	BASEPRI_MAX, r3
   1230a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1230e:	3201      	adds	r2, #1
   12310:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   12314:	da24      	bge.n	12360 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   12316:	492d      	ldr	r1, [pc, #180]	; (123cc <z_add_timeout+0xe4>)
   12318:	e9d1 2000 	ldrd	r2, r0, [r1]
   1231c:	f06f 0301 	mvn.w	r3, #1
   12320:	1a9b      	subs	r3, r3, r2
   12322:	f04f 32ff 	mov.w	r2, #4294967295
   12326:	eb62 0000 	sbc.w	r0, r2, r0
   1232a:	1b9e      	subs	r6, r3, r6
   1232c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   12330:	2e01      	cmp	r6, #1
   12332:	f170 0300 	sbcs.w	r3, r0, #0
   12336:	da01      	bge.n	1233c <z_add_timeout+0x54>
   12338:	2601      	movs	r6, #1
   1233a:	2000      	movs	r0, #0
   1233c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   12340:	4e23      	ldr	r6, [pc, #140]	; (123d0 <z_add_timeout+0xe8>)
   12342:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   12346:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12348:	45b4      	cmp	ip, r6
   1234a:	bf08      	it	eq
   1234c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   12350:	f1bc 0f00 	cmp.w	ip, #0
   12354:	d10d      	bne.n	12372 <z_add_timeout+0x8a>
	node->prev = tail;
   12356:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1235a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1235c:	6074      	str	r4, [r6, #4]
}
   1235e:	e01c      	b.n	1239a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   12360:	f7ff ff7c 	bl	1225c <elapsed>
   12364:	3601      	adds	r6, #1
   12366:	f145 0500 	adc.w	r5, r5, #0
   1236a:	1836      	adds	r6, r6, r0
   1236c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   12370:	e7e4      	b.n	1233c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   12372:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   12376:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1237a:	4293      	cmp	r3, r2
   1237c:	eb71 0e00 	sbcs.w	lr, r1, r0
   12380:	da1a      	bge.n	123b8 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   12382:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   12384:	f8dc 3004 	ldr.w	r3, [ip, #4]
   12388:	eb60 0001 	sbc.w	r0, r0, r1
   1238c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   12390:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   12394:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   12396:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1239a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1239c:	42b3      	cmp	r3, r6
   1239e:	d006      	beq.n	123ae <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   123a0:	429c      	cmp	r4, r3
   123a2:	d104      	bne.n	123ae <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   123a4:	f7ff ff64 	bl	12270 <next_timeout>
   123a8:	2100      	movs	r1, #0
   123aa:	f7fc fe8b 	bl	f0c4 <sys_clock_set_timeout>
	__asm__ volatile(
   123ae:	f387 8811 	msr	BASEPRI, r7
   123b2:	f3bf 8f6f 	isb	sy
		}
	}
}
   123b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   123b8:	1a9b      	subs	r3, r3, r2
   123ba:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   123be:	45ac      	cmp	ip, r5
   123c0:	e9c4 3104 	strd	r3, r1, [r4, #16]
   123c4:	d0c7      	beq.n	12356 <z_add_timeout+0x6e>
   123c6:	f8dc c000 	ldr.w	ip, [ip]
   123ca:	e7c1      	b.n	12350 <z_add_timeout+0x68>
   123cc:	20001a90 	.word	0x20001a90
   123d0:	20000590 	.word	0x20000590

000123d4 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   123d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   123d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   123dc:	f3ef 8c11 	mrs	ip, BASEPRI
   123e0:	f383 8812 	msr	BASEPRI_MAX, r3
   123e4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   123e8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1249c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   123ec:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 124a0 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   123f0:	4f2c      	ldr	r7, [pc, #176]	; (124a4 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   123f2:	f8c9 0000 	str.w	r0, [r9]
   123f6:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   123fa:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   123fc:	4550      	cmp	r0, sl
   123fe:	bf08      	it	eq
   12400:	2000      	moveq	r0, #0
   12402:	2500      	movs	r5, #0
		curr_tick += dt;
   12404:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   12408:	f8d9 3000 	ldr.w	r3, [r9]
   1240c:	46e0      	mov	r8, ip
   1240e:	b380      	cbz	r0, 12472 <sys_clock_announce+0x9e>
   12410:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   12414:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   12418:	42b3      	cmp	r3, r6
   1241a:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   1241e:	da05      	bge.n	1242c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   12420:	1af6      	subs	r6, r6, r3
   12422:	eb6c 040e 	sbc.w	r4, ip, lr
   12426:	e9c0 6404 	strd	r6, r4, [r0, #16]
   1242a:	e022      	b.n	12472 <sys_clock_announce+0x9e>
		curr_tick += dt;
   1242c:	18b2      	adds	r2, r6, r2
   1242e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   12432:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   12436:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   1243a:	f7ff ff39 	bl	122b0 <remove_timeout>
	__asm__ volatile(
   1243e:	f388 8811 	msr	BASEPRI, r8
   12442:	f3bf 8f6f 	isb	sy
		t->fn(t);
   12446:	6883      	ldr	r3, [r0, #8]
   12448:	4798      	blx	r3
	__asm__ volatile(
   1244a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1244e:	f3ef 8811 	mrs	r8, BASEPRI
   12452:	f383 8812 	msr	BASEPRI_MAX, r3
   12456:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1245a:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   1245e:	f8da 0000 	ldr.w	r0, [sl]
   12462:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12464:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   12466:	46c4      	mov	ip, r8
   12468:	f8c9 3000 	str.w	r3, [r9]
   1246c:	d1ca      	bne.n	12404 <sys_clock_announce+0x30>
		curr_tick += dt;
   1246e:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   12472:	189a      	adds	r2, r3, r2
   12474:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   12478:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1247a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   1247e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   12482:	f7ff fef5 	bl	12270 <next_timeout>
   12486:	4621      	mov	r1, r4
   12488:	f7fc fe1c 	bl	f0c4 <sys_clock_set_timeout>
	__asm__ volatile(
   1248c:	f388 8811 	msr	BASEPRI, r8
   12490:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   12494:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   12498:	f7ff bc6a 	b.w	11d70 <z_time_slice>
   1249c:	20000590 	.word	0x20000590
   124a0:	20002318 	.word	0x20002318
   124a4:	20001a90 	.word	0x20001a90

000124a8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   124a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   124aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   124ae:	f3ef 8411 	mrs	r4, BASEPRI
   124b2:	f383 8812 	msr	BASEPRI_MAX, r3
   124b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   124ba:	f7ff fecf 	bl	1225c <elapsed>
   124be:	4a06      	ldr	r2, [pc, #24]	; (124d8 <sys_clock_tick_get+0x30>)
   124c0:	4603      	mov	r3, r0
   124c2:	e9d2 0100 	ldrd	r0, r1, [r2]
   124c6:	1818      	adds	r0, r3, r0
   124c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   124cc:	f384 8811 	msr	BASEPRI, r4
   124d0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   124d4:	bd10      	pop	{r4, pc}
   124d6:	bf00      	nop
   124d8:	20001a90 	.word	0x20001a90

000124dc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   124dc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   124e0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   124e2:	4b29      	ldr	r3, [pc, #164]	; (12588 <z_impl_k_poll+0xac>)
   124e4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   124e6:	2301      	movs	r3, #1
   124e8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   124ec:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   124f0:	ea52 0305 	orrs.w	r3, r2, r5
{
   124f4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   124f6:	bf0c      	ite	eq
   124f8:	2301      	moveq	r3, #1
   124fa:	2300      	movne	r3, #0
   124fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   12500:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   12502:	f004 fc75 	bl	16df0 <register_events>
   12506:	4681      	mov	r9, r0
	__asm__ volatile(
   12508:	f04f 0340 	mov.w	r3, #64	; 0x40
   1250c:	f3ef 8a11 	mrs	sl, BASEPRI
   12510:	f383 8812 	msr	BASEPRI_MAX, r3
   12514:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   12518:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1251c:	b964      	cbnz	r4, 12538 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1251e:	4601      	mov	r1, r0
   12520:	4652      	mov	r2, sl
   12522:	4640      	mov	r0, r8
   12524:	f004 fd35 	bl	16f92 <clear_event_registrations>
	__asm__ volatile(
   12528:	f38a 8811 	msr	BASEPRI, sl
   1252c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   12530:	4620      	mov	r0, r4
   12532:	b002      	add	sp, #8
   12534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   12538:	2300      	movs	r3, #0
   1253a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1253e:	ea56 0305 	orrs.w	r3, r6, r5
   12542:	d106      	bne.n	12552 <z_impl_k_poll+0x76>
   12544:	f38a 8811 	msr	BASEPRI, sl
   12548:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1254c:	f06f 040a 	mvn.w	r4, #10
   12550:	e7ee      	b.n	12530 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   12552:	e9cd 6500 	strd	r6, r5, [sp]
   12556:	4a0d      	ldr	r2, [pc, #52]	; (1258c <z_impl_k_poll+0xb0>)
   12558:	480d      	ldr	r0, [pc, #52]	; (12590 <z_impl_k_poll+0xb4>)
   1255a:	4651      	mov	r1, sl
   1255c:	f7ff fc38 	bl	11dd0 <z_pend_curr>
   12560:	4604      	mov	r4, r0
	__asm__ volatile(
   12562:	f04f 0340 	mov.w	r3, #64	; 0x40
   12566:	f3ef 8511 	mrs	r5, BASEPRI
   1256a:	f383 8812 	msr	BASEPRI_MAX, r3
   1256e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   12572:	462a      	mov	r2, r5
   12574:	4649      	mov	r1, r9
   12576:	4640      	mov	r0, r8
   12578:	f004 fd0b 	bl	16f92 <clear_event_registrations>
	__asm__ volatile(
   1257c:	f385 8811 	msr	BASEPRI, r5
   12580:	f3bf 8f6f 	isb	sy
	return swap_rc;
   12584:	e7d4      	b.n	12530 <z_impl_k_poll+0x54>
   12586:	bf00      	nop
   12588:	200022e0 	.word	0x200022e0
   1258c:	20000598 	.word	0x20000598
   12590:	2000341d 	.word	0x2000341d

00012594 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   12594:	b538      	push	{r3, r4, r5, lr}
   12596:	4603      	mov	r3, r0
	__asm__ volatile(
   12598:	f04f 0240 	mov.w	r2, #64	; 0x40
   1259c:	f3ef 8511 	mrs	r5, BASEPRI
   125a0:	f382 8812 	msr	BASEPRI_MAX, r2
   125a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   125a8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   125aa:	2101      	movs	r1, #1
   125ac:	6081      	str	r1, [r0, #8]
	return list->head == list;
   125ae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   125b0:	4283      	cmp	r3, r0
   125b2:	d106      	bne.n	125c2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   125b4:	f385 8811 	msr	BASEPRI, r5
   125b8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   125bc:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   125be:	4620      	mov	r0, r4
   125c0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   125c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   125c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   125c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   125ca:	2300      	movs	r3, #0
	node->prev = NULL;
   125cc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   125d0:	f004 fc85 	bl	16ede <signal_poll_event>
	z_reschedule(&lock, key);
   125d4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   125d6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   125d8:	4801      	ldr	r0, [pc, #4]	; (125e0 <z_impl_k_poll_signal_raise+0x4c>)
   125da:	f7ff fc5d 	bl	11e98 <z_reschedule>
	return rc;
   125de:	e7ee      	b.n	125be <z_impl_k_poll_signal_raise+0x2a>
   125e0:	2000341d 	.word	0x2000341d

000125e4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   125e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   125e6:	4606      	mov	r6, r0
   125e8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   125ea:	f004 f96d 	bl	168c8 <k_is_in_isr>
   125ee:	b978      	cbnz	r0, 12610 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   125f0:	4b0b      	ldr	r3, [pc, #44]	; (12620 <z_thread_aligned_alloc+0x3c>)
   125f2:	689b      	ldr	r3, [r3, #8]
   125f4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   125f6:	b17c      	cbz	r4, 12618 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   125f8:	1d2a      	adds	r2, r5, #4
   125fa:	d209      	bcs.n	12610 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   125fc:	2000      	movs	r0, #0
   125fe:	2100      	movs	r1, #0
   12600:	e9cd 0100 	strd	r0, r1, [sp]
   12604:	f046 0104 	orr.w	r1, r6, #4
   12608:	4620      	mov	r0, r4
   1260a:	f004 f8a6 	bl	1675a <k_heap_aligned_alloc>
	if (mem == NULL) {
   1260e:	b908      	cbnz	r0, 12614 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   12610:	2400      	movs	r4, #0
	}

	return ret;
   12612:	e001      	b.n	12618 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   12614:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   12616:	1d04      	adds	r4, r0, #4
}
   12618:	4620      	mov	r0, r4
   1261a:	b002      	add	sp, #8
   1261c:	bd70      	pop	{r4, r5, r6, pc}
   1261e:	bf00      	nop
   12620:	200022e0 	.word	0x200022e0

00012624 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   12624:	4801      	ldr	r0, [pc, #4]	; (1262c <boot_banner+0x8>)
   12626:	f002 bc6f 	b.w	14f08 <printk>
   1262a:	bf00      	nop
   1262c:	00017ea0 	.word	0x00017ea0

00012630 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   12630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   12632:	4b09      	ldr	r3, [pc, #36]	; (12658 <k_sys_work_q_init+0x28>)
   12634:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   12636:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   12638:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1263a:	9300      	str	r3, [sp, #0]
   1263c:	4907      	ldr	r1, [pc, #28]	; (1265c <k_sys_work_q_init+0x2c>)
   1263e:	4808      	ldr	r0, [pc, #32]	; (12660 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   12640:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   12644:	f04f 33ff 	mov.w	r3, #4294967295
   12648:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1264c:	f7ff fa46 	bl	11adc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   12650:	4620      	mov	r0, r4
   12652:	b004      	add	sp, #16
   12654:	bd10      	pop	{r4, pc}
   12656:	bf00      	nop
   12658:	00017ed0 	.word	0x00017ed0
   1265c:	20005940 	.word	0x20005940
   12660:	20001a98 	.word	0x20001a98

00012664 <nrf_cc3xx_platform_init>:
   12664:	b510      	push	{r4, lr}
   12666:	4c0c      	ldr	r4, [pc, #48]	; (12698 <nrf_cc3xx_platform_init+0x34>)
   12668:	6823      	ldr	r3, [r4, #0]
   1266a:	b113      	cbz	r3, 12672 <nrf_cc3xx_platform_init+0xe>
   1266c:	4b0b      	ldr	r3, [pc, #44]	; (1269c <nrf_cc3xx_platform_init+0x38>)
   1266e:	681b      	ldr	r3, [r3, #0]
   12670:	b92b      	cbnz	r3, 1267e <nrf_cc3xx_platform_init+0x1a>
   12672:	f000 fe29 	bl	132c8 <CC_LibInit>
   12676:	b930      	cbnz	r0, 12686 <nrf_cc3xx_platform_init+0x22>
   12678:	4b08      	ldr	r3, [pc, #32]	; (1269c <nrf_cc3xx_platform_init+0x38>)
   1267a:	2201      	movs	r2, #1
   1267c:	601a      	str	r2, [r3, #0]
   1267e:	2301      	movs	r3, #1
   12680:	6023      	str	r3, [r4, #0]
   12682:	2000      	movs	r0, #0
   12684:	bd10      	pop	{r4, pc}
   12686:	3801      	subs	r0, #1
   12688:	2806      	cmp	r0, #6
   1268a:	d901      	bls.n	12690 <nrf_cc3xx_platform_init+0x2c>
   1268c:	4804      	ldr	r0, [pc, #16]	; (126a0 <nrf_cc3xx_platform_init+0x3c>)
   1268e:	bd10      	pop	{r4, pc}
   12690:	4b04      	ldr	r3, [pc, #16]	; (126a4 <nrf_cc3xx_platform_init+0x40>)
   12692:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12696:	bd10      	pop	{r4, pc}
   12698:	20002320 	.word	0x20002320
   1269c:	2000231c 	.word	0x2000231c
   126a0:	ffff8ffe 	.word	0xffff8ffe
   126a4:	0001785c 	.word	0x0001785c

000126a8 <nrf_cc3xx_platform_abort>:
   126a8:	f3bf 8f4f 	dsb	sy
   126ac:	4905      	ldr	r1, [pc, #20]	; (126c4 <nrf_cc3xx_platform_abort+0x1c>)
   126ae:	4b06      	ldr	r3, [pc, #24]	; (126c8 <nrf_cc3xx_platform_abort+0x20>)
   126b0:	68ca      	ldr	r2, [r1, #12]
   126b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   126b6:	4313      	orrs	r3, r2
   126b8:	60cb      	str	r3, [r1, #12]
   126ba:	f3bf 8f4f 	dsb	sy
   126be:	bf00      	nop
   126c0:	e7fd      	b.n	126be <nrf_cc3xx_platform_abort+0x16>
   126c2:	bf00      	nop
   126c4:	e000ed00 	.word	0xe000ed00
   126c8:	05fa0004 	.word	0x05fa0004

000126cc <CC_PalAbort>:
   126cc:	b410      	push	{r4}
   126ce:	4b09      	ldr	r3, [pc, #36]	; (126f4 <CC_PalAbort+0x28>)
   126d0:	4909      	ldr	r1, [pc, #36]	; (126f8 <CC_PalAbort+0x2c>)
   126d2:	4c0a      	ldr	r4, [pc, #40]	; (126fc <CC_PalAbort+0x30>)
   126d4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   126d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   126dc:	6849      	ldr	r1, [r1, #4]
   126de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   126e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   126e6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   126ea:	2300      	movs	r3, #0
   126ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   126f0:	bc10      	pop	{r4}
   126f2:	4708      	bx	r1
   126f4:	5002b000 	.word	0x5002b000
   126f8:	200005a0 	.word	0x200005a0
   126fc:	5002a000 	.word	0x5002a000

00012700 <nrf_cc3xx_platform_set_abort>:
   12700:	e9d0 1200 	ldrd	r1, r2, [r0]
   12704:	4b01      	ldr	r3, [pc, #4]	; (1270c <nrf_cc3xx_platform_set_abort+0xc>)
   12706:	e9c3 1200 	strd	r1, r2, [r3]
   1270a:	4770      	bx	lr
   1270c:	200005a0 	.word	0x200005a0

00012710 <nrf_cc3xx_platform_ctr_drbg_init>:
   12710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12714:	4b13      	ldr	r3, [pc, #76]	; (12764 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   12716:	4e14      	ldr	r6, [pc, #80]	; (12768 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   12718:	2800      	cmp	r0, #0
   1271a:	bf14      	ite	ne
   1271c:	4604      	movne	r4, r0
   1271e:	461c      	moveq	r4, r3
   12720:	b083      	sub	sp, #12
   12722:	6823      	ldr	r3, [r4, #0]
   12724:	42b3      	cmp	r3, r6
   12726:	d019      	beq.n	1275c <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   12728:	460d      	mov	r5, r1
   1272a:	4620      	mov	r0, r4
   1272c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   12730:	f104 0904 	add.w	r9, r4, #4
   12734:	4617      	mov	r7, r2
   12736:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1273a:	f000 f8e9 	bl	12910 <mbedtls_platform_zeroize>
   1273e:	4648      	mov	r0, r9
   12740:	f000 fcac 	bl	1309c <cc_mbedtls_entropy_init>
   12744:	4640      	mov	r0, r8
   12746:	f000 fadb 	bl	12d00 <cc_mbedtls_ctr_drbg_init>
   1274a:	4908      	ldr	r1, [pc, #32]	; (1276c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1274c:	9700      	str	r7, [sp, #0]
   1274e:	462b      	mov	r3, r5
   12750:	464a      	mov	r2, r9
   12752:	4640      	mov	r0, r8
   12754:	f000 faea 	bl	12d2c <cc_mbedtls_ctr_drbg_seed>
   12758:	b908      	cbnz	r0, 1275e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1275a:	6026      	str	r6, [r4, #0]
   1275c:	2000      	movs	r0, #0
   1275e:	b003      	add	sp, #12
   12760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12764:	20002324 	.word	0x20002324
   12768:	5ac9bca5 	.word	0x5ac9bca5
   1276c:	00013125 	.word	0x00013125

00012770 <nrf_cc3xx_platform_ctr_drbg_get>:
   12770:	b570      	push	{r4, r5, r6, lr}
   12772:	461d      	mov	r5, r3
   12774:	4b0c      	ldr	r3, [pc, #48]	; (127a8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   12776:	2800      	cmp	r0, #0
   12778:	bf18      	it	ne
   1277a:	4603      	movne	r3, r0
   1277c:	480b      	ldr	r0, [pc, #44]	; (127ac <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1277e:	681e      	ldr	r6, [r3, #0]
   12780:	4286      	cmp	r6, r0
   12782:	b082      	sub	sp, #8
   12784:	d10d      	bne.n	127a2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   12786:	2600      	movs	r6, #0
   12788:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   1278c:	9600      	str	r6, [sp, #0]
   1278e:	4633      	mov	r3, r6
   12790:	4614      	mov	r4, r2
   12792:	f000 fb17 	bl	12dc4 <cc_mbedtls_ctr_drbg_random_with_add>
   12796:	2800      	cmp	r0, #0
   12798:	bf18      	it	ne
   1279a:	4634      	movne	r4, r6
   1279c:	602c      	str	r4, [r5, #0]
   1279e:	b002      	add	sp, #8
   127a0:	bd70      	pop	{r4, r5, r6, pc}
   127a2:	4803      	ldr	r0, [pc, #12]	; (127b0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   127a4:	e7fb      	b.n	1279e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   127a6:	bf00      	nop
   127a8:	20002324 	.word	0x20002324
   127ac:	5ac9bca5 	.word	0x5ac9bca5
   127b0:	ffff8fe8 	.word	0xffff8fe8

000127b4 <mutex_free>:
   127b4:	b510      	push	{r4, lr}
   127b6:	4604      	mov	r4, r0
   127b8:	b150      	cbz	r0, 127d0 <mutex_free+0x1c>
   127ba:	6863      	ldr	r3, [r4, #4]
   127bc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   127c0:	d005      	beq.n	127ce <mutex_free+0x1a>
   127c2:	4a06      	ldr	r2, [pc, #24]	; (127dc <mutex_free+0x28>)
   127c4:	4293      	cmp	r3, r2
   127c6:	d002      	beq.n	127ce <mutex_free+0x1a>
   127c8:	2300      	movs	r3, #0
   127ca:	6023      	str	r3, [r4, #0]
   127cc:	6062      	str	r2, [r4, #4]
   127ce:	bd10      	pop	{r4, pc}
   127d0:	4b03      	ldr	r3, [pc, #12]	; (127e0 <mutex_free+0x2c>)
   127d2:	4804      	ldr	r0, [pc, #16]	; (127e4 <mutex_free+0x30>)
   127d4:	685b      	ldr	r3, [r3, #4]
   127d6:	4798      	blx	r3
   127d8:	e7ef      	b.n	127ba <mutex_free+0x6>
   127da:	bf00      	nop
   127dc:	a95c5f2c 	.word	0xa95c5f2c
   127e0:	200005a0 	.word	0x200005a0
   127e4:	00017878 	.word	0x00017878

000127e8 <mutex_lock>:
   127e8:	b1c8      	cbz	r0, 1281e <mutex_lock+0x36>
   127ea:	6843      	ldr	r3, [r0, #4]
   127ec:	4a0d      	ldr	r2, [pc, #52]	; (12824 <mutex_lock+0x3c>)
   127ee:	4293      	cmp	r3, r2
   127f0:	d013      	beq.n	1281a <mutex_lock+0x32>
   127f2:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   127f6:	d00e      	beq.n	12816 <mutex_lock+0x2e>
   127f8:	2301      	movs	r3, #1
   127fa:	e850 2f00 	ldrex	r2, [r0]
   127fe:	4619      	mov	r1, r3
   12800:	e840 1c00 	strex	ip, r1, [r0]
   12804:	f09c 0f00 	teq	ip, #0
   12808:	d1f7      	bne.n	127fa <mutex_lock+0x12>
   1280a:	2a01      	cmp	r2, #1
   1280c:	d0f5      	beq.n	127fa <mutex_lock+0x12>
   1280e:	f3bf 8f5f 	dmb	sy
   12812:	2000      	movs	r0, #0
   12814:	4770      	bx	lr
   12816:	4804      	ldr	r0, [pc, #16]	; (12828 <mutex_lock+0x40>)
   12818:	4770      	bx	lr
   1281a:	4804      	ldr	r0, [pc, #16]	; (1282c <mutex_lock+0x44>)
   1281c:	4770      	bx	lr
   1281e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12822:	4770      	bx	lr
   12824:	a95c5f2c 	.word	0xa95c5f2c
   12828:	ffff8fe9 	.word	0xffff8fe9
   1282c:	ffff8fea 	.word	0xffff8fea

00012830 <mutex_unlock>:
   12830:	b180      	cbz	r0, 12854 <mutex_unlock+0x24>
   12832:	6843      	ldr	r3, [r0, #4]
   12834:	4a09      	ldr	r2, [pc, #36]	; (1285c <mutex_unlock+0x2c>)
   12836:	4293      	cmp	r3, r2
   12838:	d00a      	beq.n	12850 <mutex_unlock+0x20>
   1283a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1283e:	d005      	beq.n	1284c <mutex_unlock+0x1c>
   12840:	f3bf 8f5f 	dmb	sy
   12844:	2300      	movs	r3, #0
   12846:	6003      	str	r3, [r0, #0]
   12848:	4618      	mov	r0, r3
   1284a:	4770      	bx	lr
   1284c:	4804      	ldr	r0, [pc, #16]	; (12860 <mutex_unlock+0x30>)
   1284e:	4770      	bx	lr
   12850:	4804      	ldr	r0, [pc, #16]	; (12864 <mutex_unlock+0x34>)
   12852:	4770      	bx	lr
   12854:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12858:	4770      	bx	lr
   1285a:	bf00      	nop
   1285c:	a95c5f2c 	.word	0xa95c5f2c
   12860:	ffff8fe9 	.word	0xffff8fe9
   12864:	ffff8fea 	.word	0xffff8fea

00012868 <mutex_init>:
   12868:	b510      	push	{r4, lr}
   1286a:	4604      	mov	r4, r0
   1286c:	b120      	cbz	r0, 12878 <mutex_init+0x10>
   1286e:	4b04      	ldr	r3, [pc, #16]	; (12880 <mutex_init+0x18>)
   12870:	6063      	str	r3, [r4, #4]
   12872:	2200      	movs	r2, #0
   12874:	6022      	str	r2, [r4, #0]
   12876:	bd10      	pop	{r4, pc}
   12878:	4802      	ldr	r0, [pc, #8]	; (12884 <mutex_init+0x1c>)
   1287a:	f7ff ff27 	bl	126cc <CC_PalAbort>
   1287e:	e7f6      	b.n	1286e <mutex_init+0x6>
   12880:	3a00003a 	.word	0x3a00003a
   12884:	000178a0 	.word	0x000178a0

00012888 <nrf_cc3xx_platform_set_mutexes>:
   12888:	b570      	push	{r4, r5, r6, lr}
   1288a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1288e:	4c17      	ldr	r4, [pc, #92]	; (128ec <nrf_cc3xx_platform_set_mutexes+0x64>)
   12890:	4d17      	ldr	r5, [pc, #92]	; (128f0 <nrf_cc3xx_platform_set_mutexes+0x68>)
   12892:	6063      	str	r3, [r4, #4]
   12894:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   12898:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1289c:	6022      	str	r2, [r4, #0]
   1289e:	6848      	ldr	r0, [r1, #4]
   128a0:	f8d1 c000 	ldr.w	ip, [r1]
   128a4:	4b13      	ldr	r3, [pc, #76]	; (128f4 <nrf_cc3xx_platform_set_mutexes+0x6c>)
   128a6:	e9c3 c000 	strd	ip, r0, [r3]
   128aa:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   128ae:	f8d1 c008 	ldr.w	ip, [r1, #8]
   128b2:	f8c3 c008 	str.w	ip, [r3, #8]
   128b6:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   128ba:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   128be:	6909      	ldr	r1, [r1, #16]
   128c0:	f8c3 c00c 	str.w	ip, [r3, #12]
   128c4:	6119      	str	r1, [r3, #16]
   128c6:	d010      	beq.n	128ea <nrf_cc3xx_platform_set_mutexes+0x62>
   128c8:	490b      	ldr	r1, [pc, #44]	; (128f8 <nrf_cc3xx_platform_set_mutexes+0x70>)
   128ca:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   128ce:	2300      	movs	r3, #0
   128d0:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   128d4:	f505 708a 	add.w	r0, r5, #276	; 0x114
   128d8:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   128dc:	4790      	blx	r2
   128de:	6823      	ldr	r3, [r4, #0]
   128e0:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   128e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   128e8:	4718      	bx	r3
   128ea:	bd70      	pop	{r4, r5, r6, pc}
   128ec:	200005bc 	.word	0x200005bc
   128f0:	20002324 	.word	0x20002324
   128f4:	200005a8 	.word	0x200005a8
   128f8:	a95c5f2c 	.word	0xa95c5f2c

000128fc <mbedtls_zeroize_internal>:
   128fc:	b138      	cbz	r0, 1290e <mbedtls_zeroize_internal+0x12>
   128fe:	b131      	cbz	r1, 1290e <mbedtls_zeroize_internal+0x12>
   12900:	4401      	add	r1, r0
   12902:	2200      	movs	r2, #0
   12904:	4603      	mov	r3, r0
   12906:	3001      	adds	r0, #1
   12908:	4281      	cmp	r1, r0
   1290a:	701a      	strb	r2, [r3, #0]
   1290c:	d1fa      	bne.n	12904 <mbedtls_zeroize_internal+0x8>
   1290e:	4770      	bx	lr

00012910 <mbedtls_platform_zeroize>:
   12910:	b138      	cbz	r0, 12922 <mbedtls_platform_zeroize+0x12>
   12912:	b131      	cbz	r1, 12922 <mbedtls_platform_zeroize+0x12>
   12914:	4401      	add	r1, r0
   12916:	2200      	movs	r2, #0
   12918:	4603      	mov	r3, r0
   1291a:	3001      	adds	r0, #1
   1291c:	4288      	cmp	r0, r1
   1291e:	701a      	strb	r2, [r3, #0]
   12920:	d1fa      	bne.n	12918 <mbedtls_platform_zeroize+0x8>
   12922:	4770      	bx	lr

00012924 <block_cipher_df>:
   12924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12928:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1292c:	b0b5      	sub	sp, #212	; 0xd4
   1292e:	f200 80d7 	bhi.w	12ae0 <block_cipher_df+0x1bc>
   12932:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 12ae8 <block_cipher_df+0x1c4>
   12936:	4614      	mov	r4, r2
   12938:	460d      	mov	r5, r1
   1293a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1293e:	2100      	movs	r1, #0
   12940:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   12944:	4607      	mov	r7, r0
   12946:	4648      	mov	r0, r9
   12948:	f002 fe93 	bl	15672 <memset>
   1294c:	4640      	mov	r0, r8
   1294e:	f001 f951 	bl	13bf4 <cc_mbedtls_aes_init>
   12952:	2300      	movs	r3, #0
   12954:	f8a9 3010 	strh.w	r3, [r9, #16]
   12958:	ba63      	rev16	r3, r4
   1295a:	f109 0618 	add.w	r6, r9, #24
   1295e:	f8a9 3012 	strh.w	r3, [r9, #18]
   12962:	2320      	movs	r3, #32
   12964:	4629      	mov	r1, r5
   12966:	4622      	mov	r2, r4
   12968:	f889 3017 	strb.w	r3, [r9, #23]
   1296c:	4630      	mov	r0, r6
   1296e:	f002 fe75 	bl	1565c <memcpy>
   12972:	4b5e      	ldr	r3, [pc, #376]	; (12aec <block_cipher_df+0x1c8>)
   12974:	9307      	str	r3, [sp, #28]
   12976:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1297a:	2280      	movs	r2, #128	; 0x80
   1297c:	9308      	str	r3, [sp, #32]
   1297e:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   12982:	9309      	str	r3, [sp, #36]	; 0x24
   12984:	5532      	strb	r2, [r6, r4]
   12986:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1298a:	a907      	add	r1, sp, #28
   1298c:	4640      	mov	r0, r8
   1298e:	930a      	str	r3, [sp, #40]	; 0x28
   12990:	f001 f946 	bl	13c20 <cc_mbedtls_aes_setkey_enc>
   12994:	4682      	mov	sl, r0
   12996:	2800      	cmp	r0, #0
   12998:	d17f      	bne.n	12a9a <block_cipher_df+0x176>
   1299a:	f104 0319 	add.w	r3, r4, #25
   1299e:	ae0b      	add	r6, sp, #44	; 0x2c
   129a0:	ac0f      	add	r4, sp, #60	; 0x3c
   129a2:	9302      	str	r3, [sp, #8]
   129a4:	9703      	str	r7, [sp, #12]
   129a6:	9601      	str	r6, [sp, #4]
   129a8:	9404      	str	r4, [sp, #16]
   129aa:	9801      	ldr	r0, [sp, #4]
   129ac:	f8df b140 	ldr.w	fp, [pc, #320]	; 12af0 <block_cipher_df+0x1cc>
   129b0:	2210      	movs	r2, #16
   129b2:	2100      	movs	r1, #0
   129b4:	f002 fe5d 	bl	15672 <memset>
   129b8:	f8dd a008 	ldr.w	sl, [sp, #8]
   129bc:	9405      	str	r4, [sp, #20]
   129be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   129c0:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   129c4:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   129c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   129ca:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   129ce:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   129d2:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   129d6:	405c      	eors	r4, r3
   129d8:	9b01      	ldr	r3, [sp, #4]
   129da:	407e      	eors	r6, r7
   129dc:	4055      	eors	r5, r2
   129de:	ea81 0700 	eor.w	r7, r1, r0
   129e2:	461a      	mov	r2, r3
   129e4:	2101      	movs	r1, #1
   129e6:	4640      	mov	r0, r8
   129e8:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   129ec:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   129f0:	f001 f930 	bl	13c54 <cc_mbedtls_aes_crypt_ecb>
   129f4:	f1ba 0f10 	cmp.w	sl, #16
   129f8:	bf94      	ite	ls
   129fa:	ebaa 0a0a 	subls.w	sl, sl, sl
   129fe:	f1aa 0a10 	subhi.w	sl, sl, #16
   12a02:	f10b 0b10 	add.w	fp, fp, #16
   12a06:	2800      	cmp	r0, #0
   12a08:	d165      	bne.n	12ad6 <block_cipher_df+0x1b2>
   12a0a:	f1ba 0f00 	cmp.w	sl, #0
   12a0e:	d1d6      	bne.n	129be <block_cipher_df+0x9a>
   12a10:	9c05      	ldr	r4, [sp, #20]
   12a12:	9901      	ldr	r1, [sp, #4]
   12a14:	4620      	mov	r0, r4
   12a16:	2210      	movs	r2, #16
   12a18:	f002 fe20 	bl	1565c <memcpy>
   12a1c:	f899 3003 	ldrb.w	r3, [r9, #3]
   12a20:	3410      	adds	r4, #16
   12a22:	3301      	adds	r3, #1
   12a24:	45a0      	cmp	r8, r4
   12a26:	f889 3003 	strb.w	r3, [r9, #3]
   12a2a:	d1be      	bne.n	129aa <block_cipher_df+0x86>
   12a2c:	9c04      	ldr	r4, [sp, #16]
   12a2e:	9f03      	ldr	r7, [sp, #12]
   12a30:	9e01      	ldr	r6, [sp, #4]
   12a32:	2280      	movs	r2, #128	; 0x80
   12a34:	4621      	mov	r1, r4
   12a36:	4640      	mov	r0, r8
   12a38:	f001 f8f2 	bl	13c20 <cc_mbedtls_aes_setkey_enc>
   12a3c:	4682      	mov	sl, r0
   12a3e:	bb70      	cbnz	r0, 12a9e <block_cipher_df+0x17a>
   12a40:	f107 0920 	add.w	r9, r7, #32
   12a44:	463d      	mov	r5, r7
   12a46:	ab13      	add	r3, sp, #76	; 0x4c
   12a48:	461a      	mov	r2, r3
   12a4a:	2101      	movs	r1, #1
   12a4c:	4640      	mov	r0, r8
   12a4e:	f001 f901 	bl	13c54 <cc_mbedtls_aes_crypt_ecb>
   12a52:	2210      	movs	r2, #16
   12a54:	4682      	mov	sl, r0
   12a56:	a913      	add	r1, sp, #76	; 0x4c
   12a58:	4628      	mov	r0, r5
   12a5a:	4415      	add	r5, r2
   12a5c:	f1ba 0f00 	cmp.w	sl, #0
   12a60:	d11d      	bne.n	12a9e <block_cipher_df+0x17a>
   12a62:	f002 fdfb 	bl	1565c <memcpy>
   12a66:	454d      	cmp	r5, r9
   12a68:	d1ed      	bne.n	12a46 <block_cipher_df+0x122>
   12a6a:	4640      	mov	r0, r8
   12a6c:	f001 f8d2 	bl	13c14 <cc_mbedtls_aes_free>
   12a70:	481d      	ldr	r0, [pc, #116]	; (12ae8 <block_cipher_df+0x1c4>)
   12a72:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   12a76:	f7ff ff4b 	bl	12910 <mbedtls_platform_zeroize>
   12a7a:	4620      	mov	r0, r4
   12a7c:	2120      	movs	r1, #32
   12a7e:	f7ff ff47 	bl	12910 <mbedtls_platform_zeroize>
   12a82:	a807      	add	r0, sp, #28
   12a84:	2110      	movs	r1, #16
   12a86:	f7ff ff43 	bl	12910 <mbedtls_platform_zeroize>
   12a8a:	4630      	mov	r0, r6
   12a8c:	2110      	movs	r1, #16
   12a8e:	f7ff ff3f 	bl	12910 <mbedtls_platform_zeroize>
   12a92:	4650      	mov	r0, sl
   12a94:	b035      	add	sp, #212	; 0xd4
   12a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a9a:	ac0f      	add	r4, sp, #60	; 0x3c
   12a9c:	ae0b      	add	r6, sp, #44	; 0x2c
   12a9e:	4640      	mov	r0, r8
   12aa0:	f001 f8b8 	bl	13c14 <cc_mbedtls_aes_free>
   12aa4:	4810      	ldr	r0, [pc, #64]	; (12ae8 <block_cipher_df+0x1c4>)
   12aa6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   12aaa:	f7ff ff31 	bl	12910 <mbedtls_platform_zeroize>
   12aae:	4620      	mov	r0, r4
   12ab0:	2120      	movs	r1, #32
   12ab2:	f7ff ff2d 	bl	12910 <mbedtls_platform_zeroize>
   12ab6:	a807      	add	r0, sp, #28
   12ab8:	2110      	movs	r1, #16
   12aba:	f7ff ff29 	bl	12910 <mbedtls_platform_zeroize>
   12abe:	2110      	movs	r1, #16
   12ac0:	4630      	mov	r0, r6
   12ac2:	f7ff ff25 	bl	12910 <mbedtls_platform_zeroize>
   12ac6:	2120      	movs	r1, #32
   12ac8:	4638      	mov	r0, r7
   12aca:	f7ff ff21 	bl	12910 <mbedtls_platform_zeroize>
   12ace:	4650      	mov	r0, sl
   12ad0:	b035      	add	sp, #212	; 0xd4
   12ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad6:	9f03      	ldr	r7, [sp, #12]
   12ad8:	9e01      	ldr	r6, [sp, #4]
   12ada:	9c04      	ldr	r4, [sp, #16]
   12adc:	4682      	mov	sl, r0
   12ade:	e7de      	b.n	12a9e <block_cipher_df+0x17a>
   12ae0:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   12ae4:	e7f3      	b.n	12ace <block_cipher_df+0x1aa>
   12ae6:	bf00      	nop
   12ae8:	200024f4 	.word	0x200024f4
   12aec:	03020100 	.word	0x03020100
   12af0:	20002504 	.word	0x20002504

00012af4 <ctr_drbg_update_internal>:
   12af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12af8:	b088      	sub	sp, #32
   12afa:	4604      	mov	r4, r0
   12afc:	460d      	mov	r5, r1
   12afe:	2220      	movs	r2, #32
   12b00:	2100      	movs	r1, #0
   12b02:	4668      	mov	r0, sp
   12b04:	f002 fdb5 	bl	15672 <memset>
   12b08:	f104 0620 	add.w	r6, r4, #32
   12b0c:	466f      	mov	r7, sp
   12b0e:	7be2      	ldrb	r2, [r4, #15]
   12b10:	3201      	adds	r2, #1
   12b12:	b2d2      	uxtb	r2, r2
   12b14:	73e2      	strb	r2, [r4, #15]
   12b16:	2a00      	cmp	r2, #0
   12b18:	d14d      	bne.n	12bb6 <ctr_drbg_update_internal+0xc2>
   12b1a:	7ba2      	ldrb	r2, [r4, #14]
   12b1c:	3201      	adds	r2, #1
   12b1e:	b2d2      	uxtb	r2, r2
   12b20:	73a2      	strb	r2, [r4, #14]
   12b22:	2a00      	cmp	r2, #0
   12b24:	d147      	bne.n	12bb6 <ctr_drbg_update_internal+0xc2>
   12b26:	7b63      	ldrb	r3, [r4, #13]
   12b28:	3301      	adds	r3, #1
   12b2a:	b2db      	uxtb	r3, r3
   12b2c:	7363      	strb	r3, [r4, #13]
   12b2e:	2b00      	cmp	r3, #0
   12b30:	d141      	bne.n	12bb6 <ctr_drbg_update_internal+0xc2>
   12b32:	7b23      	ldrb	r3, [r4, #12]
   12b34:	3301      	adds	r3, #1
   12b36:	b2db      	uxtb	r3, r3
   12b38:	7323      	strb	r3, [r4, #12]
   12b3a:	2b00      	cmp	r3, #0
   12b3c:	d13b      	bne.n	12bb6 <ctr_drbg_update_internal+0xc2>
   12b3e:	7ae3      	ldrb	r3, [r4, #11]
   12b40:	3301      	adds	r3, #1
   12b42:	b2db      	uxtb	r3, r3
   12b44:	72e3      	strb	r3, [r4, #11]
   12b46:	2b00      	cmp	r3, #0
   12b48:	d135      	bne.n	12bb6 <ctr_drbg_update_internal+0xc2>
   12b4a:	7aa3      	ldrb	r3, [r4, #10]
   12b4c:	3301      	adds	r3, #1
   12b4e:	b2db      	uxtb	r3, r3
   12b50:	72a3      	strb	r3, [r4, #10]
   12b52:	2b00      	cmp	r3, #0
   12b54:	d12f      	bne.n	12bb6 <ctr_drbg_update_internal+0xc2>
   12b56:	7a63      	ldrb	r3, [r4, #9]
   12b58:	3301      	adds	r3, #1
   12b5a:	b2db      	uxtb	r3, r3
   12b5c:	7263      	strb	r3, [r4, #9]
   12b5e:	bb53      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b60:	7a23      	ldrb	r3, [r4, #8]
   12b62:	3301      	adds	r3, #1
   12b64:	b2db      	uxtb	r3, r3
   12b66:	7223      	strb	r3, [r4, #8]
   12b68:	bb2b      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b6a:	79e3      	ldrb	r3, [r4, #7]
   12b6c:	3301      	adds	r3, #1
   12b6e:	b2db      	uxtb	r3, r3
   12b70:	71e3      	strb	r3, [r4, #7]
   12b72:	bb03      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b74:	79a3      	ldrb	r3, [r4, #6]
   12b76:	3301      	adds	r3, #1
   12b78:	b2db      	uxtb	r3, r3
   12b7a:	71a3      	strb	r3, [r4, #6]
   12b7c:	b9db      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b7e:	7963      	ldrb	r3, [r4, #5]
   12b80:	3301      	adds	r3, #1
   12b82:	b2db      	uxtb	r3, r3
   12b84:	7163      	strb	r3, [r4, #5]
   12b86:	b9b3      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b88:	7923      	ldrb	r3, [r4, #4]
   12b8a:	3301      	adds	r3, #1
   12b8c:	b2db      	uxtb	r3, r3
   12b8e:	7123      	strb	r3, [r4, #4]
   12b90:	b98b      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b92:	78e3      	ldrb	r3, [r4, #3]
   12b94:	3301      	adds	r3, #1
   12b96:	b2db      	uxtb	r3, r3
   12b98:	70e3      	strb	r3, [r4, #3]
   12b9a:	b963      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12b9c:	78a3      	ldrb	r3, [r4, #2]
   12b9e:	3301      	adds	r3, #1
   12ba0:	b2db      	uxtb	r3, r3
   12ba2:	70a3      	strb	r3, [r4, #2]
   12ba4:	b93b      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12ba6:	7863      	ldrb	r3, [r4, #1]
   12ba8:	3301      	adds	r3, #1
   12baa:	b2db      	uxtb	r3, r3
   12bac:	7063      	strb	r3, [r4, #1]
   12bae:	b913      	cbnz	r3, 12bb6 <ctr_drbg_update_internal+0xc2>
   12bb0:	7823      	ldrb	r3, [r4, #0]
   12bb2:	3301      	adds	r3, #1
   12bb4:	7023      	strb	r3, [r4, #0]
   12bb6:	463b      	mov	r3, r7
   12bb8:	4622      	mov	r2, r4
   12bba:	2101      	movs	r1, #1
   12bbc:	4630      	mov	r0, r6
   12bbe:	f001 f849 	bl	13c54 <cc_mbedtls_aes_crypt_ecb>
   12bc2:	4680      	mov	r8, r0
   12bc4:	bb50      	cbnz	r0, 12c1c <ctr_drbg_update_internal+0x128>
   12bc6:	3710      	adds	r7, #16
   12bc8:	ab08      	add	r3, sp, #32
   12bca:	429f      	cmp	r7, r3
   12bcc:	d19f      	bne.n	12b0e <ctr_drbg_update_internal+0x1a>
   12bce:	9a02      	ldr	r2, [sp, #8]
   12bd0:	68ab      	ldr	r3, [r5, #8]
   12bd2:	9f03      	ldr	r7, [sp, #12]
   12bd4:	9907      	ldr	r1, [sp, #28]
   12bd6:	4053      	eors	r3, r2
   12bd8:	9302      	str	r3, [sp, #8]
   12bda:	4630      	mov	r0, r6
   12bdc:	68ee      	ldr	r6, [r5, #12]
   12bde:	9b00      	ldr	r3, [sp, #0]
   12be0:	407e      	eors	r6, r7
   12be2:	9603      	str	r6, [sp, #12]
   12be4:	9f04      	ldr	r7, [sp, #16]
   12be6:	692e      	ldr	r6, [r5, #16]
   12be8:	407e      	eors	r6, r7
   12bea:	9604      	str	r6, [sp, #16]
   12bec:	696e      	ldr	r6, [r5, #20]
   12bee:	9f05      	ldr	r7, [sp, #20]
   12bf0:	407e      	eors	r6, r7
   12bf2:	9605      	str	r6, [sp, #20]
   12bf4:	9f06      	ldr	r7, [sp, #24]
   12bf6:	69ae      	ldr	r6, [r5, #24]
   12bf8:	407e      	eors	r6, r7
   12bfa:	9606      	str	r6, [sp, #24]
   12bfc:	69ee      	ldr	r6, [r5, #28]
   12bfe:	4071      	eors	r1, r6
   12c00:	9107      	str	r1, [sp, #28]
   12c02:	6829      	ldr	r1, [r5, #0]
   12c04:	404b      	eors	r3, r1
   12c06:	9300      	str	r3, [sp, #0]
   12c08:	9901      	ldr	r1, [sp, #4]
   12c0a:	686b      	ldr	r3, [r5, #4]
   12c0c:	2280      	movs	r2, #128	; 0x80
   12c0e:	404b      	eors	r3, r1
   12c10:	4669      	mov	r1, sp
   12c12:	9301      	str	r3, [sp, #4]
   12c14:	f001 f804 	bl	13c20 <cc_mbedtls_aes_setkey_enc>
   12c18:	4680      	mov	r8, r0
   12c1a:	b138      	cbz	r0, 12c2c <ctr_drbg_update_internal+0x138>
   12c1c:	4668      	mov	r0, sp
   12c1e:	2120      	movs	r1, #32
   12c20:	f7ff fe76 	bl	12910 <mbedtls_platform_zeroize>
   12c24:	4640      	mov	r0, r8
   12c26:	b008      	add	sp, #32
   12c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12c2c:	2210      	movs	r2, #16
   12c2e:	eb0d 0102 	add.w	r1, sp, r2
   12c32:	4620      	mov	r0, r4
   12c34:	f002 fd12 	bl	1565c <memcpy>
   12c38:	e7f0      	b.n	12c1c <ctr_drbg_update_internal+0x128>
   12c3a:	bf00      	nop

00012c3c <mbedtls_ctr_drbg_reseed_internal>:
   12c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c40:	4604      	mov	r4, r0
   12c42:	6980      	ldr	r0, [r0, #24]
   12c44:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   12c48:	d852      	bhi.n	12cf0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   12c4a:	461d      	mov	r5, r3
   12c4c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   12c50:	42ab      	cmp	r3, r5
   12c52:	d34d      	bcc.n	12cf0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   12c54:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   12c58:	1a1b      	subs	r3, r3, r0
   12c5a:	4293      	cmp	r3, r2
   12c5c:	4616      	mov	r6, r2
   12c5e:	d347      	bcc.n	12cf0 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   12c60:	f8df 9098 	ldr.w	r9, [pc, #152]	; 12cfc <mbedtls_ctr_drbg_reseed_internal+0xc0>
   12c64:	f44f 72c0 	mov.w	r2, #384	; 0x180
   12c68:	460f      	mov	r7, r1
   12c6a:	4648      	mov	r0, r9
   12c6c:	2100      	movs	r1, #0
   12c6e:	f002 fd00 	bl	15672 <memset>
   12c72:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   12c76:	69a2      	ldr	r2, [r4, #24]
   12c78:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   12c7c:	4649      	mov	r1, r9
   12c7e:	4798      	blx	r3
   12c80:	2800      	cmp	r0, #0
   12c82:	d138      	bne.n	12cf6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   12c84:	f8d4 8018 	ldr.w	r8, [r4, #24]
   12c88:	b13d      	cbz	r5, 12c9a <mbedtls_ctr_drbg_reseed_internal+0x5e>
   12c8a:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   12c8e:	462a      	mov	r2, r5
   12c90:	eb09 0108 	add.w	r1, r9, r8
   12c94:	4798      	blx	r3
   12c96:	bb70      	cbnz	r0, 12cf6 <mbedtls_ctr_drbg_reseed_internal+0xba>
   12c98:	44a8      	add	r8, r5
   12c9a:	b107      	cbz	r7, 12c9e <mbedtls_ctr_drbg_reseed_internal+0x62>
   12c9c:	b9c6      	cbnz	r6, 12cd0 <mbedtls_ctr_drbg_reseed_internal+0x94>
   12c9e:	4917      	ldr	r1, [pc, #92]	; (12cfc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   12ca0:	4642      	mov	r2, r8
   12ca2:	4608      	mov	r0, r1
   12ca4:	f7ff fe3e 	bl	12924 <block_cipher_df>
   12ca8:	4605      	mov	r5, r0
   12caa:	b138      	cbz	r0, 12cbc <mbedtls_ctr_drbg_reseed_internal+0x80>
   12cac:	4813      	ldr	r0, [pc, #76]	; (12cfc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   12cae:	f44f 71c0 	mov.w	r1, #384	; 0x180
   12cb2:	f7ff fe2d 	bl	12910 <mbedtls_platform_zeroize>
   12cb6:	4628      	mov	r0, r5
   12cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12cbc:	490f      	ldr	r1, [pc, #60]	; (12cfc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   12cbe:	4620      	mov	r0, r4
   12cc0:	f7ff ff18 	bl	12af4 <ctr_drbg_update_internal>
   12cc4:	4605      	mov	r5, r0
   12cc6:	2800      	cmp	r0, #0
   12cc8:	d1f0      	bne.n	12cac <mbedtls_ctr_drbg_reseed_internal+0x70>
   12cca:	2301      	movs	r3, #1
   12ccc:	6123      	str	r3, [r4, #16]
   12cce:	e7ed      	b.n	12cac <mbedtls_ctr_drbg_reseed_internal+0x70>
   12cd0:	eb09 0008 	add.w	r0, r9, r8
   12cd4:	4639      	mov	r1, r7
   12cd6:	4632      	mov	r2, r6
   12cd8:	f002 fcc0 	bl	1565c <memcpy>
   12cdc:	4907      	ldr	r1, [pc, #28]	; (12cfc <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   12cde:	44b0      	add	r8, r6
   12ce0:	4642      	mov	r2, r8
   12ce2:	4608      	mov	r0, r1
   12ce4:	f7ff fe1e 	bl	12924 <block_cipher_df>
   12ce8:	4605      	mov	r5, r0
   12cea:	2800      	cmp	r0, #0
   12cec:	d1de      	bne.n	12cac <mbedtls_ctr_drbg_reseed_internal+0x70>
   12cee:	e7e5      	b.n	12cbc <mbedtls_ctr_drbg_reseed_internal+0x80>
   12cf0:	f06f 0537 	mvn.w	r5, #55	; 0x37
   12cf4:	e7df      	b.n	12cb6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   12cf6:	f06f 0533 	mvn.w	r5, #51	; 0x33
   12cfa:	e7dc      	b.n	12cb6 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   12cfc:	20002694 	.word	0x20002694

00012d00 <cc_mbedtls_ctr_drbg_init>:
   12d00:	b510      	push	{r4, lr}
   12d02:	22a4      	movs	r2, #164	; 0xa4
   12d04:	4604      	mov	r4, r0
   12d06:	2100      	movs	r1, #0
   12d08:	f002 fcb3 	bl	15672 <memset>
   12d0c:	4b06      	ldr	r3, [pc, #24]	; (12d28 <cc_mbedtls_ctr_drbg_init+0x28>)
   12d0e:	f04f 31ff 	mov.w	r1, #4294967295
   12d12:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   12d16:	6121      	str	r1, [r4, #16]
   12d18:	61e2      	str	r2, [r4, #28]
   12d1a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   12d1e:	681b      	ldr	r3, [r3, #0]
   12d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12d24:	4718      	bx	r3
   12d26:	bf00      	nop
   12d28:	2000060c 	.word	0x2000060c

00012d2c <cc_mbedtls_ctr_drbg_seed>:
   12d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d30:	b085      	sub	sp, #20
   12d32:	4605      	mov	r5, r0
   12d34:	460f      	mov	r7, r1
   12d36:	4616      	mov	r6, r2
   12d38:	2100      	movs	r1, #0
   12d3a:	2210      	movs	r2, #16
   12d3c:	4668      	mov	r0, sp
   12d3e:	4699      	mov	r9, r3
   12d40:	f002 fc97 	bl	15672 <memset>
   12d44:	4b1d      	ldr	r3, [pc, #116]	; (12dbc <cc_mbedtls_ctr_drbg_seed+0x90>)
   12d46:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   12d4a:	681b      	ldr	r3, [r3, #0]
   12d4c:	4640      	mov	r0, r8
   12d4e:	4798      	blx	r3
   12d50:	b120      	cbz	r0, 12d5c <cc_mbedtls_ctr_drbg_seed+0x30>
   12d52:	4604      	mov	r4, r0
   12d54:	4620      	mov	r0, r4
   12d56:	b005      	add	sp, #20
   12d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d5c:	f105 0420 	add.w	r4, r5, #32
   12d60:	4620      	mov	r0, r4
   12d62:	f000 ff47 	bl	13bf4 <cc_mbedtls_aes_init>
   12d66:	69aa      	ldr	r2, [r5, #24]
   12d68:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   12d6c:	692e      	ldr	r6, [r5, #16]
   12d6e:	b9e2      	cbnz	r2, 12daa <cc_mbedtls_ctr_drbg_seed+0x7e>
   12d70:	2220      	movs	r2, #32
   12d72:	2e00      	cmp	r6, #0
   12d74:	61aa      	str	r2, [r5, #24]
   12d76:	db1f      	blt.n	12db8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   12d78:	4620      	mov	r0, r4
   12d7a:	4669      	mov	r1, sp
   12d7c:	2280      	movs	r2, #128	; 0x80
   12d7e:	f000 ff4f 	bl	13c20 <cc_mbedtls_aes_setkey_enc>
   12d82:	4604      	mov	r4, r0
   12d84:	b930      	cbnz	r0, 12d94 <cc_mbedtls_ctr_drbg_seed+0x68>
   12d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12d88:	4633      	mov	r3, r6
   12d8a:	4649      	mov	r1, r9
   12d8c:	4628      	mov	r0, r5
   12d8e:	f7ff ff55 	bl	12c3c <mbedtls_ctr_drbg_reseed_internal>
   12d92:	4604      	mov	r4, r0
   12d94:	4b0a      	ldr	r3, [pc, #40]	; (12dc0 <cc_mbedtls_ctr_drbg_seed+0x94>)
   12d96:	4640      	mov	r0, r8
   12d98:	681b      	ldr	r3, [r3, #0]
   12d9a:	4798      	blx	r3
   12d9c:	2800      	cmp	r0, #0
   12d9e:	bf18      	it	ne
   12da0:	4604      	movne	r4, r0
   12da2:	4620      	mov	r0, r4
   12da4:	b005      	add	sp, #20
   12da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12daa:	2e00      	cmp	r6, #0
   12dac:	dae4      	bge.n	12d78 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12dae:	2a17      	cmp	r2, #23
   12db0:	d802      	bhi.n	12db8 <cc_mbedtls_ctr_drbg_seed+0x8c>
   12db2:	3201      	adds	r2, #1
   12db4:	0856      	lsrs	r6, r2, #1
   12db6:	e7df      	b.n	12d78 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12db8:	2600      	movs	r6, #0
   12dba:	e7dd      	b.n	12d78 <cc_mbedtls_ctr_drbg_seed+0x4c>
   12dbc:	20000608 	.word	0x20000608
   12dc0:	20000604 	.word	0x20000604

00012dc4 <cc_mbedtls_ctr_drbg_random_with_add>:
   12dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc8:	b08d      	sub	sp, #52	; 0x34
   12dca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   12dce:	9f16      	ldr	r7, [sp, #88]	; 0x58
   12dd0:	f200 80e3 	bhi.w	12f9a <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   12dd4:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   12dd8:	f200 80dc 	bhi.w	12f94 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   12ddc:	4604      	mov	r4, r0
   12dde:	4615      	mov	r5, r2
   12de0:	460e      	mov	r6, r1
   12de2:	2220      	movs	r2, #32
   12de4:	2100      	movs	r1, #0
   12de6:	a804      	add	r0, sp, #16
   12de8:	4698      	mov	r8, r3
   12dea:	f002 fc42 	bl	15672 <memset>
   12dee:	4b6c      	ldr	r3, [pc, #432]	; (12fa0 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   12df0:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   12df4:	681b      	ldr	r3, [r3, #0]
   12df6:	4648      	mov	r0, r9
   12df8:	4798      	blx	r3
   12dfa:	4683      	mov	fp, r0
   12dfc:	2800      	cmp	r0, #0
   12dfe:	f040 8092 	bne.w	12f26 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   12e02:	6922      	ldr	r2, [r4, #16]
   12e04:	69e3      	ldr	r3, [r4, #28]
   12e06:	429a      	cmp	r2, r3
   12e08:	f300 8091 	bgt.w	12f2e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   12e0c:	6963      	ldr	r3, [r4, #20]
   12e0e:	2b00      	cmp	r3, #0
   12e10:	f040 808d 	bne.w	12f2e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   12e14:	2f00      	cmp	r7, #0
   12e16:	f040 80a9 	bne.w	12f6c <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   12e1a:	f8df a188 	ldr.w	sl, [pc, #392]	; 12fa4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   12e1e:	466f      	mov	r7, sp
   12e20:	2d00      	cmp	r5, #0
   12e22:	f000 8098 	beq.w	12f56 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   12e26:	f104 0820 	add.w	r8, r4, #32
   12e2a:	466f      	mov	r7, sp
   12e2c:	e00e      	b.n	12e4c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   12e2e:	2d10      	cmp	r5, #16
   12e30:	46ab      	mov	fp, r5
   12e32:	bf28      	it	cs
   12e34:	f04f 0b10 	movcs.w	fp, #16
   12e38:	4630      	mov	r0, r6
   12e3a:	465a      	mov	r2, fp
   12e3c:	4639      	mov	r1, r7
   12e3e:	f002 fc0d 	bl	1565c <memcpy>
   12e42:	ebb5 050b 	subs.w	r5, r5, fp
   12e46:	445e      	add	r6, fp
   12e48:	f000 8085 	beq.w	12f56 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   12e4c:	7be3      	ldrb	r3, [r4, #15]
   12e4e:	3301      	adds	r3, #1
   12e50:	b2db      	uxtb	r3, r3
   12e52:	73e3      	strb	r3, [r4, #15]
   12e54:	2b00      	cmp	r3, #0
   12e56:	d14d      	bne.n	12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e58:	7ba3      	ldrb	r3, [r4, #14]
   12e5a:	3301      	adds	r3, #1
   12e5c:	b2db      	uxtb	r3, r3
   12e5e:	73a3      	strb	r3, [r4, #14]
   12e60:	2b00      	cmp	r3, #0
   12e62:	d147      	bne.n	12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e64:	7b63      	ldrb	r3, [r4, #13]
   12e66:	3301      	adds	r3, #1
   12e68:	b2db      	uxtb	r3, r3
   12e6a:	7363      	strb	r3, [r4, #13]
   12e6c:	2b00      	cmp	r3, #0
   12e6e:	d141      	bne.n	12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e70:	7b23      	ldrb	r3, [r4, #12]
   12e72:	3301      	adds	r3, #1
   12e74:	b2db      	uxtb	r3, r3
   12e76:	7323      	strb	r3, [r4, #12]
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d13b      	bne.n	12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e7c:	7ae3      	ldrb	r3, [r4, #11]
   12e7e:	3301      	adds	r3, #1
   12e80:	b2db      	uxtb	r3, r3
   12e82:	72e3      	strb	r3, [r4, #11]
   12e84:	2b00      	cmp	r3, #0
   12e86:	d135      	bne.n	12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e88:	7aa3      	ldrb	r3, [r4, #10]
   12e8a:	3301      	adds	r3, #1
   12e8c:	b2db      	uxtb	r3, r3
   12e8e:	72a3      	strb	r3, [r4, #10]
   12e90:	2b00      	cmp	r3, #0
   12e92:	d12f      	bne.n	12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e94:	7a63      	ldrb	r3, [r4, #9]
   12e96:	3301      	adds	r3, #1
   12e98:	b2db      	uxtb	r3, r3
   12e9a:	7263      	strb	r3, [r4, #9]
   12e9c:	bb53      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12e9e:	7a23      	ldrb	r3, [r4, #8]
   12ea0:	3301      	adds	r3, #1
   12ea2:	b2db      	uxtb	r3, r3
   12ea4:	7223      	strb	r3, [r4, #8]
   12ea6:	bb2b      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12ea8:	79e3      	ldrb	r3, [r4, #7]
   12eaa:	3301      	adds	r3, #1
   12eac:	b2db      	uxtb	r3, r3
   12eae:	71e3      	strb	r3, [r4, #7]
   12eb0:	bb03      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12eb2:	79a3      	ldrb	r3, [r4, #6]
   12eb4:	3301      	adds	r3, #1
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	71a3      	strb	r3, [r4, #6]
   12eba:	b9db      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12ebc:	7963      	ldrb	r3, [r4, #5]
   12ebe:	3301      	adds	r3, #1
   12ec0:	b2db      	uxtb	r3, r3
   12ec2:	7163      	strb	r3, [r4, #5]
   12ec4:	b9b3      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12ec6:	7923      	ldrb	r3, [r4, #4]
   12ec8:	3301      	adds	r3, #1
   12eca:	b2db      	uxtb	r3, r3
   12ecc:	7123      	strb	r3, [r4, #4]
   12ece:	b98b      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12ed0:	78e3      	ldrb	r3, [r4, #3]
   12ed2:	3301      	adds	r3, #1
   12ed4:	b2db      	uxtb	r3, r3
   12ed6:	70e3      	strb	r3, [r4, #3]
   12ed8:	b963      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12eda:	78a3      	ldrb	r3, [r4, #2]
   12edc:	3301      	adds	r3, #1
   12ede:	b2db      	uxtb	r3, r3
   12ee0:	70a3      	strb	r3, [r4, #2]
   12ee2:	b93b      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12ee4:	7863      	ldrb	r3, [r4, #1]
   12ee6:	3301      	adds	r3, #1
   12ee8:	b2db      	uxtb	r3, r3
   12eea:	7063      	strb	r3, [r4, #1]
   12eec:	b913      	cbnz	r3, 12ef4 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   12eee:	7823      	ldrb	r3, [r4, #0]
   12ef0:	3301      	adds	r3, #1
   12ef2:	7023      	strb	r3, [r4, #0]
   12ef4:	463b      	mov	r3, r7
   12ef6:	4622      	mov	r2, r4
   12ef8:	2101      	movs	r1, #1
   12efa:	4640      	mov	r0, r8
   12efc:	f000 feaa 	bl	13c54 <cc_mbedtls_aes_crypt_ecb>
   12f00:	4683      	mov	fp, r0
   12f02:	2800      	cmp	r0, #0
   12f04:	d093      	beq.n	12e2e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   12f06:	f8da 3000 	ldr.w	r3, [sl]
   12f0a:	4648      	mov	r0, r9
   12f0c:	4798      	blx	r3
   12f0e:	2120      	movs	r1, #32
   12f10:	4603      	mov	r3, r0
   12f12:	a804      	add	r0, sp, #16
   12f14:	2b00      	cmp	r3, #0
   12f16:	bf18      	it	ne
   12f18:	469b      	movne	fp, r3
   12f1a:	f7ff fcf9 	bl	12910 <mbedtls_platform_zeroize>
   12f1e:	2110      	movs	r1, #16
   12f20:	4638      	mov	r0, r7
   12f22:	f7ff fcf5 	bl	12910 <mbedtls_platform_zeroize>
   12f26:	4658      	mov	r0, fp
   12f28:	b00d      	add	sp, #52	; 0x34
   12f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f2e:	463a      	mov	r2, r7
   12f30:	4641      	mov	r1, r8
   12f32:	2300      	movs	r3, #0
   12f34:	4620      	mov	r0, r4
   12f36:	f7ff fe81 	bl	12c3c <mbedtls_ctr_drbg_reseed_internal>
   12f3a:	f8df a068 	ldr.w	sl, [pc, #104]	; 12fa4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   12f3e:	2800      	cmp	r0, #0
   12f40:	f43f af6d 	beq.w	12e1e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   12f44:	f8da 3000 	ldr.w	r3, [sl]
   12f48:	4648      	mov	r0, r9
   12f4a:	4798      	blx	r3
   12f4c:	4683      	mov	fp, r0
   12f4e:	2800      	cmp	r0, #0
   12f50:	f43f af65 	beq.w	12e1e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   12f54:	e7e7      	b.n	12f26 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   12f56:	a904      	add	r1, sp, #16
   12f58:	4620      	mov	r0, r4
   12f5a:	f7ff fdcb 	bl	12af4 <ctr_drbg_update_internal>
   12f5e:	4683      	mov	fp, r0
   12f60:	2800      	cmp	r0, #0
   12f62:	d1d0      	bne.n	12f06 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   12f64:	6923      	ldr	r3, [r4, #16]
   12f66:	3301      	adds	r3, #1
   12f68:	6123      	str	r3, [r4, #16]
   12f6a:	e7cc      	b.n	12f06 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   12f6c:	463a      	mov	r2, r7
   12f6e:	4641      	mov	r1, r8
   12f70:	a804      	add	r0, sp, #16
   12f72:	f7ff fcd7 	bl	12924 <block_cipher_df>
   12f76:	4683      	mov	fp, r0
   12f78:	b118      	cbz	r0, 12f82 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   12f7a:	f8df a028 	ldr.w	sl, [pc, #40]	; 12fa4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   12f7e:	466f      	mov	r7, sp
   12f80:	e7c1      	b.n	12f06 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   12f82:	a904      	add	r1, sp, #16
   12f84:	4620      	mov	r0, r4
   12f86:	f7ff fdb5 	bl	12af4 <ctr_drbg_update_internal>
   12f8a:	4683      	mov	fp, r0
   12f8c:	2800      	cmp	r0, #0
   12f8e:	f43f af44 	beq.w	12e1a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   12f92:	e7f2      	b.n	12f7a <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   12f94:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   12f98:	e7c5      	b.n	12f26 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   12f9a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   12f9e:	e7c2      	b.n	12f26 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   12fa0:	20000608 	.word	0x20000608
   12fa4:	20000604 	.word	0x20000604

00012fa8 <entropy_update>:
   12fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12fac:	2b20      	cmp	r3, #32
   12fae:	b08b      	sub	sp, #44	; 0x2c
   12fb0:	461d      	mov	r5, r3
   12fb2:	4606      	mov	r6, r0
   12fb4:	4688      	mov	r8, r1
   12fb6:	4691      	mov	r9, r2
   12fb8:	d826      	bhi.n	13008 <entropy_update+0x60>
   12fba:	b2db      	uxtb	r3, r3
   12fbc:	af02      	add	r7, sp, #8
   12fbe:	f88d 8004 	strb.w	r8, [sp, #4]
   12fc2:	46b0      	mov	r8, r6
   12fc4:	f88d 3005 	strb.w	r3, [sp, #5]
   12fc8:	f858 1b04 	ldr.w	r1, [r8], #4
   12fcc:	b921      	cbnz	r1, 12fd8 <entropy_update+0x30>
   12fce:	4640      	mov	r0, r8
   12fd0:	f000 fe84 	bl	13cdc <cc_mbedtls_sha256_starts>
   12fd4:	4604      	mov	r4, r0
   12fd6:	b940      	cbnz	r0, 12fea <entropy_update+0x42>
   12fd8:	2301      	movs	r3, #1
   12fda:	6033      	str	r3, [r6, #0]
   12fdc:	2202      	movs	r2, #2
   12fde:	a901      	add	r1, sp, #4
   12fe0:	4640      	mov	r0, r8
   12fe2:	f000 fe8f 	bl	13d04 <cc_mbedtls_sha256_update>
   12fe6:	4604      	mov	r4, r0
   12fe8:	b138      	cbz	r0, 12ffa <entropy_update+0x52>
   12fea:	4638      	mov	r0, r7
   12fec:	2120      	movs	r1, #32
   12fee:	f7ff fc8f 	bl	12910 <mbedtls_platform_zeroize>
   12ff2:	4620      	mov	r0, r4
   12ff4:	b00b      	add	sp, #44	; 0x2c
   12ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12ffa:	462a      	mov	r2, r5
   12ffc:	4649      	mov	r1, r9
   12ffe:	4640      	mov	r0, r8
   13000:	f000 fe80 	bl	13d04 <cc_mbedtls_sha256_update>
   13004:	4604      	mov	r4, r0
   13006:	e7f0      	b.n	12fea <entropy_update+0x42>
   13008:	af02      	add	r7, sp, #8
   1300a:	4619      	mov	r1, r3
   1300c:	4610      	mov	r0, r2
   1300e:	2300      	movs	r3, #0
   13010:	463a      	mov	r2, r7
   13012:	f000 fffd 	bl	14010 <cc_mbedtls_sha256>
   13016:	4604      	mov	r4, r0
   13018:	2800      	cmp	r0, #0
   1301a:	d1e6      	bne.n	12fea <entropy_update+0x42>
   1301c:	2320      	movs	r3, #32
   1301e:	46b9      	mov	r9, r7
   13020:	461d      	mov	r5, r3
   13022:	e7cc      	b.n	12fbe <entropy_update+0x16>

00013024 <entropy_gather_internal.part.0>:
   13024:	b5f0      	push	{r4, r5, r6, r7, lr}
   13026:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1302a:	b0a7      	sub	sp, #156	; 0x9c
   1302c:	2b00      	cmp	r3, #0
   1302e:	bfd8      	it	le
   13030:	ae02      	addle	r6, sp, #8
   13032:	dd2c      	ble.n	1308e <entropy_gather_internal.part.0+0x6a>
   13034:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   13038:	4605      	mov	r5, r0
   1303a:	2300      	movs	r3, #0
   1303c:	ae02      	add	r6, sp, #8
   1303e:	9301      	str	r3, [sp, #4]
   13040:	f1a4 0701 	sub.w	r7, r4, #1
   13044:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   13048:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1304c:	ab01      	add	r3, sp, #4
   1304e:	2290      	movs	r2, #144	; 0x90
   13050:	4631      	mov	r1, r6
   13052:	47a0      	blx	r4
   13054:	fab7 f787 	clz	r7, r7
   13058:	097f      	lsrs	r7, r7, #5
   1305a:	4604      	mov	r4, r0
   1305c:	b910      	cbnz	r0, 13064 <entropy_gather_internal.part.0+0x40>
   1305e:	9b01      	ldr	r3, [sp, #4]
   13060:	b93b      	cbnz	r3, 13072 <entropy_gather_internal.part.0+0x4e>
   13062:	b1a7      	cbz	r7, 1308e <entropy_gather_internal.part.0+0x6a>
   13064:	4630      	mov	r0, r6
   13066:	2190      	movs	r1, #144	; 0x90
   13068:	f7ff fc52 	bl	12910 <mbedtls_platform_zeroize>
   1306c:	4620      	mov	r0, r4
   1306e:	b027      	add	sp, #156	; 0x9c
   13070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13072:	4601      	mov	r1, r0
   13074:	4632      	mov	r2, r6
   13076:	4628      	mov	r0, r5
   13078:	f7ff ff96 	bl	12fa8 <entropy_update>
   1307c:	b950      	cbnz	r0, 13094 <entropy_gather_internal.part.0+0x70>
   1307e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   13082:	9a01      	ldr	r2, [sp, #4]
   13084:	4413      	add	r3, r2
   13086:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1308a:	2f00      	cmp	r7, #0
   1308c:	d1ea      	bne.n	13064 <entropy_gather_internal.part.0+0x40>
   1308e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   13092:	e7e7      	b.n	13064 <entropy_gather_internal.part.0+0x40>
   13094:	4604      	mov	r4, r0
   13096:	4620      	mov	r0, r4
   13098:	b027      	add	sp, #156	; 0x9c
   1309a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001309c <cc_mbedtls_entropy_init>:
   1309c:	b570      	push	{r4, r5, r6, lr}
   1309e:	2500      	movs	r5, #0
   130a0:	4604      	mov	r4, r0
   130a2:	f504 7688 	add.w	r6, r4, #272	; 0x110
   130a6:	2214      	movs	r2, #20
   130a8:	4629      	mov	r1, r5
   130aa:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   130ae:	30fc      	adds	r0, #252	; 0xfc
   130b0:	f002 fadf 	bl	15672 <memset>
   130b4:	2208      	movs	r2, #8
   130b6:	4629      	mov	r1, r5
   130b8:	4630      	mov	r0, r6
   130ba:	f002 fada 	bl	15672 <memset>
   130be:	4b15      	ldr	r3, [pc, #84]	; (13114 <cc_mbedtls_entropy_init+0x78>)
   130c0:	4630      	mov	r0, r6
   130c2:	681b      	ldr	r3, [r3, #0]
   130c4:	4798      	blx	r3
   130c6:	4620      	mov	r0, r4
   130c8:	f840 5b04 	str.w	r5, [r0], #4
   130cc:	f000 fdec 	bl	13ca8 <cc_mbedtls_sha256_init>
   130d0:	4b11      	ldr	r3, [pc, #68]	; (13118 <cc_mbedtls_entropy_init+0x7c>)
   130d2:	4630      	mov	r0, r6
   130d4:	681b      	ldr	r3, [r3, #0]
   130d6:	4798      	blx	r3
   130d8:	b9d8      	cbnz	r0, 13112 <cc_mbedtls_entropy_init+0x76>
   130da:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   130de:	42ab      	cmp	r3, r5
   130e0:	dc11      	bgt.n	13106 <cc_mbedtls_entropy_init+0x6a>
   130e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   130e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   130ea:	2120      	movs	r1, #32
   130ec:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   130f0:	2101      	movs	r1, #1
   130f2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   130f6:	3301      	adds	r3, #1
   130f8:	4908      	ldr	r1, [pc, #32]	; (1311c <cc_mbedtls_entropy_init+0x80>)
   130fa:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   130fe:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   13102:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   13106:	4b06      	ldr	r3, [pc, #24]	; (13120 <cc_mbedtls_entropy_init+0x84>)
   13108:	4630      	mov	r0, r6
   1310a:	681b      	ldr	r3, [r3, #0]
   1310c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13110:	4718      	bx	r3
   13112:	bd70      	pop	{r4, r5, r6, pc}
   13114:	2000060c 	.word	0x2000060c
   13118:	20000608 	.word	0x20000608
   1311c:	00013af9 	.word	0x00013af9
   13120:	20000604 	.word	0x20000604

00013124 <cc_mbedtls_entropy_func>:
   13124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13128:	2a20      	cmp	r2, #32
   1312a:	b088      	sub	sp, #32
   1312c:	d879      	bhi.n	13222 <cc_mbedtls_entropy_func+0xfe>
   1312e:	4b3e      	ldr	r3, [pc, #248]	; (13228 <cc_mbedtls_entropy_func+0x104>)
   13130:	f500 7988 	add.w	r9, r0, #272	; 0x110
   13134:	681b      	ldr	r3, [r3, #0]
   13136:	4604      	mov	r4, r0
   13138:	4648      	mov	r0, r9
   1313a:	4617      	mov	r7, r2
   1313c:	4688      	mov	r8, r1
   1313e:	4798      	blx	r3
   13140:	4605      	mov	r5, r0
   13142:	b9f8      	cbnz	r0, 13184 <cc_mbedtls_entropy_func+0x60>
   13144:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   13148:	f240 1601 	movw	r6, #257	; 0x101
   1314c:	2b00      	cmp	r3, #0
   1314e:	d064      	beq.n	1321a <cc_mbedtls_entropy_func+0xf6>
   13150:	4620      	mov	r0, r4
   13152:	f7ff ff67 	bl	13024 <entropy_gather_internal.part.0>
   13156:	4605      	mov	r5, r0
   13158:	b938      	cbnz	r0, 1316a <cc_mbedtls_entropy_func+0x46>
   1315a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1315e:	2b00      	cmp	r3, #0
   13160:	dc14      	bgt.n	1318c <cc_mbedtls_entropy_func+0x68>
   13162:	3e01      	subs	r6, #1
   13164:	d1f2      	bne.n	1314c <cc_mbedtls_entropy_func+0x28>
   13166:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1316a:	466e      	mov	r6, sp
   1316c:	2120      	movs	r1, #32
   1316e:	4630      	mov	r0, r6
   13170:	f7ff fbce 	bl	12910 <mbedtls_platform_zeroize>
   13174:	4b2d      	ldr	r3, [pc, #180]	; (1322c <cc_mbedtls_entropy_func+0x108>)
   13176:	4648      	mov	r0, r9
   13178:	681b      	ldr	r3, [r3, #0]
   1317a:	4798      	blx	r3
   1317c:	2800      	cmp	r0, #0
   1317e:	bf18      	it	ne
   13180:	f06f 051d 	mvnne.w	r5, #29
   13184:	4628      	mov	r0, r5
   13186:	b008      	add	sp, #32
   13188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1318c:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   13190:	4293      	cmp	r3, r2
   13192:	d303      	bcc.n	1319c <cc_mbedtls_entropy_func+0x78>
   13194:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   13198:	2a01      	cmp	r2, #1
   1319a:	d002      	beq.n	131a2 <cc_mbedtls_entropy_func+0x7e>
   1319c:	3e01      	subs	r6, #1
   1319e:	d1d7      	bne.n	13150 <cc_mbedtls_entropy_func+0x2c>
   131a0:	e7e1      	b.n	13166 <cc_mbedtls_entropy_func+0x42>
   131a2:	2b1f      	cmp	r3, #31
   131a4:	d9fa      	bls.n	1319c <cc_mbedtls_entropy_func+0x78>
   131a6:	466e      	mov	r6, sp
   131a8:	4601      	mov	r1, r0
   131aa:	2220      	movs	r2, #32
   131ac:	4630      	mov	r0, r6
   131ae:	f104 0a04 	add.w	sl, r4, #4
   131b2:	f002 fa5e 	bl	15672 <memset>
   131b6:	4631      	mov	r1, r6
   131b8:	4650      	mov	r0, sl
   131ba:	f000 fdcd 	bl	13d58 <cc_mbedtls_sha256_finish>
   131be:	4605      	mov	r5, r0
   131c0:	2800      	cmp	r0, #0
   131c2:	d1d3      	bne.n	1316c <cc_mbedtls_entropy_func+0x48>
   131c4:	4650      	mov	r0, sl
   131c6:	f000 fd83 	bl	13cd0 <cc_mbedtls_sha256_free>
   131ca:	4650      	mov	r0, sl
   131cc:	f000 fd6c 	bl	13ca8 <cc_mbedtls_sha256_init>
   131d0:	4629      	mov	r1, r5
   131d2:	4650      	mov	r0, sl
   131d4:	f000 fd82 	bl	13cdc <cc_mbedtls_sha256_starts>
   131d8:	4605      	mov	r5, r0
   131da:	2800      	cmp	r0, #0
   131dc:	d1c6      	bne.n	1316c <cc_mbedtls_entropy_func+0x48>
   131de:	4650      	mov	r0, sl
   131e0:	2220      	movs	r2, #32
   131e2:	4631      	mov	r1, r6
   131e4:	f000 fd8e 	bl	13d04 <cc_mbedtls_sha256_update>
   131e8:	4605      	mov	r5, r0
   131ea:	2800      	cmp	r0, #0
   131ec:	d1be      	bne.n	1316c <cc_mbedtls_entropy_func+0x48>
   131ee:	4603      	mov	r3, r0
   131f0:	4632      	mov	r2, r6
   131f2:	2120      	movs	r1, #32
   131f4:	4630      	mov	r0, r6
   131f6:	f000 ff0b 	bl	14010 <cc_mbedtls_sha256>
   131fa:	4605      	mov	r5, r0
   131fc:	2800      	cmp	r0, #0
   131fe:	d1b5      	bne.n	1316c <cc_mbedtls_entropy_func+0x48>
   13200:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   13204:	2b00      	cmp	r3, #0
   13206:	bfc4      	itt	gt
   13208:	2300      	movgt	r3, #0
   1320a:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1320e:	463a      	mov	r2, r7
   13210:	4640      	mov	r0, r8
   13212:	4631      	mov	r1, r6
   13214:	f002 fa22 	bl	1565c <memcpy>
   13218:	e7a8      	b.n	1316c <cc_mbedtls_entropy_func+0x48>
   1321a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1321e:	466e      	mov	r6, sp
   13220:	e7a4      	b.n	1316c <cc_mbedtls_entropy_func+0x48>
   13222:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   13226:	e7ad      	b.n	13184 <cc_mbedtls_entropy_func+0x60>
   13228:	20000608 	.word	0x20000608
   1322c:	20000604 	.word	0x20000604

00013230 <RndStartupTest.constprop.0>:
   13230:	b530      	push	{r4, r5, lr}
   13232:	b08d      	sub	sp, #52	; 0x34
   13234:	2100      	movs	r1, #0
   13236:	2228      	movs	r2, #40	; 0x28
   13238:	a802      	add	r0, sp, #8
   1323a:	9101      	str	r1, [sp, #4]
   1323c:	f002 fa19 	bl	15672 <memset>
   13240:	a802      	add	r0, sp, #8
   13242:	f000 ff0d 	bl	14060 <RNG_PLAT_SetUserRngParameters>
   13246:	4604      	mov	r4, r0
   13248:	b110      	cbz	r0, 13250 <RndStartupTest.constprop.0+0x20>
   1324a:	4620      	mov	r0, r4
   1324c:	b00d      	add	sp, #52	; 0x34
   1324e:	bd30      	pop	{r4, r5, pc}
   13250:	4d17      	ldr	r5, [pc, #92]	; (132b0 <RndStartupTest.constprop.0+0x80>)
   13252:	f04f 31ff 	mov.w	r1, #4294967295
   13256:	6828      	ldr	r0, [r5, #0]
   13258:	f000 f944 	bl	134e4 <CC_PalMutexLock>
   1325c:	4604      	mov	r4, r0
   1325e:	b120      	cbz	r0, 1326a <RndStartupTest.constprop.0+0x3a>
   13260:	4814      	ldr	r0, [pc, #80]	; (132b4 <RndStartupTest.constprop.0+0x84>)
   13262:	f7ff fa33 	bl	126cc <CC_PalAbort>
   13266:	2c01      	cmp	r4, #1
   13268:	d018      	beq.n	1329c <RndStartupTest.constprop.0+0x6c>
   1326a:	2000      	movs	r0, #0
   1326c:	f000 f96a 	bl	13544 <CC_PalPowerSaveModeSelect>
   13270:	b9d0      	cbnz	r0, 132a8 <RndStartupTest.constprop.0+0x78>
   13272:	4a11      	ldr	r2, [pc, #68]	; (132b8 <RndStartupTest.constprop.0+0x88>)
   13274:	a902      	add	r1, sp, #8
   13276:	a801      	add	r0, sp, #4
   13278:	f000 fc30 	bl	13adc <LLF_RND_RunTrngStartupTest>
   1327c:	4604      	mov	r4, r0
   1327e:	2001      	movs	r0, #1
   13280:	f000 f960 	bl	13544 <CC_PalPowerSaveModeSelect>
   13284:	b960      	cbnz	r0, 132a0 <RndStartupTest.constprop.0+0x70>
   13286:	6828      	ldr	r0, [r5, #0]
   13288:	f000 f934 	bl	134f4 <CC_PalMutexUnlock>
   1328c:	2800      	cmp	r0, #0
   1328e:	d0dc      	beq.n	1324a <RndStartupTest.constprop.0+0x1a>
   13290:	480a      	ldr	r0, [pc, #40]	; (132bc <RndStartupTest.constprop.0+0x8c>)
   13292:	f7ff fa1b 	bl	126cc <CC_PalAbort>
   13296:	4620      	mov	r0, r4
   13298:	b00d      	add	sp, #52	; 0x34
   1329a:	bd30      	pop	{r4, r5, pc}
   1329c:	2405      	movs	r4, #5
   1329e:	e7f2      	b.n	13286 <RndStartupTest.constprop.0+0x56>
   132a0:	4807      	ldr	r0, [pc, #28]	; (132c0 <RndStartupTest.constprop.0+0x90>)
   132a2:	f7ff fa13 	bl	126cc <CC_PalAbort>
   132a6:	e7ee      	b.n	13286 <RndStartupTest.constprop.0+0x56>
   132a8:	4806      	ldr	r0, [pc, #24]	; (132c4 <RndStartupTest.constprop.0+0x94>)
   132aa:	f7ff fa0f 	bl	126cc <CC_PalAbort>
   132ae:	e7e0      	b.n	13272 <RndStartupTest.constprop.0+0x42>
   132b0:	200005f0 	.word	0x200005f0
   132b4:	000178c4 	.word	0x000178c4
   132b8:	20002814 	.word	0x20002814
   132bc:	0001791c 	.word	0x0001791c
   132c0:	000178fc 	.word	0x000178fc
   132c4:	000178dc 	.word	0x000178dc

000132c8 <CC_LibInit>:
   132c8:	b530      	push	{r4, r5, lr}
   132ca:	b083      	sub	sp, #12
   132cc:	f000 f85c 	bl	13388 <CC_HalInit>
   132d0:	b128      	cbz	r0, 132de <CC_LibInit+0x16>
   132d2:	f000 f8ab 	bl	1342c <CC_PalTerminate>
   132d6:	2403      	movs	r4, #3
   132d8:	4620      	mov	r0, r4
   132da:	b003      	add	sp, #12
   132dc:	bd30      	pop	{r4, r5, pc}
   132de:	f000 f877 	bl	133d0 <CC_PalInit>
   132e2:	b9d8      	cbnz	r0, 1331c <CC_LibInit+0x54>
   132e4:	f000 f92e 	bl	13544 <CC_PalPowerSaveModeSelect>
   132e8:	b9e0      	cbnz	r0, 13324 <CC_LibInit+0x5c>
   132ea:	4c22      	ldr	r4, [pc, #136]	; (13374 <CC_LibInit+0xac>)
   132ec:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   132f0:	0e1b      	lsrs	r3, r3, #24
   132f2:	2bf0      	cmp	r3, #240	; 0xf0
   132f4:	d10a      	bne.n	1330c <CC_LibInit+0x44>
   132f6:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   132fa:	4b1f      	ldr	r3, [pc, #124]	; (13378 <CC_LibInit+0xb0>)
   132fc:	429a      	cmp	r2, r3
   132fe:	d031      	beq.n	13364 <CC_LibInit+0x9c>
   13300:	f000 f844 	bl	1338c <CC_HalTerminate>
   13304:	2407      	movs	r4, #7
   13306:	f000 f891 	bl	1342c <CC_PalTerminate>
   1330a:	e7e5      	b.n	132d8 <CC_LibInit+0x10>
   1330c:	f000 f83e 	bl	1338c <CC_HalTerminate>
   13310:	f000 f88c 	bl	1342c <CC_PalTerminate>
   13314:	2406      	movs	r4, #6
   13316:	4620      	mov	r0, r4
   13318:	b003      	add	sp, #12
   1331a:	bd30      	pop	{r4, r5, pc}
   1331c:	2404      	movs	r4, #4
   1331e:	4620      	mov	r0, r4
   13320:	b003      	add	sp, #12
   13322:	bd30      	pop	{r4, r5, pc}
   13324:	f000 f832 	bl	1338c <CC_HalTerminate>
   13328:	f000 f880 	bl	1342c <CC_PalTerminate>
   1332c:	f7ff ff80 	bl	13230 <RndStartupTest.constprop.0>
   13330:	4604      	mov	r4, r0
   13332:	b998      	cbnz	r0, 1335c <CC_LibInit+0x94>
   13334:	4d11      	ldr	r5, [pc, #68]	; (1337c <CC_LibInit+0xb4>)
   13336:	682b      	ldr	r3, [r5, #0]
   13338:	2b00      	cmp	r3, #0
   1333a:	d1cd      	bne.n	132d8 <CC_LibInit+0x10>
   1333c:	4602      	mov	r2, r0
   1333e:	4601      	mov	r1, r0
   13340:	f7ff f9e6 	bl	12710 <nrf_cc3xx_platform_ctr_drbg_init>
   13344:	b950      	cbnz	r0, 1335c <CC_LibInit+0x94>
   13346:	490e      	ldr	r1, [pc, #56]	; (13380 <CC_LibInit+0xb8>)
   13348:	ab01      	add	r3, sp, #4
   1334a:	2268      	movs	r2, #104	; 0x68
   1334c:	f7ff fa10 	bl	12770 <nrf_cc3xx_platform_ctr_drbg_get>
   13350:	b920      	cbnz	r0, 1335c <CC_LibInit+0x94>
   13352:	4b0c      	ldr	r3, [pc, #48]	; (13384 <CC_LibInit+0xbc>)
   13354:	602b      	str	r3, [r5, #0]
   13356:	4620      	mov	r0, r4
   13358:	b003      	add	sp, #12
   1335a:	bd30      	pop	{r4, r5, pc}
   1335c:	2405      	movs	r4, #5
   1335e:	4620      	mov	r0, r4
   13360:	b003      	add	sp, #12
   13362:	bd30      	pop	{r4, r5, pc}
   13364:	2001      	movs	r0, #1
   13366:	f000 f8ed 	bl	13544 <CC_PalPowerSaveModeSelect>
   1336a:	2800      	cmp	r0, #0
   1336c:	d1da      	bne.n	13324 <CC_LibInit+0x5c>
   1336e:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   13372:	e7db      	b.n	1332c <CC_LibInit+0x64>
   13374:	5002b000 	.word	0x5002b000
   13378:	20e00000 	.word	0x20e00000
   1337c:	20002a34 	.word	0x20002a34
   13380:	20002a38 	.word	0x20002a38
   13384:	5a5aea5a 	.word	0x5a5aea5a

00013388 <CC_HalInit>:
   13388:	2000      	movs	r0, #0
   1338a:	4770      	bx	lr

0001338c <CC_HalTerminate>:
   1338c:	2000      	movs	r0, #0
   1338e:	4770      	bx	lr

00013390 <CC_HalClearInterruptBit>:
   13390:	0543      	lsls	r3, r0, #21
   13392:	d504      	bpl.n	1339e <CC_HalClearInterruptBit+0xe>
   13394:	4b04      	ldr	r3, [pc, #16]	; (133a8 <CC_HalClearInterruptBit+0x18>)
   13396:	f04f 32ff 	mov.w	r2, #4294967295
   1339a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1339e:	4b02      	ldr	r3, [pc, #8]	; (133a8 <CC_HalClearInterruptBit+0x18>)
   133a0:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   133a4:	4770      	bx	lr
   133a6:	bf00      	nop
   133a8:	5002b000 	.word	0x5002b000

000133ac <CC_HalMaskInterrupt>:
   133ac:	4b01      	ldr	r3, [pc, #4]	; (133b4 <CC_HalMaskInterrupt+0x8>)
   133ae:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   133b2:	4770      	bx	lr
   133b4:	5002b000 	.word	0x5002b000

000133b8 <CC_HalWaitInterrupt>:
   133b8:	b108      	cbz	r0, 133be <CC_HalWaitInterrupt+0x6>
   133ba:	f000 b86b 	b.w	13494 <CC_PalWaitInterrupt>
   133be:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   133c2:	4770      	bx	lr

000133c4 <CC_HalWaitInterruptRND>:
   133c4:	b108      	cbz	r0, 133ca <CC_HalWaitInterruptRND+0x6>
   133c6:	f000 b84f 	b.w	13468 <CC_PalWaitInterruptRND>
   133ca:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   133ce:	4770      	bx	lr

000133d0 <CC_PalInit>:
   133d0:	b510      	push	{r4, lr}
   133d2:	4811      	ldr	r0, [pc, #68]	; (13418 <CC_PalInit+0x48>)
   133d4:	f000 f872 	bl	134bc <CC_PalMutexCreate>
   133d8:	b100      	cbz	r0, 133dc <CC_PalInit+0xc>
   133da:	bd10      	pop	{r4, pc}
   133dc:	480f      	ldr	r0, [pc, #60]	; (1341c <CC_PalInit+0x4c>)
   133de:	f000 f86d 	bl	134bc <CC_PalMutexCreate>
   133e2:	2800      	cmp	r0, #0
   133e4:	d1f9      	bne.n	133da <CC_PalInit+0xa>
   133e6:	4c0e      	ldr	r4, [pc, #56]	; (13420 <CC_PalInit+0x50>)
   133e8:	4620      	mov	r0, r4
   133ea:	f000 f867 	bl	134bc <CC_PalMutexCreate>
   133ee:	2800      	cmp	r0, #0
   133f0:	d1f3      	bne.n	133da <CC_PalInit+0xa>
   133f2:	4b0c      	ldr	r3, [pc, #48]	; (13424 <CC_PalInit+0x54>)
   133f4:	480c      	ldr	r0, [pc, #48]	; (13428 <CC_PalInit+0x58>)
   133f6:	601c      	str	r4, [r3, #0]
   133f8:	f000 f860 	bl	134bc <CC_PalMutexCreate>
   133fc:	4601      	mov	r1, r0
   133fe:	2800      	cmp	r0, #0
   13400:	d1eb      	bne.n	133da <CC_PalInit+0xa>
   13402:	f000 f82d 	bl	13460 <CC_PalDmaInit>
   13406:	4604      	mov	r4, r0
   13408:	b108      	cbz	r0, 1340e <CC_PalInit+0x3e>
   1340a:	4620      	mov	r0, r4
   1340c:	bd10      	pop	{r4, pc}
   1340e:	f000 f87b 	bl	13508 <CC_PalPowerSaveModeInit>
   13412:	4620      	mov	r0, r4
   13414:	e7fa      	b.n	1340c <CC_PalInit+0x3c>
   13416:	bf00      	nop
   13418:	20000600 	.word	0x20000600
   1341c:	200005fc 	.word	0x200005fc
   13420:	200005f8 	.word	0x200005f8
   13424:	200005f0 	.word	0x200005f0
   13428:	200005f4 	.word	0x200005f4

0001342c <CC_PalTerminate>:
   1342c:	b508      	push	{r3, lr}
   1342e:	4808      	ldr	r0, [pc, #32]	; (13450 <CC_PalTerminate+0x24>)
   13430:	f000 f84e 	bl	134d0 <CC_PalMutexDestroy>
   13434:	4807      	ldr	r0, [pc, #28]	; (13454 <CC_PalTerminate+0x28>)
   13436:	f000 f84b 	bl	134d0 <CC_PalMutexDestroy>
   1343a:	4807      	ldr	r0, [pc, #28]	; (13458 <CC_PalTerminate+0x2c>)
   1343c:	f000 f848 	bl	134d0 <CC_PalMutexDestroy>
   13440:	4806      	ldr	r0, [pc, #24]	; (1345c <CC_PalTerminate+0x30>)
   13442:	f000 f845 	bl	134d0 <CC_PalMutexDestroy>
   13446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1344a:	f000 b80b 	b.w	13464 <CC_PalDmaTerminate>
   1344e:	bf00      	nop
   13450:	20000600 	.word	0x20000600
   13454:	200005fc 	.word	0x200005fc
   13458:	200005f8 	.word	0x200005f8
   1345c:	200005f4 	.word	0x200005f4

00013460 <CC_PalDmaInit>:
   13460:	2000      	movs	r0, #0
   13462:	4770      	bx	lr

00013464 <CC_PalDmaTerminate>:
   13464:	4770      	bx	lr
   13466:	bf00      	nop

00013468 <CC_PalWaitInterruptRND>:
   13468:	b410      	push	{r4}
   1346a:	4c09      	ldr	r4, [pc, #36]	; (13490 <CC_PalWaitInterruptRND+0x28>)
   1346c:	4602      	mov	r2, r0
   1346e:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   13472:	4213      	tst	r3, r2
   13474:	d0fb      	beq.n	1346e <CC_PalWaitInterruptRND+0x6>
   13476:	b121      	cbz	r1, 13482 <CC_PalWaitInterruptRND+0x1a>
   13478:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1347c:	600b      	str	r3, [r1, #0]
   1347e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   13482:	4b03      	ldr	r3, [pc, #12]	; (13490 <CC_PalWaitInterruptRND+0x28>)
   13484:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   13488:	2000      	movs	r0, #0
   1348a:	bc10      	pop	{r4}
   1348c:	4770      	bx	lr
   1348e:	bf00      	nop
   13490:	5002b000 	.word	0x5002b000

00013494 <CC_PalWaitInterrupt>:
   13494:	4a04      	ldr	r2, [pc, #16]	; (134a8 <CC_PalWaitInterrupt+0x14>)
   13496:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   1349a:	4218      	tst	r0, r3
   1349c:	d0fb      	beq.n	13496 <CC_PalWaitInterrupt+0x2>
   1349e:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   134a2:	2000      	movs	r0, #0
   134a4:	4770      	bx	lr
   134a6:	bf00      	nop
   134a8:	5002b000 	.word	0x5002b000

000134ac <CC_PalMemCopyPlat>:
   134ac:	f002 b8bf 	b.w	1562e <memmove>

000134b0 <CC_PalMemSetPlat>:
   134b0:	f002 b8df 	b.w	15672 <memset>

000134b4 <CC_PalMemSetZeroPlat>:
   134b4:	460a      	mov	r2, r1
   134b6:	2100      	movs	r1, #0
   134b8:	f002 b8db 	b.w	15672 <memset>

000134bc <CC_PalMutexCreate>:
   134bc:	b508      	push	{r3, lr}
   134be:	4b03      	ldr	r3, [pc, #12]	; (134cc <CC_PalMutexCreate+0x10>)
   134c0:	6802      	ldr	r2, [r0, #0]
   134c2:	681b      	ldr	r3, [r3, #0]
   134c4:	6810      	ldr	r0, [r2, #0]
   134c6:	4798      	blx	r3
   134c8:	2000      	movs	r0, #0
   134ca:	bd08      	pop	{r3, pc}
   134cc:	200005bc 	.word	0x200005bc

000134d0 <CC_PalMutexDestroy>:
   134d0:	b508      	push	{r3, lr}
   134d2:	4b03      	ldr	r3, [pc, #12]	; (134e0 <CC_PalMutexDestroy+0x10>)
   134d4:	6802      	ldr	r2, [r0, #0]
   134d6:	685b      	ldr	r3, [r3, #4]
   134d8:	6810      	ldr	r0, [r2, #0]
   134da:	4798      	blx	r3
   134dc:	2000      	movs	r0, #0
   134de:	bd08      	pop	{r3, pc}
   134e0:	200005bc 	.word	0x200005bc

000134e4 <CC_PalMutexLock>:
   134e4:	4b02      	ldr	r3, [pc, #8]	; (134f0 <CC_PalMutexLock+0xc>)
   134e6:	6802      	ldr	r2, [r0, #0]
   134e8:	689b      	ldr	r3, [r3, #8]
   134ea:	6810      	ldr	r0, [r2, #0]
   134ec:	4718      	bx	r3
   134ee:	bf00      	nop
   134f0:	200005bc 	.word	0x200005bc

000134f4 <CC_PalMutexUnlock>:
   134f4:	b508      	push	{r3, lr}
   134f6:	4b03      	ldr	r3, [pc, #12]	; (13504 <CC_PalMutexUnlock+0x10>)
   134f8:	6802      	ldr	r2, [r0, #0]
   134fa:	68db      	ldr	r3, [r3, #12]
   134fc:	6810      	ldr	r0, [r2, #0]
   134fe:	4798      	blx	r3
   13500:	2000      	movs	r0, #0
   13502:	bd08      	pop	{r3, pc}
   13504:	200005bc 	.word	0x200005bc

00013508 <CC_PalPowerSaveModeInit>:
   13508:	b570      	push	{r4, r5, r6, lr}
   1350a:	4c09      	ldr	r4, [pc, #36]	; (13530 <CC_PalPowerSaveModeInit+0x28>)
   1350c:	4d09      	ldr	r5, [pc, #36]	; (13534 <CC_PalPowerSaveModeInit+0x2c>)
   1350e:	6920      	ldr	r0, [r4, #16]
   13510:	68ab      	ldr	r3, [r5, #8]
   13512:	4798      	blx	r3
   13514:	b118      	cbz	r0, 1351e <CC_PalPowerSaveModeInit+0x16>
   13516:	4b08      	ldr	r3, [pc, #32]	; (13538 <CC_PalPowerSaveModeInit+0x30>)
   13518:	4808      	ldr	r0, [pc, #32]	; (1353c <CC_PalPowerSaveModeInit+0x34>)
   1351a:	685b      	ldr	r3, [r3, #4]
   1351c:	4798      	blx	r3
   1351e:	4a08      	ldr	r2, [pc, #32]	; (13540 <CC_PalPowerSaveModeInit+0x38>)
   13520:	68eb      	ldr	r3, [r5, #12]
   13522:	6920      	ldr	r0, [r4, #16]
   13524:	2100      	movs	r1, #0
   13526:	6011      	str	r1, [r2, #0]
   13528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1352c:	4718      	bx	r3
   1352e:	bf00      	nop
   13530:	200005a8 	.word	0x200005a8
   13534:	200005bc 	.word	0x200005bc
   13538:	200005a0 	.word	0x200005a0
   1353c:	00017934 	.word	0x00017934
   13540:	20002aa0 	.word	0x20002aa0

00013544 <CC_PalPowerSaveModeSelect>:
   13544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13546:	4d1a      	ldr	r5, [pc, #104]	; (135b0 <CC_PalPowerSaveModeSelect+0x6c>)
   13548:	4e1a      	ldr	r6, [pc, #104]	; (135b4 <CC_PalPowerSaveModeSelect+0x70>)
   1354a:	4604      	mov	r4, r0
   1354c:	68b2      	ldr	r2, [r6, #8]
   1354e:	6928      	ldr	r0, [r5, #16]
   13550:	4790      	blx	r2
   13552:	b9e8      	cbnz	r0, 13590 <CC_PalPowerSaveModeSelect+0x4c>
   13554:	4f18      	ldr	r7, [pc, #96]	; (135b8 <CC_PalPowerSaveModeSelect+0x74>)
   13556:	683b      	ldr	r3, [r7, #0]
   13558:	b14c      	cbz	r4, 1356e <CC_PalPowerSaveModeSelect+0x2a>
   1355a:	b1a3      	cbz	r3, 13586 <CC_PalPowerSaveModeSelect+0x42>
   1355c:	2b01      	cmp	r3, #1
   1355e:	d019      	beq.n	13594 <CC_PalPowerSaveModeSelect+0x50>
   13560:	3b01      	subs	r3, #1
   13562:	603b      	str	r3, [r7, #0]
   13564:	6928      	ldr	r0, [r5, #16]
   13566:	68f3      	ldr	r3, [r6, #12]
   13568:	4798      	blx	r3
   1356a:	2000      	movs	r0, #0
   1356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1356e:	b943      	cbnz	r3, 13582 <CC_PalPowerSaveModeSelect+0x3e>
   13570:	4a12      	ldr	r2, [pc, #72]	; (135bc <CC_PalPowerSaveModeSelect+0x78>)
   13572:	2101      	movs	r1, #1
   13574:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   13578:	4911      	ldr	r1, [pc, #68]	; (135c0 <CC_PalPowerSaveModeSelect+0x7c>)
   1357a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   1357e:	2a00      	cmp	r2, #0
   13580:	d1fb      	bne.n	1357a <CC_PalPowerSaveModeSelect+0x36>
   13582:	3301      	adds	r3, #1
   13584:	603b      	str	r3, [r7, #0]
   13586:	68f3      	ldr	r3, [r6, #12]
   13588:	6928      	ldr	r0, [r5, #16]
   1358a:	4798      	blx	r3
   1358c:	2000      	movs	r0, #0
   1358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13590:	480c      	ldr	r0, [pc, #48]	; (135c4 <CC_PalPowerSaveModeSelect+0x80>)
   13592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13594:	4a0a      	ldr	r2, [pc, #40]	; (135c0 <CC_PalPowerSaveModeSelect+0x7c>)
   13596:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1359a:	2b00      	cmp	r3, #0
   1359c:	d1fb      	bne.n	13596 <CC_PalPowerSaveModeSelect+0x52>
   1359e:	4a07      	ldr	r2, [pc, #28]	; (135bc <CC_PalPowerSaveModeSelect+0x78>)
   135a0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   135a4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   135a8:	f7ff ff00 	bl	133ac <CC_HalMaskInterrupt>
   135ac:	683b      	ldr	r3, [r7, #0]
   135ae:	e7d7      	b.n	13560 <CC_PalPowerSaveModeSelect+0x1c>
   135b0:	200005a8 	.word	0x200005a8
   135b4:	200005bc 	.word	0x200005bc
   135b8:	20002aa0 	.word	0x20002aa0
   135bc:	5002a000 	.word	0x5002a000
   135c0:	5002b000 	.word	0x5002b000
   135c4:	ffff8fe9 	.word	0xffff8fe9

000135c8 <mutex_init>:
   135c8:	4b01      	ldr	r3, [pc, #4]	; (135d0 <mutex_init+0x8>)
   135ca:	681b      	ldr	r3, [r3, #0]
   135cc:	4718      	bx	r3
   135ce:	bf00      	nop
   135d0:	200005bc 	.word	0x200005bc

000135d4 <mutex_lock>:
   135d4:	4b01      	ldr	r3, [pc, #4]	; (135dc <mutex_lock+0x8>)
   135d6:	689b      	ldr	r3, [r3, #8]
   135d8:	4718      	bx	r3
   135da:	bf00      	nop
   135dc:	200005bc 	.word	0x200005bc

000135e0 <mutex_unlock>:
   135e0:	4b01      	ldr	r3, [pc, #4]	; (135e8 <mutex_unlock+0x8>)
   135e2:	68db      	ldr	r3, [r3, #12]
   135e4:	4718      	bx	r3
   135e6:	bf00      	nop
   135e8:	200005bc 	.word	0x200005bc

000135ec <startTrngHW>:
   135ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135f0:	2800      	cmp	r0, #0
   135f2:	d078      	beq.n	136e6 <startTrngHW+0xfa>
   135f4:	460c      	mov	r4, r1
   135f6:	2900      	cmp	r1, #0
   135f8:	d075      	beq.n	136e6 <startTrngHW+0xfa>
   135fa:	461d      	mov	r5, r3
   135fc:	2b00      	cmp	r3, #0
   135fe:	d072      	beq.n	136e6 <startTrngHW+0xfa>
   13600:	4607      	mov	r7, r0
   13602:	b11a      	cbz	r2, 1360c <startTrngHW+0x20>
   13604:	2201      	movs	r2, #1
   13606:	2300      	movs	r3, #0
   13608:	602a      	str	r2, [r5, #0]
   1360a:	6003      	str	r3, [r0, #0]
   1360c:	682b      	ldr	r3, [r5, #0]
   1360e:	2b00      	cmp	r3, #0
   13610:	d064      	beq.n	136dc <startTrngHW+0xf0>
   13612:	4629      	mov	r1, r5
   13614:	4620      	mov	r0, r4
   13616:	f000 fddb 	bl	141d0 <LLF_RND_GetFastestRosc>
   1361a:	4680      	mov	r8, r0
   1361c:	2800      	cmp	r0, #0
   1361e:	d15f      	bne.n	136e0 <startTrngHW+0xf4>
   13620:	6828      	ldr	r0, [r5, #0]
   13622:	4621      	mov	r1, r4
   13624:	f000 fdba 	bl	1419c <LLF_RND_GetRoscSampleCnt>
   13628:	4680      	mov	r8, r0
   1362a:	2800      	cmp	r0, #0
   1362c:	d158      	bne.n	136e0 <startTrngHW+0xf4>
   1362e:	682b      	ldr	r3, [r5, #0]
   13630:	2b08      	cmp	r3, #8
   13632:	d06c      	beq.n	1370e <startTrngHW+0x122>
   13634:	2b04      	cmp	r3, #4
   13636:	d06d      	beq.n	13714 <startTrngHW+0x128>
   13638:	f1a3 0902 	sub.w	r9, r3, #2
   1363c:	fab9 f989 	clz	r9, r9
   13640:	ea4f 1959 	mov.w	r9, r9, lsr #5
   13644:	4e35      	ldr	r6, [pc, #212]	; (1371c <startTrngHW+0x130>)
   13646:	2101      	movs	r1, #1
   13648:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   1364c:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   13650:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   13654:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13656:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   1365a:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   1365e:	4293      	cmp	r3, r2
   13660:	d1f6      	bne.n	13650 <startTrngHW+0x64>
   13662:	f04f 0a00 	mov.w	sl, #0
   13666:	f04f 30ff 	mov.w	r0, #4294967295
   1366a:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   1366e:	f7ff fe8f 	bl	13390 <CC_HalClearInterruptBit>
   13672:	f06f 031b 	mvn.w	r3, #27
   13676:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   1367a:	4650      	mov	r0, sl
   1367c:	f7ff fe96 	bl	133ac <CC_HalMaskInterrupt>
   13680:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   13684:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   13688:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1368c:	f7ff fe8e 	bl	133ac <CC_HalMaskInterrupt>
   13690:	230a      	movs	r3, #10
   13692:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   13696:	9b08      	ldr	r3, [sp, #32]
   13698:	2b01      	cmp	r3, #1
   1369a:	d029      	beq.n	136f0 <startTrngHW+0x104>
   1369c:	6923      	ldr	r3, [r4, #16]
   1369e:	4a20      	ldr	r2, [pc, #128]	; (13720 <startTrngHW+0x134>)
   136a0:	fba2 2303 	umull	r2, r3, r2, r3
   136a4:	091b      	lsrs	r3, r3, #4
   136a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   136a8:	fb02 f303 	mul.w	r3, r2, r3
   136ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   136b0:	4a1a      	ldr	r2, [pc, #104]	; (1371c <startTrngHW+0x130>)
   136b2:	03db      	lsls	r3, r3, #15
   136b4:	099b      	lsrs	r3, r3, #6
   136b6:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   136ba:	2301      	movs	r3, #1
   136bc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   136c0:	683b      	ldr	r3, [r7, #0]
   136c2:	682a      	ldr	r2, [r5, #0]
   136c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   136c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   136cc:	603b      	str	r3, [r7, #0]
   136ce:	682a      	ldr	r2, [r5, #0]
   136d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   136d4:	603b      	str	r3, [r7, #0]
   136d6:	4640      	mov	r0, r8
   136d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136dc:	f8df 8044 	ldr.w	r8, [pc, #68]	; 13724 <startTrngHW+0x138>
   136e0:	4640      	mov	r0, r8
   136e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136e6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 13728 <startTrngHW+0x13c>
   136ea:	4640      	mov	r0, r8
   136ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   136f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   136f4:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   136f8:	3201      	adds	r2, #1
   136fa:	d006      	beq.n	1370a <startTrngHW+0x11e>
   136fc:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   13700:	4a07      	ldr	r2, [pc, #28]	; (13720 <startTrngHW+0x134>)
   13702:	fba2 2303 	umull	r2, r3, r2, r3
   13706:	091b      	lsrs	r3, r3, #4
   13708:	e7cd      	b.n	136a6 <startTrngHW+0xba>
   1370a:	2316      	movs	r3, #22
   1370c:	e7cb      	b.n	136a6 <startTrngHW+0xba>
   1370e:	f04f 0903 	mov.w	r9, #3
   13712:	e797      	b.n	13644 <startTrngHW+0x58>
   13714:	f04f 0902 	mov.w	r9, #2
   13718:	e794      	b.n	13644 <startTrngHW+0x58>
   1371a:	bf00      	nop
   1371c:	5002b000 	.word	0x5002b000
   13720:	aaaaaaab 	.word	0xaaaaaaab
   13724:	00f10c31 	.word	0x00f10c31
   13728:	00f10c35 	.word	0x00f10c35

0001372c <LLF_RND_RepetitionCounterTest>:
   1372c:	b350      	cbz	r0, 13784 <LLF_RND_RepetitionCounterTest+0x58>
   1372e:	1e4b      	subs	r3, r1, #1
   13730:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   13734:	d226      	bcs.n	13784 <LLF_RND_RepetitionCounterTest+0x58>
   13736:	f04f 0c00 	mov.w	ip, #0
   1373a:	b530      	push	{r4, r5, lr}
   1373c:	00cd      	lsls	r5, r1, #3
   1373e:	46e6      	mov	lr, ip
   13740:	4664      	mov	r4, ip
   13742:	0963      	lsrs	r3, r4, #5
   13744:	f004 011f 	and.w	r1, r4, #31
   13748:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1374c:	291f      	cmp	r1, #31
   1374e:	fa23 f301 	lsr.w	r3, r3, r1
   13752:	d006      	beq.n	13762 <LLF_RND_RepetitionCounterTest+0x36>
   13754:	f003 0301 	and.w	r3, r3, #1
   13758:	b91c      	cbnz	r4, 13762 <LLF_RND_RepetitionCounterTest+0x36>
   1375a:	2401      	movs	r4, #1
   1375c:	469e      	mov	lr, r3
   1375e:	46a4      	mov	ip, r4
   13760:	e7ef      	b.n	13742 <LLF_RND_RepetitionCounterTest+0x16>
   13762:	459e      	cmp	lr, r3
   13764:	f104 0401 	add.w	r4, r4, #1
   13768:	d006      	beq.n	13778 <LLF_RND_RepetitionCounterTest+0x4c>
   1376a:	469e      	mov	lr, r3
   1376c:	f04f 0c01 	mov.w	ip, #1
   13770:	42ac      	cmp	r4, r5
   13772:	d1e6      	bne.n	13742 <LLF_RND_RepetitionCounterTest+0x16>
   13774:	2000      	movs	r0, #0
   13776:	bd30      	pop	{r4, r5, pc}
   13778:	f10c 0c01 	add.w	ip, ip, #1
   1377c:	4594      	cmp	ip, r2
   1377e:	d1f7      	bne.n	13770 <LLF_RND_RepetitionCounterTest+0x44>
   13780:	4801      	ldr	r0, [pc, #4]	; (13788 <LLF_RND_RepetitionCounterTest+0x5c>)
   13782:	bd30      	pop	{r4, r5, pc}
   13784:	4800      	ldr	r0, [pc, #0]	; (13788 <LLF_RND_RepetitionCounterTest+0x5c>)
   13786:	4770      	bx	lr
   13788:	00f10c36 	.word	0x00f10c36

0001378c <LLF_RND_AdaptiveProportionTest>:
   1378c:	b3c8      	cbz	r0, 13802 <LLF_RND_AdaptiveProportionTest+0x76>
   1378e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13792:	1e4c      	subs	r4, r1, #1
   13794:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   13798:	d21c      	bcs.n	137d4 <LLF_RND_AdaptiveProportionTest+0x48>
   1379a:	b1db      	cbz	r3, 137d4 <LLF_RND_AdaptiveProportionTest+0x48>
   1379c:	b1d2      	cbz	r2, 137d4 <LLF_RND_AdaptiveProportionTest+0x48>
   1379e:	f04f 0e00 	mov.w	lr, #0
   137a2:	00cf      	lsls	r7, r1, #3
   137a4:	4676      	mov	r6, lr
   137a6:	46f0      	mov	r8, lr
   137a8:	4675      	mov	r5, lr
   137aa:	f103 39ff 	add.w	r9, r3, #4294967295
   137ae:	096c      	lsrs	r4, r5, #5
   137b0:	f005 011f 	and.w	r1, r5, #31
   137b4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   137b8:	291f      	cmp	r1, #31
   137ba:	fa24 fc01 	lsr.w	ip, r4, r1
   137be:	d00c      	beq.n	137da <LLF_RND_AdaptiveProportionTest+0x4e>
   137c0:	f00c 0c01 	and.w	ip, ip, #1
   137c4:	b94d      	cbnz	r5, 137da <LLF_RND_AdaptiveProportionTest+0x4e>
   137c6:	2601      	movs	r6, #1
   137c8:	46e0      	mov	r8, ip
   137ca:	4635      	mov	r5, r6
   137cc:	46b6      	mov	lr, r6
   137ce:	e7ee      	b.n	137ae <LLF_RND_AdaptiveProportionTest+0x22>
   137d0:	4296      	cmp	r6, r2
   137d2:	d918      	bls.n	13806 <LLF_RND_AdaptiveProportionTest+0x7a>
   137d4:	480d      	ldr	r0, [pc, #52]	; (1380c <LLF_RND_AdaptiveProportionTest+0x80>)
   137d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   137da:	4573      	cmp	r3, lr
   137dc:	d00c      	beq.n	137f8 <LLF_RND_AdaptiveProportionTest+0x6c>
   137de:	45c4      	cmp	ip, r8
   137e0:	bf08      	it	eq
   137e2:	3601      	addeq	r6, #1
   137e4:	45f1      	cmp	r9, lr
   137e6:	d0f3      	beq.n	137d0 <LLF_RND_AdaptiveProportionTest+0x44>
   137e8:	f10e 0e01 	add.w	lr, lr, #1
   137ec:	3501      	adds	r5, #1
   137ee:	42bd      	cmp	r5, r7
   137f0:	d1dd      	bne.n	137ae <LLF_RND_AdaptiveProportionTest+0x22>
   137f2:	2000      	movs	r0, #0
   137f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   137f8:	f04f 0e01 	mov.w	lr, #1
   137fc:	46e0      	mov	r8, ip
   137fe:	4676      	mov	r6, lr
   13800:	e7f4      	b.n	137ec <LLF_RND_AdaptiveProportionTest+0x60>
   13802:	4802      	ldr	r0, [pc, #8]	; (1380c <LLF_RND_AdaptiveProportionTest+0x80>)
   13804:	4770      	bx	lr
   13806:	469e      	mov	lr, r3
   13808:	e7f0      	b.n	137ec <LLF_RND_AdaptiveProportionTest+0x60>
   1380a:	bf00      	nop
   1380c:	00f10c37 	.word	0x00f10c37

00013810 <getTrngSource>:
   13810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13814:	b091      	sub	sp, #68	; 0x44
   13816:	460d      	mov	r5, r1
   13818:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   1381c:	4682      	mov	sl, r0
   1381e:	2900      	cmp	r1, #0
   13820:	d16e      	bne.n	13900 <getTrngSource+0xf0>
   13822:	6928      	ldr	r0, [r5, #16]
   13824:	9006      	str	r0, [sp, #24]
   13826:	981a      	ldr	r0, [sp, #104]	; 0x68
   13828:	601c      	str	r4, [r3, #0]
   1382a:	2300      	movs	r3, #0
   1382c:	6003      	str	r3, [r0, #0]
   1382e:	2a00      	cmp	r2, #0
   13830:	f000 812e 	beq.w	13a90 <getTrngSource+0x280>
   13834:	4b9c      	ldr	r3, [pc, #624]	; (13aa8 <getTrngSource+0x298>)
   13836:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   13838:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   1383c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   13840:	429a      	cmp	r2, r3
   13842:	d169      	bne.n	13918 <getTrngSource+0x108>
   13844:	290a      	cmp	r1, #10
   13846:	d167      	bne.n	13918 <getTrngSource+0x108>
   13848:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1384c:	9308      	str	r3, [sp, #32]
   1384e:	f104 0308 	add.w	r3, r4, #8
   13852:	9906      	ldr	r1, [sp, #24]
   13854:	9307      	str	r3, [sp, #28]
   13856:	4b95      	ldr	r3, [pc, #596]	; (13aac <getTrngSource+0x29c>)
   13858:	4c93      	ldr	r4, [pc, #588]	; (13aa8 <getTrngSource+0x298>)
   1385a:	fba3 2301 	umull	r2, r3, r3, r1
   1385e:	089b      	lsrs	r3, r3, #2
   13860:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13864:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   13868:	9303      	str	r3, [sp, #12]
   1386a:	2304      	movs	r3, #4
   1386c:	9305      	str	r3, [sp, #20]
   1386e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13870:	9e06      	ldr	r6, [sp, #24]
   13872:	601e      	str	r6, [r3, #0]
   13874:	2e00      	cmp	r6, #0
   13876:	f000 80e9 	beq.w	13a4c <getTrngSource+0x23c>
   1387a:	2700      	movs	r7, #0
   1387c:	f000 fcb8 	bl	141f0 <LLF_RND_TurnOffTrng>
   13880:	9709      	str	r7, [sp, #36]	; 0x24
   13882:	f1ba 0f00 	cmp.w	sl, #0
   13886:	f000 80d5 	beq.w	13a34 <getTrngSource+0x224>
   1388a:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1388e:	f04f 0901 	mov.w	r9, #1
   13892:	2d00      	cmp	r5, #0
   13894:	f000 80ce 	beq.w	13a34 <getTrngSource+0x224>
   13898:	9b08      	ldr	r3, [sp, #32]
   1389a:	2b00      	cmp	r3, #0
   1389c:	d03e      	beq.n	1391c <getTrngSource+0x10c>
   1389e:	a908      	add	r1, sp, #32
   138a0:	4628      	mov	r0, r5
   138a2:	f000 fc95 	bl	141d0 <LLF_RND_GetFastestRosc>
   138a6:	2800      	cmp	r0, #0
   138a8:	d03a      	beq.n	13920 <getTrngSource+0x110>
   138aa:	4b81      	ldr	r3, [pc, #516]	; (13ab0 <getTrngSource+0x2a0>)
   138ac:	4298      	cmp	r0, r3
   138ae:	d020      	beq.n	138f2 <getTrngSource+0xe2>
   138b0:	9b08      	ldr	r3, [sp, #32]
   138b2:	2b08      	cmp	r3, #8
   138b4:	f000 80e4 	beq.w	13a80 <getTrngSource+0x270>
   138b8:	005b      	lsls	r3, r3, #1
   138ba:	2200      	movs	r2, #0
   138bc:	9308      	str	r3, [sp, #32]
   138be:	9200      	str	r2, [sp, #0]
   138c0:	ab08      	add	r3, sp, #32
   138c2:	4629      	mov	r1, r5
   138c4:	4650      	mov	r0, sl
   138c6:	f7ff fe91 	bl	135ec <startTrngHW>
   138ca:	4b7a      	ldr	r3, [pc, #488]	; (13ab4 <getTrngSource+0x2a4>)
   138cc:	4298      	cmp	r0, r3
   138ce:	f000 80d3 	beq.w	13a78 <getTrngSource+0x268>
   138d2:	b970      	cbnz	r0, 138f2 <getTrngSource+0xe2>
   138d4:	f8da 2000 	ldr.w	r2, [sl]
   138d8:	0a13      	lsrs	r3, r2, #8
   138da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   138de:	4313      	orrs	r3, r2
   138e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   138e4:	f8ca 3000 	str.w	r3, [sl]
   138e8:	9b05      	ldr	r3, [sp, #20]
   138ea:	3b01      	subs	r3, #1
   138ec:	9305      	str	r3, [sp, #20]
   138ee:	d1be      	bne.n	1386e <getTrngSource+0x5e>
   138f0:	2000      	movs	r0, #0
   138f2:	9003      	str	r0, [sp, #12]
   138f4:	f000 fc7c 	bl	141f0 <LLF_RND_TurnOffTrng>
   138f8:	9803      	ldr	r0, [sp, #12]
   138fa:	b011      	add	sp, #68	; 0x44
   138fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13900:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   13904:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   13908:	3601      	adds	r6, #1
   1390a:	bf14      	ite	ne
   1390c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   13910:	f44f 7004 	moveq.w	r0, #528	; 0x210
   13914:	9006      	str	r0, [sp, #24]
   13916:	e786      	b.n	13826 <getTrngSource+0x16>
   13918:	4867      	ldr	r0, [pc, #412]	; (13ab8 <getTrngSource+0x2a8>)
   1391a:	e7ea      	b.n	138f2 <getTrngSource+0xe2>
   1391c:	4865      	ldr	r0, [pc, #404]	; (13ab4 <getTrngSource+0x2a4>)
   1391e:	e7c4      	b.n	138aa <getTrngSource+0x9a>
   13920:	9808      	ldr	r0, [sp, #32]
   13922:	4629      	mov	r1, r5
   13924:	f000 fc3a 	bl	1419c <LLF_RND_GetRoscSampleCnt>
   13928:	2800      	cmp	r0, #0
   1392a:	d1be      	bne.n	138aa <getTrngSource+0x9a>
   1392c:	9b08      	ldr	r3, [sp, #32]
   1392e:	2b08      	cmp	r3, #8
   13930:	f000 80a8 	beq.w	13a84 <getTrngSource+0x274>
   13934:	2b04      	cmp	r3, #4
   13936:	f000 80a8 	beq.w	13a8a <getTrngSource+0x27a>
   1393a:	f1a3 0302 	sub.w	r3, r3, #2
   1393e:	fab3 f383 	clz	r3, r3
   13942:	095b      	lsrs	r3, r3, #5
   13944:	9304      	str	r3, [sp, #16]
   13946:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1394a:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   1394e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   13952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13954:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   13958:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   1395c:	4293      	cmp	r3, r2
   1395e:	d1f6      	bne.n	1394e <getTrngSource+0x13e>
   13960:	f04f 0b00 	mov.w	fp, #0
   13964:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   13968:	f04f 30ff 	mov.w	r0, #4294967295
   1396c:	f7ff fd10 	bl	13390 <CC_HalClearInterruptBit>
   13970:	f06f 031b 	mvn.w	r3, #27
   13974:	4658      	mov	r0, fp
   13976:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1397a:	f7ff fd17 	bl	133ac <CC_HalMaskInterrupt>
   1397e:	9b04      	ldr	r3, [sp, #16]
   13980:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   13984:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   13988:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1398c:	f7ff fd0e 	bl	133ac <CC_HalMaskInterrupt>
   13990:	230a      	movs	r3, #10
   13992:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   13996:	692b      	ldr	r3, [r5, #16]
   13998:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   1399c:	fbab 2303 	umull	r2, r3, fp, r3
   139a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   139a2:	091b      	lsrs	r3, r3, #4
   139a4:	fb02 f303 	mul.w	r3, r2, r3
   139a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   139ac:	03db      	lsls	r3, r3, #15
   139ae:	099b      	lsrs	r3, r3, #6
   139b0:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   139b4:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   139b8:	f8da 3000 	ldr.w	r3, [sl]
   139bc:	9908      	ldr	r1, [sp, #32]
   139be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   139c2:	020b      	lsls	r3, r1, #8
   139c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   139c8:	4313      	orrs	r3, r2
   139ca:	f8ca 3000 	str.w	r3, [sl]
   139ce:	a809      	add	r0, sp, #36	; 0x24
   139d0:	f000 fbd4 	bl	1417c <LLF_RND_WaitRngInterrupt>
   139d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   139d6:	f003 031a 	and.w	r3, r3, #26
   139da:	4303      	orrs	r3, r0
   139dc:	f47f af68 	bne.w	138b0 <getTrngSource+0xa0>
   139e0:	fbab 3b06 	umull	r3, fp, fp, r6
   139e4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   139e8:	930a      	str	r3, [sp, #40]	; 0x28
   139ea:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   139ee:	930b      	str	r3, [sp, #44]	; 0x2c
   139f0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   139f4:	930c      	str	r3, [sp, #48]	; 0x30
   139f6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   139fa:	930d      	str	r3, [sp, #52]	; 0x34
   139fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   13a00:	930e      	str	r3, [sp, #56]	; 0x38
   13a02:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   13a06:	930f      	str	r3, [sp, #60]	; 0x3c
   13a08:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   13a0c:	d101      	bne.n	13a12 <getTrngSource+0x202>
   13a0e:	9b03      	ldr	r3, [sp, #12]
   13a10:	b993      	cbnz	r3, 13a38 <getTrngSource+0x228>
   13a12:	4640      	mov	r0, r8
   13a14:	2218      	movs	r2, #24
   13a16:	a90a      	add	r1, sp, #40	; 0x28
   13a18:	3e18      	subs	r6, #24
   13a1a:	f7ff fd47 	bl	134ac <CC_PalMemCopyPlat>
   13a1e:	f108 0818 	add.w	r8, r8, #24
   13a22:	3701      	adds	r7, #1
   13a24:	b196      	cbz	r6, 13a4c <getTrngSource+0x23c>
   13a26:	f000 fbe3 	bl	141f0 <LLF_RND_TurnOffTrng>
   13a2a:	2300      	movs	r3, #0
   13a2c:	9309      	str	r3, [sp, #36]	; 0x24
   13a2e:	2d00      	cmp	r5, #0
   13a30:	f47f af32 	bne.w	13898 <getTrngSource+0x88>
   13a34:	4821      	ldr	r0, [pc, #132]	; (13abc <getTrngSource+0x2ac>)
   13a36:	e738      	b.n	138aa <getTrngSource+0x9a>
   13a38:	4640      	mov	r0, r8
   13a3a:	1af6      	subs	r6, r6, r3
   13a3c:	461a      	mov	r2, r3
   13a3e:	a90a      	add	r1, sp, #40	; 0x28
   13a40:	4498      	add	r8, r3
   13a42:	3701      	adds	r7, #1
   13a44:	f7ff fd32 	bl	134ac <CC_PalMemCopyPlat>
   13a48:	2e00      	cmp	r6, #0
   13a4a:	d1ec      	bne.n	13a26 <getTrngSource+0x216>
   13a4c:	9f06      	ldr	r7, [sp, #24]
   13a4e:	9e07      	ldr	r6, [sp, #28]
   13a50:	696a      	ldr	r2, [r5, #20]
   13a52:	4639      	mov	r1, r7
   13a54:	4630      	mov	r0, r6
   13a56:	f7ff fe69 	bl	1372c <LLF_RND_RepetitionCounterTest>
   13a5a:	69aa      	ldr	r2, [r5, #24]
   13a5c:	b940      	cbnz	r0, 13a70 <getTrngSource+0x260>
   13a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13a62:	4639      	mov	r1, r7
   13a64:	4630      	mov	r0, r6
   13a66:	f7ff fe91 	bl	1378c <LLF_RND_AdaptiveProportionTest>
   13a6a:	2800      	cmp	r0, #0
   13a6c:	f43f af40 	beq.w	138f0 <getTrngSource+0xe0>
   13a70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13a72:	2300      	movs	r3, #0
   13a74:	6013      	str	r3, [r2, #0]
   13a76:	e718      	b.n	138aa <getTrngSource+0x9a>
   13a78:	6a2b      	ldr	r3, [r5, #32]
   13a7a:	2b00      	cmp	r3, #0
   13a7c:	f43f af39 	beq.w	138f2 <getTrngSource+0xe2>
   13a80:	480f      	ldr	r0, [pc, #60]	; (13ac0 <getTrngSource+0x2b0>)
   13a82:	e736      	b.n	138f2 <getTrngSource+0xe2>
   13a84:	2303      	movs	r3, #3
   13a86:	9304      	str	r3, [sp, #16]
   13a88:	e75d      	b.n	13946 <getTrngSource+0x136>
   13a8a:	2302      	movs	r3, #2
   13a8c:	9304      	str	r3, [sp, #16]
   13a8e:	e75a      	b.n	13946 <getTrngSource+0x136>
   13a90:	9100      	str	r1, [sp, #0]
   13a92:	ab08      	add	r3, sp, #32
   13a94:	2201      	movs	r2, #1
   13a96:	4629      	mov	r1, r5
   13a98:	4650      	mov	r0, sl
   13a9a:	f7ff fda7 	bl	135ec <startTrngHW>
   13a9e:	2800      	cmp	r0, #0
   13aa0:	f43f aed5 	beq.w	1384e <getTrngSource+0x3e>
   13aa4:	e725      	b.n	138f2 <getTrngSource+0xe2>
   13aa6:	bf00      	nop
   13aa8:	5002b000 	.word	0x5002b000
   13aac:	aaaaaaab 	.word	0xaaaaaaab
   13ab0:	00f10c02 	.word	0x00f10c02
   13ab4:	00f10c31 	.word	0x00f10c31
   13ab8:	00f10c30 	.word	0x00f10c30
   13abc:	00f10c35 	.word	0x00f10c35
   13ac0:	00f10c32 	.word	0x00f10c32

00013ac4 <LLF_RND_GetTrngSource>:
   13ac4:	b410      	push	{r4}
   13ac6:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   13aca:	9401      	str	r4, [sp, #4]
   13acc:	9c03      	ldr	r4, [sp, #12]
   13ace:	9402      	str	r4, [sp, #8]
   13ad0:	2400      	movs	r4, #0
   13ad2:	9403      	str	r4, [sp, #12]
   13ad4:	bc10      	pop	{r4}
   13ad6:	f7ff be9b 	b.w	13810 <getTrngSource>
   13ada:	bf00      	nop

00013adc <LLF_RND_RunTrngStartupTest>:
   13adc:	b510      	push	{r4, lr}
   13ade:	b086      	sub	sp, #24
   13ae0:	ab05      	add	r3, sp, #20
   13ae2:	2401      	movs	r4, #1
   13ae4:	e9cd 2401 	strd	r2, r4, [sp, #4]
   13ae8:	9300      	str	r3, [sp, #0]
   13aea:	2200      	movs	r2, #0
   13aec:	ab04      	add	r3, sp, #16
   13aee:	f7ff fe8f 	bl	13810 <getTrngSource>
   13af2:	b006      	add	sp, #24
   13af4:	bd10      	pop	{r4, pc}
   13af6:	bf00      	nop

00013af8 <mbedtls_hardware_poll>:
   13af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13afa:	b087      	sub	sp, #28
   13afc:	2900      	cmp	r1, #0
   13afe:	d066      	beq.n	13bce <mbedtls_hardware_poll+0xd6>
   13b00:	461e      	mov	r6, r3
   13b02:	2b00      	cmp	r3, #0
   13b04:	d063      	beq.n	13bce <mbedtls_hardware_poll+0xd6>
   13b06:	4614      	mov	r4, r2
   13b08:	2a00      	cmp	r2, #0
   13b0a:	d060      	beq.n	13bce <mbedtls_hardware_poll+0xd6>
   13b0c:	4f31      	ldr	r7, [pc, #196]	; (13bd4 <mbedtls_hardware_poll+0xdc>)
   13b0e:	460d      	mov	r5, r1
   13b10:	6838      	ldr	r0, [r7, #0]
   13b12:	f04f 31ff 	mov.w	r1, #4294967295
   13b16:	f7ff fce5 	bl	134e4 <CC_PalMutexLock>
   13b1a:	2800      	cmp	r0, #0
   13b1c:	d14d      	bne.n	13bba <mbedtls_hardware_poll+0xc2>
   13b1e:	2000      	movs	r0, #0
   13b20:	f7ff fd10 	bl	13544 <CC_PalPowerSaveModeSelect>
   13b24:	2800      	cmp	r0, #0
   13b26:	d144      	bne.n	13bb2 <mbedtls_hardware_poll+0xba>
   13b28:	482b      	ldr	r0, [pc, #172]	; (13bd8 <mbedtls_hardware_poll+0xe0>)
   13b2a:	f000 fa99 	bl	14060 <RNG_PLAT_SetUserRngParameters>
   13b2e:	4603      	mov	r3, r0
   13b30:	b1d8      	cbz	r0, 13b6a <mbedtls_hardware_poll+0x72>
   13b32:	2001      	movs	r0, #1
   13b34:	f04f 35ff 	mov.w	r5, #4294967295
   13b38:	f7ff fd04 	bl	13544 <CC_PalPowerSaveModeSelect>
   13b3c:	2800      	cmp	r0, #0
   13b3e:	d134      	bne.n	13baa <mbedtls_hardware_poll+0xb2>
   13b40:	4826      	ldr	r0, [pc, #152]	; (13bdc <mbedtls_hardware_poll+0xe4>)
   13b42:	f44f 7108 	mov.w	r1, #544	; 0x220
   13b46:	f7fe fed9 	bl	128fc <mbedtls_zeroize_internal>
   13b4a:	4825      	ldr	r0, [pc, #148]	; (13be0 <mbedtls_hardware_poll+0xe8>)
   13b4c:	2104      	movs	r1, #4
   13b4e:	f7fe fed5 	bl	128fc <mbedtls_zeroize_internal>
   13b52:	4821      	ldr	r0, [pc, #132]	; (13bd8 <mbedtls_hardware_poll+0xe0>)
   13b54:	2128      	movs	r1, #40	; 0x28
   13b56:	f7fe fed1 	bl	128fc <mbedtls_zeroize_internal>
   13b5a:	6838      	ldr	r0, [r7, #0]
   13b5c:	f7ff fcca 	bl	134f4 <CC_PalMutexUnlock>
   13b60:	2800      	cmp	r0, #0
   13b62:	d12e      	bne.n	13bc2 <mbedtls_hardware_poll+0xca>
   13b64:	4628      	mov	r0, r5
   13b66:	b007      	add	sp, #28
   13b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b6a:	4a1c      	ldr	r2, [pc, #112]	; (13bdc <mbedtls_hardware_poll+0xe4>)
   13b6c:	9202      	str	r2, [sp, #8]
   13b6e:	aa05      	add	r2, sp, #20
   13b70:	9201      	str	r2, [sp, #4]
   13b72:	aa04      	add	r2, sp, #16
   13b74:	9003      	str	r0, [sp, #12]
   13b76:	9200      	str	r2, [sp, #0]
   13b78:	4917      	ldr	r1, [pc, #92]	; (13bd8 <mbedtls_hardware_poll+0xe0>)
   13b7a:	4819      	ldr	r0, [pc, #100]	; (13be0 <mbedtls_hardware_poll+0xe8>)
   13b7c:	461a      	mov	r2, r3
   13b7e:	f7ff ffa1 	bl	13ac4 <LLF_RND_GetTrngSource>
   13b82:	4603      	mov	r3, r0
   13b84:	2800      	cmp	r0, #0
   13b86:	d1d4      	bne.n	13b32 <mbedtls_hardware_poll+0x3a>
   13b88:	4628      	mov	r0, r5
   13b8a:	461d      	mov	r5, r3
   13b8c:	9b05      	ldr	r3, [sp, #20]
   13b8e:	9904      	ldr	r1, [sp, #16]
   13b90:	429c      	cmp	r4, r3
   13b92:	4622      	mov	r2, r4
   13b94:	bf28      	it	cs
   13b96:	461a      	movcs	r2, r3
   13b98:	6032      	str	r2, [r6, #0]
   13b9a:	3108      	adds	r1, #8
   13b9c:	f7ff fc86 	bl	134ac <CC_PalMemCopyPlat>
   13ba0:	2001      	movs	r0, #1
   13ba2:	f7ff fccf 	bl	13544 <CC_PalPowerSaveModeSelect>
   13ba6:	2800      	cmp	r0, #0
   13ba8:	d0ca      	beq.n	13b40 <mbedtls_hardware_poll+0x48>
   13baa:	480e      	ldr	r0, [pc, #56]	; (13be4 <mbedtls_hardware_poll+0xec>)
   13bac:	f7fe fd8e 	bl	126cc <CC_PalAbort>
   13bb0:	e7c6      	b.n	13b40 <mbedtls_hardware_poll+0x48>
   13bb2:	480d      	ldr	r0, [pc, #52]	; (13be8 <mbedtls_hardware_poll+0xf0>)
   13bb4:	f7fe fd8a 	bl	126cc <CC_PalAbort>
   13bb8:	e7b6      	b.n	13b28 <mbedtls_hardware_poll+0x30>
   13bba:	480c      	ldr	r0, [pc, #48]	; (13bec <mbedtls_hardware_poll+0xf4>)
   13bbc:	f7fe fd86 	bl	126cc <CC_PalAbort>
   13bc0:	e7ad      	b.n	13b1e <mbedtls_hardware_poll+0x26>
   13bc2:	480b      	ldr	r0, [pc, #44]	; (13bf0 <mbedtls_hardware_poll+0xf8>)
   13bc4:	f7fe fd82 	bl	126cc <CC_PalAbort>
   13bc8:	4628      	mov	r0, r5
   13bca:	b007      	add	sp, #28
   13bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13bce:	f04f 35ff 	mov.w	r5, #4294967295
   13bd2:	e7c7      	b.n	13b64 <mbedtls_hardware_poll+0x6c>
   13bd4:	200005f0 	.word	0x200005f0
   13bd8:	20002aa8 	.word	0x20002aa8
   13bdc:	20002ad0 	.word	0x20002ad0
   13be0:	20002aa4 	.word	0x20002aa4
   13be4:	000178fc 	.word	0x000178fc
   13be8:	000178dc 	.word	0x000178dc
   13bec:	000178c4 	.word	0x000178c4
   13bf0:	00017954 	.word	0x00017954

00013bf4 <cc_mbedtls_aes_init>:
   13bf4:	b510      	push	{r4, lr}
   13bf6:	4604      	mov	r4, r0
   13bf8:	b130      	cbz	r0, 13c08 <cc_mbedtls_aes_init+0x14>
   13bfa:	2200      	movs	r2, #0
   13bfc:	2301      	movs	r3, #1
   13bfe:	6562      	str	r2, [r4, #84]	; 0x54
   13c00:	65a2      	str	r2, [r4, #88]	; 0x58
   13c02:	65e3      	str	r3, [r4, #92]	; 0x5c
   13c04:	6623      	str	r3, [r4, #96]	; 0x60
   13c06:	bd10      	pop	{r4, pc}
   13c08:	4801      	ldr	r0, [pc, #4]	; (13c10 <cc_mbedtls_aes_init+0x1c>)
   13c0a:	f7fe fd5f 	bl	126cc <CC_PalAbort>
   13c0e:	e7f4      	b.n	13bfa <cc_mbedtls_aes_init+0x6>
   13c10:	0001796c 	.word	0x0001796c

00013c14 <cc_mbedtls_aes_free>:
   13c14:	b118      	cbz	r0, 13c1e <cc_mbedtls_aes_free+0xa>
   13c16:	2274      	movs	r2, #116	; 0x74
   13c18:	2100      	movs	r1, #0
   13c1a:	f7ff bc49 	b.w	134b0 <CC_PalMemSetPlat>
   13c1e:	4770      	bx	lr

00013c20 <cc_mbedtls_aes_setkey_enc>:
   13c20:	b190      	cbz	r0, 13c48 <cc_mbedtls_aes_setkey_enc+0x28>
   13c22:	b1a1      	cbz	r1, 13c4e <cc_mbedtls_aes_setkey_enc+0x2e>
   13c24:	b510      	push	{r4, lr}
   13c26:	2a80      	cmp	r2, #128	; 0x80
   13c28:	f04f 0400 	mov.w	r4, #0
   13c2c:	6384      	str	r4, [r0, #56]	; 0x38
   13c2e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   13c32:	d106      	bne.n	13c42 <cc_mbedtls_aes_setkey_enc+0x22>
   13c34:	2210      	movs	r2, #16
   13c36:	6304      	str	r4, [r0, #48]	; 0x30
   13c38:	4410      	add	r0, r2
   13c3a:	f7ff fc37 	bl	134ac <CC_PalMemCopyPlat>
   13c3e:	4620      	mov	r0, r4
   13c40:	bd10      	pop	{r4, pc}
   13c42:	f06f 001f 	mvn.w	r0, #31
   13c46:	bd10      	pop	{r4, pc}
   13c48:	f06f 0021 	mvn.w	r0, #33	; 0x21
   13c4c:	4770      	bx	lr
   13c4e:	f06f 001f 	mvn.w	r0, #31
   13c52:	4770      	bx	lr

00013c54 <cc_mbedtls_aes_crypt_ecb>:
   13c54:	b328      	cbz	r0, 13ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13c56:	b322      	cbz	r2, 13ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13c58:	b31b      	cbz	r3, 13ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13c5a:	2901      	cmp	r1, #1
   13c5c:	d821      	bhi.n	13ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   13c5e:	b570      	push	{r4, r5, r6, lr}
   13c60:	4604      	mov	r4, r0
   13c62:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13c64:	b086      	sub	sp, #24
   13c66:	d017      	beq.n	13c98 <cc_mbedtls_aes_crypt_ecb+0x44>
   13c68:	2901      	cmp	r1, #1
   13c6a:	d117      	bne.n	13c9c <cc_mbedtls_aes_crypt_ecb+0x48>
   13c6c:	2510      	movs	r5, #16
   13c6e:	2100      	movs	r1, #0
   13c70:	eb0d 0605 	add.w	r6, sp, r5
   13c74:	6361      	str	r1, [r4, #52]	; 0x34
   13c76:	4610      	mov	r0, r2
   13c78:	9500      	str	r5, [sp, #0]
   13c7a:	9601      	str	r6, [sp, #4]
   13c7c:	aa02      	add	r2, sp, #8
   13c7e:	4629      	mov	r1, r5
   13c80:	f000 fac2 	bl	14208 <SetDataBuffersInfo>
   13c84:	b950      	cbnz	r0, 13c9c <cc_mbedtls_aes_crypt_ecb+0x48>
   13c86:	462b      	mov	r3, r5
   13c88:	4632      	mov	r2, r6
   13c8a:	a902      	add	r1, sp, #8
   13c8c:	4620      	mov	r0, r4
   13c8e:	f000 fd43 	bl	14718 <ProcessAesDrv>
   13c92:	b918      	cbnz	r0, 13c9c <cc_mbedtls_aes_crypt_ecb+0x48>
   13c94:	b006      	add	sp, #24
   13c96:	bd70      	pop	{r4, r5, r6, pc}
   13c98:	2900      	cmp	r1, #0
   13c9a:	d0e7      	beq.n	13c6c <cc_mbedtls_aes_crypt_ecb+0x18>
   13c9c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   13ca0:	e7f8      	b.n	13c94 <cc_mbedtls_aes_crypt_ecb+0x40>
   13ca2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   13ca6:	4770      	bx	lr

00013ca8 <cc_mbedtls_sha256_init>:
   13ca8:	b510      	push	{r4, lr}
   13caa:	4604      	mov	r4, r0
   13cac:	b128      	cbz	r0, 13cba <cc_mbedtls_sha256_init+0x12>
   13cae:	4620      	mov	r0, r4
   13cb0:	21f4      	movs	r1, #244	; 0xf4
   13cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13cb6:	f7ff bbfd 	b.w	134b4 <CC_PalMemSetZeroPlat>
   13cba:	4804      	ldr	r0, [pc, #16]	; (13ccc <cc_mbedtls_sha256_init+0x24>)
   13cbc:	f7fe fd06 	bl	126cc <CC_PalAbort>
   13cc0:	4620      	mov	r0, r4
   13cc2:	21f4      	movs	r1, #244	; 0xf4
   13cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13cc8:	f7ff bbf4 	b.w	134b4 <CC_PalMemSetZeroPlat>
   13ccc:	00017980 	.word	0x00017980

00013cd0 <cc_mbedtls_sha256_free>:
   13cd0:	b110      	cbz	r0, 13cd8 <cc_mbedtls_sha256_free+0x8>
   13cd2:	21f4      	movs	r1, #244	; 0xf4
   13cd4:	f7fe be12 	b.w	128fc <mbedtls_zeroize_internal>
   13cd8:	4770      	bx	lr
   13cda:	bf00      	nop

00013cdc <cc_mbedtls_sha256_starts>:
   13cdc:	b508      	push	{r3, lr}
   13cde:	b121      	cbz	r1, 13cea <cc_mbedtls_sha256_starts+0xe>
   13ce0:	2901      	cmp	r1, #1
   13ce2:	d008      	beq.n	13cf6 <cc_mbedtls_sha256_starts+0x1a>
   13ce4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13ce8:	bd08      	pop	{r3, pc}
   13cea:	2101      	movs	r1, #1
   13cec:	f000 f858 	bl	13da0 <mbedtls_sha_starts_internal>
   13cf0:	2800      	cmp	r0, #0
   13cf2:	d1f7      	bne.n	13ce4 <cc_mbedtls_sha256_starts+0x8>
   13cf4:	bd08      	pop	{r3, pc}
   13cf6:	2102      	movs	r1, #2
   13cf8:	f000 f852 	bl	13da0 <mbedtls_sha_starts_internal>
   13cfc:	2800      	cmp	r0, #0
   13cfe:	d0f9      	beq.n	13cf4 <cc_mbedtls_sha256_starts+0x18>
   13d00:	e7f0      	b.n	13ce4 <cc_mbedtls_sha256_starts+0x8>
   13d02:	bf00      	nop

00013d04 <cc_mbedtls_sha256_update>:
   13d04:	b530      	push	{r4, r5, lr}
   13d06:	4605      	mov	r5, r0
   13d08:	1888      	adds	r0, r1, r2
   13d0a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   13d0e:	b0a1      	sub	sp, #132	; 0x84
   13d10:	460b      	mov	r3, r1
   13d12:	4614      	mov	r4, r2
   13d14:	d801      	bhi.n	13d1a <cc_mbedtls_sha256_update+0x16>
   13d16:	2a80      	cmp	r2, #128	; 0x80
   13d18:	d90c      	bls.n	13d34 <cc_mbedtls_sha256_update+0x30>
   13d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13d1e:	d917      	bls.n	13d50 <cc_mbedtls_sha256_update+0x4c>
   13d20:	4622      	mov	r2, r4
   13d22:	4619      	mov	r1, r3
   13d24:	4628      	mov	r0, r5
   13d26:	f000 f87d 	bl	13e24 <mbedtls_sha_update_internal>
   13d2a:	4604      	mov	r4, r0
   13d2c:	b984      	cbnz	r4, 13d50 <cc_mbedtls_sha256_update+0x4c>
   13d2e:	4620      	mov	r0, r4
   13d30:	b021      	add	sp, #132	; 0x84
   13d32:	bd30      	pop	{r4, r5, pc}
   13d34:	4668      	mov	r0, sp
   13d36:	f7ff fbb9 	bl	134ac <CC_PalMemCopyPlat>
   13d3a:	4622      	mov	r2, r4
   13d3c:	4669      	mov	r1, sp
   13d3e:	4628      	mov	r0, r5
   13d40:	f000 f870 	bl	13e24 <mbedtls_sha_update_internal>
   13d44:	2180      	movs	r1, #128	; 0x80
   13d46:	4604      	mov	r4, r0
   13d48:	4668      	mov	r0, sp
   13d4a:	f7ff fbb3 	bl	134b4 <CC_PalMemSetZeroPlat>
   13d4e:	e7ed      	b.n	13d2c <cc_mbedtls_sha256_update+0x28>
   13d50:	f06f 0436 	mvn.w	r4, #54	; 0x36
   13d54:	e7eb      	b.n	13d2e <cc_mbedtls_sha256_update+0x2a>
   13d56:	bf00      	nop

00013d58 <cc_mbedtls_sha256_finish>:
   13d58:	b570      	push	{r4, r5, r6, lr}
   13d5a:	b1e8      	cbz	r0, 13d98 <cc_mbedtls_sha256_finish+0x40>
   13d5c:	460e      	mov	r6, r1
   13d5e:	b1d9      	cbz	r1, 13d98 <cc_mbedtls_sha256_finish+0x40>
   13d60:	4604      	mov	r4, r0
   13d62:	f000 f831 	bl	13dc8 <mbedtls_sha_finish_internal>
   13d66:	4605      	mov	r5, r0
   13d68:	b9b0      	cbnz	r0, 13d98 <cc_mbedtls_sha256_finish+0x40>
   13d6a:	6823      	ldr	r3, [r4, #0]
   13d6c:	2b01      	cmp	r3, #1
   13d6e:	d00b      	beq.n	13d88 <cc_mbedtls_sha256_finish+0x30>
   13d70:	2b02      	cmp	r3, #2
   13d72:	d001      	beq.n	13d78 <cc_mbedtls_sha256_finish+0x20>
   13d74:	4628      	mov	r0, r5
   13d76:	bd70      	pop	{r4, r5, r6, pc}
   13d78:	221c      	movs	r2, #28
   13d7a:	f104 0108 	add.w	r1, r4, #8
   13d7e:	4630      	mov	r0, r6
   13d80:	f7ff fb94 	bl	134ac <CC_PalMemCopyPlat>
   13d84:	4628      	mov	r0, r5
   13d86:	bd70      	pop	{r4, r5, r6, pc}
   13d88:	2220      	movs	r2, #32
   13d8a:	f104 0108 	add.w	r1, r4, #8
   13d8e:	4630      	mov	r0, r6
   13d90:	f7ff fb8c 	bl	134ac <CC_PalMemCopyPlat>
   13d94:	4628      	mov	r0, r5
   13d96:	bd70      	pop	{r4, r5, r6, pc}
   13d98:	f06f 0536 	mvn.w	r5, #54	; 0x36
   13d9c:	e7ea      	b.n	13d74 <cc_mbedtls_sha256_finish+0x1c>
   13d9e:	bf00      	nop

00013da0 <mbedtls_sha_starts_internal>:
   13da0:	b178      	cbz	r0, 13dc2 <mbedtls_sha_starts_internal+0x22>
   13da2:	b538      	push	{r3, r4, r5, lr}
   13da4:	4604      	mov	r4, r0
   13da6:	460d      	mov	r5, r1
   13da8:	21f0      	movs	r1, #240	; 0xf0
   13daa:	f7ff fb83 	bl	134b4 <CC_PalMemSetZeroPlat>
   13dae:	2340      	movs	r3, #64	; 0x40
   13db0:	6025      	str	r5, [r4, #0]
   13db2:	65e3      	str	r3, [r4, #92]	; 0x5c
   13db4:	4620      	mov	r0, r4
   13db6:	f000 fa5b 	bl	14270 <InitHashDrv>
   13dba:	3800      	subs	r0, #0
   13dbc:	bf18      	it	ne
   13dbe:	2001      	movne	r0, #1
   13dc0:	bd38      	pop	{r3, r4, r5, pc}
   13dc2:	2001      	movs	r0, #1
   13dc4:	4770      	bx	lr
   13dc6:	bf00      	nop

00013dc8 <mbedtls_sha_finish_internal>:
   13dc8:	b570      	push	{r4, r5, r6, lr}
   13dca:	6e05      	ldr	r5, [r0, #96]	; 0x60
   13dcc:	b0a4      	sub	sp, #144	; 0x90
   13dce:	4604      	mov	r4, r0
   13dd0:	ae04      	add	r6, sp, #16
   13dd2:	b9e5      	cbnz	r5, 13e0e <mbedtls_sha_finish_internal+0x46>
   13dd4:	2201      	movs	r2, #1
   13dd6:	2300      	movs	r3, #0
   13dd8:	6062      	str	r2, [r4, #4]
   13dda:	4630      	mov	r0, r6
   13ddc:	e9cd 3300 	strd	r3, r3, [sp]
   13de0:	aa02      	add	r2, sp, #8
   13de2:	4629      	mov	r1, r5
   13de4:	f000 fa10 	bl	14208 <SetDataBuffersInfo>
   13de8:	b110      	cbz	r0, 13df0 <mbedtls_sha_finish_internal+0x28>
   13dea:	2001      	movs	r0, #1
   13dec:	b024      	add	sp, #144	; 0x90
   13dee:	bd70      	pop	{r4, r5, r6, pc}
   13df0:	462a      	mov	r2, r5
   13df2:	a902      	add	r1, sp, #8
   13df4:	4620      	mov	r0, r4
   13df6:	f000 fa63 	bl	142c0 <ProcessHashDrv>
   13dfa:	2800      	cmp	r0, #0
   13dfc:	d1f5      	bne.n	13dea <mbedtls_sha_finish_internal+0x22>
   13dfe:	4620      	mov	r0, r4
   13e00:	f000 fb74 	bl	144ec <FinishHashDrv>
   13e04:	2800      	cmp	r0, #0
   13e06:	d1f0      	bne.n	13dea <mbedtls_sha_finish_internal+0x22>
   13e08:	6620      	str	r0, [r4, #96]	; 0x60
   13e0a:	b024      	add	sp, #144	; 0x90
   13e0c:	bd70      	pop	{r4, r5, r6, pc}
   13e0e:	2d80      	cmp	r5, #128	; 0x80
   13e10:	462a      	mov	r2, r5
   13e12:	f100 0164 	add.w	r1, r0, #100	; 0x64
   13e16:	bf28      	it	cs
   13e18:	2280      	movcs	r2, #128	; 0x80
   13e1a:	4630      	mov	r0, r6
   13e1c:	f7ff fb46 	bl	134ac <CC_PalMemCopyPlat>
   13e20:	6e25      	ldr	r5, [r4, #96]	; 0x60
   13e22:	e7d7      	b.n	13dd4 <mbedtls_sha_finish_internal+0xc>

00013e24 <mbedtls_sha_update_internal>:
   13e24:	2800      	cmp	r0, #0
   13e26:	f000 80ae 	beq.w	13f86 <mbedtls_sha_update_internal+0x162>
   13e2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e2e:	4614      	mov	r4, r2
   13e30:	b0a5      	sub	sp, #148	; 0x94
   13e32:	2a00      	cmp	r2, #0
   13e34:	d03d      	beq.n	13eb2 <mbedtls_sha_update_internal+0x8e>
   13e36:	460f      	mov	r7, r1
   13e38:	2900      	cmp	r1, #0
   13e3a:	d049      	beq.n	13ed0 <mbedtls_sha_update_internal+0xac>
   13e3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   13e40:	4605      	mov	r5, r0
   13e42:	6e00      	ldr	r0, [r0, #96]	; 0x60
   13e44:	d320      	bcc.n	13e88 <mbedtls_sha_update_internal+0x64>
   13e46:	f64f 78ff 	movw	r8, #65535	; 0xffff
   13e4a:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   13e4e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   13e50:	1a1a      	subs	r2, r3, r0
   13e52:	fbb2 f1f3 	udiv	r1, r2, r3
   13e56:	fb03 2211 	mls	r2, r3, r1, r2
   13e5a:	2a00      	cmp	r2, #0
   13e5c:	d165      	bne.n	13f2a <mbedtls_sha_update_internal+0x106>
   13e5e:	4283      	cmp	r3, r0
   13e60:	46b9      	mov	r9, r7
   13e62:	f64f 76ff 	movw	r6, #65535	; 0xffff
   13e66:	d072      	beq.n	13f4e <mbedtls_sha_update_internal+0x12a>
   13e68:	fbb6 fbf3 	udiv	fp, r6, r3
   13e6c:	fb03 fb0b 	mul.w	fp, r3, fp
   13e70:	f1bb 0f00 	cmp.w	fp, #0
   13e74:	d130      	bne.n	13ed8 <mbedtls_sha_update_internal+0xb4>
   13e76:	2e00      	cmp	r6, #0
   13e78:	d145      	bne.n	13f06 <mbedtls_sha_update_internal+0xe2>
   13e7a:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   13e7e:	3cff      	subs	r4, #255	; 0xff
   13e80:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   13e84:	4447      	add	r7, r8
   13e86:	d2e2      	bcs.n	13e4e <mbedtls_sha_update_internal+0x2a>
   13e88:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   13e8a:	1a16      	subs	r6, r2, r0
   13e8c:	fbb6 f3f2 	udiv	r3, r6, r2
   13e90:	fb02 6613 	mls	r6, r2, r3, r6
   13e94:	42a6      	cmp	r6, r4
   13e96:	bf28      	it	cs
   13e98:	4626      	movcs	r6, r4
   13e9a:	2e00      	cmp	r6, #0
   13e9c:	d175      	bne.n	13f8a <mbedtls_sha_update_internal+0x166>
   13e9e:	4282      	cmp	r2, r0
   13ea0:	f000 808d 	beq.w	13fbe <mbedtls_sha_update_internal+0x19a>
   13ea4:	fbb4 f6f2 	udiv	r6, r4, r2
   13ea8:	fb02 f606 	mul.w	r6, r2, r6
   13eac:	b92e      	cbnz	r6, 13eba <mbedtls_sha_update_internal+0x96>
   13eae:	2c00      	cmp	r4, #0
   13eb0:	d179      	bne.n	13fa6 <mbedtls_sha_update_internal+0x182>
   13eb2:	2000      	movs	r0, #0
   13eb4:	b025      	add	sp, #148	; 0x94
   13eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eba:	2300      	movs	r3, #0
   13ebc:	e9cd 3300 	strd	r3, r3, [sp]
   13ec0:	aa02      	add	r2, sp, #8
   13ec2:	4631      	mov	r1, r6
   13ec4:	4638      	mov	r0, r7
   13ec6:	f000 f99f 	bl	14208 <SetDataBuffersInfo>
   13eca:	2800      	cmp	r0, #0
   13ecc:	f000 8095 	beq.w	13ffa <mbedtls_sha_update_internal+0x1d6>
   13ed0:	2001      	movs	r0, #1
   13ed2:	b025      	add	sp, #148	; 0x94
   13ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed8:	2300      	movs	r3, #0
   13eda:	e9cd 3300 	strd	r3, r3, [sp]
   13ede:	aa02      	add	r2, sp, #8
   13ee0:	4659      	mov	r1, fp
   13ee2:	4648      	mov	r0, r9
   13ee4:	f000 f990 	bl	14208 <SetDataBuffersInfo>
   13ee8:	2800      	cmp	r0, #0
   13eea:	d1f1      	bne.n	13ed0 <mbedtls_sha_update_internal+0xac>
   13eec:	a902      	add	r1, sp, #8
   13eee:	465a      	mov	r2, fp
   13ef0:	4628      	mov	r0, r5
   13ef2:	f000 f9e5 	bl	142c0 <ProcessHashDrv>
   13ef6:	2800      	cmp	r0, #0
   13ef8:	d1ea      	bne.n	13ed0 <mbedtls_sha_update_internal+0xac>
   13efa:	eba6 060b 	sub.w	r6, r6, fp
   13efe:	6e28      	ldr	r0, [r5, #96]	; 0x60
   13f00:	44d9      	add	r9, fp
   13f02:	2e00      	cmp	r6, #0
   13f04:	d0b9      	beq.n	13e7a <mbedtls_sha_update_internal+0x56>
   13f06:	3019      	adds	r0, #25
   13f08:	4649      	mov	r1, r9
   13f0a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   13f0e:	4632      	mov	r2, r6
   13f10:	f7ff facc 	bl	134ac <CC_PalMemCopyPlat>
   13f14:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   13f18:	6e28      	ldr	r0, [r5, #96]	; 0x60
   13f1a:	3cff      	subs	r4, #255	; 0xff
   13f1c:	4430      	add	r0, r6
   13f1e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   13f22:	4447      	add	r7, r8
   13f24:	6628      	str	r0, [r5, #96]	; 0x60
   13f26:	d292      	bcs.n	13e4e <mbedtls_sha_update_internal+0x2a>
   13f28:	e7ae      	b.n	13e88 <mbedtls_sha_update_internal+0x64>
   13f2a:	4542      	cmp	r2, r8
   13f2c:	bf28      	it	cs
   13f2e:	4642      	movcs	r2, r8
   13f30:	4450      	add	r0, sl
   13f32:	4639      	mov	r1, r7
   13f34:	4616      	mov	r6, r2
   13f36:	f7ff fab9 	bl	134ac <CC_PalMemCopyPlat>
   13f3a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   13f3c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   13f3e:	4430      	add	r0, r6
   13f40:	4283      	cmp	r3, r0
   13f42:	eb07 0906 	add.w	r9, r7, r6
   13f46:	6628      	str	r0, [r5, #96]	; 0x60
   13f48:	eba8 0606 	sub.w	r6, r8, r6
   13f4c:	d18c      	bne.n	13e68 <mbedtls_sha_update_internal+0x44>
   13f4e:	2b80      	cmp	r3, #128	; 0x80
   13f50:	bf28      	it	cs
   13f52:	2380      	movcs	r3, #128	; 0x80
   13f54:	461a      	mov	r2, r3
   13f56:	4651      	mov	r1, sl
   13f58:	a804      	add	r0, sp, #16
   13f5a:	f7ff faa7 	bl	134ac <CC_PalMemCopyPlat>
   13f5e:	2300      	movs	r3, #0
   13f60:	e9cd 3300 	strd	r3, r3, [sp]
   13f64:	aa02      	add	r2, sp, #8
   13f66:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   13f68:	a804      	add	r0, sp, #16
   13f6a:	f000 f94d 	bl	14208 <SetDataBuffersInfo>
   13f6e:	2800      	cmp	r0, #0
   13f70:	d1ae      	bne.n	13ed0 <mbedtls_sha_update_internal+0xac>
   13f72:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   13f74:	a902      	add	r1, sp, #8
   13f76:	4628      	mov	r0, r5
   13f78:	f000 f9a2 	bl	142c0 <ProcessHashDrv>
   13f7c:	2800      	cmp	r0, #0
   13f7e:	d1a7      	bne.n	13ed0 <mbedtls_sha_update_internal+0xac>
   13f80:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   13f82:	6628      	str	r0, [r5, #96]	; 0x60
   13f84:	e770      	b.n	13e68 <mbedtls_sha_update_internal+0x44>
   13f86:	2001      	movs	r0, #1
   13f88:	4770      	bx	lr
   13f8a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   13f8e:	4639      	mov	r1, r7
   13f90:	4632      	mov	r2, r6
   13f92:	4418      	add	r0, r3
   13f94:	f7ff fa8a 	bl	134ac <CC_PalMemCopyPlat>
   13f98:	6e28      	ldr	r0, [r5, #96]	; 0x60
   13f9a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   13f9c:	4430      	add	r0, r6
   13f9e:	1ba4      	subs	r4, r4, r6
   13fa0:	4437      	add	r7, r6
   13fa2:	6628      	str	r0, [r5, #96]	; 0x60
   13fa4:	e77b      	b.n	13e9e <mbedtls_sha_update_internal+0x7a>
   13fa6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   13fa8:	3319      	adds	r3, #25
   13faa:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   13fae:	4622      	mov	r2, r4
   13fb0:	4639      	mov	r1, r7
   13fb2:	f7ff fa7b 	bl	134ac <CC_PalMemCopyPlat>
   13fb6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   13fb8:	4423      	add	r3, r4
   13fba:	662b      	str	r3, [r5, #96]	; 0x60
   13fbc:	e779      	b.n	13eb2 <mbedtls_sha_update_internal+0x8e>
   13fbe:	2a80      	cmp	r2, #128	; 0x80
   13fc0:	bf28      	it	cs
   13fc2:	2280      	movcs	r2, #128	; 0x80
   13fc4:	f105 0164 	add.w	r1, r5, #100	; 0x64
   13fc8:	a804      	add	r0, sp, #16
   13fca:	f7ff fa6f 	bl	134ac <CC_PalMemCopyPlat>
   13fce:	2300      	movs	r3, #0
   13fd0:	e9cd 3300 	strd	r3, r3, [sp]
   13fd4:	a804      	add	r0, sp, #16
   13fd6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   13fd8:	aa02      	add	r2, sp, #8
   13fda:	f000 f915 	bl	14208 <SetDataBuffersInfo>
   13fde:	2800      	cmp	r0, #0
   13fe0:	f47f af76 	bne.w	13ed0 <mbedtls_sha_update_internal+0xac>
   13fe4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   13fe6:	a902      	add	r1, sp, #8
   13fe8:	4628      	mov	r0, r5
   13fea:	f000 f969 	bl	142c0 <ProcessHashDrv>
   13fee:	2800      	cmp	r0, #0
   13ff0:	f47f af6e 	bne.w	13ed0 <mbedtls_sha_update_internal+0xac>
   13ff4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   13ff6:	6628      	str	r0, [r5, #96]	; 0x60
   13ff8:	e754      	b.n	13ea4 <mbedtls_sha_update_internal+0x80>
   13ffa:	a902      	add	r1, sp, #8
   13ffc:	4632      	mov	r2, r6
   13ffe:	4628      	mov	r0, r5
   14000:	f000 f95e 	bl	142c0 <ProcessHashDrv>
   14004:	2800      	cmp	r0, #0
   14006:	f47f af63 	bne.w	13ed0 <mbedtls_sha_update_internal+0xac>
   1400a:	4437      	add	r7, r6
   1400c:	1ba4      	subs	r4, r4, r6
   1400e:	e74e      	b.n	13eae <mbedtls_sha_update_internal+0x8a>

00014010 <cc_mbedtls_sha256>:
   14010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14012:	461c      	mov	r4, r3
   14014:	4605      	mov	r5, r0
   14016:	4811      	ldr	r0, [pc, #68]	; (1405c <cc_mbedtls_sha256+0x4c>)
   14018:	460e      	mov	r6, r1
   1401a:	4617      	mov	r7, r2
   1401c:	f7ff fe44 	bl	13ca8 <cc_mbedtls_sha256_init>
   14020:	4621      	mov	r1, r4
   14022:	480e      	ldr	r0, [pc, #56]	; (1405c <cc_mbedtls_sha256+0x4c>)
   14024:	f7ff fe5a 	bl	13cdc <cc_mbedtls_sha256_starts>
   14028:	4604      	mov	r4, r0
   1402a:	b120      	cbz	r0, 14036 <cc_mbedtls_sha256+0x26>
   1402c:	480b      	ldr	r0, [pc, #44]	; (1405c <cc_mbedtls_sha256+0x4c>)
   1402e:	f7ff fe4f 	bl	13cd0 <cc_mbedtls_sha256_free>
   14032:	4620      	mov	r0, r4
   14034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14036:	4809      	ldr	r0, [pc, #36]	; (1405c <cc_mbedtls_sha256+0x4c>)
   14038:	4632      	mov	r2, r6
   1403a:	4629      	mov	r1, r5
   1403c:	f7ff fe62 	bl	13d04 <cc_mbedtls_sha256_update>
   14040:	4604      	mov	r4, r0
   14042:	2800      	cmp	r0, #0
   14044:	d1f2      	bne.n	1402c <cc_mbedtls_sha256+0x1c>
   14046:	4639      	mov	r1, r7
   14048:	4804      	ldr	r0, [pc, #16]	; (1405c <cc_mbedtls_sha256+0x4c>)
   1404a:	f7ff fe85 	bl	13d58 <cc_mbedtls_sha256_finish>
   1404e:	4604      	mov	r4, r0
   14050:	4802      	ldr	r0, [pc, #8]	; (1405c <cc_mbedtls_sha256+0x4c>)
   14052:	f7ff fe3d 	bl	13cd0 <cc_mbedtls_sha256_free>
   14056:	4620      	mov	r0, r4
   14058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1405a:	bf00      	nop
   1405c:	20002cf0 	.word	0x20002cf0

00014060 <RNG_PLAT_SetUserRngParameters>:
   14060:	b530      	push	{r4, r5, lr}
   14062:	b083      	sub	sp, #12
   14064:	231c      	movs	r3, #28
   14066:	a901      	add	r1, sp, #4
   14068:	4605      	mov	r5, r0
   1406a:	9301      	str	r3, [sp, #4]
   1406c:	f000 f832 	bl	140d4 <CC_PalTrngParamGet>
   14070:	4604      	mov	r4, r0
   14072:	b938      	cbnz	r0, 14084 <RNG_PLAT_SetUserRngParameters+0x24>
   14074:	9b01      	ldr	r3, [sp, #4]
   14076:	2b1c      	cmp	r3, #28
   14078:	d007      	beq.n	1408a <RNG_PLAT_SetUserRngParameters+0x2a>
   1407a:	4c14      	ldr	r4, [pc, #80]	; (140cc <RNG_PLAT_SetUserRngParameters+0x6c>)
   1407c:	211c      	movs	r1, #28
   1407e:	4628      	mov	r0, r5
   14080:	f7ff fa18 	bl	134b4 <CC_PalMemSetZeroPlat>
   14084:	4620      	mov	r0, r4
   14086:	b003      	add	sp, #12
   14088:	bd30      	pop	{r4, r5, pc}
   1408a:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   1408e:	1e13      	subs	r3, r2, #0
   14090:	bf18      	it	ne
   14092:	2301      	movne	r3, #1
   14094:	3900      	subs	r1, #0
   14096:	682a      	ldr	r2, [r5, #0]
   14098:	bf18      	it	ne
   1409a:	2101      	movne	r1, #1
   1409c:	009b      	lsls	r3, r3, #2
   1409e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   140a2:	2a00      	cmp	r2, #0
   140a4:	bf18      	it	ne
   140a6:	f043 0301 	orrne.w	r3, r3, #1
   140aa:	68ea      	ldr	r2, [r5, #12]
   140ac:	2001      	movs	r0, #1
   140ae:	61e8      	str	r0, [r5, #28]
   140b0:	b92a      	cbnz	r2, 140be <RNG_PLAT_SetUserRngParameters+0x5e>
   140b2:	e9c5 3408 	strd	r3, r4, [r5, #32]
   140b6:	2b00      	cmp	r3, #0
   140b8:	d1e4      	bne.n	14084 <RNG_PLAT_SetUserRngParameters+0x24>
   140ba:	4c05      	ldr	r4, [pc, #20]	; (140d0 <RNG_PLAT_SetUserRngParameters+0x70>)
   140bc:	e7de      	b.n	1407c <RNG_PLAT_SetUserRngParameters+0x1c>
   140be:	f043 0308 	orr.w	r3, r3, #8
   140c2:	4620      	mov	r0, r4
   140c4:	e9c5 3408 	strd	r3, r4, [r5, #32]
   140c8:	b003      	add	sp, #12
   140ca:	bd30      	pop	{r4, r5, pc}
   140cc:	00f00c37 	.word	0x00f00c37
   140d0:	00f00c0e 	.word	0x00f00c0e

000140d4 <CC_PalTrngParamGet>:
   140d4:	b118      	cbz	r0, 140de <CC_PalTrngParamGet+0xa>
   140d6:	b111      	cbz	r1, 140de <CC_PalTrngParamGet+0xa>
   140d8:	680b      	ldr	r3, [r1, #0]
   140da:	2b1c      	cmp	r3, #28
   140dc:	d001      	beq.n	140e2 <CC_PalTrngParamGet+0xe>
   140de:	2001      	movs	r0, #1
   140e0:	4770      	bx	lr
   140e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   140e6:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   140ea:	3201      	adds	r2, #1
   140ec:	bf14      	ite	ne
   140ee:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   140f2:	f241 225c 	movweq	r2, #4700	; 0x125c
   140f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   140fa:	6002      	str	r2, [r0, #0]
   140fc:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   14100:	3201      	adds	r2, #1
   14102:	bf14      	ite	ne
   14104:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   14108:	f641 1264 	movweq	r2, #6500	; 0x1964
   1410c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14110:	6042      	str	r2, [r0, #4]
   14112:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   14116:	3201      	adds	r2, #1
   14118:	bf14      	ite	ne
   1411a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1411e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   14122:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14126:	6082      	str	r2, [r0, #8]
   14128:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1412c:	3201      	adds	r2, #1
   1412e:	bf14      	ite	ne
   14130:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   14134:	f241 3288 	movweq	r2, #5000	; 0x1388
   14138:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1413c:	60c2      	str	r2, [r0, #12]
   1413e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   14142:	3201      	adds	r2, #1
   14144:	bf14      	ite	ne
   14146:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1414a:	2290      	moveq	r2, #144	; 0x90
   1414c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14150:	6102      	str	r2, [r0, #16]
   14152:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14156:	3201      	adds	r2, #1
   14158:	bf14      	ite	ne
   1415a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1415e:	2251      	moveq	r2, #81	; 0x51
   14160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14164:	6142      	str	r2, [r0, #20]
   14166:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1416a:	3201      	adds	r2, #1
   1416c:	bf14      	ite	ne
   1416e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   14172:	f240 3337 	movweq	r3, #823	; 0x337
   14176:	6183      	str	r3, [r0, #24]
   14178:	2000      	movs	r0, #0
   1417a:	4770      	bx	lr

0001417c <LLF_RND_WaitRngInterrupt>:
   1417c:	b508      	push	{r3, lr}
   1417e:	4601      	mov	r1, r0
   14180:	f44f 6080 	mov.w	r0, #1024	; 0x400
   14184:	f7ff f91e 	bl	133c4 <CC_HalWaitInterruptRND>
   14188:	4b03      	ldr	r3, [pc, #12]	; (14198 <LLF_RND_WaitRngInterrupt+0x1c>)
   1418a:	2200      	movs	r2, #0
   1418c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   14190:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   14194:	bd08      	pop	{r3, pc}
   14196:	bf00      	nop
   14198:	5002b000 	.word	0x5002b000

0001419c <LLF_RND_GetRoscSampleCnt>:
   1419c:	3801      	subs	r0, #1
   1419e:	2807      	cmp	r0, #7
   141a0:	d805      	bhi.n	141ae <LLF_RND_GetRoscSampleCnt+0x12>
   141a2:	e8df f000 	tbb	[pc, r0]
   141a6:	0e10      	.short	0x0e10
   141a8:	04040a04 	.word	0x04040a04
   141ac:	0604      	.short	0x0604
   141ae:	4807      	ldr	r0, [pc, #28]	; (141cc <LLF_RND_GetRoscSampleCnt+0x30>)
   141b0:	4770      	bx	lr
   141b2:	68cb      	ldr	r3, [r1, #12]
   141b4:	624b      	str	r3, [r1, #36]	; 0x24
   141b6:	2000      	movs	r0, #0
   141b8:	4770      	bx	lr
   141ba:	688b      	ldr	r3, [r1, #8]
   141bc:	624b      	str	r3, [r1, #36]	; 0x24
   141be:	2000      	movs	r0, #0
   141c0:	4770      	bx	lr
   141c2:	684b      	ldr	r3, [r1, #4]
   141c4:	e7f6      	b.n	141b4 <LLF_RND_GetRoscSampleCnt+0x18>
   141c6:	680b      	ldr	r3, [r1, #0]
   141c8:	e7f4      	b.n	141b4 <LLF_RND_GetRoscSampleCnt+0x18>
   141ca:	bf00      	nop
   141cc:	00f10c31 	.word	0x00f10c31

000141d0 <LLF_RND_GetFastestRosc>:
   141d0:	680b      	ldr	r3, [r1, #0]
   141d2:	e002      	b.n	141da <LLF_RND_GetFastestRosc+0xa>
   141d4:	2b08      	cmp	r3, #8
   141d6:	600b      	str	r3, [r1, #0]
   141d8:	d806      	bhi.n	141e8 <LLF_RND_GetFastestRosc+0x18>
   141da:	6a02      	ldr	r2, [r0, #32]
   141dc:	4213      	tst	r3, r2
   141de:	ea4f 0343 	mov.w	r3, r3, lsl #1
   141e2:	d0f7      	beq.n	141d4 <LLF_RND_GetFastestRosc+0x4>
   141e4:	2000      	movs	r0, #0
   141e6:	4770      	bx	lr
   141e8:	4800      	ldr	r0, [pc, #0]	; (141ec <LLF_RND_GetFastestRosc+0x1c>)
   141ea:	4770      	bx	lr
   141ec:	00f10c31 	.word	0x00f10c31

000141f0 <LLF_RND_TurnOffTrng>:
   141f0:	4b04      	ldr	r3, [pc, #16]	; (14204 <LLF_RND_TurnOffTrng+0x14>)
   141f2:	2200      	movs	r2, #0
   141f4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   141f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   141fc:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   14200:	f7ff b8c6 	b.w	13390 <CC_HalClearInterruptBit>
   14204:	5002b000 	.word	0x5002b000

00014208 <SetDataBuffersInfo>:
   14208:	b5f0      	push	{r4, r5, r6, r7, lr}
   1420a:	b083      	sub	sp, #12
   1420c:	461d      	mov	r5, r3
   1420e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   14212:	f04f 0300 	mov.w	r3, #0
   14216:	f88d 3007 	strb.w	r3, [sp, #7]
   1421a:	d324      	bcc.n	14266 <SetDataBuffersInfo+0x5e>
   1421c:	468c      	mov	ip, r1
   1421e:	4484      	add	ip, r0
   14220:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   14224:	4604      	mov	r4, r0
   14226:	d81e      	bhi.n	14266 <SetDataBuffersInfo+0x5e>
   14228:	4617      	mov	r7, r2
   1422a:	f10d 0307 	add.w	r3, sp, #7
   1422e:	2201      	movs	r2, #1
   14230:	f000 fe64 	bl	14efc <CC_PalDataBufferAttrGet>
   14234:	4606      	mov	r6, r0
   14236:	b9b0      	cbnz	r0, 14266 <SetDataBuffersInfo+0x5e>
   14238:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1423a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1423e:	603c      	str	r4, [r7, #0]
   14240:	713b      	strb	r3, [r7, #4]
   14242:	b192      	cbz	r2, 1426a <SetDataBuffersInfo+0x62>
   14244:	b14d      	cbz	r5, 1425a <SetDataBuffersInfo+0x52>
   14246:	4602      	mov	r2, r0
   14248:	9908      	ldr	r1, [sp, #32]
   1424a:	f10d 0307 	add.w	r3, sp, #7
   1424e:	4628      	mov	r0, r5
   14250:	f000 fe54 	bl	14efc <CC_PalDataBufferAttrGet>
   14254:	b938      	cbnz	r0, 14266 <SetDataBuffersInfo+0x5e>
   14256:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1425a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1425c:	4630      	mov	r0, r6
   1425e:	6015      	str	r5, [r2, #0]
   14260:	7113      	strb	r3, [r2, #4]
   14262:	b003      	add	sp, #12
   14264:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14266:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   1426a:	4630      	mov	r0, r6
   1426c:	b003      	add	sp, #12
   1426e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014270 <InitHashDrv>:
   14270:	b1d8      	cbz	r0, 142aa <InitHashDrv+0x3a>
   14272:	b508      	push	{r3, lr}
   14274:	6803      	ldr	r3, [r0, #0]
   14276:	2b01      	cmp	r3, #1
   14278:	d004      	beq.n	14284 <InitHashDrv+0x14>
   1427a:	2b02      	cmp	r3, #2
   1427c:	d00f      	beq.n	1429e <InitHashDrv+0x2e>
   1427e:	b143      	cbz	r3, 14292 <InitHashDrv+0x22>
   14280:	480b      	ldr	r0, [pc, #44]	; (142b0 <InitHashDrv+0x40>)
   14282:	bd08      	pop	{r3, pc}
   14284:	490b      	ldr	r1, [pc, #44]	; (142b4 <InitHashDrv+0x44>)
   14286:	2220      	movs	r2, #32
   14288:	3008      	adds	r0, #8
   1428a:	f7ff f90f 	bl	134ac <CC_PalMemCopyPlat>
   1428e:	2000      	movs	r0, #0
   14290:	bd08      	pop	{r3, pc}
   14292:	4909      	ldr	r1, [pc, #36]	; (142b8 <InitHashDrv+0x48>)
   14294:	2214      	movs	r2, #20
   14296:	3008      	adds	r0, #8
   14298:	f7ff f908 	bl	134ac <CC_PalMemCopyPlat>
   1429c:	e7f7      	b.n	1428e <InitHashDrv+0x1e>
   1429e:	4907      	ldr	r1, [pc, #28]	; (142bc <InitHashDrv+0x4c>)
   142a0:	2220      	movs	r2, #32
   142a2:	3008      	adds	r0, #8
   142a4:	f7ff f902 	bl	134ac <CC_PalMemCopyPlat>
   142a8:	e7f1      	b.n	1428e <InitHashDrv+0x1e>
   142aa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   142ae:	4770      	bx	lr
   142b0:	00f30001 	.word	0x00f30001
   142b4:	00017990 	.word	0x00017990
   142b8:	000179d0 	.word	0x000179d0
   142bc:	000179b0 	.word	0x000179b0

000142c0 <ProcessHashDrv>:
   142c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   142c4:	2900      	cmp	r1, #0
   142c6:	f000 80f9 	beq.w	144bc <ProcessHashDrv+0x1fc>
   142ca:	4604      	mov	r4, r0
   142cc:	2800      	cmp	r0, #0
   142ce:	f000 80f9 	beq.w	144c4 <ProcessHashDrv+0x204>
   142d2:	6803      	ldr	r3, [r0, #0]
   142d4:	4690      	mov	r8, r2
   142d6:	460f      	mov	r7, r1
   142d8:	2b00      	cmp	r3, #0
   142da:	f000 80c3 	beq.w	14464 <ProcessHashDrv+0x1a4>
   142de:	3b01      	subs	r3, #1
   142e0:	2b01      	cmp	r3, #1
   142e2:	f200 80d7 	bhi.w	14494 <ProcessHashDrv+0x1d4>
   142e6:	4879      	ldr	r0, [pc, #484]	; (144cc <ProcessHashDrv+0x20c>)
   142e8:	f04f 31ff 	mov.w	r1, #4294967295
   142ec:	f04f 0902 	mov.w	r9, #2
   142f0:	f7ff f8f8 	bl	134e4 <CC_PalMutexLock>
   142f4:	2800      	cmp	r0, #0
   142f6:	f040 80bf 	bne.w	14478 <ProcessHashDrv+0x1b8>
   142fa:	2000      	movs	r0, #0
   142fc:	f7ff f922 	bl	13544 <CC_PalPowerSaveModeSelect>
   14300:	4606      	mov	r6, r0
   14302:	2800      	cmp	r0, #0
   14304:	f040 80c2 	bne.w	1448c <ProcessHashDrv+0x1cc>
   14308:	4a71      	ldr	r2, [pc, #452]	; (144d0 <ProcessHashDrv+0x210>)
   1430a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   1430e:	2b00      	cmp	r3, #0
   14310:	d1fb      	bne.n	1430a <ProcessHashDrv+0x4a>
   14312:	4d6f      	ldr	r5, [pc, #444]	; (144d0 <ProcessHashDrv+0x210>)
   14314:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   14318:	2b00      	cmp	r3, #0
   1431a:	d1fb      	bne.n	14314 <ProcessHashDrv+0x54>
   1431c:	f04f 30ff 	mov.w	r0, #4294967295
   14320:	f7ff f836 	bl	13390 <CC_HalClearInterruptBit>
   14324:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   14328:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1432c:	f7ff f83e 	bl	133ac <CC_HalMaskInterrupt>
   14330:	2301      	movs	r3, #1
   14332:	2207      	movs	r2, #7
   14334:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   14338:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   1433c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   14340:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14342:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   14346:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14348:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   1434c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   14350:	6823      	ldr	r3, [r4, #0]
   14352:	b15b      	cbz	r3, 1436c <ProcessHashDrv+0xac>
   14354:	3b01      	subs	r3, #1
   14356:	2b01      	cmp	r3, #1
   14358:	d818      	bhi.n	1438c <ProcessHashDrv+0xcc>
   1435a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1435c:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   14360:	6a23      	ldr	r3, [r4, #32]
   14362:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   14366:	69e3      	ldr	r3, [r4, #28]
   14368:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   1436c:	4b58      	ldr	r3, [pc, #352]	; (144d0 <ProcessHashDrv+0x210>)
   1436e:	69a2      	ldr	r2, [r4, #24]
   14370:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   14374:	6962      	ldr	r2, [r4, #20]
   14376:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   1437a:	6922      	ldr	r2, [r4, #16]
   1437c:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   14380:	68e2      	ldr	r2, [r4, #12]
   14382:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   14386:	68a2      	ldr	r2, [r4, #8]
   14388:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   1438c:	4a50      	ldr	r2, [pc, #320]	; (144d0 <ProcessHashDrv+0x210>)
   1438e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   14392:	2b00      	cmp	r3, #0
   14394:	d1fb      	bne.n	1438e <ProcessHashDrv+0xce>
   14396:	f1b8 0f00 	cmp.w	r8, #0
   1439a:	d05f      	beq.n	1445c <ProcessHashDrv+0x19c>
   1439c:	6863      	ldr	r3, [r4, #4]
   1439e:	2b01      	cmp	r3, #1
   143a0:	bf08      	it	eq
   143a2:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   143a6:	4b4a      	ldr	r3, [pc, #296]	; (144d0 <ProcessHashDrv+0x210>)
   143a8:	683a      	ldr	r2, [r7, #0]
   143aa:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   143ae:	2040      	movs	r0, #64	; 0x40
   143b0:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   143b4:	f7ff f800 	bl	133b8 <CC_HalWaitInterrupt>
   143b8:	4606      	mov	r6, r0
   143ba:	4a45      	ldr	r2, [pc, #276]	; (144d0 <ProcessHashDrv+0x210>)
   143bc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   143c0:	2b00      	cmp	r3, #0
   143c2:	d1fb      	bne.n	143bc <ProcessHashDrv+0xfc>
   143c4:	4a42      	ldr	r2, [pc, #264]	; (144d0 <ProcessHashDrv+0x210>)
   143c6:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   143ca:	2b00      	cmp	r3, #0
   143cc:	d1fb      	bne.n	143c6 <ProcessHashDrv+0x106>
   143ce:	6823      	ldr	r3, [r4, #0]
   143d0:	b15b      	cbz	r3, 143ea <ProcessHashDrv+0x12a>
   143d2:	3b01      	subs	r3, #1
   143d4:	2b01      	cmp	r3, #1
   143d6:	d818      	bhi.n	1440a <ProcessHashDrv+0x14a>
   143d8:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   143dc:	6263      	str	r3, [r4, #36]	; 0x24
   143de:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   143e2:	6223      	str	r3, [r4, #32]
   143e4:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   143e8:	61e3      	str	r3, [r4, #28]
   143ea:	4b39      	ldr	r3, [pc, #228]	; (144d0 <ProcessHashDrv+0x210>)
   143ec:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   143f0:	61a2      	str	r2, [r4, #24]
   143f2:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   143f6:	6162      	str	r2, [r4, #20]
   143f8:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   143fc:	6122      	str	r2, [r4, #16]
   143fe:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   14402:	60e2      	str	r2, [r4, #12]
   14404:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   14408:	60a3      	str	r3, [r4, #8]
   1440a:	4a31      	ldr	r2, [pc, #196]	; (144d0 <ProcessHashDrv+0x210>)
   1440c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   14410:	64a1      	str	r1, [r4, #72]	; 0x48
   14412:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   14416:	64e1      	str	r1, [r4, #76]	; 0x4c
   14418:	2300      	movs	r3, #0
   1441a:	2101      	movs	r1, #1
   1441c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   14420:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   14424:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   14428:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1442c:	2b00      	cmp	r3, #0
   1442e:	d1fb      	bne.n	14428 <ProcessHashDrv+0x168>
   14430:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   14434:	2e00      	cmp	r6, #0
   14436:	d13b      	bne.n	144b0 <ProcessHashDrv+0x1f0>
   14438:	4b25      	ldr	r3, [pc, #148]	; (144d0 <ProcessHashDrv+0x210>)
   1443a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   1443e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   14442:	f7fe ffb3 	bl	133ac <CC_HalMaskInterrupt>
   14446:	2001      	movs	r0, #1
   14448:	f7ff f87c 	bl	13544 <CC_PalPowerSaveModeSelect>
   1444c:	bb60      	cbnz	r0, 144a8 <ProcessHashDrv+0x1e8>
   1444e:	481f      	ldr	r0, [pc, #124]	; (144cc <ProcessHashDrv+0x20c>)
   14450:	f7ff f850 	bl	134f4 <CC_PalMutexUnlock>
   14454:	bb10      	cbnz	r0, 1449c <ProcessHashDrv+0x1dc>
   14456:	4630      	mov	r0, r6
   14458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1445c:	2304      	movs	r3, #4
   1445e:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   14462:	e7aa      	b.n	143ba <ProcessHashDrv+0xfa>
   14464:	4819      	ldr	r0, [pc, #100]	; (144cc <ProcessHashDrv+0x20c>)
   14466:	f04f 31ff 	mov.w	r1, #4294967295
   1446a:	f04f 0901 	mov.w	r9, #1
   1446e:	f7ff f839 	bl	134e4 <CC_PalMutexLock>
   14472:	2800      	cmp	r0, #0
   14474:	f43f af41 	beq.w	142fa <ProcessHashDrv+0x3a>
   14478:	4816      	ldr	r0, [pc, #88]	; (144d4 <ProcessHashDrv+0x214>)
   1447a:	f7fe f927 	bl	126cc <CC_PalAbort>
   1447e:	2000      	movs	r0, #0
   14480:	f7ff f860 	bl	13544 <CC_PalPowerSaveModeSelect>
   14484:	4606      	mov	r6, r0
   14486:	2800      	cmp	r0, #0
   14488:	f43f af3e 	beq.w	14308 <ProcessHashDrv+0x48>
   1448c:	4812      	ldr	r0, [pc, #72]	; (144d8 <ProcessHashDrv+0x218>)
   1448e:	f7fe f91d 	bl	126cc <CC_PalAbort>
   14492:	e739      	b.n	14308 <ProcessHashDrv+0x48>
   14494:	4e11      	ldr	r6, [pc, #68]	; (144dc <ProcessHashDrv+0x21c>)
   14496:	4630      	mov	r0, r6
   14498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1449c:	4810      	ldr	r0, [pc, #64]	; (144e0 <ProcessHashDrv+0x220>)
   1449e:	f7fe f915 	bl	126cc <CC_PalAbort>
   144a2:	4630      	mov	r0, r6
   144a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   144a8:	480e      	ldr	r0, [pc, #56]	; (144e4 <ProcessHashDrv+0x224>)
   144aa:	f7fe f90f 	bl	126cc <CC_PalAbort>
   144ae:	e7ce      	b.n	1444e <ProcessHashDrv+0x18e>
   144b0:	2110      	movs	r1, #16
   144b2:	f104 0008 	add.w	r0, r4, #8
   144b6:	f7fe fffd 	bl	134b4 <CC_PalMemSetZeroPlat>
   144ba:	e7bd      	b.n	14438 <ProcessHashDrv+0x178>
   144bc:	4e0a      	ldr	r6, [pc, #40]	; (144e8 <ProcessHashDrv+0x228>)
   144be:	4630      	mov	r0, r6
   144c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   144c4:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   144c8:	e7c5      	b.n	14456 <ProcessHashDrv+0x196>
   144ca:	bf00      	nop
   144cc:	20000600 	.word	0x20000600
   144d0:	5002b000 	.word	0x5002b000
   144d4:	000178c4 	.word	0x000178c4
   144d8:	000178dc 	.word	0x000178dc
   144dc:	00f30001 	.word	0x00f30001
   144e0:	0001791c 	.word	0x0001791c
   144e4:	000178fc 	.word	0x000178fc
   144e8:	00f30003 	.word	0x00f30003

000144ec <FinishHashDrv>:
   144ec:	b398      	cbz	r0, 14556 <FinishHashDrv+0x6a>
   144ee:	b470      	push	{r4, r5, r6}
   144f0:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   144f4:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   144f8:	ba26      	rev	r6, r4
   144fa:	ba0d      	rev	r5, r1
   144fc:	ba14      	rev	r4, r2
   144fe:	ba19      	rev	r1, r3
   14500:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   14504:	ba12      	rev	r2, r2
   14506:	e9c0 4104 	strd	r4, r1, [r0, #16]
   1450a:	6182      	str	r2, [r0, #24]
   1450c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   14510:	e9c0 6502 	strd	r6, r5, [r0, #8]
   14514:	ba1b      	rev	r3, r3
   14516:	ba25      	rev	r5, r4
   14518:	e9c0 3507 	strd	r3, r5, [r0, #28]
   1451c:	ba14      	rev	r4, r2
   1451e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   14522:	6a81      	ldr	r1, [r0, #40]	; 0x28
   14524:	ba12      	rev	r2, r2
   14526:	ba09      	rev	r1, r1
   14528:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   1452c:	62c2      	str	r2, [r0, #44]	; 0x2c
   1452e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   14532:	ba1b      	rev	r3, r3
   14534:	ba25      	rev	r5, r4
   14536:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   1453a:	ba14      	rev	r4, r2
   1453c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   14540:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   14542:	ba12      	rev	r2, r2
   14544:	ba09      	rev	r1, r1
   14546:	ba1b      	rev	r3, r3
   14548:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1454c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   14550:	2000      	movs	r0, #0
   14552:	bc70      	pop	{r4, r5, r6}
   14554:	4770      	bx	lr
   14556:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1455a:	4770      	bx	lr

0001455c <LoadAesKey>:
   1455c:	2800      	cmp	r0, #0
   1455e:	d047      	beq.n	145f0 <LoadAesKey+0x94>
   14560:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   14564:	2b00      	cmp	r3, #0
   14566:	d034      	beq.n	145d2 <LoadAesKey+0x76>
   14568:	2b03      	cmp	r3, #3
   1456a:	b510      	push	{r4, lr}
   1456c:	d013      	beq.n	14596 <LoadAesKey+0x3a>
   1456e:	4822      	ldr	r0, [pc, #136]	; (145f8 <LoadAesKey+0x9c>)
   14570:	4c22      	ldr	r4, [pc, #136]	; (145fc <LoadAesKey+0xa0>)
   14572:	6822      	ldr	r2, [r4, #0]
   14574:	4b22      	ldr	r3, [pc, #136]	; (14600 <LoadAesKey+0xa4>)
   14576:	6812      	ldr	r2, [r2, #0]
   14578:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1457c:	6822      	ldr	r2, [r4, #0]
   1457e:	6852      	ldr	r2, [r2, #4]
   14580:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   14584:	6822      	ldr	r2, [r4, #0]
   14586:	6892      	ldr	r2, [r2, #8]
   14588:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1458c:	6822      	ldr	r2, [r4, #0]
   1458e:	68d2      	ldr	r2, [r2, #12]
   14590:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   14594:	bd10      	pop	{r4, pc}
   14596:	6b01      	ldr	r1, [r0, #48]	; 0x30
   14598:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1459a:	4c18      	ldr	r4, [pc, #96]	; (145fc <LoadAesKey+0xa0>)
   1459c:	f000 fba8 	bl	14cf0 <kmu_validate_kdr_slot_and_size>
   145a0:	2800      	cmp	r0, #0
   145a2:	d1e6      	bne.n	14572 <LoadAesKey+0x16>
   145a4:	6822      	ldr	r2, [r4, #0]
   145a6:	4b16      	ldr	r3, [pc, #88]	; (14600 <LoadAesKey+0xa4>)
   145a8:	6812      	ldr	r2, [r2, #0]
   145aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   145ae:	6822      	ldr	r2, [r4, #0]
   145b0:	6852      	ldr	r2, [r2, #4]
   145b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   145b6:	6822      	ldr	r2, [r4, #0]
   145b8:	6892      	ldr	r2, [r2, #8]
   145ba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   145be:	6822      	ldr	r2, [r4, #0]
   145c0:	68d2      	ldr	r2, [r2, #12]
   145c2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   145c6:	f000 fba1 	bl	14d0c <kmu_use_kdr_key>
   145ca:	2800      	cmp	r0, #0
   145cc:	d1d1      	bne.n	14572 <LoadAesKey+0x16>
   145ce:	2000      	movs	r0, #0
   145d0:	bd10      	pop	{r4, pc}
   145d2:	4b0b      	ldr	r3, [pc, #44]	; (14600 <LoadAesKey+0xa4>)
   145d4:	6902      	ldr	r2, [r0, #16]
   145d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   145da:	6942      	ldr	r2, [r0, #20]
   145dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   145e0:	6982      	ldr	r2, [r0, #24]
   145e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   145e6:	69c2      	ldr	r2, [r0, #28]
   145e8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   145ec:	2000      	movs	r0, #0
   145ee:	4770      	bx	lr
   145f0:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   145f4:	4770      	bx	lr
   145f6:	bf00      	nop
   145f8:	00f10009 	.word	0x00f10009
   145fc:	200005ec 	.word	0x200005ec
   14600:	5002b000 	.word	0x5002b000

00014604 <InitAes.part.0>:
   14604:	4a37      	ldr	r2, [pc, #220]	; (146e4 <InitAes.part.0+0xe0>)
   14606:	b538      	push	{r3, r4, r5, lr}
   14608:	4604      	mov	r4, r0
   1460a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1460e:	2b00      	cmp	r3, #0
   14610:	d1fb      	bne.n	1460a <InitAes.part.0+0x6>
   14612:	4a34      	ldr	r2, [pc, #208]	; (146e4 <InitAes.part.0+0xe0>)
   14614:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   14618:	2b00      	cmp	r3, #0
   1461a:	d1fb      	bne.n	14614 <InitAes.part.0+0x10>
   1461c:	4a31      	ldr	r2, [pc, #196]	; (146e4 <InitAes.part.0+0xe0>)
   1461e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   14622:	2b00      	cmp	r3, #0
   14624:	d1fb      	bne.n	1461e <InitAes.part.0+0x1a>
   14626:	4a2f      	ldr	r2, [pc, #188]	; (146e4 <InitAes.part.0+0xe0>)
   14628:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   1462c:	2b00      	cmp	r3, #0
   1462e:	d1fb      	bne.n	14628 <InitAes.part.0+0x24>
   14630:	4a2c      	ldr	r2, [pc, #176]	; (146e4 <InitAes.part.0+0xe0>)
   14632:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   14636:	2b00      	cmp	r3, #0
   14638:	d1fb      	bne.n	14632 <InitAes.part.0+0x2e>
   1463a:	4d2a      	ldr	r5, [pc, #168]	; (146e4 <InitAes.part.0+0xe0>)
   1463c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   14640:	2b00      	cmp	r3, #0
   14642:	d1fb      	bne.n	1463c <InitAes.part.0+0x38>
   14644:	f04f 30ff 	mov.w	r0, #4294967295
   14648:	f7fe fea2 	bl	13390 <CC_HalClearInterruptBit>
   1464c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1464e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   14652:	f023 0304 	bic.w	r3, r3, #4
   14656:	2b03      	cmp	r3, #3
   14658:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1465a:	d039      	beq.n	146d0 <InitAes.part.0+0xcc>
   1465c:	2b01      	cmp	r3, #1
   1465e:	bf0c      	ite	eq
   14660:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   14664:	f020 0020 	bicne.w	r0, r0, #32
   14668:	f7fe fea0 	bl	133ac <CC_HalMaskInterrupt>
   1466c:	4a1d      	ldr	r2, [pc, #116]	; (146e4 <InitAes.part.0+0xe0>)
   1466e:	2301      	movs	r3, #1
   14670:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   14674:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   14678:	2b00      	cmp	r3, #0
   1467a:	d1fb      	bne.n	14674 <InitAes.part.0+0x70>
   1467c:	4a19      	ldr	r2, [pc, #100]	; (146e4 <InitAes.part.0+0xe0>)
   1467e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   14682:	2b00      	cmp	r3, #0
   14684:	d1fb      	bne.n	1467e <InitAes.part.0+0x7a>
   14686:	4917      	ldr	r1, [pc, #92]	; (146e4 <InitAes.part.0+0xe0>)
   14688:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   1468c:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   14690:	2b00      	cmp	r3, #0
   14692:	d1fb      	bne.n	1468c <InitAes.part.0+0x88>
   14694:	4a13      	ldr	r2, [pc, #76]	; (146e4 <InitAes.part.0+0xe0>)
   14696:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   1469a:	2b00      	cmp	r3, #0
   1469c:	d1fb      	bne.n	14696 <InitAes.part.0+0x92>
   1469e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   146a0:	f022 0104 	bic.w	r1, r2, #4
   146a4:	2903      	cmp	r1, #3
   146a6:	bf18      	it	ne
   146a8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   146aa:	490e      	ldr	r1, [pc, #56]	; (146e4 <InitAes.part.0+0xe0>)
   146ac:	ea4f 0282 	mov.w	r2, r2, lsl #2
   146b0:	bf18      	it	ne
   146b2:	f003 0301 	andne.w	r3, r3, #1
   146b6:	f002 021c 	and.w	r2, r2, #28
   146ba:	431a      	orrs	r2, r3
   146bc:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   146c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   146c2:	2b07      	cmp	r3, #7
   146c4:	bf04      	itt	eq
   146c6:	2301      	moveq	r3, #1
   146c8:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   146cc:	2000      	movs	r0, #0
   146ce:	bd38      	pop	{r3, r4, r5, pc}
   146d0:	2b01      	cmp	r3, #1
   146d2:	bf0c      	ite	eq
   146d4:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   146d8:	f020 0010 	bicne.w	r0, r0, #16
   146dc:	f7fe fe66 	bl	133ac <CC_HalMaskInterrupt>
   146e0:	e7c4      	b.n	1466c <InitAes.part.0+0x68>
   146e2:	bf00      	nop
   146e4:	5002b000 	.word	0x5002b000

000146e8 <write_invalid_key>:
   146e8:	4a09      	ldr	r2, [pc, #36]	; (14710 <write_invalid_key+0x28>)
   146ea:	4b0a      	ldr	r3, [pc, #40]	; (14714 <write_invalid_key+0x2c>)
   146ec:	6811      	ldr	r1, [r2, #0]
   146ee:	6809      	ldr	r1, [r1, #0]
   146f0:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   146f4:	6811      	ldr	r1, [r2, #0]
   146f6:	6849      	ldr	r1, [r1, #4]
   146f8:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   146fc:	6811      	ldr	r1, [r2, #0]
   146fe:	6889      	ldr	r1, [r1, #8]
   14700:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   14704:	6812      	ldr	r2, [r2, #0]
   14706:	68d2      	ldr	r2, [r2, #12]
   14708:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1470c:	4770      	bx	lr
   1470e:	bf00      	nop
   14710:	200005ec 	.word	0x200005ec
   14714:	5002b000 	.word	0x5002b000

00014718 <ProcessAesDrv>:
   14718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1471c:	b085      	sub	sp, #20
   1471e:	2900      	cmp	r1, #0
   14720:	f000 80ec 	beq.w	148fc <ProcessAesDrv+0x1e4>
   14724:	4690      	mov	r8, r2
   14726:	2a00      	cmp	r2, #0
   14728:	f000 80e8 	beq.w	148fc <ProcessAesDrv+0x1e4>
   1472c:	4605      	mov	r5, r0
   1472e:	2800      	cmp	r0, #0
   14730:	f000 8129 	beq.w	14986 <ProcessAesDrv+0x26e>
   14734:	4699      	mov	r9, r3
   14736:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14738:	460e      	mov	r6, r1
   1473a:	2b00      	cmp	r3, #0
   1473c:	d152      	bne.n	147e4 <ProcessAesDrv+0xcc>
   1473e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   14742:	d254      	bcs.n	147ee <ProcessAesDrv+0xd6>
   14744:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   14748:	2b04      	cmp	r3, #4
   1474a:	f000 80ff 	beq.w	1494c <ProcessAesDrv+0x234>
   1474e:	2700      	movs	r7, #0
   14750:	48ad      	ldr	r0, [pc, #692]	; (14a08 <ProcessAesDrv+0x2f0>)
   14752:	f04f 31ff 	mov.w	r1, #4294967295
   14756:	f7fe fec5 	bl	134e4 <CC_PalMutexLock>
   1475a:	2800      	cmp	r0, #0
   1475c:	f040 80d5 	bne.w	1490a <ProcessAesDrv+0x1f2>
   14760:	2000      	movs	r0, #0
   14762:	f7fe feef 	bl	13544 <CC_PalPowerSaveModeSelect>
   14766:	2800      	cmp	r0, #0
   14768:	f040 80d8 	bne.w	1491c <ProcessAesDrv+0x204>
   1476c:	48a7      	ldr	r0, [pc, #668]	; (14a0c <ProcessAesDrv+0x2f4>)
   1476e:	2301      	movs	r3, #1
   14770:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   14774:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   14778:	2c00      	cmp	r4, #0
   1477a:	d1fb      	bne.n	14774 <ProcessAesDrv+0x5c>
   1477c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1477e:	2b03      	cmp	r3, #3
   14780:	dc3a      	bgt.n	147f8 <ProcessAesDrv+0xe0>
   14782:	2b00      	cmp	r3, #0
   14784:	da3b      	bge.n	147fe <ProcessAesDrv+0xe6>
   14786:	4ca2      	ldr	r4, [pc, #648]	; (14a10 <ProcessAesDrv+0x2f8>)
   14788:	4aa0      	ldr	r2, [pc, #640]	; (14a0c <ProcessAesDrv+0x2f4>)
   1478a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   1478e:	2b00      	cmp	r3, #0
   14790:	d1fb      	bne.n	1478a <ProcessAesDrv+0x72>
   14792:	2f00      	cmp	r7, #0
   14794:	f040 80d1 	bne.w	1493a <ProcessAesDrv+0x222>
   14798:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1479a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1479c:	f023 0304 	bic.w	r3, r3, #4
   147a0:	2b03      	cmp	r3, #3
   147a2:	4b9a      	ldr	r3, [pc, #616]	; (14a0c <ProcessAesDrv+0x2f4>)
   147a4:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   147a8:	f000 809f 	beq.w	148ea <ProcessAesDrv+0x1d2>
   147ac:	2a01      	cmp	r2, #1
   147ae:	bf0c      	ite	eq
   147b0:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   147b4:	f040 0020 	orrne.w	r0, r0, #32
   147b8:	f7fe fdf8 	bl	133ac <CC_HalMaskInterrupt>
   147bc:	4b93      	ldr	r3, [pc, #588]	; (14a0c <ProcessAesDrv+0x2f4>)
   147be:	2200      	movs	r2, #0
   147c0:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   147c4:	2001      	movs	r0, #1
   147c6:	f7fe febd 	bl	13544 <CC_PalPowerSaveModeSelect>
   147ca:	2800      	cmp	r0, #0
   147cc:	f040 80b1 	bne.w	14932 <ProcessAesDrv+0x21a>
   147d0:	488d      	ldr	r0, [pc, #564]	; (14a08 <ProcessAesDrv+0x2f0>)
   147d2:	f7fe fe8f 	bl	134f4 <CC_PalMutexUnlock>
   147d6:	2800      	cmp	r0, #0
   147d8:	f040 80a4 	bne.w	14924 <ProcessAesDrv+0x20c>
   147dc:	4620      	mov	r0, r4
   147de:	b005      	add	sp, #20
   147e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147e4:	2b01      	cmp	r3, #1
   147e6:	d1ad      	bne.n	14744 <ProcessAesDrv+0x2c>
   147e8:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   147ec:	d3aa      	bcc.n	14744 <ProcessAesDrv+0x2c>
   147ee:	4c89      	ldr	r4, [pc, #548]	; (14a14 <ProcessAesDrv+0x2fc>)
   147f0:	4620      	mov	r0, r4
   147f2:	b005      	add	sp, #20
   147f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f8:	3b06      	subs	r3, #6
   147fa:	2b01      	cmp	r3, #1
   147fc:	d8c3      	bhi.n	14786 <ProcessAesDrv+0x6e>
   147fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14800:	2b01      	cmp	r3, #1
   14802:	f200 80be 	bhi.w	14982 <ProcessAesDrv+0x26a>
   14806:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   14808:	2b01      	cmp	r3, #1
   1480a:	d87c      	bhi.n	14906 <ProcessAesDrv+0x1ee>
   1480c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1480e:	2b01      	cmp	r3, #1
   14810:	f200 80e8 	bhi.w	149e4 <ProcessAesDrv+0x2cc>
   14814:	4628      	mov	r0, r5
   14816:	f7ff fef5 	bl	14604 <InitAes.part.0>
   1481a:	4604      	mov	r4, r0
   1481c:	2800      	cmp	r0, #0
   1481e:	d1b3      	bne.n	14788 <ProcessAesDrv+0x70>
   14820:	4628      	mov	r0, r5
   14822:	f7ff fe9b 	bl	1455c <LoadAesKey>
   14826:	4604      	mov	r4, r0
   14828:	2800      	cmp	r0, #0
   1482a:	d1ad      	bne.n	14788 <ProcessAesDrv+0x70>
   1482c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1482e:	2b07      	cmp	r3, #7
   14830:	d8a9      	bhi.n	14786 <ProcessAesDrv+0x6e>
   14832:	2201      	movs	r2, #1
   14834:	409a      	lsls	r2, r3
   14836:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   1483a:	f040 80d5 	bne.w	149e8 <ProcessAesDrv+0x2d0>
   1483e:	f012 0f44 	tst.w	r2, #68	; 0x44
   14842:	f040 80ba 	bne.w	149ba <ProcessAesDrv+0x2a2>
   14846:	07d2      	lsls	r2, r2, #31
   14848:	d59d      	bpl.n	14786 <ProcessAesDrv+0x6e>
   1484a:	f023 0304 	bic.w	r3, r3, #4
   1484e:	2b03      	cmp	r3, #3
   14850:	6832      	ldr	r2, [r6, #0]
   14852:	d00d      	beq.n	14870 <ProcessAesDrv+0x158>
   14854:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   14856:	f8d8 1000 	ldr.w	r1, [r8]
   1485a:	2b01      	cmp	r3, #1
   1485c:	4b6b      	ldr	r3, [pc, #428]	; (14a0c <ProcessAesDrv+0x2f4>)
   1485e:	bf0b      	itete	eq
   14860:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   14864:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   14868:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   1486c:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   14870:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   14872:	2b01      	cmp	r3, #1
   14874:	4b65      	ldr	r3, [pc, #404]	; (14a0c <ProcessAesDrv+0x2f4>)
   14876:	bf0b      	itete	eq
   14878:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   1487c:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   14880:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   14884:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   14888:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1488a:	f023 0304 	bic.w	r3, r3, #4
   1488e:	2b03      	cmp	r3, #3
   14890:	f000 80a2 	beq.w	149d8 <ProcessAesDrv+0x2c0>
   14894:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   14896:	2b01      	cmp	r3, #1
   14898:	bf14      	ite	ne
   1489a:	2020      	movne	r0, #32
   1489c:	2080      	moveq	r0, #128	; 0x80
   1489e:	f7fe fd8b 	bl	133b8 <CC_HalWaitInterrupt>
   148a2:	4604      	mov	r4, r0
   148a4:	2800      	cmp	r0, #0
   148a6:	f47f af6f 	bne.w	14788 <ProcessAesDrv+0x70>
   148aa:	4b58      	ldr	r3, [pc, #352]	; (14a0c <ProcessAesDrv+0x2f4>)
   148ac:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   148b0:	2c00      	cmp	r4, #0
   148b2:	d1fb      	bne.n	148ac <ProcessAesDrv+0x194>
   148b4:	6b69      	ldr	r1, [r5, #52]	; 0x34
   148b6:	2907      	cmp	r1, #7
   148b8:	d814      	bhi.n	148e4 <ProcessAesDrv+0x1cc>
   148ba:	2201      	movs	r2, #1
   148bc:	408a      	lsls	r2, r1
   148be:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   148c2:	f040 80bb 	bne.w	14a3c <ProcessAesDrv+0x324>
   148c6:	f012 0f44 	tst.w	r2, #68	; 0x44
   148ca:	d00b      	beq.n	148e4 <ProcessAesDrv+0x1cc>
   148cc:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   148d0:	602a      	str	r2, [r5, #0]
   148d2:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   148d6:	606a      	str	r2, [r5, #4]
   148d8:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   148dc:	60aa      	str	r2, [r5, #8]
   148de:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   148e2:	60eb      	str	r3, [r5, #12]
   148e4:	2301      	movs	r3, #1
   148e6:	65ab      	str	r3, [r5, #88]	; 0x58
   148e8:	e74e      	b.n	14788 <ProcessAesDrv+0x70>
   148ea:	2a01      	cmp	r2, #1
   148ec:	bf0c      	ite	eq
   148ee:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   148f2:	f040 0010 	orrne.w	r0, r0, #16
   148f6:	f7fe fd59 	bl	133ac <CC_HalMaskInterrupt>
   148fa:	e75f      	b.n	147bc <ProcessAesDrv+0xa4>
   148fc:	4c46      	ldr	r4, [pc, #280]	; (14a18 <ProcessAesDrv+0x300>)
   148fe:	4620      	mov	r0, r4
   14900:	b005      	add	sp, #20
   14902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14906:	4c45      	ldr	r4, [pc, #276]	; (14a1c <ProcessAesDrv+0x304>)
   14908:	e73e      	b.n	14788 <ProcessAesDrv+0x70>
   1490a:	4845      	ldr	r0, [pc, #276]	; (14a20 <ProcessAesDrv+0x308>)
   1490c:	f7fd fede 	bl	126cc <CC_PalAbort>
   14910:	2000      	movs	r0, #0
   14912:	f7fe fe17 	bl	13544 <CC_PalPowerSaveModeSelect>
   14916:	2800      	cmp	r0, #0
   14918:	f43f af28 	beq.w	1476c <ProcessAesDrv+0x54>
   1491c:	4841      	ldr	r0, [pc, #260]	; (14a24 <ProcessAesDrv+0x30c>)
   1491e:	f7fd fed5 	bl	126cc <CC_PalAbort>
   14922:	e723      	b.n	1476c <ProcessAesDrv+0x54>
   14924:	4840      	ldr	r0, [pc, #256]	; (14a28 <ProcessAesDrv+0x310>)
   14926:	f7fd fed1 	bl	126cc <CC_PalAbort>
   1492a:	4620      	mov	r0, r4
   1492c:	b005      	add	sp, #20
   1492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14932:	483e      	ldr	r0, [pc, #248]	; (14a2c <ProcessAesDrv+0x314>)
   14934:	f7fd feca 	bl	126cc <CC_PalAbort>
   14938:	e74a      	b.n	147d0 <ProcessAesDrv+0xb8>
   1493a:	2304      	movs	r3, #4
   1493c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   14940:	2120      	movs	r1, #32
   14942:	f105 0010 	add.w	r0, r5, #16
   14946:	f7fe fdb5 	bl	134b4 <CC_PalMemSetZeroPlat>
   1494a:	e725      	b.n	14798 <ProcessAesDrv+0x80>
   1494c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1494e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   14950:	f000 f9c0 	bl	14cd4 <kmu_validate_slot_and_size>
   14954:	b998      	cbnz	r0, 1497e <ProcessAesDrv+0x266>
   14956:	4f36      	ldr	r7, [pc, #216]	; (14a30 <ProcessAesDrv+0x318>)
   14958:	4c2c      	ldr	r4, [pc, #176]	; (14a0c <ProcessAesDrv+0x2f4>)
   1495a:	683b      	ldr	r3, [r7, #0]
   1495c:	681b      	ldr	r3, [r3, #0]
   1495e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   14962:	683b      	ldr	r3, [r7, #0]
   14964:	685b      	ldr	r3, [r3, #4]
   14966:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   1496a:	683b      	ldr	r3, [r7, #0]
   1496c:	689b      	ldr	r3, [r3, #8]
   1496e:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   14972:	683b      	ldr	r3, [r7, #0]
   14974:	68db      	ldr	r3, [r3, #12]
   14976:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   1497a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1497c:	b131      	cbz	r1, 1498c <ProcessAesDrv+0x274>
   1497e:	2701      	movs	r7, #1
   14980:	e6e6      	b.n	14750 <ProcessAesDrv+0x38>
   14982:	4c2c      	ldr	r4, [pc, #176]	; (14a34 <ProcessAesDrv+0x31c>)
   14984:	e700      	b.n	14788 <ProcessAesDrv+0x70>
   14986:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   1498a:	e727      	b.n	147dc <ProcessAesDrv+0xc4>
   1498c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1498e:	9301      	str	r3, [sp, #4]
   14990:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   14992:	9300      	str	r3, [sp, #0]
   14994:	f105 0a10 	add.w	sl, r5, #16
   14998:	f04f 0b10 	mov.w	fp, #16
   1499c:	f8cd a008 	str.w	sl, [sp, #8]
   149a0:	f8cd b00c 	str.w	fp, [sp, #12]
   149a4:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   149a8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   149aa:	f000 f9b9 	bl	14d20 <kmu_derive_cmac>
   149ae:	2800      	cmp	r0, #0
   149b0:	d151      	bne.n	14a56 <ProcessAesDrv+0x33e>
   149b2:	2300      	movs	r3, #0
   149b4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   149b8:	e7e1      	b.n	1497e <ProcessAesDrv+0x266>
   149ba:	4b14      	ldr	r3, [pc, #80]	; (14a0c <ProcessAesDrv+0x2f4>)
   149bc:	682a      	ldr	r2, [r5, #0]
   149be:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   149c2:	686a      	ldr	r2, [r5, #4]
   149c4:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   149c8:	68aa      	ldr	r2, [r5, #8]
   149ca:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   149ce:	68ea      	ldr	r2, [r5, #12]
   149d0:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   149d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   149d6:	e738      	b.n	1484a <ProcessAesDrv+0x132>
   149d8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   149da:	2b01      	cmp	r3, #1
   149dc:	bf14      	ite	ne
   149de:	2010      	movne	r0, #16
   149e0:	2040      	moveq	r0, #64	; 0x40
   149e2:	e75c      	b.n	1489e <ProcessAesDrv+0x186>
   149e4:	4c14      	ldr	r4, [pc, #80]	; (14a38 <ProcessAesDrv+0x320>)
   149e6:	e6cf      	b.n	14788 <ProcessAesDrv+0x70>
   149e8:	4b08      	ldr	r3, [pc, #32]	; (14a0c <ProcessAesDrv+0x2f4>)
   149ea:	682a      	ldr	r2, [r5, #0]
   149ec:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   149f0:	686a      	ldr	r2, [r5, #4]
   149f2:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   149f6:	68aa      	ldr	r2, [r5, #8]
   149f8:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   149fc:	68ea      	ldr	r2, [r5, #12]
   149fe:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   14a02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14a04:	e721      	b.n	1484a <ProcessAesDrv+0x132>
   14a06:	bf00      	nop
   14a08:	20000600 	.word	0x20000600
   14a0c:	5002b000 	.word	0x5002b000
   14a10:	00f10001 	.word	0x00f10001
   14a14:	00f10005 	.word	0x00f10005
   14a18:	00f1000b 	.word	0x00f1000b
   14a1c:	00f10003 	.word	0x00f10003
   14a20:	000178c4 	.word	0x000178c4
   14a24:	000178dc 	.word	0x000178dc
   14a28:	0001791c 	.word	0x0001791c
   14a2c:	000178fc 	.word	0x000178fc
   14a30:	200005ec 	.word	0x200005ec
   14a34:	00f10002 	.word	0x00f10002
   14a38:	00f10004 	.word	0x00f10004
   14a3c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   14a40:	602a      	str	r2, [r5, #0]
   14a42:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   14a46:	606a      	str	r2, [r5, #4]
   14a48:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   14a4c:	60aa      	str	r2, [r5, #8]
   14a4e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   14a52:	60eb      	str	r3, [r5, #12]
   14a54:	e746      	b.n	148e4 <ProcessAesDrv+0x1cc>
   14a56:	683b      	ldr	r3, [r7, #0]
   14a58:	681b      	ldr	r3, [r3, #0]
   14a5a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   14a5e:	683b      	ldr	r3, [r7, #0]
   14a60:	685b      	ldr	r3, [r3, #4]
   14a62:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   14a66:	683b      	ldr	r3, [r7, #0]
   14a68:	689b      	ldr	r3, [r3, #8]
   14a6a:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   14a6e:	683b      	ldr	r3, [r7, #0]
   14a70:	68db      	ldr	r3, [r3, #12]
   14a72:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   14a76:	4659      	mov	r1, fp
   14a78:	4650      	mov	r0, sl
   14a7a:	f7fe fd1b 	bl	134b4 <CC_PalMemSetZeroPlat>
   14a7e:	e798      	b.n	149b2 <ProcessAesDrv+0x29a>

00014a80 <FinishAesDrv>:
   14a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a84:	b309      	cbz	r1, 14aca <FinishAesDrv+0x4a>
   14a86:	b302      	cbz	r2, 14aca <FinishAesDrv+0x4a>
   14a88:	4604      	mov	r4, r0
   14a8a:	2800      	cmp	r0, #0
   14a8c:	f000 80af 	beq.w	14bee <FinishAesDrv+0x16e>
   14a90:	461d      	mov	r5, r3
   14a92:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14a94:	2b07      	cmp	r3, #7
   14a96:	460e      	mov	r6, r1
   14a98:	d01b      	beq.n	14ad2 <FinishAesDrv+0x52>
   14a9a:	b95d      	cbnz	r5, 14ab4 <FinishAesDrv+0x34>
   14a9c:	2b03      	cmp	r3, #3
   14a9e:	d110      	bne.n	14ac2 <FinishAesDrv+0x42>
   14aa0:	6d83      	ldr	r3, [r0, #88]	; 0x58
   14aa2:	b973      	cbnz	r3, 14ac2 <FinishAesDrv+0x42>
   14aa4:	f100 0364 	add.w	r3, r0, #100	; 0x64
   14aa8:	6645      	str	r5, [r0, #100]	; 0x64
   14aaa:	6685      	str	r5, [r0, #104]	; 0x68
   14aac:	66c5      	str	r5, [r0, #108]	; 0x6c
   14aae:	6705      	str	r5, [r0, #112]	; 0x70
   14ab0:	600b      	str	r3, [r1, #0]
   14ab2:	2510      	movs	r5, #16
   14ab4:	462b      	mov	r3, r5
   14ab6:	4631      	mov	r1, r6
   14ab8:	4620      	mov	r0, r4
   14aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14abe:	f7ff be2b 	b.w	14718 <ProcessAesDrv>
   14ac2:	462f      	mov	r7, r5
   14ac4:	4638      	mov	r0, r7
   14ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14aca:	4f76      	ldr	r7, [pc, #472]	; (14ca4 <FinishAesDrv+0x224>)
   14acc:	4638      	mov	r0, r7
   14ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ad2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	f040 808d 	bne.w	14bf4 <FinishAesDrv+0x174>
   14ada:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   14ade:	f080 8090 	bcs.w	14c02 <FinishAesDrv+0x182>
   14ae2:	b91d      	cbnz	r5, 14aec <FinishAesDrv+0x6c>
   14ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14ae6:	2b00      	cmp	r3, #0
   14ae8:	f040 808b 	bne.w	14c02 <FinishAesDrv+0x182>
   14aec:	486e      	ldr	r0, [pc, #440]	; (14ca8 <FinishAesDrv+0x228>)
   14aee:	f04f 31ff 	mov.w	r1, #4294967295
   14af2:	f7fe fcf7 	bl	134e4 <CC_PalMutexLock>
   14af6:	2800      	cmp	r0, #0
   14af8:	f040 808f 	bne.w	14c1a <FinishAesDrv+0x19a>
   14afc:	2000      	movs	r0, #0
   14afe:	f7fe fd21 	bl	13544 <CC_PalPowerSaveModeSelect>
   14b02:	2800      	cmp	r0, #0
   14b04:	f040 8085 	bne.w	14c12 <FinishAesDrv+0x192>
   14b08:	4a68      	ldr	r2, [pc, #416]	; (14cac <FinishAesDrv+0x22c>)
   14b0a:	2301      	movs	r3, #1
   14b0c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   14b10:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   14b14:	2b00      	cmp	r3, #0
   14b16:	d1fb      	bne.n	14b10 <FinishAesDrv+0x90>
   14b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14b1a:	2b03      	cmp	r3, #3
   14b1c:	dd4f      	ble.n	14bbe <FinishAesDrv+0x13e>
   14b1e:	3b06      	subs	r3, #6
   14b20:	2b01      	cmp	r3, #1
   14b22:	d84e      	bhi.n	14bc2 <FinishAesDrv+0x142>
   14b24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14b26:	2b01      	cmp	r3, #1
   14b28:	d86d      	bhi.n	14c06 <FinishAesDrv+0x186>
   14b2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14b2c:	2b01      	cmp	r3, #1
   14b2e:	d878      	bhi.n	14c22 <FinishAesDrv+0x1a2>
   14b30:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14b32:	2b01      	cmp	r3, #1
   14b34:	d877      	bhi.n	14c26 <FinishAesDrv+0x1a6>
   14b36:	4620      	mov	r0, r4
   14b38:	f7ff fd64 	bl	14604 <InitAes.part.0>
   14b3c:	4607      	mov	r7, r0
   14b3e:	2800      	cmp	r0, #0
   14b40:	d140      	bne.n	14bc4 <FinishAesDrv+0x144>
   14b42:	4620      	mov	r0, r4
   14b44:	f7ff fd0a 	bl	1455c <LoadAesKey>
   14b48:	4607      	mov	r7, r0
   14b4a:	2800      	cmp	r0, #0
   14b4c:	d13a      	bne.n	14bc4 <FinishAesDrv+0x144>
   14b4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   14b50:	2a07      	cmp	r2, #7
   14b52:	d836      	bhi.n	14bc2 <FinishAesDrv+0x142>
   14b54:	2301      	movs	r3, #1
   14b56:	4093      	lsls	r3, r2
   14b58:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   14b5c:	f040 8081 	bne.w	14c62 <FinishAesDrv+0x1e2>
   14b60:	f013 0f44 	tst.w	r3, #68	; 0x44
   14b64:	d16f      	bne.n	14c46 <FinishAesDrv+0x1c6>
   14b66:	07db      	lsls	r3, r3, #31
   14b68:	d52b      	bpl.n	14bc2 <FinishAesDrv+0x142>
   14b6a:	4b50      	ldr	r3, [pc, #320]	; (14cac <FinishAesDrv+0x22c>)
   14b6c:	2201      	movs	r2, #1
   14b6e:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   14b72:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   14b76:	6831      	ldr	r1, [r6, #0]
   14b78:	2d00      	cmp	r5, #0
   14b7a:	d156      	bne.n	14c2a <FinishAesDrv+0x1aa>
   14b7c:	6da1      	ldr	r1, [r4, #88]	; 0x58
   14b7e:	b909      	cbnz	r1, 14b84 <FinishAesDrv+0x104>
   14b80:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   14b84:	4b49      	ldr	r3, [pc, #292]	; (14cac <FinishAesDrv+0x22c>)
   14b86:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   14b8a:	2f00      	cmp	r7, #0
   14b8c:	d1fb      	bne.n	14b86 <FinishAesDrv+0x106>
   14b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14b90:	2907      	cmp	r1, #7
   14b92:	d817      	bhi.n	14bc4 <FinishAesDrv+0x144>
   14b94:	2201      	movs	r2, #1
   14b96:	408a      	lsls	r2, r1
   14b98:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   14b9c:	d16f      	bne.n	14c7e <FinishAesDrv+0x1fe>
   14b9e:	f012 0f44 	tst.w	r2, #68	; 0x44
   14ba2:	d00f      	beq.n	14bc4 <FinishAesDrv+0x144>
   14ba4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   14ba8:	6022      	str	r2, [r4, #0]
   14baa:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   14bae:	6062      	str	r2, [r4, #4]
   14bb0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   14bb4:	60a2      	str	r2, [r4, #8]
   14bb6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   14bba:	60e3      	str	r3, [r4, #12]
   14bbc:	e002      	b.n	14bc4 <FinishAesDrv+0x144>
   14bbe:	2b00      	cmp	r3, #0
   14bc0:	dab0      	bge.n	14b24 <FinishAesDrv+0xa4>
   14bc2:	4f3b      	ldr	r7, [pc, #236]	; (14cb0 <FinishAesDrv+0x230>)
   14bc4:	4a39      	ldr	r2, [pc, #228]	; (14cac <FinishAesDrv+0x22c>)
   14bc6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d1fb      	bne.n	14bc6 <FinishAesDrv+0x146>
   14bce:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   14bd2:	2001      	movs	r0, #1
   14bd4:	f7fe fcb6 	bl	13544 <CC_PalPowerSaveModeSelect>
   14bd8:	b9b8      	cbnz	r0, 14c0a <FinishAesDrv+0x18a>
   14bda:	4833      	ldr	r0, [pc, #204]	; (14ca8 <FinishAesDrv+0x228>)
   14bdc:	f7fe fc8a 	bl	134f4 <CC_PalMutexUnlock>
   14be0:	2800      	cmp	r0, #0
   14be2:	f43f af6f 	beq.w	14ac4 <FinishAesDrv+0x44>
   14be6:	4833      	ldr	r0, [pc, #204]	; (14cb4 <FinishAesDrv+0x234>)
   14be8:	f7fd fd70 	bl	126cc <CC_PalAbort>
   14bec:	e76a      	b.n	14ac4 <FinishAesDrv+0x44>
   14bee:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   14bf2:	e767      	b.n	14ac4 <FinishAesDrv+0x44>
   14bf4:	2b01      	cmp	r3, #1
   14bf6:	f47f af74 	bne.w	14ae2 <FinishAesDrv+0x62>
   14bfa:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   14bfe:	f4ff af70 	bcc.w	14ae2 <FinishAesDrv+0x62>
   14c02:	4f2d      	ldr	r7, [pc, #180]	; (14cb8 <FinishAesDrv+0x238>)
   14c04:	e75e      	b.n	14ac4 <FinishAesDrv+0x44>
   14c06:	4f2d      	ldr	r7, [pc, #180]	; (14cbc <FinishAesDrv+0x23c>)
   14c08:	e7dc      	b.n	14bc4 <FinishAesDrv+0x144>
   14c0a:	482d      	ldr	r0, [pc, #180]	; (14cc0 <FinishAesDrv+0x240>)
   14c0c:	f7fd fd5e 	bl	126cc <CC_PalAbort>
   14c10:	e7e3      	b.n	14bda <FinishAesDrv+0x15a>
   14c12:	482c      	ldr	r0, [pc, #176]	; (14cc4 <FinishAesDrv+0x244>)
   14c14:	f7fd fd5a 	bl	126cc <CC_PalAbort>
   14c18:	e776      	b.n	14b08 <FinishAesDrv+0x88>
   14c1a:	482b      	ldr	r0, [pc, #172]	; (14cc8 <FinishAesDrv+0x248>)
   14c1c:	f7fd fd56 	bl	126cc <CC_PalAbort>
   14c20:	e76c      	b.n	14afc <FinishAesDrv+0x7c>
   14c22:	4f2a      	ldr	r7, [pc, #168]	; (14ccc <FinishAesDrv+0x24c>)
   14c24:	e7ce      	b.n	14bc4 <FinishAesDrv+0x144>
   14c26:	4f2a      	ldr	r7, [pc, #168]	; (14cd0 <FinishAesDrv+0x250>)
   14c28:	e7cc      	b.n	14bc4 <FinishAesDrv+0x144>
   14c2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   14c2c:	2a01      	cmp	r2, #1
   14c2e:	d033      	beq.n	14c98 <FinishAesDrv+0x218>
   14c30:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   14c34:	2010      	movs	r0, #16
   14c36:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   14c3a:	f7fe fbbd 	bl	133b8 <CC_HalWaitInterrupt>
   14c3e:	4607      	mov	r7, r0
   14c40:	2800      	cmp	r0, #0
   14c42:	d09f      	beq.n	14b84 <FinishAesDrv+0x104>
   14c44:	e7be      	b.n	14bc4 <FinishAesDrv+0x144>
   14c46:	4b19      	ldr	r3, [pc, #100]	; (14cac <FinishAesDrv+0x22c>)
   14c48:	6822      	ldr	r2, [r4, #0]
   14c4a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   14c4e:	6862      	ldr	r2, [r4, #4]
   14c50:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   14c54:	68a2      	ldr	r2, [r4, #8]
   14c56:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   14c5a:	68e2      	ldr	r2, [r4, #12]
   14c5c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   14c60:	e783      	b.n	14b6a <FinishAesDrv+0xea>
   14c62:	4b12      	ldr	r3, [pc, #72]	; (14cac <FinishAesDrv+0x22c>)
   14c64:	6822      	ldr	r2, [r4, #0]
   14c66:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   14c6a:	6862      	ldr	r2, [r4, #4]
   14c6c:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   14c70:	68a2      	ldr	r2, [r4, #8]
   14c72:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   14c76:	68e2      	ldr	r2, [r4, #12]
   14c78:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   14c7c:	e775      	b.n	14b6a <FinishAesDrv+0xea>
   14c7e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   14c82:	6022      	str	r2, [r4, #0]
   14c84:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   14c88:	6062      	str	r2, [r4, #4]
   14c8a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   14c8e:	60a2      	str	r2, [r4, #8]
   14c90:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   14c94:	60e3      	str	r3, [r4, #12]
   14c96:	e795      	b.n	14bc4 <FinishAesDrv+0x144>
   14c98:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   14c9c:	2040      	movs	r0, #64	; 0x40
   14c9e:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   14ca2:	e7ca      	b.n	14c3a <FinishAesDrv+0x1ba>
   14ca4:	00f1000b 	.word	0x00f1000b
   14ca8:	20000600 	.word	0x20000600
   14cac:	5002b000 	.word	0x5002b000
   14cb0:	00f10001 	.word	0x00f10001
   14cb4:	0001791c 	.word	0x0001791c
   14cb8:	00f10005 	.word	0x00f10005
   14cbc:	00f10002 	.word	0x00f10002
   14cc0:	000178fc 	.word	0x000178fc
   14cc4:	000178dc 	.word	0x000178dc
   14cc8:	000178c4 	.word	0x000178c4
   14ccc:	00f10003 	.word	0x00f10003
   14cd0:	00f10004 	.word	0x00f10004

00014cd4 <kmu_validate_slot_and_size>:
   14cd4:	b929      	cbnz	r1, 14ce2 <kmu_validate_slot_and_size+0xe>
   14cd6:	4b04      	ldr	r3, [pc, #16]	; (14ce8 <kmu_validate_slot_and_size+0x14>)
   14cd8:	2800      	cmp	r0, #0
   14cda:	bf14      	ite	ne
   14cdc:	4618      	movne	r0, r3
   14cde:	2000      	moveq	r0, #0
   14ce0:	4770      	bx	lr
   14ce2:	4802      	ldr	r0, [pc, #8]	; (14cec <kmu_validate_slot_and_size+0x18>)
   14ce4:	4770      	bx	lr
   14ce6:	bf00      	nop
   14ce8:	00f70001 	.word	0x00f70001
   14cec:	00f70003 	.word	0x00f70003

00014cf0 <kmu_validate_kdr_slot_and_size>:
   14cf0:	b929      	cbnz	r1, 14cfe <kmu_validate_kdr_slot_and_size+0xe>
   14cf2:	4b04      	ldr	r3, [pc, #16]	; (14d04 <kmu_validate_kdr_slot_and_size+0x14>)
   14cf4:	2800      	cmp	r0, #0
   14cf6:	bf14      	ite	ne
   14cf8:	4618      	movne	r0, r3
   14cfa:	2000      	moveq	r0, #0
   14cfc:	4770      	bx	lr
   14cfe:	4802      	ldr	r0, [pc, #8]	; (14d08 <kmu_validate_kdr_slot_and_size+0x18>)
   14d00:	4770      	bx	lr
   14d02:	bf00      	nop
   14d04:	00f70001 	.word	0x00f70001
   14d08:	00f70003 	.word	0x00f70003

00014d0c <kmu_use_kdr_key>:
   14d0c:	4b03      	ldr	r3, [pc, #12]	; (14d1c <kmu_use_kdr_key+0x10>)
   14d0e:	2000      	movs	r0, #0
   14d10:	2201      	movs	r2, #1
   14d12:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   14d16:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   14d1a:	4770      	bx	lr
   14d1c:	5002b000 	.word	0x5002b000

00014d20 <kmu_derive_cmac>:
   14d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14d24:	b0cc      	sub	sp, #304	; 0x130
   14d26:	2400      	movs	r4, #0
   14d28:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   14d2a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   14d2e:	4682      	mov	sl, r0
   14d30:	4689      	mov	r9, r1
   14d32:	4616      	mov	r6, r2
   14d34:	4621      	mov	r1, r4
   14d36:	2274      	movs	r2, #116	; 0x74
   14d38:	a80e      	add	r0, sp, #56	; 0x38
   14d3a:	461f      	mov	r7, r3
   14d3c:	f000 fc99 	bl	15672 <memset>
   14d40:	2280      	movs	r2, #128	; 0x80
   14d42:	4621      	mov	r1, r4
   14d44:	a82c      	add	r0, sp, #176	; 0xb0
   14d46:	942b      	str	r4, [sp, #172]	; 0xac
   14d48:	f000 fc93 	bl	15672 <memset>
   14d4c:	2384      	movs	r3, #132	; 0x84
   14d4e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   14d52:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   14d56:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   14d5a:	9305      	str	r3, [sp, #20]
   14d5c:	d863      	bhi.n	14e26 <kmu_derive_cmac+0x106>
   14d5e:	f7ff fcc3 	bl	146e8 <write_invalid_key>
   14d62:	ab05      	add	r3, sp, #20
   14d64:	4630      	mov	r0, r6
   14d66:	ae2b      	add	r6, sp, #172	; 0xac
   14d68:	9301      	str	r3, [sp, #4]
   14d6a:	9502      	str	r5, [sp, #8]
   14d6c:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   14d70:	4639      	mov	r1, r7
   14d72:	9600      	str	r6, [sp, #0]
   14d74:	f000 f862 	bl	14e3c <UtilCmacBuildDataForDerivation>
   14d78:	2800      	cmp	r0, #0
   14d7a:	d14f      	bne.n	14e1c <kmu_derive_cmac+0xfc>
   14d7c:	2303      	movs	r3, #3
   14d7e:	f88d 3013 	strb.w	r3, [sp, #19]
   14d82:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14d86:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   14d8a:	2307      	movs	r3, #7
   14d8c:	2200      	movs	r2, #0
   14d8e:	901c      	str	r0, [sp, #112]	; 0x70
   14d90:	2110      	movs	r1, #16
   14d92:	a80e      	add	r0, sp, #56	; 0x38
   14d94:	931b      	str	r3, [sp, #108]	; 0x6c
   14d96:	2401      	movs	r4, #1
   14d98:	2301      	movs	r3, #1
   14d9a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   14d9e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   14da2:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   14da6:	9426      	str	r4, [sp, #152]	; 0x98
   14da8:	f10d 0920 	add.w	r9, sp, #32
   14dac:	f7fe fb82 	bl	134b4 <CC_PalMemSetZeroPlat>
   14db0:	2210      	movs	r2, #16
   14db2:	9200      	str	r2, [sp, #0]
   14db4:	9905      	ldr	r1, [sp, #20]
   14db6:	f8cd 9004 	str.w	r9, [sp, #4]
   14dba:	ab0a      	add	r3, sp, #40	; 0x28
   14dbc:	4630      	mov	r0, r6
   14dbe:	aa06      	add	r2, sp, #24
   14dc0:	f7ff fa22 	bl	14208 <SetDataBuffersInfo>
   14dc4:	4607      	mov	r7, r0
   14dc6:	b170      	cbz	r0, 14de6 <kmu_derive_cmac+0xc6>
   14dc8:	e01d      	b.n	14e06 <kmu_derive_cmac+0xe6>
   14dca:	a90e      	add	r1, sp, #56	; 0x38
   14dcc:	eb08 0007 	add.w	r0, r8, r7
   14dd0:	f7fe fb6c 	bl	134ac <CC_PalMemCopyPlat>
   14dd4:	2110      	movs	r1, #16
   14dd6:	a80e      	add	r0, sp, #56	; 0x38
   14dd8:	f7fe fb6c 	bl	134b4 <CC_PalMemSetZeroPlat>
   14ddc:	3401      	adds	r4, #1
   14dde:	1bad      	subs	r5, r5, r6
   14de0:	4437      	add	r7, r6
   14de2:	b2e4      	uxtb	r4, r4
   14de4:	d024      	beq.n	14e30 <kmu_derive_cmac+0x110>
   14de6:	2d10      	cmp	r5, #16
   14de8:	464a      	mov	r2, r9
   14dea:	9b05      	ldr	r3, [sp, #20]
   14dec:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   14df0:	a906      	add	r1, sp, #24
   14df2:	a80e      	add	r0, sp, #56	; 0x38
   14df4:	462e      	mov	r6, r5
   14df6:	bf28      	it	cs
   14df8:	2610      	movcs	r6, #16
   14dfa:	f7ff fe41 	bl	14a80 <FinishAesDrv>
   14dfe:	4632      	mov	r2, r6
   14e00:	2800      	cmp	r0, #0
   14e02:	d0e2      	beq.n	14dca <kmu_derive_cmac+0xaa>
   14e04:	4607      	mov	r7, r0
   14e06:	a80e      	add	r0, sp, #56	; 0x38
   14e08:	2274      	movs	r2, #116	; 0x74
   14e0a:	2100      	movs	r1, #0
   14e0c:	f7fe fb50 	bl	134b0 <CC_PalMemSetPlat>
   14e10:	f7ff fc6a 	bl	146e8 <write_invalid_key>
   14e14:	4638      	mov	r0, r7
   14e16:	b04c      	add	sp, #304	; 0x130
   14e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e1c:	4f05      	ldr	r7, [pc, #20]	; (14e34 <kmu_derive_cmac+0x114>)
   14e1e:	4638      	mov	r0, r7
   14e20:	b04c      	add	sp, #304	; 0x130
   14e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e26:	4f04      	ldr	r7, [pc, #16]	; (14e38 <kmu_derive_cmac+0x118>)
   14e28:	4638      	mov	r0, r7
   14e2a:	b04c      	add	sp, #304	; 0x130
   14e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14e30:	462f      	mov	r7, r5
   14e32:	e7e8      	b.n	14e06 <kmu_derive_cmac+0xe6>
   14e34:	00f1000e 	.word	0x00f1000e
   14e38:	00f1000f 	.word	0x00f1000f

00014e3c <UtilCmacBuildDataForDerivation>:
   14e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e40:	b082      	sub	sp, #8
   14e42:	461e      	mov	r6, r3
   14e44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14e46:	2300      	movs	r3, #0
   14e48:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   14e4c:	9301      	str	r3, [sp, #4]
   14e4e:	d83e      	bhi.n	14ece <UtilCmacBuildDataForDerivation+0x92>
   14e50:	00ed      	lsls	r5, r5, #3
   14e52:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   14e56:	4617      	mov	r7, r2
   14e58:	f101 32ff 	add.w	r2, r1, #4294967295
   14e5c:	bf34      	ite	cc
   14e5e:	2303      	movcc	r3, #3
   14e60:	2304      	movcs	r3, #4
   14e62:	2a3f      	cmp	r2, #63	; 0x3f
   14e64:	460c      	mov	r4, r1
   14e66:	9300      	str	r3, [sp, #0]
   14e68:	d831      	bhi.n	14ece <UtilCmacBuildDataForDerivation+0x92>
   14e6a:	b380      	cbz	r0, 14ece <UtilCmacBuildDataForDerivation+0x92>
   14e6c:	bb66      	cbnz	r6, 14ec8 <UtilCmacBuildDataForDerivation+0x8c>
   14e6e:	9a08      	ldr	r2, [sp, #32]
   14e70:	b36a      	cbz	r2, 14ece <UtilCmacBuildDataForDerivation+0x92>
   14e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14e74:	6811      	ldr	r1, [r2, #0]
   14e76:	b351      	cbz	r1, 14ece <UtilCmacBuildDataForDerivation+0x92>
   14e78:	19a2      	adds	r2, r4, r6
   14e7a:	4413      	add	r3, r2
   14e7c:	4299      	cmp	r1, r3
   14e7e:	d326      	bcc.n	14ece <UtilCmacBuildDataForDerivation+0x92>
   14e80:	9b08      	ldr	r3, [sp, #32]
   14e82:	4601      	mov	r1, r0
   14e84:	4622      	mov	r2, r4
   14e86:	1c58      	adds	r0, r3, #1
   14e88:	f7fe fb10 	bl	134ac <CC_PalMemCopyPlat>
   14e8c:	9b08      	ldr	r3, [sp, #32]
   14e8e:	f104 0802 	add.w	r8, r4, #2
   14e92:	441c      	add	r4, r3
   14e94:	2300      	movs	r3, #0
   14e96:	7063      	strb	r3, [r4, #1]
   14e98:	bb26      	cbnz	r6, 14ee4 <UtilCmacBuildDataForDerivation+0xa8>
   14e9a:	9b08      	ldr	r3, [sp, #32]
   14e9c:	9500      	str	r5, [sp, #0]
   14e9e:	2dff      	cmp	r5, #255	; 0xff
   14ea0:	eb03 0008 	add.w	r0, r3, r8
   14ea4:	d917      	bls.n	14ed6 <UtilCmacBuildDataForDerivation+0x9a>
   14ea6:	022b      	lsls	r3, r5, #8
   14ea8:	b29b      	uxth	r3, r3
   14eaa:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   14eae:	2202      	movs	r2, #2
   14eb0:	a901      	add	r1, sp, #4
   14eb2:	9301      	str	r3, [sp, #4]
   14eb4:	f7fe fafa 	bl	134ac <CC_PalMemCopyPlat>
   14eb8:	f108 0302 	add.w	r3, r8, #2
   14ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14ebe:	2000      	movs	r0, #0
   14ec0:	6013      	str	r3, [r2, #0]
   14ec2:	b002      	add	sp, #8
   14ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ec8:	b10f      	cbz	r7, 14ece <UtilCmacBuildDataForDerivation+0x92>
   14eca:	2e40      	cmp	r6, #64	; 0x40
   14ecc:	d9cf      	bls.n	14e6e <UtilCmacBuildDataForDerivation+0x32>
   14ece:	480a      	ldr	r0, [pc, #40]	; (14ef8 <UtilCmacBuildDataForDerivation+0xbc>)
   14ed0:	b002      	add	sp, #8
   14ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ed6:	2201      	movs	r2, #1
   14ed8:	4669      	mov	r1, sp
   14eda:	f7fe fae7 	bl	134ac <CC_PalMemCopyPlat>
   14ede:	f108 0301 	add.w	r3, r8, #1
   14ee2:	e7eb      	b.n	14ebc <UtilCmacBuildDataForDerivation+0x80>
   14ee4:	9b08      	ldr	r3, [sp, #32]
   14ee6:	4632      	mov	r2, r6
   14ee8:	eb03 0008 	add.w	r0, r3, r8
   14eec:	4639      	mov	r1, r7
   14eee:	f7fe fadd 	bl	134ac <CC_PalMemCopyPlat>
   14ef2:	44b0      	add	r8, r6
   14ef4:	e7d1      	b.n	14e9a <UtilCmacBuildDataForDerivation+0x5e>
   14ef6:	bf00      	nop
   14ef8:	80000006 	.word	0x80000006

00014efc <CC_PalDataBufferAttrGet>:
   14efc:	2000      	movs	r0, #0
   14efe:	7018      	strb	r0, [r3, #0]
   14f00:	4770      	bx	lr
   14f02:	bf00      	nop

00014f04 <arch_printk_char_out>:
}
   14f04:	2000      	movs	r0, #0
   14f06:	4770      	bx	lr

00014f08 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
   14f08:	b40f      	push	{r0, r1, r2, r3}
   14f0a:	b507      	push	{r0, r1, r2, lr}
   14f0c:	a904      	add	r1, sp, #16
   14f0e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14f12:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   14f14:	f7f5 fc96 	bl	a844 <vprintk>

	va_end(ap);
}
   14f18:	b003      	add	sp, #12
   14f1a:	f85d eb04 	ldr.w	lr, [sp], #4
   14f1e:	b004      	add	sp, #16
   14f20:	4770      	bx	lr

00014f22 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   14f22:	4604      	mov	r4, r0
   14f24:	b508      	push	{r3, lr}
   14f26:	4608      	mov	r0, r1
   14f28:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   14f2a:	461a      	mov	r2, r3
   14f2c:	47a0      	blx	r4
	return z_impl_z_current_get();
   14f2e:	f7fd f903 	bl	12138 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   14f32:	f7f6 febf 	bl	bcb4 <z_impl_k_thread_abort>

00014f36 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   14f36:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   14f3a:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   14f3c:	0840      	lsrs	r0, r0, #1
   14f3e:	4770      	bx	lr

00014f40 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   14f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f42:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   14f44:	f7ff fff7 	bl	14f36 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   14f48:	fab0 f080 	clz	r0, r0
   14f4c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   14f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   14f54:	00ca      	lsls	r2, r1, #3
   14f56:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   14f5a:	1d17      	adds	r7, r2, #4
{
   14f5c:	460c      	mov	r4, r1
   14f5e:	3206      	adds	r2, #6
   14f60:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   14f62:	b956      	cbnz	r6, 14f7a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   14f64:	2101      	movs	r1, #1
   14f66:	fa01 f000 	lsl.w	r0, r1, r0
   14f6a:	68d9      	ldr	r1, [r3, #12]
   14f6c:	4301      	orrs	r1, r0
   14f6e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   14f70:	f8cc 4010 	str.w	r4, [ip, #16]
   14f74:	53dd      	strh	r5, [r3, r7]
   14f76:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   14f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   14f7a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   14f7c:	3104      	adds	r1, #4
   14f7e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   14f80:	53d8      	strh	r0, [r3, r7]
   14f82:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   14f86:	529e      	strh	r6, [r3, r2]
   14f88:	80c5      	strh	r5, [r0, #6]
   14f8a:	525d      	strh	r5, [r3, r1]
   14f8c:	e7f4      	b.n	14f78 <free_list_add+0x38>

00014f8e <free_list_remove_bidx>:
{
   14f8e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   14f90:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   14f94:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   14f96:	4299      	cmp	r1, r3
   14f98:	f102 0104 	add.w	r1, r2, #4
   14f9c:	d10a      	bne.n	14fb4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   14f9e:	2301      	movs	r3, #1
   14fa0:	fa03 f202 	lsl.w	r2, r3, r2
   14fa4:	68c3      	ldr	r3, [r0, #12]
   14fa6:	ea23 0302 	bic.w	r3, r3, r2
   14faa:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   14fac:	2300      	movs	r3, #0
   14fae:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   14fb2:	bd10      	pop	{r4, pc}
   14fb4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   14fb6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   14fba:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   14fbe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   14fc2:	80cb      	strh	r3, [r1, #6]
   14fc4:	8082      	strh	r2, [r0, #4]
}
   14fc6:	e7f4      	b.n	14fb2 <free_list_remove_bidx+0x24>

00014fc8 <free_list_remove>:
{
   14fc8:	b508      	push	{r3, lr}
   14fca:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   14fcc:	f7ff ffb3 	bl	14f36 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   14fd0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   14fd4:	f1c2 021f 	rsb	r2, r2, #31
   14fd8:	4618      	mov	r0, r3
}
   14fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   14fde:	f7ff bfd6 	b.w	14f8e <free_list_remove_bidx>

00014fe2 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   14fe2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14fe6:	fab1 f581 	clz	r5, r1
   14fea:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   14fee:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   14ff2:	4603      	mov	r3, r0
	if (b->next) {
   14ff4:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   14ff8:	460e      	mov	r6, r1
	if (b->next) {
   14ffa:	b1c2      	cbz	r2, 1502e <alloc_chunk+0x4c>
   14ffc:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   14ffe:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   15002:	4618      	mov	r0, r3
   15004:	4621      	mov	r1, r4
   15006:	f7ff ff96 	bl	14f36 <chunk_size>
   1500a:	42b0      	cmp	r0, r6
   1500c:	d306      	bcc.n	1501c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1500e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   15010:	4618      	mov	r0, r3
   15012:	f7ff ffbc 	bl	14f8e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   15016:	4620      	mov	r0, r4
   15018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1501c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   15020:	3f01      	subs	r7, #1
   15022:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   15024:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   15028:	d001      	beq.n	1502e <alloc_chunk+0x4c>
   1502a:	4282      	cmp	r2, r0
   1502c:	d1e7      	bne.n	14ffe <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1502e:	f1c5 0220 	rsb	r2, r5, #32
   15032:	f04f 34ff 	mov.w	r4, #4294967295
   15036:	4094      	lsls	r4, r2
   15038:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1503a:	4014      	ands	r4, r2
   1503c:	d0eb      	beq.n	15016 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1503e:	fa94 f2a4 	rbit	r2, r4
   15042:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   15046:	1d11      	adds	r1, r2, #4
   15048:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1504c:	4621      	mov	r1, r4
   1504e:	e7df      	b.n	15010 <alloc_chunk+0x2e>

00015050 <merge_chunks>:
{
   15050:	b538      	push	{r3, r4, r5, lr}
   15052:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   15054:	f7ff ff6f 	bl	14f36 <chunk_size>
{
   15058:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1505a:	4604      	mov	r4, r0
   1505c:	4611      	mov	r1, r2
   1505e:	4618      	mov	r0, r3
   15060:	f7ff ff69 	bl	14f36 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   15064:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   15068:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1506a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1506c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1506e:	4618      	mov	r0, r3
   15070:	f7ff ff61 	bl	14f36 <chunk_size>
	void *cmem = &buf[c];
   15074:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   15076:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1507a:	bd38      	pop	{r3, r4, r5, pc}

0001507c <split_chunks>:
{
   1507c:	b538      	push	{r3, r4, r5, lr}
   1507e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   15080:	f7ff ff59 	bl	14f36 <chunk_size>
{
   15084:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   15086:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   15088:	1a51      	subs	r1, r2, r1
   1508a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1508e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15090:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   15092:	8060      	strh	r0, [r4, #2]
   15094:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15098:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1509a:	8044      	strh	r4, [r0, #2]
   1509c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   150a0:	4618      	mov	r0, r3
   150a2:	4611      	mov	r1, r2
   150a4:	f7ff ff47 	bl	14f36 <chunk_size>
	void *cmem = &buf[c];
   150a8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   150aa:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   150ae:	bd38      	pop	{r3, r4, r5, pc}

000150b0 <free_chunk>:
{
   150b0:	b538      	push	{r3, r4, r5, lr}
   150b2:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   150b4:	f7ff ff3f 	bl	14f36 <chunk_size>
   150b8:	460c      	mov	r4, r1
   150ba:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   150bc:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   150c0:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   150c2:	07da      	lsls	r2, r3, #31
   150c4:	d40a      	bmi.n	150dc <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   150c6:	4628      	mov	r0, r5
   150c8:	f7ff ff7e 	bl	14fc8 <free_list_remove>
	return c + chunk_size(h, c);
   150cc:	4621      	mov	r1, r4
   150ce:	4628      	mov	r0, r5
   150d0:	f7ff ff31 	bl	14f36 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   150d4:	1822      	adds	r2, r4, r0
   150d6:	4628      	mov	r0, r5
   150d8:	f7ff ffba 	bl	15050 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   150dc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   150e0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   150e2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   150e6:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   150e8:	07db      	lsls	r3, r3, #31
   150ea:	d40c      	bmi.n	15106 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   150ec:	4628      	mov	r0, r5
   150ee:	f7ff ff6b 	bl	14fc8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   150f2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   150f6:	4622      	mov	r2, r4
   150f8:	1a61      	subs	r1, r4, r1
   150fa:	4628      	mov	r0, r5
   150fc:	f7ff ffa8 	bl	15050 <merge_chunks>
   15100:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   15104:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   15106:	4621      	mov	r1, r4
   15108:	4628      	mov	r0, r5
}
   1510a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1510e:	f7ff bf17 	b.w	14f40 <free_list_add>

00015112 <sys_heap_free>:
	if (mem == NULL) {
   15112:	b161      	cbz	r1, 1512e <sys_heap_free+0x1c>
   15114:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   15116:	3904      	subs	r1, #4
   15118:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1511a:	f021 0307 	bic.w	r3, r1, #7
   1511e:	4403      	add	r3, r0
	free_chunk(h, c);
   15120:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   15122:	885a      	ldrh	r2, [r3, #2]
   15124:	f022 0201 	bic.w	r2, r2, #1
   15128:	805a      	strh	r2, [r3, #2]
   1512a:	f7ff bfc1 	b.w	150b0 <free_chunk>
}
   1512e:	4770      	bx	lr

00015130 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   15130:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   15132:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   15134:	b909      	cbnz	r1, 1513a <sys_heap_alloc+0xa>
		return NULL;
   15136:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   15138:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1513a:	68ab      	ldr	r3, [r5, #8]
   1513c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   15140:	d9f9      	bls.n	15136 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15142:	310b      	adds	r1, #11
   15144:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   15146:	4621      	mov	r1, r4
   15148:	4628      	mov	r0, r5
   1514a:	f7ff ff4a 	bl	14fe2 <alloc_chunk>
	if (c == 0U) {
   1514e:	4606      	mov	r6, r0
   15150:	2800      	cmp	r0, #0
   15152:	d0f0      	beq.n	15136 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   15154:	4601      	mov	r1, r0
   15156:	4628      	mov	r0, r5
   15158:	f7ff feed 	bl	14f36 <chunk_size>
   1515c:	42a0      	cmp	r0, r4
   1515e:	d907      	bls.n	15170 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   15160:	1932      	adds	r2, r6, r4
   15162:	4628      	mov	r0, r5
   15164:	f7ff ff8a 	bl	1507c <split_chunks>
		free_list_add(h, c + chunk_sz);
   15168:	4611      	mov	r1, r2
   1516a:	4628      	mov	r0, r5
   1516c:	f7ff fee8 	bl	14f40 <free_list_add>
	void *cmem = &buf[c];
   15170:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   15174:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15176:	8853      	ldrh	r3, [r2, #2]
   15178:	f043 0301 	orr.w	r3, r3, #1
   1517c:	8053      	strh	r3, [r2, #2]
   1517e:	3004      	adds	r0, #4
	return mem;
   15180:	e7da      	b.n	15138 <sys_heap_alloc+0x8>

00015182 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   15182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15186:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1518a:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1518e:	6806      	ldr	r6, [r0, #0]
{
   15190:	460f      	mov	r7, r1
   15192:	4614      	mov	r4, r2
	if (align != rew) {
   15194:	d00c      	beq.n	151b0 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   15196:	424b      	negs	r3, r1
   15198:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1519a:	2b04      	cmp	r3, #4
   1519c:	461a      	mov	r2, r3
   1519e:	464f      	mov	r7, r9
   151a0:	bf28      	it	cs
   151a2:	2204      	movcs	r2, #4
	rew = align & -align;
   151a4:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   151a6:	b964      	cbnz	r4, 151c2 <sys_heap_aligned_alloc+0x40>
		return NULL;
   151a8:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   151aa:	4628      	mov	r0, r5
   151ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   151b0:	2904      	cmp	r1, #4
   151b2:	d804      	bhi.n	151be <sys_heap_aligned_alloc+0x3c>
}
   151b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   151b8:	4611      	mov	r1, r2
   151ba:	f7ff bfb9 	b.w	15130 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   151be:	2204      	movs	r2, #4
   151c0:	e7f1      	b.n	151a6 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   151c2:	68b3      	ldr	r3, [r6, #8]
   151c4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   151c8:	d9ee      	bls.n	151a8 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   151ca:	f104 010b 	add.w	r1, r4, #11
   151ce:	4439      	add	r1, r7
   151d0:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   151d2:	08c9      	lsrs	r1, r1, #3
   151d4:	4630      	mov	r0, r6
   151d6:	f7ff ff04 	bl	14fe2 <alloc_chunk>
	if (c0 == 0) {
   151da:	4680      	mov	r8, r0
   151dc:	2800      	cmp	r0, #0
   151de:	d0e3      	beq.n	151a8 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   151e0:	f109 0504 	add.w	r5, r9, #4
   151e4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   151e8:	1e7b      	subs	r3, r7, #1
   151ea:	4435      	add	r5, r6
   151ec:	441d      	add	r5, r3
   151ee:	427f      	negs	r7, r7
   151f0:	403d      	ands	r5, r7
   151f2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   151f6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   151f8:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   151fa:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   151fc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   151fe:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   15202:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   15204:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   15208:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1520c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   15210:	d208      	bcs.n	15224 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   15212:	4601      	mov	r1, r0
   15214:	463a      	mov	r2, r7
   15216:	4630      	mov	r0, r6
   15218:	f7ff ff30 	bl	1507c <split_chunks>
		free_list_add(h, c0);
   1521c:	4641      	mov	r1, r8
   1521e:	4630      	mov	r0, r6
   15220:	f7ff fe8e 	bl	14f40 <free_list_add>
	return c + chunk_size(h, c);
   15224:	4639      	mov	r1, r7
   15226:	4630      	mov	r0, r6
   15228:	f7ff fe85 	bl	14f36 <chunk_size>
   1522c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1522e:	4284      	cmp	r4, r0
   15230:	d207      	bcs.n	15242 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   15232:	4630      	mov	r0, r6
   15234:	4622      	mov	r2, r4
   15236:	f7ff ff21 	bl	1507c <split_chunks>
		free_list_add(h, c_end);
   1523a:	4621      	mov	r1, r4
   1523c:	4630      	mov	r0, r6
   1523e:	f7ff fe7f 	bl	14f40 <free_list_add>
	void *cmem = &buf[c];
   15242:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15246:	8873      	ldrh	r3, [r6, #2]
   15248:	f043 0301 	orr.w	r3, r3, #1
   1524c:	8073      	strh	r3, [r6, #2]
   1524e:	e7ac      	b.n	151aa <sys_heap_aligned_alloc+0x28>

00015250 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   15250:	3a04      	subs	r2, #4
{
   15252:	b4f0      	push	{r4, r5, r6, r7}
   15254:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   15256:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   15258:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1525a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1525e:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   15262:	1a0e      	subs	r6, r1, r0
   15264:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   15266:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   15268:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1526c:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1526e:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   15272:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   15274:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   15276:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   15278:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1527c:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1527e:	f1c2 0220 	rsb	r2, r2, #32
   15282:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   15284:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   15288:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1528c:	4294      	cmp	r4, r2
   1528e:	d1fb      	bne.n	15288 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15290:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15292:	f042 0201 	orr.w	r2, r2, #1
   15296:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   15298:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1529c:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1529e:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   152a0:	8007      	strh	r7, [r0, #0]
   152a2:	8065      	strh	r5, [r4, #2]
   152a4:	1984      	adds	r4, r0, r6
   152a6:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   152aa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   152ae:	8067      	strh	r7, [r4, #2]
   152b0:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   152b2:	885a      	ldrh	r2, [r3, #2]
   152b4:	f042 0201 	orr.w	r2, r2, #1
   152b8:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   152ba:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   152bc:	f7ff be40 	b.w	14f40 <free_list_add>

000152c0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   152c0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   152c2:	f013 0307 	ands.w	r3, r3, #7
   152c6:	d105      	bne.n	152d4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   152c8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   152ca:	2b00      	cmp	r3, #0
   152cc:	bf0c      	ite	eq
   152ce:	2000      	moveq	r0, #0
   152d0:	2003      	movne	r0, #3
   152d2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   152d4:	2b02      	cmp	r3, #2
   152d6:	d105      	bne.n	152e4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   152d8:	8b40      	ldrh	r0, [r0, #26]
   152da:	fab0 f080 	clz	r0, r0
   152de:	0940      	lsrs	r0, r0, #5
   152e0:	0080      	lsls	r0, r0, #2
   152e2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   152e4:	2b01      	cmp	r3, #1
   152e6:	d105      	bne.n	152f4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   152e8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   152ea:	2b00      	cmp	r3, #0
   152ec:	bf0c      	ite	eq
   152ee:	2000      	moveq	r0, #0
   152f0:	2005      	movne	r0, #5
   152f2:	4770      	bx	lr
	int evt = EVT_NOP;
   152f4:	2000      	movs	r0, #0
}
   152f6:	4770      	bx	lr

000152f8 <validate_args>:
{
   152f8:	b510      	push	{r4, lr}
   152fa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   152fc:	b100      	cbz	r0, 15300 <validate_args+0x8>
   152fe:	b911      	cbnz	r1, 15306 <validate_args+0xe>
		return -EINVAL;
   15300:	f06f 0015 	mvn.w	r0, #21
}
   15304:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   15306:	1d08      	adds	r0, r1, #4
   15308:	f000 f8ba 	bl	15480 <sys_notify_validate>
	if ((rv == 0)
   1530c:	2800      	cmp	r0, #0
   1530e:	d1f9      	bne.n	15304 <validate_args+0xc>
	    && ((cli->notify.flags
   15310:	68a3      	ldr	r3, [r4, #8]
   15312:	2b03      	cmp	r3, #3
   15314:	d9f6      	bls.n	15304 <validate_args+0xc>
   15316:	e7f3      	b.n	15300 <validate_args+0x8>

00015318 <notify_one>:
{
   15318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1531c:	460d      	mov	r5, r1
   1531e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15320:	4619      	mov	r1, r3
   15322:	1d28      	adds	r0, r5, #4
{
   15324:	4690      	mov	r8, r2
   15326:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   15328:	f000 f8be 	bl	154a8 <sys_notify_finalize>
	if (cb) {
   1532c:	4604      	mov	r4, r0
   1532e:	b138      	cbz	r0, 15340 <notify_one+0x28>
		cb(mgr, cli, state, res);
   15330:	4633      	mov	r3, r6
   15332:	4642      	mov	r2, r8
   15334:	4629      	mov	r1, r5
   15336:	4638      	mov	r0, r7
   15338:	46a4      	mov	ip, r4
}
   1533a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1533e:	4760      	bx	ip
}
   15340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015344 <transition_complete>:
{
   15344:	b410      	push	{r4}
	__asm__ volatile(
   15346:	f04f 0440 	mov.w	r4, #64	; 0x40
   1534a:	f3ef 8211 	mrs	r2, BASEPRI
   1534e:	f384 8812 	msr	BASEPRI_MAX, r4
   15352:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   15356:	6141      	str	r1, [r0, #20]
}
   15358:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1535a:	2101      	movs	r1, #1
   1535c:	f7f5 ba80 	b.w	a860 <process_event>

00015360 <onoff_manager_init>:
{
   15360:	b538      	push	{r3, r4, r5, lr}
   15362:	460c      	mov	r4, r1
	if ((mgr == NULL)
   15364:	4605      	mov	r5, r0
   15366:	b158      	cbz	r0, 15380 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   15368:	b151      	cbz	r1, 15380 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1536a:	680b      	ldr	r3, [r1, #0]
   1536c:	b143      	cbz	r3, 15380 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1536e:	684b      	ldr	r3, [r1, #4]
   15370:	b133      	cbz	r3, 15380 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15372:	221c      	movs	r2, #28
   15374:	2100      	movs	r1, #0
   15376:	f000 f97c 	bl	15672 <memset>
   1537a:	612c      	str	r4, [r5, #16]
	return 0;
   1537c:	2000      	movs	r0, #0
}
   1537e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15380:	f06f 0015 	mvn.w	r0, #21
   15384:	e7fb      	b.n	1537e <onoff_manager_init+0x1e>

00015386 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15386:	b570      	push	{r4, r5, r6, lr}
   15388:	4605      	mov	r5, r0
   1538a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1538c:	f7ff ffb4 	bl	152f8 <validate_args>

	if (rv < 0) {
   15390:	1e04      	subs	r4, r0, #0
   15392:	db15      	blt.n	153c0 <onoff_request+0x3a>
   15394:	f04f 0340 	mov.w	r3, #64	; 0x40
   15398:	f3ef 8211 	mrs	r2, BASEPRI
   1539c:	f383 8812 	msr	BASEPRI_MAX, r3
   153a0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   153a4:	8b6b      	ldrh	r3, [r5, #26]
   153a6:	8b2c      	ldrh	r4, [r5, #24]
   153a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   153ac:	428b      	cmp	r3, r1
   153ae:	f004 0407 	and.w	r4, r4, #7
   153b2:	d107      	bne.n	153c4 <onoff_request+0x3e>
	__asm__ volatile(
   153b4:	f382 8811 	msr	BASEPRI, r2
   153b8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   153bc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   153c0:	4620      	mov	r0, r4
   153c2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   153c4:	2c02      	cmp	r4, #2
   153c6:	d10c      	bne.n	153e2 <onoff_request+0x5c>
		mgr->refs += 1U;
   153c8:	3301      	adds	r3, #1
   153ca:	836b      	strh	r3, [r5, #26]
   153cc:	f382 8811 	msr	BASEPRI, r2
   153d0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   153d4:	2300      	movs	r3, #0
   153d6:	4622      	mov	r2, r4
   153d8:	4631      	mov	r1, r6
   153da:	4628      	mov	r0, r5
   153dc:	f7ff ff9c 	bl	15318 <notify_one>
   153e0:	e7ee      	b.n	153c0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   153e2:	2c06      	cmp	r4, #6
   153e4:	d814      	bhi.n	15410 <onoff_request+0x8a>
   153e6:	e8df f004 	tbb	[pc, r4]
   153ea:	1304      	.short	0x1304
   153ec:	1a041313 	.word	0x1a041313
   153f0:	04          	.byte	0x04
   153f1:	00          	.byte	0x00
	parent->next = child;
   153f2:	2300      	movs	r3, #0
   153f4:	6033      	str	r3, [r6, #0]
	return list->tail;
   153f6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   153f8:	b93b      	cbnz	r3, 1540a <onoff_request+0x84>
	list->head = node;
   153fa:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   153fe:	b9ac      	cbnz	r4, 1542c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   15400:	2102      	movs	r1, #2
   15402:	4628      	mov	r0, r5
   15404:	f7f5 fa2c 	bl	a860 <process_event>
   15408:	e7da      	b.n	153c0 <onoff_request+0x3a>
	parent->next = child;
   1540a:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1540c:	606e      	str	r6, [r5, #4]
}
   1540e:	e7f6      	b.n	153fe <onoff_request+0x78>
   15410:	f382 8811 	msr	BASEPRI, r2
   15414:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   15418:	f06f 0404 	mvn.w	r4, #4
   1541c:	e7d0      	b.n	153c0 <onoff_request+0x3a>
   1541e:	f382 8811 	msr	BASEPRI, r2
   15422:	f3bf 8f6f 	isb	sy
   15426:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1542a:	e7c9      	b.n	153c0 <onoff_request+0x3a>
   1542c:	f382 8811 	msr	BASEPRI, r2
   15430:	f3bf 8f6f 	isb	sy
		if (notify) {
   15434:	e7c4      	b.n	153c0 <onoff_request+0x3a>

00015436 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   15436:	b510      	push	{r4, lr}
	__asm__ volatile(
   15438:	f04f 0340 	mov.w	r3, #64	; 0x40
   1543c:	f3ef 8211 	mrs	r2, BASEPRI
   15440:	f383 8812 	msr	BASEPRI_MAX, r3
   15444:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   15448:	8b04      	ldrh	r4, [r0, #24]
   1544a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1544e:	2c02      	cmp	r4, #2
   15450:	d00a      	beq.n	15468 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   15452:	2c01      	cmp	r4, #1
   15454:	bf0c      	ite	eq
   15456:	f06f 0004 	mvneq.w	r0, #4
   1545a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1545e:	f382 8811 	msr	BASEPRI, r2
   15462:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   15466:	e008      	b.n	1547a <onoff_release+0x44>
	mgr->refs -= 1U;
   15468:	8b43      	ldrh	r3, [r0, #26]
   1546a:	3b01      	subs	r3, #1
   1546c:	b29b      	uxth	r3, r3
   1546e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   15470:	b923      	cbnz	r3, 1547c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   15472:	4621      	mov	r1, r4
   15474:	f7f5 f9f4 	bl	a860 <process_event>
	int rv = state;
   15478:	4620      	mov	r0, r4
}
   1547a:	bd10      	pop	{r4, pc}
	int rv = state;
   1547c:	4620      	mov	r0, r4
   1547e:	e7ee      	b.n	1545e <onoff_release+0x28>

00015480 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   15480:	4603      	mov	r3, r0
   15482:	b140      	cbz	r0, 15496 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   15484:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   15486:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1548a:	2a02      	cmp	r2, #2
   1548c:	d006      	beq.n	1549c <sys_notify_validate+0x1c>
   1548e:	2a03      	cmp	r2, #3
   15490:	d004      	beq.n	1549c <sys_notify_validate+0x1c>
   15492:	2a01      	cmp	r2, #1
   15494:	d005      	beq.n	154a2 <sys_notify_validate+0x22>
   15496:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1549a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1549c:	681a      	ldr	r2, [r3, #0]
   1549e:	2a00      	cmp	r2, #0
   154a0:	d0f9      	beq.n	15496 <sys_notify_validate+0x16>
		notify->result = 0;
   154a2:	2000      	movs	r0, #0
   154a4:	6098      	str	r0, [r3, #8]
   154a6:	4770      	bx	lr

000154a8 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   154a8:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   154aa:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   154ac:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   154ae:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   154b2:	2a02      	cmp	r2, #2
{
   154b4:	4603      	mov	r3, r0
	switch (method) {
   154b6:	f04f 0400 	mov.w	r4, #0
   154ba:	d007      	beq.n	154cc <sys_notify_finalize+0x24>
   154bc:	2a03      	cmp	r2, #3
   154be:	d002      	beq.n	154c6 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   154c0:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   154c2:	2000      	movs	r0, #0
   154c4:	e001      	b.n	154ca <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   154c6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   154c8:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   154ca:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   154cc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   154ce:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   154d0:	2800      	cmp	r0, #0
   154d2:	d0f6      	beq.n	154c2 <sys_notify_finalize+0x1a>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   154d4:	f7fd f85e 	bl	12594 <z_impl_k_poll_signal_raise>
   154d8:	e7f3      	b.n	154c2 <sys_notify_finalize+0x1a>

000154da <encode_uint>:
{
   154da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154de:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   154e0:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   154e2:	2b6f      	cmp	r3, #111	; 0x6f
{
   154e4:	4680      	mov	r8, r0
   154e6:	460f      	mov	r7, r1
   154e8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   154ea:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   154ee:	d029      	beq.n	15544 <encode_uint+0x6a>
   154f0:	d824      	bhi.n	1553c <encode_uint+0x62>
		return 10;
   154f2:	2b58      	cmp	r3, #88	; 0x58
   154f4:	bf0c      	ite	eq
   154f6:	2610      	moveq	r6, #16
   154f8:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   154fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   154fe:	4632      	mov	r2, r6
   15500:	2300      	movs	r3, #0
   15502:	4640      	mov	r0, r8
   15504:	4639      	mov	r1, r7
   15506:	f7ea fdfb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1550a:	2a09      	cmp	r2, #9
   1550c:	b2d4      	uxtb	r4, r2
   1550e:	d81e      	bhi.n	1554e <encode_uint+0x74>
   15510:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   15512:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15514:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   15516:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1551a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1551e:	d301      	bcc.n	15524 <encode_uint+0x4a>
   15520:	45d1      	cmp	r9, sl
   15522:	d811      	bhi.n	15548 <encode_uint+0x6e>
	if (conv->flag_hash) {
   15524:	782b      	ldrb	r3, [r5, #0]
   15526:	069b      	lsls	r3, r3, #26
   15528:	d505      	bpl.n	15536 <encode_uint+0x5c>
		if (radix == 8) {
   1552a:	2e08      	cmp	r6, #8
   1552c:	d115      	bne.n	1555a <encode_uint+0x80>
			conv->altform_0 = true;
   1552e:	78ab      	ldrb	r3, [r5, #2]
   15530:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   15534:	70ab      	strb	r3, [r5, #2]
}
   15536:	4648      	mov	r0, r9
   15538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1553c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   15540:	2b70      	cmp	r3, #112	; 0x70
   15542:	e7d7      	b.n	154f4 <encode_uint+0x1a>
	switch (specifier) {
   15544:	2608      	movs	r6, #8
   15546:	e7d8      	b.n	154fa <encode_uint+0x20>
		value /= radix;
   15548:	4680      	mov	r8, r0
   1554a:	460f      	mov	r7, r1
   1554c:	e7d7      	b.n	154fe <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1554e:	f1bb 0f19 	cmp.w	fp, #25
   15552:	bf94      	ite	ls
   15554:	3437      	addls	r4, #55	; 0x37
   15556:	3457      	addhi	r4, #87	; 0x57
   15558:	e7db      	b.n	15512 <encode_uint+0x38>
		} else if (radix == 16) {
   1555a:	2e10      	cmp	r6, #16
   1555c:	d1eb      	bne.n	15536 <encode_uint+0x5c>
			conv->altform_0c = true;
   1555e:	78ab      	ldrb	r3, [r5, #2]
   15560:	f043 0310 	orr.w	r3, r3, #16
   15564:	e7e6      	b.n	15534 <encode_uint+0x5a>

00015566 <outs>:
{
   15566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1556a:	4607      	mov	r7, r0
   1556c:	4688      	mov	r8, r1
   1556e:	4615      	mov	r5, r2
   15570:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   15572:	4614      	mov	r4, r2
   15574:	42b4      	cmp	r4, r6
   15576:	d305      	bcc.n	15584 <outs+0x1e>
   15578:	b10e      	cbz	r6, 1557e <outs+0x18>
	return (int)count;
   1557a:	1b60      	subs	r0, r4, r5
   1557c:	e008      	b.n	15590 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1557e:	7823      	ldrb	r3, [r4, #0]
   15580:	2b00      	cmp	r3, #0
   15582:	d0fa      	beq.n	1557a <outs+0x14>
		int rc = out((int)*sp++, ctx);
   15584:	f814 0b01 	ldrb.w	r0, [r4], #1
   15588:	4641      	mov	r1, r8
   1558a:	47b8      	blx	r7
		if (rc < 0) {
   1558c:	2800      	cmp	r0, #0
   1558e:	daf1      	bge.n	15574 <outs+0xe>
}
   15590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015594 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   15594:	b40f      	push	{r0, r1, r2, r3}
   15596:	b507      	push	{r0, r1, r2, lr}
   15598:	a904      	add	r1, sp, #16
   1559a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1559e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   155a0:	f7f5 f950 	bl	a844 <vprintk>

	va_end(ap);
}
   155a4:	b003      	add	sp, #12
   155a6:	f85d eb04 	ldr.w	lr, [sp], #4
   155aa:	b004      	add	sp, #16
   155ac:	4770      	bx	lr

000155ae <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   155ae:	4770      	bx	lr

000155b0 <abort_function>:
{
   155b0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   155b2:	2000      	movs	r0, #0
   155b4:	f7f5 fe14 	bl	b1e0 <sys_reboot>

000155b8 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   155b8:	f001 b8a8 	b.w	1670c <z_fatal_error>

000155bc <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   155bc:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   155be:	6800      	ldr	r0, [r0, #0]
   155c0:	f001 b8a4 	b.w	1670c <z_fatal_error>

000155c4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   155c4:	2100      	movs	r1, #0
   155c6:	2001      	movs	r0, #1
   155c8:	f7ff bff6 	b.w	155b8 <z_arm_fatal_error>

000155cc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   155cc:	b508      	push	{r3, lr}
	handler();
   155ce:	f7f6 f8bd 	bl	b74c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   155d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   155d6:	f7f6 b995 	b.w	b904 <z_arm_exc_exit>

000155da <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   155da:	3901      	subs	r1, #1
   155dc:	4603      	mov	r3, r0
   155de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   155e2:	b90a      	cbnz	r2, 155e8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   155e4:	701a      	strb	r2, [r3, #0]

	return dest;
}
   155e6:	4770      	bx	lr
		*d = *s;
   155e8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   155ec:	e7f7      	b.n	155de <strcpy+0x4>

000155ee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   155ee:	4603      	mov	r3, r0
	size_t n = 0;
   155f0:	2000      	movs	r0, #0

	while (*s != '\0') {
   155f2:	5c1a      	ldrb	r2, [r3, r0]
   155f4:	b902      	cbnz	r2, 155f8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   155f6:	4770      	bx	lr
		n++;
   155f8:	3001      	adds	r0, #1
   155fa:	e7fa      	b.n	155f2 <strlen+0x4>

000155fc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   155fc:	4603      	mov	r3, r0
	size_t n = 0;
   155fe:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   15600:	5c1a      	ldrb	r2, [r3, r0]
   15602:	b10a      	cbz	r2, 15608 <strnlen+0xc>
   15604:	4288      	cmp	r0, r1
   15606:	d100      	bne.n	1560a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   15608:	4770      	bx	lr
		n++;
   1560a:	3001      	adds	r0, #1
   1560c:	e7f8      	b.n	15600 <strnlen+0x4>

0001560e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1560e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   15610:	b15a      	cbz	r2, 1562a <memcmp+0x1c>
   15612:	3901      	subs	r1, #1
   15614:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   15616:	f810 2b01 	ldrb.w	r2, [r0], #1
   1561a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1561e:	42a0      	cmp	r0, r4
   15620:	d001      	beq.n	15626 <memcmp+0x18>
   15622:	429a      	cmp	r2, r3
   15624:	d0f7      	beq.n	15616 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   15626:	1ad0      	subs	r0, r2, r3
}
   15628:	bd10      	pop	{r4, pc}
		return 0;
   1562a:	4610      	mov	r0, r2
   1562c:	e7fc      	b.n	15628 <memcmp+0x1a>

0001562e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1562e:	1a43      	subs	r3, r0, r1
   15630:	4293      	cmp	r3, r2
{
   15632:	b510      	push	{r4, lr}
   15634:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   15638:	d308      	bcc.n	1564c <memmove+0x1e>
   1563a:	3901      	subs	r1, #1
	char *dest = d;
   1563c:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1563e:	429a      	cmp	r2, r3
   15640:	d00b      	beq.n	1565a <memmove+0x2c>
			*dest = *src;
   15642:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   15646:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1564a:	e7f8      	b.n	1563e <memmove+0x10>
   1564c:	440a      	add	r2, r1
			dest[n] = src[n];
   1564e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   15652:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   15656:	428a      	cmp	r2, r1
   15658:	d1f9      	bne.n	1564e <memmove+0x20>
		}
	}

	return d;
}
   1565a:	bd10      	pop	{r4, pc}

0001565c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1565c:	b510      	push	{r4, lr}
   1565e:	1e43      	subs	r3, r0, #1
   15660:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   15662:	4291      	cmp	r1, r2
   15664:	d100      	bne.n	15668 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   15666:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   15668:	f811 4b01 	ldrb.w	r4, [r1], #1
   1566c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   15670:	e7f7      	b.n	15662 <memcpy+0x6>

00015672 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   15672:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   15674:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   15676:	4603      	mov	r3, r0
	while (n > 0) {
   15678:	4293      	cmp	r3, r2
   1567a:	d100      	bne.n	1567e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1567c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1567e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   15682:	e7f9      	b.n	15678 <memset+0x6>

00015684 <_stdout_hook_default>:
}
   15684:	f04f 30ff 	mov.w	r0, #4294967295
   15688:	4770      	bx	lr

0001568a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1568a:	2806      	cmp	r0, #6
   1568c:	d108      	bne.n	156a0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1568e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15692:	2201      	movs	r2, #1
   15694:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   15698:	f3bf 8f4f 	dsb	sy
        __WFE();
   1569c:	bf20      	wfe
    while (true)
   1569e:	e7fd      	b.n	1569c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   156a0:	4770      	bx	lr

000156a2 <pm_state_exit_post_ops>:
   156a2:	2300      	movs	r3, #0
   156a4:	f383 8811 	msr	BASEPRI, r3
   156a8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   156ac:	4770      	bx	lr

000156ae <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   156ae:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   156b0:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   156b2:	2106      	movs	r1, #6
{
   156b4:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   156b6:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   156ba:	f7fa f961 	bl	f980 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   156be:	b918      	cbnz	r0, 156c8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   156c0:	79a3      	ldrb	r3, [r4, #6]
   156c2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   156c6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   156c8:	bd10      	pop	{r4, pc}

000156ca <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   156ca:	b510      	push	{r4, lr}
   156cc:	4604      	mov	r4, r0
   156ce:	2207      	movs	r2, #7
   156d0:	f7ff ffc4 	bl	1565c <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   156d4:	7823      	ldrb	r3, [r4, #0]
   156d6:	f023 0302 	bic.w	r3, r3, #2
   156da:	7023      	strb	r3, [r4, #0]
}
   156dc:	bd10      	pop	{r4, pc}

000156de <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   156de:	7800      	ldrb	r0, [r0, #0]
}
   156e0:	f3c0 0040 	ubfx	r0, r0, #1, #1
   156e4:	4770      	bx	lr

000156e6 <bt_data_parse>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   156e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   156e8:	4604      	mov	r4, r0
   156ea:	460e      	mov	r6, r1
   156ec:	4617      	mov	r7, r2
	while (ad->len > 1) {
   156ee:	88a3      	ldrh	r3, [r4, #4]
   156f0:	2b01      	cmp	r3, #1
   156f2:	d801      	bhi.n	156f8 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   156f4:	b003      	add	sp, #12
   156f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   156f8:	4620      	mov	r0, r4
   156fa:	f000 f8c8 	bl	1588e <net_buf_simple_pull_u8>
		if (len == 0U) {
   156fe:	4605      	mov	r5, r0
   15700:	2800      	cmp	r0, #0
   15702:	d0f7      	beq.n	156f4 <bt_data_parse+0xe>
		if (len > ad->len) {
   15704:	88a3      	ldrh	r3, [r4, #4]
   15706:	4283      	cmp	r3, r0
   15708:	d3f4      	bcc.n	156f4 <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   1570a:	4620      	mov	r0, r4
   1570c:	f000 f8bf 	bl	1588e <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   15710:	3d01      	subs	r5, #1
		data.data = ad->data;
   15712:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   15714:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   15718:	4639      	mov	r1, r7
   1571a:	4668      	mov	r0, sp
		data.data_len = len - 1;
   1571c:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   15720:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   15722:	47b0      	blx	r6
   15724:	2800      	cmp	r0, #0
   15726:	d0e5      	beq.n	156f4 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   15728:	4629      	mov	r1, r5
   1572a:	4620      	mov	r0, r4
   1572c:	f000 f89f 	bl	1586e <net_buf_simple_pull>
   15730:	e7dd      	b.n	156ee <bt_data_parse+0x8>

00015732 <hci_vendor_event>:
}
   15732:	4770      	bx	lr

00015734 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   15734:	2101      	movs	r1, #1
   15736:	300c      	adds	r0, #12
   15738:	f000 b8a1 	b.w	1587e <net_buf_simple_pull_mem>

0001573c <handle_event_common.isra.0>:
static int handle_event_common(uint8_t event, struct net_buf *buf,
   1573c:	b430      	push	{r4, r5}
   1573e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15742:	4604      	mov	r4, r0
   15744:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   15746:	429a      	cmp	r2, r3
   15748:	d101      	bne.n	1574e <handle_event_common.isra.0+0x12>
}
   1574a:	bc30      	pop	{r4, r5}
   1574c:	4770      	bx	lr
		if (handler->event != event) {
   1574e:	4611      	mov	r1, r2
   15750:	f811 5b08 	ldrb.w	r5, [r1], #8
   15754:	42a5      	cmp	r5, r4
   15756:	d106      	bne.n	15766 <handle_event_common.isra.0+0x2a>
		if (buf->len < handler->min_len) {
   15758:	8a01      	ldrh	r1, [r0, #16]
   1575a:	7853      	ldrb	r3, [r2, #1]
   1575c:	4299      	cmp	r1, r3
   1575e:	d3f4      	bcc.n	1574a <handle_event_common.isra.0+0xe>
}
   15760:	bc30      	pop	{r4, r5}
		handler->handler(buf);
   15762:	6853      	ldr	r3, [r2, #4]
   15764:	4718      	bx	r3
   15766:	460a      	mov	r2, r1
   15768:	e7ed      	b.n	15746 <handle_event_common.isra.0+0xa>

0001576a <bt_addr_le_eq>:
{
   1576a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1576c:	2207      	movs	r2, #7
   1576e:	f7ff ff4e 	bl	1560e <memcmp>
}
   15772:	fab0 f080 	clz	r0, r0
   15776:	0940      	lsrs	r0, r0, #5
   15778:	bd08      	pop	{r3, pc}

0001577a <bt_lookup_id_addr>:
	return addr;
   1577a:	2800      	cmp	r0, #0
}
   1577c:	bf0c      	ite	eq
   1577e:	4608      	moveq	r0, r1
   15780:	2000      	movne	r0, #0
   15782:	4770      	bx	lr

00015784 <bt_id_set_private_addr>:
{
   15784:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   15786:	b980      	cbnz	r0, 157aa <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   15788:	2106      	movs	r1, #6
   1578a:	4668      	mov	r0, sp
   1578c:	f7fa f8f8 	bl	f980 <bt_rand>
	if (err) {
   15790:	b940      	cbnz	r0, 157a4 <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   15792:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   15796:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   15798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1579c:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   157a0:	f7f7 f924 	bl	c9ec <set_random_address>
}
   157a4:	b003      	add	sp, #12
   157a6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   157aa:	f06f 0015 	mvn.w	r0, #21
   157ae:	e7f9      	b.n	157a4 <bt_id_set_private_addr+0x20>

000157b0 <bt_id_scan_random_addr_check>:
}
   157b0:	2001      	movs	r0, #1
   157b2:	4770      	bx	lr

000157b4 <atomic_and>:
{
   157b4:	b510      	push	{r4, lr}
   157b6:	4603      	mov	r3, r0
}
   157b8:	f3bf 8f5b 	dmb	ish
   157bc:	e853 0f00 	ldrex	r0, [r3]
   157c0:	ea00 0201 	and.w	r2, r0, r1
   157c4:	e843 2400 	strex	r4, r2, [r3]
   157c8:	2c00      	cmp	r4, #0
   157ca:	d1f7      	bne.n	157bc <atomic_and+0x8>
   157cc:	f3bf 8f5b 	dmb	ish
   157d0:	bd10      	pop	{r4, pc}

000157d2 <fixed_data_unref>:
}
   157d2:	4770      	bx	lr

000157d4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   157d4:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   157d6:	6849      	ldr	r1, [r1, #4]
   157d8:	6809      	ldr	r1, [r1, #0]
   157da:	f7f7 bc81 	b.w	d0e0 <net_buf_alloc_len>

000157de <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   157de:	f7fb bfdd 	b.w	1179c <z_impl_k_queue_get>

000157e2 <net_buf_slist_put>:
	__asm__ volatile(
   157e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   157e6:	f3ef 8211 	mrs	r2, BASEPRI
   157ea:	f383 8812 	msr	BASEPRI_MAX, r3
   157ee:	f3bf 8f6f 	isb	sy
	parent->next = child;
   157f2:	2300      	movs	r3, #0
   157f4:	600b      	str	r3, [r1, #0]
	return list->tail;
   157f6:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   157f8:	b933      	cbnz	r3, 15808 <net_buf_slist_put+0x26>
	list->head = node;
   157fa:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   157fe:	f382 8811 	msr	BASEPRI, r2
   15802:	f3bf 8f6f 	isb	sy
}
   15806:	4770      	bx	lr
	parent->next = child;
   15808:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1580a:	6041      	str	r1, [r0, #4]
}
   1580c:	e7f7      	b.n	157fe <net_buf_slist_put+0x1c>

0001580e <net_buf_slist_get>:
{
   1580e:	b510      	push	{r4, lr}
   15810:	4603      	mov	r3, r0
	__asm__ volatile(
   15812:	f04f 0240 	mov.w	r2, #64	; 0x40
   15816:	f3ef 8111 	mrs	r1, BASEPRI
   1581a:	f382 8812 	msr	BASEPRI_MAX, r2
   1581e:	f3bf 8f6f 	isb	sy
	return list->head;
   15822:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   15824:	b128      	cbz	r0, 15832 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15826:	685c      	ldr	r4, [r3, #4]
	return node->next;
   15828:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1582a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1582c:	42a0      	cmp	r0, r4
	list->tail = node;
   1582e:	bf08      	it	eq
   15830:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   15832:	f381 8811 	msr	BASEPRI, r1
   15836:	f3bf 8f6f 	isb	sy
}
   1583a:	bd10      	pop	{r4, pc}

0001583c <net_buf_put>:
	k_fifo_put(fifo, buf);
   1583c:	f001 b8f6 	b.w	16a2c <k_queue_append>

00015840 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   15840:	7a02      	ldrb	r2, [r0, #8]
   15842:	3201      	adds	r2, #1
   15844:	7202      	strb	r2, [r0, #8]
	return buf;
}
   15846:	4770      	bx	lr

00015848 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   15848:	6883      	ldr	r3, [r0, #8]
   1584a:	440b      	add	r3, r1
   1584c:	6003      	str	r3, [r0, #0]
}
   1584e:	4770      	bx	lr

00015850 <net_buf_simple_add>:
	return buf->data + buf->len;
   15850:	8883      	ldrh	r3, [r0, #4]
   15852:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   15854:	4419      	add	r1, r3
   15856:	8081      	strh	r1, [r0, #4]
	return tail;
}
   15858:	18d0      	adds	r0, r2, r3
   1585a:	4770      	bx	lr

0001585c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1585c:	b430      	push	{r4, r5}
   1585e:	8884      	ldrh	r4, [r0, #4]
   15860:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   15862:	18a3      	adds	r3, r4, r2
   15864:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   15866:	1928      	adds	r0, r5, r4
}
   15868:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1586a:	f7ff bef7 	b.w	1565c <memcpy>

0001586e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1586e:	8882      	ldrh	r2, [r0, #4]
   15870:	1a52      	subs	r2, r2, r1
{
   15872:	4603      	mov	r3, r0
	buf->len -= len;
   15874:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   15876:	6800      	ldr	r0, [r0, #0]
   15878:	4408      	add	r0, r1
   1587a:	6018      	str	r0, [r3, #0]
}
   1587c:	4770      	bx	lr

0001587e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1587e:	4603      	mov	r3, r0
	void *data = buf->data;
   15880:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   15882:	889a      	ldrh	r2, [r3, #4]
   15884:	1a52      	subs	r2, r2, r1
	buf->data += len;
   15886:	4401      	add	r1, r0
	buf->len -= len;
   15888:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1588a:	6019      	str	r1, [r3, #0]

	return data;
}
   1588c:	4770      	bx	lr

0001588e <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1588e:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   15890:	6803      	ldr	r3, [r0, #0]
   15892:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   15894:	2101      	movs	r1, #1
   15896:	f7ff ffea 	bl	1586e <net_buf_simple_pull>

	return val;
}
   1589a:	4620      	mov	r0, r4
   1589c:	bd10      	pop	{r4, pc}

0001589e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1589e:	6802      	ldr	r2, [r0, #0]
   158a0:	6880      	ldr	r0, [r0, #8]
}
   158a2:	1a10      	subs	r0, r2, r0
   158a4:	4770      	bx	lr

000158a6 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   158a6:	6903      	ldr	r3, [r0, #16]
   158a8:	b2c9      	uxtb	r1, r1
   158aa:	220c      	movs	r2, #12
   158ac:	fb01 3302 	mla	r3, r1, r2, r3
   158b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   158b2:	f000 0007 	and.w	r0, r0, #7
   158b6:	4770      	bx	lr

000158b8 <set_on_state>:
	__asm__ volatile(
   158b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   158bc:	f3ef 8211 	mrs	r2, BASEPRI
   158c0:	f383 8812 	msr	BASEPRI_MAX, r3
   158c4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   158c8:	6803      	ldr	r3, [r0, #0]
   158ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   158ce:	f043 0302 	orr.w	r3, r3, #2
   158d2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   158d4:	f382 8811 	msr	BASEPRI, r2
   158d8:	f3bf 8f6f 	isb	sy
}
   158dc:	4770      	bx	lr

000158de <stop>:
{
   158de:	b570      	push	{r4, r5, r6, lr}
   158e0:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   158e2:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   158e4:	f04f 0440 	mov.w	r4, #64	; 0x40
   158e8:	f3ef 8511 	mrs	r5, BASEPRI
   158ec:	f384 8812 	msr	BASEPRI_MAX, r4
   158f0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   158f4:	260c      	movs	r6, #12
   158f6:	fb06 3401 	mla	r4, r6, r1, r3
   158fa:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   158fc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   15900:	d008      	beq.n	15914 <stop+0x36>
   15902:	42a2      	cmp	r2, r4
   15904:	d006      	beq.n	15914 <stop+0x36>
	__asm__ volatile(
   15906:	f385 8811 	msr	BASEPRI, r5
   1590a:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1590e:	f04f 30ff 	mov.w	r0, #4294967295
}
   15912:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   15914:	fb06 3301 	mla	r3, r6, r1, r3
   15918:	2201      	movs	r2, #1
   1591a:	641a      	str	r2, [r3, #64]	; 0x40
   1591c:	f385 8811 	msr	BASEPRI, r5
   15920:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   15924:	6843      	ldr	r3, [r0, #4]
   15926:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1592a:	685b      	ldr	r3, [r3, #4]
   1592c:	4798      	blx	r3
	return 0;
   1592e:	2000      	movs	r0, #0
   15930:	e7ef      	b.n	15912 <stop+0x34>

00015932 <api_stop>:
	return stop(dev, subsys, CTX_API);
   15932:	2280      	movs	r2, #128	; 0x80
   15934:	f7ff bfd3 	b.w	158de <stop>

00015938 <async_start>:
{
   15938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1593a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1593c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1593e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   15940:	f04f 0540 	mov.w	r5, #64	; 0x40
   15944:	f3ef 8611 	mrs	r6, BASEPRI
   15948:	f385 8812 	msr	BASEPRI_MAX, r5
   1594c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15950:	250c      	movs	r5, #12
   15952:	fb05 4401 	mla	r4, r5, r1, r4
   15956:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   15958:	f005 0c07 	and.w	ip, r5, #7
   1595c:	f1bc 0f01 	cmp.w	ip, #1
   15960:	d10c      	bne.n	1597c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   15962:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   15964:	f386 8811 	msr	BASEPRI, r6
   15968:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1596c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   15970:	6843      	ldr	r3, [r0, #4]
   15972:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   15976:	4798      	blx	r3
	return 0;
   15978:	2000      	movs	r0, #0
}
   1597a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1597c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   15980:	42af      	cmp	r7, r5
   15982:	f386 8811 	msr	BASEPRI, r6
   15986:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1598a:	bf0c      	ite	eq
   1598c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   15990:	f04f 30ff 	movne.w	r0, #4294967295
   15994:	e7f1      	b.n	1597a <async_start+0x42>

00015996 <api_start>:
{
   15996:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   15998:	2480      	movs	r4, #128	; 0x80
   1599a:	9400      	str	r4, [sp, #0]
   1599c:	f7ff ffcc 	bl	15938 <async_start>
}
   159a0:	b002      	add	sp, #8
   159a2:	bd10      	pop	{r4, pc}

000159a4 <onoff_started_callback>:
{
   159a4:	b410      	push	{r4}
	return &data->mgr[type];
   159a6:	6900      	ldr	r0, [r0, #16]
   159a8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   159aa:	241c      	movs	r4, #28
   159ac:	fb03 0004 	mla	r0, r3, r4, r0
   159b0:	2100      	movs	r1, #0
}
   159b2:	bc10      	pop	{r4}
	notify(mgr, 0);
   159b4:	4710      	bx	r2

000159b6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   159b6:	2000      	movs	r0, #0
   159b8:	f7fa b854 	b.w	fa64 <nrfx_clock_start>

000159bc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   159bc:	2000      	movs	r0, #0
   159be:	f000 bd73 	b.w	164a8 <nrfx_clock_stop>

000159c2 <blocking_start_callback>:
{
   159c2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   159c4:	f7fb bf1e 	b.w	11804 <z_impl_k_sem_give>

000159c8 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   159c8:	2000      	movs	r0, #0
   159ca:	4770      	bx	lr

000159cc <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   159cc:	b538      	push	{r3, r4, r5, lr}
   159ce:	460c      	mov	r4, r1
   159d0:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   159d2:	f7f6 ffe7 	bl	c9a4 <bt_is_ready>
   159d6:	b128      	cbz	r0, 159e4 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   159d8:	4629      	mov	r1, r5
   159da:	4620      	mov	r0, r4
}
   159dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   159e0:	f7f6 bdf6 	b.w	c5d0 <bt_hci_le_rand>
}
   159e4:	f06f 000a 	mvn.w	r0, #10
   159e8:	bd38      	pop	{r3, r4, r5, pc}

000159ea <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   159ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   159ec:	460f      	mov	r7, r1
   159ee:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   159f0:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   159f4:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   159f6:	42a6      	cmp	r6, r4
   159f8:	d803      	bhi.n	15a02 <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   159fa:	d016      	beq.n	15a2a <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   159fc:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   159fe:	b003      	add	sp, #12
   15a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   15a02:	1b33      	subs	r3, r6, r4
   15a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   15a08:	bf38      	it	cc
   15a0a:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   15a0c:	462a      	mov	r2, r5
   15a0e:	ab01      	add	r3, sp, #4
   15a10:	1939      	adds	r1, r7, r4
   15a12:	2000      	movs	r0, #0
   15a14:	f7fc feac 	bl	12770 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   15a18:	b920      	cbnz	r0, 15a24 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   15a1a:	9b01      	ldr	r3, [sp, #4]
   15a1c:	42ab      	cmp	r3, r5
   15a1e:	d101      	bne.n	15a24 <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   15a20:	442c      	add	r4, r5
   15a22:	e7e8      	b.n	159f6 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   15a24:	f06f 0015 	mvn.w	r0, #21
   15a28:	e7e9      	b.n	159fe <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   15a2a:	2000      	movs	r0, #0
   15a2c:	e7e7      	b.n	159fe <entropy_cc3xx_rng_get_entropy+0x14>

00015a2e <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   15a2e:	2200      	movs	r2, #0
{
   15a30:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   15a32:	4611      	mov	r1, r2
   15a34:	4610      	mov	r0, r2
   15a36:	f7fc fe6b 	bl	12710 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   15a3a:	2800      	cmp	r0, #0
	}

	return 0;
}
   15a3c:	bf18      	it	ne
   15a3e:	f06f 0015 	mvnne.w	r0, #21
   15a42:	bd08      	pop	{r3, pc}

00015a44 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15a44:	6843      	ldr	r3, [r0, #4]
   15a46:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   15a48:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   15a4c:	600b      	str	r3, [r1, #0]
}
   15a4e:	2000      	movs	r0, #0
   15a50:	4770      	bx	lr

00015a52 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15a52:	6843      	ldr	r3, [r0, #4]
   15a54:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   15a56:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   15a5a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   15a5e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   15a62:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   15a66:	2000      	movs	r0, #0
   15a68:	4770      	bx	lr

00015a6a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15a6a:	6843      	ldr	r3, [r0, #4]
   15a6c:	685b      	ldr	r3, [r3, #4]
}
   15a6e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   15a70:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   15a74:	4770      	bx	lr

00015a76 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15a76:	6843      	ldr	r3, [r0, #4]
   15a78:	685b      	ldr	r3, [r3, #4]
}
   15a7a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   15a7c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   15a80:	4770      	bx	lr

00015a82 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15a82:	6843      	ldr	r3, [r0, #4]
   15a84:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   15a86:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   15a8a:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   15a8e:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   15a90:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   15a94:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   15a98:	2000      	movs	r0, #0
   15a9a:	4770      	bx	lr

00015a9c <gpio_nrfx_manage_callback>:
{
   15a9c:	b510      	push	{r4, lr}
	return port->data;
   15a9e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   15aa0:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   15aa2:	b1f8      	cbz	r0, 15ae4 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15aa4:	4288      	cmp	r0, r1
   15aa6:	d119      	bne.n	15adc <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   15aa8:	689c      	ldr	r4, [r3, #8]
	return node->next;
   15aaa:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   15aac:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15aae:	42a1      	cmp	r1, r4
   15ab0:	d100      	bne.n	15ab4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   15ab2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   15ab4:	2000      	movs	r0, #0
   15ab6:	6008      	str	r0, [r1, #0]
	if (set) {
   15ab8:	b12a      	cbz	r2, 15ac6 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   15aba:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   15abc:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   15abe:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   15ac0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   15ac2:	b902      	cbnz	r2, 15ac6 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   15ac4:	6099      	str	r1, [r3, #8]
	return 0;
   15ac6:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15ac8:	e010      	b.n	15aec <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15aca:	4281      	cmp	r1, r0
   15acc:	d106      	bne.n	15adc <gpio_nrfx_manage_callback+0x40>
	return node->next;
   15ace:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   15ad0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   15ad2:	6898      	ldr	r0, [r3, #8]
   15ad4:	4281      	cmp	r1, r0
   15ad6:	d1ed      	bne.n	15ab4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   15ad8:	609c      	str	r4, [r3, #8]
}
   15ada:	e7eb      	b.n	15ab4 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   15adc:	4604      	mov	r4, r0
   15ade:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15ae0:	2800      	cmp	r0, #0
   15ae2:	d1f2      	bne.n	15aca <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   15ae4:	2a00      	cmp	r2, #0
   15ae6:	d1e8      	bne.n	15aba <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   15ae8:	f06f 0015 	mvn.w	r0, #21
}
   15aec:	bd10      	pop	{r4, pc}

00015aee <i2s_nrfx_config_get>:
	if (dir == I2S_DIR_TX && drv_data->tx_configured) {
   15aee:	2901      	cmp	r1, #1
	struct i2s_nrfx_drv_data *drv_data = dev->data;
   15af0:	6903      	ldr	r3, [r0, #16]
	if (dir == I2S_DIR_TX && drv_data->tx_configured) {
   15af2:	d107      	bne.n	15b04 <i2s_nrfx_config_get+0x16>
   15af4:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
   15af8:	f010 0001 	ands.w	r0, r0, #1
   15afc:	d00c      	beq.n	15b18 <i2s_nrfx_config_get+0x2a>
		return &drv_data->tx.cfg;
   15afe:	f103 0014 	add.w	r0, r3, #20
   15b02:	4770      	bx	lr
	if (dir == I2S_DIR_RX && drv_data->rx_configured) {
   15b04:	b939      	cbnz	r1, 15b16 <i2s_nrfx_config_get+0x28>
   15b06:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
   15b0a:	f010 0002 	ands.w	r0, r0, #2
   15b0e:	d003      	beq.n	15b18 <i2s_nrfx_config_get+0x2a>
		return &drv_data->rx.cfg;
   15b10:	f103 006c 	add.w	r0, r3, #108	; 0x6c
   15b14:	4770      	bx	lr
	return NULL;
   15b16:	2000      	movs	r0, #0
}
   15b18:	4770      	bx	lr

00015b1a <clock_started_callback>:
	if (drv_data->state == I2S_STATE_READY) {
   15b1a:	f891 30c4 	ldrb.w	r3, [r1, #196]	; 0xc4
   15b1e:	2b01      	cmp	r3, #1
{
   15b20:	b510      	push	{r4, lr}
   15b22:	460c      	mov	r4, r1
	if (drv_data->state == I2S_STATE_READY) {
   15b24:	d107      	bne.n	15b36 <clock_started_callback+0x1c>
		nrfx_i2s_uninit();
   15b26:	f7fa fdd5 	bl	106d4 <nrfx_i2s_uninit>
		(void)onoff_release(drv_data->clk_mgr);
   15b2a:	f854 0c04 	ldr.w	r0, [r4, #-4]
}
   15b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)onoff_release(drv_data->clk_mgr);
   15b32:	f7ff bc80 	b.w	15436 <onoff_release>
}
   15b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)start_transfer(drv_data);
   15b3a:	1f08      	subs	r0, r1, #4
   15b3c:	f7f7 bfd2 	b.w	dae4 <start_transfer>

00015b40 <supply_next_buffers>:
{
   15b40:	b538      	push	{r3, r4, r5, lr}
	drv_data->last_tx_buffer = next->p_tx_buffer;
   15b42:	684b      	ldr	r3, [r1, #4]
   15b44:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	if (drv_data->active_dir != I2S_DIR_TX) { /* -> RX active */
   15b48:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
   15b4c:	2b01      	cmp	r3, #1
{
   15b4e:	4604      	mov	r4, r0
   15b50:	460d      	mov	r5, r1
	if (drv_data->active_dir != I2S_DIR_TX) { /* -> RX active */
   15b52:	d00d      	beq.n	15b70 <supply_next_buffers+0x30>
	int ret = k_mem_slab_alloc(drv_data->rx.cfg.mem_slab,
   15b54:	6f40      	ldr	r0, [r0, #116]	; 0x74
   15b56:	2200      	movs	r2, #0
   15b58:	2300      	movs	r3, #0
   15b5a:	f7fb fbb5 	bl	112c8 <k_mem_slab_alloc>
	if (ret < 0) {
   15b5e:	2800      	cmp	r0, #0
   15b60:	da06      	bge.n	15b70 <supply_next_buffers+0x30>
			drv_data->state = I2S_STATE_ERROR;
   15b62:	2304      	movs	r3, #4
   15b64:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
			nrfx_i2s_stop();
   15b68:	f7fa fda2 	bl	106b0 <nrfx_i2s_stop>
			return false;
   15b6c:	2000      	movs	r0, #0
}
   15b6e:	bd38      	pop	{r3, r4, r5, pc}
	nrfx_i2s_next_buffers_set(next);
   15b70:	4628      	mov	r0, r5
   15b72:	f7fa fd63 	bl	1063c <nrfx_i2s_next_buffers_set>
	return true;
   15b76:	2001      	movs	r0, #1
   15b78:	e7f9      	b.n	15b6e <supply_next_buffers+0x2e>

00015b7a <i2s_nrfx_write>:
{
   15b7a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct i2s_nrfx_drv_data *drv_data = dev->data;
   15b7c:	6900      	ldr	r0, [r0, #16]
{
   15b7e:	9101      	str	r1, [sp, #4]
	if (!drv_data->tx_configured) {
   15b80:	f890 30cd 	ldrb.w	r3, [r0, #205]	; 0xcd
   15b84:	07dc      	lsls	r4, r3, #31
   15b86:	d515      	bpl.n	15bb4 <i2s_nrfx_write+0x3a>
	if (drv_data->state != I2S_STATE_RUNNING &&
   15b88:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
   15b8c:	1e5c      	subs	r4, r3, #1
   15b8e:	2c01      	cmp	r4, #1
   15b90:	d810      	bhi.n	15bb4 <i2s_nrfx_write+0x3a>
	if (size != drv_data->tx.cfg.block_size) {
   15b92:	6a04      	ldr	r4, [r0, #32]
   15b94:	4294      	cmp	r4, r2
   15b96:	d10d      	bne.n	15bb4 <i2s_nrfx_write+0x3a>
	if (drv_data->state == I2S_STATE_RUNNING &&
   15b98:	2b02      	cmp	r3, #2
   15b9a:	d111      	bne.n	15bc0 <i2s_nrfx_write+0x46>
	    drv_data->next_tx_buffer_needed) {
   15b9c:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
	if (drv_data->state == I2S_STATE_RUNNING &&
   15ba0:	b173      	cbz	r3, 15bc0 <i2s_nrfx_write+0x46>
		nrfx_i2s_buffers_t next = { .p_tx_buffer = mem_block };
   15ba2:	2400      	movs	r4, #0
   15ba4:	e9cd 4102 	strd	r4, r1, [sp, #8]
		drv_data->next_tx_buffer_needed = false;
   15ba8:	f880 40cc 	strb.w	r4, [r0, #204]	; 0xcc
		if (!supply_next_buffers(drv_data, &next)) {
   15bac:	a902      	add	r1, sp, #8
   15bae:	f7ff ffc7 	bl	15b40 <supply_next_buffers>
   15bb2:	b918      	cbnz	r0, 15bbc <i2s_nrfx_write+0x42>
		return -EIO;
   15bb4:	f06f 0004 	mvn.w	r0, #4
}
   15bb8:	b004      	add	sp, #16
   15bba:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   15bbc:	4620      	mov	r0, r4
	    drv_data->next_tx_buffer_needed) {
   15bbe:	e7fb      	b.n	15bb8 <i2s_nrfx_write+0x3e>
				     SYS_TIMEOUT_MS(drv_data->tx.cfg.timeout));
   15bc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
		int ret = k_msgq_put(&drv_data->tx_queue,
   15bc2:	1c63      	adds	r3, r4, #1
   15bc4:	f100 053c 	add.w	r5, r0, #60	; 0x3c
   15bc8:	d016      	beq.n	15bf8 <i2s_nrfx_write+0x7e>
				     SYS_TIMEOUT_MS(drv_data->tx.cfg.timeout));
   15bca:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   15bce:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15bd2:	f240 30e7 	movw	r0, #999	; 0x3e7
   15bd6:	2100      	movs	r1, #0
   15bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15bdc:	2300      	movs	r3, #0
   15bde:	fbc4 0106 	smlal	r0, r1, r4, r6
   15be2:	f7ea fa8d 	bl	100 <__aeabi_uldivmod>
   15be6:	4602      	mov	r2, r0
   15be8:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   15bea:	a901      	add	r1, sp, #4
   15bec:	4628      	mov	r0, r5
   15bee:	f7fb fc6f 	bl	114d0 <z_impl_k_msgq_put>
		if (ret < 0) {
   15bf2:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   15bf6:	e7df      	b.n	15bb8 <i2s_nrfx_write+0x3e>
		int ret = k_msgq_put(&drv_data->tx_queue,
   15bf8:	f04f 32ff 	mov.w	r2, #4294967295
   15bfc:	4613      	mov	r3, r2
   15bfe:	e7f4      	b.n	15bea <i2s_nrfx_write+0x70>

00015c00 <purge_queue.isra.0>:
	if (dir == I2S_DIR_TX || dir == I2S_DIR_BOTH) {
   15c00:	1e4b      	subs	r3, r1, #1
   15c02:	2b01      	cmp	r3, #1
static void purge_queue(const struct device *dev, enum i2s_dir dir)
   15c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15c06:	4604      	mov	r4, r0
   15c08:	460d      	mov	r5, r1
	if (dir == I2S_DIR_TX || dir == I2S_DIR_BOTH) {
   15c0a:	d821      	bhi.n	15c50 <purge_queue.isra.0+0x50>
		while (k_msgq_get(&drv_data->tx_queue,
   15c0c:	f100 063c 	add.w	r6, r0, #60	; 0x3c
	return z_impl_k_msgq_get(msgq, data, timeout);
   15c10:	2200      	movs	r2, #0
   15c12:	2300      	movs	r3, #0
   15c14:	4669      	mov	r1, sp
   15c16:	4630      	mov	r0, r6
   15c18:	f7fb fcb0 	bl	1157c <z_impl_k_msgq_get>
				  K_NO_WAIT) == 0) {
   15c1c:	b188      	cbz	r0, 15c42 <purge_queue.isra.0+0x42>
	if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
   15c1e:	2d02      	cmp	r5, #2
   15c20:	d118      	bne.n	15c54 <purge_queue.isra.0+0x54>
		while (k_msgq_get(&drv_data->rx_queue,
   15c22:	f104 0594 	add.w	r5, r4, #148	; 0x94
   15c26:	2200      	movs	r2, #0
   15c28:	2300      	movs	r3, #0
   15c2a:	4669      	mov	r1, sp
   15c2c:	4628      	mov	r0, r5
   15c2e:	f7fb fca5 	bl	1157c <z_impl_k_msgq_get>
				  K_NO_WAIT) == 0) {
   15c32:	b978      	cbnz	r0, 15c54 <purge_queue.isra.0+0x54>
			free_rx_buffer(drv_data, mem_block);
   15c34:	9b00      	ldr	r3, [sp, #0]
	k_mem_slab_free(drv_data->rx.cfg.mem_slab, &buffer);
   15c36:	6f60      	ldr	r0, [r4, #116]	; 0x74
   15c38:	9301      	str	r3, [sp, #4]
   15c3a:	a901      	add	r1, sp, #4
   15c3c:	f000 fe1b 	bl	16876 <k_mem_slab_free>
	LOG_DBG("Freed RX %p", buffer);
   15c40:	e7f1      	b.n	15c26 <purge_queue.isra.0+0x26>
			free_tx_buffer(drv_data, mem_block);
   15c42:	9b00      	ldr	r3, [sp, #0]
	k_mem_slab_free(drv_data->tx.cfg.mem_slab, (void **)&buffer);
   15c44:	69e0      	ldr	r0, [r4, #28]
   15c46:	9301      	str	r3, [sp, #4]
   15c48:	a901      	add	r1, sp, #4
   15c4a:	f000 fe14 	bl	16876 <k_mem_slab_free>
	LOG_DBG("Freed TX %p", buffer);
   15c4e:	e7df      	b.n	15c10 <purge_queue.isra.0+0x10>
	if (dir == I2S_DIR_RX || dir == I2S_DIR_BOTH) {
   15c50:	2900      	cmp	r1, #0
   15c52:	d0e6      	beq.n	15c22 <purge_queue.isra.0+0x22>
}
   15c54:	b002      	add	sp, #8
   15c56:	bd70      	pop	{r4, r5, r6, pc}

00015c58 <i2s_nrfx_read>:
{
   15c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct i2s_nrfx_drv_data *drv_data = dev->data;
   15c5a:	6904      	ldr	r4, [r0, #16]
	if (!drv_data->rx_configured) {
   15c5c:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
{
   15c60:	460e      	mov	r6, r1
	if (!drv_data->rx_configured) {
   15c62:	0799      	lsls	r1, r3, #30
{
   15c64:	4615      	mov	r5, r2
	if (!drv_data->rx_configured) {
   15c66:	d402      	bmi.n	15c6e <i2s_nrfx_read+0x16>
		return -EIO;
   15c68:	f06f 0004 	mvn.w	r0, #4
}
   15c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ret = k_msgq_get(&drv_data->rx_queue,
   15c6e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   15c72:	2b04      	cmp	r3, #4
   15c74:	f104 0794 	add.w	r7, r4, #148	; 0x94
   15c78:	d01e      	beq.n	15cb8 <i2s_nrfx_read+0x60>
				: SYS_TIMEOUT_MS(drv_data->rx.cfg.timeout));
   15c7a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   15c7c:	1c5a      	adds	r2, r3, #1
   15c7e:	d01e      	beq.n	15cbe <i2s_nrfx_read+0x66>
   15c80:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   15c84:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   15c88:	f240 30e7 	movw	r0, #999	; 0x3e7
   15c8c:	2100      	movs	r1, #0
   15c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15c92:	2300      	movs	r3, #0
   15c94:	fbcc 010e 	smlal	r0, r1, ip, lr
   15c98:	f7ea fa32 	bl	100 <__aeabi_uldivmod>
   15c9c:	4602      	mov	r2, r0
   15c9e:	460b      	mov	r3, r1
   15ca0:	4631      	mov	r1, r6
   15ca2:	4638      	mov	r0, r7
   15ca4:	f7fb fc6a 	bl	1157c <z_impl_k_msgq_get>
	if (ret == -ENOMSG) {
   15ca8:	f110 0f23 	cmn.w	r0, #35	; 0x23
   15cac:	d0dc      	beq.n	15c68 <i2s_nrfx_read+0x10>
	if (ret == 0) {
   15cae:	2800      	cmp	r0, #0
   15cb0:	d1dc      	bne.n	15c6c <i2s_nrfx_read+0x14>
		*size = drv_data->rx.cfg.block_size;
   15cb2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   15cb4:	602b      	str	r3, [r5, #0]
   15cb6:	e7d9      	b.n	15c6c <i2s_nrfx_read+0x14>
	ret = k_msgq_get(&drv_data->rx_queue,
   15cb8:	2200      	movs	r2, #0
   15cba:	4613      	mov	r3, r2
   15cbc:	e7f0      	b.n	15ca0 <i2s_nrfx_read+0x48>
   15cbe:	f04f 32ff 	mov.w	r2, #4294967295
   15cc2:	e7fa      	b.n	15cba <i2s_nrfx_read+0x62>

00015cc4 <ws2812_strip_update_channels>:
}
   15cc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15cc8:	4770      	bx	lr

00015cca <ws2812_strip_update_rgb>:
{
   15cca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct ws2812_i2s_cfg *cfg = dev->config;
   15cce:	6844      	ldr	r4, [r0, #4]
{
   15cd0:	b085      	sub	sp, #20
	if (cfg->active_low) {
   15cd2:	f894 7020 	ldrb.w	r7, [r4, #32]
		sym_one = (~cfg->nibble_one) & 0x0F;
   15cd6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
		sym_zero = (~cfg->nibble_zero) & 0x0F;
   15cda:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
{
   15cde:	9201      	str	r2, [sp, #4]
   15ce0:	4688      	mov	r8, r1
	if (cfg->active_low) {
   15ce2:	b387      	cbz	r7, 15d46 <ws2812_strip_update_rgb+0x7c>
		sym_one = (~cfg->nibble_one) & 0x0F;
   15ce4:	43ed      	mvns	r5, r5
		sym_zero = (~cfg->nibble_zero) & 0x0F;
   15ce6:	43f6      	mvns	r6, r6
		sym_one = (~cfg->nibble_one) & 0x0F;
   15ce8:	f005 050f 	and.w	r5, r5, #15
		sym_zero = (~cfg->nibble_zero) & 0x0F;
   15cec:	f006 060f 	and.w	r6, r6, #15
		reset_word = 0xFFFFFFFF;
   15cf0:	f04f 37ff 	mov.w	r7, #4294967295
	ret = k_mem_slab_alloc(cfg->mem_slab, &mem_block, K_SECONDS(10));
   15cf4:	68a0      	ldr	r0, [r4, #8]
   15cf6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   15cfa:	2300      	movs	r3, #0
   15cfc:	a903      	add	r1, sp, #12
   15cfe:	f7fb fae3 	bl	112c8 <k_mem_slab_alloc>
	if (ret < 0) {
   15d02:	2800      	cmp	r0, #0
   15d04:	db78      	blt.n	15df8 <ws2812_strip_update_rgb+0x12e>
		*tx_buf = reset_word;
   15d06:	f8dd c00c 	ldr.w	ip, [sp, #12]
   15d0a:	f84c 7b04 	str.w	r7, [ip], #4
		tx_buf++;
   15d0e:	f04f 0a00 	mov.w	sl, #0
	for (uint16_t i = 0; i < num_pixels; i++) {
   15d12:	9b01      	ldr	r3, [sp, #4]
   15d14:	fa1f fe8a 	uxth.w	lr, sl
   15d18:	4573      	cmp	r3, lr
   15d1a:	d84d      	bhi.n	15db8 <ws2812_strip_update_rgb+0xee>
   15d1c:	2300      	movs	r3, #0
	for (uint16_t i = 0; i < cfg->reset_words; i++) {
   15d1e:	8aa1      	ldrh	r1, [r4, #20]
   15d20:	b29a      	uxth	r2, r3
   15d22:	4291      	cmp	r1, r2
   15d24:	d84b      	bhi.n	15dbe <ws2812_strip_update_rgb+0xf4>
	ret = i2s_write(cfg->dev, mem_block, cfg->tx_buf_bytes);
   15d26:	6820      	ldr	r0, [r4, #0]
			    size_t size)
{
	const struct i2s_driver_api *api =
		(const struct i2s_driver_api *)dev->api;

	return api->write(dev, mem_block, size);
   15d28:	6862      	ldr	r2, [r4, #4]
   15d2a:	6883      	ldr	r3, [r0, #8]
   15d2c:	9903      	ldr	r1, [sp, #12]
   15d2e:	68db      	ldr	r3, [r3, #12]
   15d30:	4798      	blx	r3
	if (ret < 0) {
   15d32:	1e05      	subs	r5, r0, #0
   15d34:	da47      	bge.n	15dc6 <ws2812_strip_update_rgb+0xfc>
		k_mem_slab_free(cfg->mem_slab, &mem_block);
   15d36:	68a0      	ldr	r0, [r4, #8]
   15d38:	a903      	add	r1, sp, #12
   15d3a:	f000 fd9c 	bl	16876 <k_mem_slab_free>
}
   15d3e:	4628      	mov	r0, r5
   15d40:	b005      	add	sp, #20
   15d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sym_one = cfg->nibble_one & 0x0F;
   15d46:	f005 050f 	and.w	r5, r5, #15
		sym_zero = cfg->nibble_zero & 0x0F;
   15d4a:	f006 060f 	and.w	r6, r6, #15
		reset_word = 0;
   15d4e:	e7d1      	b.n	15cf4 <ws2812_strip_update_rgb+0x2a>
			switch (cfg->color_mapping[j]) {
   15d50:	6923      	ldr	r3, [r4, #16]
   15d52:	f813 0009 	ldrb.w	r0, [r3, r9]
   15d56:	2803      	cmp	r0, #3
   15d58:	d851      	bhi.n	15dfe <ws2812_strip_update_rgb+0x134>
   15d5a:	e8df f000 	tbb	[pc, r0]
   15d5e:	0205      	.short	0x0205
   15d60:	2925      	.short	0x2925
				pixel = pixels[i].r;
   15d62:	eb08 038e 	add.w	r3, r8, lr, lsl #2
   15d66:	7858      	ldrb	r0, [r3, #1]
		reset_word = 0;
   15d68:	2200      	movs	r2, #0
   15d6a:	4613      	mov	r3, r2
		if ((1 << i) & color) {
   15d6c:	fa40 fb02 	asr.w	fp, r0, r2
			*word |= sym_one << (i * 4);
   15d70:	0091      	lsls	r1, r2, #2
		if ((1 << i) & color) {
   15d72:	f01b 0f01 	tst.w	fp, #1
	for (uint16_t i = 0; i < 8; i++) {
   15d76:	f102 0201 	add.w	r2, r2, #1
			*word |= sym_one << (i * 4);
   15d7a:	bf14      	ite	ne
   15d7c:	fa05 f101 	lslne.w	r1, r5, r1
			*word |= sym_zero << (i * 4);
   15d80:	fa06 f101 	lsleq.w	r1, r6, r1
	for (uint16_t i = 0; i < 8; i++) {
   15d84:	2a08      	cmp	r2, #8
			*word |= sym_zero << (i * 4);
   15d86:	ea43 0301 	orr.w	r3, r3, r1
	for (uint16_t i = 0; i < 8; i++) {
   15d8a:	d1ef      	bne.n	15d6c <ws2812_strip_update_rgb+0xa2>
	*word = (*word >> 16) | (*word << 16);
   15d8c:	ea4f 4333 	mov.w	r3, r3, ror #16
   15d90:	f84c 3b04 	str.w	r3, [ip], #4
		for (uint16_t j = 0; j < cfg->num_colors; j++) {
   15d94:	f109 0901 	add.w	r9, r9, #1
   15d98:	7b22      	ldrb	r2, [r4, #12]
   15d9a:	fa1f f389 	uxth.w	r3, r9
   15d9e:	429a      	cmp	r2, r3
   15da0:	d8d6      	bhi.n	15d50 <ws2812_strip_update_rgb+0x86>
	for (uint16_t i = 0; i < num_pixels; i++) {
   15da2:	f10a 0a01 	add.w	sl, sl, #1
   15da6:	e7b4      	b.n	15d12 <ws2812_strip_update_rgb+0x48>
				pixel = pixels[i].g;
   15da8:	eb08 038e 	add.w	r3, r8, lr, lsl #2
   15dac:	7898      	ldrb	r0, [r3, #2]
				break;
   15dae:	e7db      	b.n	15d68 <ws2812_strip_update_rgb+0x9e>
				pixel = pixels[i].b;
   15db0:	eb08 038e 	add.w	r3, r8, lr, lsl #2
   15db4:	78d8      	ldrb	r0, [r3, #3]
				break;
   15db6:	e7d7      	b.n	15d68 <ws2812_strip_update_rgb+0x9e>
   15db8:	f04f 0900 	mov.w	r9, #0
   15dbc:	e7ec      	b.n	15d98 <ws2812_strip_update_rgb+0xce>
		*tx_buf = reset_word;
   15dbe:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
	for (uint16_t i = 0; i < cfg->reset_words; i++) {
   15dc2:	3301      	adds	r3, #1
   15dc4:	e7ab      	b.n	15d1e <ws2812_strip_update_rgb+0x54>
	ret = i2s_trigger(cfg->dev, I2S_DIR_TX, I2S_TRIGGER_START);
   15dc6:	6820      	ldr	r0, [r4, #0]
				     enum i2s_trigger_cmd cmd)
{
	const struct i2s_driver_api *api =
		(const struct i2s_driver_api *)dev->api;

	return api->trigger(dev, dir, cmd);
   15dc8:	6883      	ldr	r3, [r0, #8]
   15dca:	2200      	movs	r2, #0
   15dcc:	691b      	ldr	r3, [r3, #16]
   15dce:	2101      	movs	r1, #1
   15dd0:	4798      	blx	r3
	if (ret < 0) {
   15dd2:	1e05      	subs	r5, r0, #0
   15dd4:	dbb3      	blt.n	15d3e <ws2812_strip_update_rgb+0x74>
	ret = i2s_trigger(cfg->dev, I2S_DIR_TX, I2S_TRIGGER_DRAIN);
   15dd6:	6820      	ldr	r0, [r4, #0]
   15dd8:	6883      	ldr	r3, [r0, #8]
   15dda:	2202      	movs	r2, #2
   15ddc:	691b      	ldr	r3, [r3, #16]
   15dde:	2101      	movs	r1, #1
   15de0:	4798      	blx	r3
	if (ret < 0) {
   15de2:	1e05      	subs	r5, r0, #0
   15de4:	dbab      	blt.n	15d3e <ws2812_strip_update_rgb+0x74>
	flush_time_us = cfg->lrck_period * cfg->tx_buf_bytes / sizeof(uint32_t);
   15de6:	69a3      	ldr	r3, [r4, #24]
   15de8:	6862      	ldr	r2, [r4, #4]
	k_usleep(flush_time_us + cfg->extra_wait_time_us);
   15dea:	69e0      	ldr	r0, [r4, #28]
	flush_time_us = cfg->lrck_period * cfg->tx_buf_bytes / sizeof(uint32_t);
   15dec:	4353      	muls	r3, r2
	k_usleep(flush_time_us + cfg->extra_wait_time_us);
   15dee:	eb00 0093 	add.w	r0, r0, r3, lsr #2
	return z_impl_k_usleep(us);
   15df2:	f7fc f987 	bl	12104 <z_impl_k_usleep>
   15df6:	e7a2      	b.n	15d3e <ws2812_strip_update_rgb+0x74>
		return -ENOMEM;
   15df8:	f06f 050b 	mvn.w	r5, #11
   15dfc:	e79f      	b.n	15d3e <ws2812_strip_update_rgb+0x74>
			switch (cfg->color_mapping[j]) {
   15dfe:	f06f 0515 	mvn.w	r5, #21
   15e02:	e79c      	b.n	15d3e <ws2812_strip_update_rgb+0x74>

00015e04 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   15e04:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   15e06:	6843      	ldr	r3, [r0, #4]
   15e08:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   15e0a:	7a05      	ldrb	r5, [r0, #8]
   15e0c:	6844      	ldr	r4, [r0, #4]
   15e0e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   15e12:	42a3      	cmp	r3, r4
   15e14:	d302      	bcc.n	15e1c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   15e16:	f06f 0001 	mvn.w	r0, #1
}
   15e1a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   15e1c:	795c      	ldrb	r4, [r3, #5]
   15e1e:	428c      	cmp	r4, r1
   15e20:	d001      	beq.n	15e26 <pinctrl_lookup_state+0x22>
		(*state)++;
   15e22:	3308      	adds	r3, #8
   15e24:	e7f0      	b.n	15e08 <pinctrl_lookup_state+0x4>
			return 0;
   15e26:	2000      	movs	r0, #0
   15e28:	e7f7      	b.n	15e1a <pinctrl_lookup_state+0x16>

00015e2a <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   15e2a:	6902      	ldr	r2, [r0, #16]
{
   15e2c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   15e2e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   15e32:	e883 0003 	stmia.w	r3, {r0, r1}
}
   15e36:	2000      	movs	r0, #0
   15e38:	4770      	bx	lr

00015e3a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15e3a:	6843      	ldr	r3, [r0, #4]
   15e3c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15e3e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   15e42:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   15e46:	4770      	bx	lr

00015e48 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15e48:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   15e4a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   15e4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15e52:	b150      	cbz	r0, 15e6a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   15e54:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e56:	2000      	movs	r0, #0
   15e58:	7812      	ldrb	r2, [r2, #0]
   15e5a:	700a      	strb	r2, [r1, #0]
   15e5c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   15e60:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e64:	2201      	movs	r2, #1
   15e66:	601a      	str	r2, [r3, #0]
	return 0;
   15e68:	4770      	bx	lr
		return -1;
   15e6a:	f04f 30ff 	mov.w	r0, #4294967295
}
   15e6e:	4770      	bx	lr

00015e70 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   15e70:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   15e72:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e74:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15e78:	b940      	cbnz	r0, 15e8c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   15e7a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15e7c:	079b      	lsls	r3, r3, #30
   15e7e:	d406      	bmi.n	15e8e <is_tx_ready.isra.0+0x1e>
   15e80:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   15e84:	3800      	subs	r0, #0
   15e86:	bf18      	it	ne
   15e88:	2001      	movne	r0, #1
   15e8a:	4770      	bx	lr
   15e8c:	2001      	movs	r0, #1
}
   15e8e:	4770      	bx	lr

00015e90 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   15e90:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   15e92:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   15e94:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   15e98:	05c9      	lsls	r1, r1, #23
   15e9a:	d518      	bpl.n	15ece <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   15ea0:	b1a9      	cbz	r1, 15ece <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   15ea2:	f04f 0040 	mov.w	r0, #64	; 0x40
   15ea6:	f3ef 8111 	mrs	r1, BASEPRI
   15eaa:	f380 8812 	msr	BASEPRI_MAX, r0
   15eae:	f3bf 8f6f 	isb	sy
   15eb2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   15eb6:	b130      	cbz	r0, 15ec6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15eb8:	2000      	movs	r0, #0
   15eba:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   15ebe:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ec2:	2001      	movs	r0, #1
   15ec4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   15ec6:	f381 8811 	msr	BASEPRI, r1
   15eca:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15ece:	6852      	ldr	r2, [r2, #4]
   15ed0:	06d2      	lsls	r2, r2, #27
   15ed2:	d515      	bpl.n	15f00 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   15ed4:	f04f 0140 	mov.w	r1, #64	; 0x40
   15ed8:	f3ef 8211 	mrs	r2, BASEPRI
   15edc:	f381 8812 	msr	BASEPRI_MAX, r1
   15ee0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15ee4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   15ee8:	b111      	cbz	r1, 15ef0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15eea:	2100      	movs	r1, #0
   15eec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   15ef0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   15ef4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   15ef8:	f382 8811 	msr	BASEPRI, r2
   15efc:	f3bf 8f6f 	isb	sy
}
   15f00:	4770      	bx	lr

00015f02 <irq_connect1>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEFINE(1);
   15f02:	2200      	movs	r2, #0
   15f04:	2101      	movs	r1, #1
   15f06:	2004      	movs	r0, #4
   15f08:	f7f5 bbf8 	b.w	b6fc <z_arm_irq_priority_set>

00015f0c <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   15f0c:	b510      	push	{r4, lr}
	while (*count) {
   15f0e:	680b      	ldr	r3, [r1, #0]
   15f10:	b913      	cbnz	r3, 15f18 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   15f12:	6013      	str	r3, [r2, #0]
	return NULL;
   15f14:	4618      	mov	r0, r3
   15f16:	e005      	b.n	15f24 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   15f18:	6803      	ldr	r3, [r0, #0]
   15f1a:	685c      	ldr	r4, [r3, #4]
   15f1c:	b11c      	cbz	r4, 15f26 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   15f1e:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   15f20:	6803      	ldr	r3, [r0, #0]
   15f22:	6818      	ldr	r0, [r3, #0]
}
   15f24:	bd10      	pop	{r4, pc}
		++(*current);
   15f26:	3308      	adds	r3, #8
   15f28:	6003      	str	r3, [r0, #0]
		--(*count);
   15f2a:	680b      	ldr	r3, [r1, #0]
   15f2c:	3b01      	subs	r3, #1
   15f2e:	600b      	str	r3, [r1, #0]
   15f30:	e7ed      	b.n	15f0e <spi_context_get_next_buf.constprop.0+0x2>

00015f32 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   15f32:	4603      	mov	r3, r0
   15f34:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
   15f36:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   15f38:	7919      	ldrb	r1, [r3, #4]
   15f3a:	2301      	movs	r3, #1
   15f3c:	fa03 f101 	lsl.w	r1, r3, r1
   15f40:	6903      	ldr	r3, [r0, #16]
   15f42:	681b      	ldr	r3, [r3, #0]
   15f44:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   15f46:	bf18      	it	ne
   15f48:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   15f4c:	b112      	cbz	r2, 15f54 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   15f4e:	6883      	ldr	r3, [r0, #8]
   15f50:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   15f52:	4718      	bx	r3
   15f54:	6883      	ldr	r3, [r0, #8]
   15f56:	691b      	ldr	r3, [r3, #16]
   15f58:	e7fb      	b.n	15f52 <gpio_pin_set_dt.isra.0+0x20>

00015f5a <_spi_context_cs_control>:
{
   15f5a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   15f5c:	6803      	ldr	r3, [r0, #0]
{
   15f5e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   15f60:	b1e3      	cbz	r3, 15f9c <_spi_context_cs_control+0x42>
   15f62:	6898      	ldr	r0, [r3, #8]
   15f64:	b1d0      	cbz	r0, 15f9c <_spi_context_cs_control+0x42>
   15f66:	6805      	ldr	r5, [r0, #0]
   15f68:	b1c5      	cbz	r5, 15f9c <_spi_context_cs_control+0x42>
		if (on) {
   15f6a:	b149      	cbz	r1, 15f80 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   15f6c:	2101      	movs	r1, #1
   15f6e:	f7ff ffe0 	bl	15f32 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   15f72:	6823      	ldr	r3, [r4, #0]
   15f74:	689b      	ldr	r3, [r3, #8]
   15f76:	6898      	ldr	r0, [r3, #8]
}
   15f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   15f7c:	f000 bee1 	b.w	16d42 <z_impl_k_busy_wait>
			if (!force_off &&
   15f80:	b912      	cbnz	r2, 15f88 <_spi_context_cs_control+0x2e>
   15f82:	889b      	ldrh	r3, [r3, #4]
   15f84:	04db      	lsls	r3, r3, #19
   15f86:	d409      	bmi.n	15f9c <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   15f88:	6880      	ldr	r0, [r0, #8]
   15f8a:	f000 feda 	bl	16d42 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   15f8e:	6823      	ldr	r3, [r4, #0]
   15f90:	2100      	movs	r1, #0
   15f92:	6898      	ldr	r0, [r3, #8]
}
   15f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   15f98:	f7ff bfcb 	b.w	15f32 <gpio_pin_set_dt.isra.0>
}
   15f9c:	bd38      	pop	{r3, r4, r5, pc}

00015f9e <spi_context_unlock_unconditionally>:
{
   15f9e:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   15fa0:	2201      	movs	r2, #1
   15fa2:	2100      	movs	r1, #0
{
   15fa4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   15fa6:	f7ff ffd8 	bl	15f5a <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   15faa:	69a3      	ldr	r3, [r4, #24]
   15fac:	b933      	cbnz	r3, 15fbc <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   15fae:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   15fb0:	f104 0010 	add.w	r0, r4, #16
}
   15fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15fb8:	f7fb bc24 	b.w	11804 <z_impl_k_sem_give>
   15fbc:	bd10      	pop	{r4, pc}

00015fbe <spi_nrfx_release>:
{
   15fbe:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   15fc0:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   15fc2:	6803      	ldr	r3, [r0, #0]
   15fc4:	428b      	cmp	r3, r1
   15fc6:	d106      	bne.n	15fd6 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   15fc8:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   15fcc:	b934      	cbnz	r4, 15fdc <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   15fce:	f7ff ffe6 	bl	15f9e <spi_context_unlock_unconditionally>
	return 0;
   15fd2:	4620      	mov	r0, r4
}
   15fd4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   15fd6:	f06f 0015 	mvn.w	r0, #21
   15fda:	e7fb      	b.n	15fd4 <spi_nrfx_release+0x16>
		return -EBUSY;
   15fdc:	f06f 000f 	mvn.w	r0, #15
   15fe0:	e7f8      	b.n	15fd4 <spi_nrfx_release+0x16>

00015fe2 <spi_nrfx_init>:
{
   15fe2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   15fe6:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   15fe8:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   15fea:	6a26      	ldr	r6, [r4, #32]
	ret = pinctrl_lookup_state(config, id, &state);
   15fec:	aa01      	add	r2, sp, #4
   15fee:	2100      	movs	r1, #0
   15ff0:	4630      	mov	r0, r6
   15ff2:	f7ff ff07 	bl	15e04 <pinctrl_lookup_state>
	if (ret < 0) {
   15ff6:	2800      	cmp	r0, #0
   15ff8:	db43      	blt.n	16082 <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
   15ffa:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   15ffc:	6832      	ldr	r2, [r6, #0]
   15ffe:	7919      	ldrb	r1, [r3, #4]
   16000:	6818      	ldr	r0, [r3, #0]
   16002:	f7f8 f8d5 	bl	e1b0 <pinctrl_configure_pins>
	if (err < 0) {
   16006:	2800      	cmp	r0, #0
   16008:	db3b      	blt.n	16082 <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
   1600a:	69e3      	ldr	r3, [r4, #28]
   1600c:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   1600e:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16010:	2601      	movs	r6, #1
   16012:	3408      	adds	r4, #8
   16014:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   16018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1601c:	f1a4 0208 	sub.w	r2, r4, #8
   16020:	4293      	cmp	r3, r2
   16022:	d804      	bhi.n	1602e <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   16024:	4628      	mov	r0, r5
   16026:	f7ff ffba 	bl	15f9e <spi_context_unlock_unconditionally>
	return 0;
   1602a:	2000      	movs	r0, #0
	return 0;
   1602c:	e029      	b.n	16082 <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
   1602e:	f854 0c08 	ldr.w	r0, [r4, #-8]
   16032:	f000 fb60 	bl	166f6 <z_device_is_ready>
   16036:	b338      	cbz	r0, 16088 <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
   16038:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
   1603c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   16040:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   16044:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   16048:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1604c:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   16050:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   16052:	bf54      	ite	pl
   16054:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   16058:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1605c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16060:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   16064:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16066:	bf4c      	ite	mi
   16068:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1606c:	ea27 070e 	bicpl.w	r7, r7, lr
   16070:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   16074:	f8d8 3000 	ldr.w	r3, [r8]
   16078:	4798      	blx	r3
		if (ret < 0) {
   1607a:	2800      	cmp	r0, #0
   1607c:	f104 0408 	add.w	r4, r4, #8
   16080:	dac8      	bge.n	16014 <spi_nrfx_init+0x32>
}
   16082:	b002      	add	sp, #8
   16084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   16088:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
   1608c:	e7f9      	b.n	16082 <spi_nrfx_init+0xa0>

0001608e <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
   1608e:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
   16090:	2200      	movs	r2, #0
   16092:	4604      	mov	r4, r0
   16094:	460d      	mov	r5, r1
   16096:	4611      	mov	r1, r2
   16098:	f7ff ff5f 	bl	15f5a <_spi_context_cs_control>
	ctx->sync_status = status;
   1609c:	6425      	str	r5, [r4, #64]	; 0x40
   1609e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   160a2:	f7fb fbaf 	bl	11804 <z_impl_k_sem_give>
	dev_data->busy = false;
   160a6:	2300      	movs	r3, #0
   160a8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   160ac:	bd38      	pop	{r3, r4, r5, pc}

000160ae <event_handler>:
{
   160ae:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   160b0:	7803      	ldrb	r3, [r0, #0]
{
   160b2:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   160b4:	2b00      	cmp	r3, #0
   160b6:	d145      	bne.n	16144 <event_handler+0x96>
		if (dev_data->chunk_len == 0) {
   160b8:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   160ba:	b93d      	cbnz	r5, 160cc <event_handler+0x1e>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
   160bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   160be:	f06f 0173 	mvn.w	r1, #115	; 0x73
   160c2:	6918      	ldr	r0, [r3, #16]
}
   160c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
   160c8:	f7ff bfe1 	b.w	1608e <finish_transaction.isra.0>
	if (!ctx->tx_len) {
   160cc:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   160ce:	b193      	cbz	r3, 160f6 <event_handler+0x48>
	if (len > ctx->tx_len) {
   160d0:	429d      	cmp	r5, r3
   160d2:	d810      	bhi.n	160f6 <event_handler+0x48>
	ctx->tx_len -= len;
   160d4:	1b5b      	subs	r3, r3, r5
   160d6:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   160d8:	bb43      	cbnz	r3, 1612c <event_handler+0x7e>
		++ctx->current_tx;
   160da:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   160dc:	3308      	adds	r3, #8
   160de:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   160e0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   160e2:	3b01      	subs	r3, #1
   160e4:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   160e6:	f101 0258 	add.w	r2, r1, #88	; 0x58
   160ea:	f104 0044 	add.w	r0, r4, #68	; 0x44
   160ee:	3148      	adds	r1, #72	; 0x48
   160f0:	f7ff ff0c 	bl	15f0c <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   160f4:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   160f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   160f8:	b19b      	cbz	r3, 16122 <event_handler+0x74>
	if (len > ctx->rx_len) {
   160fa:	429d      	cmp	r5, r3
   160fc:	d811      	bhi.n	16122 <event_handler+0x74>
	ctx->rx_len -= len;
   160fe:	1b5b      	subs	r3, r3, r5
   16100:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   16102:	b9cb      	cbnz	r3, 16138 <event_handler+0x8a>
		++ctx->current_rx;
   16104:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   16106:	3308      	adds	r3, #8
   16108:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1610a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1610c:	3b01      	subs	r3, #1
   1610e:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   16110:	f104 0260 	add.w	r2, r4, #96	; 0x60
   16114:	f104 0150 	add.w	r1, r4, #80	; 0x50
   16118:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1611c:	f7ff fef6 	bl	15f0c <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   16120:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   16122:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   16124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
   16128:	f7f8 baa8 	b.w	e67c <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   1612c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   1612e:	2b00      	cmp	r3, #0
   16130:	d0e1      	beq.n	160f6 <event_handler+0x48>
		ctx->tx_buf += dfs * len;
   16132:	442b      	add	r3, r5
   16134:	654b      	str	r3, [r1, #84]	; 0x54
   16136:	e7de      	b.n	160f6 <event_handler+0x48>
	} else if (ctx->rx_buf) {
   16138:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1613a:	2b00      	cmp	r3, #0
   1613c:	d0f1      	beq.n	16122 <event_handler+0x74>
		ctx->rx_buf += dfs * len;
   1613e:	442b      	add	r3, r5
   16140:	65e3      	str	r3, [r4, #92]	; 0x5c
   16142:	e7ee      	b.n	16122 <event_handler+0x74>
}
   16144:	bd38      	pop	{r3, r4, r5, pc}

00016146 <irq_connect3>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   16146:	2200      	movs	r2, #0
   16148:	2101      	movs	r1, #1
   1614a:	202f      	movs	r0, #47	; 0x2f
   1614c:	f7f5 bad6 	b.w	b6fc <z_arm_irq_priority_set>

00016150 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   16150:	b510      	push	{r4, lr}
	while (*count) {
   16152:	680b      	ldr	r3, [r1, #0]
   16154:	b913      	cbnz	r3, 1615c <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   16156:	6013      	str	r3, [r2, #0]
	return NULL;
   16158:	4618      	mov	r0, r3
   1615a:	e005      	b.n	16168 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   1615c:	6803      	ldr	r3, [r0, #0]
   1615e:	685c      	ldr	r4, [r3, #4]
   16160:	b11c      	cbz	r4, 1616a <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   16162:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   16164:	6803      	ldr	r3, [r0, #0]
   16166:	6818      	ldr	r0, [r3, #0]
}
   16168:	bd10      	pop	{r4, pc}
		++(*current);
   1616a:	3308      	adds	r3, #8
   1616c:	6003      	str	r3, [r0, #0]
		--(*count);
   1616e:	680b      	ldr	r3, [r1, #0]
   16170:	3b01      	subs	r3, #1
   16172:	600b      	str	r3, [r1, #0]
   16174:	e7ed      	b.n	16152 <spi_context_get_next_buf.constprop.0+0x2>

00016176 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   16176:	4603      	mov	r3, r0
   16178:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1617a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1617c:	7919      	ldrb	r1, [r3, #4]
   1617e:	2301      	movs	r3, #1
   16180:	fa03 f101 	lsl.w	r1, r3, r1
   16184:	6903      	ldr	r3, [r0, #16]
   16186:	681b      	ldr	r3, [r3, #0]
   16188:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1618a:	bf18      	it	ne
   1618c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   16190:	b112      	cbz	r2, 16198 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
   16192:	6883      	ldr	r3, [r0, #8]
   16194:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   16196:	4718      	bx	r3
   16198:	6883      	ldr	r3, [r0, #8]
   1619a:	691b      	ldr	r3, [r3, #16]
   1619c:	e7fb      	b.n	16196 <gpio_pin_set_dt.isra.0+0x20>

0001619e <_spi_context_cs_control>:
{
   1619e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   161a0:	6803      	ldr	r3, [r0, #0]
{
   161a2:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   161a4:	b1e3      	cbz	r3, 161e0 <_spi_context_cs_control+0x42>
   161a6:	6898      	ldr	r0, [r3, #8]
   161a8:	b1d0      	cbz	r0, 161e0 <_spi_context_cs_control+0x42>
   161aa:	6805      	ldr	r5, [r0, #0]
   161ac:	b1c5      	cbz	r5, 161e0 <_spi_context_cs_control+0x42>
		if (on) {
   161ae:	b149      	cbz	r1, 161c4 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   161b0:	2101      	movs	r1, #1
   161b2:	f7ff ffe0 	bl	16176 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   161b6:	6823      	ldr	r3, [r4, #0]
   161b8:	689b      	ldr	r3, [r3, #8]
   161ba:	6898      	ldr	r0, [r3, #8]
}
   161bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   161c0:	f000 bdbf 	b.w	16d42 <z_impl_k_busy_wait>
			if (!force_off &&
   161c4:	b912      	cbnz	r2, 161cc <_spi_context_cs_control+0x2e>
   161c6:	889b      	ldrh	r3, [r3, #4]
   161c8:	04db      	lsls	r3, r3, #19
   161ca:	d409      	bmi.n	161e0 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   161cc:	6880      	ldr	r0, [r0, #8]
   161ce:	f000 fdb8 	bl	16d42 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   161d2:	6823      	ldr	r3, [r4, #0]
   161d4:	2100      	movs	r1, #0
   161d6:	6898      	ldr	r0, [r3, #8]
}
   161d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   161dc:	f7ff bfcb 	b.w	16176 <gpio_pin_set_dt.isra.0>
}
   161e0:	bd38      	pop	{r3, r4, r5, pc}

000161e2 <spi_context_unlock_unconditionally>:
{
   161e2:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   161e4:	2201      	movs	r2, #1
   161e6:	2100      	movs	r1, #0
{
   161e8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   161ea:	f7ff ffd8 	bl	1619e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   161ee:	69a3      	ldr	r3, [r4, #24]
   161f0:	b933      	cbnz	r3, 16200 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   161f2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   161f4:	f104 0010 	add.w	r0, r4, #16
}
   161f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   161fc:	f7fb bb02 	b.w	11804 <z_impl_k_sem_give>
   16200:	bd10      	pop	{r4, pc}

00016202 <spi_nrfx_release>:
{
   16202:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   16204:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   16206:	6803      	ldr	r3, [r0, #0]
   16208:	428b      	cmp	r3, r1
   1620a:	d106      	bne.n	1621a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   1620c:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   16210:	b934      	cbnz	r4, 16220 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   16212:	f7ff ffe6 	bl	161e2 <spi_context_unlock_unconditionally>
	return 0;
   16216:	4620      	mov	r0, r4
}
   16218:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1621a:	f06f 0015 	mvn.w	r0, #21
   1621e:	e7fb      	b.n	16218 <spi_nrfx_release+0x16>
		return -EBUSY;
   16220:	f06f 000f 	mvn.w	r0, #15
   16224:	e7f8      	b.n	16218 <spi_nrfx_release+0x16>

00016226 <spi_nrfx_init>:
{
   16226:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   1622a:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   1622c:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1622e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
	ret = pinctrl_lookup_state(config, id, &state);
   16230:	aa01      	add	r2, sp, #4
   16232:	2100      	movs	r1, #0
   16234:	4630      	mov	r0, r6
   16236:	f7ff fde5 	bl	15e04 <pinctrl_lookup_state>
	if (ret < 0) {
   1623a:	2800      	cmp	r0, #0
   1623c:	db43      	blt.n	162c6 <spi_nrfx_init+0xa0>
	return pinctrl_apply_state_direct(config, state);
   1623e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   16240:	6832      	ldr	r2, [r6, #0]
   16242:	7919      	ldrb	r1, [r3, #4]
   16244:	6818      	ldr	r0, [r3, #0]
   16246:	f7f7 ffb3 	bl	e1b0 <pinctrl_configure_pins>
	if (err < 0) {
   1624a:	2800      	cmp	r0, #0
   1624c:	db3b      	blt.n	162c6 <spi_nrfx_init+0xa0>
	dev_config->irq_connect();
   1624e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16250:	4798      	blx	r3
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   16252:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16254:	2601      	movs	r6, #1
   16256:	3408      	adds	r4, #8
   16258:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   1625c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   16260:	f1a4 0208 	sub.w	r2, r4, #8
   16264:	4293      	cmp	r3, r2
   16266:	d804      	bhi.n	16272 <spi_nrfx_init+0x4c>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   16268:	4628      	mov	r0, r5
   1626a:	f7ff ffba 	bl	161e2 <spi_context_unlock_unconditionally>
	return 0;
   1626e:	2000      	movs	r0, #0
	return 0;
   16270:	e029      	b.n	162c6 <spi_nrfx_init+0xa0>
		if (!device_is_ready(cs_gpio->port)) {
   16272:	f854 0c08 	ldr.w	r0, [r4, #-8]
   16276:	f000 fa3e 	bl	166f6 <z_device_is_ready>
   1627a:	b338      	cbz	r0, 162cc <spi_nrfx_init+0xa6>
	return gpio_pin_configure(spec->port,
   1627c:	f854 0c08 	ldr.w	r0, [r4, #-8]
				  spec->pin,
   16280:	f814 1c04 	ldrb.w	r1, [r4, #-4]
				  spec->dt_flags | extra_flags);
   16284:	f834 3c02 	ldrh.w	r3, [r4, #-2]
	struct gpio_driver_data *data =
   16288:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   1628c:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   16290:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   16294:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   16296:	bf54      	ite	pl
   16298:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1629c:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   162a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   162a4:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   162a8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   162aa:	bf4c      	ite	mi
   162ac:	ea4e 0707 	orrmi.w	r7, lr, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   162b0:	ea27 070e 	bicpl.w	r7, r7, lr
   162b4:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   162b8:	f8d8 3000 	ldr.w	r3, [r8]
   162bc:	4798      	blx	r3
		if (ret < 0) {
   162be:	2800      	cmp	r0, #0
   162c0:	f104 0408 	add.w	r4, r4, #8
   162c4:	dac8      	bge.n	16258 <spi_nrfx_init+0x32>
}
   162c6:	b002      	add	sp, #8
   162c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -ENODEV;
   162cc:	f06f 0012 	mvn.w	r0, #18
	if (err < 0) {
   162d0:	e7f9      	b.n	162c6 <spi_nrfx_init+0xa0>

000162d2 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
   162d2:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
   162d4:	2200      	movs	r2, #0
   162d6:	4604      	mov	r4, r0
   162d8:	460d      	mov	r5, r1
   162da:	4611      	mov	r1, r2
   162dc:	f7ff ff5f 	bl	1619e <_spi_context_cs_control>
	ctx->sync_status = status;
   162e0:	6425      	str	r5, [r4, #64]	; 0x40
   162e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   162e6:	f7fb fa8d 	bl	11804 <z_impl_k_sem_give>
	dev_data->busy = false;
   162ea:	2300      	movs	r3, #0
   162ec:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   162f0:	bd38      	pop	{r3, r4, r5, pc}

000162f2 <event_handler>:
{
   162f2:	b538      	push	{r3, r4, r5, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   162f4:	7803      	ldrb	r3, [r0, #0]
{
   162f6:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   162f8:	2b00      	cmp	r3, #0
   162fa:	d145      	bne.n	16388 <event_handler+0x96>
		if (dev_data->chunk_len == 0) {
   162fc:	6e8d      	ldr	r5, [r1, #104]	; 0x68
   162fe:	b93d      	cbnz	r5, 16310 <event_handler+0x1e>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
   16300:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   16302:	f06f 0173 	mvn.w	r1, #115	; 0x73
   16306:	6918      	ldr	r0, [r3, #16]
}
   16308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
   1630c:	f7ff bfe1 	b.w	162d2 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
   16310:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   16312:	b193      	cbz	r3, 1633a <event_handler+0x48>
	if (len > ctx->tx_len) {
   16314:	429d      	cmp	r5, r3
   16316:	d810      	bhi.n	1633a <event_handler+0x48>
	ctx->tx_len -= len;
   16318:	1b5b      	subs	r3, r3, r5
   1631a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   1631c:	bb43      	cbnz	r3, 16370 <event_handler+0x7e>
		++ctx->current_tx;
   1631e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   16320:	3308      	adds	r3, #8
   16322:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   16324:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   16326:	3b01      	subs	r3, #1
   16328:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   1632a:	f101 0258 	add.w	r2, r1, #88	; 0x58
   1632e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   16332:	3148      	adds	r1, #72	; 0x48
   16334:	f7ff ff0c 	bl	16150 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   16338:	6560      	str	r0, [r4, #84]	; 0x54
	if (!ctx->rx_len) {
   1633a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1633c:	b19b      	cbz	r3, 16366 <event_handler+0x74>
	if (len > ctx->rx_len) {
   1633e:	429d      	cmp	r5, r3
   16340:	d811      	bhi.n	16366 <event_handler+0x74>
	ctx->rx_len -= len;
   16342:	1b5b      	subs	r3, r3, r5
   16344:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   16346:	b9cb      	cbnz	r3, 1637c <event_handler+0x8a>
		++ctx->current_rx;
   16348:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1634a:	3308      	adds	r3, #8
   1634c:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   1634e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16350:	3b01      	subs	r3, #1
   16352:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   16354:	f104 0260 	add.w	r2, r4, #96	; 0x60
   16358:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1635c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   16360:	f7ff fef6 	bl	16150 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   16364:	65e0      	str	r0, [r4, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   16366:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   16368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		transfer_next_chunk(dev_data->dev);
   1636c:	f7f8 bb1a 	b.w	e9a4 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   16370:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   16372:	2b00      	cmp	r3, #0
   16374:	d0e1      	beq.n	1633a <event_handler+0x48>
		ctx->tx_buf += dfs * len;
   16376:	442b      	add	r3, r5
   16378:	654b      	str	r3, [r1, #84]	; 0x54
   1637a:	e7de      	b.n	1633a <event_handler+0x48>
	} else if (ctx->rx_buf) {
   1637c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1637e:	2b00      	cmp	r3, #0
   16380:	d0f1      	beq.n	16366 <event_handler+0x74>
		ctx->rx_buf += dfs * len;
   16382:	442b      	add	r3, r5
   16384:	65e3      	str	r3, [r4, #92]	; 0x5c
   16386:	e7ee      	b.n	16366 <event_handler+0x74>
}
   16388:	bd38      	pop	{r3, r4, r5, pc}

0001638a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1638a:	4770      	bx	lr

0001638c <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1638c:	f100 0350 	add.w	r3, r0, #80	; 0x50
   16390:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   16392:	b29b      	uxth	r3, r3
   16394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16398:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1639c:	2200      	movs	r2, #0
   1639e:	601a      	str	r2, [r3, #0]
   163a0:	681b      	ldr	r3, [r3, #0]
}
   163a2:	4770      	bx	lr

000163a4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   163a4:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   163a6:	2000      	movs	r0, #0
   163a8:	f7f5 fd98 	bl	bedc <sys_arch_reboot>

000163ac <sdc_assertion_handler>:
	k_oops();
   163ac:	4040      	eors	r0, r0
   163ae:	f380 8811 	msr	BASEPRI, r0
   163b2:	f04f 0003 	mov.w	r0, #3
   163b6:	df02      	svc	2
}
   163b8:	4770      	bx	lr

000163ba <hci_driver_close>:
{
   163ba:	b510      	push	{r4, lr}
	err = MULTITHREADING_LOCK_ACQUIRE();
   163bc:	f04f 30ff 	mov.w	r0, #4294967295
   163c0:	f04f 31ff 	mov.w	r1, #4294967295
   163c4:	f7f8 fed2 	bl	f16c <multithreading_lock_acquire>
	if (err) {
   163c8:	4604      	mov	r4, r0
   163ca:	b920      	cbnz	r0, 163d6 <hci_driver_close+0x1c>
	err = sdc_disable();
   163cc:	f7e9 ff70 	bl	2b0 <sdc_disable>
	if (err) {
   163d0:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   163d2:	f7f8 fed3 	bl	f17c <multithreading_lock_release>
}
   163d6:	4620      	mov	r0, r4
   163d8:	bd10      	pop	{r4, pc}

000163da <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   163da:	f7f8 bf61 	b.w	f2a0 <rand_prio_low_vector_get>

000163de <hci_driver_send>:
{
   163de:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   163e0:	8a03      	ldrh	r3, [r0, #16]
{
   163e2:	4605      	mov	r5, r0
	if (!buf->len) {
   163e4:	b1bb      	cbz	r3, 16416 <hci_driver_send+0x38>
	switch (type) {
   163e6:	7e03      	ldrb	r3, [r0, #24]
   163e8:	b9ab      	cbnz	r3, 16416 <hci_driver_send+0x38>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   163ea:	f04f 30ff 	mov.w	r0, #4294967295
   163ee:	f04f 31ff 	mov.w	r1, #4294967295
   163f2:	f7f8 febb 	bl	f16c <multithreading_lock_acquire>
	if (!errcode) {
   163f6:	4604      	mov	r4, r0
   163f8:	b958      	cbnz	r0, 16412 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   163fa:	68e8      	ldr	r0, [r5, #12]
   163fc:	f7f8 ffcc 	bl	f398 <hci_internal_cmd_put>
   16400:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   16402:	f7f8 febb 	bl	f17c <multithreading_lock_release>
	if (errcode) {
   16406:	b924      	cbnz	r4, 16412 <hci_driver_send+0x34>
	receive_signal_raise();
   16408:	f7f8 ff5e 	bl	f2c8 <receive_signal_raise>
		net_buf_unref(buf);
   1640c:	4628      	mov	r0, r5
   1640e:	f7f6 fef9 	bl	d204 <net_buf_unref>
}
   16412:	4620      	mov	r0, r4
   16414:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16416:	f06f 0415 	mvn.w	r4, #21
   1641a:	e7fa      	b.n	16412 <hci_driver_send+0x34>

0001641c <receive_work_handler>:
	hci_driver_receive_process();
   1641c:	f7f8 bf68 	b.w	f2f0 <hci_driver_receive_process>

00016420 <m_assert_handler>:
	k_oops();
   16420:	4040      	eors	r0, r0
   16422:	f380 8811 	msr	BASEPRI, r0
   16426:	f04f 0003 	mov.w	r0, #3
   1642a:	df02      	svc	2
}
   1642c:	4770      	bx	lr

0001642e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   1642e:	4668      	mov	r0, sp
   16430:	f020 0107 	bic.w	r1, r0, #7
   16434:	468d      	mov	sp, r1
   16436:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   16438:	f7f0 fc5a 	bl	6cf0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   1643c:	f7f5 f978 	bl	b730 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   16440:	f7f5 fa60 	bl	b904 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   16444:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   16448:	4685      	mov	sp, r0
   1644a:	4770      	bx	lr

0001644c <mpsl_low_prio_work_handler>:
{
   1644c:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1644e:	f04f 31ff 	mov.w	r1, #4294967295
   16452:	f04f 30ff 	mov.w	r0, #4294967295
   16456:	f7f8 fe89 	bl	f16c <multithreading_lock_acquire>
	mpsl_low_priority_process();
   1645a:	f7f3 fdb2 	bl	9fc2 <mpsl_low_priority_process>
}
   1645e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   16462:	f7f8 be8b 	b.w	f17c <multithreading_lock_release>

00016466 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   16466:	4668      	mov	r0, sp
   16468:	f020 0107 	bic.w	r1, r0, #7
   1646c:	468d      	mov	sp, r1
   1646e:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   16470:	f7f0 fbf4 	bl	6c5c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   16474:	f7f5 f95c 	bl	b730 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   16478:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1647c:	4685      	mov	sp, r0
   1647e:	4770      	bx	lr

00016480 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   16480:	4668      	mov	r0, sp
   16482:	f020 0107 	bic.w	r1, r0, #7
   16486:	468d      	mov	sp, r1
   16488:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   1648a:	f7ee f8bf 	bl	460c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   1648e:	f7f5 f94f 	bl	b730 <_arch_isr_direct_pm>
   16492:	f7f5 fa37 	bl	b904 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   16496:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1649a:	4685      	mov	sp, r0
   1649c:	4770      	bx	lr

0001649e <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   1649e:	b508      	push	{r3, lr}

	mpsl_fem_init();
   164a0:	f7f3 ff65 	bl	a36e <mpsl_fem_init>

	return 0;
}
   164a4:	2000      	movs	r0, #0
   164a6:	bd08      	pop	{r3, pc}

000164a8 <nrfx_clock_stop>:
	switch (domain) {
   164a8:	2801      	cmp	r0, #1
   164aa:	d101      	bne.n	164b0 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   164ac:	f7f1 bace 	b.w	7a4c <mpsl_clock_hfclk_release>
}
   164b0:	4770      	bx	lr

000164b2 <nrfx_clock_enable>:
}
   164b2:	4770      	bx	lr

000164b4 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   164b4:	f7f1 b8d4 	b.w	7660 <MPSL_IRQ_CLOCK_Handler>

000164b8 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   164b8:	f7fc b8d4 	b.w	12664 <nrf_cc3xx_platform_init>

000164bc <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   164bc:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   164be:	f7f4 ffe1 	bl	b484 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   164c2:	f7f5 f8b5 	bl	b630 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   164c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   164ca:	f7fc b8cb 	b.w	12664 <nrf_cc3xx_platform_init>

000164ce <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   164ce:	4700      	bx	r0

000164d0 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   164d0:	f000 bc37 	b.w	16d42 <z_impl_k_busy_wait>

000164d4 <nrf_gpio_reconfigure>:
{
   164d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   164d6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164d8:	a801      	add	r0, sp, #4
{
   164da:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   164de:	4616      	mov	r6, r2
   164e0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   164e2:	f7f9 fc0f 	bl	fd04 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   164e6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   164e8:	f1b6 0c00 	subs.w	ip, r6, #0
   164ec:	bf18      	it	ne
   164ee:	f04f 0c01 	movne.w	ip, #1
   164f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   164f6:	1e0b      	subs	r3, r1, #0
   164f8:	bf18      	it	ne
   164fa:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   164fc:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   164fe:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   16502:	bf14      	ite	ne
   16504:	f04f 0c0c 	movne.w	ip, #12
   16508:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1650c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1650e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   16512:	bf14      	ite	ne
   16514:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   16518:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   1651c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1651e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   16522:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   16526:	bf14      	ite	ne
   16528:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   1652c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   16530:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   16534:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   16538:	b101      	cbz	r1, 1653c <nrf_gpio_reconfigure+0x68>
   1653a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1653c:	b10e      	cbz	r6, 16542 <nrf_gpio_reconfigure+0x6e>
   1653e:	7836      	ldrb	r6, [r6, #0]
   16540:	0076      	lsls	r6, r6, #1
   16542:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   16544:	b10d      	cbz	r5, 1654a <nrf_gpio_reconfigure+0x76>
   16546:	782d      	ldrb	r5, [r5, #0]
   16548:	00ad      	lsls	r5, r5, #2
   1654a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1654c:	b10c      	cbz	r4, 16552 <nrf_gpio_reconfigure+0x7e>
   1654e:	7824      	ldrb	r4, [r4, #0]
   16550:	0224      	lsls	r4, r4, #8
   16552:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   16554:	b10f      	cbz	r7, 1655a <nrf_gpio_reconfigure+0x86>
   16556:	783f      	ldrb	r7, [r7, #0]
   16558:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1655a:	430c      	orrs	r4, r1
   1655c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   1655e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   16562:	b003      	add	sp, #12
   16564:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016566 <nrf_gpio_cfg_sense_set>:
{
   16566:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   16568:	f10d 030f 	add.w	r3, sp, #15
   1656c:	9301      	str	r3, [sp, #4]
   1656e:	2300      	movs	r3, #0
{
   16570:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   16574:	9300      	str	r3, [sp, #0]
   16576:	461a      	mov	r2, r3
   16578:	4619      	mov	r1, r3
   1657a:	f7ff ffab 	bl	164d4 <nrf_gpio_reconfigure>
}
   1657e:	b005      	add	sp, #20
   16580:	f85d fb04 	ldr.w	pc, [sp], #4

00016584 <nrf_gpio_cfg_output>:
{
   16584:	b507      	push	{r0, r1, r2, lr}
   16586:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16588:	a801      	add	r0, sp, #4
   1658a:	f7f9 ff23 	bl	103d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1658e:	9b01      	ldr	r3, [sp, #4]
   16590:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16594:	2203      	movs	r2, #3
   16596:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   1659a:	b003      	add	sp, #12
   1659c:	f85d fb04 	ldr.w	pc, [sp], #4

000165a0 <nrf_gpio_cfg_default>:
{
   165a0:	b507      	push	{r0, r1, r2, lr}
   165a2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   165a4:	a801      	add	r0, sp, #4
   165a6:	f7f9 ff15 	bl	103d4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   165aa:	9b01      	ldr	r3, [sp, #4]
   165ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   165b0:	2202      	movs	r2, #2
   165b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   165b6:	b003      	add	sp, #12
   165b8:	f85d fb04 	ldr.w	pc, [sp], #4

000165bc <nrf_gpio_cfg_default>:
{
   165bc:	b507      	push	{r0, r1, r2, lr}
   165be:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   165c0:	a801      	add	r0, sp, #4
   165c2:	f7fa f957 	bl	10874 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   165c6:	9b01      	ldr	r3, [sp, #4]
   165c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   165cc:	2202      	movs	r2, #2
   165ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   165d2:	b003      	add	sp, #12
   165d4:	f85d fb04 	ldr.w	pc, [sp], #4

000165d8 <nrf_gpio_pin_set>:
{
   165d8:	b507      	push	{r0, r1, r2, lr}
   165da:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   165dc:	a801      	add	r0, sp, #4
   165de:	f7fa f949 	bl	10874 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   165e2:	9a01      	ldr	r2, [sp, #4]
   165e4:	2301      	movs	r3, #1
   165e6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   165e8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   165ec:	b003      	add	sp, #12
   165ee:	f85d fb04 	ldr.w	pc, [sp], #4

000165f2 <nrf_gpio_pin_clear>:
{
   165f2:	b507      	push	{r0, r1, r2, lr}
   165f4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   165f6:	a801      	add	r0, sp, #4
   165f8:	f7fa f93c 	bl	10874 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   165fc:	9a01      	ldr	r2, [sp, #4]
   165fe:	2301      	movs	r3, #1
   16600:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   16602:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   16606:	b003      	add	sp, #12
   16608:	f85d fb04 	ldr.w	pc, [sp], #4

0001660c <transfer_byte>:
{
   1660c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   1660e:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   16612:	698a      	ldr	r2, [r1, #24]
   16614:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   16616:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   1661a:	6a0b      	ldr	r3, [r1, #32]
   1661c:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   1661e:	bf3e      	ittt	cc
   16620:	694a      	ldrcc	r2, [r1, #20]
   16622:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   16626:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   16628:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
   1662a:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   1662e:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
   16630:	1c5a      	adds	r2, r3, #1
   16632:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   16634:	3302      	adds	r3, #2
    if (p_cb->abort)
   16636:	b135      	cbz	r5, 16646 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   16638:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   1663a:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   1663c:	bf38      	it	cc
   1663e:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   16640:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   16642:	bf88      	it	hi
   16644:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   16646:	690d      	ldr	r5, [r1, #16]
   16648:	429d      	cmp	r5, r3
   1664a:	d905      	bls.n	16658 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   1664c:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
   1664e:	5cd3      	ldrb	r3, [r2, r3]
   16650:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   16654:	2001      	movs	r0, #1
   16656:	e00a      	b.n	1666e <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   16658:	698c      	ldr	r4, [r1, #24]
   1665a:	429c      	cmp	r4, r3
   1665c:	d901      	bls.n	16662 <transfer_byte+0x56>
   1665e:	7fcb      	ldrb	r3, [r1, #31]
   16660:	e7f6      	b.n	16650 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   16662:	42aa      	cmp	r2, r5
   16664:	d3f6      	bcc.n	16654 <transfer_byte+0x48>
   16666:	42a2      	cmp	r2, r4
   16668:	bf2c      	ite	cs
   1666a:	2000      	movcs	r0, #0
   1666c:	2001      	movcc	r0, #1
}
   1666e:	b003      	add	sp, #12
   16670:	bd30      	pop	{r4, r5, pc}

00016672 <nrf_gpio_pin_set>:
{
   16672:	b507      	push	{r0, r1, r2, lr}
   16674:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16676:	a801      	add	r0, sp, #4
   16678:	f7fa fa8e 	bl	10b98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1667c:	9a01      	ldr	r2, [sp, #4]
   1667e:	2301      	movs	r3, #1
   16680:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   16682:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   16686:	b003      	add	sp, #12
   16688:	f85d fb04 	ldr.w	pc, [sp], #4

0001668c <nrf_gpio_pin_clear>:
{
   1668c:	b507      	push	{r0, r1, r2, lr}
   1668e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16690:	a801      	add	r0, sp, #4
   16692:	f7fa fa81 	bl	10b98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   16696:	9a01      	ldr	r2, [sp, #4]
   16698:	2301      	movs	r3, #1
   1669a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1669c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   166a0:	b003      	add	sp, #12
   166a2:	f85d fb04 	ldr.w	pc, [sp], #4

000166a6 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   166a6:	1c43      	adds	r3, r0, #1
{
   166a8:	b507      	push	{r0, r1, r2, lr}
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   166aa:	d009      	beq.n	166c0 <spim_pin_uninit+0x1a>
    nrf_gpio_cfg(
   166ac:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   166ae:	a801      	add	r0, sp, #4
   166b0:	f7fa fa72 	bl	10b98 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   166b4:	9b01      	ldr	r3, [sp, #4]
   166b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   166ba:	2202      	movs	r2, #2
   166bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   166c0:	b003      	add	sp, #12
   166c2:	f85d fb04 	ldr.w	pc, [sp], #4

000166c6 <set_ss_pin_state>:
    if (p_cb->use_hw_ss)
   166c6:	7f83      	ldrb	r3, [r0, #30]
   166c8:	075a      	lsls	r2, r3, #29
   166ca:	d40b      	bmi.n	166e4 <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   166cc:	7fc0      	ldrb	r0, [r0, #31]
   166ce:	28ff      	cmp	r0, #255	; 0xff
   166d0:	d008      	beq.n	166e4 <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   166d2:	079b      	lsls	r3, r3, #30
   166d4:	bf58      	it	pl
   166d6:	f081 0101 	eorpl.w	r1, r1, #1
    if (value == 0)
   166da:	b909      	cbnz	r1, 166e0 <set_ss_pin_state+0x1a>
        nrf_gpio_pin_clear(pin_number);
   166dc:	f7ff bfd6 	b.w	1668c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   166e0:	f7ff bfc7 	b.w	16672 <nrf_gpio_pin_set>
}
   166e4:	4770      	bx	lr

000166e6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   166e6:	f7fa bca5 	b.w	11034 <_DoInit>

000166ea <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   166ea:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   166ec:	f7ff fffb 	bl	166e6 <SEGGER_RTT_Init>

	return 0;
}
   166f0:	2000      	movs	r0, #0
   166f2:	bd08      	pop	{r3, pc}

000166f4 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   166f4:	4770      	bx	lr

000166f6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   166f6:	b140      	cbz	r0, 1670a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   166f8:	68c3      	ldr	r3, [r0, #12]
   166fa:	7858      	ldrb	r0, [r3, #1]
   166fc:	f010 0001 	ands.w	r0, r0, #1
   16700:	bf1e      	ittt	ne
   16702:	7818      	ldrbne	r0, [r3, #0]
   16704:	fab0 f080 	clzne	r0, r0
   16708:	0940      	lsrne	r0, r0, #5
}
   1670a:	4770      	bx	lr

0001670c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1670e:	4605      	mov	r5, r0
   16710:	460e      	mov	r6, r1
	__asm__ volatile(
   16712:	f04f 0340 	mov.w	r3, #64	; 0x40
   16716:	f3ef 8711 	mrs	r7, BASEPRI
   1671a:	f383 8812 	msr	BASEPRI_MAX, r3
   1671e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   16722:	f7fb fd09 	bl	12138 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   16726:	4631      	mov	r1, r6
   16728:	4604      	mov	r4, r0
   1672a:	4628      	mov	r0, r5
   1672c:	f7ff fe3a 	bl	163a4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   16730:	f387 8811 	msr	BASEPRI, r7
   16734:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16738:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1673a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1673e:	f7f5 bab9 	b.w	bcb4 <z_impl_k_thread_abort>

00016742 <z_early_memset>:
	(void) memset(dst, c, n);
   16742:	f7fe bf96 	b.w	15672 <memset>

00016746 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   16746:	f7fe bf89 	b.w	1565c <memcpy>

0001674a <k_heap_init>:
{
   1674a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1674c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   16750:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   16754:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   16756:	f7fe bd7b 	b.w	15250 <sys_heap_init>

0001675a <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1675a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1675e:	b085      	sub	sp, #20
   16760:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   16764:	4607      	mov	r7, r0
   16766:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   16768:	4650      	mov	r0, sl
   1676a:	4621      	mov	r1, r4
{
   1676c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1676e:	f000 faec 	bl	16d4a <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   16772:	f1b4 3fff 	cmp.w	r4, #4294967295
   16776:	bf08      	it	eq
   16778:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1677c:	4605      	mov	r5, r0
   1677e:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   16780:	bf04      	itt	eq
   16782:	f04f 35ff 	moveq.w	r5, #4294967295
   16786:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1678a:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   1678e:	f04f 0340 	mov.w	r3, #64	; 0x40
   16792:	f3ef 8411 	mrs	r4, BASEPRI
   16796:	f383 8812 	msr	BASEPRI_MAX, r3
   1679a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1679e:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   167a2:	464a      	mov	r2, r9
   167a4:	4641      	mov	r1, r8
   167a6:	4638      	mov	r0, r7
   167a8:	f7fe fceb 	bl	15182 <sys_heap_aligned_alloc>
   167ac:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   167ae:	f7fb fe7b 	bl	124a8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   167b2:	9b03      	ldr	r3, [sp, #12]
   167b4:	b13b      	cbz	r3, 167c6 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   167b6:	f384 8811 	msr	BASEPRI, r4
   167ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   167be:	4618      	mov	r0, r3
   167c0:	b005      	add	sp, #20
   167c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   167c6:	1a28      	subs	r0, r5, r0
   167c8:	eb66 0101 	sbc.w	r1, r6, r1
   167cc:	2801      	cmp	r0, #1
   167ce:	f171 0200 	sbcs.w	r2, r1, #0
   167d2:	dbf0      	blt.n	167b6 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   167d4:	e9cd 0100 	strd	r0, r1, [sp]
   167d8:	465a      	mov	r2, fp
   167da:	4621      	mov	r1, r4
   167dc:	4650      	mov	r0, sl
   167de:	f7fb faf7 	bl	11dd0 <z_pend_curr>
	__asm__ volatile(
   167e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   167e6:	f3ef 8411 	mrs	r4, BASEPRI
   167ea:	f383 8812 	msr	BASEPRI_MAX, r3
   167ee:	f3bf 8f6f 	isb	sy
	return k;
   167f2:	e7d6      	b.n	167a2 <k_heap_aligned_alloc+0x48>

000167f4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   167f4:	b538      	push	{r3, r4, r5, lr}
   167f6:	4604      	mov	r4, r0
   167f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   167fc:	f3ef 8511 	mrs	r5, BASEPRI
   16800:	f383 8812 	msr	BASEPRI_MAX, r3
   16804:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   16808:	f7fe fc83 	bl	15112 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1680c:	f104 000c 	add.w	r0, r4, #12
   16810:	f000 fa3a 	bl	16c88 <z_unpend_all>
   16814:	b130      	cbz	r0, 16824 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   16816:	4629      	mov	r1, r5
   16818:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1681c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   16820:	f7fb bb3a 	b.w	11e98 <z_reschedule>
	__asm__ volatile(
   16824:	f385 8811 	msr	BASEPRI, r5
   16828:	f3bf 8f6f 	isb	sy
}
   1682c:	bd38      	pop	{r3, r4, r5, pc}

0001682e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1682e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   16832:	4313      	orrs	r3, r2
   16834:	f013 0303 	ands.w	r3, r3, #3
   16838:	d10c      	bne.n	16854 <create_free_list+0x26>
	slab->free_list = NULL;
   1683a:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1683c:	6881      	ldr	r1, [r0, #8]
   1683e:	4299      	cmp	r1, r3
   16840:	d801      	bhi.n	16846 <create_free_list+0x18>
	return 0;
   16842:	2000      	movs	r0, #0
   16844:	4770      	bx	lr
		*(char **)p = slab->free_list;
   16846:	6941      	ldr	r1, [r0, #20]
   16848:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   1684a:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   1684c:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1684e:	3301      	adds	r3, #1
		p += slab->block_size;
   16850:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   16852:	e7f3      	b.n	1683c <create_free_list+0xe>
		return -EINVAL;
   16854:	f06f 0015 	mvn.w	r0, #21
}
   16858:	4770      	bx	lr

0001685a <k_mem_slab_init>:
{
   1685a:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   1685c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   16860:	2300      	movs	r3, #0
	slab->buffer = buffer;
   16862:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   16864:	6183      	str	r3, [r0, #24]
{
   16866:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   16868:	f7ff ffe1 	bl	1682e <create_free_list>
	if (rc < 0) {
   1686c:	2800      	cmp	r0, #0
   1686e:	bfa8      	it	ge
   16870:	e9c4 4400 	strdge	r4, r4, [r4]
}
   16874:	bd10      	pop	{r4, pc}

00016876 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   16876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16878:	4604      	mov	r4, r0
   1687a:	460d      	mov	r5, r1
	__asm__ volatile(
   1687c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16880:	f3ef 8611 	mrs	r6, BASEPRI
   16884:	f383 8812 	msr	BASEPRI_MAX, r3
   16888:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1688c:	6947      	ldr	r7, [r0, #20]
   1688e:	b977      	cbnz	r7, 168ae <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   16890:	f000 f9b0 	bl	16bf4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   16894:	b158      	cbz	r0, 168ae <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   16896:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   16898:	6142      	str	r2, [r0, #20]
   1689a:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1689c:	f000 f974 	bl	16b88 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   168a0:	4631      	mov	r1, r6
   168a2:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   168a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   168aa:	f7fb baf5 	b.w	11e98 <z_reschedule>
	**(char ***) mem = slab->free_list;
   168ae:	682b      	ldr	r3, [r5, #0]
   168b0:	6962      	ldr	r2, [r4, #20]
   168b2:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   168b4:	682b      	ldr	r3, [r5, #0]
   168b6:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   168b8:	69a3      	ldr	r3, [r4, #24]
   168ba:	3b01      	subs	r3, #1
   168bc:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   168be:	f386 8811 	msr	BASEPRI, r6
   168c2:	f3bf 8f6f 	isb	sy
}
   168c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000168c8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   168c8:	f3ef 8005 	mrs	r0, IPSR
}
   168cc:	3800      	subs	r0, #0
   168ce:	bf18      	it	ne
   168d0:	2001      	movne	r0, #1
   168d2:	4770      	bx	lr

000168d4 <z_impl_k_thread_name_set>:
}
   168d4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   168d8:	4770      	bx	lr

000168da <z_impl_k_thread_start>:
	z_sched_start(thread);
   168da:	f7fb baef 	b.w	11ebc <z_sched_start>

000168de <z_pm_save_idle_exit>:
{
   168de:	b508      	push	{r3, lr}
	pm_system_resume();
   168e0:	f7f4 fcc6 	bl	b270 <pm_system_resume>
}
   168e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   168e8:	f7ff bd4f 	b.w	1638a <sys_clock_idle_exit>

000168ec <k_msgq_init>:
	msgq->max_msgs = max_msgs;
   168ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
	msgq->buffer_end = buffer + (max_msgs * msg_size);
   168f0:	fb03 1202 	mla	r2, r3, r2, r1
	msgq->used_msgs = 0;
   168f4:	2300      	movs	r3, #0
   168f6:	6203      	str	r3, [r0, #32]
	msgq->flags = 0;
   168f8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	sys_dlist_init(&msgq->poll_events);
   168fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
	msgq->read_ptr = buffer;
   16900:	e9c0 2105 	strd	r2, r1, [r0, #20]
   16904:	e9c0 0000 	strd	r0, r0, [r0]
   16908:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	msgq->buffer_start = buffer;
   1690c:	6101      	str	r1, [r0, #16]
	msgq->write_ptr = buffer;
   1690e:	61c1      	str	r1, [r0, #28]
}
   16910:	4770      	bx	lr

00016912 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   16912:	f990 300e 	ldrsb.w	r3, [r0, #14]
   16916:	428b      	cmp	r3, r1
   16918:	d001      	beq.n	1691e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1691a:	f7fb ba77 	b.w	11e0c <z_set_prio>
}
   1691e:	2000      	movs	r0, #0
   16920:	4770      	bx	lr

00016922 <z_impl_k_mutex_init>:
{
   16922:	4603      	mov	r3, r0
	mutex->owner = NULL;
   16924:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   16926:	e9c3 0002 	strd	r0, r0, [r3, #8]
   1692a:	e9c3 3300 	strd	r3, r3, [r3]
}
   1692e:	4770      	bx	lr

00016930 <queue_insert>:
{
   16930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16934:	4699      	mov	r9, r3
   16936:	4604      	mov	r4, r0
   16938:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1693c:	460d      	mov	r5, r1
   1693e:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   16940:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   16944:	f04f 0240 	mov.w	r2, #64	; 0x40
   16948:	f3ef 8711 	mrs	r7, BASEPRI
   1694c:	f382 8812 	msr	BASEPRI_MAX, r2
   16950:	f3bf 8f6f 	isb	sy
	if (is_append) {
   16954:	b103      	cbz	r3, 16958 <queue_insert+0x28>
	return list->tail;
   16956:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   16958:	4630      	mov	r0, r6
   1695a:	f000 f94b 	bl	16bf4 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1695e:	b158      	cbz	r0, 16978 <queue_insert+0x48>
   16960:	2300      	movs	r3, #0
   16962:	67c3      	str	r3, [r0, #124]	; 0x7c
   16964:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   16968:	f000 f90e 	bl	16b88 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1696c:	4630      	mov	r0, r6
   1696e:	4639      	mov	r1, r7
   16970:	f7fb fa92 	bl	11e98 <z_reschedule>
		return 0;
   16974:	2000      	movs	r0, #0
   16976:	e00c      	b.n	16992 <queue_insert+0x62>
	if (alloc) {
   16978:	f1b9 0f00 	cmp.w	r9, #0
   1697c:	d01b      	beq.n	169b6 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1697e:	2108      	movs	r1, #8
   16980:	f7fb fe30 	bl	125e4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   16984:	b938      	cbnz	r0, 16996 <queue_insert+0x66>
	__asm__ volatile(
   16986:	f387 8811 	msr	BASEPRI, r7
   1698a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1698e:	f06f 000b 	mvn.w	r0, #11
}
   16992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   16996:	2201      	movs	r2, #1
		anode->data = data;
   16998:	f8c0 8004 	str.w	r8, [r0, #4]
   1699c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1699e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   169a0:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   169a4:	b95d      	cbnz	r5, 169be <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   169a6:	6822      	ldr	r2, [r4, #0]
   169a8:	430a      	orrs	r2, r1
   169aa:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   169ac:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   169ae:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   169b0:	b96a      	cbnz	r2, 169ce <queue_insert+0x9e>
	list->tail = node;
   169b2:	6060      	str	r0, [r4, #4]
}
   169b4:	e00b      	b.n	169ce <queue_insert+0x9e>
	node->next_and_flags = flags;
   169b6:	f8c8 9000 	str.w	r9, [r8]
}
   169ba:	4640      	mov	r0, r8
   169bc:	e7ef      	b.n	1699e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   169be:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   169c0:	2a03      	cmp	r2, #3
   169c2:	d810      	bhi.n	169e6 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   169c4:	6001      	str	r1, [r0, #0]
	return list->tail;
   169c6:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   169c8:	b939      	cbnz	r1, 169da <queue_insert+0xaa>
	list->head = node;
   169ca:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   169ce:	2104      	movs	r1, #4
   169d0:	f104 0010 	add.w	r0, r4, #16
   169d4:	f000 fb0c 	bl	16ff0 <z_handle_obj_poll_events>
   169d8:	e7c8      	b.n	1696c <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   169da:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   169dc:	f002 0203 	and.w	r2, r2, #3
   169e0:	4302      	orrs	r2, r0
   169e2:	600a      	str	r2, [r1, #0]
   169e4:	e7e5      	b.n	169b2 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   169e6:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   169ea:	430a      	orrs	r2, r1
   169ec:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   169ee:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   169f0:	f002 0203 	and.w	r2, r2, #3
   169f4:	ea40 0302 	orr.w	r3, r0, r2
   169f8:	602b      	str	r3, [r5, #0]
}
   169fa:	e7e8      	b.n	169ce <queue_insert+0x9e>

000169fc <z_queue_node_peek>:
{
   169fc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   169fe:	4604      	mov	r4, r0
   16a00:	b130      	cbz	r0, 16a10 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   16a02:	6802      	ldr	r2, [r0, #0]
   16a04:	0793      	lsls	r3, r2, #30
   16a06:	d003      	beq.n	16a10 <z_queue_node_peek+0x14>
		ret = anode->data;
   16a08:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   16a0a:	b109      	cbz	r1, 16a10 <z_queue_node_peek+0x14>
			k_free(anode);
   16a0c:	f000 fafe 	bl	1700c <k_free>
}
   16a10:	4620      	mov	r0, r4
   16a12:	bd10      	pop	{r4, pc}

00016a14 <z_impl_k_queue_init>:
	list->head = NULL;
   16a14:	2300      	movs	r3, #0
	list->tail = NULL;
   16a16:	e9c0 3300 	strd	r3, r3, [r0]
   16a1a:	f100 0308 	add.w	r3, r0, #8
   16a1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   16a22:	f100 0310 	add.w	r3, r0, #16
   16a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   16a2a:	4770      	bx	lr

00016a2c <k_queue_append>:
{
   16a2c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   16a2e:	2301      	movs	r3, #1
   16a30:	9300      	str	r3, [sp, #0]
   16a32:	2300      	movs	r3, #0
{
   16a34:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   16a36:	4619      	mov	r1, r3
   16a38:	f7ff ff7a 	bl	16930 <queue_insert>
}
   16a3c:	b003      	add	sp, #12
   16a3e:	f85d fb04 	ldr.w	pc, [sp], #4

00016a42 <k_queue_prepend>:
{
   16a42:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   16a44:	2300      	movs	r3, #0
{
   16a46:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   16a48:	9300      	str	r3, [sp, #0]
   16a4a:	4619      	mov	r1, r3
   16a4c:	f7ff ff70 	bl	16930 <queue_insert>
}
   16a50:	b003      	add	sp, #12
   16a52:	f85d fb04 	ldr.w	pc, [sp], #4

00016a56 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   16a56:	b15a      	cbz	r2, 16a70 <z_impl_k_sem_init+0x1a>
   16a58:	428a      	cmp	r2, r1
   16a5a:	d309      	bcc.n	16a70 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   16a5c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   16a60:	e9c0 1202 	strd	r1, r2, [r0, #8]
   16a64:	e9c0 0000 	strd	r0, r0, [r0]
   16a68:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   16a6c:	2000      	movs	r0, #0
   16a6e:	4770      	bx	lr
		return -EINVAL;
   16a70:	f06f 0015 	mvn.w	r0, #21
}
   16a74:	4770      	bx	lr

00016a76 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   16a76:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   16a78:	2301      	movs	r3, #1
   16a7a:	408b      	lsls	r3, r1
   16a7c:	ea22 0303 	bic.w	r3, r2, r3
   16a80:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   16a82:	fa22 f001 	lsr.w	r0, r2, r1
}
   16a86:	f000 0001 	and.w	r0, r0, #1
   16a8a:	4770      	bx	lr

00016a8c <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   16a8c:	b120      	cbz	r0, 16a98 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   16a8e:	2200      	movs	r2, #0
   16a90:	4611      	mov	r1, r2
   16a92:	3088      	adds	r0, #136	; 0x88
   16a94:	f000 b908 	b.w	16ca8 <z_sched_wake>
}
   16a98:	4770      	bx	lr

00016a9a <k_work_init>:
{
   16a9a:	b538      	push	{r3, r4, r5, lr}
   16a9c:	4604      	mov	r4, r0
   16a9e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   16aa0:	2210      	movs	r2, #16
   16aa2:	2100      	movs	r1, #0
   16aa4:	f7fe fde5 	bl	15672 <memset>
   16aa8:	6065      	str	r5, [r4, #4]
}
   16aaa:	bd38      	pop	{r3, r4, r5, pc}

00016aac <z_work_submit_to_queue>:
{
   16aac:	b513      	push	{r0, r1, r4, lr}
   16aae:	9001      	str	r0, [sp, #4]
   16ab0:	4608      	mov	r0, r1
	__asm__ volatile(
   16ab2:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ab6:	f3ef 8411 	mrs	r4, BASEPRI
   16aba:	f383 8812 	msr	BASEPRI_MAX, r3
   16abe:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   16ac2:	a901      	add	r1, sp, #4
   16ac4:	f7fa ffaa 	bl	11a1c <submit_to_queue_locked>
	__asm__ volatile(
   16ac8:	f384 8811 	msr	BASEPRI, r4
   16acc:	f3bf 8f6f 	isb	sy
}
   16ad0:	b002      	add	sp, #8
   16ad2:	bd10      	pop	{r4, pc}

00016ad4 <k_work_submit_to_queue>:
{
   16ad4:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   16ad6:	f7ff ffe9 	bl	16aac <z_work_submit_to_queue>
	if (ret > 0) {
   16ada:	1e04      	subs	r4, r0, #0
   16adc:	dd09      	ble.n	16af2 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   16ade:	f04f 0340 	mov.w	r3, #64	; 0x40
   16ae2:	f3ef 8011 	mrs	r0, BASEPRI
   16ae6:	f383 8812 	msr	BASEPRI_MAX, r3
   16aea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   16aee:	f000 f8b5 	bl	16c5c <z_reschedule_irqlock>
}
   16af2:	4620      	mov	r0, r4
   16af4:	bd10      	pop	{r4, pc}

00016af6 <k_work_queue_init>:
{
   16af6:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   16af8:	22a0      	movs	r2, #160	; 0xa0
   16afa:	2100      	movs	r1, #0
   16afc:	f7fe fdb9 	bl	15672 <memset>
}
   16b00:	bd08      	pop	{r3, pc}

00016b02 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   16b02:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16b06:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16b08:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16b0a:	2300      	movs	r3, #0
	node->prev = NULL;
   16b0c:	e9c0 3300 	strd	r3, r3, [r0]
}
   16b10:	4770      	bx	lr

00016b12 <unpend_thread_no_timeout>:
{
   16b12:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   16b14:	f7ff fff5 	bl	16b02 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   16b18:	7b43      	ldrb	r3, [r0, #13]
   16b1a:	f023 0302 	bic.w	r3, r3, #2
   16b1e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   16b20:	2300      	movs	r3, #0
   16b22:	6083      	str	r3, [r0, #8]
}
   16b24:	bd08      	pop	{r3, pc}

00016b26 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   16b26:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   16b2a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   16b2e:	4283      	cmp	r3, r0
		return b2 - b1;
   16b30:	bf14      	ite	ne
   16b32:	1ac0      	subne	r0, r0, r3
	return 0;
   16b34:	2000      	moveq	r0, #0
}
   16b36:	4770      	bx	lr

00016b38 <add_to_waitq_locked>:
{
   16b38:	b538      	push	{r3, r4, r5, lr}
   16b3a:	4604      	mov	r4, r0
   16b3c:	460d      	mov	r5, r1
	unready_thread(thread);
   16b3e:	f7fb f8e7 	bl	11d10 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   16b42:	7b63      	ldrb	r3, [r4, #13]
   16b44:	f043 0302 	orr.w	r3, r3, #2
   16b48:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   16b4a:	b1e5      	cbz	r5, 16b86 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   16b4c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   16b4e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16b50:	429d      	cmp	r5, r3
   16b52:	d109      	bne.n	16b68 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   16b54:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   16b56:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   16b5a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16b5c:	606c      	str	r4, [r5, #4]
}
   16b5e:	e012      	b.n	16b86 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   16b60:	686a      	ldr	r2, [r5, #4]
   16b62:	4293      	cmp	r3, r2
   16b64:	d0f6      	beq.n	16b54 <add_to_waitq_locked+0x1c>
   16b66:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16b68:	2b00      	cmp	r3, #0
   16b6a:	d0f3      	beq.n	16b54 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   16b6c:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   16b70:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   16b74:	428a      	cmp	r2, r1
   16b76:	d0f3      	beq.n	16b60 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   16b78:	4291      	cmp	r1, r2
   16b7a:	ddf1      	ble.n	16b60 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   16b7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16b7e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   16b82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   16b84:	605c      	str	r4, [r3, #4]
}
   16b86:	bd38      	pop	{r3, r4, r5, pc}

00016b88 <z_ready_thread>:
{
   16b88:	b510      	push	{r4, lr}
   16b8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   16b8e:	f3ef 8411 	mrs	r4, BASEPRI
   16b92:	f383 8812 	msr	BASEPRI_MAX, r3
   16b96:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   16b9a:	f7fb f885 	bl	11ca8 <ready_thread>
	__asm__ volatile(
   16b9e:	f384 8811 	msr	BASEPRI, r4
   16ba2:	f3bf 8f6f 	isb	sy
}
   16ba6:	bd10      	pop	{r4, pc}

00016ba8 <z_sched_wake_thread>:
{
   16ba8:	b538      	push	{r3, r4, r5, lr}
   16baa:	4604      	mov	r4, r0
	__asm__ volatile(
   16bac:	f04f 0340 	mov.w	r3, #64	; 0x40
   16bb0:	f3ef 8511 	mrs	r5, BASEPRI
   16bb4:	f383 8812 	msr	BASEPRI_MAX, r3
   16bb8:	f3bf 8f6f 	isb	sy
		if (!killed) {
   16bbc:	7b43      	ldrb	r3, [r0, #13]
   16bbe:	f013 0f28 	tst.w	r3, #40	; 0x28
   16bc2:	d10b      	bne.n	16bdc <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   16bc4:	6883      	ldr	r3, [r0, #8]
   16bc6:	b10b      	cbz	r3, 16bcc <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   16bc8:	f7ff ffa3 	bl	16b12 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16bcc:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   16bce:	b951      	cbnz	r1, 16be6 <z_sched_wake_thread+0x3e>
   16bd0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   16bd4:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   16bd6:	4620      	mov	r0, r4
   16bd8:	f7fb f866 	bl	11ca8 <ready_thread>
	__asm__ volatile(
   16bdc:	f385 8811 	msr	BASEPRI, r5
   16be0:	f3bf 8f6f 	isb	sy
}
   16be4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   16be6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   16bea:	e7f3      	b.n	16bd4 <z_sched_wake_thread+0x2c>

00016bec <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   16bec:	2101      	movs	r1, #1
   16bee:	3818      	subs	r0, #24
   16bf0:	f7ff bfda 	b.w	16ba8 <z_sched_wake_thread>

00016bf4 <z_unpend_first_thread>:
{
   16bf4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   16bf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   16bfa:	f3ef 8511 	mrs	r5, BASEPRI
   16bfe:	f383 8812 	msr	BASEPRI_MAX, r3
   16c02:	f3bf 8f6f 	isb	sy
	return list->head == list;
   16c06:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c08:	42a0      	cmp	r0, r4
   16c0a:	d00d      	beq.n	16c28 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   16c0c:	b134      	cbz	r4, 16c1c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   16c0e:	4620      	mov	r0, r4
   16c10:	f7ff ff7f 	bl	16b12 <unpend_thread_no_timeout>
   16c14:	f104 0018 	add.w	r0, r4, #24
   16c18:	f000 f869 	bl	16cee <z_abort_timeout>
	__asm__ volatile(
   16c1c:	f385 8811 	msr	BASEPRI, r5
   16c20:	f3bf 8f6f 	isb	sy
}
   16c24:	4620      	mov	r0, r4
   16c26:	bd38      	pop	{r3, r4, r5, pc}
   16c28:	2400      	movs	r4, #0
   16c2a:	e7f7      	b.n	16c1c <z_unpend_first_thread+0x28>

00016c2c <z_unpend_thread>:
{
   16c2c:	b510      	push	{r4, lr}
   16c2e:	4601      	mov	r1, r0
	__asm__ volatile(
   16c30:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c34:	f3ef 8411 	mrs	r4, BASEPRI
   16c38:	f383 8812 	msr	BASEPRI_MAX, r3
   16c3c:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   16c40:	6883      	ldr	r3, [r0, #8]
   16c42:	b10b      	cbz	r3, 16c48 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   16c44:	f7ff ff65 	bl	16b12 <unpend_thread_no_timeout>
	__asm__ volatile(
   16c48:	f384 8811 	msr	BASEPRI, r4
   16c4c:	f3bf 8f6f 	isb	sy
}
   16c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16c54:	f101 0018 	add.w	r0, r1, #24
   16c58:	f000 b849 	b.w	16cee <z_abort_timeout>

00016c5c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16c5c:	4603      	mov	r3, r0
   16c5e:	b920      	cbnz	r0, 16c6a <z_reschedule_irqlock+0xe>
   16c60:	f3ef 8205 	mrs	r2, IPSR
   16c64:	b90a      	cbnz	r2, 16c6a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   16c66:	f7f4 bd91 	b.w	b78c <arch_swap>
   16c6a:	f383 8811 	msr	BASEPRI, r3
   16c6e:	f3bf 8f6f 	isb	sy
}
   16c72:	4770      	bx	lr

00016c74 <z_reschedule_unlocked>:
	__asm__ volatile(
   16c74:	f04f 0340 	mov.w	r3, #64	; 0x40
   16c78:	f3ef 8011 	mrs	r0, BASEPRI
   16c7c:	f383 8812 	msr	BASEPRI_MAX, r3
   16c80:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   16c84:	f7ff bfea 	b.w	16c5c <z_reschedule_irqlock>

00016c88 <z_unpend_all>:
{
   16c88:	b538      	push	{r3, r4, r5, lr}
   16c8a:	4605      	mov	r5, r0
	int need_sched = 0;
   16c8c:	2000      	movs	r0, #0
	return list->head == list;
   16c8e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c90:	42a5      	cmp	r5, r4
   16c92:	d000      	beq.n	16c96 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16c94:	b904      	cbnz	r4, 16c98 <z_unpend_all+0x10>
}
   16c96:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   16c98:	4620      	mov	r0, r4
   16c9a:	f7ff ffc7 	bl	16c2c <z_unpend_thread>
		z_ready_thread(thread);
   16c9e:	4620      	mov	r0, r4
   16ca0:	f7ff ff72 	bl	16b88 <z_ready_thread>
		need_sched = 1;
   16ca4:	2001      	movs	r0, #1
   16ca6:	e7f2      	b.n	16c8e <z_unpend_all+0x6>

00016ca8 <z_sched_wake>:
{
   16ca8:	b538      	push	{r3, r4, r5, lr}
   16caa:	f04f 0340 	mov.w	r3, #64	; 0x40
   16cae:	f3ef 8511 	mrs	r5, BASEPRI
   16cb2:	f383 8812 	msr	BASEPRI_MAX, r3
   16cb6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   16cba:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16cbc:	42a0      	cmp	r0, r4
   16cbe:	d012      	beq.n	16ce6 <z_sched_wake+0x3e>
		if (thread != NULL) {
   16cc0:	b19c      	cbz	r4, 16cea <z_sched_wake+0x42>
   16cc2:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   16cc4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   16cc6:	4620      	mov	r0, r4
   16cc8:	f7ff ff23 	bl	16b12 <unpend_thread_no_timeout>
   16ccc:	f104 0018 	add.w	r0, r4, #24
   16cd0:	f000 f80d 	bl	16cee <z_abort_timeout>
			ready_thread(thread);
   16cd4:	4620      	mov	r0, r4
   16cd6:	f7fa ffe7 	bl	11ca8 <ready_thread>
			ret = true;
   16cda:	2001      	movs	r0, #1
	__asm__ volatile(
   16cdc:	f385 8811 	msr	BASEPRI, r5
   16ce0:	f3bf 8f6f 	isb	sy
}
   16ce4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   16ce6:	2000      	movs	r0, #0
   16ce8:	e7f8      	b.n	16cdc <z_sched_wake+0x34>
   16cea:	4620      	mov	r0, r4
   16cec:	e7f6      	b.n	16cdc <z_sched_wake+0x34>

00016cee <z_abort_timeout>:
{
   16cee:	b510      	push	{r4, lr}
	__asm__ volatile(
   16cf0:	f04f 0240 	mov.w	r2, #64	; 0x40
   16cf4:	f3ef 8411 	mrs	r4, BASEPRI
   16cf8:	f382 8812 	msr	BASEPRI_MAX, r2
   16cfc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   16d00:	6803      	ldr	r3, [r0, #0]
   16d02:	b13b      	cbz	r3, 16d14 <z_abort_timeout+0x26>
			remove_timeout(to);
   16d04:	f7fb fad4 	bl	122b0 <remove_timeout>
			ret = 0;
   16d08:	2000      	movs	r0, #0
	__asm__ volatile(
   16d0a:	f384 8811 	msr	BASEPRI, r4
   16d0e:	f3bf 8f6f 	isb	sy
}
   16d12:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   16d14:	f06f 0015 	mvn.w	r0, #21
   16d18:	e7f7      	b.n	16d0a <z_abort_timeout+0x1c>

00016d1a <z_get_next_timeout_expiry>:
{
   16d1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   16d1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d20:	f3ef 8411 	mrs	r4, BASEPRI
   16d24:	f383 8812 	msr	BASEPRI_MAX, r3
   16d28:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   16d2c:	f7fb faa0 	bl	12270 <next_timeout>
	__asm__ volatile(
   16d30:	f384 8811 	msr	BASEPRI, r4
   16d34:	f3bf 8f6f 	isb	sy
}
   16d38:	bd10      	pop	{r4, pc}

00016d3a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   16d3a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   16d3c:	f7fb fbb4 	bl	124a8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   16d40:	bd08      	pop	{r3, pc}

00016d42 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   16d42:	b108      	cbz	r0, 16d48 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   16d44:	f7f5 b8e0 	b.w	bf08 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   16d48:	4770      	bx	lr

00016d4a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16d4a:	f1b1 3fff 	cmp.w	r1, #4294967295
   16d4e:	bf08      	it	eq
   16d50:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   16d54:	b538      	push	{r3, r4, r5, lr}
   16d56:	460c      	mov	r4, r1
   16d58:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16d5a:	d014      	beq.n	16d86 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16d5c:	4308      	orrs	r0, r1
   16d5e:	d103      	bne.n	16d68 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   16d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   16d64:	f7fb bba0 	b.w	124a8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   16d68:	f06f 0001 	mvn.w	r0, #1
   16d6c:	1b40      	subs	r0, r0, r5
   16d6e:	f04f 33ff 	mov.w	r3, #4294967295
   16d72:	eb63 0101 	sbc.w	r1, r3, r1
   16d76:	2900      	cmp	r1, #0
   16d78:	da04      	bge.n	16d84 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   16d7a:	f7fb fb95 	bl	124a8 <sys_clock_tick_get>
   16d7e:	1940      	adds	r0, r0, r5
   16d80:	eb41 0104 	adc.w	r1, r1, r4
}
   16d84:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   16d86:	f04f 30ff 	mov.w	r0, #4294967295
   16d8a:	4601      	mov	r1, r0
   16d8c:	e7fa      	b.n	16d84 <sys_clock_timeout_end_calc+0x3a>

00016d8e <add_event>:
{
   16d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d90:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   16d92:	e9d0 1300 	ldrd	r1, r3, [r0]
   16d96:	4288      	cmp	r0, r1
   16d98:	4604      	mov	r4, r0
   16d9a:	d105      	bne.n	16da8 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   16d9c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   16d9e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   16da2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16da4:	6065      	str	r5, [r4, #4]
   16da6:	e01d      	b.n	16de4 <add_event+0x56>
	if ((pending == NULL) ||
   16da8:	2b00      	cmp	r3, #0
   16daa:	d0f7      	beq.n	16d9c <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   16dac:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   16dae:	b100      	cbz	r0, 16db2 <add_event+0x24>
   16db0:	3860      	subs	r0, #96	; 0x60
   16db2:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   16db6:	4639      	mov	r1, r7
   16db8:	f7ff feb5 	bl	16b26 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   16dbc:	2800      	cmp	r0, #0
   16dbe:	dced      	bgt.n	16d9c <add_event+0xe>
	return list->head == list;
   16dc0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16dc2:	42b4      	cmp	r4, r6
   16dc4:	d0ea      	beq.n	16d9c <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   16dc6:	2e00      	cmp	r6, #0
   16dc8:	d0e8      	beq.n	16d9c <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   16dca:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   16dcc:	b101      	cbz	r1, 16dd0 <add_event+0x42>
   16dce:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   16dd0:	4638      	mov	r0, r7
   16dd2:	f7ff fea8 	bl	16b26 <z_sched_prio_cmp>
   16dd6:	2800      	cmp	r0, #0
   16dd8:	dd05      	ble.n	16de6 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   16dda:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   16ddc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   16de0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   16de2:	6075      	str	r5, [r6, #4]
}
   16de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   16de6:	6863      	ldr	r3, [r4, #4]
   16de8:	429e      	cmp	r6, r3
   16dea:	d0d7      	beq.n	16d9c <add_event+0xe>
   16dec:	6836      	ldr	r6, [r6, #0]
   16dee:	e7ea      	b.n	16dc6 <add_event+0x38>

00016df0 <register_events>:
{
   16df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   16df4:	2500      	movs	r5, #0
{
   16df6:	468b      	mov	fp, r1
   16df8:	4614      	mov	r4, r2
   16dfa:	461f      	mov	r7, r3
   16dfc:	4682      	mov	sl, r0
	int events_registered = 0;
   16dfe:	462e      	mov	r6, r5
	event->poller = NULL;
   16e00:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   16e02:	455d      	cmp	r5, fp
   16e04:	db02      	blt.n	16e0c <register_events+0x1c>
}
   16e06:	4630      	mov	r0, r6
   16e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   16e0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16e10:	f3ef 8911 	mrs	r9, BASEPRI
   16e14:	f383 8812 	msr	BASEPRI_MAX, r3
   16e18:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   16e1c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   16e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16e24:	3b01      	subs	r3, #1
   16e26:	2b07      	cmp	r3, #7
   16e28:	d80f      	bhi.n	16e4a <register_events+0x5a>
   16e2a:	e8df f003 	tbb	[pc, r3]
   16e2e:	041e      	.short	0x041e
   16e30:	0e0e0a0e 	.word	0x0e0e0a0e
   16e34:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   16e36:	f8da 3010 	ldr.w	r3, [sl, #16]
   16e3a:	689b      	ldr	r3, [r3, #8]
   16e3c:	b12b      	cbz	r3, 16e4a <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   16e3e:	2302      	movs	r3, #2
   16e40:	e020      	b.n	16e84 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   16e42:	f8da 3010 	ldr.w	r3, [sl, #16]
   16e46:	681b      	ldr	r3, [r3, #0]
   16e48:	bb8b      	cbnz	r3, 16eae <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   16e4a:	bb47      	cbnz	r7, 16e9e <register_events+0xae>
   16e4c:	7823      	ldrb	r3, [r4, #0]
   16e4e:	b333      	cbz	r3, 16e9e <register_events+0xae>
	switch (event->type) {
   16e50:	f89a 300d 	ldrb.w	r3, [sl, #13]
   16e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16e58:	3b01      	subs	r3, #1
   16e5a:	2b07      	cmp	r3, #7
   16e5c:	d830      	bhi.n	16ec0 <register_events+0xd0>
   16e5e:	e8df f003 	tbb	[pc, r3]
   16e62:	2833      	.short	0x2833
   16e64:	2f2f282f 	.word	0x2f2f282f
   16e68:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   16e6a:	f8da 3010 	ldr.w	r3, [sl, #16]
   16e6e:	689b      	ldr	r3, [r3, #8]
   16e70:	2b00      	cmp	r3, #0
   16e72:	d0ea      	beq.n	16e4a <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   16e74:	2301      	movs	r3, #1
   16e76:	e005      	b.n	16e84 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   16e78:	f8da 3010 	ldr.w	r3, [sl, #16]
   16e7c:	6a1b      	ldr	r3, [r3, #32]
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d0e3      	beq.n	16e4a <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   16e82:	2310      	movs	r3, #16
	event->state |= state;
   16e84:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   16e88:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   16e8c:	f3c2 3186 	ubfx	r1, r2, #14, #7
   16e90:	430b      	orrs	r3, r1
   16e92:	f363 3294 	bfi	r2, r3, #14, #7
   16e96:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   16e9a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   16e9e:	f389 8811 	msr	BASEPRI, r9
   16ea2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   16ea6:	3501      	adds	r5, #1
   16ea8:	f10a 0a14 	add.w	sl, sl, #20
   16eac:	e7a9      	b.n	16e02 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   16eae:	2304      	movs	r3, #4
   16eb0:	e7e8      	b.n	16e84 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   16eb2:	f8da 0010 	ldr.w	r0, [sl, #16]
   16eb6:	4622      	mov	r2, r4
   16eb8:	4651      	mov	r1, sl
   16eba:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   16ebc:	f7ff ff67 	bl	16d8e <add_event>
	event->poller = poller;
   16ec0:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   16ec4:	3601      	adds	r6, #1
   16ec6:	e7ea      	b.n	16e9e <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   16ec8:	f8da 0010 	ldr.w	r0, [sl, #16]
   16ecc:	4622      	mov	r2, r4
   16ece:	4651      	mov	r1, sl
   16ed0:	e7f4      	b.n	16ebc <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   16ed2:	f8da 0010 	ldr.w	r0, [sl, #16]
   16ed6:	4622      	mov	r2, r4
   16ed8:	4651      	mov	r1, sl
   16eda:	3024      	adds	r0, #36	; 0x24
   16edc:	e7ee      	b.n	16ebc <register_events+0xcc>

00016ede <signal_poll_event>:
{
   16ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   16ee2:	6884      	ldr	r4, [r0, #8]
{
   16ee4:	4605      	mov	r5, r0
   16ee6:	460e      	mov	r6, r1
	if (poller != NULL) {
   16ee8:	b144      	cbz	r4, 16efc <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   16eea:	7863      	ldrb	r3, [r4, #1]
   16eec:	2b01      	cmp	r3, #1
   16eee:	d12e      	bne.n	16f4e <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   16ef0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   16ef4:	f013 0302 	ands.w	r3, r3, #2
   16ef8:	d10a      	bne.n	16f10 <signal_poll_event+0x32>
		poller->is_polling = false;
   16efa:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   16efc:	68eb      	ldr	r3, [r5, #12]
   16efe:	f3c3 3286 	ubfx	r2, r3, #14, #7
   16f02:	4316      	orrs	r6, r2
	event->poller = NULL;
   16f04:	2000      	movs	r0, #0
	event->state |= state;
   16f06:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   16f0a:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   16f0c:	60eb      	str	r3, [r5, #12]
	return retcode;
   16f0e:	e03e      	b.n	16f8e <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   16f10:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   16f14:	f1b3 3fff 	cmp.w	r3, #4294967295
   16f18:	bf08      	it	eq
   16f1a:	f112 0f02 	cmneq.w	r2, #2
   16f1e:	d032      	beq.n	16f86 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   16f20:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   16f24:	4640      	mov	r0, r8
   16f26:	f7ff fe81 	bl	16c2c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   16f2a:	2e08      	cmp	r6, #8
   16f2c:	bf0c      	ite	eq
   16f2e:	f06f 0303 	mvneq.w	r3, #3
   16f32:	2300      	movne	r3, #0
   16f34:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16f36:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   16f3a:	06db      	lsls	r3, r3, #27
   16f3c:	d109      	bne.n	16f52 <signal_poll_event+0x74>
   16f3e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   16f42:	b937      	cbnz	r7, 16f52 <signal_poll_event+0x74>
	z_ready_thread(thread);
   16f44:	4640      	mov	r0, r8
   16f46:	f7ff fe1f 	bl	16b88 <z_ready_thread>
		poller->is_polling = false;
   16f4a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   16f4c:	e7d6      	b.n	16efc <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   16f4e:	2b02      	cmp	r3, #2
   16f50:	d001      	beq.n	16f56 <signal_poll_event+0x78>
		poller->is_polling = false;
   16f52:	2300      	movs	r3, #0
   16f54:	e7d1      	b.n	16efa <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   16f56:	7823      	ldrb	r3, [r4, #0]
   16f58:	2b00      	cmp	r3, #0
   16f5a:	d0cf      	beq.n	16efc <signal_poll_event+0x1e>
   16f5c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   16f60:	2f00      	cmp	r7, #0
   16f62:	d0f2      	beq.n	16f4a <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   16f64:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   16f68:	f1a4 0914 	sub.w	r9, r4, #20
   16f6c:	f104 0014 	add.w	r0, r4, #20
   16f70:	f7ff febd 	bl	16cee <z_abort_timeout>
		twork->poll_result = 0;
   16f74:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   16f78:	4649      	mov	r1, r9
   16f7a:	4638      	mov	r0, r7
   16f7c:	f7ff fd96 	bl	16aac <z_work_submit_to_queue>
		poller->is_polling = false;
   16f80:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   16f84:	e7ba      	b.n	16efc <signal_poll_event+0x1e>
		poller->is_polling = false;
   16f86:	2300      	movs	r3, #0
   16f88:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   16f8a:	f06f 000a 	mvn.w	r0, #10
}
   16f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016f92 <clear_event_registrations>:
	while (num_events--) {
   16f92:	2314      	movs	r3, #20
{
   16f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f96:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   16f9a:	2400      	movs	r4, #0
	switch (event->type) {
   16f9c:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   16fa0:	b901      	cbnz	r1, 16fa4 <clear_event_registrations+0x12>
}
   16fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   16fa4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   16fa8:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   16fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16fb0:	2b08      	cmp	r3, #8
   16fb2:	f1a0 0714 	sub.w	r7, r0, #20
   16fb6:	d80c      	bhi.n	16fd2 <clear_event_registrations+0x40>
   16fb8:	fa26 f303 	lsr.w	r3, r6, r3
   16fbc:	07db      	lsls	r3, r3, #31
   16fbe:	d508      	bpl.n	16fd2 <clear_event_registrations+0x40>
	return node->next != NULL;
   16fc0:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   16fc4:	b12b      	cbz	r3, 16fd2 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   16fc6:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   16fca:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   16fcc:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   16fce:	e940 4405 	strd	r4, r4, [r0, #-20]
   16fd2:	f382 8811 	msr	BASEPRI, r2
   16fd6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16fda:	f04f 0340 	mov.w	r3, #64	; 0x40
   16fde:	f3ef 8211 	mrs	r2, BASEPRI
   16fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   16fe6:	f3bf 8f6f 	isb	sy
   16fea:	3901      	subs	r1, #1
   16fec:	4638      	mov	r0, r7
   16fee:	e7d7      	b.n	16fa0 <clear_event_registrations+0xe>

00016ff0 <z_handle_obj_poll_events>:
{
   16ff0:	4603      	mov	r3, r0
	return list->head == list;
   16ff2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   16ff4:	4283      	cmp	r3, r0
   16ff6:	d008      	beq.n	1700a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   16ff8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16ffc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16ffe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17000:	2300      	movs	r3, #0
	node->prev = NULL;
   17002:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   17006:	f7ff bf6a 	b.w	16ede <signal_poll_event>
}
   1700a:	4770      	bx	lr

0001700c <k_free>:
	if (ptr != NULL) {
   1700c:	b120      	cbz	r0, 17018 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1700e:	1f01      	subs	r1, r0, #4
   17010:	f850 0c04 	ldr.w	r0, [r0, #-4]
   17014:	f7ff bbee 	b.w	167f4 <k_heap_free>
}
   17018:	4770      	bx	lr

0001701a <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
   1701a:	bf00      	nop
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();

	return 0;
}
   1701c:	2000      	movs	r0, #0
   1701e:	4770      	bx	lr

00017020 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   17020:	4770      	bx	lr
	...
